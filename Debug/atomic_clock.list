
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001d48  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b628  08001fe0  08001fe0  00021fe0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0005034c  2**0
                  CONTENTS
  4 .rodata       00003cb0  0801d608  0801d608  0003d608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  080212b8  080212b8  000412b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  080212c0  080212c0  000412c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080212c4  080212c4  000412c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  080212c8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007114  20000350  08021614  00050350  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007464  08021614  00057464  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00060000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0005034c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0005037a  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003afa4  00000000  00000000  000503bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007811  00000000  00000000  0008b361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a38  00000000  00000000  00092b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000021ae  00000000  00000000  000955b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000126fd  00000000  00000000  0009775e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000418fd  00000000  00000000  000a9e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a9998  00000000  00000000  000eb758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c3d8  00000000  00000000  002950f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  002a14c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <telnet_client_init>:
 * @return ERR_VAL if invalid arguments are given
 *         ERR_OK if connect request has been sent
 *         other err_t values if connect request couldn't be sent
 */
bool telnet_client_init(void)
{
       0:	b580      	push	{r7, lr}
       2:	b084      	sub	sp, #16
       4:	af00      	add	r7, sp, #0
	/* create new tcp pcb */
	struct tcp_pcb *tpcb;
	tpcb = tcp_new();
       6:	f001 fe3f 	bl	1c88 <__tcp_new_veneer>
       a:	60f8      	str	r0, [r7, #12]

	/* Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, LDC_ADDR1, LDC_ADDR2, LDC_ADDR3, LDC_ADDR4);
       c:	4b21      	ldr	r3, [pc, #132]	; (94 <telnet_client_init+0x94>)
       e:	607b      	str	r3, [r7, #4]
	#ifdef TELNET_DEBUG
		printf("[Telnet Client] Beginning TCP connection.\n\r");
		printf("[Telnet Client] Connecting to %s on port %d.\n\r", ipaddr_ntoa(&destIPADDR), LDC_PORT);
	#endif //TELNET_DEBUG
	err_t ret = tcp_connect(tpcb, &destIPADDR, LDC_PORT, telnet_client_connected);
      10:	1d39      	adds	r1, r7, #4
      12:	4b21      	ldr	r3, [pc, #132]	; (98 <telnet_client_init+0x98>)
      14:	f242 22b6 	movw	r2, #8886	; 0x22b6
      18:	68f8      	ldr	r0, [r7, #12]
      1a:	f001 fe19 	bl	1c50 <__tcp_connect_veneer>
      1e:	4603      	mov	r3, r0
      20:	72fb      	strb	r3, [r7, #11]
	#ifdef TELNET_DEBUG
		printf("[Telnet Client] Called tcp_connect, awaiting callback.\n\r");
		printf("[Telnet Client] tcp_connect returned %i\n\r", ret);
	#endif //TELNET_DEBUG
	if(ret == ERR_OK) {//if the TCP connection request worked
      22:	f997 300b 	ldrsb.w	r3, [r7, #11]
      26:	2b00      	cmp	r3, #0
      28:	d128      	bne.n	7c <telnet_client_init+0x7c>
		ldc_comms_state = LDC_CONNECTED_IDLE;
      2a:	4b1c      	ldr	r3, [pc, #112]	; (9c <telnet_client_init+0x9c>)
      2c:	2201      	movs	r2, #1
      2e:	701a      	strb	r2, [r3, #0]
		start_timer(ETHERNET_TIMER);
      30:	4b1b      	ldr	r3, [pc, #108]	; (a0 <telnet_client_init+0xa0>)
      32:	681b      	ldr	r3, [r3, #0]
      34:	4618      	mov	r0, r3
      36:	f001 fcd9 	bl	19ec <start_timer>
		while ((ldc_comms_state == LDC_CONNECTED_IDLE) && (check_timer(ETHERNET_TIMER) < TELNET_TIMEOUT)) {//loop here until timeout or response is received
      3a:	bf00      	nop
      3c:	4b17      	ldr	r3, [pc, #92]	; (9c <telnet_client_init+0x9c>)
      3e:	781b      	ldrb	r3, [r3, #0]
      40:	2b01      	cmp	r3, #1
      42:	d109      	bne.n	58 <telnet_client_init+0x58>
      44:	4b16      	ldr	r3, [pc, #88]	; (a0 <telnet_client_init+0xa0>)
      46:	681b      	ldr	r3, [r3, #0]
      48:	4618      	mov	r0, r3
      4a:	f001 fcff 	bl	1a4c <check_timer>
      4e:	4603      	mov	r3, r0
      50:	f241 726f 	movw	r2, #5999	; 0x176f
      54:	4293      	cmp	r3, r2
      56:	d9f1      	bls.n	3c <telnet_client_init+0x3c>
		}
		stop_timer(ETHERNET_TIMER);
      58:	4b11      	ldr	r3, [pc, #68]	; (a0 <telnet_client_init+0xa0>)
      5a:	681b      	ldr	r3, [r3, #0]
      5c:	4618      	mov	r0, r3
      5e:	f001 fce3 	bl	1a28 <stop_timer>
		if(strncmp(ldc_comms_message, DEBUG_CONNECTED_MESSAGE, strlen(DEBUG_CONNECTED_MESSAGE)) == 0) {
      62:	2217      	movs	r2, #23
      64:	490f      	ldr	r1, [pc, #60]	; (a4 <telnet_client_init+0xa4>)
      66:	4810      	ldr	r0, [pc, #64]	; (a8 <telnet_client_init+0xa8>)
      68:	f001 fe2e 	bl	1cc8 <__strncmp_veneer>
      6c:	4603      	mov	r3, r0
      6e:	2b00      	cmp	r3, #0
      70:	d10a      	bne.n	88 <telnet_client_init+0x88>
			#ifdef LDC_DEBUG
				printf("Confirmation received - Connected to debug port");
      72:	480e      	ldr	r0, [pc, #56]	; (ac <telnet_client_init+0xac>)
      74:	f001 fe1c 	bl	1cb0 <__printf_veneer>
			#endif //LDC_DEBUG
			return (true);
      78:	2301      	movs	r3, #1
      7a:	e006      	b.n	8a <telnet_client_init+0x8a>
#ifdef SIMULATE_LDC
		printf("SIMULATING successful connection to debug port\n\r");
		return (true);
#endif //SIMULATE_LDC
	} else {
		printf("[Telnet Client] ERROR: tcp_connect returned %i\n\r", ret);
      7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
      80:	4619      	mov	r1, r3
      82:	480b      	ldr	r0, [pc, #44]	; (b0 <telnet_client_init+0xb0>)
      84:	f001 fe14 	bl	1cb0 <__printf_veneer>
	}
	return (false);
      88:	2300      	movs	r3, #0
}
      8a:	4618      	mov	r0, r3
      8c:	3710      	adds	r7, #16
      8e:	46bd      	mov	sp, r7
      90:	bd80      	pop	{r7, pc}
      92:	bf00      	nop
      94:	0b01a8c0 	.word	0x0b01a8c0
      98:	00000389 	.word	0x00000389
      9c:	20000374 	.word	0x20000374
      a0:	20000140 	.word	0x20000140
      a4:	0801d608 	.word	0x0801d608
      a8:	20000000 	.word	0x20000000
      ac:	0801d620 	.word	0x0801d620
      b0:	0801d650 	.word	0x0801d650

000000b4 <init_ldc_comms>:
/**
 * Initialise Ethernet comms with LDC501 and check ID
 * @return TRUE if expected ID confirmed
 */
bool init_ldc_comms(void)
{
      b4:	b580      	push	{r7, lr}
      b6:	af00      	add	r7, sp, #0
	ldc_tx("\r\n"); //return character
      b8:	480d      	ldr	r0, [pc, #52]	; (f0 <init_ldc_comms+0x3c>)
      ba:	f000 f86f 	bl	19c <ldc_tx>
	ldc_tx("uloc1\r\n"); //unlock comms
      be:	480d      	ldr	r0, [pc, #52]	; (f4 <init_ldc_comms+0x40>)
      c0:	f000 f86c 	bl	19c <ldc_tx>
//	ldc_tx("TEON1\r\n"); //Turn TEC on
//	ldc_tx("SILD159.90\r\n"); //Set laser current to 159.9mA
	if(ldc_query("*idn?\r\n")){; //request ID
      c4:	480c      	ldr	r0, [pc, #48]	; (f8 <init_ldc_comms+0x44>)
      c6:	f000 f8f5 	bl	2b4 <ldc_query>
      ca:	4603      	mov	r3, r0
      cc:	2b00      	cmp	r3, #0
      ce:	d00c      	beq.n	ea <init_ldc_comms+0x36>
//		printf("Successful command response\r\n");
		if(strncmp(ldc_comms_message, CONTROLLER_ID, strlen(CONTROLLER_ID)) == 0) {
      d0:	2232      	movs	r2, #50	; 0x32
      d2:	490a      	ldr	r1, [pc, #40]	; (fc <init_ldc_comms+0x48>)
      d4:	480a      	ldr	r0, [pc, #40]	; (100 <init_ldc_comms+0x4c>)
      d6:	f001 fdf7 	bl	1cc8 <__strncmp_veneer>
      da:	4603      	mov	r3, r0
      dc:	2b00      	cmp	r3, #0
      de:	d104      	bne.n	ea <init_ldc_comms+0x36>
			#ifdef LDC_DEBUG
		    	printf("[LDC] Expected controller ID received\r\n");
      e0:	4808      	ldr	r0, [pc, #32]	; (104 <init_ldc_comms+0x50>)
      e2:	f001 fe15 	bl	1d10 <__puts_veneer>
			#endif //LDC_DEBUG
		    return(true);
      e6:	2301      	movs	r3, #1
      e8:	e000      	b.n	ec <init_ldc_comms+0x38>
		}
	}
	return(false);
      ea:	2300      	movs	r3, #0
}
      ec:	4618      	mov	r0, r3
      ee:	bd80      	pop	{r7, pc}
      f0:	0801d684 	.word	0x0801d684
      f4:	0801d688 	.word	0x0801d688
      f8:	0801d690 	.word	0x0801d690
      fc:	0801d698 	.word	0x0801d698
     100:	20000000 	.word	0x20000000
     104:	0801d6cc 	.word	0x0801d6cc

00000108 <init_ldc_tec>:
/**
 * Initialise Ethernet comms with LDC501 and check ID
 * @return TRUE if expected ID confirmed
 */
bool init_ldc_tec(void)
{
     108:	b580      	push	{r7, lr}
     10a:	af00      	add	r7, sp, #0
	ldc_tx("TMOD1\r\n"); //Constant temperature mode
     10c:	481a      	ldr	r0, [pc, #104]	; (178 <init_ldc_tec+0x70>)
     10e:	f000 f845 	bl	19c <ldc_tx>
	ldc_tx("TEMP21.15\r\n"); //Set operating point of 21.15C
     112:	481a      	ldr	r0, [pc, #104]	; (17c <init_ldc_tec+0x74>)
     114:	f000 f842 	bl	19c <ldc_tx>
	ldc_tx("TEON1\r\n"); //Turn TEC on
     118:	4819      	ldr	r0, [pc, #100]	; (180 <init_ldc_tec+0x78>)
     11a:	f000 f83f 	bl	19c <ldc_tx>
	printf ("TEC powered up - allowing 5s for TEC to stabilise\r\n");
     11e:	4819      	ldr	r0, [pc, #100]	; (184 <init_ldc_tec+0x7c>)
     120:	f001 fdf6 	bl	1d10 <__puts_veneer>
	start_timer(ETHERNET_TIMER);
     124:	4b18      	ldr	r3, [pc, #96]	; (188 <init_ldc_tec+0x80>)
     126:	681b      	ldr	r3, [r3, #0]
     128:	4618      	mov	r0, r3
     12a:	f001 fc5f 	bl	19ec <start_timer>
	while (check_timer(ETHERNET_TIMER) < TEC_STABILISE_TIME) {//loop here for a few seconds
     12e:	e004      	b.n	13a <init_ldc_tec+0x32>
//			printf ("Spinning round loop waiting for a response");
	    /* Ethernet handling */
		/* This allows receipt of IMAX warning messages */
		ethernetif_input(&gnetif);
     130:	4816      	ldr	r0, [pc, #88]	; (18c <init_ldc_tec+0x84>)
     132:	f001 fdb1 	bl	1c98 <__ethernetif_input_veneer>
		sys_check_timeouts();
     136:	f001 fdd3 	bl	1ce0 <__sys_check_timeouts_veneer>
	while (check_timer(ETHERNET_TIMER) < TEC_STABILISE_TIME) {//loop here for a few seconds
     13a:	4b13      	ldr	r3, [pc, #76]	; (188 <init_ldc_tec+0x80>)
     13c:	681b      	ldr	r3, [r3, #0]
     13e:	4618      	mov	r0, r3
     140:	f001 fc84 	bl	1a4c <check_timer>
     144:	4603      	mov	r3, r0
     146:	f242 720f 	movw	r2, #9999	; 0x270f
     14a:	4293      	cmp	r3, r2
     14c:	d9f0      	bls.n	130 <init_ldc_tec+0x28>
	}
	stop_timer(ETHERNET_TIMER);
     14e:	4b0e      	ldr	r3, [pc, #56]	; (188 <init_ldc_tec+0x80>)
     150:	681b      	ldr	r3, [r3, #0]
     152:	4618      	mov	r0, r3
     154:	f001 fc68 	bl	1a28 <stop_timer>
	if(ldc_query("TTRD?\r\n")){; //read laser temperature
     158:	480d      	ldr	r0, [pc, #52]	; (190 <init_ldc_tec+0x88>)
     15a:	f000 f8ab 	bl	2b4 <ldc_query>
     15e:	4603      	mov	r3, r0
     160:	2b00      	cmp	r3, #0
     162:	d005      	beq.n	170 <init_ldc_tec+0x68>
		printf ("Measured diode temperature: %s\r\n", ldc_comms_message);
     164:	490b      	ldr	r1, [pc, #44]	; (194 <init_ldc_tec+0x8c>)
     166:	480c      	ldr	r0, [pc, #48]	; (198 <init_ldc_tec+0x90>)
     168:	f001 fda2 	bl	1cb0 <__printf_veneer>
		    return(true);
     16c:	2301      	movs	r3, #1
     16e:	e000      	b.n	172 <init_ldc_tec+0x6a>
	}
	return(false);
     170:	2300      	movs	r3, #0
}
     172:	4618      	mov	r0, r3
     174:	bd80      	pop	{r7, pc}
     176:	bf00      	nop
     178:	0801d6f4 	.word	0x0801d6f4
     17c:	0801d6fc 	.word	0x0801d6fc
     180:	0801d708 	.word	0x0801d708
     184:	0801d710 	.word	0x0801d710
     188:	20000140 	.word	0x20000140
     18c:	20000784 	.word	0x20000784
     190:	0801d744 	.word	0x0801d744
     194:	20000000 	.word	0x20000000
     198:	0801d74c 	.word	0x0801d74c

0000019c <ldc_tx>:

/* Send a string to the LDC501 over telnet */
void ldc_tx(const char str[])
{
     19c:	b590      	push	{r4, r7, lr}
     19e:	b085      	sub	sp, #20
     1a0:	af00      	add	r7, sp, #0
     1a2:	6078      	str	r0, [r7, #4]
	strcpy(ldc_comms_command, str); //make a copy of str in case a retry is required
     1a4:	6879      	ldr	r1, [r7, #4]
     1a6:	4815      	ldr	r0, [pc, #84]	; (1fc <ldc_tx+0x60>)
     1a8:	f001 fd8a 	bl	1cc0 <__strcpy_veneer>
	uint16_t len = strlen(str);
     1ac:	6878      	ldr	r0, [r7, #4]
     1ae:	f001 fd6f 	bl	1c90 <__strlen_veneer>
     1b2:	4603      	mov	r3, r0
     1b4:	81fb      	strh	r3, [r7, #14]
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL); //allocate pbuf
     1b6:	4b12      	ldr	r3, [pc, #72]	; (200 <_Min_Heap_Size>)
     1b8:	681c      	ldr	r4, [r3, #0]
     1ba:	89fb      	ldrh	r3, [r7, #14]
     1bc:	f44f 72c1 	mov.w	r2, #386	; 0x182
     1c0:	4619      	mov	r1, r3
     1c2:	2036      	movs	r0, #54	; 0x36
     1c4:	f001 fdb8 	bl	1d38 <__pbuf_alloc_veneer>
     1c8:	4603      	mov	r3, r0
     1ca:	60a3      	str	r3, [r4, #8]
	pbuf_take(tcTx->p, (char*)str, len); // copy data to pbuf
     1cc:	4b0c      	ldr	r3, [pc, #48]	; (200 <_Min_Heap_Size>)
     1ce:	681b      	ldr	r3, [r3, #0]
     1d0:	689b      	ldr	r3, [r3, #8]
     1d2:	89fa      	ldrh	r2, [r7, #14]
     1d4:	6879      	ldr	r1, [r7, #4]
     1d6:	4618      	mov	r0, r3
     1d8:	f001 fd66 	bl	1ca8 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx); //send it
     1dc:	4b09      	ldr	r3, [pc, #36]	; (204 <_Min_Heap_Size+0x4>)
     1de:	681b      	ldr	r3, [r3, #0]
     1e0:	4a07      	ldr	r2, [pc, #28]	; (200 <_Min_Heap_Size>)
     1e2:	6812      	ldr	r2, [r2, #0]
     1e4:	4611      	mov	r1, r2
     1e6:	4618      	mov	r0, r3
     1e8:	f000 f9c9 	bl	57e <telnet_client_send>
	#ifdef LDC_DEBUG
//		printf("[LDC] Sent over Ethernet: %s\r\n", str);
		printf("[LDC] Sent over Ethernet: %s", str); //no newline as one is included with the telnet message
     1ec:	6879      	ldr	r1, [r7, #4]
     1ee:	4806      	ldr	r0, [pc, #24]	; (208 <_Min_Heap_Size+0x8>)
     1f0:	f001 fd5e 	bl	1cb0 <__printf_veneer>
	#endif //LDC_DEBUG
	/*disabled as the pbuf is already null.
	 * This causes assertion errors but worried as this could overflow
	 */
	//pbuf_free(tcTx->p); //free up the pbuf
}
     1f4:	bf00      	nop
     1f6:	3714      	adds	r7, #20
     1f8:	46bd      	mov	sp, r7
     1fa:	bd90      	pop	{r4, r7, pc}
     1fc:	20000104 	.word	0x20000104
     200:	2000036c 	.word	0x2000036c
     204:	20000370 	.word	0x20000370
     208:	0801d770 	.word	0x0801d770

0000020c <set_laser_current>:

/* Set laser current */
void set_laser_current(const double i)
{
     20c:	b580      	push	{r7, lr}
     20e:	b086      	sub	sp, #24
     210:	af00      	add	r7, sp, #0
     212:	ed87 0b00 	vstr	d0, [r7]
	char string[12];
//	uint8_t len = sprintf (string, "SILD%.2f\n", i);
	sprintf (string, "SILD%.2f\n", i);
     216:	f107 000c 	add.w	r0, r7, #12
     21a:	e9d7 2300 	ldrd	r2, r3, [r7]
     21e:	4906      	ldr	r1, [pc, #24]	; (238 <set_laser_current+0x2c>)
     220:	f001 fd56 	bl	1cd0 <__sprintf_veneer>
	ldc_tx(string); //send command
     224:	f107 030c 	add.w	r3, r7, #12
     228:	4618      	mov	r0, r3
     22a:	f7ff ffb7 	bl	19c <ldc_tx>
}
     22e:	bf00      	nop
     230:	3718      	adds	r7, #24
     232:	46bd      	mov	sp, r7
     234:	bd80      	pop	{r7, pc}
     236:	bf00      	nop
     238:	0801d790 	.word	0x0801d790

0000023c <set_laser_state>:

/* Power up/down laser */
bool set_laser_state(bool laserstate)
{
     23c:	b580      	push	{r7, lr}
     23e:	b082      	sub	sp, #8
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	71fb      	strb	r3, [r7, #7]
	if (laserstate) {//power on requested
     246:	79fb      	ldrb	r3, [r7, #7]
     248:	2b00      	cmp	r3, #0
     24a:	d017      	beq.n	27c <set_laser_state+0x40>
		if (ldc_query("ILOC?")) {//check interlock status
     24c:	4811      	ldr	r0, [pc, #68]	; (294 <set_laser_state+0x58>)
     24e:	f000 f831 	bl	2b4 <ldc_query>
     252:	4603      	mov	r3, r0
     254:	2b00      	cmp	r3, #0
     256:	d017      	beq.n	288 <set_laser_state+0x4c>
			printf("Response to interlock query: %s\r\n", ldc_comms_message);
     258:	490f      	ldr	r1, [pc, #60]	; (298 <set_laser_state+0x5c>)
     25a:	4810      	ldr	r0, [pc, #64]	; (29c <set_laser_state+0x60>)
     25c:	f001 fd28 	bl	1cb0 <__printf_veneer>
			if (ldc_comms_message[0] == "0") {
     260:	4b0d      	ldr	r3, [pc, #52]	; (298 <set_laser_state+0x5c>)
     262:	781b      	ldrb	r3, [r3, #0]
     264:	461a      	mov	r2, r3
     266:	4b0e      	ldr	r3, [pc, #56]	; (2a0 <set_laser_state+0x64>)
     268:	429a      	cmp	r2, r3
     26a:	d103      	bne.n	274 <set_laser_state+0x38>
//				(strncmp(ldc_comms_message, 0, 1) == 0)
				printf("Bingely bon, laser on\r\n");
     26c:	480d      	ldr	r0, [pc, #52]	; (2a4 <set_laser_state+0x68>)
     26e:	f001 fd4f 	bl	1d10 <__puts_veneer>
     272:	e009      	b.n	288 <set_laser_state+0x4c>
//				ldc_tx("LDON1"); //turn on laser diode
			} else {
			printf("INTERLOCK OPEN: Can't power up laser diode\r\n");
     274:	480c      	ldr	r0, [pc, #48]	; (2a8 <set_laser_state+0x6c>)
     276:	f001 fd4b 	bl	1d10 <__puts_veneer>
     27a:	e005      	b.n	288 <set_laser_state+0x4c>
			}
		}
	} else {
		ldc_tx("LDON0"); //turn off laser diode
     27c:	480b      	ldr	r0, [pc, #44]	; (2ac <set_laser_state+0x70>)
     27e:	f7ff ff8d 	bl	19c <ldc_tx>
		printf("Laser diode powered down\r\n");
     282:	480b      	ldr	r0, [pc, #44]	; (2b0 <set_laser_state+0x74>)
     284:	f001 fd44 	bl	1d10 <__puts_veneer>
	}
}
     288:	bf00      	nop
     28a:	4618      	mov	r0, r3
     28c:	3708      	adds	r7, #8
     28e:	46bd      	mov	sp, r7
     290:	bd80      	pop	{r7, pc}
     292:	bf00      	nop
     294:	0801d79c 	.word	0x0801d79c
     298:	20000000 	.word	0x20000000
     29c:	0801d7a4 	.word	0x0801d7a4
     2a0:	0801d7c8 	.word	0x0801d7c8
     2a4:	0801d7cc 	.word	0x0801d7cc
     2a8:	0801d7e4 	.word	0x0801d7e4
     2ac:	0801d810 	.word	0x0801d810
     2b0:	0801d818 	.word	0x0801d818

000002b4 <ldc_query>:

/* Send a command to the LDC501 over telnet and await response */
bool ldc_query(const char str[])
{
     2b4:	b580      	push	{r7, lr}
     2b6:	b082      	sub	sp, #8
     2b8:	af00      	add	r7, sp, #0
     2ba:	6078      	str	r0, [r7, #4]
	ldc_comms_retries = 0;
     2bc:	4b29      	ldr	r3, [pc, #164]	; (364 <ldc_query+0xb0>)
     2be:	2200      	movs	r2, #0
     2c0:	701a      	strb	r2, [r3, #0]
	while (ldc_comms_retries < TELNET_RETRIES) {
     2c2:	e03f      	b.n	344 <ldc_query+0x90>
#ifdef LDC_DEBUG
		printf ("[LDC] Entered command while loop\r\n");
     2c4:	4828      	ldr	r0, [pc, #160]	; (368 <ldc_query+0xb4>)
     2c6:	f001 fd23 	bl	1d10 <__puts_veneer>
		printf ("[LDC] Started Ethernet timer\r\n");
     2ca:	4828      	ldr	r0, [pc, #160]	; (36c <ldc_query+0xb8>)
     2cc:	f001 fd20 	bl	1d10 <__puts_veneer>
#endif //LDC_DEBUG
		start_timer(ETHERNET_TIMER);
     2d0:	4b27      	ldr	r3, [pc, #156]	; (370 <ldc_query+0xbc>)
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	4618      	mov	r0, r3
     2d6:	f001 fb89 	bl	19ec <start_timer>
		ldc_tx(str); //Send string
     2da:	6878      	ldr	r0, [r7, #4]
     2dc:	f7ff ff5e 	bl	19c <ldc_tx>
		ldc_comms_state = LDC_AWAITING_RESPONSE; //set state to flag that a response is needed before sending anything further
     2e0:	4b24      	ldr	r3, [pc, #144]	; (374 <ldc_query+0xc0>)
     2e2:	2202      	movs	r2, #2
     2e4:	701a      	strb	r2, [r3, #0]
		while ((ldc_comms_state == LDC_AWAITING_RESPONSE) && (check_timer(ETHERNET_TIMER) < TELNET_TIMEOUT)) {//loop here until timeout or response is received
     2e6:	e004      	b.n	2f2 <ldc_query+0x3e>
//			printf ("Spinning round loop waiting for a response");
			/* Ethernet handling */
			ethernetif_input(&gnetif);
     2e8:	4823      	ldr	r0, [pc, #140]	; (378 <ldc_query+0xc4>)
     2ea:	f001 fcd5 	bl	1c98 <__ethernetif_input_veneer>
			sys_check_timeouts();
     2ee:	f001 fcf7 	bl	1ce0 <__sys_check_timeouts_veneer>
		while ((ldc_comms_state == LDC_AWAITING_RESPONSE) && (check_timer(ETHERNET_TIMER) < TELNET_TIMEOUT)) {//loop here until timeout or response is received
     2f2:	4b20      	ldr	r3, [pc, #128]	; (374 <ldc_query+0xc0>)
     2f4:	781b      	ldrb	r3, [r3, #0]
     2f6:	2b02      	cmp	r3, #2
     2f8:	d109      	bne.n	30e <ldc_query+0x5a>
     2fa:	4b1d      	ldr	r3, [pc, #116]	; (370 <ldc_query+0xbc>)
     2fc:	681b      	ldr	r3, [r3, #0]
     2fe:	4618      	mov	r0, r3
     300:	f001 fba4 	bl	1a4c <check_timer>
     304:	4603      	mov	r3, r0
     306:	f241 726f 	movw	r2, #5999	; 0x176f
     30a:	4293      	cmp	r3, r2
     30c:	d9ec      	bls.n	2e8 <ldc_query+0x34>
		}
		stop_timer(ETHERNET_TIMER);
     30e:	4b18      	ldr	r3, [pc, #96]	; (370 <ldc_query+0xbc>)
     310:	681b      	ldr	r3, [r3, #0]
     312:	4618      	mov	r0, r3
     314:	f001 fb88 	bl	1a28 <stop_timer>
		if (ldc_comms_state == LDC_RESPONSE_RECEIVED) {
     318:	4b16      	ldr	r3, [pc, #88]	; (374 <ldc_query+0xc0>)
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	2b03      	cmp	r3, #3
     31e:	d104      	bne.n	32a <ldc_query+0x76>
			#ifdef LDC_DEBUG
				printf ("[LDC] Response to query received\r\n");
     320:	4816      	ldr	r0, [pc, #88]	; (37c <ldc_query+0xc8>)
     322:	f001 fcf5 	bl	1d10 <__puts_veneer>
			#endif //LDC_DEBUG
			return (true); //success
     326:	2301      	movs	r3, #1
     328:	e018      	b.n	35c <ldc_query+0xa8>
		}
		ldc_comms_retries++; //increase retry count
     32a:	4b0e      	ldr	r3, [pc, #56]	; (364 <ldc_query+0xb0>)
     32c:	781b      	ldrb	r3, [r3, #0]
     32e:	3301      	adds	r3, #1
     330:	b2da      	uxtb	r2, r3
     332:	4b0c      	ldr	r3, [pc, #48]	; (364 <ldc_query+0xb0>)
     334:	701a      	strb	r2, [r3, #0]
		#ifdef LDC_DEBUG
			printf ("[LDC] Issued command %s but no response. Retry %u\r\n", str, ldc_comms_retries);
     336:	4b0b      	ldr	r3, [pc, #44]	; (364 <ldc_query+0xb0>)
     338:	781b      	ldrb	r3, [r3, #0]
     33a:	461a      	mov	r2, r3
     33c:	6879      	ldr	r1, [r7, #4]
     33e:	4810      	ldr	r0, [pc, #64]	; (380 <ldc_query+0xcc>)
     340:	f001 fcb6 	bl	1cb0 <__printf_veneer>
	while (ldc_comms_retries < TELNET_RETRIES) {
     344:	4b07      	ldr	r3, [pc, #28]	; (364 <ldc_query+0xb0>)
     346:	781b      	ldrb	r3, [r3, #0]
     348:	2b00      	cmp	r3, #0
     34a:	d0bb      	beq.n	2c4 <ldc_query+0x10>
		#endif //LDC_DEBUG
	}
	#ifdef LDC_DEBUG
		printf ("[LDC] Command %s failed after %u attempts\r\n", str, ldc_comms_retries);
     34c:	4b05      	ldr	r3, [pc, #20]	; (364 <ldc_query+0xb0>)
     34e:	781b      	ldrb	r3, [r3, #0]
     350:	461a      	mov	r2, r3
     352:	6879      	ldr	r1, [r7, #4]
     354:	480b      	ldr	r0, [pc, #44]	; (384 <ldc_query+0xd0>)
     356:	f001 fcab 	bl	1cb0 <__printf_veneer>
	#endif //LDC_DEBUG
	return (false); //failure after timeout
     35a:	2300      	movs	r3, #0
}
     35c:	4618      	mov	r0, r3
     35e:	3708      	adds	r7, #8
     360:	46bd      	mov	sp, r7
     362:	bd80      	pop	{r7, pc}
     364:	20000375 	.word	0x20000375
     368:	0801d834 	.word	0x0801d834
     36c:	0801d858 	.word	0x0801d858
     370:	20000140 	.word	0x20000140
     374:	20000374 	.word	0x20000374
     378:	20000784 	.word	0x20000784
     37c:	0801d878 	.word	0x0801d878
     380:	0801d89c 	.word	0x0801d89c
     384:	0801d8d0 	.word	0x0801d8d0

00000388 <telnet_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t telnet_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
     388:	b580      	push	{r7, lr}
     38a:	b086      	sub	sp, #24
     38c:	af00      	add	r7, sp, #0
     38e:	60f8      	str	r0, [r7, #12]
     390:	60b9      	str	r1, [r7, #8]
     392:	4613      	mov	r3, r2
     394:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure tc to maintain tcp connection information */
  tc = (struct telnet_client_struct *)mem_malloc(sizeof(struct telnet_client_struct));
     396:	200c      	movs	r0, #12
     398:	f001 fc4a 	bl	1c30 <__mem_malloc_veneer>
     39c:	6138      	str	r0, [r7, #16]
  if (tc != NULL)
     39e:	693b      	ldr	r3, [r7, #16]
     3a0:	2b00      	cmp	r3, #0
     3a2:	d01f      	beq.n	3e4 <telnet_client_connected+0x5c>
  {
    tc->state = TC_CONNECTED;
     3a4:	693b      	ldr	r3, [r7, #16]
     3a6:	2201      	movs	r2, #1
     3a8:	701a      	strb	r2, [r3, #0]
    tc->pcb = newpcb;
     3aa:	693b      	ldr	r3, [r7, #16]
     3ac:	68ba      	ldr	r2, [r7, #8]
     3ae:	605a      	str	r2, [r3, #4]
    tc->retries = 0;
     3b0:	693b      	ldr	r3, [r7, #16]
     3b2:	2200      	movs	r2, #0
     3b4:	705a      	strb	r2, [r3, #1]
    tc->p = NULL;
     3b6:	693b      	ldr	r3, [r7, #16]
     3b8:	2200      	movs	r2, #0
     3ba:	609a      	str	r2, [r3, #8]

    /* pass newly allocated tc structure as argument to newpcb */
    tcp_arg(newpcb, tc);
     3bc:	6939      	ldr	r1, [r7, #16]
     3be:	68b8      	ldr	r0, [r7, #8]
     3c0:	f001 fc96 	bl	1cf0 <__tcp_arg_veneer>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, telnet_client_recv);
     3c4:	490d      	ldr	r1, [pc, #52]	; (3fc <telnet_client_connected+0x74>)
     3c6:	68b8      	ldr	r0, [r7, #8]
     3c8:	f001 fcaa 	bl	1d20 <__tcp_recv_veneer>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, telnet_client_poll, 0);
     3cc:	2200      	movs	r2, #0
     3ce:	490c      	ldr	r1, [pc, #48]	; (400 <_Min_Stack_Size>)
     3d0:	68b8      	ldr	r0, [r7, #8]
     3d2:	f001 fcad 	bl	1d30 <__tcp_poll_veneer>

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, telnet_client_sent);
     3d6:	490b      	ldr	r1, [pc, #44]	; (404 <_Min_Stack_Size+0x4>)
     3d8:	68b8      	ldr	r0, [r7, #8]
     3da:	f001 fc91 	bl	1d00 <__tcp_sent_veneer>
    #ifdef TELNET_DEBUG
		printf("[Telnet Client] Successful connection.\n\r");
	#endif //TELNET_DEBUG

//	telnet_initialised = 1;
    ret_err = ERR_OK;
     3de:	2300      	movs	r3, #0
     3e0:	75fb      	strb	r3, [r7, #23]
     3e2:	e005      	b.n	3f0 <telnet_client_connected+0x68>
  }
  else
  {
    /*  close tcp connection */
    telnet_client_connection_close(newpcb, tc);
     3e4:	6939      	ldr	r1, [r7, #16]
     3e6:	68b8      	ldr	r0, [r7, #8]
     3e8:	f000 f917 	bl	61a <telnet_client_connection_close>
	#ifdef TELNET_DEBUG
		printf("[Telnet Client] Connection closed due to memory error.\n\r");
	#endif //TELNET_DEBUG
    /* return memory error */
    ret_err = ERR_MEM;
     3ec:	23ff      	movs	r3, #255	; 0xff
     3ee:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
     3f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     3f4:	4618      	mov	r0, r3
     3f6:	3718      	adds	r7, #24
     3f8:	46bd      	mov	sp, r7
     3fa:	bd80      	pop	{r7, pc}
     3fc:	00000409 	.word	0x00000409
     400:	000004fd 	.word	0x000004fd
     404:	00000545 	.word	0x00000545

00000408 <telnet_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t telnet_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
     408:	b580      	push	{r7, lr}
     40a:	b086      	sub	sp, #24
     40c:	af00      	add	r7, sp, #0
     40e:	60f8      	str	r0, [r7, #12]
     410:	60b9      	str	r1, [r7, #8]
     412:	607a      	str	r2, [r7, #4]
     414:	70fb      	strb	r3, [r7, #3]
    printf("[Telnet Client] Received data from server.\n\r");
  #endif //TELNET_DEBUG
  struct telnet_client_struct *tc;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
     416:	68fb      	ldr	r3, [r7, #12]
     418:	2b00      	cmp	r3, #0
     41a:	d106      	bne.n	42a <telnet_client_recv+0x22>
     41c:	4b34      	ldr	r3, [pc, #208]	; (4f0 <telnet_client_recv+0xe8>)
     41e:	f240 12d7 	movw	r2, #471	; 0x1d7
     422:	4934      	ldr	r1, [pc, #208]	; (4f4 <telnet_client_recv+0xec>)
     424:	4834      	ldr	r0, [pc, #208]	; (4f8 <telnet_client_recv+0xf0>)
     426:	f001 fc43 	bl	1cb0 <__printf_veneer>

  tc = (struct telnet_client_struct *)arg;
     42a:	68fb      	ldr	r3, [r7, #12]
     42c:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
     42e:	687b      	ldr	r3, [r7, #4]
     430:	2b00      	cmp	r3, #0
     432:	d10d      	bne.n	450 <telnet_client_recv+0x48>
  {
    /* remote host closed connection */
    tc->state = TC_CLOSING;
     434:	693b      	ldr	r3, [r7, #16]
     436:	2203      	movs	r2, #3
     438:	701a      	strb	r2, [r3, #0]
    if(tc->p == NULL)
     43a:	693b      	ldr	r3, [r7, #16]
     43c:	689b      	ldr	r3, [r3, #8]
     43e:	2b00      	cmp	r3, #0
     440:	d103      	bne.n	44a <telnet_client_recv+0x42>
    {
       /* we're done sending, close connection */
       telnet_client_connection_close(tpcb, tc);
     442:	6939      	ldr	r1, [r7, #16]
     444:	68b8      	ldr	r0, [r7, #8]
     446:	f000 f8e8 	bl	61a <telnet_client_connection_close>
//      tcp_sent(tpcb, telnet_client_sent);

      /* send remaining data*/
//      telnet_client_send(tpcb, tc);
    }
    ret_err = ERR_OK;
     44a:	2300      	movs	r3, #0
     44c:	75fb      	strb	r3, [r7, #23]
     44e:	e048      	b.n	4e2 <telnet_client_recv+0xda>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
     450:	f997 3003 	ldrsb.w	r3, [r7, #3]
     454:	2b00      	cmp	r3, #0
     456:	d00b      	beq.n	470 <telnet_client_recv+0x68>
  {
    /* free received pbuf*/
    if (p != NULL)
     458:	687b      	ldr	r3, [r7, #4]
     45a:	2b00      	cmp	r3, #0
     45c:	d005      	beq.n	46a <telnet_client_recv+0x62>
    {
      tc->p = NULL;
     45e:	693b      	ldr	r3, [r7, #16]
     460:	2200      	movs	r2, #0
     462:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
     464:	6878      	ldr	r0, [r7, #4]
     466:	f001 fbdf 	bl	1c28 <__pbuf_free_veneer>
    }
    ret_err = err;
     46a:	78fb      	ldrb	r3, [r7, #3]
     46c:	75fb      	strb	r3, [r7, #23]
     46e:	e038      	b.n	4e2 <telnet_client_recv+0xda>
  }
  else if(tc->state == TC_CONNECTED)
     470:	693b      	ldr	r3, [r7, #16]
     472:	781b      	ldrb	r3, [r3, #0]
     474:	2b01      	cmp	r3, #1
     476:	d113      	bne.n	4a0 <telnet_client_recv+0x98>
  {
   /* store reference to incoming pbuf (chain) */
    tc->p = p;
     478:	693b      	ldr	r3, [r7, #16]
     47a:	687a      	ldr	r2, [r7, #4]
     47c:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, telnet_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
     47e:	687b      	ldr	r3, [r7, #4]
     480:	891b      	ldrh	r3, [r3, #8]
     482:	4619      	mov	r1, r3
     484:	68b8      	ldr	r0, [r7, #8]
     486:	f001 fc3f 	bl	1d08 <__tcp_recved_veneer>
      printf("[Telnet Client] Acknowledging received data.\n\r");
    #endif //TELNET_DEBUG

    /* handle the received data */
//    example_client_handle(tpcb, tc);
    telnet_client_handle(tpcb, tc, p);
     48a:	687a      	ldr	r2, [r7, #4]
     48c:	6939      	ldr	r1, [r7, #16]
     48e:	68b8      	ldr	r0, [r7, #8]
     490:	f000 f8ea 	bl	668 <telnet_client_handle>

    pbuf_free(p);
     494:	6878      	ldr	r0, [r7, #4]
     496:	f001 fbc7 	bl	1c28 <__pbuf_free_veneer>

    ret_err = ERR_OK;
     49a:	2300      	movs	r3, #0
     49c:	75fb      	strb	r3, [r7, #23]
     49e:	e020      	b.n	4e2 <telnet_client_recv+0xda>
  }
  else if(tc->state == TC_CLOSING)
     4a0:	693b      	ldr	r3, [r7, #16]
     4a2:	781b      	ldrb	r3, [r3, #0]
     4a4:	2b03      	cmp	r3, #3
     4a6:	d10e      	bne.n	4c6 <telnet_client_recv+0xbe>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	891b      	ldrh	r3, [r3, #8]
     4ac:	4619      	mov	r1, r3
     4ae:	68b8      	ldr	r0, [r7, #8]
     4b0:	f001 fc2a 	bl	1d08 <__tcp_recved_veneer>
    tc->p = NULL;
     4b4:	693b      	ldr	r3, [r7, #16]
     4b6:	2200      	movs	r2, #0
     4b8:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     4ba:	6878      	ldr	r0, [r7, #4]
     4bc:	f001 fbb4 	bl	1c28 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     4c0:	2300      	movs	r3, #0
     4c2:	75fb      	strb	r3, [r7, #23]
     4c4:	e00d      	b.n	4e2 <telnet_client_recv+0xda>
  }
  else
  {
    /* unknown tc->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	891b      	ldrh	r3, [r3, #8]
     4ca:	4619      	mov	r1, r3
     4cc:	68b8      	ldr	r0, [r7, #8]
     4ce:	f001 fc1b 	bl	1d08 <__tcp_recved_veneer>
    tc->p = NULL;
     4d2:	693b      	ldr	r3, [r7, #16]
     4d4:	2200      	movs	r2, #0
     4d6:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     4d8:	6878      	ldr	r0, [r7, #4]
     4da:	f001 fba5 	bl	1c28 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     4de:	2300      	movs	r3, #0
     4e0:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
     4e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     4e6:	4618      	mov	r0, r3
     4e8:	3718      	adds	r7, #24
     4ea:	46bd      	mov	sp, r7
     4ec:	bd80      	pop	{r7, pc}
     4ee:	bf00      	nop
     4f0:	0801d8fc 	.word	0x0801d8fc
     4f4:	0801d914 	.word	0x0801d914
     4f8:	0801d920 	.word	0x0801d920

000004fc <telnet_client_poll>:


static err_t telnet_client_poll(void *arg, struct tcp_pcb *tpcb)
{
     4fc:	b580      	push	{r7, lr}
     4fe:	b084      	sub	sp, #16
     500:	af00      	add	r7, sp, #0
     502:	6078      	str	r0, [r7, #4]
     504:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct telnet_client_struct *tc;

  tc = (struct telnet_client_struct *)arg;
     506:	687b      	ldr	r3, [r7, #4]
     508:	60bb      	str	r3, [r7, #8]
  if (tc != NULL)
     50a:	68bb      	ldr	r3, [r7, #8]
     50c:	2b00      	cmp	r3, #0
     50e:	d00e      	beq.n	52e <telnet_client_poll+0x32>
  {
    if (tc->p != NULL)
     510:	68bb      	ldr	r3, [r7, #8]
     512:	689b      	ldr	r3, [r3, #8]
     514:	2b00      	cmp	r3, #0
     516:	d107      	bne.n	528 <telnet_client_poll+0x2c>
//      telnet_client_send(tpcb, tc);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(tc->state == TC_CLOSING)
     518:	68bb      	ldr	r3, [r7, #8]
     51a:	781b      	ldrb	r3, [r3, #0]
     51c:	2b03      	cmp	r3, #3
     51e:	d103      	bne.n	528 <telnet_client_poll+0x2c>
      {
        /*  close tcp connection */
        telnet_client_connection_close(tpcb, tc);
     520:	68b9      	ldr	r1, [r7, #8]
     522:	6838      	ldr	r0, [r7, #0]
     524:	f000 f879 	bl	61a <telnet_client_connection_close>
      }
    }
    ret_err = ERR_OK;
     528:	2300      	movs	r3, #0
     52a:	73fb      	strb	r3, [r7, #15]
     52c:	e004      	b.n	538 <telnet_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
     52e:	6838      	ldr	r0, [r7, #0]
     530:	f001 fbd2 	bl	1cd8 <__tcp_abort_veneer>
    ret_err = ERR_ABRT;
     534:	23f3      	movs	r3, #243	; 0xf3
     536:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
     538:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
     53c:	4618      	mov	r0, r3
     53e:	3710      	adds	r7, #16
     540:	46bd      	mov	sp, r7
     542:	bd80      	pop	{r7, pc}

00000544 <telnet_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t telnet_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
     544:	b580      	push	{r7, lr}
     546:	b086      	sub	sp, #24
     548:	af00      	add	r7, sp, #0
     54a:	60f8      	str	r0, [r7, #12]
     54c:	60b9      	str	r1, [r7, #8]
     54e:	4613      	mov	r3, r2
     550:	80fb      	strh	r3, [r7, #6]
	#endif //TELNET_DEBUG
  struct telnet_client_struct *tc;

  LWIP_UNUSED_ARG(len);

  tc = (struct telnet_client_struct *)arg;
     552:	68fb      	ldr	r3, [r7, #12]
     554:	617b      	str	r3, [r7, #20]
  tc->retries = 0;
     556:	697b      	ldr	r3, [r7, #20]
     558:	2200      	movs	r2, #0
     55a:	705a      	strb	r2, [r3, #1]

  if(tc->p != NULL)
     55c:	697b      	ldr	r3, [r7, #20]
     55e:	689b      	ldr	r3, [r3, #8]
     560:	2b00      	cmp	r3, #0
     562:	d107      	bne.n	574 <telnet_client_sent+0x30>
//    telnet_client_send(tpcb, tc);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(tc->state == TC_CLOSING)
     564:	697b      	ldr	r3, [r7, #20]
     566:	781b      	ldrb	r3, [r3, #0]
     568:	2b03      	cmp	r3, #3
     56a:	d103      	bne.n	574 <telnet_client_sent+0x30>
      telnet_client_connection_close(tpcb, tc);
     56c:	6979      	ldr	r1, [r7, #20]
     56e:	68b8      	ldr	r0, [r7, #8]
     570:	f000 f853 	bl	61a <telnet_client_connection_close>
  }
  return ERR_OK;
     574:	2300      	movs	r3, #0
}
     576:	4618      	mov	r0, r3
     578:	3718      	adds	r7, #24
     57a:	46bd      	mov	sp, r7
     57c:	bd80      	pop	{r7, pc}

0000057e <telnet_client_send>:


/** A function to send the data to the server
  */
static void telnet_client_send(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     57e:	b580      	push	{r7, lr}
     580:	b086      	sub	sp, #24
     582:	af00      	add	r7, sp, #0
     584:	6078      	str	r0, [r7, #4]
     586:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Sending data to server.\n\r");
  #endif //TELNET_DEBUG
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
     588:	2300      	movs	r3, #0
     58a:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
     58c:	e031      	b.n	5f2 <telnet_client_send+0x74>
         (tc->p != NULL) &&
         (tc->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from tc structure */
    ptr = tc->p;
     58e:	683b      	ldr	r3, [r7, #0]
     590:	689b      	ldr	r3, [r3, #8]
     592:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
     594:	693b      	ldr	r3, [r7, #16]
     596:	6859      	ldr	r1, [r3, #4]
     598:	693b      	ldr	r3, [r7, #16]
     59a:	895a      	ldrh	r2, [r3, #10]
     59c:	2301      	movs	r3, #1
     59e:	6878      	ldr	r0, [r7, #4]
     5a0:	f001 fb4a 	bl	1c38 <__tcp_write_veneer>
     5a4:	4603      	mov	r3, r0
     5a6:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
     5a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
     5ac:	2b00      	cmp	r3, #0
     5ae:	d118      	bne.n	5e2 <telnet_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
     5b0:	693b      	ldr	r3, [r7, #16]
     5b2:	895b      	ldrh	r3, [r3, #10]
     5b4:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      tc->p = ptr->next;
     5b6:	693b      	ldr	r3, [r7, #16]
     5b8:	681a      	ldr	r2, [r3, #0]
     5ba:	683b      	ldr	r3, [r7, #0]
     5bc:	609a      	str	r2, [r3, #8]

      if(tc->p != NULL)
     5be:	683b      	ldr	r3, [r7, #0]
     5c0:	689b      	ldr	r3, [r3, #8]
     5c2:	2b00      	cmp	r3, #0
     5c4:	d004      	beq.n	5d0 <telnet_client_send+0x52>
      {
        /* increment reference count for tc->p */
        pbuf_ref(tc->p);
     5c6:	683b      	ldr	r3, [r7, #0]
     5c8:	689b      	ldr	r3, [r3, #8]
     5ca:	4618      	mov	r0, r3
     5cc:	f001 fb44 	bl	1c58 <__pbuf_ref_veneer>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
     5d0:	6938      	ldr	r0, [r7, #16]
     5d2:	f001 fb29 	bl	1c28 <__pbuf_free_veneer>
     5d6:	4603      	mov	r3, r0
     5d8:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
     5da:	7b7b      	ldrb	r3, [r7, #13]
     5dc:	2b00      	cmp	r3, #0
     5de:	d0f7      	beq.n	5d0 <telnet_client_send+0x52>
     5e0:	e007      	b.n	5f2 <telnet_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
     5e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
     5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
     5ea:	d102      	bne.n	5f2 <telnet_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     tc->p = ptr;
     5ec:	683b      	ldr	r3, [r7, #0]
     5ee:	693a      	ldr	r2, [r7, #16]
     5f0:	609a      	str	r2, [r3, #8]
         (tc->p != NULL) &&
     5f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
     5f6:	2b00      	cmp	r3, #0
     5f8:	d10b      	bne.n	612 <telnet_client_send+0x94>
     5fa:	683b      	ldr	r3, [r7, #0]
     5fc:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
     5fe:	2b00      	cmp	r3, #0
     600:	d007      	beq.n	612 <telnet_client_send+0x94>
         (tc->p->len <= tcp_sndbuf(tpcb)))
     602:	683b      	ldr	r3, [r7, #0]
     604:	689b      	ldr	r3, [r3, #8]
     606:	895a      	ldrh	r2, [r3, #10]
     608:	687b      	ldr	r3, [r7, #4]
     60a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (tc->p != NULL) &&
     60e:	429a      	cmp	r2, r3
     610:	d9bd      	bls.n	58e <telnet_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
     612:	bf00      	nop
     614:	3718      	adds	r7, #24
     616:	46bd      	mov	sp, r7
     618:	bd80      	pop	{r7, pc}

0000061a <telnet_client_connection_close>:


static void telnet_client_connection_close(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     61a:	b580      	push	{r7, lr}
     61c:	b082      	sub	sp, #8
     61e:	af00      	add	r7, sp, #0
     620:	6078      	str	r0, [r7, #4]
     622:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Closing connection.\n\r");
  #endif //TELNET_DEBUG
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
     624:	2100      	movs	r1, #0
     626:	6878      	ldr	r0, [r7, #4]
     628:	f001 fb62 	bl	1cf0 <__tcp_arg_veneer>
  tcp_sent(tpcb, NULL);
     62c:	2100      	movs	r1, #0
     62e:	6878      	ldr	r0, [r7, #4]
     630:	f001 fb66 	bl	1d00 <__tcp_sent_veneer>
  tcp_recv(tpcb, NULL);
     634:	2100      	movs	r1, #0
     636:	6878      	ldr	r0, [r7, #4]
     638:	f001 fb72 	bl	1d20 <__tcp_recv_veneer>
  tcp_err(tpcb, NULL);
     63c:	2100      	movs	r1, #0
     63e:	6878      	ldr	r0, [r7, #4]
     640:	f001 fb02 	bl	1c48 <__tcp_err_veneer>
  tcp_poll(tpcb, NULL, 0);
     644:	2200      	movs	r2, #0
     646:	2100      	movs	r1, #0
     648:	6878      	ldr	r0, [r7, #4]
     64a:	f001 fb71 	bl	1d30 <__tcp_poll_veneer>

  /* delete tc structure */
  if (tc != NULL)
     64e:	683b      	ldr	r3, [r7, #0]
     650:	2b00      	cmp	r3, #0
     652:	d002      	beq.n	65a <telnet_client_connection_close+0x40>
  {
    mem_free(tc);
     654:	6838      	ldr	r0, [r7, #0]
     656:	f001 fb4f 	bl	1cf8 <__mem_free_veneer>
  }

  /* close tcp connection */
  tcp_close(tpcb);
     65a:	6878      	ldr	r0, [r7, #4]
     65c:	f001 fb04 	bl	1c68 <__tcp_close_veneer>
}
     660:	bf00      	nop
     662:	3708      	adds	r7, #8
     664:	46bd      	mov	sp, r7
     666:	bd80      	pop	{r7, pc}

00000668 <telnet_client_handle>:

/* Function to handle the incoming TCP Data */

static void telnet_client_handle (struct tcp_pcb *tpcb, struct telnet_client_struct *tc, struct pbuf *p)
{
     668:	b580      	push	{r7, lr}
     66a:	b086      	sub	sp, #24
     66c:	af00      	add	r7, sp, #0
     66e:	60f8      	str	r0, [r7, #12]
     670:	60b9      	str	r1, [r7, #8]
     672:	607a      	str	r2, [r7, #4]
	//function has been called as telnet_client_handle(tpcb, tc, p);
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Handling incoming data.\n\r");
  #endif //TELNET_DEBUG
    /* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
     674:	68fb      	ldr	r3, [r7, #12]
     676:	685b      	ldr	r3, [r3, #4]
     678:	613b      	str	r3, [r7, #16]
//	uint16_t inPort = tpcb->remote_port;

	/* Extract the IP */
//	char *remIP = ipaddr_ntoa(&inIP);
	tcTx = tc;
     67a:	4a1e      	ldr	r2, [pc, #120]	; (6f4 <telnet_client_handle+0x8c>)
     67c:	68bb      	ldr	r3, [r7, #8]
     67e:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
     680:	4a1d      	ldr	r2, [pc, #116]	; (6f8 <telnet_client_handle+0x90>)
     682:	68fb      	ldr	r3, [r7, #12]
     684:	6013      	str	r3, [r2, #0]

	if (p -> len != p -> tot_len) {//spans more that one buffer and I haven't allowed for this yet
     686:	687b      	ldr	r3, [r7, #4]
     688:	895a      	ldrh	r2, [r3, #10]
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	891b      	ldrh	r3, [r3, #8]
     68e:	429a      	cmp	r2, r3
     690:	d002      	beq.n	698 <telnet_client_handle+0x30>
		printf("[Telnet Client] ERROR - Received data spans more than one pbuf.\n\r");
     692:	481a      	ldr	r0, [pc, #104]	; (6fc <telnet_client_handle+0x94>)
     694:	f001 fb0c 	bl	1cb0 <__printf_veneer>
	}

	/* Copy payload into a string */
	uint16_t len = p -> len; //length of the payload
     698:	687b      	ldr	r3, [r7, #4]
     69a:	895b      	ldrh	r3, [r3, #10]
     69c:	82fb      	strh	r3, [r7, #22]
	memcpy(ldc_comms_message, p -> payload, p -> len); //copy the payload across
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	6859      	ldr	r1, [r3, #4]
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	895b      	ldrh	r3, [r3, #10]
     6a6:	461a      	mov	r2, r3
     6a8:	4815      	ldr	r0, [pc, #84]	; (700 <telnet_client_handle+0x98>)
     6aa:	f001 fad9 	bl	1c60 <__memcpy_veneer>
	ldc_comms_message[len] = '\0'; //assigns null character to terminate string
     6ae:	8afb      	ldrh	r3, [r7, #22]
     6b0:	4a13      	ldr	r2, [pc, #76]	; (700 <telnet_client_handle+0x98>)
     6b2:	2100      	movs	r1, #0
     6b4:	54d1      	strb	r1, [r2, r3]
	if(strncmp(ldc_comms_message, LDC_ERROR, strlen(LDC_ERROR)) == 0) {
     6b6:	220d      	movs	r2, #13
     6b8:	4912      	ldr	r1, [pc, #72]	; (704 <telnet_client_handle+0x9c>)
     6ba:	4811      	ldr	r0, [pc, #68]	; (700 <telnet_client_handle+0x98>)
     6bc:	f001 fb04 	bl	1cc8 <__strncmp_veneer>
     6c0:	4603      	mov	r3, r0
     6c2:	2b00      	cmp	r3, #0
     6c4:	d10a      	bne.n	6dc <telnet_client_handle+0x74>
		printf("LDC did not understand the last command\n\r");
     6c6:	4810      	ldr	r0, [pc, #64]	; (708 <telnet_client_handle+0xa0>)
     6c8:	f001 faf2 	bl	1cb0 <__printf_veneer>
		printf("RETRY: %s", ldc_comms_command);
     6cc:	490f      	ldr	r1, [pc, #60]	; (70c <telnet_client_handle+0xa4>)
     6ce:	4810      	ldr	r0, [pc, #64]	; (710 <telnet_client_handle+0xa8>)
     6d0:	f001 faee 	bl	1cb0 <__printf_veneer>
		ldc_tx(ldc_comms_command); //retry the last command
     6d4:	480d      	ldr	r0, [pc, #52]	; (70c <telnet_client_handle+0xa4>)
     6d6:	f7ff fd61 	bl	19c <ldc_tx>
     6da:	e002      	b.n	6e2 <telnet_client_handle+0x7a>
	} else {
		ldc_comms_state = LDC_RESPONSE_RECEIVED;
     6dc:	4b0d      	ldr	r3, [pc, #52]	; (714 <telnet_client_handle+0xac>)
     6de:	2203      	movs	r2, #3
     6e0:	701a      	strb	r2, [r3, #0]
	}
	#ifdef LDC_DEBUG
		printf("[LDC] Message received: %s",ldc_comms_message); //no newline as one is included with the telnet message received
     6e2:	4907      	ldr	r1, [pc, #28]	; (700 <telnet_client_handle+0x98>)
     6e4:	480c      	ldr	r0, [pc, #48]	; (718 <telnet_client_handle+0xb0>)
     6e6:	f001 fae3 	bl	1cb0 <__printf_veneer>
	#endif //LDC_DEBUG
}
     6ea:	bf00      	nop
     6ec:	3718      	adds	r7, #24
     6ee:	46bd      	mov	sp, r7
     6f0:	bd80      	pop	{r7, pc}
     6f2:	bf00      	nop
     6f4:	2000036c 	.word	0x2000036c
     6f8:	20000370 	.word	0x20000370
     6fc:	0801d948 	.word	0x0801d948
     700:	20000000 	.word	0x20000000
     704:	0801d98c 	.word	0x0801d98c
     708:	0801d99c 	.word	0x0801d99c
     70c:	20000104 	.word	0x20000104
     710:	0801d9c8 	.word	0x0801d9c8
     714:	20000374 	.word	0x20000374
     718:	0801d9d4 	.word	0x0801d9d4
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  {
    return 32U;
     71c:	00000000 	.word	0x00000000

00000720 <synth_writereg>:
  }
  return __builtin_clz(value);
     720:	b580      	push	{r7, lr}
     722:	b08a      	sub	sp, #40	; 0x28
     724:	af00      	add	r7, sp, #0
    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
     726:	60f8      	str	r0, [r7, #12]
     728:	60b9      	str	r1, [r7, #8]
     72a:	607a      	str	r2, [r7, #4]
     72c:	70fb      	strb	r3, [r7, #3]
     72e:	2300      	movs	r3, #0
     730:	627b      	str	r3, [r7, #36]	; 0x24
     732:	68fb      	ldr	r3, [r7, #12]
     734:	021a      	lsls	r2, r3, #8
     736:	68bb      	ldr	r3, [r7, #8]
     738:	00db      	lsls	r3, r3, #3
     73a:	4313      	orrs	r3, r2
     73c:	687a      	ldr	r2, [r7, #4]
     73e:	4313      	orrs	r3, r2
     740:	61fb      	str	r3, [r7, #28]
     742:	2200      	movs	r2, #0
     744:	f44f 7180 	mov.w	r1, #256	; 0x100
     748:	4830      	ldr	r0, [pc, #192]	; (80c <synth_writereg+0xec>)
     74a:	f001 facd 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     74e:	2200      	movs	r2, #0
     750:	f44f 6100 	mov.w	r1, #2048	; 0x800
     754:	482d      	ldr	r0, [pc, #180]	; (80c <synth_writereg+0xec>)
     756:	f001 fac7 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     75a:	2300      	movs	r3, #0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     75c:	623b      	str	r3, [r7, #32]
     75e:	e036      	b.n	7ce <synth_writereg+0xae>
     760:	2220      	movs	r2, #32
     762:	6a3b      	ldr	r3, [r7, #32]
  return result;
     764:	1ad3      	subs	r3, r2, r3
     766:	3b01      	subs	r3, #1
  if (value == 0U)
     768:	617b      	str	r3, [r7, #20]
     76a:	2201      	movs	r2, #1
     76c:	697b      	ldr	r3, [r7, #20]
    return 32U;
     76e:	fa02 f303 	lsl.w	r3, r2, r3
  return __builtin_clz(value);
     772:	461a      	mov	r2, r3
     774:	69fb      	ldr	r3, [r7, #28]
     776:	4013      	ands	r3, r2
     778:	2b00      	cmp	r3, #0
     77a:	bf14      	ite	ne
     77c:	2301      	movne	r3, #1
     77e:	2300      	moveq	r3, #0
     780:	b2db      	uxtb	r3, r3
     782:	461a      	mov	r2, r3
     784:	f44f 7100 	mov.w	r1, #512	; 0x200
     788:	4820      	ldr	r0, [pc, #128]	; (80c <synth_writereg+0xec>)
     78a:	f001 faad 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     78e:	2201      	movs	r2, #1
     790:	f44f 7180 	mov.w	r1, #256	; 0x100
     794:	481d      	ldr	r0, [pc, #116]	; (80c <synth_writereg+0xec>)
     796:	f001 faa7 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     79a:	2200      	movs	r2, #0
     79c:	f44f 7180 	mov.w	r1, #256	; 0x100
     7a0:	481a      	ldr	r0, [pc, #104]	; (80c <synth_writereg+0xec>)
     7a2:	f001 faa1 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     7a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     7aa:	4818      	ldr	r0, [pc, #96]	; (80c <synth_writereg+0xec>)
     7ac:	f001 fa64 	bl	1c78 <__HAL_GPIO_ReadPin_veneer>
  return result;
     7b0:	4603      	mov	r3, r0
     7b2:	4619      	mov	r1, r3
  if (value == 0U)
     7b4:	2220      	movs	r2, #32
     7b6:	6a3b      	ldr	r3, [r7, #32]
     7b8:	1ad3      	subs	r3, r2, r3
    return 32U;
     7ba:	3b01      	subs	r3, #1
     7bc:	fa01 f303 	lsl.w	r3, r1, r3
  return __builtin_clz(value);
     7c0:	461a      	mov	r2, r3
     7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7c4:	4313      	orrs	r3, r2
     7c6:	627b      	str	r3, [r7, #36]	; 0x24
     7c8:	6a3b      	ldr	r3, [r7, #32]
     7ca:	3301      	adds	r3, #1
     7cc:	623b      	str	r3, [r7, #32]
     7ce:	2220      	movs	r2, #32
     7d0:	6a3b      	ldr	r3, [r7, #32]
     7d2:	4293      	cmp	r3, r2
     7d4:	d3c4      	bcc.n	760 <synth_writereg+0x40>
     7d6:	2201      	movs	r2, #1
     7d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7dc:	480b      	ldr	r0, [pc, #44]	; (80c <synth_writereg+0xec>)
     7de:	f001 fa83 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     7e2:	78fb      	ldrb	r3, [r7, #3]
     7e4:	2b00      	cmp	r3, #0
     7e6:	d00c      	beq.n	802 <synth_writereg+0xe2>
     7e8:	68b8      	ldr	r0, [r7, #8]
     7ea:	f000 f813 	bl	814 <synth_readreg>
     7ee:	61b8      	str	r0, [r7, #24]
     7f0:	69ba      	ldr	r2, [r7, #24]
     7f2:	68fb      	ldr	r3, [r7, #12]
     7f4:	429a      	cmp	r2, r3
     7f6:	d004      	beq.n	802 <synth_writereg+0xe2>
     7f8:	4805      	ldr	r0, [pc, #20]	; (810 <synth_writereg+0xf0>)
     7fa:	f001 fa89 	bl	1d10 <__puts_veneer>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     7fe:	f001 fa3f 	bl	1c80 <__Error_Handler_veneer>
     802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     804:	4618      	mov	r0, r3
  return result;
     806:	3728      	adds	r7, #40	; 0x28
     808:	46bd      	mov	sp, r7
  if (value == 0U)
     80a:	bd80      	pop	{r7, pc}
     80c:	58020800 	.word	0x58020800
    return 32U;
     810:	0801dccc 	.word	0x0801dccc

00000814 <synth_readreg>:
  return __builtin_clz(value);
     814:	b580      	push	{r7, lr}
     816:	b084      	sub	sp, #16
     818:	af00      	add	r7, sp, #0
     81a:	6078      	str	r0, [r7, #4]
     81c:	2300      	movs	r3, #0
     81e:	2200      	movs	r2, #0
     820:	2100      	movs	r1, #0
     822:	6878      	ldr	r0, [r7, #4]
     824:	f7ff ff7c 	bl	720 <synth_writereg>
     828:	2300      	movs	r3, #0
     82a:	2200      	movs	r2, #0
     82c:	2100      	movs	r1, #0
     82e:	6878      	ldr	r0, [r7, #4]
     830:	f7ff ff76 	bl	720 <synth_writereg>
     834:	60f8      	str	r0, [r7, #12]
     836:	68fb      	ldr	r3, [r7, #12]
     838:	0a1b      	lsrs	r3, r3, #8
     83a:	4618      	mov	r0, r3
     83c:	3710      	adds	r7, #16
     83e:	46bd      	mov	sp, r7
     840:	bd80      	pop	{r7, pc}

00000842 <set_MW_power>:
     842:	b580      	push	{r7, lr}
     844:	b084      	sub	sp, #16
     846:	af00      	add	r7, sp, #0
     848:	4603      	mov	r3, r0
     84a:	71fb      	strb	r3, [r7, #7]
     84c:	79fb      	ldrb	r3, [r7, #7]
     84e:	2b03      	cmp	r3, #3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     850:	d904      	bls.n	85c <set_MW_power+0x1a>
     852:	4811      	ldr	r0, [pc, #68]	; (898 <set_MW_power+0x56>)
     854:	f001 fa5c 	bl	1d10 <__puts_veneer>
  return result;
     858:	f001 fa12 	bl	1c80 <__Error_Handler_veneer>
  if (value == 0U)
     85c:	2016      	movs	r0, #22
     85e:	f7ff ffd9 	bl	814 <synth_readreg>
    return 32U;
     862:	60f8      	str	r0, [r7, #12]
     864:	68fb      	ldr	r3, [r7, #12]
  return __builtin_clz(value);
     866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     86a:	60fb      	str	r3, [r7, #12]
     86c:	79fb      	ldrb	r3, [r7, #7]
     86e:	021b      	lsls	r3, r3, #8
     870:	461a      	mov	r2, r3
     872:	68fb      	ldr	r3, [r7, #12]
     874:	4313      	orrs	r3, r2
     876:	60fb      	str	r3, [r7, #12]
     878:	2301      	movs	r3, #1
     87a:	2200      	movs	r2, #0
     87c:	2116      	movs	r1, #22
     87e:	68f8      	ldr	r0, [r7, #12]
     880:	f7ff ff4e 	bl	720 <synth_writereg>
     884:	79fb      	ldrb	r3, [r7, #7]
     886:	4619      	mov	r1, r3
     888:	4804      	ldr	r0, [pc, #16]	; (89c <set_MW_power+0x5a>)
     88a:	f001 fa11 	bl	1cb0 <__printf_veneer>
     88e:	2300      	movs	r3, #0
     890:	4618      	mov	r0, r3
     892:	3710      	adds	r7, #16
     894:	46bd      	mov	sp, r7
     896:	bd80      	pop	{r7, pc}
     898:	0801dce4 	.word	0x0801dce4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     89c:	0801dd18 	.word	0x0801dd18

000008a0 <init_synthesiser>:
     8a0:	b580      	push	{r7, lr}
     8a2:	b084      	sub	sp, #16
  return result;
     8a4:	af00      	add	r7, sp, #0
     8a6:	4603      	mov	r3, r0
  if (value == 0U)
     8a8:	71fb      	strb	r3, [r7, #7]
     8aa:	2200      	movs	r2, #0
     8ac:	2102      	movs	r1, #2
    return 32U;
     8ae:	4856      	ldr	r0, [pc, #344]	; (a08 <init_synthesiser+0x168>)
     8b0:	f001 fa1a 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
  return __builtin_clz(value);
     8b4:	2201      	movs	r2, #1
     8b6:	2101      	movs	r1, #1
     8b8:	4854      	ldr	r0, [pc, #336]	; (a0c <init_synthesiser+0x16c>)
     8ba:	f001 fa15 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     8be:	2200      	movs	r2, #0
     8c0:	f44f 7180 	mov.w	r1, #256	; 0x100
     8c4:	4852      	ldr	r0, [pc, #328]	; (a10 <init_synthesiser+0x170>)
     8c6:	f001 fa0f 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     8ca:	2201      	movs	r2, #1
     8cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
     8d0:	484f      	ldr	r0, [pc, #316]	; (a10 <init_synthesiser+0x170>)
     8d2:	f001 fa09 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     8d6:	2201      	movs	r2, #1
     8d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     8dc:	484c      	ldr	r0, [pc, #304]	; (a10 <init_synthesiser+0x170>)
     8de:	f001 fa03 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     8e2:	2064      	movs	r0, #100	; 0x64
     8e4:	f001 f9dc 	bl	1ca0 <__HAL_Delay_veneer>
     8e8:	2300      	movs	r3, #0
     8ea:	2200      	movs	r2, #0
     8ec:	2100      	movs	r1, #0
     8ee:	2020      	movs	r0, #32
     8f0:	f7ff ff16 	bl	720 <synth_writereg>
     8f4:	2301      	movs	r3, #1
     8f6:	2200      	movs	r2, #0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     8f8:	2108      	movs	r1, #8
     8fa:	4846      	ldr	r0, [pc, #280]	; (a14 <init_synthesiser+0x174>)
     8fc:	f7ff ff10 	bl	720 <synth_writereg>
  return result;
     900:	2000      	movs	r0, #0
     902:	f7ff ff87 	bl	814 <synth_readreg>
  if (value == 0U)
     906:	60f8      	str	r0, [r7, #12]
     908:	4a43      	ldr	r2, [pc, #268]	; (a18 <init_synthesiser+0x178>)
    return 32U;
     90a:	68fb      	ldr	r3, [r7, #12]
     90c:	4293      	cmp	r3, r2
     90e:	d00a      	beq.n	926 <init_synthesiser+0x86>
     910:	2200      	movs	r2, #0
     912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  return __builtin_clz(value);
     916:	483e      	ldr	r0, [pc, #248]	; (a10 <init_synthesiser+0x170>)
     918:	f001 f9e6 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     91c:	483f      	ldr	r0, [pc, #252]	; (a1c <init_synthesiser+0x17c>)
     91e:	f001 f9f7 	bl	1d10 <__puts_veneer>
     922:	2301      	movs	r3, #1
     924:	e06b      	b.n	9fe <init_synthesiser+0x15e>
     926:	483e      	ldr	r0, [pc, #248]	; (a20 <init_synthesiser+0x180>)
     928:	f001 f9f2 	bl	1d10 <__puts_veneer>
     92c:	2017      	movs	r0, #23
     92e:	f7ff ff71 	bl	814 <synth_readreg>
     932:	60f8      	str	r0, [r7, #12]
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     93a:	60fb      	str	r3, [r7, #12]
    /* internal measurement paths enable: If internal channel selected,       */
    /* enable dedicated internal buffers and path.                            */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
     93c:	2301      	movs	r3, #1
     93e:	f083 0301 	eor.w	r3, r3, #1
     942:	b2db      	uxtb	r3, r3
     944:	01db      	lsls	r3, r3, #7
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
     946:	43db      	mvns	r3, r3
     948:	461a      	mov	r2, r3
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	4013      	ands	r3, r2
     94e:	60fb      	str	r3, [r7, #12]
     950:	2301      	movs	r3, #1
     952:	2200      	movs	r2, #0
     954:	2117      	movs	r1, #23
     956:	68f8      	ldr	r0, [r7, #12]
     958:	f7ff fee2 	bl	720 <synth_writereg>
     95c:	2301      	movs	r3, #1
     95e:	2200      	movs	r2, #0
     960:	2102      	movs	r1, #2
     962:	2001      	movs	r0, #1
     964:	f7ff fedc 	bl	720 <synth_writereg>
     968:	2007      	movs	r0, #7
     96a:	f7ff ff53 	bl	814 <synth_readreg>
     96e:	60f8      	str	r0, [r7, #12]
     970:	68fb      	ldr	r3, [r7, #12]
     972:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     976:	60fb      	str	r3, [r7, #12]
     978:	68fb      	ldr	r3, [r7, #12]
     97a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     97e:	60fb      	str	r3, [r7, #12]
     980:	68fb      	ldr	r3, [r7, #12]
     982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     986:	60fb      	str	r3, [r7, #12]
     988:	2301      	movs	r3, #1
     98a:	2200      	movs	r2, #0
     98c:	2107      	movs	r1, #7
     98e:	68f8      	ldr	r0, [r7, #12]
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
     990:	f7ff fec6 	bl	720 <synth_writereg>
     994:	200a      	movs	r0, #10
     996:	f001 f983 	bl	1ca0 <__HAL_Delay_veneer>
     99a:	79fb      	ldrb	r3, [r7, #7]
     99c:	2b03      	cmp	r3, #3
     99e:	d904      	bls.n	9aa <init_synthesiser+0x10a>
     9a0:	4820      	ldr	r0, [pc, #128]	; (a24 <init_synthesiser+0x184>)
     9a2:	f001 f9b5 	bl	1d10 <__puts_veneer>
     9a6:	f001 f96b 	bl	1c80 <__Error_Handler_veneer>
     9aa:	2016      	movs	r0, #22
     9ac:	f7ff ff32 	bl	814 <synth_readreg>
     9b0:	60f8      	str	r0, [r7, #12]
     9b2:	68fb      	ldr	r3, [r7, #12]

        /* If the requested internal measurement path has already been enabled, */
        /* bypass the configuration processing.                                 */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
     9b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     9b8:	60fb      	str	r3, [r7, #12]
     9ba:	79fb      	ldrb	r3, [r7, #7]
     9bc:	021b      	lsls	r3, r3, #8
     9be:	461a      	mov	r2, r3
     9c0:	68fb      	ldr	r3, [r7, #12]
     9c2:	4313      	orrs	r3, r2
     9c4:	60fb      	str	r3, [r7, #12]
     9c6:	2301      	movs	r3, #1
     9c8:	2200      	movs	r2, #0
        {
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
     9ca:	2116      	movs	r1, #22
     9cc:	68f8      	ldr	r0, [r7, #12]
     9ce:	f7ff fea7 	bl	720 <synth_writereg>
     9d2:	4b15      	ldr	r3, [pc, #84]	; (a28 <init_synthesiser+0x188>)
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
     9d4:	ed93 7b00 	vldr	d7, [r3]
     9d8:	eeb0 0b47 	vmov.f64	d0, d7
     9dc:	f000 f83f 	bl	a5e <set_frequency_hz>
     9e0:	4b11      	ldr	r3, [pc, #68]	; (a28 <init_synthesiser+0x188>)
     9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
     9e6:	4811      	ldr	r0, [pc, #68]	; (a2c <init_synthesiser+0x18c>)
     9e8:	f001 f962 	bl	1cb0 <__printf_veneer>
     9ec:	4b10      	ldr	r3, [pc, #64]	; (a30 <init_synthesiser+0x190>)
     9ee:	2201      	movs	r2, #1
     9f0:	701a      	strb	r2, [r3, #0]
     9f2:	2200      	movs	r2, #0
     9f4:	2102      	movs	r1, #2
     9f6:	480f      	ldr	r0, [pc, #60]	; (a34 <init_synthesiser+0x194>)
     9f8:	f001 f976 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     9fc:	2300      	movs	r3, #0
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
     9fe:	4618      	mov	r0, r3
     a00:	3710      	adds	r7, #16
     a02:	46bd      	mov	sp, r7
     a04:	bd80      	pop	{r7, pc}
     a06:	bf00      	nop
     a08:	58021000 	.word	0x58021000
     a0c:	58021800 	.word	0x58021800
     a10:	58020800 	.word	0x58020800
            while (wait_loop_index != 0UL)
            {
              wait_loop_index--;
     a14:	0041bfff 	.word	0x0041bfff
     a18:	00c7701a 	.word	0x00c7701a
            while (wait_loop_index != 0UL)
     a1c:	0801dd30 	.word	0x0801dd30
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
     a20:	0801dd4c 	.word	0x0801dd4c
            }
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
     a24:	0801dce4 	.word	0x0801dce4
     a28:	08020da8 	.word	0x08020da8
     a2c:	0801dd60 	.word	0x0801dd60
     a30:	20000728 	.word	0x20000728
     a34:	58020400 	.word	0x58020400

00000a38 <lock_status>:
        {
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
     a38:	b580      	push	{r7, lr}
     a3a:	b082      	sub	sp, #8
     a3c:	af00      	add	r7, sp, #0
     a3e:	2012      	movs	r0, #18
     a40:	f7ff fee8 	bl	814 <synth_readreg>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
     a44:	4603      	mov	r3, r0
     a46:	f003 0302 	and.w	r3, r3, #2
     a4a:	2b00      	cmp	r3, #0
     a4c:	bf14      	ite	ne
     a4e:	2301      	movne	r3, #1
     a50:	2300      	moveq	r3, #0
     a52:	71fb      	strb	r3, [r7, #7]
     a54:	79fb      	ldrb	r3, [r7, #7]
     a56:	4618      	mov	r0, r3
     a58:	3708      	adds	r7, #8
     a5a:	46bd      	mov	sp, r7
     a5c:	bd80      	pop	{r7, pc}

00000a5e <set_frequency_hz>:
     a5e:	b580      	push	{r7, lr}
     a60:	b088      	sub	sp, #32
     a62:	af00      	add	r7, sp, #0
     a64:	ed87 0b00 	vstr	d0, [r7]
     a68:	2301      	movs	r3, #1
     a6a:	61fb      	str	r3, [r7, #28]
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
     a6c:	69fb      	ldr	r3, [r7, #28]
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
     a6e:	ee07 3a90 	vmov	s15, r3
     a72:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a76:	ed97 7b00 	vldr	d7, [r7]
     a7a:	ee26 6b07 	vmul.f64	d6, d6, d7
     a7e:	ed9f 5b2a 	vldr	d5, [pc, #168]	; b28 <set_frequency_hz+0xca>
     a82:	ee86 7b05 	vdiv.f64	d7, d6, d5
        {
          if (ADC_VREFINT_INSTANCE(hadc))
     a86:	ed87 7b04 	vstr	d7, [r7, #16]
     a8a:	ed97 7b04 	vldr	d7, [r7, #16]
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
     a8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a92:	ee17 3a90 	vmov	r3, s15
     a96:	60fb      	str	r3, [r7, #12]
     a98:	68fb      	ldr	r3, [r7, #12]
     a9a:	ee07 3a90 	vmov	s15, r3
     a9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     aa2:	ed97 6b04 	vldr	d6, [r7, #16]
     aa6:	ee36 7b47 	vsub.f64	d7, d6, d7
     aaa:	ed9f 6b21 	vldr	d6, [pc, #132]	; b30 <set_frequency_hz+0xd2>
     aae:	ee27 7b06 	vmul.f64	d7, d7, d6
     ab2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     ab6:	ee37 7b06 	vadd.f64	d7, d7, d6
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
     aba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     abe:	ee17 3a90 	vmov	r3, s15
     ac2:	60bb      	str	r3, [r7, #8]
     ac4:	2201      	movs	r2, #1

        tmp_hal_status = HAL_ERROR;
     ac6:	2102      	movs	r1, #2
     ac8:	481b      	ldr	r0, [pc, #108]	; (b38 <set_frequency_hz+0xda>)
     aca:	f001 f90d 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
     ace:	69fa      	ldr	r2, [r7, #28]
     ad0:	68b9      	ldr	r1, [r7, #8]
     ad2:	68f8      	ldr	r0, [r7, #12]

  /* Return function status */
  return tmp_hal_status;
     ad4:	f000 f838 	bl	b48 <set_freq_regs>
}
     ad8:	4b18      	ldr	r3, [pc, #96]	; (b3c <set_frequency_hz+0xde>)
     ada:	681b      	ldr	r3, [r3, #0]
     adc:	f241 3288 	movw	r2, #5000	; 0x1388
     ae0:	4611      	mov	r1, r2
     ae2:	4618      	mov	r0, r3
     ae4:	f000 ffbe 	bl	1a64 <timer_delay>
     ae8:	f7ff ffa6 	bl	a38 <lock_status>
     aec:	4603      	mov	r3, r0
     aee:	f083 0301 	eor.w	r3, r3, #1
     af2:	b2db      	uxtb	r3, r3
     af4:	2b00      	cmp	r3, #0
     af6:	d011      	beq.n	b1c <set_frequency_hz+0xbe>
     af8:	2200      	movs	r2, #0
     afa:	2102      	movs	r1, #2
     afc:	4810      	ldr	r0, [pc, #64]	; (b40 <set_frequency_hz+0xe2>)
     afe:	f001 f8f3 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
     b02:	f241 3388 	movw	r3, #5000	; 0x1388
     b06:	4619      	mov	r1, r3
	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     b08:	480e      	ldr	r0, [pc, #56]	; (b44 <set_frequency_hz+0xe6>)
     b0a:	f001 f8d1 	bl	1cb0 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     b0e:	f001 f8b7 	bl	1c80 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     b12:	2200      	movs	r2, #0
     b14:	2102      	movs	r1, #2
     b16:	4808      	ldr	r0, [pc, #32]	; (b38 <set_frequency_hz+0xda>)
     b18:	f001 f8e6 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
	}

}
     b1c:	bf00      	nop
     b1e:	3720      	adds	r7, #32
     b20:	46bd      	mov	sp, r7
     b22:	bd80      	pop	{r7, pc}
     b24:	f3af 8000 	nop.w
     b28:	00000000 	.word	0x00000000
     b2c:	4187d784 	.word	0x4187d784
     b30:	00000000 	.word	0x00000000
     b34:	41700000 	.word	0x41700000
     b38:	58020400 	.word	0x58020400
     b3c:	20000138 	.word	0x20000138
     b40:	58021000 	.word	0x58021000
     b44:	0801dd88 	.word	0x0801dd88

00000b48 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     b48:	b580      	push	{r7, lr}
     b4a:	b086      	sub	sp, #24
     b4c:	af00      	add	r7, sp, #0
     b4e:	60f8      	str	r0, [r7, #12]
     b50:	60b9      	str	r1, [r7, #8]
     b52:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     b54:	2300      	movs	r3, #0
     b56:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     b58:	4b24      	ldr	r3, [pc, #144]	; (bec <set_freq_regs+0xa4>)
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
     b60:	d004      	beq.n	b6c <set_freq_regs+0x24>
     b62:	4b22      	ldr	r3, [pc, #136]	; (bec <set_freq_regs+0xa4>)
     b64:	681b      	ldr	r3, [r3, #0]
     b66:	687a      	ldr	r2, [r7, #4]
     b68:	429a      	cmp	r2, r3
     b6a:	d014      	beq.n	b96 <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     b6c:	2016      	movs	r0, #22
     b6e:	f7ff fe51 	bl	814 <synth_readreg>
     b72:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     b74:	697b      	ldr	r3, [r7, #20]
     b76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     b7a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     b7c:	697a      	ldr	r2, [r7, #20]
     b7e:	687b      	ldr	r3, [r7, #4]
     b80:	4313      	orrs	r3, r2
     b82:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     b84:	2301      	movs	r3, #1
     b86:	2200      	movs	r2, #0
     b88:	2116      	movs	r1, #22
     b8a:	6978      	ldr	r0, [r7, #20]
     b8c:	f7ff fdc8 	bl	720 <synth_writereg>
		last_vcodiv = vco_divider;
     b90:	4a16      	ldr	r2, [pc, #88]	; (bec <set_freq_regs+0xa4>)
     b92:	687b      	ldr	r3, [r7, #4]
     b94:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     b96:	4b16      	ldr	r3, [pc, #88]	; (bf0 <set_freq_regs+0xa8>)
     b98:	681b      	ldr	r3, [r3, #0]
     b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
     b9e:	d004      	beq.n	baa <set_freq_regs+0x62>
     ba0:	4b13      	ldr	r3, [pc, #76]	; (bf0 <set_freq_regs+0xa8>)
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	68fa      	ldr	r2, [r7, #12]
     ba6:	429a      	cmp	r2, r3
     ba8:	d008      	beq.n	bbc <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     baa:	2301      	movs	r3, #1
     bac:	2200      	movs	r2, #0
     bae:	2103      	movs	r1, #3
     bb0:	68f8      	ldr	r0, [r7, #12]
     bb2:	f7ff fdb5 	bl	720 <synth_writereg>
		last_integer = integer;
     bb6:	4a0e      	ldr	r2, [pc, #56]	; (bf0 <set_freq_regs+0xa8>)
     bb8:	68fb      	ldr	r3, [r7, #12]
     bba:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     bbc:	4b0d      	ldr	r3, [pc, #52]	; (bf4 <set_freq_regs+0xac>)
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
     bc4:	d004      	beq.n	bd0 <set_freq_regs+0x88>
     bc6:	4b0b      	ldr	r3, [pc, #44]	; (bf4 <set_freq_regs+0xac>)
     bc8:	681b      	ldr	r3, [r3, #0]
     bca:	68ba      	ldr	r2, [r7, #8]
     bcc:	429a      	cmp	r2, r3
     bce:	d008      	beq.n	be2 <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     bd0:	2301      	movs	r3, #1
     bd2:	2200      	movs	r2, #0
     bd4:	2104      	movs	r1, #4
     bd6:	68b8      	ldr	r0, [r7, #8]
     bd8:	f7ff fda2 	bl	720 <synth_writereg>
		last_fraction = fraction;
     bdc:	4a05      	ldr	r2, [pc, #20]	; (bf4 <set_freq_regs+0xac>)
     bde:	68bb      	ldr	r3, [r7, #8]
     be0:	6013      	str	r3, [r2, #0]
}
     be2:	bf00      	nop
     be4:	3718      	adds	r7, #24
     be6:	46bd      	mov	sp, r7
     be8:	bd80      	pop	{r7, pc}
     bea:	bf00      	nop
     bec:	20000120 	.word	0x20000120
     bf0:	20000124 	.word	0x20000124
     bf4:	20000128 	.word	0x20000128

00000bf8 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     bf8:	b580      	push	{r7, lr}
     bfa:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
    printf("state: %u \r\n", mw_sweep_settings.state);
     bfc:	4b34      	ldr	r3, [pc, #208]	; (cd0 <print_mw_sweep_settings+0xd8>)
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	4619      	mov	r1, r3
     c02:	4834      	ldr	r0, [pc, #208]	; (cd4 <print_mw_sweep_settings+0xdc>)
     c04:	f001 f854 	bl	1cb0 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     c08:	4b31      	ldr	r3, [pc, #196]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c0a:	785b      	ldrb	r3, [r3, #1]
     c0c:	4619      	mov	r1, r3
     c0e:	4832      	ldr	r0, [pc, #200]	; (cd8 <print_mw_sweep_settings+0xe0>)
     c10:	f001 f84e 	bl	1cb0 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     c14:	4b2e      	ldr	r3, [pc, #184]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c16:	685b      	ldr	r3, [r3, #4]
     c18:	4619      	mov	r1, r3
     c1a:	4830      	ldr	r0, [pc, #192]	; (cdc <print_mw_sweep_settings+0xe4>)
     c1c:	f001 f848 	bl	1cb0 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     c20:	4b2b      	ldr	r3, [pc, #172]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c22:	689b      	ldr	r3, [r3, #8]
     c24:	4619      	mov	r1, r3
     c26:	482e      	ldr	r0, [pc, #184]	; (ce0 <print_mw_sweep_settings+0xe8>)
     c28:	f001 f842 	bl	1cb0 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     c2c:	4b28      	ldr	r3, [pc, #160]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c2e:	68db      	ldr	r3, [r3, #12]
     c30:	4619      	mov	r1, r3
     c32:	482c      	ldr	r0, [pc, #176]	; (ce4 <print_mw_sweep_settings+0xec>)
     c34:	f001 f83c 	bl	1cb0 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     c38:	4b25      	ldr	r3, [pc, #148]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c3a:	691b      	ldr	r3, [r3, #16]
     c3c:	4619      	mov	r1, r3
     c3e:	482a      	ldr	r0, [pc, #168]	; (ce8 <print_mw_sweep_settings+0xf0>)
     c40:	f001 f836 	bl	1cb0 <__printf_veneer>
  	printf("pop_cycles_per_point: %lu \r\n", mw_sweep_settings.pop_cycles_per_point);
     c44:	4b22      	ldr	r3, [pc, #136]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c46:	695b      	ldr	r3, [r3, #20]
     c48:	4619      	mov	r1, r3
     c4a:	4828      	ldr	r0, [pc, #160]	; (cec <print_mw_sweep_settings+0xf4>)
     c4c:	f001 f830 	bl	1cb0 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     c50:	4b1f      	ldr	r3, [pc, #124]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c52:	699b      	ldr	r3, [r3, #24]
     c54:	4619      	mov	r1, r3
     c56:	4826      	ldr	r0, [pc, #152]	; (cf0 <print_mw_sweep_settings+0xf8>)
     c58:	f001 f82a 	bl	1cb0 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     c5c:	4b1c      	ldr	r3, [pc, #112]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c5e:	69db      	ldr	r3, [r3, #28]
     c60:	4619      	mov	r1, r3
     c62:	4824      	ldr	r0, [pc, #144]	; (cf4 <print_mw_sweep_settings+0xfc>)
     c64:	f001 f824 	bl	1cb0 <__printf_veneer>
  	printf("MW_processing_time: %lu us\r\n", mw_sweep_settings.MW_processing_time);
     c68:	4b19      	ldr	r3, [pc, #100]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c6a:	6a1b      	ldr	r3, [r3, #32]
     c6c:	4619      	mov	r1, r3
     c6e:	4822      	ldr	r0, [pc, #136]	; (cf8 <print_mw_sweep_settings+0x100>)
     c70:	f001 f81e 	bl	1cb0 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     c74:	4b16      	ldr	r3, [pc, #88]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c78:	4619      	mov	r1, r3
     c7a:	4820      	ldr	r0, [pc, #128]	; (cfc <print_mw_sweep_settings+0x104>)
     c7c:	f001 f818 	bl	1cb0 <__printf_veneer>
  	printf("centre_freq: %f Hz\r\n", mw_sweep_settings.centre_freq);
     c80:	4b13      	ldr	r3, [pc, #76]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c82:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
     c86:	481e      	ldr	r0, [pc, #120]	; (d00 <print_mw_sweep_settings+0x108>)
     c88:	f001 f812 	bl	1cb0 <__printf_veneer>
  	printf("span: %f Hz\r\n", mw_sweep_settings.span);
     c8c:	4b10      	ldr	r3, [pc, #64]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c8e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
     c92:	481c      	ldr	r0, [pc, #112]	; (d04 <print_mw_sweep_settings+0x10c>)
     c94:	f001 f80c 	bl	1cb0 <__printf_veneer>
  	printf("sweep_period: %f s\r\n", mw_sweep_settings.sweep_period);
     c98:	4b0d      	ldr	r3, [pc, #52]	; (cd0 <print_mw_sweep_settings+0xd8>)
     c9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     c9e:	481a      	ldr	r0, [pc, #104]	; (d08 <print_mw_sweep_settings+0x110>)
     ca0:	f001 f806 	bl	1cb0 <__printf_veneer>
    printf("sweep_type: %s \r\n", mw_sweep_settings.sweep_type ? "FIXED_TIME" : "FIXED_STEPS");
     ca4:	4b0a      	ldr	r3, [pc, #40]	; (cd0 <print_mw_sweep_settings+0xd8>)
     ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     caa:	2b00      	cmp	r3, #0
     cac:	d001      	beq.n	cb2 <print_mw_sweep_settings+0xba>
     cae:	4b17      	ldr	r3, [pc, #92]	; (d0c <print_mw_sweep_settings+0x114>)
     cb0:	e000      	b.n	cb4 <print_mw_sweep_settings+0xbc>
     cb2:	4b17      	ldr	r3, [pc, #92]	; (d10 <print_mw_sweep_settings+0x118>)
     cb4:	4619      	mov	r1, r3
     cb6:	4817      	ldr	r0, [pc, #92]	; (d14 <print_mw_sweep_settings+0x11c>)
     cb8:	f000 fffa 	bl	1cb0 <__printf_veneer>
    printf("sweep_mode: %d\r\n", mw_sweep_settings.sweep_mode);
     cbc:	4b04      	ldr	r3, [pc, #16]	; (cd0 <print_mw_sweep_settings+0xd8>)
     cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     cc2:	4619      	mov	r1, r3
     cc4:	4814      	ldr	r0, [pc, #80]	; (d18 <print_mw_sweep_settings+0x120>)
     cc6:	f000 fff3 	bl	1cb0 <__printf_veneer>
}
     cca:	bf00      	nop
     ccc:	bd80      	pop	{r7, pc}
     cce:	bf00      	nop
     cd0:	20000728 	.word	0x20000728
     cd4:	0801ddcc 	.word	0x0801ddcc
     cd8:	0801dddc 	.word	0x0801dddc
     cdc:	0801dde8 	.word	0x0801dde8
     ce0:	0801ddf8 	.word	0x0801ddf8
     ce4:	0801de0c 	.word	0x0801de0c
     ce8:	0801de20 	.word	0x0801de20
     cec:	0801de34 	.word	0x0801de34
     cf0:	0801de54 	.word	0x0801de54
     cf4:	0801de70 	.word	0x0801de70
     cf8:	0801de88 	.word	0x0801de88
     cfc:	0801dea8 	.word	0x0801dea8
     d00:	0801dec0 	.word	0x0801dec0
     d04:	0801ded8 	.word	0x0801ded8
     d08:	0801dee8 	.word	0x0801dee8
     d0c:	0801df00 	.word	0x0801df00
     d10:	0801df0c 	.word	0x0801df0c
     d14:	0801df18 	.word	0x0801df18
     d18:	0801df2c 	.word	0x0801df2c

00000d1c <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     d1c:	b580      	push	{r7, lr}
     d1e:	b094      	sub	sp, #80	; 0x50
     d20:	af02      	add	r7, sp, #8
     d22:	ed87 0b04 	vstr	d0, [r7, #16]
     d26:	ed87 1b02 	vstr	d1, [r7, #8]
     d2a:	6078      	str	r0, [r7, #4]
     d2c:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     d2e:	ed97 7b04 	vldr	d7, [r7, #16]
     d32:	ed9f 6b8d 	vldr	d6, [pc, #564]	; f68 <calc_defined_step_MW_sweep+0x24c>
     d36:	ee87 5b06 	vdiv.f64	d5, d7, d6
     d3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d3e:	e9cd 2300 	strd	r2, r3, [sp]
     d42:	ec53 2b15 	vmov	r2, r3, d5
     d46:	4892      	ldr	r0, [pc, #584]	; (f90 <calc_defined_step_MW_sweep+0x274>)
     d48:	f000 ffb2 	bl	1cb0 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     d4c:	6879      	ldr	r1, [r7, #4]
     d4e:	4891      	ldr	r0, [pc, #580]	; (f94 <calc_defined_step_MW_sweep+0x278>)
     d50:	f000 ffae 	bl	1cb0 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     d54:	4b90      	ldr	r3, [pc, #576]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     d56:	2200      	movs	r2, #0
     d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     d5c:	4a8e      	ldr	r2, [pc, #568]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     d5e:	687b      	ldr	r3, [r7, #4]
     d60:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     d62:	498d      	ldr	r1, [pc, #564]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     d64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     d68:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     d6c:	498a      	ldr	r1, [pc, #552]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     d6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d72:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     d76:	ed97 7b02 	vldr	d7, [r7, #8]
     d7a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     d7e:	ee27 7b06 	vmul.f64	d7, d7, d6
     d82:	ed97 6b04 	vldr	d6, [r7, #16]
     d86:	ee36 7b47 	vsub.f64	d7, d6, d7
     d8a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     d8e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     d92:	f000 fb1f 	bl	13d4 <calculate_k>
     d96:	4603      	mov	r3, r0
     d98:	b2da      	uxtb	r2, r3
     d9a:	4b7f      	ldr	r3, [pc, #508]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     d9c:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     d9e:	683b      	ldr	r3, [r7, #0]
     da0:	3b01      	subs	r3, #1
     da2:	ee07 3a90 	vmov	s15, r3
     da6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     daa:	ed97 5b02 	vldr	d5, [r7, #8]
     dae:	ee85 7b06 	vdiv.f64	d7, d5, d6
     db2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     db6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     dba:	6839      	ldr	r1, [r7, #0]
     dbc:	4877      	ldr	r0, [pc, #476]	; (f9c <calc_defined_step_MW_sweep+0x280>)
     dbe:	f000 ff77 	bl	1cb0 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     dc2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; f70 <calc_defined_step_MW_sweep+0x254>
     dc6:	4b74      	ldr	r3, [pc, #464]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     dc8:	785b      	ldrb	r3, [r3, #1]
     dca:	061b      	lsls	r3, r3, #24
     dcc:	ee07 3a90 	vmov	s15, r3
     dd0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     dd4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     dd8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     ddc:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     de0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     de4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     de8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     dec:	ee37 7b06 	vadd.f64	d7, d7, d6
     df0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     df4:	ee17 2a90 	vmov	r2, s15
     df8:	4b67      	ldr	r3, [pc, #412]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     dfa:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     dfc:	4b66      	ldr	r3, [pc, #408]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     dfe:	691b      	ldr	r3, [r3, #16]
     e00:	2b00      	cmp	r3, #0
     e02:	d104      	bne.n	e0e <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     e04:	4b64      	ldr	r3, [pc, #400]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     e06:	691b      	ldr	r3, [r3, #16]
     e08:	3301      	adds	r3, #1
     e0a:	4a63      	ldr	r2, [pc, #396]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     e0c:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     e0e:	4b62      	ldr	r3, [pc, #392]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     e10:	691b      	ldr	r3, [r3, #16]
     e12:	ee07 3a90 	vmov	s15, r3
     e16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e1a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e1e:	ee26 7b07 	vmul.f64	d7, d6, d7
     e22:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     e2a:	485d      	ldr	r0, [pc, #372]	; (fa0 <calc_defined_step_MW_sweep+0x284>)
     e2c:	f000 ff40 	bl	1cb0 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     e30:	ed97 5b02 	vldr	d5, [r7, #8]
     e34:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     e38:	ee85 7b06 	vdiv.f64	d7, d5, d6
     e3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e40:	ee17 2a90 	vmov	r2, s15
     e44:	4b54      	ldr	r3, [pc, #336]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     e46:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     e48:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     e4c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e50:	ee85 7b06 	vdiv.f64	d7, d5, d6
     e54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     e58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     e5c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e60:	ee26 7b07 	vmul.f64	d7, d6, d7
     e64:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     e68:	4b4b      	ldr	r3, [pc, #300]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     e6a:	785b      	ldrb	r3, [r3, #1]
     e6c:	ee07 3a90 	vmov	s15, r3
     e70:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     e74:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     e78:	ee26 6b07 	vmul.f64	d6, d6, d7
     e7c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; f70 <calc_defined_step_MW_sweep+0x254>
     e80:	ee86 7b05 	vdiv.f64	d7, d6, d5
     e84:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     e88:	ed97 7b08 	vldr	d7, [r7, #32]
     e8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e90:	ee17 2a90 	vmov	r2, s15
     e94:	4b40      	ldr	r3, [pc, #256]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     e96:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     e98:	4b3f      	ldr	r3, [pc, #252]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     e9a:	685b      	ldr	r3, [r3, #4]
     e9c:	ee07 3a90 	vmov	s15, r3
     ea0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ea4:	ed97 6b08 	vldr	d6, [r7, #32]
     ea8:	ee36 7b47 	vsub.f64	d7, d6, d7
     eac:	ed9f 6b32 	vldr	d6, [pc, #200]	; f78 <calc_defined_step_MW_sweep+0x25c>
     eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
     eb4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     eb8:	ee37 7b06 	vadd.f64	d7, d7, d6
     ebc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     ec0:	ee17 2a90 	vmov	r2, s15
     ec4:	4b34      	ldr	r3, [pc, #208]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     ec6:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     ec8:	f241 3288 	movw	r2, #5000	; 0x1388
     ecc:	4b32      	ldr	r3, [pc, #200]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     ece:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     ed0:	4b34      	ldr	r3, [pc, #208]	; (fa4 <calc_defined_step_MW_sweep+0x288>)
     ed2:	681b      	ldr	r3, [r3, #0]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	fb02 f303 	mul.w	r3, r2, r3
     eda:	2264      	movs	r2, #100	; 0x64
     edc:	4413      	add	r3, r2
     ede:	4a2e      	ldr	r2, [pc, #184]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     ee0:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     ee2:	f241 3288 	movw	r2, #5000	; 0x1388
     ee6:	2301      	movs	r3, #1
     ee8:	441a      	add	r2, r3
     eea:	4b2b      	ldr	r3, [pc, #172]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     eec:	69db      	ldr	r3, [r3, #28]
     eee:	4413      	add	r3, r2
     ef0:	ee07 3a90 	vmov	s15, r3
     ef4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     ef8:	4b27      	ldr	r3, [pc, #156]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     efa:	68db      	ldr	r3, [r3, #12]
     efc:	3301      	adds	r3, #1
     efe:	ee07 3a90 	vmov	s15, r3
     f02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f06:	ee26 6b07 	vmul.f64	d6, d6, d7
     f0a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; f80 <calc_defined_step_MW_sweep+0x264>
     f0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
     f12:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     f1a:	4823      	ldr	r0, [pc, #140]	; (fa8 <calc_defined_step_MW_sweep+0x28c>)
     f1c:	f000 fec8 	bl	1cb0 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     f20:	4b1d      	ldr	r3, [pc, #116]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     f22:	68d9      	ldr	r1, [r3, #12]
     f24:	ed97 7b06 	vldr	d7, [r7, #24]
     f28:	ed9f 6b17 	vldr	d6, [pc, #92]	; f88 <calc_defined_step_MW_sweep+0x26c>
     f2c:	ee27 6b06 	vmul.f64	d6, d7, d6
     f30:	4b19      	ldr	r3, [pc, #100]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     f32:	68db      	ldr	r3, [r3, #12]
     f34:	3301      	adds	r3, #1
     f36:	ee07 3a90 	vmov	s15, r3
     f3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f3e:	ee86 5b07 	vdiv.f64	d5, d6, d7
     f42:	ec53 2b15 	vmov	r2, r3, d5
     f46:	4819      	ldr	r0, [pc, #100]	; (fac <calc_defined_step_MW_sweep+0x290>)
     f48:	f000 feb2 	bl	1cb0 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     f4c:	4b12      	ldr	r3, [pc, #72]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     f4e:	2200      	movs	r2, #0
     f50:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     f52:	4911      	ldr	r1, [pc, #68]	; (f98 <calc_defined_step_MW_sweep+0x27c>)
     f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     f58:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     f5c:	2301      	movs	r3, #1
}
     f5e:	4618      	mov	r0, r3
     f60:	3748      	adds	r7, #72	; 0x48
     f62:	46bd      	mov	sp, r7
     f64:	bd80      	pop	{r7, pc}
     f66:	bf00      	nop
     f68:	00000000 	.word	0x00000000
     f6c:	41cdcd65 	.word	0x41cdcd65
     f70:	00000000 	.word	0x00000000
     f74:	4187d784 	.word	0x4187d784
     f78:	00000000 	.word	0x00000000
     f7c:	41700000 	.word	0x41700000
     f80:	00000000 	.word	0x00000000
     f84:	412e8480 	.word	0x412e8480
     f88:	00000000 	.word	0x00000000
     f8c:	408f4000 	.word	0x408f4000
     f90:	0801df40 	.word	0x0801df40
     f94:	0801df84 	.word	0x0801df84
     f98:	20000728 	.word	0x20000728
     f9c:	0801dfa4 	.word	0x0801dfa4
     fa0:	0801dfdc 	.word	0x0801dfdc
     fa4:	20000718 	.word	0x20000718
     fa8:	0801dffc 	.word	0x0801dffc
     fac:	0801e014 	.word	0x0801e014

00000fb0 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     fb0:	b580      	push	{r7, lr}
     fb2:	b09e      	sub	sp, #120	; 0x78
     fb4:	af04      	add	r7, sp, #16
     fb6:	ed87 0b06 	vstr	d0, [r7, #24]
     fba:	ed87 1b04 	vstr	d1, [r7, #16]
     fbe:	ed87 2b02 	vstr	d2, [r7, #8]
     fc2:	4603      	mov	r3, r0
     fc4:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     fc6:	ed97 7b06 	vldr	d7, [r7, #24]
     fca:	ed9f 6b97 	vldr	d6, [pc, #604]	; 1228 <calc_fixed_time_MW_sweep+0x278>
     fce:	ee87 5b06 	vdiv.f64	d5, d7, d6
     fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     fd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
     fda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     fde:	e9cd 2300 	strd	r2, r3, [sp]
     fe2:	ec53 2b15 	vmov	r2, r3, d5
     fe6:	4898      	ldr	r0, [pc, #608]	; (1248 <calc_fixed_time_MW_sweep+0x298>)
     fe8:	f000 fe62 	bl	1cb0 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     fec:	4b97      	ldr	r3, [pc, #604]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
     fee:	2201      	movs	r2, #1
     ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     ff4:	4995      	ldr	r1, [pc, #596]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
     ff6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     ffa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     ffe:	4993      	ldr	r1, [pc, #588]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1000:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    1004:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
    1008:	4b91      	ldr	r3, [pc, #580]	; (1250 <calc_fixed_time_MW_sweep+0x2a0>)
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	2264      	movs	r2, #100	; 0x64
    100e:	4413      	add	r3, r2
    1010:	4a8e      	ldr	r2, [pc, #568]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1012:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
    1014:	f241 3288 	movw	r2, #5000	; 0x1388
    1018:	2301      	movs	r3, #1
    101a:	441a      	add	r2, r3
    101c:	4b8b      	ldr	r3, [pc, #556]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    101e:	69db      	ldr	r3, [r3, #28]
    1020:	4413      	add	r3, r2
    1022:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
    1024:	4a8b      	ldr	r2, [pc, #556]	; (1254 <calc_fixed_time_MW_sweep+0x2a4>)
    1026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1028:	fbb2 f3f3 	udiv	r3, r2, r3
    102c:	ee07 3a90 	vmov	s15, r3
    1030:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1034:	ed97 7b02 	vldr	d7, [r7, #8]
    1038:	ee26 7b07 	vmul.f64	d7, d6, d7
    103c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1040:	ee17 3a90 	vmov	r3, s15
    1044:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
    1046:	ed97 7b04 	vldr	d7, [r7, #16]
    104a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    104e:	ee27 7b06 	vmul.f64	d7, d7, d6
    1052:	ed97 6b06 	vldr	d6, [r7, #24]
    1056:	ee36 7b47 	vsub.f64	d7, d6, d7
    105a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
    105e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
    1062:	f000 f9b7 	bl	13d4 <calculate_k>
    1066:	4603      	mov	r3, r0
    1068:	b2da      	uxtb	r2, r3
    106a:	4b78      	ldr	r3, [pc, #480]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    106c:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
    106e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 1230 <calc_fixed_time_MW_sweep+0x280>
    1072:	4b76      	ldr	r3, [pc, #472]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1074:	785b      	ldrb	r3, [r3, #1]
    1076:	061b      	lsls	r3, r3, #24
    1078:	ee07 3a90 	vmov	s15, r3
    107c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    1080:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1084:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
    1088:	4b70      	ldr	r3, [pc, #448]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    108a:	2201      	movs	r2, #1
    108c:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
    108e:	e004      	b.n	109a <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
    1090:	4b6e      	ldr	r3, [pc, #440]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1092:	691b      	ldr	r3, [r3, #16]
    1094:	3301      	adds	r3, #1
    1096:	4a6d      	ldr	r2, [pc, #436]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1098:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
    109a:	4b6c      	ldr	r3, [pc, #432]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    109c:	691b      	ldr	r3, [r3, #16]
    109e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    10a0:	fb02 f303 	mul.w	r3, r2, r3
    10a4:	ee07 3a90 	vmov	s15, r3
    10a8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10ac:	ed97 4b04 	vldr	d4, [r7, #16]
    10b0:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
    10b4:	ee84 7b05 	vdiv.f64	d7, d4, d5
    10b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
    10bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10c0:	d4e6      	bmi.n	1090 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
    10c2:	4b62      	ldr	r3, [pc, #392]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    10c4:	691b      	ldr	r3, [r3, #16]
    10c6:	ee07 3a90 	vmov	s15, r3
    10ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    10ce:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    10d2:	ee26 7b07 	vmul.f64	d7, d6, d7
    10d6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
    10da:	4b5c      	ldr	r3, [pc, #368]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    10dc:	6919      	ldr	r1, [r3, #16]
    10de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    10e2:	485d      	ldr	r0, [pc, #372]	; (1258 <calc_fixed_time_MW_sweep+0x2a8>)
    10e4:	f000 fde4 	bl	1cb0 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
    10e8:	ed97 5b04 	vldr	d5, [r7, #16]
    10ec:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
    10f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    10f8:	ee17 2a90 	vmov	r2, s15
    10fc:	4b53      	ldr	r3, [pc, #332]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    10fe:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
    1100:	ed97 7b02 	vldr	d7, [r7, #8]
    1104:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 1238 <calc_fixed_time_MW_sweep+0x288>
    1108:	ee27 5b06 	vmul.f64	d5, d7, d6
    110c:	4b4f      	ldr	r3, [pc, #316]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    110e:	68db      	ldr	r3, [r3, #12]
    1110:	3301      	adds	r3, #1
    1112:	ee07 3a90 	vmov	s15, r3
    1116:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    111a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    111e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1122:	ee17 3a90 	vmov	r3, s15
    1126:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
    1128:	f241 3288 	movw	r2, #5000	; 0x1388
    112c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    112e:	1a9b      	subs	r3, r3, r2
    1130:	2264      	movs	r2, #100	; 0x64
    1132:	1a9b      	subs	r3, r3, r2
    1134:	2201      	movs	r2, #1
    1136:	1a9a      	subs	r2, r3, r2
    1138:	4b45      	ldr	r3, [pc, #276]	; (1250 <calc_fixed_time_MW_sweep+0x2a0>)
    113a:	681b      	ldr	r3, [r3, #0]
    113c:	fbb2 f3f3 	udiv	r3, r2, r3
    1140:	4a42      	ldr	r2, [pc, #264]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1142:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
    1144:	4b41      	ldr	r3, [pc, #260]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1146:	68db      	ldr	r3, [r3, #12]
    1148:	1c59      	adds	r1, r3, #1
    114a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    114c:	4a43      	ldr	r2, [pc, #268]	; (125c <calc_fixed_time_MW_sweep+0x2ac>)
    114e:	fba2 2303 	umull	r2, r3, r2, r3
    1152:	099a      	lsrs	r2, r3, #6
    1154:	4b3d      	ldr	r3, [pc, #244]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1156:	695b      	ldr	r3, [r3, #20]
    1158:	4841      	ldr	r0, [pc, #260]	; (1260 <calc_fixed_time_MW_sweep+0x2b0>)
    115a:	f000 fda9 	bl	1cb0 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
    115e:	4b3b      	ldr	r3, [pc, #236]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1160:	695b      	ldr	r3, [r3, #20]
    1162:	4a3b      	ldr	r2, [pc, #236]	; (1250 <calc_fixed_time_MW_sweep+0x2a0>)
    1164:	6812      	ldr	r2, [r2, #0]
    1166:	fb02 f303 	mul.w	r3, r2, r3
    116a:	2264      	movs	r2, #100	; 0x64
    116c:	4413      	add	r3, r2
    116e:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
    1170:	f241 3288 	movw	r2, #5000	; 0x1388
    1174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1176:	1a9b      	subs	r3, r3, r2
    1178:	2201      	movs	r2, #1
    117a:	1a9b      	subs	r3, r3, r2
    117c:	4a33      	ldr	r2, [pc, #204]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    117e:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
    1180:	4b32      	ldr	r3, [pc, #200]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    1182:	69db      	ldr	r3, [r3, #28]
    1184:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1186:	429a      	cmp	r2, r3
    1188:	d902      	bls.n	1190 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
    118a:	4a30      	ldr	r2, [pc, #192]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    118c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    118e:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
    1190:	f241 3288 	movw	r2, #5000	; 0x1388
    1194:	2301      	movs	r3, #1
    1196:	441a      	add	r2, r3
    1198:	4b2c      	ldr	r3, [pc, #176]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    119a:	69db      	ldr	r3, [r3, #28]
    119c:	4413      	add	r3, r2
    119e:	ee07 3a90 	vmov	s15, r3
    11a2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    11a6:	ed9f 5b24 	vldr	d5, [pc, #144]	; 1238 <calc_fixed_time_MW_sweep+0x288>
    11aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
    11ae:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    11b2:	4b26      	ldr	r3, [pc, #152]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    11b4:	68db      	ldr	r3, [r3, #12]
    11b6:	3301      	adds	r3, #1
    11b8:	ee07 3a90 	vmov	s15, r3
    11bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11c0:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    11c4:	ee26 7b07 	vmul.f64	d7, d6, d7
    11c8:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
    11cc:	f241 3288 	movw	r2, #5000	; 0x1388
    11d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    11d2:	4413      	add	r3, r2
    11d4:	2201      	movs	r2, #1
    11d6:	4413      	add	r3, r2
    11d8:	4a1c      	ldr	r2, [pc, #112]	; (124c <calc_fixed_time_MW_sweep+0x29c>)
    11da:	68d2      	ldr	r2, [r2, #12]
    11dc:	3201      	adds	r2, #1
    11de:	fb02 f303 	mul.w	r3, r2, r3
    11e2:	ee07 3a90 	vmov	s15, r3
    11e6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    11ea:	ed9f 5b13 	vldr	d5, [pc, #76]	; 1238 <calc_fixed_time_MW_sweep+0x288>
    11ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
    11f2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    11f6:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    11fa:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    11fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1202:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 1240 <calc_fixed_time_MW_sweep+0x290>
    1206:	eeb4 7bc6 	vcmpe.f64	d7, d6
    120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    120e:	dd2b      	ble.n	1268 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    1210:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    1214:	e9cd 2300 	strd	r2, r3, [sp]
    1218:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    121c:	4811      	ldr	r0, [pc, #68]	; (1264 <calc_fixed_time_MW_sweep+0x2b4>)
    121e:	f000 fd47 	bl	1cb0 <__printf_veneer>
    1222:	e029      	b.n	1278 <calc_fixed_time_MW_sweep+0x2c8>
    1224:	f3af 8000 	nop.w
    1228:	00000000 	.word	0x00000000
    122c:	41cdcd65 	.word	0x41cdcd65
    1230:	00000000 	.word	0x00000000
    1234:	4187d784 	.word	0x4187d784
    1238:	00000000 	.word	0x00000000
    123c:	412e8480 	.word	0x412e8480
    1240:	851eb852 	.word	0x851eb852
    1244:	3ff051eb 	.word	0x3ff051eb
    1248:	0801e030 	.word	0x0801e030
    124c:	20000728 	.word	0x20000728
    1250:	20000718 	.word	0x20000718
    1254:	000f4240 	.word	0x000f4240
    1258:	0801e080 	.word	0x0801e080
    125c:	10624dd3 	.word	0x10624dd3
    1260:	0801e0ac 	.word	0x0801e0ac
    1264:	0801e0e4 	.word	0x0801e0e4
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    1268:	4b57      	ldr	r3, [pc, #348]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    126a:	695b      	ldr	r3, [r3, #20]
    126c:	9300      	str	r3, [sp, #0]
    126e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1272:	4856      	ldr	r0, [pc, #344]	; (13cc <calc_fixed_time_MW_sweep+0x41c>)
    1274:	f000 fd1c 	bl	1cb0 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    1278:	79fb      	ldrb	r3, [r7, #7]
    127a:	2b00      	cmp	r3, #0
    127c:	d044      	beq.n	1308 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    127e:	4b52      	ldr	r3, [pc, #328]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    1280:	68db      	ldr	r3, [r3, #12]
    1282:	ee07 3a90 	vmov	s15, r3
    1286:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    128a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 13b0 <calc_fixed_time_MW_sweep+0x400>
    128e:	ee27 7b06 	vmul.f64	d7, d7, d6
    1292:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1296:	ee37 7b06 	vadd.f64	d7, d7, d6
    129a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    129e:	ee17 2a90 	vmov	r2, s15
    12a2:	4b49      	ldr	r3, [pc, #292]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    12a4:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    12a6:	4b48      	ldr	r3, [pc, #288]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    12a8:	68db      	ldr	r3, [r3, #12]
    12aa:	3301      	adds	r3, #1
    12ac:	ee07 3a90 	vmov	s15, r3
    12b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    12b4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    12b8:	ee26 7b07 	vmul.f64	d7, d6, d7
    12bc:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    12c0:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    12c4:	ed97 7b02 	vldr	d7, [r7, #8]
    12c8:	ee36 7b47 	vsub.f64	d7, d6, d7
    12cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    12d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
    12d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12d8:	dd11      	ble.n	12fe <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    12da:	4b3b      	ldr	r3, [pc, #236]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    12dc:	68db      	ldr	r3, [r3, #12]
    12de:	3b01      	subs	r3, #1
    12e0:	4a39      	ldr	r2, [pc, #228]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    12e2:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    12e4:	4b38      	ldr	r3, [pc, #224]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    12e6:	68db      	ldr	r3, [r3, #12]
    12e8:	3301      	adds	r3, #1
    12ea:	ee07 3a90 	vmov	s15, r3
    12ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    12f2:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    12f6:	ee26 7b07 	vmul.f64	d7, d6, d7
    12fa:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    12fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1302:	4833      	ldr	r0, [pc, #204]	; (13d0 <calc_fixed_time_MW_sweep+0x420>)
    1304:	f000 fcd4 	bl	1cb0 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    1308:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    130c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1310:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1314:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1318:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    131c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1320:	ee26 7b07 	vmul.f64	d7, d6, d7
    1324:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    1328:	4b27      	ldr	r3, [pc, #156]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    132a:	785b      	ldrb	r3, [r3, #1]
    132c:	ee07 3a90 	vmov	s15, r3
    1330:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    1334:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    1338:	ee26 6b07 	vmul.f64	d6, d6, d7
    133c:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 13b8 <calc_fixed_time_MW_sweep+0x408>
    1340:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1344:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    1348:	ed97 7b08 	vldr	d7, [r7, #32]
    134c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1350:	ee17 2a90 	vmov	r2, s15
    1354:	4b1c      	ldr	r3, [pc, #112]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    1356:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1358:	4b1b      	ldr	r3, [pc, #108]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    135a:	685b      	ldr	r3, [r3, #4]
    135c:	ee07 3a90 	vmov	s15, r3
    1360:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1364:	ed97 6b08 	vldr	d6, [r7, #32]
    1368:	ee36 7b47 	vsub.f64	d7, d6, d7
    136c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 13c0 <calc_fixed_time_MW_sweep+0x410>
    1370:	ee27 7b06 	vmul.f64	d7, d7, d6
    1374:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1378:	ee37 7b06 	vadd.f64	d7, d7, d6
    137c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1380:	ee17 2a90 	vmov	r2, s15
    1384:	4b10      	ldr	r3, [pc, #64]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    1386:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
    1388:	4b0f      	ldr	r3, [pc, #60]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    138a:	2200      	movs	r2, #0
    138c:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
    138e:	490e      	ldr	r1, [pc, #56]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    1390:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1394:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    1398:	f241 3288 	movw	r2, #5000	; 0x1388
    139c:	4b0a      	ldr	r3, [pc, #40]	; (13c8 <calc_fixed_time_MW_sweep+0x418>)
    139e:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
    13a0:	2301      	movs	r3, #1
}
    13a2:	4618      	mov	r0, r3
    13a4:	3768      	adds	r7, #104	; 0x68
    13a6:	46bd      	mov	sp, r7
    13a8:	bd80      	pop	{r7, pc}
    13aa:	bf00      	nop
    13ac:	f3af 8000 	nop.w
    13b0:	9999999a 	.word	0x9999999a
    13b4:	3ff19999 	.word	0x3ff19999
    13b8:	00000000 	.word	0x00000000
    13bc:	4187d784 	.word	0x4187d784
    13c0:	00000000 	.word	0x00000000
    13c4:	41700000 	.word	0x41700000
    13c8:	20000728 	.word	0x20000728
    13cc:	0801e11c 	.word	0x0801e11c
    13d0:	0801e168 	.word	0x0801e168

000013d4 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    13d4:	b480      	push	{r7}
    13d6:	b085      	sub	sp, #20
    13d8:	af00      	add	r7, sp, #0
    13da:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
    13de:	ed9f 5b10 	vldr	d5, [pc, #64]	; 1420 <calculate_k+0x4c>
    13e2:	ed97 6b00 	vldr	d6, [r7]
    13e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    13ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    13ee:	ee17 3a90 	vmov	r3, s15
    13f2:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    13f4:	68fb      	ldr	r3, [r7, #12]
    13f6:	2b01      	cmp	r3, #1
    13f8:	d00b      	beq.n	1412 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    13fa:	e002      	b.n	1402 <calculate_k+0x2e>
			k --;
    13fc:	68fb      	ldr	r3, [r7, #12]
    13fe:	3b01      	subs	r3, #1
    1400:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	2b3e      	cmp	r3, #62	; 0x3e
    1406:	d8f9      	bhi.n	13fc <calculate_k+0x28>
    1408:	68fb      	ldr	r3, [r7, #12]
    140a:	f003 0301 	and.w	r3, r3, #1
    140e:	2b00      	cmp	r3, #0
    1410:	d1f4      	bne.n	13fc <calculate_k+0x28>
		}
	}
	return (k);
    1412:	68fb      	ldr	r3, [r7, #12]
}
    1414:	4618      	mov	r0, r3
    1416:	3714      	adds	r7, #20
    1418:	46bd      	mov	sp, r7
    141a:	f85d 7b04 	ldr.w	r7, [sp], #4
    141e:	4770      	bx	lr
    1420:	20000000 	.word	0x20000000
    1424:	41ee8c21 	.word	0x41ee8c21

00001428 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
    1428:	b580      	push	{r7, lr}
    142a:	b082      	sub	sp, #8
    142c:	af00      	add	r7, sp, #0
    142e:	4603      	mov	r3, r0
    1430:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    1432:	79fb      	ldrb	r3, [r7, #7]
    1434:	2b00      	cmp	r3, #0
    1436:	d003      	beq.n	1440 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    1438:	4b0f      	ldr	r3, [pc, #60]	; (1478 <start_POP_calibration+0x50>)
    143a:	2201      	movs	r2, #1
    143c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1440:	2201      	movs	r2, #1
    1442:	2102      	movs	r1, #2
    1444:	480d      	ldr	r0, [pc, #52]	; (147c <start_POP_calibration+0x54>)
    1446:	f000 fc4f 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    144a:	200a      	movs	r0, #10
    144c:	f000 fc28 	bl	1ca0 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1450:	4b0b      	ldr	r3, [pc, #44]	; (1480 <start_POP_calibration+0x58>)
    1452:	2200      	movs	r2, #0
    1454:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    1456:	4b08      	ldr	r3, [pc, #32]	; (1478 <start_POP_calibration+0x50>)
    1458:	2204      	movs	r2, #4
    145a:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    145c:	4b09      	ldr	r3, [pc, #36]	; (1484 <start_POP_calibration+0x5c>)
    145e:	681b      	ldr	r3, [r3, #0]
    1460:	4618      	mov	r0, r3
    1462:	f000 fac3 	bl	19ec <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    1466:	2200      	movs	r2, #0
    1468:	2102      	movs	r1, #2
    146a:	4804      	ldr	r0, [pc, #16]	; (147c <start_POP_calibration+0x54>)
    146c:	f000 fc3c 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    1470:	bf00      	nop
    1472:	3708      	adds	r7, #8
    1474:	46bd      	mov	sp, r7
    1476:	bd80      	pop	{r7, pc}
    1478:	20000728 	.word	0x20000728
    147c:	58020400 	.word	0x58020400
    1480:	20000716 	.word	0x20000716
    1484:	20000138 	.word	0x20000138

00001488 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    1488:	b580      	push	{r7, lr}
    148a:	b082      	sub	sp, #8
    148c:	af00      	add	r7, sp, #0
    148e:	4603      	mov	r3, r0
    1490:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    1492:	79fb      	ldrb	r3, [r7, #7]
    1494:	2b00      	cmp	r3, #0
    1496:	d003      	beq.n	14a0 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    1498:	4b1c      	ldr	r3, [pc, #112]	; (150c <start_MW_sweep+0x84>)
    149a:	2202      	movs	r2, #2
    149c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    14a0:	2201      	movs	r2, #1
    14a2:	2102      	movs	r1, #2
    14a4:	481a      	ldr	r0, [pc, #104]	; (1510 <start_MW_sweep+0x88>)
    14a6:	f000 fc1f 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    14aa:	2201      	movs	r2, #1
    14ac:	2102      	movs	r1, #2
    14ae:	4819      	ldr	r0, [pc, #100]	; (1514 <start_MW_sweep+0x8c>)
    14b0:	f000 fc1a 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
    14b4:	4b15      	ldr	r3, [pc, #84]	; (150c <start_MW_sweep+0x84>)
    14b6:	685b      	ldr	r3, [r3, #4]
    14b8:	4a14      	ldr	r2, [pc, #80]	; (150c <start_MW_sweep+0x84>)
    14ba:	6891      	ldr	r1, [r2, #8]
    14bc:	4a13      	ldr	r2, [pc, #76]	; (150c <start_MW_sweep+0x84>)
    14be:	7852      	ldrb	r2, [r2, #1]
    14c0:	4618      	mov	r0, r3
    14c2:	f7ff fb41 	bl	b48 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    14c6:	4b11      	ldr	r3, [pc, #68]	; (150c <start_MW_sweep+0x84>)
    14c8:	2202      	movs	r2, #2
    14ca:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    14cc:	4b0f      	ldr	r3, [pc, #60]	; (150c <start_MW_sweep+0x84>)
    14ce:	2200      	movs	r2, #0
    14d0:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    14d2:	200a      	movs	r0, #10
    14d4:	f000 fbe4 	bl	1ca0 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    14d8:	4b0f      	ldr	r3, [pc, #60]	; (1518 <start_MW_sweep+0x90>)
    14da:	2200      	movs	r2, #0
    14dc:	801a      	strh	r2, [r3, #0]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    14de:	2200      	movs	r2, #0
    14e0:	2101      	movs	r1, #1
    14e2:	480e      	ldr	r0, [pc, #56]	; (151c <start_MW_sweep+0x94>)
    14e4:	f000 fc00 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    14e8:	4b0d      	ldr	r3, [pc, #52]	; (1520 <start_MW_sweep+0x98>)
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	4618      	mov	r0, r3
    14ee:	f000 fa7d 	bl	19ec <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    14f2:	4b0c      	ldr	r3, [pc, #48]	; (1524 <start_MW_sweep+0x9c>)
    14f4:	681b      	ldr	r3, [r3, #0]
    14f6:	4618      	mov	r0, r3
    14f8:	f000 fa78 	bl	19ec <start_timer>
	sample_count = 0; //reset sample count
    14fc:	4b06      	ldr	r3, [pc, #24]	; (1518 <start_MW_sweep+0x90>)
    14fe:	2200      	movs	r2, #0
    1500:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
    1502:	2301      	movs	r3, #1
}
    1504:	4618      	mov	r0, r3
    1506:	3708      	adds	r7, #8
    1508:	46bd      	mov	sp, r7
    150a:	bd80      	pop	{r7, pc}
    150c:	20000728 	.word	0x20000728
    1510:	58021000 	.word	0x58021000
    1514:	58020400 	.word	0x58020400
    1518:	20000716 	.word	0x20000716
    151c:	58021800 	.word	0x58021800
    1520:	20000138 	.word	0x20000138
    1524:	2000013c 	.word	0x2000013c

00001528 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval Success/failure
  */
void start_continuous_MW_sweep(void) {
    1528:	b580      	push	{r7, lr}
    152a:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    152c:	4b04      	ldr	r3, [pc, #16]	; (1540 <start_continuous_MW_sweep+0x18>)
    152e:	2200      	movs	r2, #0
    1530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
    1534:	2000      	movs	r0, #0
    1536:	f7ff ff77 	bl	1428 <start_POP_calibration>
}
    153a:	bf00      	nop
    153c:	bd80      	pop	{r7, pc}
    153e:	bf00      	nop
    1540:	20000728 	.word	0x20000728

00001544 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    1544:	b580      	push	{r7, lr}
    1546:	b08a      	sub	sp, #40	; 0x28
    1548:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    154a:	4b95      	ldr	r3, [pc, #596]	; (17a0 <MW_update+0x25c>)
    154c:	781b      	ldrb	r3, [r3, #0]
    154e:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    1550:	2300      	movs	r3, #0
    1552:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    1554:	7dbb      	ldrb	r3, [r7, #22]
    1556:	2b04      	cmp	r3, #4
    1558:	f200 8109 	bhi.w	176e <MW_update+0x22a>
    155c:	a201      	add	r2, pc, #4	; (adr r2, 1564 <MW_update+0x20>)
    155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1562:	bf00      	nop
    1564:	00001787 	.word	0x00001787
    1568:	00001787 	.word	0x00001787
    156c:	00001579 	.word	0x00001579
    1570:	000015bb 	.word	0x000015bb
    1574:	000016fb 	.word	0x000016fb
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    1578:	4b8a      	ldr	r3, [pc, #552]	; (17a4 <MW_update+0x260>)
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	4618      	mov	r0, r3
    157e:	f000 fa65 	bl	1a4c <check_timer>
    1582:	4603      	mov	r3, r0
    1584:	f241 3288 	movw	r2, #5000	; 0x1388
    1588:	4293      	cmp	r3, r2
    158a:	d201      	bcs.n	1590 <MW_update+0x4c>
    158c:	2300      	movs	r3, #0
    158e:	e0fe      	b.n	178e <MW_update+0x24a>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    1590:	4b84      	ldr	r3, [pc, #528]	; (17a4 <MW_update+0x260>)
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	4618      	mov	r0, r3
    1596:	f000 fa47 	bl	1a28 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    159a:	2200      	movs	r2, #0
    159c:	2102      	movs	r1, #2
    159e:	4882      	ldr	r0, [pc, #520]	; (17a8 <MW_update+0x264>)
    15a0:	f000 fba2 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
    15a4:	4b7e      	ldr	r3, [pc, #504]	; (17a0 <MW_update+0x25c>)
    15a6:	2203      	movs	r2, #3
    15a8:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
    15aa:	4b7e      	ldr	r3, [pc, #504]	; (17a4 <MW_update+0x260>)
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	4618      	mov	r0, r3
    15b0:	f000 fa1c 	bl	19ec <start_timer>
			action_taken = true;
    15b4:	2301      	movs	r3, #1
    15b6:	75fb      	strb	r3, [r7, #23]
			break;
    15b8:	e0e8      	b.n	178c <MW_update+0x248>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    15ba:	4b7a      	ldr	r3, [pc, #488]	; (17a4 <MW_update+0x260>)
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	4618      	mov	r0, r3
    15c0:	f000 fa44 	bl	1a4c <check_timer>
    15c4:	4602      	mov	r2, r0
    15c6:	4b76      	ldr	r3, [pc, #472]	; (17a0 <MW_update+0x25c>)
    15c8:	69db      	ldr	r3, [r3, #28]
    15ca:	429a      	cmp	r2, r3
    15cc:	d201      	bcs.n	15d2 <MW_update+0x8e>
    15ce:	2300      	movs	r3, #0
    15d0:	e0dd      	b.n	178e <MW_update+0x24a>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    15d2:	2301      	movs	r3, #1
    15d4:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    15d6:	4b73      	ldr	r3, [pc, #460]	; (17a4 <MW_update+0x260>)
    15d8:	681b      	ldr	r3, [r3, #0]
    15da:	4618      	mov	r0, r3
    15dc:	f000 fa24 	bl	1a28 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    15e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    15e4:	4870      	ldr	r0, [pc, #448]	; (17a8 <MW_update+0x264>)
    15e6:	f000 fb43 	bl	1c70 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    15ea:	2201      	movs	r2, #1
    15ec:	2102      	movs	r1, #2
    15ee:	486e      	ldr	r0, [pc, #440]	; (17a8 <MW_update+0x264>)
    15f0:	f000 fb7a 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    15f4:	4b6a      	ldr	r3, [pc, #424]	; (17a0 <MW_update+0x25c>)
    15f6:	2202      	movs	r2, #2
    15f8:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    15fa:	4b69      	ldr	r3, [pc, #420]	; (17a0 <MW_update+0x25c>)
    15fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    15fe:	4b68      	ldr	r3, [pc, #416]	; (17a0 <MW_update+0x25c>)
    1600:	68db      	ldr	r3, [r3, #12]
    1602:	429a      	cmp	r2, r3
    1604:	d15c      	bne.n	16c0 <MW_update+0x17c>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1606:	2201      	movs	r2, #1
    1608:	2101      	movs	r1, #1
    160a:	4868      	ldr	r0, [pc, #416]	; (17ac <MW_update+0x268>)
    160c:	f000 fb6c 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    1610:	4b67      	ldr	r3, [pc, #412]	; (17b0 <MW_update+0x26c>)
    1612:	681b      	ldr	r3, [r3, #0]
    1614:	4618      	mov	r0, r3
    1616:	f000 fa19 	bl	1a4c <check_timer>
    161a:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    161c:	4b64      	ldr	r3, [pc, #400]	; (17b0 <MW_update+0x26c>)
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	4618      	mov	r0, r3
    1622:	f000 fa01 	bl	1a28 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    1626:	68bb      	ldr	r3, [r7, #8]
    1628:	ee07 3a90 	vmov	s15, r3
    162c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1630:	ed9f 6b59 	vldr	d6, [pc, #356]	; 1798 <MW_update+0x254>
    1634:	ee87 5b06 	vdiv.f64	d5, d7, d6
    1638:	4b59      	ldr	r3, [pc, #356]	; (17a0 <MW_update+0x25c>)
    163a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    163e:	495d      	ldr	r1, [pc, #372]	; (17b4 <MW_update+0x270>)
    1640:	8809      	ldrh	r1, [r1, #0]
    1642:	b289      	uxth	r1, r1
    1644:	9102      	str	r1, [sp, #8]
    1646:	e9cd 2300 	strd	r2, r3, [sp]
    164a:	ec53 2b15 	vmov	r2, r3, d5
    164e:	485a      	ldr	r0, [pc, #360]	; (17b8 <MW_update+0x274>)
    1650:	f000 fb2e 	bl	1cb0 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    1654:	4b52      	ldr	r3, [pc, #328]	; (17a0 <MW_update+0x25c>)
    1656:	695b      	ldr	r3, [r3, #20]
    1658:	b29a      	uxth	r2, r3
    165a:	4b51      	ldr	r3, [pc, #324]	; (17a0 <MW_update+0x25c>)
    165c:	68db      	ldr	r3, [r3, #12]
    165e:	3301      	adds	r3, #1
    1660:	b29b      	uxth	r3, r3
    1662:	fb12 f303 	smulbb	r3, r2, r3
    1666:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    1668:	4b4d      	ldr	r3, [pc, #308]	; (17a0 <MW_update+0x25c>)
    166a:	68db      	ldr	r3, [r3, #12]
    166c:	b29a      	uxth	r2, r3
    166e:	88fb      	ldrh	r3, [r7, #6]
    1670:	4413      	add	r3, r2
    1672:	b29b      	uxth	r3, r3
    1674:	3301      	adds	r3, #1
    1676:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    1678:	4b4e      	ldr	r3, [pc, #312]	; (17b4 <MW_update+0x270>)
    167a:	881b      	ldrh	r3, [r3, #0]
    167c:	b29b      	uxth	r3, r3
    167e:	88fa      	ldrh	r2, [r7, #6]
    1680:	429a      	cmp	r2, r3
    1682:	d010      	beq.n	16a6 <MW_update+0x162>
    1684:	4b4b      	ldr	r3, [pc, #300]	; (17b4 <MW_update+0x270>)
    1686:	881b      	ldrh	r3, [r3, #0]
    1688:	b29b      	uxth	r3, r3
    168a:	88ba      	ldrh	r2, [r7, #4]
    168c:	429a      	cmp	r2, r3
    168e:	d00a      	beq.n	16a6 <MW_update+0x162>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    1690:	88fb      	ldrh	r3, [r7, #6]
    1692:	4a48      	ldr	r2, [pc, #288]	; (17b4 <MW_update+0x270>)
    1694:	8812      	ldrh	r2, [r2, #0]
    1696:	b292      	uxth	r2, r2
    1698:	4619      	mov	r1, r3
    169a:	4848      	ldr	r0, [pc, #288]	; (17bc <MW_update+0x278>)
    169c:	f000 fb08 	bl	1cb0 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    16a0:	4847      	ldr	r0, [pc, #284]	; (17c0 <MW_update+0x27c>)
    16a2:	f000 fb35 	bl	1d10 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    16a6:	4b3e      	ldr	r3, [pc, #248]	; (17a0 <MW_update+0x25c>)
    16a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    16ac:	2b02      	cmp	r3, #2
    16ae:	d103      	bne.n	16b8 <MW_update+0x174>
					mw_sweep_settings.state = MW_STOPPED;
    16b0:	4b3b      	ldr	r3, [pc, #236]	; (17a0 <MW_update+0x25c>)
    16b2:	2200      	movs	r2, #0
    16b4:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    16b6:	e069      	b.n	178c <MW_update+0x248>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    16b8:	2000      	movs	r0, #0
    16ba:	f7ff fee5 	bl	1488 <start_MW_sweep>
			break;
    16be:	e065      	b.n	178c <MW_update+0x248>
				mw_sweep_settings.current_point++; //increment point counter
    16c0:	4b37      	ldr	r3, [pc, #220]	; (17a0 <MW_update+0x25c>)
    16c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    16c4:	3301      	adds	r3, #1
    16c6:	4a36      	ldr	r2, [pc, #216]	; (17a0 <MW_update+0x25c>)
    16c8:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    16ca:	4b35      	ldr	r3, [pc, #212]	; (17a0 <MW_update+0x25c>)
    16cc:	689a      	ldr	r2, [r3, #8]
    16ce:	4b34      	ldr	r3, [pc, #208]	; (17a0 <MW_update+0x25c>)
    16d0:	691b      	ldr	r3, [r3, #16]
    16d2:	4933      	ldr	r1, [pc, #204]	; (17a0 <MW_update+0x25c>)
    16d4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    16d6:	fb01 f303 	mul.w	r3, r1, r3
    16da:	4413      	add	r3, r2
    16dc:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    16de:	4b30      	ldr	r3, [pc, #192]	; (17a0 <MW_update+0x25c>)
    16e0:	685b      	ldr	r3, [r3, #4]
    16e2:	4a2f      	ldr	r2, [pc, #188]	; (17a0 <MW_update+0x25c>)
    16e4:	7852      	ldrb	r2, [r2, #1]
    16e6:	68f9      	ldr	r1, [r7, #12]
    16e8:	4618      	mov	r0, r3
    16ea:	f7ff fa2d 	bl	b48 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    16ee:	4b2d      	ldr	r3, [pc, #180]	; (17a4 <MW_update+0x260>)
    16f0:	681b      	ldr	r3, [r3, #0]
    16f2:	4618      	mov	r0, r3
    16f4:	f000 f97a 	bl	19ec <start_timer>
			break;
    16f8:	e048      	b.n	178c <MW_update+0x248>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    16fa:	4b2e      	ldr	r3, [pc, #184]	; (17b4 <MW_update+0x270>)
    16fc:	881b      	ldrh	r3, [r3, #0]
    16fe:	b29b      	uxth	r3, r3
    1700:	2b63      	cmp	r3, #99	; 0x63
    1702:	d942      	bls.n	178a <MW_update+0x246>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    1704:	4b27      	ldr	r3, [pc, #156]	; (17a4 <MW_update+0x260>)
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	4618      	mov	r0, r3
    170a:	f000 f99f 	bl	1a4c <check_timer>
    170e:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    1710:	693b      	ldr	r3, [r7, #16]
    1712:	ee07 3a90 	vmov	s15, r3
    1716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    171a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 17c4 <MW_update+0x280>
    171e:	eec7 7a26 	vdiv.f32	s15, s14, s13
    1722:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1726:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    172a:	ee37 7b06 	vadd.f64	d7, d7, d6
    172e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1732:	ee17 2a90 	vmov	r2, s15
    1736:	4b24      	ldr	r3, [pc, #144]	; (17c8 <MW_update+0x284>)
    1738:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    173a:	4b1a      	ldr	r3, [pc, #104]	; (17a4 <MW_update+0x260>)
    173c:	681b      	ldr	r3, [r3, #0]
    173e:	4618      	mov	r0, r3
    1740:	f000 f972 	bl	1a28 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    1744:	4b20      	ldr	r3, [pc, #128]	; (17c8 <MW_update+0x284>)
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	4619      	mov	r1, r3
    174a:	4820      	ldr	r0, [pc, #128]	; (17cc <MW_update+0x288>)
    174c:	f000 fab0 	bl	1cb0 <__printf_veneer>
				action_taken = true;
    1750:	2301      	movs	r3, #1
    1752:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    1754:	4b12      	ldr	r3, [pc, #72]	; (17a0 <MW_update+0x25c>)
    1756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    175a:	2b01      	cmp	r3, #1
    175c:	d103      	bne.n	1766 <MW_update+0x222>
					mw_sweep_settings.state = MW_STOPPED;
    175e:	4b10      	ldr	r3, [pc, #64]	; (17a0 <MW_update+0x25c>)
    1760:	2200      	movs	r2, #0
    1762:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    1764:	e011      	b.n	178a <MW_update+0x246>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    1766:	2000      	movs	r0, #0
    1768:	f7ff fe8e 	bl	1488 <start_MW_sweep>
			break;
    176c:	e00d      	b.n	178a <MW_update+0x246>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    176e:	4b0c      	ldr	r3, [pc, #48]	; (17a0 <MW_update+0x25c>)
    1770:	781b      	ldrb	r3, [r3, #0]
    1772:	4619      	mov	r1, r3
    1774:	4816      	ldr	r0, [pc, #88]	; (17d0 <MW_update+0x28c>)
    1776:	f000 fa9b 	bl	1cb0 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    177a:	7dbb      	ldrb	r3, [r7, #22]
    177c:	4619      	mov	r1, r3
    177e:	4815      	ldr	r0, [pc, #84]	; (17d4 <MW_update+0x290>)
    1780:	f000 fa96 	bl	1cb0 <__printf_veneer>
    1784:	e002      	b.n	178c <MW_update+0x248>
			break; //no action to take
    1786:	bf00      	nop
    1788:	e000      	b.n	178c <MW_update+0x248>
			break;
    178a:	bf00      	nop
	}
    return(action_taken);
    178c:	7dfb      	ldrb	r3, [r7, #23]
}
    178e:	4618      	mov	r0, r3
    1790:	3718      	adds	r7, #24
    1792:	46bd      	mov	sp, r7
    1794:	bd80      	pop	{r7, pc}
    1796:	bf00      	nop
    1798:	00000000 	.word	0x00000000
    179c:	412e8480 	.word	0x412e8480
    17a0:	20000728 	.word	0x20000728
    17a4:	20000138 	.word	0x20000138
    17a8:	58020400 	.word	0x58020400
    17ac:	58021800 	.word	0x58021800
    17b0:	2000013c 	.word	0x2000013c
    17b4:	20000716 	.word	0x20000716
    17b8:	0801e1a8 	.word	0x0801e1a8
    17bc:	0801e1e0 	.word	0x0801e1e0
    17c0:	0801e21c 	.word	0x0801e21c
    17c4:	42c80000 	.word	0x42c80000
    17c8:	20000718 	.word	0x20000718
    17cc:	0801e240 	.word	0x0801e240
    17d0:	0801e270 	.word	0x0801e270
    17d4:	0801e29c 	.word	0x0801e29c

000017d8 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    17d8:	b580      	push	{r7, lr}
    17da:	b090      	sub	sp, #64	; 0x40
    17dc:	af02      	add	r7, sp, #8
    17de:	ed87 0b02 	vstr	d0, [r7, #8]
    17e2:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    17e6:	486a      	ldr	r0, [pc, #424]	; (1990 <MW_frequency_toggle+0x1b8>)
    17e8:	f000 fa92 	bl	1d10 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    17ec:	ed97 7b02 	vldr	d7, [r7, #8]
    17f0:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 1970 <MW_frequency_toggle+0x198>
    17f4:	ee87 4b06 	vdiv.f64	d4, d7, d6
    17f8:	ed97 6b00 	vldr	d6, [r7]
    17fc:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 1970 <MW_frequency_toggle+0x198>
    1800:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1804:	ed8d 7b00 	vstr	d7, [sp]
    1808:	ec53 2b14 	vmov	r2, r3, d4
    180c:	4861      	ldr	r0, [pc, #388]	; (1994 <MW_frequency_toggle+0x1bc>)
    180e:	f000 fa4f 	bl	1cb0 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    1812:	ed9f 5b59 	vldr	d5, [pc, #356]	; 1978 <MW_frequency_toggle+0x1a0>
    1816:	ed97 6b02 	vldr	d6, [r7, #8]
    181a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    181e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1822:	ee17 3a90 	vmov	r3, s15
    1826:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    182a:	2b01      	cmp	r3, #1
    182c:	d00b      	beq.n	1846 <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    182e:	e002      	b.n	1836 <MW_frequency_toggle+0x5e>
			k_one--;
    1830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1832:	3b01      	subs	r3, #1
    1834:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    1836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1838:	2b3e      	cmp	r3, #62	; 0x3e
    183a:	d8f9      	bhi.n	1830 <MW_frequency_toggle+0x58>
    183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    183e:	f003 0301 	and.w	r3, r3, #1
    1842:	2b00      	cmp	r3, #0
    1844:	d1f4      	bne.n	1830 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    1846:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 1978 <MW_frequency_toggle+0x1a0>
    184a:	ed97 6b00 	vldr	d6, [r7]
    184e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1852:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1856:	ee17 3a90 	vmov	r3, s15
    185a:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    185e:	2b01      	cmp	r3, #1
    1860:	d00b      	beq.n	187a <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    1862:	e002      	b.n	186a <MW_frequency_toggle+0x92>
			k_two--;
    1864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1866:	3b01      	subs	r3, #1
    1868:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    186c:	2b3e      	cmp	r3, #62	; 0x3e
    186e:	d8f9      	bhi.n	1864 <MW_frequency_toggle+0x8c>
    1870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1872:	f003 0301 	and.w	r3, r3, #1
    1876:	2b00      	cmp	r3, #0
    1878:	d1f4      	bne.n	1864 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    187a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    187c:	ee07 3a90 	vmov	s15, r3
    1880:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1884:	ed97 7b02 	vldr	d7, [r7, #8]
    1888:	ee26 6b07 	vmul.f64	d6, d6, d7
    188c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 1980 <MW_frequency_toggle+0x1a8>
    1890:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1894:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    1898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    189a:	ee07 3a90 	vmov	s15, r3
    189e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    18a2:	ed97 7b00 	vldr	d7, [r7]
    18a6:	ee26 6b07 	vmul.f64	d6, d6, d7
    18aa:	ed9f 5b35 	vldr	d5, [pc, #212]	; 1980 <MW_frequency_toggle+0x1a8>
    18ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
    18b2:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    18b6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    18ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18be:	ee17 3a90 	vmov	r3, s15
    18c2:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    18c4:	69fb      	ldr	r3, [r7, #28]
    18c6:	ee07 3a90 	vmov	s15, r3
    18ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    18ce:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    18d2:	ee36 7b47 	vsub.f64	d7, d6, d7
    18d6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 1988 <MW_frequency_toggle+0x1b0>
    18da:	ee27 7b06 	vmul.f64	d7, d7, d6
    18de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    18e2:	ee37 7b06 	vadd.f64	d7, d7, d6
    18e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18ea:	ee17 3a90 	vmov	r3, s15
    18ee:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    18f0:	ed97 7b08 	vldr	d7, [r7, #32]
    18f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18f8:	ee17 3a90 	vmov	r3, s15
    18fc:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    18fe:	697b      	ldr	r3, [r7, #20]
    1900:	ee07 3a90 	vmov	s15, r3
    1904:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1908:	ed97 6b08 	vldr	d6, [r7, #32]
    190c:	ee36 7b47 	vsub.f64	d7, d6, d7
    1910:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 1988 <MW_frequency_toggle+0x1b0>
    1914:	ee27 7b06 	vmul.f64	d7, d7, d6
    1918:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    191c:	ee37 7b06 	vadd.f64	d7, d7, d6
    1920:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1924:	ee17 3a90 	vmov	r3, s15
    1928:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    192a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    192c:	69b9      	ldr	r1, [r7, #24]
    192e:	69f8      	ldr	r0, [r7, #28]
    1930:	f7ff f90a 	bl	b48 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1934:	2200      	movs	r2, #0
    1936:	2101      	movs	r1, #1
    1938:	4817      	ldr	r0, [pc, #92]	; (1998 <MW_frequency_toggle+0x1c0>)
    193a:	f000 f9d5 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    193e:	4b17      	ldr	r3, [pc, #92]	; (199c <MW_frequency_toggle+0x1c4>)
    1940:	681b      	ldr	r3, [r3, #0]
    1942:	2164      	movs	r1, #100	; 0x64
    1944:	4618      	mov	r0, r3
    1946:	f000 f88d 	bl	1a64 <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    194a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    194c:	6939      	ldr	r1, [r7, #16]
    194e:	6978      	ldr	r0, [r7, #20]
    1950:	f7ff f8fa 	bl	b48 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1954:	2201      	movs	r2, #1
    1956:	2101      	movs	r1, #1
    1958:	480f      	ldr	r0, [pc, #60]	; (1998 <MW_frequency_toggle+0x1c0>)
    195a:	f000 f9c5 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    195e:	4b0f      	ldr	r3, [pc, #60]	; (199c <MW_frequency_toggle+0x1c4>)
    1960:	681b      	ldr	r3, [r3, #0]
    1962:	2164      	movs	r1, #100	; 0x64
    1964:	4618      	mov	r0, r3
    1966:	f000 f87d 	bl	1a64 <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    196a:	e7de      	b.n	192a <MW_frequency_toggle+0x152>
    196c:	f3af 8000 	nop.w
    1970:	00000000 	.word	0x00000000
    1974:	41cdcd65 	.word	0x41cdcd65
    1978:	20000000 	.word	0x20000000
    197c:	41ee8c21 	.word	0x41ee8c21
    1980:	00000000 	.word	0x00000000
    1984:	4187d784 	.word	0x4187d784
    1988:	00000000 	.word	0x00000000
    198c:	41700000 	.word	0x41700000
    1990:	0801e2b4 	.word	0x0801e2b4
    1994:	0801e2d8 	.word	0x0801e2d8
    1998:	58021800 	.word	0x58021800
    199c:	20000134 	.word	0x20000134

000019a0 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    19a0:	b580      	push	{r7, lr}
    19a2:	b084      	sub	sp, #16
    19a4:	af00      	add	r7, sp, #0
    19a6:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    19a8:	2300      	movs	r3, #0
    19aa:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	2b1f      	cmp	r3, #31
    19b0:	d904      	bls.n	19bc <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    19b2:	480d      	ldr	r0, [pc, #52]	; (19e8 <set_SDO_output+0x48>)
    19b4:	f000 f9ac 	bl	1d10 <__puts_veneer>
		Error_Handler();
    19b8:	f000 f962 	bl	1c80 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    19bc:	200f      	movs	r0, #15
    19be:	f7fe ff29 	bl	814 <synth_readreg>
    19c2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    19c4:	68fb      	ldr	r3, [r7, #12]
    19c6:	f023 031f 	bic.w	r3, r3, #31
    19ca:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    19cc:	68fa      	ldr	r2, [r7, #12]
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	4313      	orrs	r3, r2
    19d2:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    19d4:	2301      	movs	r3, #1
    19d6:	2200      	movs	r2, #0
    19d8:	210f      	movs	r1, #15
    19da:	68f8      	ldr	r0, [r7, #12]
    19dc:	f7fe fea0 	bl	720 <synth_writereg>
}
    19e0:	bf00      	nop
    19e2:	3710      	adds	r7, #16
    19e4:	46bd      	mov	sp, r7
    19e6:	bd80      	pop	{r7, pc}
    19e8:	0801e300 	.word	0x0801e300

000019ec <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    19ec:	b480      	push	{r7}
    19ee:	b083      	sub	sp, #12
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	681b      	ldr	r3, [r3, #0]
    19f8:	f023 0201 	bic.w	r2, r3, #1
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	695b      	ldr	r3, [r3, #20]
    1a04:	f043 0201 	orr.w	r2, r3, #1
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	681b      	ldr	r3, [r3, #0]
    1a10:	f043 0201 	orr.w	r2, r3, #1
    1a14:	687b      	ldr	r3, [r7, #4]
    1a16:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1a18:	687b      	ldr	r3, [r7, #4]
    1a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a1c:	4618      	mov	r0, r3
    1a1e:	370c      	adds	r7, #12
    1a20:	46bd      	mov	sp, r7
    1a22:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a26:	4770      	bx	lr

00001a28 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1a28:	b480      	push	{r7}
    1a2a:	b083      	sub	sp, #12
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	681b      	ldr	r3, [r3, #0]
    1a34:	f023 0201 	bic.w	r2, r3, #1
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a40:	4618      	mov	r0, r3
    1a42:	370c      	adds	r7, #12
    1a44:	46bd      	mov	sp, r7
    1a46:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a4a:	4770      	bx	lr

00001a4c <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    1a4c:	b480      	push	{r7}
    1a4e:	b083      	sub	sp, #12
    1a50:	af00      	add	r7, sp, #0
    1a52:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1a54:	687b      	ldr	r3, [r7, #4]
    1a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a58:	4618      	mov	r0, r3
    1a5a:	370c      	adds	r7, #12
    1a5c:	46bd      	mov	sp, r7
    1a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a62:	4770      	bx	lr

00001a64 <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    1a64:	b580      	push	{r7, lr}
    1a66:	b084      	sub	sp, #16
    1a68:	af00      	add	r7, sp, #0
    1a6a:	6078      	str	r0, [r7, #4]
    1a6c:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    1a6e:	6878      	ldr	r0, [r7, #4]
    1a70:	f7ff ffbc 	bl	19ec <start_timer>
    1a74:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    1a76:	bf00      	nop
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a7c:	683a      	ldr	r2, [r7, #0]
    1a7e:	429a      	cmp	r2, r3
    1a80:	d8fa      	bhi.n	1a78 <timer_delay+0x14>

	stop_timer(timer);
    1a82:	6878      	ldr	r0, [r7, #4]
    1a84:	f7ff ffd0 	bl	1a28 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    1a88:	bf00      	nop
    1a8a:	3710      	adds	r7, #16
    1a8c:	46bd      	mov	sp, r7
    1a8e:	bd80      	pop	{r7, pc}

00001a90 <measure_POP_cycle>:
/**
  * @brief  Returns the measured period of a POP cycle as averaged over 20 cycles
  * @param  None
  * @retval Period expressed as an integer number of microseconds
  */
uint32_t measure_POP_cycle(void){
    1a90:	b580      	push	{r7, lr}
    1a92:	b086      	sub	sp, #24
    1a94:	af00      	add	r7, sp, #0

	/* Measures the elapsed time taken for 20 POP cycles
	 * Relies on the ADC value changing every time a sample is taken
	 * ADC must be initialised before running
	 */
	uint32_t adc_value = 0;
    1a96:	2300      	movs	r3, #0
    1a98:	617b      	str	r3, [r7, #20]
	uint32_t last_adc_value = 9999;
    1a9a:	f242 730f 	movw	r3, #9999	; 0x270f
    1a9e:	613b      	str	r3, [r7, #16]
	uint8_t cycle_count = 0;
    1aa0:	2300      	movs	r3, #0
    1aa2:	73fb      	strb	r3, [r7, #15]
	uint32_t period;
	const uint8_t iterations = 20;
    1aa4:	2314      	movs	r3, #20
    1aa6:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1aa8:	2201      	movs	r2, #1
    1aaa:	2102      	movs	r1, #2
    1aac:	4826      	ldr	r0, [pc, #152]	; (1b48 <measure_POP_cycle+0xb8>)
    1aae:	f000 f91b 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
    1ab2:	4b26      	ldr	r3, [pc, #152]	; (1b4c <measure_POP_cycle+0xbc>)
    1ab4:	681b      	ldr	r3, [r3, #0]
    1ab6:	4618      	mov	r0, r3
    1ab8:	f7ff ff98 	bl	19ec <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Start POP cycle
    1abc:	2200      	movs	r2, #0
    1abe:	2102      	movs	r1, #2
    1ac0:	4821      	ldr	r0, [pc, #132]	; (1b48 <measure_POP_cycle+0xb8>)
    1ac2:	f000 f911 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>

	// get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc3);
    1ac6:	4822      	ldr	r0, [pc, #136]	; (1b50 <measure_POP_cycle+0xc0>)
    1ac8:	f000 f926 	bl	1d18 <__HAL_ADC_GetValue_veneer>
    1acc:	6178      	str	r0, [r7, #20]
	while (cycle_count < iterations) {
    1ace:	e00c      	b.n	1aea <measure_POP_cycle+0x5a>
		while (adc_value == last_adc_value) {
			adc_value = HAL_ADC_GetValue(&hadc3); //keep reading ADC until value changes
    1ad0:	481f      	ldr	r0, [pc, #124]	; (1b50 <measure_POP_cycle+0xc0>)
    1ad2:	f000 f921 	bl	1d18 <__HAL_ADC_GetValue_veneer>
    1ad6:	6178      	str	r0, [r7, #20]
		while (adc_value == last_adc_value) {
    1ad8:	697a      	ldr	r2, [r7, #20]
    1ada:	693b      	ldr	r3, [r7, #16]
    1adc:	429a      	cmp	r2, r3
    1ade:	d0f7      	beq.n	1ad0 <measure_POP_cycle+0x40>
		}
		last_adc_value = adc_value;
    1ae0:	697b      	ldr	r3, [r7, #20]
    1ae2:	613b      	str	r3, [r7, #16]
		cycle_count++;
    1ae4:	7bfb      	ldrb	r3, [r7, #15]
    1ae6:	3301      	adds	r3, #1
    1ae8:	73fb      	strb	r3, [r7, #15]
	while (cycle_count < iterations) {
    1aea:	7bfa      	ldrb	r2, [r7, #15]
    1aec:	7bbb      	ldrb	r3, [r7, #14]
    1aee:	429a      	cmp	r2, r3
    1af0:	d3f2      	bcc.n	1ad8 <measure_POP_cycle+0x48>
	}

	uint32_t total_period = check_timer(MW_TIMER);
    1af2:	4b16      	ldr	r3, [pc, #88]	; (1b4c <measure_POP_cycle+0xbc>)
    1af4:	681b      	ldr	r3, [r3, #0]
    1af6:	4618      	mov	r0, r3
    1af8:	f7ff ffa8 	bl	1a4c <check_timer>
    1afc:	60b8      	str	r0, [r7, #8]
	period = (float)(check_timer(MW_TIMER)) / iterations + 0.5;
    1afe:	4b13      	ldr	r3, [pc, #76]	; (1b4c <measure_POP_cycle+0xbc>)
    1b00:	681b      	ldr	r3, [r3, #0]
    1b02:	4618      	mov	r0, r3
    1b04:	f7ff ffa2 	bl	1a4c <check_timer>
    1b08:	ee07 0a90 	vmov	s15, r0
    1b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
    1b10:	7bbb      	ldrb	r3, [r7, #14]
    1b12:	ee07 3a90 	vmov	s15, r3
    1b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1b22:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1b26:	ee37 7b06 	vadd.f64	d7, d7, d6
    1b2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1b2e:	ee17 3a90 	vmov	r3, s15
    1b32:	607b      	str	r3, [r7, #4]
	stop_timer(MW_TIMER);
    1b34:	4b05      	ldr	r3, [pc, #20]	; (1b4c <measure_POP_cycle+0xbc>)
    1b36:	681b      	ldr	r3, [r3, #0]
    1b38:	4618      	mov	r0, r3
    1b3a:	f7ff ff75 	bl	1a28 <stop_timer>
	#ifdef TIMER_VERBOSE
		printf("Time for %u POP cycles: %lu us\r\n", iterations, total_period);
		printf("POP period: %lu us\r\n", period);
	#endif //TIMER_VERBOSE
	return (period);
    1b3e:	687b      	ldr	r3, [r7, #4]

}
    1b40:	4618      	mov	r0, r3
    1b42:	3718      	adds	r7, #24
    1b44:	46bd      	mov	sp, r7
    1b46:	bd80      	pop	{r7, pc}
    1b48:	58020400 	.word	0x58020400
    1b4c:	20000138 	.word	0x20000138
    1b50:	20000378 	.word	0x20000378

00001b54 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    1b54:	b580      	push	{r7, lr}
    1b56:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    1b58:	f240 1103 	movw	r1, #259	; 0x103
    1b5c:	480f      	ldr	r0, [pc, #60]	; (1b9c <start_pop+0x48>)
    1b5e:	f000 f8ab 	bl	1cb8 <__HAL_HRTIM_WaveformOutputStart_veneer>
    1b62:	4603      	mov	r3, r0
    1b64:	2b00      	cmp	r3, #0
    1b66:	d004      	beq.n	1b72 <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    1b68:	480d      	ldr	r0, [pc, #52]	; (1ba0 <start_pop+0x4c>)
    1b6a:	f000 f8d1 	bl	1d10 <__puts_veneer>
		Error_Handler();
    1b6e:	f000 f887 	bl	1c80 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    1b72:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1b76:	4809      	ldr	r0, [pc, #36]	; (1b9c <start_pop+0x48>)
    1b78:	f000 f862 	bl	1c40 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    1b7c:	4603      	mov	r3, r0
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d004      	beq.n	1b8c <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    1b82:	4808      	ldr	r0, [pc, #32]	; (1ba4 <start_pop+0x50>)
    1b84:	f000 f8c4 	bl	1d10 <__puts_veneer>
		Error_Handler();
    1b88:	f000 f87a 	bl	1c80 <__Error_Handler_veneer>
	}

	pop_running = true;
    1b8c:	4b06      	ldr	r3, [pc, #24]	; (1ba8 <start_pop+0x54>)
    1b8e:	2201      	movs	r2, #1
    1b90:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    1b92:	4806      	ldr	r0, [pc, #24]	; (1bac <start_pop+0x58>)
    1b94:	f000 f8bc 	bl	1d10 <__puts_veneer>

}
    1b98:	bf00      	nop
    1b9a:	bd80      	pop	{r7, pc}
    1b9c:	200003f0 	.word	0x200003f0
    1ba0:	0801e324 	.word	0x0801e324
    1ba4:	0801e33c 	.word	0x0801e33c
    1ba8:	20000778 	.word	0x20000778
    1bac:	0801e354 	.word	0x0801e354

00001bb0 <stop_pop>:
void stop_pop() {
    1bb0:	b580      	push	{r7, lr}
    1bb2:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    1bb4:	f240 1103 	movw	r1, #259	; 0x103
    1bb8:	4813      	ldr	r0, [pc, #76]	; (1c08 <stop_pop+0x58>)
    1bba:	f000 f8b5 	bl	1d28 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1bbe:	4603      	mov	r3, r0
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	d004      	beq.n	1bce <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    1bc4:	4811      	ldr	r0, [pc, #68]	; (1c0c <stop_pop+0x5c>)
    1bc6:	f000 f8a3 	bl	1d10 <__puts_veneer>
		Error_Handler();
    1bca:	f000 f859 	bl	1c80 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1bce:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1bd2:	480d      	ldr	r0, [pc, #52]	; (1c08 <stop_pop+0x58>)
    1bd4:	f000 f8b4 	bl	1d40 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    1bd8:	4603      	mov	r3, r0
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d004      	beq.n	1be8 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1bde:	480c      	ldr	r0, [pc, #48]	; (1c10 <stop_pop+0x60>)
    1be0:	f000 f896 	bl	1d10 <__puts_veneer>
		Error_Handler();
    1be4:	f000 f84c 	bl	1c80 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    1be8:	4b0a      	ldr	r3, [pc, #40]	; (1c14 <stop_pop+0x64>)
    1bea:	2200      	movs	r2, #0
    1bec:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1bee:	4b0a      	ldr	r3, [pc, #40]	; (1c18 <stop_pop+0x68>)
    1bf0:	2200      	movs	r2, #0
    1bf2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    1bf4:	2200      	movs	r2, #0
    1bf6:	2102      	movs	r1, #2
    1bf8:	4808      	ldr	r0, [pc, #32]	; (1c1c <stop_pop+0x6c>)
    1bfa:	f000 f875 	bl	1ce8 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1bfe:	4808      	ldr	r0, [pc, #32]	; (1c20 <stop_pop+0x70>)
    1c00:	f000 f886 	bl	1d10 <__puts_veneer>
}
    1c04:	bf00      	nop
    1c06:	bd80      	pop	{r7, pc}
    1c08:	200003f0 	.word	0x200003f0
    1c0c:	0801e368 	.word	0x0801e368
    1c10:	0801e380 	.word	0x0801e380
    1c14:	20000774 	.word	0x20000774
    1c18:	20000778 	.word	0x20000778
    1c1c:	58021000 	.word	0x58021000
    1c20:	0801e398 	.word	0x0801e398
    1c24:	00000000 	.word	0x00000000

00001c28 <__pbuf_free_veneer>:
    1c28:	f85f f000 	ldr.w	pc, [pc]	; 1c2c <__pbuf_free_veneer+0x4>
    1c2c:	0801168d 	.word	0x0801168d

00001c30 <__mem_malloc_veneer>:
    1c30:	f85f f000 	ldr.w	pc, [pc]	; 1c34 <__mem_malloc_veneer+0x4>
    1c34:	080105b1 	.word	0x080105b1

00001c38 <__tcp_write_veneer>:
    1c38:	f85f f000 	ldr.w	pc, [pc]	; 1c3c <__tcp_write_veneer+0x4>
    1c3c:	08016199 	.word	0x08016199

00001c40 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1c40:	f85f f000 	ldr.w	pc, [pc]	; 1c44 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    1c44:	080088b1 	.word	0x080088b1

00001c48 <__tcp_err_veneer>:
    1c48:	f85f f000 	ldr.w	pc, [pc]	; 1c4c <__tcp_err_veneer+0x4>
    1c4c:	080133f1 	.word	0x080133f1

00001c50 <__tcp_connect_veneer>:
    1c50:	f85f f000 	ldr.w	pc, [pc]	; 1c54 <__tcp_connect_veneer+0x4>
    1c54:	080124bd 	.word	0x080124bd

00001c58 <__pbuf_ref_veneer>:
    1c58:	f85f f000 	ldr.w	pc, [pc]	; 1c5c <__pbuf_ref_veneer+0x4>
    1c5c:	080117cd 	.word	0x080117cd

00001c60 <__memcpy_veneer>:
    1c60:	f85f f000 	ldr.w	pc, [pc]	; 1c64 <__memcpy_veneer+0x4>
    1c64:	0801b6f7 	.word	0x0801b6f7

00001c68 <__tcp_close_veneer>:
    1c68:	f85f f000 	ldr.w	pc, [pc]	; 1c6c <__tcp_close_veneer+0x4>
    1c6c:	080120ed 	.word	0x080120ed

00001c70 <__HAL_GPIO_TogglePin_veneer>:
    1c70:	f85f f000 	ldr.w	pc, [pc]	; 1c74 <__HAL_GPIO_TogglePin_veneer+0x4>
    1c74:	0800816b 	.word	0x0800816b

00001c78 <__HAL_GPIO_ReadPin_veneer>:
    1c78:	f85f f000 	ldr.w	pc, [pc]	; 1c7c <__HAL_GPIO_ReadPin_veneer+0x4>
    1c7c:	08008109 	.word	0x08008109

00001c80 <__Error_Handler_veneer>:
    1c80:	f85f f000 	ldr.w	pc, [pc]	; 1c84 <__Error_Handler_veneer+0x4>
    1c84:	080034f1 	.word	0x080034f1

00001c88 <__tcp_new_veneer>:
    1c88:	f85f f000 	ldr.w	pc, [pc]	; 1c8c <__tcp_new_veneer+0x4>
    1c8c:	08013335 	.word	0x08013335

00001c90 <__strlen_veneer>:
    1c90:	f85f f000 	ldr.w	pc, [pc]	; 1c94 <__strlen_veneer+0x4>
    1c94:	080020c1 	.word	0x080020c1

00001c98 <__ethernetif_input_veneer>:
    1c98:	f85f f000 	ldr.w	pc, [pc]	; 1c9c <__ethernetif_input_veneer+0x4>
    1c9c:	0800f925 	.word	0x0800f925

00001ca0 <__HAL_Delay_veneer>:
    1ca0:	f85f f000 	ldr.w	pc, [pc]	; 1ca4 <__HAL_Delay_veneer+0x4>
    1ca4:	080043e1 	.word	0x080043e1

00001ca8 <__pbuf_take_veneer>:
    1ca8:	f85f f000 	ldr.w	pc, [pc]	; 1cac <__pbuf_take_veneer+0x4>
    1cac:	08011b45 	.word	0x08011b45

00001cb0 <__printf_veneer>:
    1cb0:	f85f f000 	ldr.w	pc, [pc]	; 1cb4 <__printf_veneer+0x4>
    1cb4:	0801b2b1 	.word	0x0801b2b1

00001cb8 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1cb8:	f85f f000 	ldr.w	pc, [pc]	; 1cbc <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1cbc:	080087fb 	.word	0x080087fb

00001cc0 <__strcpy_veneer>:
    1cc0:	f85f f000 	ldr.w	pc, [pc]	; 1cc4 <__strcpy_veneer+0x4>
    1cc4:	0801b6e7 	.word	0x0801b6e7

00001cc8 <__strncmp_veneer>:
    1cc8:	f85f f000 	ldr.w	pc, [pc]	; 1ccc <__strncmp_veneer+0x4>
    1ccc:	0801b5e1 	.word	0x0801b5e1

00001cd0 <__sprintf_veneer>:
    1cd0:	f85f f000 	ldr.w	pc, [pc]	; 1cd4 <__sprintf_veneer+0x4>
    1cd4:	0801b38d 	.word	0x0801b38d

00001cd8 <__tcp_abort_veneer>:
    1cd8:	f85f f000 	ldr.w	pc, [pc]	; 1cdc <__tcp_abort_veneer+0x4>
    1cdc:	080122c1 	.word	0x080122c1

00001ce0 <__sys_check_timeouts_veneer>:
    1ce0:	f85f f000 	ldr.w	pc, [pc]	; 1ce4 <__sys_check_timeouts_veneer+0x4>
    1ce4:	08017e69 	.word	0x08017e69

00001ce8 <__HAL_GPIO_WritePin_veneer>:
    1ce8:	f85f f000 	ldr.w	pc, [pc]	; 1cec <__HAL_GPIO_WritePin_veneer+0x4>
    1cec:	08008139 	.word	0x08008139

00001cf0 <__tcp_arg_veneer>:
    1cf0:	f85f f000 	ldr.w	pc, [pc]	; 1cf4 <__tcp_arg_veneer+0x4>
    1cf4:	08013345 	.word	0x08013345

00001cf8 <__mem_free_veneer>:
    1cf8:	f85f f000 	ldr.w	pc, [pc]	; 1cfc <__mem_free_veneer+0x4>
    1cfc:	080102f5 	.word	0x080102f5

00001d00 <__tcp_sent_veneer>:
    1d00:	f85f f000 	ldr.w	pc, [pc]	; 1d04 <__tcp_sent_veneer+0x4>
    1d04:	080133ad 	.word	0x080133ad

00001d08 <__tcp_recved_veneer>:
    1d08:	f85f f000 	ldr.w	pc, [pc]	; 1d0c <__tcp_recved_veneer+0x4>
    1d0c:	0801238d 	.word	0x0801238d

00001d10 <__puts_veneer>:
    1d10:	f85f f000 	ldr.w	pc, [pc]	; 1d14 <__puts_veneer+0x4>
    1d14:	0801b37d 	.word	0x0801b37d

00001d18 <__HAL_ADC_GetValue_veneer>:
    1d18:	f85f f000 	ldr.w	pc, [pc]	; 1d1c <__HAL_ADC_GetValue_veneer+0x4>
    1d1c:	08004e8d 	.word	0x08004e8d

00001d20 <__tcp_recv_veneer>:
    1d20:	f85f f000 	ldr.w	pc, [pc]	; 1d24 <__tcp_recv_veneer+0x4>
    1d24:	08013369 	.word	0x08013369

00001d28 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1d28:	f85f f000 	ldr.w	pc, [pc]	; 1d2c <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    1d2c:	08008855 	.word	0x08008855

00001d30 <__tcp_poll_veneer>:
    1d30:	f85f f000 	ldr.w	pc, [pc]	; 1d34 <__tcp_poll_veneer+0x4>
    1d34:	08013435 	.word	0x08013435

00001d38 <__pbuf_alloc_veneer>:
    1d38:	f85f f000 	ldr.w	pc, [pc]	; 1d3c <__pbuf_alloc_veneer+0x4>
    1d3c:	080110c5 	.word	0x080110c5

00001d40 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1d40:	f85f f000 	ldr.w	pc, [pc]	; 1d44 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    1d44:	08008991 	.word	0x08008991

Disassembly of section .text:

08001fe0 <__do_global_dtors_aux>:
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	4c05      	ldr	r4, [pc, #20]	; (8001ff8 <__do_global_dtors_aux+0x18>)
 8001fe4:	7823      	ldrb	r3, [r4, #0]
 8001fe6:	b933      	cbnz	r3, 8001ff6 <__do_global_dtors_aux+0x16>
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__do_global_dtors_aux+0x1c>)
 8001fea:	b113      	cbz	r3, 8001ff2 <__do_global_dtors_aux+0x12>
 8001fec:	4804      	ldr	r0, [pc, #16]	; (8002000 <__do_global_dtors_aux+0x20>)
 8001fee:	f3af 8000 	nop.w
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	7023      	strb	r3, [r4, #0]
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	20000350 	.word	0x20000350
 8001ffc:	00000000 	.word	0x00000000
 8002000:	0801d580 	.word	0x0801d580

08002004 <frame_dummy>:
 8002004:	b508      	push	{r3, lr}
 8002006:	4b03      	ldr	r3, [pc, #12]	; (8002014 <frame_dummy+0x10>)
 8002008:	b11b      	cbz	r3, 8002012 <frame_dummy+0xe>
 800200a:	4903      	ldr	r1, [pc, #12]	; (8002018 <frame_dummy+0x14>)
 800200c:	4803      	ldr	r0, [pc, #12]	; (800201c <frame_dummy+0x18>)
 800200e:	f3af 8000 	nop.w
 8002012:	bd08      	pop	{r3, pc}
 8002014:	00000000 	.word	0x00000000
 8002018:	20000354 	.word	0x20000354
 800201c:	0801d580 	.word	0x0801d580

08002020 <memchr>:
 8002020:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002024:	2a10      	cmp	r2, #16
 8002026:	db2b      	blt.n	8002080 <memchr+0x60>
 8002028:	f010 0f07 	tst.w	r0, #7
 800202c:	d008      	beq.n	8002040 <memchr+0x20>
 800202e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002032:	3a01      	subs	r2, #1
 8002034:	428b      	cmp	r3, r1
 8002036:	d02d      	beq.n	8002094 <memchr+0x74>
 8002038:	f010 0f07 	tst.w	r0, #7
 800203c:	b342      	cbz	r2, 8002090 <memchr+0x70>
 800203e:	d1f6      	bne.n	800202e <memchr+0xe>
 8002040:	b4f0      	push	{r4, r5, r6, r7}
 8002042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002046:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800204a:	f022 0407 	bic.w	r4, r2, #7
 800204e:	f07f 0700 	mvns.w	r7, #0
 8002052:	2300      	movs	r3, #0
 8002054:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002058:	3c08      	subs	r4, #8
 800205a:	ea85 0501 	eor.w	r5, r5, r1
 800205e:	ea86 0601 	eor.w	r6, r6, r1
 8002062:	fa85 f547 	uadd8	r5, r5, r7
 8002066:	faa3 f587 	sel	r5, r3, r7
 800206a:	fa86 f647 	uadd8	r6, r6, r7
 800206e:	faa5 f687 	sel	r6, r5, r7
 8002072:	b98e      	cbnz	r6, 8002098 <memchr+0x78>
 8002074:	d1ee      	bne.n	8002054 <memchr+0x34>
 8002076:	bcf0      	pop	{r4, r5, r6, r7}
 8002078:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800207c:	f002 0207 	and.w	r2, r2, #7
 8002080:	b132      	cbz	r2, 8002090 <memchr+0x70>
 8002082:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002086:	3a01      	subs	r2, #1
 8002088:	ea83 0301 	eor.w	r3, r3, r1
 800208c:	b113      	cbz	r3, 8002094 <memchr+0x74>
 800208e:	d1f8      	bne.n	8002082 <memchr+0x62>
 8002090:	2000      	movs	r0, #0
 8002092:	4770      	bx	lr
 8002094:	3801      	subs	r0, #1
 8002096:	4770      	bx	lr
 8002098:	2d00      	cmp	r5, #0
 800209a:	bf06      	itte	eq
 800209c:	4635      	moveq	r5, r6
 800209e:	3803      	subeq	r0, #3
 80020a0:	3807      	subne	r0, #7
 80020a2:	f015 0f01 	tst.w	r5, #1
 80020a6:	d107      	bne.n	80020b8 <memchr+0x98>
 80020a8:	3001      	adds	r0, #1
 80020aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80020ae:	bf02      	ittt	eq
 80020b0:	3001      	addeq	r0, #1
 80020b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80020b6:	3001      	addeq	r0, #1
 80020b8:	bcf0      	pop	{r4, r5, r6, r7}
 80020ba:	3801      	subs	r0, #1
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop

080020c0 <strlen>:
 80020c0:	4603      	mov	r3, r0
 80020c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020c6:	2a00      	cmp	r2, #0
 80020c8:	d1fb      	bne.n	80020c2 <strlen+0x2>
 80020ca:	1a18      	subs	r0, r3, r0
 80020cc:	3801      	subs	r0, #1
 80020ce:	4770      	bx	lr

080020d0 <__aeabi_uldivmod>:
 80020d0:	b953      	cbnz	r3, 80020e8 <__aeabi_uldivmod+0x18>
 80020d2:	b94a      	cbnz	r2, 80020e8 <__aeabi_uldivmod+0x18>
 80020d4:	2900      	cmp	r1, #0
 80020d6:	bf08      	it	eq
 80020d8:	2800      	cmpeq	r0, #0
 80020da:	bf1c      	itt	ne
 80020dc:	f04f 31ff 	movne.w	r1, #4294967295
 80020e0:	f04f 30ff 	movne.w	r0, #4294967295
 80020e4:	f000 b970 	b.w	80023c8 <__aeabi_idiv0>
 80020e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80020ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80020f0:	f000 f806 	bl	8002100 <__udivmoddi4>
 80020f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80020f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80020fc:	b004      	add	sp, #16
 80020fe:	4770      	bx	lr

08002100 <__udivmoddi4>:
 8002100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002104:	9e08      	ldr	r6, [sp, #32]
 8002106:	460d      	mov	r5, r1
 8002108:	4604      	mov	r4, r0
 800210a:	460f      	mov	r7, r1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d14a      	bne.n	80021a6 <__udivmoddi4+0xa6>
 8002110:	428a      	cmp	r2, r1
 8002112:	4694      	mov	ip, r2
 8002114:	d965      	bls.n	80021e2 <__udivmoddi4+0xe2>
 8002116:	fab2 f382 	clz	r3, r2
 800211a:	b143      	cbz	r3, 800212e <__udivmoddi4+0x2e>
 800211c:	fa02 fc03 	lsl.w	ip, r2, r3
 8002120:	f1c3 0220 	rsb	r2, r3, #32
 8002124:	409f      	lsls	r7, r3
 8002126:	fa20 f202 	lsr.w	r2, r0, r2
 800212a:	4317      	orrs	r7, r2
 800212c:	409c      	lsls	r4, r3
 800212e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8002132:	fa1f f58c 	uxth.w	r5, ip
 8002136:	fbb7 f1fe 	udiv	r1, r7, lr
 800213a:	0c22      	lsrs	r2, r4, #16
 800213c:	fb0e 7711 	mls	r7, lr, r1, r7
 8002140:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8002144:	fb01 f005 	mul.w	r0, r1, r5
 8002148:	4290      	cmp	r0, r2
 800214a:	d90a      	bls.n	8002162 <__udivmoddi4+0x62>
 800214c:	eb1c 0202 	adds.w	r2, ip, r2
 8002150:	f101 37ff 	add.w	r7, r1, #4294967295
 8002154:	f080 811c 	bcs.w	8002390 <__udivmoddi4+0x290>
 8002158:	4290      	cmp	r0, r2
 800215a:	f240 8119 	bls.w	8002390 <__udivmoddi4+0x290>
 800215e:	3902      	subs	r1, #2
 8002160:	4462      	add	r2, ip
 8002162:	1a12      	subs	r2, r2, r0
 8002164:	b2a4      	uxth	r4, r4
 8002166:	fbb2 f0fe 	udiv	r0, r2, lr
 800216a:	fb0e 2210 	mls	r2, lr, r0, r2
 800216e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002172:	fb00 f505 	mul.w	r5, r0, r5
 8002176:	42a5      	cmp	r5, r4
 8002178:	d90a      	bls.n	8002190 <__udivmoddi4+0x90>
 800217a:	eb1c 0404 	adds.w	r4, ip, r4
 800217e:	f100 32ff 	add.w	r2, r0, #4294967295
 8002182:	f080 8107 	bcs.w	8002394 <__udivmoddi4+0x294>
 8002186:	42a5      	cmp	r5, r4
 8002188:	f240 8104 	bls.w	8002394 <__udivmoddi4+0x294>
 800218c:	4464      	add	r4, ip
 800218e:	3802      	subs	r0, #2
 8002190:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002194:	1b64      	subs	r4, r4, r5
 8002196:	2100      	movs	r1, #0
 8002198:	b11e      	cbz	r6, 80021a2 <__udivmoddi4+0xa2>
 800219a:	40dc      	lsrs	r4, r3
 800219c:	2300      	movs	r3, #0
 800219e:	e9c6 4300 	strd	r4, r3, [r6]
 80021a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021a6:	428b      	cmp	r3, r1
 80021a8:	d908      	bls.n	80021bc <__udivmoddi4+0xbc>
 80021aa:	2e00      	cmp	r6, #0
 80021ac:	f000 80ed 	beq.w	800238a <__udivmoddi4+0x28a>
 80021b0:	2100      	movs	r1, #0
 80021b2:	e9c6 0500 	strd	r0, r5, [r6]
 80021b6:	4608      	mov	r0, r1
 80021b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021bc:	fab3 f183 	clz	r1, r3
 80021c0:	2900      	cmp	r1, #0
 80021c2:	d149      	bne.n	8002258 <__udivmoddi4+0x158>
 80021c4:	42ab      	cmp	r3, r5
 80021c6:	d302      	bcc.n	80021ce <__udivmoddi4+0xce>
 80021c8:	4282      	cmp	r2, r0
 80021ca:	f200 80f8 	bhi.w	80023be <__udivmoddi4+0x2be>
 80021ce:	1a84      	subs	r4, r0, r2
 80021d0:	eb65 0203 	sbc.w	r2, r5, r3
 80021d4:	2001      	movs	r0, #1
 80021d6:	4617      	mov	r7, r2
 80021d8:	2e00      	cmp	r6, #0
 80021da:	d0e2      	beq.n	80021a2 <__udivmoddi4+0xa2>
 80021dc:	e9c6 4700 	strd	r4, r7, [r6]
 80021e0:	e7df      	b.n	80021a2 <__udivmoddi4+0xa2>
 80021e2:	b902      	cbnz	r2, 80021e6 <__udivmoddi4+0xe6>
 80021e4:	deff      	udf	#255	; 0xff
 80021e6:	fab2 f382 	clz	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8090 	bne.w	8002310 <__udivmoddi4+0x210>
 80021f0:	1a8a      	subs	r2, r1, r2
 80021f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80021f6:	fa1f fe8c 	uxth.w	lr, ip
 80021fa:	2101      	movs	r1, #1
 80021fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8002200:	fb07 2015 	mls	r0, r7, r5, r2
 8002204:	0c22      	lsrs	r2, r4, #16
 8002206:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800220a:	fb0e f005 	mul.w	r0, lr, r5
 800220e:	4290      	cmp	r0, r2
 8002210:	d908      	bls.n	8002224 <__udivmoddi4+0x124>
 8002212:	eb1c 0202 	adds.w	r2, ip, r2
 8002216:	f105 38ff 	add.w	r8, r5, #4294967295
 800221a:	d202      	bcs.n	8002222 <__udivmoddi4+0x122>
 800221c:	4290      	cmp	r0, r2
 800221e:	f200 80cb 	bhi.w	80023b8 <__udivmoddi4+0x2b8>
 8002222:	4645      	mov	r5, r8
 8002224:	1a12      	subs	r2, r2, r0
 8002226:	b2a4      	uxth	r4, r4
 8002228:	fbb2 f0f7 	udiv	r0, r2, r7
 800222c:	fb07 2210 	mls	r2, r7, r0, r2
 8002230:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002234:	fb0e fe00 	mul.w	lr, lr, r0
 8002238:	45a6      	cmp	lr, r4
 800223a:	d908      	bls.n	800224e <__udivmoddi4+0x14e>
 800223c:	eb1c 0404 	adds.w	r4, ip, r4
 8002240:	f100 32ff 	add.w	r2, r0, #4294967295
 8002244:	d202      	bcs.n	800224c <__udivmoddi4+0x14c>
 8002246:	45a6      	cmp	lr, r4
 8002248:	f200 80bb 	bhi.w	80023c2 <__udivmoddi4+0x2c2>
 800224c:	4610      	mov	r0, r2
 800224e:	eba4 040e 	sub.w	r4, r4, lr
 8002252:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002256:	e79f      	b.n	8002198 <__udivmoddi4+0x98>
 8002258:	f1c1 0720 	rsb	r7, r1, #32
 800225c:	408b      	lsls	r3, r1
 800225e:	fa22 fc07 	lsr.w	ip, r2, r7
 8002262:	ea4c 0c03 	orr.w	ip, ip, r3
 8002266:	fa05 f401 	lsl.w	r4, r5, r1
 800226a:	fa20 f307 	lsr.w	r3, r0, r7
 800226e:	40fd      	lsrs	r5, r7
 8002270:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002274:	4323      	orrs	r3, r4
 8002276:	fbb5 f8f9 	udiv	r8, r5, r9
 800227a:	fa1f fe8c 	uxth.w	lr, ip
 800227e:	fb09 5518 	mls	r5, r9, r8, r5
 8002282:	0c1c      	lsrs	r4, r3, #16
 8002284:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8002288:	fb08 f50e 	mul.w	r5, r8, lr
 800228c:	42a5      	cmp	r5, r4
 800228e:	fa02 f201 	lsl.w	r2, r2, r1
 8002292:	fa00 f001 	lsl.w	r0, r0, r1
 8002296:	d90b      	bls.n	80022b0 <__udivmoddi4+0x1b0>
 8002298:	eb1c 0404 	adds.w	r4, ip, r4
 800229c:	f108 3aff 	add.w	sl, r8, #4294967295
 80022a0:	f080 8088 	bcs.w	80023b4 <__udivmoddi4+0x2b4>
 80022a4:	42a5      	cmp	r5, r4
 80022a6:	f240 8085 	bls.w	80023b4 <__udivmoddi4+0x2b4>
 80022aa:	f1a8 0802 	sub.w	r8, r8, #2
 80022ae:	4464      	add	r4, ip
 80022b0:	1b64      	subs	r4, r4, r5
 80022b2:	b29d      	uxth	r5, r3
 80022b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80022b8:	fb09 4413 	mls	r4, r9, r3, r4
 80022bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80022c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80022c4:	45a6      	cmp	lr, r4
 80022c6:	d908      	bls.n	80022da <__udivmoddi4+0x1da>
 80022c8:	eb1c 0404 	adds.w	r4, ip, r4
 80022cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80022d0:	d26c      	bcs.n	80023ac <__udivmoddi4+0x2ac>
 80022d2:	45a6      	cmp	lr, r4
 80022d4:	d96a      	bls.n	80023ac <__udivmoddi4+0x2ac>
 80022d6:	3b02      	subs	r3, #2
 80022d8:	4464      	add	r4, ip
 80022da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80022de:	fba3 9502 	umull	r9, r5, r3, r2
 80022e2:	eba4 040e 	sub.w	r4, r4, lr
 80022e6:	42ac      	cmp	r4, r5
 80022e8:	46c8      	mov	r8, r9
 80022ea:	46ae      	mov	lr, r5
 80022ec:	d356      	bcc.n	800239c <__udivmoddi4+0x29c>
 80022ee:	d053      	beq.n	8002398 <__udivmoddi4+0x298>
 80022f0:	b156      	cbz	r6, 8002308 <__udivmoddi4+0x208>
 80022f2:	ebb0 0208 	subs.w	r2, r0, r8
 80022f6:	eb64 040e 	sbc.w	r4, r4, lr
 80022fa:	fa04 f707 	lsl.w	r7, r4, r7
 80022fe:	40ca      	lsrs	r2, r1
 8002300:	40cc      	lsrs	r4, r1
 8002302:	4317      	orrs	r7, r2
 8002304:	e9c6 7400 	strd	r7, r4, [r6]
 8002308:	4618      	mov	r0, r3
 800230a:	2100      	movs	r1, #0
 800230c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002310:	f1c3 0120 	rsb	r1, r3, #32
 8002314:	fa02 fc03 	lsl.w	ip, r2, r3
 8002318:	fa20 f201 	lsr.w	r2, r0, r1
 800231c:	fa25 f101 	lsr.w	r1, r5, r1
 8002320:	409d      	lsls	r5, r3
 8002322:	432a      	orrs	r2, r5
 8002324:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002328:	fa1f fe8c 	uxth.w	lr, ip
 800232c:	fbb1 f0f7 	udiv	r0, r1, r7
 8002330:	fb07 1510 	mls	r5, r7, r0, r1
 8002334:	0c11      	lsrs	r1, r2, #16
 8002336:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800233a:	fb00 f50e 	mul.w	r5, r0, lr
 800233e:	428d      	cmp	r5, r1
 8002340:	fa04 f403 	lsl.w	r4, r4, r3
 8002344:	d908      	bls.n	8002358 <__udivmoddi4+0x258>
 8002346:	eb1c 0101 	adds.w	r1, ip, r1
 800234a:	f100 38ff 	add.w	r8, r0, #4294967295
 800234e:	d22f      	bcs.n	80023b0 <__udivmoddi4+0x2b0>
 8002350:	428d      	cmp	r5, r1
 8002352:	d92d      	bls.n	80023b0 <__udivmoddi4+0x2b0>
 8002354:	3802      	subs	r0, #2
 8002356:	4461      	add	r1, ip
 8002358:	1b49      	subs	r1, r1, r5
 800235a:	b292      	uxth	r2, r2
 800235c:	fbb1 f5f7 	udiv	r5, r1, r7
 8002360:	fb07 1115 	mls	r1, r7, r5, r1
 8002364:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002368:	fb05 f10e 	mul.w	r1, r5, lr
 800236c:	4291      	cmp	r1, r2
 800236e:	d908      	bls.n	8002382 <__udivmoddi4+0x282>
 8002370:	eb1c 0202 	adds.w	r2, ip, r2
 8002374:	f105 38ff 	add.w	r8, r5, #4294967295
 8002378:	d216      	bcs.n	80023a8 <__udivmoddi4+0x2a8>
 800237a:	4291      	cmp	r1, r2
 800237c:	d914      	bls.n	80023a8 <__udivmoddi4+0x2a8>
 800237e:	3d02      	subs	r5, #2
 8002380:	4462      	add	r2, ip
 8002382:	1a52      	subs	r2, r2, r1
 8002384:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8002388:	e738      	b.n	80021fc <__udivmoddi4+0xfc>
 800238a:	4631      	mov	r1, r6
 800238c:	4630      	mov	r0, r6
 800238e:	e708      	b.n	80021a2 <__udivmoddi4+0xa2>
 8002390:	4639      	mov	r1, r7
 8002392:	e6e6      	b.n	8002162 <__udivmoddi4+0x62>
 8002394:	4610      	mov	r0, r2
 8002396:	e6fb      	b.n	8002190 <__udivmoddi4+0x90>
 8002398:	4548      	cmp	r0, r9
 800239a:	d2a9      	bcs.n	80022f0 <__udivmoddi4+0x1f0>
 800239c:	ebb9 0802 	subs.w	r8, r9, r2
 80023a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80023a4:	3b01      	subs	r3, #1
 80023a6:	e7a3      	b.n	80022f0 <__udivmoddi4+0x1f0>
 80023a8:	4645      	mov	r5, r8
 80023aa:	e7ea      	b.n	8002382 <__udivmoddi4+0x282>
 80023ac:	462b      	mov	r3, r5
 80023ae:	e794      	b.n	80022da <__udivmoddi4+0x1da>
 80023b0:	4640      	mov	r0, r8
 80023b2:	e7d1      	b.n	8002358 <__udivmoddi4+0x258>
 80023b4:	46d0      	mov	r8, sl
 80023b6:	e77b      	b.n	80022b0 <__udivmoddi4+0x1b0>
 80023b8:	3d02      	subs	r5, #2
 80023ba:	4462      	add	r2, ip
 80023bc:	e732      	b.n	8002224 <__udivmoddi4+0x124>
 80023be:	4608      	mov	r0, r1
 80023c0:	e70a      	b.n	80021d8 <__udivmoddi4+0xd8>
 80023c2:	4464      	add	r4, ip
 80023c4:	3802      	subs	r0, #2
 80023c6:	e742      	b.n	800224e <__udivmoddi4+0x14e>

080023c8 <__aeabi_idiv0>:
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop

080023cc <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80023d4:	1d39      	adds	r1, r7, #4
 80023d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023da:	2201      	movs	r2, #1
 80023dc:	4803      	ldr	r0, [pc, #12]	; (80023ec <__io_putchar+0x20>)
 80023de:	f00b ff1b 	bl	800e218 <HAL_UART_Transmit>
	return ch;
 80023e2:	687b      	ldr	r3, [r7, #4]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000680 	.word	0x20000680

080023f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80023f6:	4ac2      	ldr	r2, [pc, #776]	; (8002700 <main+0x310>)
 80023f8:	4bc2      	ldr	r3, [pc, #776]	; (8002704 <main+0x314>)
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	49c2      	ldr	r1, [pc, #776]	; (8002708 <main+0x318>)
 8002400:	48c0      	ldr	r0, [pc, #768]	; (8002704 <main+0x314>)
 8002402:	f019 f978 	bl	801b6f6 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002406:	4bc1      	ldr	r3, [pc, #772]	; (800270c <main+0x31c>)
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11b      	bne.n	800244a <main+0x5a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002412:	f3bf 8f4f 	dsb	sy
}
 8002416:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002418:	f3bf 8f6f 	isb	sy
}
 800241c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800241e:	4bbb      	ldr	r3, [pc, #748]	; (800270c <main+0x31c>)
 8002420:	2200      	movs	r2, #0
 8002422:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002426:	f3bf 8f4f 	dsb	sy
}
 800242a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800242c:	f3bf 8f6f 	isb	sy
}
 8002430:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002432:	4bb6      	ldr	r3, [pc, #728]	; (800270c <main+0x31c>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	4ab5      	ldr	r2, [pc, #724]	; (800270c <main+0x31c>)
 8002438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800243e:	f3bf 8f4f 	dsb	sy
}
 8002442:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002444:	f3bf 8f6f 	isb	sy
}
 8002448:	e000      	b.n	800244c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800244a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800244c:	4baf      	ldr	r3, [pc, #700]	; (800270c <main+0x31c>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d138      	bne.n	80024ca <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002458:	4bac      	ldr	r3, [pc, #688]	; (800270c <main+0x31c>)
 800245a:	2200      	movs	r2, #0
 800245c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002460:	f3bf 8f4f 	dsb	sy
}
 8002464:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002466:	4ba9      	ldr	r3, [pc, #676]	; (800270c <main+0x31c>)
 8002468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800246c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	0b5b      	lsrs	r3, r3, #13
 8002472:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002476:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	08db      	lsrs	r3, r3, #3
 800247c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002480:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800248a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002490:	499e      	ldr	r1, [pc, #632]	; (800270c <main+0x31c>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ef      	bne.n	8002482 <main+0x92>
    } while(sets-- != 0U);
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	60ba      	str	r2, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e5      	bne.n	8002478 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80024ac:	f3bf 8f4f 	dsb	sy
}
 80024b0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80024b2:	4b96      	ldr	r3, [pc, #600]	; (800270c <main+0x31c>)
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	4a95      	ldr	r2, [pc, #596]	; (800270c <main+0x31c>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80024be:	f3bf 8f4f 	dsb	sy
}
 80024c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024c4:	f3bf 8f6f 	isb	sy
}
 80024c8:	e000      	b.n	80024cc <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80024ca:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024cc:	f001 fef6 	bl	80042bc <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80024d0:	f000 ffbc 	bl	800344c <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d4:	f000 f984 	bl	80027e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d8:	f000 fe30 	bl	800313c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80024dc:	f000 fc24 	bl	8002d28 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80024e0:	f000 fa9e 	bl	8002a20 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80024e4:	f000 fddc 	bl	80030a0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80024e8:	f000 fcee 	bl	8002ec8 <MX_TIM3_Init>
  MX_TIM1_Init();
 80024ec:	f000 fc4a 	bl	8002d84 <MX_TIM1_Init>
  MX_HRTIM_Init();
 80024f0:	f000 fac8 	bl	8002a84 <MX_HRTIM_Init>
  MX_ADC3_Init();
 80024f4:	f000 fa32 	bl	800295c <MX_ADC3_Init>
  MX_LWIP_Init();
 80024f8:	f00c ffa2 	bl	800f440 <MX_LWIP_Init>
  MX_TIM2_Init();
 80024fc:	f000 fc96 	bl	8002e2c <MX_TIM2_Init>
  MX_TIM5_Init();
 8002500:	f000 fd80 	bl	8003004 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002504:	f000 fd2e 	bl	8002f64 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8002508:	4881      	ldr	r0, [pc, #516]	; (8002710 <main+0x320>)
 800250a:	f018 fed1 	bl	801b2b0 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 800250e:	4981      	ldr	r1, [pc, #516]	; (8002714 <main+0x324>)
 8002510:	4881      	ldr	r0, [pc, #516]	; (8002718 <main+0x328>)
 8002512:	f018 fecd 	bl	801b2b0 <iprintf>
		}
		#ifdef MW_VERBOSE
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
		#endif	//MW_VERBOSE
	#else //SYNTH_ENABLE
		printf("WARNING - MW Synthesiser is disabled\r\n");
 8002516:	4881      	ldr	r0, [pc, #516]	; (800271c <main+0x32c>)
 8002518:	f018 ff30 	bl	801b37c <puts>
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800251c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002520:	487f      	ldr	r0, [pc, #508]	; (8002720 <main+0x330>)
 8002522:	f007 fa15 	bl	8009950 <HAL_LPTIM_Counter_Start_IT>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <main+0x146>
		printf("Failed to start slow flashing LED!\r\n");
 800252c:	487d      	ldr	r0, [pc, #500]	; (8002724 <main+0x334>)
 800252e:	f018 ff25 	bl	801b37c <puts>
		Error_Handler();
 8002532:	f000 ffdd 	bl	80034f0 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8002536:	2100      	movs	r1, #0
 8002538:	487b      	ldr	r0, [pc, #492]	; (8002728 <main+0x338>)
 800253a:	f003 febf 	bl	80062bc <HAL_DAC_Start>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <main+0x15e>
		printf("Failure to initialise DAC \r\n");
 8002544:	4879      	ldr	r0, [pc, #484]	; (800272c <main+0x33c>)
 8002546:	f018 ff19 	bl	801b37c <puts>
		Error_Handler();
 800254a:	f000 ffd1 	bl	80034f0 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 800254e:	4878      	ldr	r0, [pc, #480]	; (8002730 <main+0x340>)
 8002550:	f018 ff14 	bl	801b37c <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8002554:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	4872      	ldr	r0, [pc, #456]	; (8002728 <main+0x338>)
 800255e:	f003 feff 	bl	8006360 <HAL_DAC_SetValue>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <main+0x182>
			printf("DAC setup failed!\r\n");
 8002568:	4872      	ldr	r0, [pc, #456]	; (8002734 <main+0x344>)
 800256a:	f018 ff07 	bl	801b37c <puts>
		Error_Handler();
 800256e:	f000 ffbf 	bl	80034f0 <Error_Handler>
	}

	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8002572:	2201      	movs	r2, #1
 8002574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002578:	486f      	ldr	r0, [pc, #444]	; (8002738 <main+0x348>)
 800257a:	f005 fddd 	bl	8008138 <HAL_GPIO_WritePin>

	/* Fire up the ADC
	 * external trigger, single conversion selected in ioc file
	 * calibrate ADC for better accuracy and start it w/ interrupt
	 */
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 800257e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002582:	2100      	movs	r1, #0
 8002584:	486d      	ldr	r0, [pc, #436]	; (800273c <main+0x34c>)
 8002586:	f003 fc55 	bl	8005e34 <HAL_ADCEx_Calibration_Start>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <main+0x1aa>
		printf("ADC calibration failure \r\n");
 8002590:	486b      	ldr	r0, [pc, #428]	; (8002740 <main+0x350>)
 8002592:	f018 fef3 	bl	801b37c <puts>
		Error_Handler();
 8002596:	f000 ffab 	bl	80034f0 <Error_Handler>
	}
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 800259a:	4868      	ldr	r0, [pc, #416]	; (800273c <main+0x34c>)
 800259c:	f002 fb38 	bl	8004c10 <HAL_ADC_Start_IT>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <main+0x1c0>
		printf("Failed to start ADC with interrupt capability \r\n");
 80025a6:	4867      	ldr	r0, [pc, #412]	; (8002744 <main+0x354>)
 80025a8:	f018 fee8 	bl	801b37c <puts>
	                Error_Handler();
 80025ac:	f000 ffa0 	bl	80034f0 <Error_Handler>
	}
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 80025b0:	4865      	ldr	r0, [pc, #404]	; (8002748 <main+0x358>)
 80025b2:	f018 fee3 	bl	801b37c <puts>
	/* Calculate the MW sweep settings
	 * Notes:
	 * Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Calculate sweep settings after first POP calibration routine
	 */
	start_timer(SWEEP_TIMER); //reset SWEEP_TIMER and start counting
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <main+0x35c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f01b f80c 	bl	801d5d8 <__start_timer_veneer>
	start_POP_calibration(true);
 80025c0:	2001      	movs	r0, #1
 80025c2:	f01a ffe9 	bl	801d598 <__start_POP_calibration_veneer>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 80025c6:	e001      	b.n	80025cc <main+0x1dc>
		MW_update();
 80025c8:	f01b f816 	bl	801d5f8 <__MW_update_veneer>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 80025cc:	4b60      	ldr	r3, [pc, #384]	; (8002750 <main+0x360>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d108      	bne.n	80025e6 <main+0x1f6>
 80025d4:	4b5d      	ldr	r3, [pc, #372]	; (800274c <main+0x35c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f01a ffed 	bl	801d5b8 <__check_timer_veneer>
 80025de:	4603      	mov	r3, r0
 80025e0:	4a5c      	ldr	r2, [pc, #368]	; (8002754 <main+0x364>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d9f0      	bls.n	80025c8 <main+0x1d8>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
 80025e6:	4b59      	ldr	r3, [pc, #356]	; (800274c <main+0x35c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f01b f808 	bl	801d600 <__stop_timer_veneer>
	if (!POP_period_us) {//if the calibration loop timed out
 80025f0:	4b57      	ldr	r3, [pc, #348]	; (8002750 <main+0x360>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <main+0x20e>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
 80025f8:	4857      	ldr	r0, [pc, #348]	; (8002758 <main+0x368>)
 80025fa:	f018 febf 	bl	801b37c <puts>
	}

//	initiate_MW_calibration_sweep(POP_period);
//	calc_fixed_time_MW_sweep(3035735122, 1000, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred
//	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10, 3600, ADD_SCOPE_SYNC_TIME); //10Hz sweep, 1hr
	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 80025fe:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80026d8 <main+0x2e8>
 8002602:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80026e0 <main+0x2f0>
 8002606:	ee36 7b07 	vadd.f64	d7, d6, d7
 800260a:	2000      	movs	r0, #0
 800260c:	ed9f 2b36 	vldr	d2, [pc, #216]	; 80026e8 <main+0x2f8>
 8002610:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80026f0 <main+0x300>
 8002614:	eeb0 0b47 	vmov.f64	d0, d7
 8002618:	f01a ffca 	bl	801d5b0 <__calc_fixed_time_MW_sweep_veneer>
//	last_pin_status = pin_status;

//	timer_delay(MW_TIMER, 7000);
//	timer_delay(MW_TIMER, 50000);

	telnet_client_init();
 800261c:	f01a ffd0 	bl	801d5c0 <__telnet_client_init_veneer>
//	if(!telnet_client_init()) {
//		printf("Failed to send telnet connection request \r\n");
//	                Error_Handler();
//	}
//	printf("Telnet_client_init returns: %i\r\n", temp_bool);
	printf("Telnet connection request sent and callbacks enabled\r\n");
 8002620:	484e      	ldr	r0, [pc, #312]	; (800275c <main+0x36c>)
 8002622:	f018 feab 	bl	801b37c <puts>

	init_ldc_comms();
 8002626:	f01a ffe3 	bl	801d5f0 <__init_ldc_comms_veneer>
	if(!init_ldc_comms()) { //initialise comms with LDC501
 800262a:	f01a ffe1 	bl	801d5f0 <__init_ldc_comms_veneer>
 800262e:	4603      	mov	r3, r0
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <main+0x254>
		printf("Failed to initialise comms with LDC501\r\n");
 800263a:	4849      	ldr	r0, [pc, #292]	; (8002760 <main+0x370>)
 800263c:	f018 fe9e 	bl	801b37c <puts>
	                Error_Handler();
 8002640:	f000 ff56 	bl	80034f0 <Error_Handler>
	}
	printf("Comms established with LDC501\r\n");
 8002644:	4847      	ldr	r0, [pc, #284]	; (8002764 <main+0x374>)
 8002646:	f018 fe99 	bl	801b37c <puts>

	if(!init_ldc_tec() != ERR_OK) { //fire up TEC
 800264a:	f01a ffc1 	bl	801d5d0 <__init_ldc_tec_veneer>
 800264e:	4603      	mov	r3, r0
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <main+0x274>
		printf("Failed to turn on TEC\r\n");
 800265a:	4843      	ldr	r0, [pc, #268]	; (8002768 <main+0x378>)
 800265c:	f018 fe8e 	bl	801b37c <puts>
	                Error_Handler();
 8002660:	f000 ff46 	bl	80034f0 <Error_Handler>
	}
	printf("Laser TEC enabled\r\n");
 8002664:	4841      	ldr	r0, [pc, #260]	; (800276c <main+0x37c>)
 8002666:	f018 fe89 	bl	801b37c <puts>

	set_laser_current(ild);
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <main+0x380>)
 800266c:	ed93 7b00 	vldr	d7, [r3]
 8002670:	eeb0 0b47 	vmov.f64	d0, d7
 8002674:	f01a ff94 	bl	801d5a0 <__set_laser_current_veneer>
	ild = 171.45678;
 8002678:	493d      	ldr	r1, [pc, #244]	; (8002770 <main+0x380>)
 800267a:	a31f      	add	r3, pc, #124	; (adr r3, 80026f8 <main+0x308>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	e9c1 2300 	strd	r2, r3, [r1]
	set_laser_current(ild);
 8002684:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <main+0x380>)
 8002686:	ed93 7b00 	vldr	d7, [r3]
 800268a:	eeb0 0b47 	vmov.f64	d0, d7
 800268e:	f01a ff87 	bl	801d5a0 <__set_laser_current_veneer>
	set_laser_state(1);
 8002692:	2001      	movs	r0, #1
 8002694:	f01a ff88 	bl	801d5a8 <__set_laser_state_veneer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Entering main while loop\r\n");
 8002698:	4836      	ldr	r0, [pc, #216]	; (8002774 <main+0x384>)
 800269a:	f018 fe6f 	bl	801b37c <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800269e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a2:	4835      	ldr	r0, [pc, #212]	; (8002778 <main+0x388>)
 80026a4:	f005 fd30 	bl	8008108 <HAL_GPIO_ReadPin>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <main+0x38c>)
 80026b6:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80026b8:	4b30      	ldr	r3, [pc, #192]	; (800277c <main+0x38c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d07a      	beq.n	80027b8 <main+0x3c8>
			printf("Blue button pressed....\r\n");
 80026c2:	482f      	ldr	r0, [pc, #188]	; (8002780 <main+0x390>)
 80026c4:	f018 fe5a 	bl	801b37c <puts>
			printf("Initialising comms with LDC501\r\n");
 80026c8:	482e      	ldr	r0, [pc, #184]	; (8002784 <main+0x394>)
 80026ca:	f018 fe57 	bl	801b37c <puts>
			set_laser_state(1);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f01a ff6a 	bl	801d5a8 <__set_laser_state_veneer>
//			} else {
//				printf("Initiating sweep.\r\n");
//				mw_sweep_started = true;
//				start_continuous_MW_sweep();
//			}
			while(blue_button_status) {//remain here polling button until it is released
 80026d4:	e06b      	b.n	80027ae <main+0x3be>
 80026d6:	bf00      	nop
 80026d8:	6d600000 	.word	0x6d600000
 80026dc:	41e69e35 	.word	0x41e69e35
 80026e0:	00000000 	.word	0x00000000
 80026e4:	408f4000 	.word	0x408f4000
 80026e8:	00000000 	.word	0x00000000
 80026ec:	40490000 	.word	0x40490000
 80026f0:	00000000 	.word	0x00000000
 80026f4:	40c38800 	.word	0x40c38800
 80026f8:	f1172ef1 	.word	0xf1172ef1
 80026fc:	40656e9d 	.word	0x40656e9d
 8002700:	00001d48 	.word	0x00001d48
 8002704:	00000000 	.word	0x00000000
 8002708:	08000298 	.word	0x08000298
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	0801d9f0 	.word	0x0801d9f0
 8002714:	0801d9f4 	.word	0x0801d9f4
 8002718:	0801da10 	.word	0x0801da10
 800271c:	0801da3c 	.word	0x0801da3c
 8002720:	200004cc 	.word	0x200004cc
 8002724:	0801da64 	.word	0x0801da64
 8002728:	200003dc 	.word	0x200003dc
 800272c:	0801da88 	.word	0x0801da88
 8002730:	0801daa4 	.word	0x0801daa4
 8002734:	0801dac4 	.word	0x0801dac4
 8002738:	58020400 	.word	0x58020400
 800273c:	20000378 	.word	0x20000378
 8002740:	0801dad8 	.word	0x0801dad8
 8002744:	0801daf4 	.word	0x0801daf4
 8002748:	0801db24 	.word	0x0801db24
 800274c:	2000013c 	.word	0x2000013c
 8002750:	20000718 	.word	0x20000718
 8002754:	002dc6bf 	.word	0x002dc6bf
 8002758:	0801db64 	.word	0x0801db64
 800275c:	0801dba8 	.word	0x0801dba8
 8002760:	0801dbe0 	.word	0x0801dbe0
 8002764:	0801dc08 	.word	0x0801dc08
 8002768:	0801dc28 	.word	0x0801dc28
 800276c:	0801dc40 	.word	0x0801dc40
 8002770:	20000118 	.word	0x20000118
 8002774:	0801dc54 	.word	0x0801dc54
 8002778:	58020800 	.word	0x58020800
 800277c:	20000715 	.word	0x20000715
 8002780:	0801dc70 	.word	0x0801dc70
 8002784:	0801dc8c 	.word	0x0801dc8c
				timer_delay(SLOW_TIMER, 100); //10ms delay
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <main+0x3dc>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2164      	movs	r1, #100	; 0x64
 800278e:	4618      	mov	r0, r3
 8002790:	f01a ff26 	bl	801d5e0 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <main+0x3e0>)
 800279a:	f005 fcb5 	bl	8008108 <HAL_GPIO_ReadPin>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <main+0x3e4>)
 80027ac:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <main+0x3e4>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e7      	bne.n	8002788 <main+0x398>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <main+0x3e8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 80027bc:	f01a ff1c 	bl	801d5f8 <__MW_update_veneer>

	    /* Ethernet handling */
		ethernetif_input(&gnetif);
 80027c0:	4806      	ldr	r0, [pc, #24]	; (80027dc <main+0x3ec>)
 80027c2:	f00d f8af 	bl	800f924 <ethernetif_input>
		sys_check_timeouts();
 80027c6:	f015 fb4f 	bl	8017e68 <sys_check_timeouts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80027ca:	e768      	b.n	800269e <main+0x2ae>
 80027cc:	20000134 	.word	0x20000134
 80027d0:	58020800 	.word	0x58020800
 80027d4:	20000715 	.word	0x20000715
 80027d8:	20000714 	.word	0x20000714
 80027dc:	20000784 	.word	0x20000784

080027e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0a4      	sub	sp, #144	; 0x90
 80027e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027ea:	224c      	movs	r2, #76	; 0x4c
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f018 feee 	bl	801b5d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f8:	2220      	movs	r2, #32
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f018 fee7 	bl	801b5d0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002814:	2002      	movs	r0, #2
 8002816:	f007 fbf9 	bl	800a00c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b4c      	ldr	r3, [pc, #304]	; (8002950 <SystemClock_Config+0x170>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	4a4b      	ldr	r2, [pc, #300]	; (8002950 <SystemClock_Config+0x170>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	62d3      	str	r3, [r2, #44]	; 0x2c
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <SystemClock_Config+0x170>)
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <SystemClock_Config+0x174>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a46      	ldr	r2, [pc, #280]	; (8002954 <SystemClock_Config+0x174>)
 800283a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b44      	ldr	r3, [pc, #272]	; (8002954 <SystemClock_Config+0x174>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800284c:	bf00      	nop
 800284e:	4b41      	ldr	r3, [pc, #260]	; (8002954 <SystemClock_Config+0x174>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285a:	d1f8      	bne.n	800284e <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800285c:	f007 fbc6 	bl	8009fec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002860:	f001 fde2 	bl	8004428 <HAL_GetREVID>
 8002864:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <SystemClock_Config+0x178>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <SystemClock_Config+0x178>)
 800286a:	f023 0318 	bic.w	r3, r3, #24
 800286e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8002870:	2325      	movs	r3, #37	; 0x25
 8002872:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002874:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002878:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800287a:	2301      	movs	r3, #1
 800287c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800287e:	2301      	movs	r3, #1
 8002880:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002882:	2302      	movs	r3, #2
 8002884:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002886:	2302      	movs	r3, #2
 8002888:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800288a:	2301      	movs	r3, #1
 800288c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 800288e:	2350      	movs	r3, #80	; 0x50
 8002890:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002892:	2302      	movs	r3, #2
 8002894:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002896:	2304      	movs	r3, #4
 8002898:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80028a0:	230c      	movs	r3, #12
 80028a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028b6:	4618      	mov	r0, r3
 80028b8:	f007 fbe2 	bl	800a080 <HAL_RCC_OscConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80028c2:	f000 fe15 	bl	80034f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c6:	233f      	movs	r3, #63	; 0x3f
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ca:	2303      	movs	r3, #3
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80028d2:	2309      	movs	r3, #9
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80028da:	2300      	movs	r3, #0
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80028de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80028e4:	2300      	movs	r3, #0
 80028e6:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f008 f820 	bl	800a934 <HAL_RCC_ClockConfig>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80028fa:	f000 fdf9 	bl	80034f0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80028fe:	f008 f9cf 	bl	800aca0 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <SystemClock_Config+0x178>)
 8002904:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002908:	4a13      	ldr	r2, [pc, #76]	; (8002958 <SystemClock_Config+0x178>)
 800290a:	f043 0302 	orr.w	r3, r3, #2
 800290e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <SystemClock_Config+0x178>)
 8002914:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8002924:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002928:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800292e:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8002932:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8002934:	2322      	movs	r3, #34	; 0x22
 8002936:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002938:	2320      	movs	r3, #32
 800293a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	4618      	mov	r0, r3
 8002942:	f00a ff49 	bl	800d7d8 <HAL_RCCEx_CRSConfig>
}
 8002946:	bf00      	nop
 8002948:	3790      	adds	r7, #144	; 0x90
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	58000400 	.word	0x58000400
 8002954:	58024800 	.word	0x58024800
 8002958:	58024400 	.word	0x58024400

0800295c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	615a      	str	r2, [r3, #20]
 8002972:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <MX_ADC3_Init+0xbc>)
 8002976:	4a29      	ldr	r2, [pc, #164]	; (8002a1c <MX_ADC3_Init+0xc0>)
 8002978:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800297a:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <MX_ADC3_Init+0xbc>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <MX_ADC3_Init+0xbc>)
 8002982:	2200      	movs	r2, #0
 8002984:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <MX_ADC3_Init+0xbc>)
 8002988:	2204      	movs	r2, #4
 800298a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <MX_ADC3_Init+0xbc>)
 800298e:	2200      	movs	r2, #0
 8002990:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <MX_ADC3_Init+0xbc>)
 8002994:	2200      	movs	r2, #0
 8002996:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <MX_ADC3_Init+0xbc>)
 800299a:	2201      	movs	r2, #1
 800299c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800299e:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <MX_ADC3_Init+0xbc>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <MX_ADC3_Init+0xbc>)
 80029a6:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <MX_ADC3_Init+0xbc>)
 80029ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <MX_ADC3_Init+0xbc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <MX_ADC3_Init+0xbc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <MX_ADC3_Init+0xbc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <MX_ADC3_Init+0xbc>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80029ce:	4812      	ldr	r0, [pc, #72]	; (8002a18 <MX_ADC3_Init+0xbc>)
 80029d0:	f001 ff7c 	bl	80048cc <HAL_ADC_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 80029da:	f000 fd89 	bl	80034f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80029de:	2301      	movs	r3, #1
 80029e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029e2:	2306      	movs	r3, #6
 80029e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80029ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029f0:	2304      	movs	r3, #4
 80029f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_ADC3_Init+0xbc>)
 8002a02:	f002 fc9f 	bl	8005344 <HAL_ADC_ConfigChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8002a0c:	f000 fd70 	bl	80034f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002a10:	bf00      	nop
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000378 	.word	0x20000378
 8002a1c:	58026000 	.word	0x58026000

08002a20 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	2224      	movs	r2, #36	; 0x24
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f018 fdcf 	bl	801b5d0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <MX_DAC1_Init+0x5c>)
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <MX_DAC1_Init+0x60>)
 8002a36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002a38:	4810      	ldr	r0, [pc, #64]	; (8002a7c <MX_DAC1_Init+0x5c>)
 8002a3a:	f003 fc1d 	bl	8006278 <HAL_DAC_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002a44:	f000 fd54 	bl	80034f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	2200      	movs	r2, #0
 8002a60:	4619      	mov	r1, r3
 8002a62:	4806      	ldr	r0, [pc, #24]	; (8002a7c <MX_DAC1_Init+0x5c>)
 8002a64:	f003 fca2 	bl	80063ac <HAL_DAC_ConfigChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002a6e:	f000 fd3f 	bl	80034f0 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	; 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200003dc 	.word	0x200003dc
 8002a80:	40007400 	.word	0x40007400

08002a84 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b0a4      	sub	sp, #144	; 0x90
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002a8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9c:	2254      	movs	r2, #84	; 0x54
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f018 fd95 	bl	801b5d0 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8002aa6:	f107 0320 	add.w	r3, r7, #32
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f018 fd89 	bl	801b5d0 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8002abe:	4b98      	ldr	r3, [pc, #608]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002ac0:	4a98      	ldr	r2, [pc, #608]	; (8002d24 <MX_HRTIM_Init+0x2a0>)
 8002ac2:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002ac4:	4b96      	ldr	r3, [pc, #600]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002aca:	4b95      	ldr	r3, [pc, #596]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8002ad0:	4893      	ldr	r0, [pc, #588]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002ad2:	f005 fb89 	bl	80081e8 <HAL_HRTIM_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8002adc:	f000 fd08 	bl	80034f0 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8002ae0:	f24c 2318 	movw	r3, #49688	; 0xc218
 8002ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8002aee:	2307      	movs	r3, #7
 8002af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002af4:	2308      	movs	r3, #8
 8002af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002afa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002afe:	461a      	mov	r2, r3
 8002b00:	2100      	movs	r1, #0
 8002b02:	4887      	ldr	r0, [pc, #540]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002b04:	f005 fc40 	bl	8008388 <HAL_HRTIM_TimeBaseConfig>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8002b0e:	f000 fcef 	bl	80034f0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8002b12:	2314      	movs	r3, #20
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002b26:	2300      	movs	r3, #0
 8002b28:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8002b36:	2300      	movs	r3, #0
 8002b38:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002b42:	2300      	movs	r3, #0
 8002b44:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002b46:	2300      	movs	r3, #0
 8002b48:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002b52:	2300      	movs	r3, #0
 8002b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002b56:	2300      	movs	r3, #0
 8002b58:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002b62:	2300      	movs	r3, #0
 8002b64:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	486c      	ldr	r0, [pc, #432]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002b70:	f005 fc32 	bl	80083d8 <HAL_HRTIM_WaveformTimerConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8002b7a:	f000 fcb9 	bl	80034f0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8002b7e:	2306      	movs	r3, #6
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8002b82:	2300      	movs	r3, #0
 8002b84:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8002b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	4864      	ldr	r0, [pc, #400]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002b90:	f005 fc22 	bl	80083d8 <HAL_HRTIM_WaveformTimerConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8002b9a:	f000 fca9 	bl	80034f0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8002b9e:	f240 631b 	movw	r3, #1563	; 0x61b
 8002ba2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002ba4:	f107 0320 	add.w	r3, r7, #32
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2100      	movs	r1, #0
 8002bac:	485c      	ldr	r0, [pc, #368]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002bae:	f005 fc85 	bl	80084bc <HAL_HRTIM_WaveformCompareConfig>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8002bb8:	f000 fc9a 	bl	80034f0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002bbc:	f244 5395 	movw	r3, #17813	; 0x4595
 8002bc0:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002bca:	f107 0320 	add.w	r3, r7, #32
 8002bce:	2202      	movs	r2, #2
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4853      	ldr	r0, [pc, #332]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002bd4:	f005 fc72 	bl	80084bc <HAL_HRTIM_WaveformCompareConfig>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8002bde:	f000 fc87 	bl	80034f0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8002be2:	f640 536e 	movw	r3, #3438	; 0xd6e
 8002be6:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002be8:	f107 0320 	add.w	r3, r7, #32
 8002bec:	2202      	movs	r2, #2
 8002bee:	2104      	movs	r1, #4
 8002bf0:	484b      	ldr	r0, [pc, #300]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002bf2:	f005 fc63 	bl	80084bc <HAL_HRTIM_WaveformCompareConfig>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8002bfc:	f000 fc78 	bl	80034f0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8002c00:	f644 0306 	movw	r3, #18438	; 0x4806
 8002c04:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002c06:	f107 0320 	add.w	r3, r7, #32
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4844      	ldr	r0, [pc, #272]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002c10:	f005 fc54 	bl	80084bc <HAL_HRTIM_WaveformCompareConfig>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8002c1a:	f000 fc69 	bl	80034f0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8002c1e:	f244 435d 	movw	r3, #17501	; 0x445d
 8002c22:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002c24:	f107 0320 	add.w	r3, r7, #32
 8002c28:	2208      	movs	r2, #8
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	483c      	ldr	r0, [pc, #240]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002c2e:	f005 fc45 	bl	80084bc <HAL_HRTIM_WaveformCompareConfig>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8002c38:	f000 fc5a 	bl	80034f0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002c40:	2328      	movs	r3, #40	; 0x28
 8002c42:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002c44:	2314      	movs	r3, #20
 8002c46:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	2201      	movs	r2, #1
 8002c60:	2100      	movs	r1, #0
 8002c62:	482f      	ldr	r0, [pc, #188]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002c64:	f005 fd98 	bl	8008798 <HAL_HRTIM_WaveformOutputConfig>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8002c6e:	f000 fc3f 	bl	80034f0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002c72:	2300      	movs	r3, #0
 8002c74:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002c76:	2350      	movs	r3, #80	; 0x50
 8002c78:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002c7e:	463b      	mov	r3, r7
 8002c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c84:	2104      	movs	r1, #4
 8002c86:	4826      	ldr	r0, [pc, #152]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002c88:	f005 fd86 	bl	8008798 <HAL_HRTIM_WaveformOutputConfig>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8002c92:	f000 fc2d 	bl	80034f0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002c96:	2302      	movs	r3, #2
 8002c98:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002c9e:	2310      	movs	r3, #16
 8002ca0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002ca6:	463b      	mov	r3, r7
 8002ca8:	2202      	movs	r2, #2
 8002caa:	2100      	movs	r1, #0
 8002cac:	481c      	ldr	r0, [pc, #112]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002cae:	f005 fd73 	bl	8008798 <HAL_HRTIM_WaveformOutputConfig>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8002cb8:	f000 fc1a 	bl	80034f0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002cbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	4816      	ldr	r0, [pc, #88]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002cc6:	f005 fb5f 	bl	8008388 <HAL_HRTIM_TimeBaseConfig>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8002cd0:	f000 fc0e 	bl	80034f0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8002cd4:	f240 7353 	movw	r3, #1875	; 0x753
 8002cd8:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002cda:	f107 0320 	add.w	r3, r7, #32
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2104      	movs	r1, #4
 8002ce2:	480f      	ldr	r0, [pc, #60]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002ce4:	f005 fbea 	bl	80084bc <HAL_HRTIM_WaveformCompareConfig>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8002cee:	f000 fbff 	bl	80034f0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8002cf2:	f643 6342 	movw	r3, #15938	; 0x3e42
 8002cf6:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002cf8:	f107 0320 	add.w	r3, r7, #32
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	2104      	movs	r1, #4
 8002d00:	4807      	ldr	r0, [pc, #28]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002d02:	f005 fbdb 	bl	80084bc <HAL_HRTIM_WaveformCompareConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8002d0c:	f000 fbf0 	bl	80034f0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002d10:	4803      	ldr	r0, [pc, #12]	; (8002d20 <MX_HRTIM_Init+0x29c>)
 8002d12:	f000 fd2f 	bl	8003774 <HAL_HRTIM_MspPostInit>

}
 8002d16:	bf00      	nop
 8002d18:	3790      	adds	r7, #144	; 0x90
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200003f0 	.word	0x200003f0
 8002d24:	40017400 	.word	0x40017400

08002d28 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d2e:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <MX_LPTIM1_Init+0x58>)
 8002d30:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d3a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002d3e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d46:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_LPTIM1_Init+0x54>)
 8002d68:	f006 fd42 	bl	80097f0 <HAL_LPTIM_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8002d72:	f000 fbbd 	bl	80034f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200004cc 	.word	0x200004cc
 8002d80:	40002400 	.word	0x40002400

08002d84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8a:	f107 0310 	add.w	r3, r7, #16
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002da4:	4a20      	ldr	r2, [pc, #128]	; (8002e28 <MX_TIM1_Init+0xa4>)
 8002da6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002daa:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002dae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db0:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dbe:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dd0:	4814      	ldr	r0, [pc, #80]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002dd2:	f00a febb 	bl	800db4c <HAL_TIM_Base_Init>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002ddc:	f000 fb88 	bl	80034f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	4619      	mov	r1, r3
 8002dec:	480d      	ldr	r0, [pc, #52]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002dee:	f00a ff05 	bl	800dbfc <HAL_TIM_ConfigClockSource>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002df8:	f000 fb7a 	bl	80034f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4805      	ldr	r0, [pc, #20]	; (8002e24 <MX_TIM1_Init+0xa0>)
 8002e0e:	f00b f925 	bl	800e05c <HAL_TIMEx_MasterConfigSynchronization>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002e18:	f000 fb6a 	bl	80034f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e1c:	bf00      	nop
 8002e1e:	3720      	adds	r7, #32
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000504 	.word	0x20000504
 8002e28:	40010000 	.word	0x40010000

08002e2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e32:	f107 0310 	add.w	r3, r7, #16
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e54:	227c      	movs	r2, #124	; 0x7c
 8002e56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e5e:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
 8002e64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6c:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e72:	4814      	ldr	r0, [pc, #80]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e74:	f00a fe6a 	bl	800db4c <HAL_TIM_Base_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e7e:	f000 fb37 	bl	80034f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e90:	f00a feb4 	bl	800dbfc <HAL_TIM_ConfigClockSource>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e9a:	f000 fb29 	bl	80034f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4806      	ldr	r0, [pc, #24]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002eac:	f00b f8d6 	bl	800e05c <HAL_TIMEx_MasterConfigSynchronization>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002eb6:	f000 fb1b 	bl	80034f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000550 	.word	0x20000550

08002ec8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ece:	f107 0310 	add.w	r3, r7, #16
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <MX_TIM3_Init+0x98>)
 8002eea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002eec:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002eee:	227c      	movs	r2, #124	; 0x7c
 8002ef0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ef8:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002efe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f0c:	4813      	ldr	r0, [pc, #76]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002f0e:	f00a fe1d 	bl	800db4c <HAL_TIM_Base_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f18:	f000 faea 	bl	80034f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f22:	f107 0310 	add.w	r3, r7, #16
 8002f26:	4619      	mov	r1, r3
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002f2a:	f00a fe67 	bl	800dbfc <HAL_TIM_ConfigClockSource>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002f34:	f000 fadc 	bl	80034f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4805      	ldr	r0, [pc, #20]	; (8002f5c <MX_TIM3_Init+0x94>)
 8002f46:	f00b f889 	bl	800e05c <HAL_TIMEx_MasterConfigSynchronization>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002f50:	f000 face 	bl	80034f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f54:	bf00      	nop
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	2000059c 	.word	0x2000059c
 8002f60:	40000400 	.word	0x40000400

08002f64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f6a:	f107 0310 	add.w	r3, r7, #16
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f82:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <MX_TIM4_Init+0x98>)
 8002f84:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <MX_TIM4_Init+0x9c>)
 8002f86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 62499;
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <MX_TIM4_Init+0x98>)
 8002f8a:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002f8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <MX_TIM4_Init+0x98>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <MX_TIM4_Init+0x98>)
 8002f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <MX_TIM4_Init+0x98>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa4:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <MX_TIM4_Init+0x98>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002faa:	4814      	ldr	r0, [pc, #80]	; (8002ffc <MX_TIM4_Init+0x98>)
 8002fac:	f00a fdce 	bl	800db4c <HAL_TIM_Base_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002fb6:	f000 fa9b 	bl	80034f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480d      	ldr	r0, [pc, #52]	; (8002ffc <MX_TIM4_Init+0x98>)
 8002fc8:	f00a fe18 	bl	800dbfc <HAL_TIM_ConfigClockSource>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002fd2:	f000 fa8d 	bl	80034f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4806      	ldr	r0, [pc, #24]	; (8002ffc <MX_TIM4_Init+0x98>)
 8002fe4:	f00b f83a 	bl	800e05c <HAL_TIMEx_MasterConfigSynchronization>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002fee:	f000 fa7f 	bl	80034f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200005e8 	.word	0x200005e8
 8003000:	40000800 	.word	0x40000800

08003004 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800300a:	f107 0310 	add.w	r3, r7, #16
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <MX_TIM5_Init+0x94>)
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <MX_TIM5_Init+0x98>)
 8003026:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <MX_TIM5_Init+0x94>)
 800302a:	227c      	movs	r2, #124	; 0x7c
 800302c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <MX_TIM5_Init+0x94>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <MX_TIM5_Init+0x94>)
 8003036:	f04f 32ff 	mov.w	r2, #4294967295
 800303a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <MX_TIM5_Init+0x94>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <MX_TIM5_Init+0x94>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003048:	4813      	ldr	r0, [pc, #76]	; (8003098 <MX_TIM5_Init+0x94>)
 800304a:	f00a fd7f 	bl	800db4c <HAL_TIM_Base_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003054:	f000 fa4c 	bl	80034f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800305c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800305e:	f107 0310 	add.w	r3, r7, #16
 8003062:	4619      	mov	r1, r3
 8003064:	480c      	ldr	r0, [pc, #48]	; (8003098 <MX_TIM5_Init+0x94>)
 8003066:	f00a fdc9 	bl	800dbfc <HAL_TIM_ConfigClockSource>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003070:	f000 fa3e 	bl	80034f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	4619      	mov	r1, r3
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <MX_TIM5_Init+0x94>)
 8003082:	f00a ffeb 	bl	800e05c <HAL_TIMEx_MasterConfigSynchronization>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800308c:	f000 fa30 	bl	80034f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003090:	bf00      	nop
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000634 	.word	0x20000634
 800309c:	40000c00 	.word	0x40000c00

080030a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030a4:	4b22      	ldr	r3, [pc, #136]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030a6:	4a23      	ldr	r2, [pc, #140]	; (8003134 <MX_USART3_UART_Init+0x94>)
 80030a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 80030aa:	4b21      	ldr	r3, [pc, #132]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030ac:	4a22      	ldr	r2, [pc, #136]	; (8003138 <MX_USART3_UART_Init+0x98>)
 80030ae:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030b6:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030c4:	220c      	movs	r2, #12
 80030c6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030d4:	4b16      	ldr	r3, [pc, #88]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030dc:	2200      	movs	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030e6:	4812      	ldr	r0, [pc, #72]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030e8:	f00b f846 	bl	800e178 <HAL_UART_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80030f2:	f000 f9fd 	bl	80034f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030f6:	2100      	movs	r1, #0
 80030f8:	480d      	ldr	r0, [pc, #52]	; (8003130 <MX_USART3_UART_Init+0x90>)
 80030fa:	f00c f8d6 	bl	800f2aa <HAL_UARTEx_SetTxFifoThreshold>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8003104:	f000 f9f4 	bl	80034f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003108:	2100      	movs	r1, #0
 800310a:	4809      	ldr	r0, [pc, #36]	; (8003130 <MX_USART3_UART_Init+0x90>)
 800310c:	f00c f90b 	bl	800f326 <HAL_UARTEx_SetRxFifoThreshold>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8003116:	f000 f9eb 	bl	80034f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800311a:	4805      	ldr	r0, [pc, #20]	; (8003130 <MX_USART3_UART_Init+0x90>)
 800311c:	f00c f88c 	bl	800f238 <HAL_UARTEx_DisableFifoMode>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8003126:	f000 f9e3 	bl	80034f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000680 	.word	0x20000680
 8003134:	40004800 	.word	0x40004800
 8003138:	000f4240 	.word	0x000f4240

0800313c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	; 0x38
 8003140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003152:	4ba0      	ldr	r3, [pc, #640]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003158:	4a9e      	ldr	r2, [pc, #632]	; (80033d4 <MX_GPIO_Init+0x298>)
 800315a:	f043 0310 	orr.w	r3, r3, #16
 800315e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003162:	4b9c      	ldr	r3, [pc, #624]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	623b      	str	r3, [r7, #32]
 800316e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003170:	4b98      	ldr	r3, [pc, #608]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003176:	4a97      	ldr	r2, [pc, #604]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003180:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800318e:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003194:	4a8f      	ldr	r2, [pc, #572]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800319e:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ac:	4b89      	ldr	r3, [pc, #548]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b2:	4a88      	ldr	r2, [pc, #544]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031bc:	4b85      	ldr	r3, [pc, #532]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ca:	4b82      	ldr	r3, [pc, #520]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d0:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031d2:	f043 0302 	orr.w	r3, r3, #2
 80031d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031da:	4b7e      	ldr	r3, [pc, #504]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031e8:	4b7a      	ldr	r3, [pc, #488]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ee:	4a79      	ldr	r2, [pc, #484]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031f0:	f043 0320 	orr.w	r3, r3, #32
 80031f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f8:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <MX_GPIO_Init+0x298>)
 80031fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003206:	4b73      	ldr	r3, [pc, #460]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320c:	4a71      	ldr	r2, [pc, #452]	; (80033d4 <MX_GPIO_Init+0x298>)
 800320e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003216:	4b6f      	ldr	r3, [pc, #444]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003224:	4b6b      	ldr	r3, [pc, #428]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322a:	4a6a      	ldr	r2, [pc, #424]	; (80033d4 <MX_GPIO_Init+0x298>)
 800322c:	f043 0308 	orr.w	r3, r3, #8
 8003230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003234:	4b67      	ldr	r3, [pc, #412]	; (80033d4 <MX_GPIO_Init+0x298>)
 8003236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8003242:	2201      	movs	r2, #1
 8003244:	2134      	movs	r1, #52	; 0x34
 8003246:	4864      	ldr	r0, [pc, #400]	; (80033d8 <MX_GPIO_Init+0x29c>)
 8003248:	f004 ff76 	bl	8008138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 800324c:	2200      	movs	r2, #0
 800324e:	f245 1103 	movw	r1, #20739	; 0x5103
 8003252:	4862      	ldr	r0, [pc, #392]	; (80033dc <MX_GPIO_Init+0x2a0>)
 8003254:	f004 ff70 	bl	8008138 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8003258:	2200      	movs	r2, #0
 800325a:	2101      	movs	r1, #1
 800325c:	4860      	ldr	r0, [pc, #384]	; (80033e0 <MX_GPIO_Init+0x2a4>)
 800325e:	f004 ff6b 	bl	8008138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8003262:	2200      	movs	r2, #0
 8003264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003268:	485e      	ldr	r0, [pc, #376]	; (80033e4 <MX_GPIO_Init+0x2a8>)
 800326a:	f004 ff65 	bl	8008138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 800326e:	2200      	movs	r2, #0
 8003270:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8003274:	485c      	ldr	r0, [pc, #368]	; (80033e8 <MX_GPIO_Init+0x2ac>)
 8003276:	f004 ff5f 	bl	8008138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 800327a:	2201      	movs	r2, #1
 800327c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003280:	4859      	ldr	r0, [pc, #356]	; (80033e8 <MX_GPIO_Init+0x2ac>)
 8003282:	f004 ff59 	bl	8008138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8003286:	2201      	movs	r2, #1
 8003288:	21f8      	movs	r1, #248	; 0xf8
 800328a:	4856      	ldr	r0, [pc, #344]	; (80033e4 <MX_GPIO_Init+0x2a8>)
 800328c:	f004 ff54 	bl	8008138 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003290:	2200      	movs	r2, #0
 8003292:	2102      	movs	r1, #2
 8003294:	4850      	ldr	r0, [pc, #320]	; (80033d8 <MX_GPIO_Init+0x29c>)
 8003296:	f004 ff4f 	bl	8008138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 800329a:	2336      	movs	r3, #54	; 0x36
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329e:	2301      	movs	r3, #1
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ae:	4619      	mov	r1, r3
 80032b0:	4849      	ldr	r0, [pc, #292]	; (80033d8 <MX_GPIO_Init+0x29c>)
 80032b2:	f004 fd79 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80032b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80032c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ca:	4619      	mov	r1, r3
 80032cc:	4846      	ldr	r0, [pc, #280]	; (80033e8 <MX_GPIO_Init+0x2ac>)
 80032ce:	f004 fd6b 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 80032d2:	f245 1303 	movw	r3, #20739	; 0x5103
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d8:	2301      	movs	r3, #1
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e8:	4619      	mov	r1, r3
 80032ea:	483c      	ldr	r0, [pc, #240]	; (80033dc <MX_GPIO_Init+0x2a0>)
 80032ec:	f004 fd5c 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80032f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003304:	4619      	mov	r1, r3
 8003306:	4839      	ldr	r0, [pc, #228]	; (80033ec <MX_GPIO_Init+0x2b0>)
 8003308:	f004 fd4e 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 800330c:	2301      	movs	r3, #1
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003310:	2301      	movs	r3, #1
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 800331c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003320:	4619      	mov	r1, r3
 8003322:	482f      	ldr	r0, [pc, #188]	; (80033e0 <MX_GPIO_Init+0x2a4>)
 8003324:	f004 fd40 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8003328:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332e:	2301      	movs	r3, #1
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800333a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333e:	4619      	mov	r1, r3
 8003340:	4828      	ldr	r0, [pc, #160]	; (80033e4 <MX_GPIO_Init+0x2a8>)
 8003342:	f004 fd31 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800334a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003358:	4619      	mov	r1, r3
 800335a:	4821      	ldr	r0, [pc, #132]	; (80033e0 <MX_GPIO_Init+0x2a4>)
 800335c:	f004 fd24 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8003360:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003366:	2301      	movs	r3, #1
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800336a:	2302      	movs	r3, #2
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336e:	2300      	movs	r3, #0
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003376:	4619      	mov	r1, r3
 8003378:	481b      	ldr	r0, [pc, #108]	; (80033e8 <MX_GPIO_Init+0x2ac>)
 800337a:	f004 fd15 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800337e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003384:	2302      	movs	r3, #2
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003390:	230a      	movs	r3, #10
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003398:	4619      	mov	r1, r3
 800339a:	4815      	ldr	r0, [pc, #84]	; (80033f0 <MX_GPIO_Init+0x2b4>)
 800339c:	f004 fd04 	bl	8007da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 80033a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 80033ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b2:	4619      	mov	r1, r3
 80033b4:	480c      	ldr	r0, [pc, #48]	; (80033e8 <MX_GPIO_Init+0x2ac>)
 80033b6:	f004 fcf7 	bl	8007da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	2028      	movs	r0, #40	; 0x28
 80033c0:	f002 fea9 	bl	8006116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033c4:	2028      	movs	r0, #40	; 0x28
 80033c6:	f002 fec0 	bl	800614a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033ca:	bf00      	nop
 80033cc:	3738      	adds	r7, #56	; 0x38
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
 80033d8:	58021000 	.word	0x58021000
 80033dc:	58020400 	.word	0x58020400
 80033e0:	58021800 	.word	0x58021800
 80033e4:	58020c00 	.word	0x58020c00
 80033e8:	58020800 	.word	0x58020800
 80033ec:	58021400 	.word	0x58021400
 80033f0:	58020000 	.word	0x58020000

080033f4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 80033fc:	480e      	ldr	r0, [pc, #56]	; (8003438 <HAL_ADC_ConvCpltCallback+0x44>)
 80033fe:	f001 fd45 	bl	8004e8c <HAL_ADC_GetValue>
 8003402:	4603      	mov	r3, r0
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <HAL_ADC_ConvCpltCallback+0x48>)
 8003406:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_ADC_ConvCpltCallback+0x48>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003410:	6013      	str	r3, [r2, #0]
  sample_count++;
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <HAL_ADC_ConvCpltCallback+0x50>)
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	3301      	adds	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_ADC_ConvCpltCallback+0x50>)
 800341e:	801a      	strh	r2, [r3, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <HAL_ADC_ConvCpltCallback+0x4c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2200      	movs	r2, #0
 8003426:	2100      	movs	r1, #0
 8003428:	4807      	ldr	r0, [pc, #28]	; (8003448 <HAL_ADC_ConvCpltCallback+0x54>)
 800342a:	f002 ff99 	bl	8006360 <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000378 	.word	0x20000378
 800343c:	2000071c 	.word	0x2000071c
 8003440:	20000720 	.word	0x20000720
 8003444:	20000716 	.word	0x20000716
 8003448:	200003dc 	.word	0x200003dc

0800344c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003452:	463b      	mov	r3, r7
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800345e:	f002 fe8f 	bl	8006180 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003462:	2301      	movs	r3, #1
 8003464:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003466:	2300      	movs	r3, #0
 8003468:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800346e:	231f      	movs	r3, #31
 8003470:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003472:	2387      	movs	r3, #135	; 0x87
 8003474:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003476:	2300      	movs	r3, #0
 8003478:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800347a:	2300      	movs	r3, #0
 800347c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800347e:	2301      	movs	r3, #1
 8003480:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003482:	2301      	movs	r3, #1
 8003484:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003486:	2300      	movs	r3, #0
 8003488:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800348e:	463b      	mov	r3, r7
 8003490:	4618      	mov	r0, r3
 8003492:	f002 fead 	bl	80061f0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003496:	2301      	movs	r3, #1
 8003498:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800349a:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <MPU_Config+0x9c>)
 800349c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800349e:	2310      	movs	r3, #16
 80034a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80034a6:	2301      	movs	r3, #1
 80034a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80034aa:	2303      	movs	r3, #3
 80034ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80034b2:	463b      	mov	r3, r7
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 fe9b 	bl	80061f0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80034ba:	2302      	movs	r3, #2
 80034bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <MPU_Config+0xa0>)
 80034c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80034c2:	2308      	movs	r3, #8
 80034c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80034ca:	2301      	movs	r3, #1
 80034cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80034d2:	463b      	mov	r3, r7
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 fe8b 	bl	80061f0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80034da:	2004      	movs	r0, #4
 80034dc:	f002 fe68 	bl	80061b0 <HAL_MPU_Enable>

}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	30020000 	.word	0x30020000
 80034ec:	30040000 	.word	0x30040000

080034f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80034f4:	b672      	cpsid	i
}
 80034f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 80034f8:	4810      	ldr	r0, [pc, #64]	; (800353c <Error_Handler+0x4c>)
 80034fa:	f017 ff3f 	bl	801b37c <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 80034fe:	f240 1103 	movw	r1, #259	; 0x103
 8003502:	480f      	ldr	r0, [pc, #60]	; (8003540 <Error_Handler+0x50>)
 8003504:	f005 f9a6 	bl	8008854 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8003508:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 800350c:	480c      	ldr	r0, [pc, #48]	; (8003540 <Error_Handler+0x50>)
 800350e:	f005 fa3f 	bl	8008990 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003518:	480a      	ldr	r0, [pc, #40]	; (8003544 <Error_Handler+0x54>)
 800351a:	f004 fe0d 	bl	8008138 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 800351e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003522:	4809      	ldr	r0, [pc, #36]	; (8003548 <Error_Handler+0x58>)
 8003524:	f004 fe21 	bl	800816a <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <Error_Handler+0x5c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f01a f854 	bl	801d5e0 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003538:	e7f1      	b.n	800351e <Error_Handler+0x2e>
 800353a:	bf00      	nop
 800353c:	0801dcac 	.word	0x0801dcac
 8003540:	200003f0 	.word	0x200003f0
 8003544:	58020800 	.word	0x58020800
 8003548:	58020400 	.word	0x58020400
 800354c:	20000134 	.word	0x20000134

08003550 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_MspInit+0x30>)
 8003558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800355c:	4a08      	ldr	r2, [pc, #32]	; (8003580 <HAL_MspInit+0x30>)
 800355e:	f043 0302 	orr.w	r3, r3, #2
 8003562:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_MspInit+0x30>)
 8003568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	58024400 	.word	0x58024400

08003584 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b0b4      	sub	sp, #208	; 0xd0
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800358c:	f107 0310 	add.w	r3, r7, #16
 8003590:	22c0      	movs	r2, #192	; 0xc0
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f018 f81b 	bl	801b5d0 <memset>
  if(hadc->Instance==ADC3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2b      	ldr	r2, [pc, #172]	; (800364c <HAL_ADC_MspInit+0xc8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d14e      	bne.n	8003642 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80035a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80035b0:	2301      	movs	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 80035b4:	2313      	movs	r3, #19
 80035b6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 80035b8:	234f      	movs	r3, #79	; 0x4f
 80035ba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80035bc:	2302      	movs	r3, #2
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80035c0:	2302      	movs	r3, #2
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80035c4:	23c0      	movs	r3, #192	; 0xc0
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80035c8:	2320      	movs	r3, #32
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035d6:	f107 0310 	add.w	r3, r7, #16
 80035da:	4618      	mov	r0, r3
 80035dc:	f007 fd62 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80035e6:	f7ff ff83 	bl	80034f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80035ea:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_ADC_MspInit+0xcc>)
 80035ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <HAL_ADC_MspInit+0xcc>)
 80035f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_ADC_MspInit+0xcc>)
 80035fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_ADC_MspInit+0xcc>)
 800360a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800360e:	4a10      	ldr	r2, [pc, #64]	; (8003650 <HAL_ADC_MspInit+0xcc>)
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <HAL_ADC_MspInit+0xcc>)
 800361a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003626:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800362a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800362e:	f000 ff1b 	bl	8004468 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2100      	movs	r1, #0
 8003636:	207f      	movs	r0, #127	; 0x7f
 8003638:	f002 fd6d 	bl	8006116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800363c:	207f      	movs	r0, #127	; 0x7f
 800363e:	f002 fd84 	bl	800614a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003642:	bf00      	nop
 8003644:	37d0      	adds	r7, #208	; 0xd0
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	58026000 	.word	0x58026000
 8003650:	58024400 	.word	0x58024400

08003654 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_DAC_MspInit+0x80>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d129      	bne.n	80036ca <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <HAL_DAC_MspInit+0x84>)
 8003678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800367c:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_DAC_MspInit+0x84>)
 800367e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003682:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_DAC_MspInit+0x84>)
 8003688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800368c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <HAL_DAC_MspInit+0x84>)
 8003696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369a:	4a0f      	ldr	r2, [pc, #60]	; (80036d8 <HAL_DAC_MspInit+0x84>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_DAC_MspInit+0x84>)
 80036a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036b2:	2310      	movs	r3, #16
 80036b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036b6:	2303      	movs	r3, #3
 80036b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036be:	f107 0314 	add.w	r3, r7, #20
 80036c2:	4619      	mov	r1, r3
 80036c4:	4805      	ldr	r0, [pc, #20]	; (80036dc <HAL_DAC_MspInit+0x88>)
 80036c6:	f004 fb6f 	bl	8007da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80036ca:	bf00      	nop
 80036cc:	3728      	adds	r7, #40	; 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40007400 	.word	0x40007400
 80036d8:	58024400 	.word	0x58024400
 80036dc:	58020000 	.word	0x58020000

080036e0 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b0b4      	sub	sp, #208	; 0xd0
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036e8:	f107 0310 	add.w	r3, r7, #16
 80036ec:	22c0      	movs	r2, #192	; 0xc0
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f017 ff6d 	bl	801b5d0 <memset>
  if(hhrtim->Instance==HRTIM1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1c      	ldr	r2, [pc, #112]	; (800376c <HAL_HRTIM_MspInit+0x8c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d131      	bne.n	8003764 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8003700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003712:	f107 0310 	add.w	r3, r7, #16
 8003716:	4618      	mov	r0, r3
 8003718:	f007 fcc4 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8003722:	f7ff fee5 	bl	80034f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_HRTIM_MspInit+0x90>)
 8003728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800372c:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_HRTIM_MspInit+0x90>)
 800372e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003732:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_HRTIM_MspInit+0x90>)
 8003738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800373c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8003744:	2200      	movs	r2, #0
 8003746:	2100      	movs	r1, #0
 8003748:	2068      	movs	r0, #104	; 0x68
 800374a:	f002 fce4 	bl	8006116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 800374e:	2068      	movs	r0, #104	; 0x68
 8003750:	f002 fcfb 	bl	800614a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8003754:	2200      	movs	r2, #0
 8003756:	2100      	movs	r1, #0
 8003758:	206c      	movs	r0, #108	; 0x6c
 800375a:	f002 fcdc 	bl	8006116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 800375e:	206c      	movs	r0, #108	; 0x6c
 8003760:	f002 fcf3 	bl	800614a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8003764:	bf00      	nop
 8003766:	37d0      	adds	r7, #208	; 0xd0
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40017400 	.word	0x40017400
 8003770:	58024400 	.word	0x58024400

08003774 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377c:	f107 0314 	add.w	r3, r7, #20
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <HAL_HRTIM_MspPostInit+0xa8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d13d      	bne.n	8003812 <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <HAL_HRTIM_MspPostInit+0xac>)
 8003798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800379c:	4a20      	ldr	r2, [pc, #128]	; (8003820 <HAL_HRTIM_MspPostInit+0xac>)
 800379e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_HRTIM_MspPostInit+0xac>)
 80037a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	613b      	str	r3, [r7, #16]
 80037b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_HRTIM_MspPostInit+0xac>)
 80037b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ba:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_HRTIM_MspPostInit+0xac>)
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_HRTIM_MspPostInit+0xac>)
 80037c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037d2:	2340      	movs	r3, #64	; 0x40
 80037d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037de:	2303      	movs	r3, #3
 80037e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80037e2:	2302      	movs	r3, #2
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037e6:	f107 0314 	add.w	r3, r7, #20
 80037ea:	4619      	mov	r1, r3
 80037ec:	480d      	ldr	r0, [pc, #52]	; (8003824 <HAL_HRTIM_MspPostInit+0xb0>)
 80037ee:	f004 fadb 	bl	8007da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037f2:	23c0      	movs	r3, #192	; 0xc0
 80037f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2302      	movs	r3, #2
 80037f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fe:	2303      	movs	r3, #3
 8003800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8003802:	2301      	movs	r3, #1
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	4619      	mov	r1, r3
 800380c:	4806      	ldr	r0, [pc, #24]	; (8003828 <HAL_HRTIM_MspPostInit+0xb4>)
 800380e:	f004 facb 	bl	8007da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8003812:	bf00      	nop
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40017400 	.word	0x40017400
 8003820:	58024400 	.word	0x58024400
 8003824:	58021800 	.word	0x58021800
 8003828:	58020800 	.word	0x58020800

0800382c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b0b4      	sub	sp, #208	; 0xd0
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	22c0      	movs	r2, #192	; 0xc0
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f017 fec7 	bl	801b5d0 <memset>
  if(hlptim->Instance==LPTIM1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a19      	ldr	r2, [pc, #100]	; (80038ac <HAL_LPTIM_MspInit+0x80>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d12a      	bne.n	80038a2 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800384c:	f04f 0220 	mov.w	r2, #32
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003858:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800385c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003860:	f107 0310 	add.w	r3, r7, #16
 8003864:	4618      	mov	r0, r3
 8003866:	f007 fc1d 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8003870:	f7ff fe3e 	bl	80034f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003874:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <HAL_LPTIM_MspInit+0x84>)
 8003876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800387a:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <HAL_LPTIM_MspInit+0x84>)
 800387c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003880:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_LPTIM_MspInit+0x84>)
 8003886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800388a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	205d      	movs	r0, #93	; 0x5d
 8003898:	f002 fc3d 	bl	8006116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800389c:	205d      	movs	r0, #93	; 0x5d
 800389e:	f002 fc54 	bl	800614a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80038a2:	bf00      	nop
 80038a4:	37d0      	adds	r7, #208	; 0xd0
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40002400 	.word	0x40002400
 80038b0:	58024400 	.word	0x58024400

080038b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	; 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a35      	ldr	r2, [pc, #212]	; (8003998 <HAL_TIM_Base_MspInit+0xe4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10f      	bne.n	80038e6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038c6:	4b35      	ldr	r3, [pc, #212]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 80038c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038cc:	4a33      	ldr	r2, [pc, #204]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 80038d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80038e4:	e052      	b.n	800398c <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ee:	d10f      	bne.n	8003910 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 80038f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038f6:	4a29      	ldr	r2, [pc, #164]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003900:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 8003902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	69bb      	ldr	r3, [r7, #24]
}
 800390e:	e03d      	b.n	800398c <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a22      	ldr	r2, [pc, #136]	; (80039a0 <HAL_TIM_Base_MspInit+0xec>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10f      	bne.n	800393a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 800391c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 8003922:	f043 0302 	orr.w	r3, r3, #2
 8003926:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800392a:	4b1c      	ldr	r3, [pc, #112]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 800392c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	697b      	ldr	r3, [r7, #20]
}
 8003938:	e028      	b.n	800398c <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_TIM_Base_MspInit+0xf0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d10f      	bne.n	8003964 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003944:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 8003946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800394a:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 8003956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
}
 8003962:	e013      	b.n	800398c <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <HAL_TIM_Base_MspInit+0xf4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10e      	bne.n	800398c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 8003970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003974:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 8003976:	f043 0308 	orr.w	r3, r3, #8
 800397a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_TIM_Base_MspInit+0xe8>)
 8003980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
}
 800398c:	bf00      	nop
 800398e:	3724      	adds	r7, #36	; 0x24
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	40010000 	.word	0x40010000
 800399c:	58024400 	.word	0x58024400
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800
 80039a8:	40000c00 	.word	0x40000c00

080039ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b0ba      	sub	sp, #232	; 0xe8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039c4:	f107 0310 	add.w	r3, r7, #16
 80039c8:	22c0      	movs	r2, #192	; 0xc0
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f017 fdff 	bl	801b5d0 <memset>
  if(huart->Instance==USART3)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <HAL_UART_MspInit+0xc8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d146      	bne.n	8003a6a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039dc:	f04f 0202 	mov.w	r2, #2
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039ee:	f107 0310 	add.w	r3, r7, #16
 80039f2:	4618      	mov	r0, r3
 80039f4:	f007 fb56 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80039fe:	f7ff fd77 	bl	80034f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_UART_MspInit+0xcc>)
 8003a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a08:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_UART_MspInit+0xcc>)
 8003a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_UART_MspInit+0xcc>)
 8003a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a20:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_UART_MspInit+0xcc>)
 8003a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_UART_MspInit+0xcc>)
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a30:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <HAL_UART_MspInit+0xcc>)
 8003a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a58:	2307      	movs	r3, #7
 8003a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a62:	4619      	mov	r1, r3
 8003a64:	4805      	ldr	r0, [pc, #20]	; (8003a7c <HAL_UART_MspInit+0xd0>)
 8003a66:	f004 f99f 	bl	8007da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a6a:	bf00      	nop
 8003a6c:	37e8      	adds	r7, #232	; 0xe8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40004800 	.word	0x40004800
 8003a78:	58024400 	.word	0x58024400
 8003a7c:	58020c00 	.word	0x58020c00

08003a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003a84:	f007 faf2 	bl	800b06c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 8003a88:	f7ff fd32 	bl	80034f0 <Error_Handler>
 8003a8c:	e7fc      	b.n	8003a88 <NMI_Handler+0x8>

08003a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 8003a92:	f7ff fd2d 	bl	80034f0 <Error_Handler>
 8003a96:	e7fc      	b.n	8003a92 <HardFault_Handler+0x4>

08003a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8003a9c:	f7ff fd28 	bl	80034f0 <Error_Handler>
 8003aa0:	e7fc      	b.n	8003a9c <MemManage_Handler+0x4>

08003aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 8003aa6:	f7ff fd23 	bl	80034f0 <Error_Handler>
 8003aaa:	e7fc      	b.n	8003aa6 <BusFault_Handler+0x4>

08003aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 8003ab0:	f7ff fd1e 	bl	80034f0 <Error_Handler>
 8003ab4:	e7fc      	b.n	8003ab0 <UsageFault_Handler+0x4>

08003ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ae4:	f000 fc5c 	bl	80043a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}

08003aec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003af0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003af4:	f004 fb53 	bl	800819e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8003af8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003afc:	f004 fb4f 	bl	800819e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b00:	bf00      	nop
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <LPTIM1_IRQHandler+0x10>)
 8003b0a:	f005 ff88 	bl	8009a1e <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200004cc 	.word	0x200004cc

08003b18 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4802      	ldr	r0, [pc, #8]	; (8003b28 <HRTIM1_TIMA_IRQHandler+0x10>)
 8003b20:	f004 ffb4 	bl	8008a8c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	200003f0 	.word	0x200003f0

08003b2c <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8003b30:	2104      	movs	r1, #4
 8003b32:	4802      	ldr	r0, [pc, #8]	; (8003b3c <HRTIM1_TIME_IRQHandler+0x10>)
 8003b34:	f004 ffaa 	bl	8008a8c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200003f0 	.word	0x200003f0

08003b40 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003b44:	4802      	ldr	r0, [pc, #8]	; (8003b50 <ADC3_IRQHandler+0x10>)
 8003b46:	f001 f9af 	bl	8004ea8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000378 	.word	0x20000378

08003b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
	return 1;
 8003b58:	2301      	movs	r3, #1
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <_kill>:

int _kill(int pid, int sig)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <_kill+0x20>)
 8003b70:	2216      	movs	r2, #22
 8003b72:	601a      	str	r2, [r3, #0]
	return -1;
 8003b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	20007454 	.word	0x20007454

08003b88 <_exit>:

void _exit (int status)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ffe5 	bl	8003b64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b9a:	e7fe      	b.n	8003b9a <_exit+0x12>

08003b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	e00a      	b.n	8003bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bae:	f3af 8000 	nop.w
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	60ba      	str	r2, [r7, #8]
 8003bba:	b2ca      	uxtb	r2, r1
 8003bbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	dbf0      	blt.n	8003bae <_read+0x12>
	}

return len;
 8003bcc:	687b      	ldr	r3, [r7, #4]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e009      	b.n	8003bfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	60ba      	str	r2, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe fbeb 	bl	80023cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	dbf1      	blt.n	8003be8 <_write+0x12>
	}
	return len;
 8003c04:	687b      	ldr	r3, [r7, #4]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <_close>:

int _close(int file)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
	return -1;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c36:	605a      	str	r2, [r3, #4]
	return 0;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_isatty>:

int _isatty(int file)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c4e:	2301      	movs	r3, #1
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
	return 0;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <_sbrk+0x5c>)
 8003c82:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <_sbrk+0x60>)
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c8c:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <_sbrk+0x64>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <_sbrk+0x64>)
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <_sbrk+0x68>)
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <_sbrk+0x64>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d205      	bcs.n	8003cb4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <_sbrk+0x6c>)
 8003caa:	220c      	movs	r2, #12
 8003cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e009      	b.n	8003cc8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <_sbrk+0x64>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <_sbrk+0x64>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <_sbrk+0x64>)
 8003cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	20020000 	.word	0x20020000
 8003cd8:	00000400 	.word	0x00000400
 8003cdc:	20000770 	.word	0x20000770
 8003ce0:	20007468 	.word	0x20007468
 8003ce4:	20007454 	.word	0x20007454

08003ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cee:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <SystemInit+0x104>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf4:	4a3d      	ldr	r2, [pc, #244]	; (8003dec <SystemInit+0x104>)
 8003cf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cfe:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <SystemInit+0x108>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d807      	bhi.n	8003d1a <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d0a:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <SystemInit+0x108>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 030f 	bic.w	r3, r3, #15
 8003d12:	4a37      	ldr	r2, [pc, #220]	; (8003df0 <SystemInit+0x108>)
 8003d14:	f043 0307 	orr.w	r3, r3, #7
 8003d18:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <SystemInit+0x10c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a35      	ldr	r2, [pc, #212]	; (8003df4 <SystemInit+0x10c>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d26:	4b33      	ldr	r3, [pc, #204]	; (8003df4 <SystemInit+0x10c>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d2c:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <SystemInit+0x10c>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4930      	ldr	r1, [pc, #192]	; (8003df4 <SystemInit+0x10c>)
 8003d32:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <SystemInit+0x110>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <SystemInit+0x108>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d44:	4b2a      	ldr	r3, [pc, #168]	; (8003df0 <SystemInit+0x108>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f023 030f 	bic.w	r3, r3, #15
 8003d4c:	4a28      	ldr	r2, [pc, #160]	; (8003df0 <SystemInit+0x108>)
 8003d4e:	f043 0307 	orr.w	r3, r3, #7
 8003d52:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <SystemInit+0x10c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <SystemInit+0x10c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <SystemInit+0x10c>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d66:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <SystemInit+0x10c>)
 8003d68:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <SystemInit+0x114>)
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d6c:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <SystemInit+0x10c>)
 8003d6e:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <SystemInit+0x118>)
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <SystemInit+0x10c>)
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <SystemInit+0x11c>)
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d78:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <SystemInit+0x10c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <SystemInit+0x10c>)
 8003d80:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <SystemInit+0x11c>)
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <SystemInit+0x10c>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d8a:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <SystemInit+0x10c>)
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <SystemInit+0x11c>)
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <SystemInit+0x10c>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <SystemInit+0x10c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <SystemInit+0x10c>)
 8003d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <SystemInit+0x10c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003da8:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <SystemInit+0x120>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <SystemInit+0x124>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db4:	d202      	bcs.n	8003dbc <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003db6:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <SystemInit+0x128>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <SystemInit+0x10c>)
 8003dbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003dc2:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <SystemInit+0x10c>)
 8003dc4:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003dc8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <SystemInit+0x10c>)
 8003dce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003dd2:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003dd4:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <SystemInit+0x12c>)
 8003dd8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ddc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	e000ed00 	.word	0xe000ed00
 8003df0:	52002000 	.word	0x52002000
 8003df4:	58024400 	.word	0x58024400
 8003df8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003dfc:	02020200 	.word	0x02020200
 8003e00:	01ff0000 	.word	0x01ff0000
 8003e04:	01010280 	.word	0x01010280
 8003e08:	5c001000 	.word	0x5c001000
 8003e0c:	ffff0000 	.word	0xffff0000
 8003e10:	51008108 	.word	0x51008108
 8003e14:	52004000 	.word	0x52004000

08003e18 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003e20:	2101      	movs	r1, #1
 8003e22:	4803      	ldr	r0, [pc, #12]	; (8003e30 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003e24:	f004 f9a1 	bl	800816a <HAL_GPIO_TogglePin>
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	58020400 	.word	0x58020400

08003e34 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d15d      	bne.n	8003f18 <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8003e5c:	4b30      	ldr	r3, [pc, #192]	; (8003f20 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003e5e:	ed93 5b00 	vldr	d5, [r3]
 8003e62:	4b2f      	ldr	r3, [pc, #188]	; (8003f20 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003e64:	ed93 6b04 	vldr	d6, [r3, #16]
 8003e68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003e6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003e70:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003e74:	4b2a      	ldr	r3, [pc, #168]	; (8003f20 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003e76:	ed93 7b04 	vldr	d7, [r3, #16]
 8003e7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003e7e:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8003e82:	4b27      	ldr	r3, [pc, #156]	; (8003f20 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003e84:	ed93 5b02 	vldr	d5, [r3, #8]
 8003e88:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003e8a:	ed93 6b04 	vldr	d6, [r3, #16]
 8003e8e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003e92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003e96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e9a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003e9e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003ea4:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ea8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003eac:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8003eb0:	ed97 6b04 	vldr	d6, [r7, #16]
 8003eb4:	ed97 7b06 	vldr	d7, [r7, #24]
 8003eb8:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003ebc:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003ebe:	ed93 6b04 	vldr	d6, [r3, #16]
 8003ec2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003ec6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003eca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ece:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003ed2:	ee17 3a90 	vmov	r3, s15
 8003ed6:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d106      	bne.n	8003ef0 <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 8003ee2:	f019 fb81 	bl	801d5e8 <__stop_pop_veneer>
			i = 0;
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
			start_pop();
 8003eec:	f019 fb6c 	bl	801d5c8 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003ef8:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3301      	adds	r3, #1
 8003f00:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003f02:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003f04:	2102      	movs	r1, #2
 8003f06:	4809      	ldr	r0, [pc, #36]	; (8003f2c <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8003f08:	f004 f92f 	bl	800816a <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4619      	mov	r1, r3
 8003f12:	4807      	ldr	r0, [pc, #28]	; (8003f30 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003f14:	f017 f9cc 	bl	801b2b0 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8003f18:	bf00      	nop
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	08020db0 	.word	0x08020db0
 8003f24:	2000077c 	.word	0x2000077c
 8003f28:	20000774 	.word	0x20000774
 8003f2c:	58021000 	.word	0x58021000
 8003f30:	0801e3ac 	.word	0x0801e3ac

08003f34 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f50:	f7ff feca 	bl	8003ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f54:	480c      	ldr	r0, [pc, #48]	; (8003f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f56:	490d      	ldr	r1, [pc, #52]	; (8003f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f5c:	e002      	b.n	8003f64 <LoopCopyDataInit>

08003f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f62:	3304      	adds	r3, #4

08003f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f68:	d3f9      	bcc.n	8003f5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f6c:	4c0a      	ldr	r4, [pc, #40]	; (8003f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f70:	e001      	b.n	8003f76 <LoopFillZerobss>

08003f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f74:	3204      	adds	r2, #4

08003f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f78:	d3fb      	bcc.n	8003f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f7a:	f017 fb8d 	bl	801b698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f7e:	f7fe fa37 	bl	80023f0 <main>
  bx  lr
 8003f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f8c:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8003f90:	080212c8 	.word	0x080212c8
  ldr r2, =_sbss
 8003f94:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8003f98:	20007464 	.word	0x20007464

08003f9c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f9c:	e7fe      	b.n	8003f9c <ADC_IRQHandler>

08003f9e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <LAN8742_RegisterBusIO+0x28>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <LAN8742_RegisterBusIO+0x28>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <LAN8742_RegisterBusIO+0x28>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	e014      	b.n	8003ff6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d17c      	bne.n	800411c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e01c      	b.n	8004076 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f107 0208 	add.w	r2, r7, #8
 8004044:	2112      	movs	r1, #18
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	4798      	blx	r3
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	da03      	bge.n	8004058 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8004050:	f06f 0304 	mvn.w	r3, #4
 8004054:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8004056:	e00b      	b.n	8004070 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	429a      	cmp	r2, r3
 8004062:	d105      	bne.n	8004070 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
         break;
 800406e:	e005      	b.n	800407c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3301      	adds	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b1f      	cmp	r3, #31
 800407a:	d9df      	bls.n	800403c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b1f      	cmp	r3, #31
 8004082:	d902      	bls.n	800408a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8004084:	f06f 0302 	mvn.w	r3, #2
 8004088:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d145      	bne.n	800411c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6810      	ldr	r0, [r2, #0]
 8004098:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800409c:	2100      	movs	r1, #0
 800409e:	4798      	blx	r3
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	db37      	blt.n	8004116 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6810      	ldr	r0, [r2, #0]
 80040ae:	f107 0208 	add.w	r2, r7, #8
 80040b2:	2100      	movs	r1, #0
 80040b4:	4798      	blx	r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	db28      	blt.n	800410e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	4798      	blx	r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80040c6:	e01c      	b.n	8004102 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	4798      	blx	r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040da:	d80e      	bhi.n	80040fa <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6810      	ldr	r0, [r2, #0]
 80040e4:	f107 0208 	add.w	r2, r7, #8
 80040e8:	2100      	movs	r1, #0
 80040ea:	4798      	blx	r3
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da07      	bge.n	8004102 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80040f2:	f06f 0304 	mvn.w	r3, #4
 80040f6:	613b      	str	r3, [r7, #16]
                 break;
 80040f8:	e010      	b.n	800411c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80040fa:	f06f 0301 	mvn.w	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
               break;
 8004100:	e00c      	b.n	800411c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1dd      	bne.n	80040c8 <LAN8742_Init+0xc6>
 800410c:	e006      	b.n	800411c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800410e:	f06f 0304 	mvn.w	r3, #4
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	e002      	b.n	800411c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8004116:	f06f 0303 	mvn.w	r3, #3
 800411a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d112      	bne.n	8004148 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	4798      	blx	r3
 8004128:	4603      	mov	r3, r0
 800412a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800412c:	bf00      	nop
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4798      	blx	r3
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004140:	d9f5      	bls.n	800412e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8004148:	693b      	ldr	r3, [r7, #16]
 }
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <LAN8742_StartAutoNego>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_StartAutoNego(lan8742_Object_t *pObj)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
  int32_t status = LAN8742_STATUS_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) >= 0)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6810      	ldr	r0, [r2, #0]
 800416a:	f107 0208 	add.w	r2, r7, #8
 800416e:	2100      	movs	r1, #0
 8004170:	4798      	blx	r3
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	db11      	blt.n	800419c <LAN8742_StartAutoNego+0x4a>
  {
    readval |= LAN8742_BCR_AUTONEGO_EN;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800417e:	60bb      	str	r3, [r7, #8]
  
    /* Apply configuration */
    if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, readval) < 0)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6810      	ldr	r0, [r2, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	2100      	movs	r1, #0
 800418c:	4798      	blx	r3
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	da06      	bge.n	80041a2 <LAN8742_StartAutoNego+0x50>
    {
      status =  LAN8742_STATUS_WRITE_ERROR;
 8004194:	f06f 0303 	mvn.w	r3, #3
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e002      	b.n	80041a2 <LAN8742_StartAutoNego+0x50>
    }
  }
  else
  {
    status = LAN8742_STATUS_READ_ERROR;
 800419c:	f06f 0304 	mvn.w	r3, #4
 80041a0:	60fb      	str	r3, [r7, #12]
  }
   
  return status;
 80041a2:	68fb      	ldr	r3, [r7, #12]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6810      	ldr	r0, [r2, #0]
 80041c0:	f107 020c 	add.w	r2, r7, #12
 80041c4:	2101      	movs	r1, #1
 80041c6:	4798      	blx	r3
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	da02      	bge.n	80041d4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80041ce:	f06f 0304 	mvn.w	r3, #4
 80041d2:	e06e      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6810      	ldr	r0, [r2, #0]
 80041dc:	f107 020c 	add.w	r2, r7, #12
 80041e0:	2101      	movs	r1, #1
 80041e2:	4798      	blx	r3
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da02      	bge.n	80041f0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80041ea:	f06f 0304 	mvn.w	r3, #4
 80041ee:	e060      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80041fa:	2301      	movs	r3, #1
 80041fc:	e059      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6810      	ldr	r0, [r2, #0]
 8004206:	f107 020c 	add.w	r2, r7, #12
 800420a:	2100      	movs	r1, #0
 800420c:	4798      	blx	r3
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	da02      	bge.n	800421a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004214:	f06f 0304 	mvn.w	r3, #4
 8004218:	e04b      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11b      	bne.n	800425c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <LAN8742_GetLinkState+0x90>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004238:	2302      	movs	r3, #2
 800423a:	e03a      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004246:	2303      	movs	r3, #3
 8004248:	e033      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004254:	2304      	movs	r3, #4
 8004256:	e02c      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004258:	2305      	movs	r3, #5
 800425a:	e02a      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6810      	ldr	r0, [r2, #0]
 8004264:	f107 020c 	add.w	r2, r7, #12
 8004268:	211f      	movs	r1, #31
 800426a:	4798      	blx	r3
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	da02      	bge.n	8004278 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8004272:	f06f 0304 	mvn.w	r3, #4
 8004276:	e01c      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8004282:	2306      	movs	r3, #6
 8004284:	e015      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 031c 	and.w	r3, r3, #28
 800428c:	2b18      	cmp	r3, #24
 800428e:	d101      	bne.n	8004294 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004290:	2302      	movs	r3, #2
 8004292:	e00e      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 031c 	and.w	r3, r3, #28
 800429a:	2b08      	cmp	r3, #8
 800429c:	d101      	bne.n	80042a2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800429e:	2303      	movs	r3, #3
 80042a0:	e007      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 031c 	and.w	r3, r3, #28
 80042a8:	2b14      	cmp	r3, #20
 80042aa:	d101      	bne.n	80042b0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80042ac:	2304      	movs	r3, #4
 80042ae:	e000      	b.n	80042b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80042b0:	2305      	movs	r3, #5
    }				
  }
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c2:	2003      	movs	r0, #3
 80042c4:	f001 ff1c 	bl	8006100 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042c8:	f006 fcfa 	bl	800acc0 <HAL_RCC_GetSysClockFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_Init+0x68>)
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	4913      	ldr	r1, [pc, #76]	; (8004328 <HAL_Init+0x6c>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_Init+0x68>)
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <HAL_Init+0x6c>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
 80042fc:	4a0b      	ldr	r2, [pc, #44]	; (800432c <HAL_Init+0x70>)
 80042fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004300:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <HAL_Init+0x74>)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004306:	2000      	movs	r0, #0
 8004308:	f000 f814 	bl	8004334 <HAL_InitTick>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e002      	b.n	800431c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004316:	f7ff f91b 	bl	8003550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	58024400 	.word	0x58024400
 8004328:	08020dc8 	.word	0x08020dc8
 800432c:	20000130 	.word	0x20000130
 8004330:	2000012c 	.word	0x2000012c

08004334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800433c:	4b15      	ldr	r3, [pc, #84]	; (8004394 <HAL_InitTick+0x60>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e021      	b.n	800438c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_InitTick+0x64>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_InitTick+0x60>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	4619      	mov	r1, r3
 8004352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004356:	fbb3 f3f1 	udiv	r3, r3, r1
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	4618      	mov	r0, r3
 8004360:	f001 ff01 	bl	8006166 <HAL_SYSTICK_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e00e      	b.n	800438c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b0f      	cmp	r3, #15
 8004372:	d80a      	bhi.n	800438a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004374:	2200      	movs	r2, #0
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	f001 fecb 	bl	8006116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004380:	4a06      	ldr	r2, [pc, #24]	; (800439c <HAL_InitTick+0x68>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000148 	.word	0x20000148
 8004398:	2000012c 	.word	0x2000012c
 800439c:	20000144 	.word	0x20000144

080043a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_IncTick+0x20>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_IncTick+0x24>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_IncTick+0x24>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000148 	.word	0x20000148
 80043c4:	20000780 	.word	0x20000780

080043c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return uwTick;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_GetTick+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000780 	.word	0x20000780

080043e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff ffee 	bl	80043c8 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d005      	beq.n	8004406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <HAL_Delay+0x44>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004406:	bf00      	nop
 8004408:	f7ff ffde 	bl	80043c8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	429a      	cmp	r2, r3
 8004416:	d8f7      	bhi.n	8004408 <HAL_Delay+0x28>
  {
  }
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000148 	.word	0x20000148

08004428 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_GetREVID+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0c1b      	lsrs	r3, r3, #16
}
 8004432:	4618      	mov	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	5c001000 	.word	0x5c001000

08004440 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004450:	4904      	ldr	r1, [pc, #16]	; (8004464 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	58000400 	.word	0x58000400

08004468 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	43db      	mvns	r3, r3
 800447a:	401a      	ands	r2, r3
 800447c:	4904      	ldr	r1, [pc, #16]	; (8004490 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	58000400 	.word	0x58000400

08004494 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	609a      	str	r2, [r3, #8]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	609a      	str	r2, [r3, #8]
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3360      	adds	r3, #96	; 0x60
 800450e:	461a      	mov	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	430b      	orrs	r3, r1
 800452a:	431a      	orrs	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004530:	bf00      	nop
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	fa01 f303 	lsl.w	r3, r1, r3
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	611a      	str	r2, [r3, #16]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800456e:	b480      	push	{r7}
 8004570:	b087      	sub	sp, #28
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3360      	adds	r3, #96	; 0x60
 800457e:	461a      	mov	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	431a      	orrs	r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	601a      	str	r2, [r3, #0]
  }
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3330      	adds	r3, #48	; 0x30
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	4413      	add	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	211f      	movs	r1, #31
 80045f6:	fa01 f303 	lsl.w	r3, r1, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	401a      	ands	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	f003 011f 	and.w	r1, r3, #31
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	431a      	orrs	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3314      	adds	r3, #20
 8004658:	461a      	mov	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	0e5b      	lsrs	r3, r3, #25
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	4413      	add	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	0d1b      	lsrs	r3, r3, #20
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	2107      	movs	r1, #7
 8004676:	fa01 f303 	lsl.w	r3, r1, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	401a      	ands	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	0d1b      	lsrs	r3, r3, #20
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	fa01 f303 	lsl.w	r3, r1, r3
 800468c:	431a      	orrs	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b8:	43db      	mvns	r3, r3
 80046ba:	401a      	ands	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f003 0318 	and.w	r3, r3, #24
 80046c2:	4908      	ldr	r1, [pc, #32]	; (80046e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80046c4:	40d9      	lsrs	r1, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	400b      	ands	r3, r1
 80046ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ce:	431a      	orrs	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	000fffff 	.word	0x000fffff

080046e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 031f 	and.w	r3, r3, #31
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <LL_ADC_DisableDeepPowerDown+0x20>)
 800472e:	4013      	ands	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6093      	str	r3, [r2, #8]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	5fffffc0 	.word	0x5fffffc0

08004744 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004758:	d101      	bne.n	800475e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <LL_ADC_EnableInternalRegulator+0x24>)
 800477a:	4013      	ands	r3, r2
 800477c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	6fffffc0 	.word	0x6fffffc0

08004794 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047a8:	d101      	bne.n	80047ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <LL_ADC_Enable+0x24>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	f043 0201 	orr.w	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	7fffffc0 	.word	0x7fffffc0

080047e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <LL_ADC_Disable+0x24>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	f043 0202 	orr.w	r2, r3, #2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	7fffffc0 	.word	0x7fffffc0

0800480c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <LL_ADC_IsEnabled+0x18>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <LL_ADC_IsEnabled+0x1a>
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	d101      	bne.n	800484a <LL_ADC_IsDisableOngoing+0x18>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <LL_ADC_IsDisableOngoing+0x1a>
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <LL_ADC_REG_StartConversion+0x24>)
 8004866:	4013      	ands	r3, r2
 8004868:	f043 0204 	orr.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	7fffffc0 	.word	0x7fffffc0

08004880 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b04      	cmp	r3, #4
 8004892:	d101      	bne.n	8004898 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d101      	bne.n	80048be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80048d8:	2300      	movs	r3, #0
 80048da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e18f      	b.n	8004c06 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fe fe45 	bl	8003584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff ff19 	bl	8004744 <LL_ADC_IsDeepPowerDownEnabled>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff feff 	bl	8004720 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff ff34 	bl	8004794 <LL_ADC_IsInternalRegulatorEnabled>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d114      	bne.n	800495c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff ff18 	bl	800476c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800493c:	4b87      	ldr	r3, [pc, #540]	; (8004b5c <HAL_ADC_Init+0x290>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	4a87      	ldr	r2, [pc, #540]	; (8004b60 <HAL_ADC_Init+0x294>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	099b      	lsrs	r3, r3, #6
 800494a:	3301      	adds	r3, #1
 800494c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800494e:	e002      	b.n	8004956 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3b01      	subs	r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f9      	bne.n	8004950 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff17 	bl	8004794 <LL_ADC_IsInternalRegulatorEnabled>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10d      	bne.n	8004988 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	f043 0210 	orr.w	r2, r3, #16
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff ff77 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 8004992:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 8129 	bne.w	8004bf4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f040 8125 	bne.w	8004bf4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049b2:	f043 0202 	orr.w	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff ff24 	bl	800480c <LL_ADC_IsEnabled>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d136      	bne.n	8004a38 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a65      	ldr	r2, [pc, #404]	; (8004b64 <HAL_ADC_Init+0x298>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_ADC_Init+0x112>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a63      	ldr	r2, [pc, #396]	; (8004b68 <HAL_ADC_Init+0x29c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10e      	bne.n	80049fc <HAL_ADC_Init+0x130>
 80049de:	4861      	ldr	r0, [pc, #388]	; (8004b64 <HAL_ADC_Init+0x298>)
 80049e0:	f7ff ff14 	bl	800480c <LL_ADC_IsEnabled>
 80049e4:	4604      	mov	r4, r0
 80049e6:	4860      	ldr	r0, [pc, #384]	; (8004b68 <HAL_ADC_Init+0x29c>)
 80049e8:	f7ff ff10 	bl	800480c <LL_ADC_IsEnabled>
 80049ec:	4603      	mov	r3, r0
 80049ee:	4323      	orrs	r3, r4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e008      	b.n	8004a0e <HAL_ADC_Init+0x142>
 80049fc:	485b      	ldr	r0, [pc, #364]	; (8004b6c <HAL_ADC_Init+0x2a0>)
 80049fe:	f7ff ff05 	bl	800480c <LL_ADC_IsEnabled>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d012      	beq.n	8004a38 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a53      	ldr	r2, [pc, #332]	; (8004b64 <HAL_ADC_Init+0x298>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_ADC_Init+0x15a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a51      	ldr	r2, [pc, #324]	; (8004b68 <HAL_ADC_Init+0x29c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_ADC_Init+0x15e>
 8004a26:	4a52      	ldr	r2, [pc, #328]	; (8004b70 <HAL_ADC_Init+0x2a4>)
 8004a28:	e000      	b.n	8004a2c <HAL_ADC_Init+0x160>
 8004a2a:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_ADC_Init+0x2a8>)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f7ff fd2e 	bl	8004494 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004a38:	f7ff fcf6 	bl	8004428 <HAL_GetREVID>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d914      	bls.n	8004a70 <HAL_ADC_Init+0x1a4>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d110      	bne.n	8004a70 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7d5b      	ldrb	r3, [r3, #21]
 8004a52:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a58:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a5e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	7f1b      	ldrb	r3, [r3, #28]
 8004a64:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a66:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a68:	f043 030c 	orr.w	r3, r3, #12
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e00d      	b.n	8004a8c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	7d5b      	ldrb	r3, [r3, #21]
 8004a74:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a7a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a80:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7f1b      	ldrb	r3, [r3, #28]
 8004a86:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7f1b      	ldrb	r3, [r3, #28]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d106      	bne.n	8004aa2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	045b      	lsls	r3, r3, #17
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <HAL_ADC_Init+0x2ac>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	69b9      	ldr	r1, [r7, #24]
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff fed2 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 8004adc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fedf 	bl	80048a6 <LL_ADC_INJ_IsConversionOngoing>
 8004ae8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d15f      	bne.n	8004bb0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d15c      	bne.n	8004bb0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7d1b      	ldrb	r3, [r3, #20]
 8004afa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <HAL_ADC_Init+0x2b0>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	69b9      	ldr	r1, [r7, #24]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d130      	bne.n	8004b84 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <HAL_ADC_Init+0x2b4>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b36:	3a01      	subs	r2, #1
 8004b38:	0411      	lsls	r1, r2, #16
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b3e:	4311      	orrs	r1, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b44:	4311      	orrs	r1, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	611a      	str	r2, [r3, #16]
 8004b58:	e01c      	b.n	8004b94 <HAL_ADC_Init+0x2c8>
 8004b5a:	bf00      	nop
 8004b5c:	2000012c 	.word	0x2000012c
 8004b60:	053e2d63 	.word	0x053e2d63
 8004b64:	40022000 	.word	0x40022000
 8004b68:	40022100 	.word	0x40022100
 8004b6c:	58026000 	.word	0x58026000
 8004b70:	40022300 	.word	0x40022300
 8004b74:	58026300 	.word	0x58026300
 8004b78:	fff0c003 	.word	0xfff0c003
 8004b7c:	ffffbffc 	.word	0xffffbffc
 8004b80:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f001 f804 	bl	8005bb8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f023 010f 	bic.w	r1, r3, #15
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	1e5a      	subs	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
 8004bd0:	e007      	b.n	8004be2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 020f 	bic.w	r2, r2, #15
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
 8004bf2:	e007      	b.n	8004c04 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	f043 0210 	orr.w	r2, r3, #16
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c04:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3724      	adds	r7, #36	; 0x24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd90      	pop	{r4, r7, pc}
 8004c0e:	bf00      	nop

08004c10 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a92      	ldr	r2, [pc, #584]	; (8004e68 <HAL_ADC_Start_IT+0x258>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_ADC_Start_IT+0x1c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a91      	ldr	r2, [pc, #580]	; (8004e6c <HAL_ADC_Start_IT+0x25c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_ADC_Start_IT+0x20>
 8004c2c:	4b90      	ldr	r3, [pc, #576]	; (8004e70 <HAL_ADC_Start_IT+0x260>)
 8004c2e:	e000      	b.n	8004c32 <HAL_ADC_Start_IT+0x22>
 8004c30:	4b90      	ldr	r3, [pc, #576]	; (8004e74 <HAL_ADC_Start_IT+0x264>)
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff fd58 	bl	80046e8 <LL_ADC_GetMultimode>
 8004c38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fe1e 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f040 8118 	bne.w	8004e7c <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_ADC_Start_IT+0x4a>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e113      	b.n	8004e82 <HAL_ADC_Start_IT+0x272>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 febe 	bl	80059e4 <ADC_Enable>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f040 80f5 	bne.w	8004e5e <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c78:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <HAL_ADC_Start_IT+0x268>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a78      	ldr	r2, [pc, #480]	; (8004e6c <HAL_ADC_Start_IT+0x25c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d002      	beq.n	8004c94 <HAL_ADC_Start_IT+0x84>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	e000      	b.n	8004c96 <HAL_ADC_Start_IT+0x86>
 8004c94:	4b74      	ldr	r3, [pc, #464]	; (8004e68 <HAL_ADC_Start_IT+0x258>)
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d002      	beq.n	8004ca4 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d006      	beq.n	8004cca <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	f023 0206 	bic.w	r2, r3, #6
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	659a      	str	r2, [r3, #88]	; 0x58
 8004cc8:	e002      	b.n	8004cd0 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	221c      	movs	r2, #28
 8004cd6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 021c 	bic.w	r2, r2, #28
 8004cee:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d108      	bne.n	8004d0a <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	605a      	str	r2, [r3, #4]
          break;
 8004d08:	e008      	b.n	8004d1c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0204 	orr.w	r2, r2, #4
 8004d18:	605a      	str	r2, [r3, #4]
          break;
 8004d1a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d107      	bne.n	8004d34 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0210 	orr.w	r2, r2, #16
 8004d32:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a4c      	ldr	r2, [pc, #304]	; (8004e6c <HAL_ADC_Start_IT+0x25c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d002      	beq.n	8004d44 <HAL_ADC_Start_IT+0x134>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	e000      	b.n	8004d46 <HAL_ADC_Start_IT+0x136>
 8004d44:	4b48      	ldr	r3, [pc, #288]	; (8004e68 <HAL_ADC_Start_IT+0x258>)
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d008      	beq.n	8004d60 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d002      	beq.n	8004d60 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d13a      	bne.n	8004dd6 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d02d      	beq.n	8004dca <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d110      	bne.n	8004da8 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0220 	bic.w	r2, r2, #32
 8004d94:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da4:	605a      	str	r2, [r3, #4]
              break;
 8004da6:	e010      	b.n	8004dca <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0220 	orr.w	r2, r2, #32
 8004dc6:	605a      	str	r2, [r3, #4]
              break;
 8004dc8:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fd42 	bl	8004858 <LL_ADC_REG_StartConversion>
 8004dd4:	e054      	b.n	8004e80 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <HAL_ADC_Start_IT+0x25c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d002      	beq.n	8004df2 <HAL_ADC_Start_IT+0x1e2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	e000      	b.n	8004df4 <HAL_ADC_Start_IT+0x1e4>
 8004df2:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <HAL_ADC_Start_IT+0x258>)
 8004df4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d03e      	beq.n	8004e80 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d110      	bne.n	8004e3c <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0220 	bic.w	r2, r2, #32
 8004e28:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e38:	605a      	str	r2, [r3, #4]
              break;
 8004e3a:	e021      	b.n	8004e80 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0220 	orr.w	r2, r2, #32
 8004e5a:	605a      	str	r2, [r3, #4]
              break;
 8004e5c:	e010      	b.n	8004e80 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e66:	e00b      	b.n	8004e80 <HAL_ADC_Start_IT+0x270>
 8004e68:	40022000 	.word	0x40022000
 8004e6c:	40022100 	.word	0x40022100
 8004e70:	40022300 	.word	0x40022300
 8004e74:	58026300 	.word	0x58026300
 8004e78:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop

08004e8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a87      	ldr	r2, [pc, #540]	; (80050e8 <HAL_ADC_IRQHandler+0x240>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_ADC_IRQHandler+0x30>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a86      	ldr	r2, [pc, #536]	; (80050ec <HAL_ADC_IRQHandler+0x244>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d101      	bne.n	8004edc <HAL_ADC_IRQHandler+0x34>
 8004ed8:	4b85      	ldr	r3, [pc, #532]	; (80050f0 <HAL_ADC_IRQHandler+0x248>)
 8004eda:	e000      	b.n	8004ede <HAL_ADC_IRQHandler+0x36>
 8004edc:	4b85      	ldr	r3, [pc, #532]	; (80050f4 <HAL_ADC_IRQHandler+0x24c>)
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fc02 	bl	80046e8 <LL_ADC_GetMultimode>
 8004ee4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d017      	beq.n	8004f20 <HAL_ADC_IRQHandler+0x78>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d012      	beq.n	8004f20 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d105      	bne.n	8004f12 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 f81a 	bl	8005f4c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d004      	beq.n	8004f34 <HAL_ADC_IRQHandler+0x8c>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 8083 	beq.w	8005046 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d07d      	beq.n	8005046 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d105      	bne.n	8004f62 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fb1c 	bl	80045a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d062      	beq.n	8005038 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a5d      	ldr	r2, [pc, #372]	; (80050ec <HAL_ADC_IRQHandler+0x244>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d002      	beq.n	8004f82 <HAL_ADC_IRQHandler+0xda>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	e000      	b.n	8004f84 <HAL_ADC_IRQHandler+0xdc>
 8004f82:	4b59      	ldr	r3, [pc, #356]	; (80050e8 <HAL_ADC_IRQHandler+0x240>)
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d008      	beq.n	8004f9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b05      	cmp	r3, #5
 8004f96:	d002      	beq.n	8004f9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d104      	bne.n	8004fa8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	e00c      	b.n	8004fc2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a4f      	ldr	r2, [pc, #316]	; (80050ec <HAL_ADC_IRQHandler+0x244>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d002      	beq.n	8004fb8 <HAL_ADC_IRQHandler+0x110>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	e000      	b.n	8004fba <HAL_ADC_IRQHandler+0x112>
 8004fb8:	4b4b      	ldr	r3, [pc, #300]	; (80050e8 <HAL_ADC_IRQHandler+0x240>)
 8004fba:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d135      	bne.n	8005038 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d12e      	bne.n	8005038 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fc4e 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d11a      	bne.n	8005020 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 020c 	bic.w	r2, r2, #12
 8004ff8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d112      	bne.n	8005038 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
 800501e:	e00b      	b.n	8005038 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	f043 0210 	orr.w	r2, r3, #16
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fe f9db 	bl	80033f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	220c      	movs	r2, #12
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <HAL_ADC_IRQHandler+0x1b2>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80a0 	beq.w	80051a6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 809a 	beq.w	80051a6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	d105      	bne.n	800508a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fac7 	bl	8004622 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005094:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fa82 	bl	80045a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80050a0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a11      	ldr	r2, [pc, #68]	; (80050ec <HAL_ADC_IRQHandler+0x244>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d002      	beq.n	80050b2 <HAL_ADC_IRQHandler+0x20a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	e000      	b.n	80050b4 <HAL_ADC_IRQHandler+0x20c>
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_ADC_IRQHandler+0x240>)
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d008      	beq.n	80050ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d002      	beq.n	80050ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b07      	cmp	r3, #7
 80050cc:	d104      	bne.n	80050d8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	e014      	b.n	8005102 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a03      	ldr	r2, [pc, #12]	; (80050ec <HAL_ADC_IRQHandler+0x244>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00a      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x250>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	e008      	b.n	80050fa <HAL_ADC_IRQHandler+0x252>
 80050e8:	40022000 	.word	0x40022000
 80050ec:	40022100 	.word	0x40022100
 80050f0:	40022300 	.word	0x40022300
 80050f4:	58026300 	.word	0x58026300
 80050f8:	4b84      	ldr	r3, [pc, #528]	; (800530c <HAL_ADC_IRQHandler+0x464>)
 80050fa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d047      	beq.n	8005198 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_ADC_IRQHandler+0x27a>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d03f      	beq.n	8005198 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800511e:	2b00      	cmp	r3, #0
 8005120:	d13a      	bne.n	8005198 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b40      	cmp	r3, #64	; 0x40
 800512e:	d133      	bne.n	8005198 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d12e      	bne.n	8005198 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fbb1 	bl	80048a6 <LL_ADC_INJ_IsConversionOngoing>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11a      	bne.n	8005180 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005158:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516e:	2b00      	cmp	r3, #0
 8005170:	d112      	bne.n	8005198 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	f043 0201 	orr.w	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
 800517e:	e00b      	b.n	8005198 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f043 0210 	orr.w	r2, r3, #16
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005190:	f043 0201 	orr.w	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 feaf 	bl	8005efc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2260      	movs	r2, #96	; 0x60
 80051a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d011      	beq.n	80051d4 <HAL_ADC_IRQHandler+0x32c>
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8a8 	bl	800531c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2280      	movs	r2, #128	; 0x80
 80051d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d012      	beq.n	8005204 <HAL_ADC_IRQHandler+0x35c>
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00d      	beq.n	8005204 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fe95 	bl	8005f24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005202:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520a:	2b00      	cmp	r3, #0
 800520c:	d012      	beq.n	8005234 <HAL_ADC_IRQHandler+0x38c>
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00d      	beq.n	8005234 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fe87 	bl	8005f38 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005232:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	d043      	beq.n	80052c6 <HAL_ADC_IRQHandler+0x41e>
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	d03e      	beq.n	80052c6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005250:	2301      	movs	r3, #1
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
 8005254:	e021      	b.n	800529a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d015      	beq.n	8005288 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2a      	ldr	r2, [pc, #168]	; (800530c <HAL_ADC_IRQHandler+0x464>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <HAL_ADC_IRQHandler+0x3c8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a29      	ldr	r2, [pc, #164]	; (8005310 <HAL_ADC_IRQHandler+0x468>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d101      	bne.n	8005274 <HAL_ADC_IRQHandler+0x3cc>
 8005270:	4b28      	ldr	r3, [pc, #160]	; (8005314 <HAL_ADC_IRQHandler+0x46c>)
 8005272:	e000      	b.n	8005276 <HAL_ADC_IRQHandler+0x3ce>
 8005274:	4b28      	ldr	r3, [pc, #160]	; (8005318 <HAL_ADC_IRQHandler+0x470>)
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fa44 	bl	8004704 <LL_ADC_GetMultiDMATransfer>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00b      	beq.n	800529a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005282:	2301      	movs	r3, #1
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
 8005286:	e008      	b.n	800529a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005296:	2301      	movs	r3, #1
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10e      	bne.n	80052be <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	f043 0202 	orr.w	r2, r3, #2
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f839 	bl	8005330 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2210      	movs	r2, #16
 80052c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d018      	beq.n	8005302 <HAL_ADC_IRQHandler+0x45a>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d013      	beq.n	8005302 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ea:	f043 0208 	orr.w	r2, r3, #8
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052fa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fe07 	bl	8005f10 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005302:	bf00      	nop
 8005304:	3728      	adds	r7, #40	; 0x28
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40022000 	.word	0x40022000
 8005310:	40022100 	.word	0x40022100
 8005314:	40022300 	.word	0x40022300
 8005318:	58026300 	.word	0x58026300

0800531c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b0a1      	sub	sp, #132	; 0x84
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a9d      	ldr	r2, [pc, #628]	; (80055d4 <HAL_ADC_ConfigChannel+0x290>)
 800535e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_ADC_ConfigChannel+0x2a>
 800536a:	2302      	movs	r3, #2
 800536c:	e321      	b.n	80059b2 <HAL_ADC_ConfigChannel+0x66e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fa80 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 8306 	bne.w	8005994 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005390:	2b00      	cmp	r3, #0
 8005392:	d108      	bne.n	80053a6 <HAL_ADC_ConfigChannel+0x62>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	0e9b      	lsrs	r3, r3, #26
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	2201      	movs	r2, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	e016      	b.n	80053d4 <HAL_ADC_ConfigChannel+0x90>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80053b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80053b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_ADC_ConfigChannel+0x7e>
    return 32U;
 80053be:	2320      	movs	r3, #32
 80053c0:	e003      	b.n	80053ca <HAL_ADC_ConfigChannel+0x86>
  return __builtin_clz(value);
 80053c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	2201      	movs	r2, #1
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6812      	ldr	r2, [r2, #0]
 80053d8:	69d1      	ldr	r1, [r2, #28]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	430b      	orrs	r3, r1
 80053e0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7ff f8eb 	bl	80045ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fa41 	bl	8004880 <LL_ADC_REG_IsConversionOngoing>
 80053fe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fa4e 	bl	80048a6 <LL_ADC_INJ_IsConversionOngoing>
 800540a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800540c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 80b3 	bne.w	800557a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005416:	2b00      	cmp	r3, #0
 8005418:	f040 80af 	bne.w	800557a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	461a      	mov	r2, r3
 800542a:	f7ff f90d 	bl	8004648 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800542e:	4b6a      	ldr	r3, [pc, #424]	; (80055d8 <HAL_ADC_ConfigChannel+0x294>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543a:	d10b      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x110>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	e01d      	b.n	8005490 <HAL_ADC_ConfigChannel+0x14c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10b      	bne.n	800547a <HAL_ADC_ConfigChannel+0x136>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	089b      	lsrs	r3, r3, #2
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	e00a      	b.n	8005490 <HAL_ADC_ConfigChannel+0x14c>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	089b      	lsrs	r3, r3, #2
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b04      	cmp	r3, #4
 8005498:	d027      	beq.n	80054ea <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6919      	ldr	r1, [r3, #16]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a8:	f7ff f828 	bl	80044fc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6919      	ldr	r1, [r3, #16]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	7e5b      	ldrb	r3, [r3, #25]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d102      	bne.n	80054c2 <HAL_ADC_ConfigChannel+0x17e>
 80054bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054c0:	e000      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x180>
 80054c2:	2300      	movs	r3, #0
 80054c4:	461a      	mov	r2, r3
 80054c6:	f7ff f852 	bl	800456e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6919      	ldr	r1, [r3, #16]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	7e1b      	ldrb	r3, [r3, #24]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d102      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0x19c>
 80054da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054de:	e000      	b.n	80054e2 <HAL_ADC_ConfigChannel+0x19e>
 80054e0:	2300      	movs	r3, #0
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7ff f82a 	bl	800453c <LL_ADC_SetDataRightShift>
 80054e8:	e047      	b.n	800557a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	069b      	lsls	r3, r3, #26
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d107      	bne.n	800550e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800550c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	069b      	lsls	r3, r3, #26
 800551e:	429a      	cmp	r2, r3
 8005520:	d107      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005530:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005538:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	069b      	lsls	r3, r3, #26
 8005542:	429a      	cmp	r2, r3
 8005544:	d107      	bne.n	8005556 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005554:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	069b      	lsls	r3, r3, #26
 8005566:	429a      	cmp	r2, r3
 8005568:	d107      	bne.n	800557a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005578:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff f944 	bl	800480c <LL_ADC_IsEnabled>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	f040 820d 	bne.w	80059a6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	461a      	mov	r2, r3
 800559a:	f7ff f881 	bl	80046a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <HAL_ADC_ConfigChannel+0x290>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	f040 8133 	bne.w	8005810 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d110      	bne.n	80055dc <HAL_ADC_ConfigChannel+0x298>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	0e9b      	lsrs	r3, r3, #26
 80055c0:	3301      	adds	r3, #1
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	2b09      	cmp	r3, #9
 80055c8:	bf94      	ite	ls
 80055ca:	2301      	movls	r3, #1
 80055cc:	2300      	movhi	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	e01e      	b.n	8005610 <HAL_ADC_ConfigChannel+0x2cc>
 80055d2:	bf00      	nop
 80055d4:	47ff0000 	.word	0x47ff0000
 80055d8:	5c001000 	.word	0x5c001000
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055e4:	fa93 f3a3 	rbit	r3, r3
 80055e8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80055ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80055ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80055f4:	2320      	movs	r3, #32
 80055f6:	e003      	b.n	8005600 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80055f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055fa:	fab3 f383 	clz	r3, r3
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	3301      	adds	r3, #1
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2b09      	cmp	r3, #9
 8005608:	bf94      	ite	ls
 800560a:	2301      	movls	r3, #1
 800560c:	2300      	movhi	r3, #0
 800560e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005610:	2b00      	cmp	r3, #0
 8005612:	d079      	beq.n	8005708 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800561c:	2b00      	cmp	r3, #0
 800561e:	d107      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x2ec>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	0e9b      	lsrs	r3, r3, #26
 8005626:	3301      	adds	r3, #1
 8005628:	069b      	lsls	r3, r3, #26
 800562a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800562e:	e015      	b.n	800565c <HAL_ADC_ConfigChannel+0x318>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	fa93 f3a3 	rbit	r3, r3
 800563c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005640:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005648:	2320      	movs	r3, #32
 800564a:	e003      	b.n	8005654 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800564c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	3301      	adds	r3, #1
 8005656:	069b      	lsls	r3, r3, #26
 8005658:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005664:	2b00      	cmp	r3, #0
 8005666:	d109      	bne.n	800567c <HAL_ADC_ConfigChannel+0x338>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	0e9b      	lsrs	r3, r3, #26
 800566e:	3301      	adds	r3, #1
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	e017      	b.n	80056ac <HAL_ADC_ConfigChannel+0x368>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005684:	fa93 f3a3 	rbit	r3, r3
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800568a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800568e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005694:	2320      	movs	r3, #32
 8005696:	e003      	b.n	80056a0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569a:	fab3 f383 	clz	r3, r3
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	3301      	adds	r3, #1
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	2101      	movs	r1, #1
 80056a8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ac:	ea42 0103 	orr.w	r1, r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0x38e>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	0e9b      	lsrs	r3, r3, #26
 80056c2:	3301      	adds	r3, #1
 80056c4:	f003 021f 	and.w	r2, r3, #31
 80056c8:	4613      	mov	r3, r2
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	4413      	add	r3, r2
 80056ce:	051b      	lsls	r3, r3, #20
 80056d0:	e018      	b.n	8005704 <HAL_ADC_ConfigChannel+0x3c0>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	fa93 f3a3 	rbit	r3, r3
 80056de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80056ea:	2320      	movs	r3, #32
 80056ec:	e003      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	fab3 f383 	clz	r3, r3
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	3301      	adds	r3, #1
 80056f8:	f003 021f 	and.w	r2, r3, #31
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005704:	430b      	orrs	r3, r1
 8005706:	e07e      	b.n	8005806 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005710:	2b00      	cmp	r3, #0
 8005712:	d107      	bne.n	8005724 <HAL_ADC_ConfigChannel+0x3e0>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	0e9b      	lsrs	r3, r3, #26
 800571a:	3301      	adds	r3, #1
 800571c:	069b      	lsls	r3, r3, #26
 800571e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005722:	e015      	b.n	8005750 <HAL_ADC_ConfigChannel+0x40c>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	fa93 f3a3 	rbit	r3, r3
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800573c:	2320      	movs	r3, #32
 800573e:	e003      	b.n	8005748 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	fab3 f383 	clz	r3, r3
 8005746:	b2db      	uxtb	r3, r3
 8005748:	3301      	adds	r3, #1
 800574a:	069b      	lsls	r3, r3, #26
 800574c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x42c>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	0e9b      	lsrs	r3, r3, #26
 8005762:	3301      	adds	r3, #1
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2101      	movs	r1, #1
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	e017      	b.n	80057a0 <HAL_ADC_ConfigChannel+0x45c>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	fa93 f3a3 	rbit	r3, r3
 800577c:	61bb      	str	r3, [r7, #24]
  return result;
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005788:	2320      	movs	r3, #32
 800578a:	e003      	b.n	8005794 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	fab3 f383 	clz	r3, r3
 8005792:	b2db      	uxtb	r3, r3
 8005794:	3301      	adds	r3, #1
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	2101      	movs	r1, #1
 800579c:	fa01 f303 	lsl.w	r3, r1, r3
 80057a0:	ea42 0103 	orr.w	r1, r2, r3
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10d      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x488>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	0e9b      	lsrs	r3, r3, #26
 80057b6:	3301      	adds	r3, #1
 80057b8:	f003 021f 	and.w	r2, r3, #31
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	3b1e      	subs	r3, #30
 80057c4:	051b      	lsls	r3, r3, #20
 80057c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057ca:	e01b      	b.n	8005804 <HAL_ADC_ConfigChannel+0x4c0>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	fa93 f3a3 	rbit	r3, r3
 80057d8:	60fb      	str	r3, [r7, #12]
  return result;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80057e4:	2320      	movs	r3, #32
 80057e6:	e003      	b.n	80057f0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	fab3 f383 	clz	r3, r3
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	3301      	adds	r3, #1
 80057f2:	f003 021f 	and.w	r2, r3, #31
 80057f6:	4613      	mov	r3, r2
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	4413      	add	r3, r2
 80057fc:	3b1e      	subs	r3, #30
 80057fe:	051b      	lsls	r3, r3, #20
 8005800:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005804:	430b      	orrs	r3, r1
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	6892      	ldr	r2, [r2, #8]
 800580a:	4619      	mov	r1, r3
 800580c:	f7fe ff1c 	bl	8004648 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	f280 80c6 	bge.w	80059a6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a67      	ldr	r2, [pc, #412]	; (80059bc <HAL_ADC_ConfigChannel+0x678>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d004      	beq.n	800582e <HAL_ADC_ConfigChannel+0x4ea>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a65      	ldr	r2, [pc, #404]	; (80059c0 <HAL_ADC_ConfigChannel+0x67c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d101      	bne.n	8005832 <HAL_ADC_ConfigChannel+0x4ee>
 800582e:	4b65      	ldr	r3, [pc, #404]	; (80059c4 <HAL_ADC_ConfigChannel+0x680>)
 8005830:	e000      	b.n	8005834 <HAL_ADC_ConfigChannel+0x4f0>
 8005832:	4b65      	ldr	r3, [pc, #404]	; (80059c8 <HAL_ADC_ConfigChannel+0x684>)
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe fe53 	bl	80044e0 <LL_ADC_GetCommonPathInternalCh>
 800583a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a5e      	ldr	r2, [pc, #376]	; (80059bc <HAL_ADC_ConfigChannel+0x678>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_ADC_ConfigChannel+0x50c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a5d      	ldr	r2, [pc, #372]	; (80059c0 <HAL_ADC_ConfigChannel+0x67c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10e      	bne.n	800586e <HAL_ADC_ConfigChannel+0x52a>
 8005850:	485a      	ldr	r0, [pc, #360]	; (80059bc <HAL_ADC_ConfigChannel+0x678>)
 8005852:	f7fe ffdb 	bl	800480c <LL_ADC_IsEnabled>
 8005856:	4604      	mov	r4, r0
 8005858:	4859      	ldr	r0, [pc, #356]	; (80059c0 <HAL_ADC_ConfigChannel+0x67c>)
 800585a:	f7fe ffd7 	bl	800480c <LL_ADC_IsEnabled>
 800585e:	4603      	mov	r3, r0
 8005860:	4323      	orrs	r3, r4
 8005862:	2b00      	cmp	r3, #0
 8005864:	bf0c      	ite	eq
 8005866:	2301      	moveq	r3, #1
 8005868:	2300      	movne	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	e008      	b.n	8005880 <HAL_ADC_ConfigChannel+0x53c>
 800586e:	4857      	ldr	r0, [pc, #348]	; (80059cc <HAL_ADC_ConfigChannel+0x688>)
 8005870:	f7fe ffcc 	bl	800480c <LL_ADC_IsEnabled>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d07d      	beq.n	8005980 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a51      	ldr	r2, [pc, #324]	; (80059d0 <HAL_ADC_ConfigChannel+0x68c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d130      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x5ac>
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d12b      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a4b      	ldr	r2, [pc, #300]	; (80059cc <HAL_ADC_ConfigChannel+0x688>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	f040 8081 	bne.w	80059a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a44      	ldr	r2, [pc, #272]	; (80059bc <HAL_ADC_ConfigChannel+0x678>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_ADC_ConfigChannel+0x574>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a43      	ldr	r2, [pc, #268]	; (80059c0 <HAL_ADC_ConfigChannel+0x67c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d101      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x578>
 80058b8:	4a42      	ldr	r2, [pc, #264]	; (80059c4 <HAL_ADC_ConfigChannel+0x680>)
 80058ba:	e000      	b.n	80058be <HAL_ADC_ConfigChannel+0x57a>
 80058bc:	4a42      	ldr	r2, [pc, #264]	; (80059c8 <HAL_ADC_ConfigChannel+0x684>)
 80058be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7fe fdf7 	bl	80044ba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058cc:	4b41      	ldr	r3, [pc, #260]	; (80059d4 <HAL_ADC_ConfigChannel+0x690>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	4a41      	ldr	r2, [pc, #260]	; (80059d8 <HAL_ADC_ConfigChannel+0x694>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	099b      	lsrs	r3, r3, #6
 80058da:	3301      	adds	r3, #1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80058e0:	e002      	b.n	80058e8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f9      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058ee:	e05a      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a39      	ldr	r2, [pc, #228]	; (80059dc <HAL_ADC_ConfigChannel+0x698>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d11e      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x5f4>
 80058fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d119      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a30      	ldr	r2, [pc, #192]	; (80059cc <HAL_ADC_ConfigChannel+0x688>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d14b      	bne.n	80059a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a2a      	ldr	r2, [pc, #168]	; (80059bc <HAL_ADC_ConfigChannel+0x678>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d004      	beq.n	8005922 <HAL_ADC_ConfigChannel+0x5de>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a28      	ldr	r2, [pc, #160]	; (80059c0 <HAL_ADC_ConfigChannel+0x67c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d101      	bne.n	8005926 <HAL_ADC_ConfigChannel+0x5e2>
 8005922:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <HAL_ADC_ConfigChannel+0x680>)
 8005924:	e000      	b.n	8005928 <HAL_ADC_ConfigChannel+0x5e4>
 8005926:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <HAL_ADC_ConfigChannel+0x684>)
 8005928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f7fe fdc2 	bl	80044ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005936:	e036      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <HAL_ADC_ConfigChannel+0x69c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d131      	bne.n	80059a6 <HAL_ADC_ConfigChannel+0x662>
 8005942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d12c      	bne.n	80059a6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1e      	ldr	r2, [pc, #120]	; (80059cc <HAL_ADC_ConfigChannel+0x688>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d127      	bne.n	80059a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a18      	ldr	r2, [pc, #96]	; (80059bc <HAL_ADC_ConfigChannel+0x678>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_ADC_ConfigChannel+0x626>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <HAL_ADC_ConfigChannel+0x67c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d101      	bne.n	800596e <HAL_ADC_ConfigChannel+0x62a>
 800596a:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <HAL_ADC_ConfigChannel+0x680>)
 800596c:	e000      	b.n	8005970 <HAL_ADC_ConfigChannel+0x62c>
 800596e:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <HAL_ADC_ConfigChannel+0x684>)
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005976:	4619      	mov	r1, r3
 8005978:	4610      	mov	r0, r2
 800597a:	f7fe fd9e 	bl	80044ba <LL_ADC_SetCommonPathInternalCh>
 800597e:	e012      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005992:	e008      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80059ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3784      	adds	r7, #132	; 0x84
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd90      	pop	{r4, r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40022000 	.word	0x40022000
 80059c0:	40022100 	.word	0x40022100
 80059c4:	40022300 	.word	0x40022300
 80059c8:	58026300 	.word	0x58026300
 80059cc:	58026000 	.word	0x58026000
 80059d0:	cb840000 	.word	0xcb840000
 80059d4:	2000012c 	.word	0x2000012c
 80059d8:	053e2d63 	.word	0x053e2d63
 80059dc:	c7520000 	.word	0xc7520000
 80059e0:	cfb80000 	.word	0xcfb80000

080059e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fe ff0b 	bl	800480c <LL_ADC_IsEnabled>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d16e      	bne.n	8005ada <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	4b38      	ldr	r3, [pc, #224]	; (8005ae4 <ADC_Enable+0x100>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	f043 0210 	orr.w	r2, r3, #16
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	f043 0201 	orr.w	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e05a      	b.n	8005adc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe fec6 	bl	80047bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a30:	f7fe fcca 	bl	80043c8 <HAL_GetTick>
 8005a34:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ae8 <ADC_Enable+0x104>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <ADC_Enable+0x66>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <ADC_Enable+0x108>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d101      	bne.n	8005a4e <ADC_Enable+0x6a>
 8005a4a:	4b29      	ldr	r3, [pc, #164]	; (8005af0 <ADC_Enable+0x10c>)
 8005a4c:	e000      	b.n	8005a50 <ADC_Enable+0x6c>
 8005a4e:	4b29      	ldr	r3, [pc, #164]	; (8005af4 <ADC_Enable+0x110>)
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe fe49 	bl	80046e8 <LL_ADC_GetMultimode>
 8005a56:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a23      	ldr	r2, [pc, #140]	; (8005aec <ADC_Enable+0x108>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d002      	beq.n	8005a68 <ADC_Enable+0x84>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	e000      	b.n	8005a6a <ADC_Enable+0x86>
 8005a68:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <ADC_Enable+0x104>)
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d02c      	beq.n	8005acc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d130      	bne.n	8005ada <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a78:	e028      	b.n	8005acc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fec4 	bl	800480c <LL_ADC_IsEnabled>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fe94 	bl	80047bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a94:	f7fe fc98 	bl	80043c8 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d914      	bls.n	8005acc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d00d      	beq.n	8005acc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab4:	f043 0210 	orr.w	r2, r3, #16
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac0:	f043 0201 	orr.w	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e007      	b.n	8005adc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d1cf      	bne.n	8005a7a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	8000003f 	.word	0x8000003f
 8005ae8:	40022000 	.word	0x40022000
 8005aec:	40022100 	.word	0x40022100
 8005af0:	40022300 	.word	0x40022300
 8005af4:	58026300 	.word	0x58026300

08005af8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fe94 	bl	8004832 <LL_ADC_IsDisableOngoing>
 8005b0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe fe7b 	bl	800480c <LL_ADC_IsEnabled>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d047      	beq.n	8005bac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d144      	bne.n	8005bac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 030d 	and.w	r3, r3, #13
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d10c      	bne.n	8005b4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe fe55 	bl	80047e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2203      	movs	r2, #3
 8005b40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b42:	f7fe fc41 	bl	80043c8 <HAL_GetTick>
 8005b46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b48:	e029      	b.n	8005b9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	f043 0210 	orr.w	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5a:	f043 0201 	orr.w	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e023      	b.n	8005bae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b66:	f7fe fc2f 	bl	80043c8 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d914      	bls.n	8005b9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f043 0210 	orr.w	r2, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f043 0201 	orr.w	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e007      	b.n	8005bae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1dc      	bne.n	8005b66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a7a      	ldr	r2, [pc, #488]	; (8005db0 <ADC_ConfigureBoostMode+0x1f8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <ADC_ConfigureBoostMode+0x1c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a79      	ldr	r2, [pc, #484]	; (8005db4 <ADC_ConfigureBoostMode+0x1fc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d109      	bne.n	8005be8 <ADC_ConfigureBoostMode+0x30>
 8005bd4:	4b78      	ldr	r3, [pc, #480]	; (8005db8 <ADC_ConfigureBoostMode+0x200>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	bf14      	ite	ne
 8005be0:	2301      	movne	r3, #1
 8005be2:	2300      	moveq	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e008      	b.n	8005bfa <ADC_ConfigureBoostMode+0x42>
 8005be8:	4b74      	ldr	r3, [pc, #464]	; (8005dbc <ADC_ConfigureBoostMode+0x204>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01c      	beq.n	8005c38 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005bfe:	f005 f9d9 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 8005c02:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c0c:	d010      	beq.n	8005c30 <ADC_ConfigureBoostMode+0x78>
 8005c0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c12:	d873      	bhi.n	8005cfc <ADC_ConfigureBoostMode+0x144>
 8005c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c18:	d002      	beq.n	8005c20 <ADC_ConfigureBoostMode+0x68>
 8005c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c1e:	d16d      	bne.n	8005cfc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	60fb      	str	r3, [r7, #12]
        break;
 8005c2e:	e068      	b.n	8005d02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	089b      	lsrs	r3, r3, #2
 8005c34:	60fb      	str	r3, [r7, #12]
        break;
 8005c36:	e064      	b.n	8005d02 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005c38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c3c:	f04f 0100 	mov.w	r1, #0
 8005c40:	f006 fc3a 	bl	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c44:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c4e:	d051      	beq.n	8005cf4 <ADC_ConfigureBoostMode+0x13c>
 8005c50:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c54:	d854      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x148>
 8005c56:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c5a:	d047      	beq.n	8005cec <ADC_ConfigureBoostMode+0x134>
 8005c5c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c60:	d84e      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x148>
 8005c62:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c66:	d03d      	beq.n	8005ce4 <ADC_ConfigureBoostMode+0x12c>
 8005c68:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c6c:	d848      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x148>
 8005c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c72:	d033      	beq.n	8005cdc <ADC_ConfigureBoostMode+0x124>
 8005c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c78:	d842      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x148>
 8005c7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c7e:	d029      	beq.n	8005cd4 <ADC_ConfigureBoostMode+0x11c>
 8005c80:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c84:	d83c      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x148>
 8005c86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c8a:	d01a      	beq.n	8005cc2 <ADC_ConfigureBoostMode+0x10a>
 8005c8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c90:	d836      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x148>
 8005c92:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c96:	d014      	beq.n	8005cc2 <ADC_ConfigureBoostMode+0x10a>
 8005c98:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c9c:	d830      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x148>
 8005c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ca2:	d00e      	beq.n	8005cc2 <ADC_ConfigureBoostMode+0x10a>
 8005ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ca8:	d82a      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x148>
 8005caa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cae:	d008      	beq.n	8005cc2 <ADC_ConfigureBoostMode+0x10a>
 8005cb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cb4:	d824      	bhi.n	8005d00 <ADC_ConfigureBoostMode+0x148>
 8005cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cba:	d002      	beq.n	8005cc2 <ADC_ConfigureBoostMode+0x10a>
 8005cbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cc0:	d11e      	bne.n	8005d00 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	0c9b      	lsrs	r3, r3, #18
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	60fb      	str	r3, [r7, #12]
        break;
 8005cd2:	e016      	b.n	8005d02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	60fb      	str	r3, [r7, #12]
        break;
 8005cda:	e012      	b.n	8005d02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	60fb      	str	r3, [r7, #12]
        break;
 8005ce2:	e00e      	b.n	8005d02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	60fb      	str	r3, [r7, #12]
        break;
 8005cea:	e00a      	b.n	8005d02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	09db      	lsrs	r3, r3, #7
 8005cf0:	60fb      	str	r3, [r7, #12]
        break;
 8005cf2:	e006      	b.n	8005d02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	60fb      	str	r3, [r7, #12]
        break;
 8005cfa:	e002      	b.n	8005d02 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005cfc:	bf00      	nop
 8005cfe:	e000      	b.n	8005d02 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005d00:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005d02:	f7fe fb91 	bl	8004428 <HAL_GetREVID>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d815      	bhi.n	8005d3c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a2b      	ldr	r2, [pc, #172]	; (8005dc0 <ADC_ConfigureBoostMode+0x208>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d908      	bls.n	8005d2a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005d28:	e03e      	b.n	8005da8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d38:	609a      	str	r2, [r3, #8]
}
 8005d3a:	e035      	b.n	8005da8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a1f      	ldr	r2, [pc, #124]	; (8005dc4 <ADC_ConfigureBoostMode+0x20c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d808      	bhi.n	8005d5c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d58:	609a      	str	r2, [r3, #8]
}
 8005d5a:	e025      	b.n	8005da8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <ADC_ConfigureBoostMode+0x210>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d80a      	bhi.n	8005d7a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d76:	609a      	str	r2, [r3, #8]
}
 8005d78:	e016      	b.n	8005da8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <ADC_ConfigureBoostMode+0x214>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d80a      	bhi.n	8005d98 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d94:	609a      	str	r2, [r3, #8]
}
 8005d96:	e007      	b.n	8005da8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005da6:	609a      	str	r2, [r3, #8]
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40022000 	.word	0x40022000
 8005db4:	40022100 	.word	0x40022100
 8005db8:	40022300 	.word	0x40022300
 8005dbc:	58026300 	.word	0x58026300
 8005dc0:	01312d00 	.word	0x01312d00
 8005dc4:	005f5e10 	.word	0x005f5e10
 8005dc8:	00bebc20 	.word	0x00bebc20
 8005dcc:	017d7840 	.word	0x017d7840

08005dd0 <LL_ADC_StartCalibration>:
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <LL_ADC_StartCalibration+0x38>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005df0:	430a      	orrs	r2, r1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	609a      	str	r2, [r3, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	3ffeffc0 	.word	0x3ffeffc0

08005e0c <LL_ADC_IsCalibrationOnGoing>:
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e20:	d101      	bne.n	8005e26 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_ADCEx_Calibration_Start>:
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]
  __HAL_LOCK(hadc);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_ADCEx_Calibration_Start+0x1e>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e04c      	b.n	8005eec <HAL_ADCEx_Calibration_Start+0xb8>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  tmp_hal_status = ADC_Disable(hadc);
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff fe4c 	bl	8005af8 <ADC_Disable>
 8005e60:	4603      	mov	r3, r0
 8005e62:	75fb      	strb	r3, [r7, #23]
  if (tmp_hal_status == HAL_OK)
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d135      	bne.n	8005ed6 <HAL_ADCEx_Calibration_Start+0xa2>
    ADC_STATE_CLR_SET(hadc->State,
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e6e:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	f043 0202 	orr.w	r2, r3, #2
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	655a      	str	r2, [r3, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff ffa4 	bl	8005dd0 <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e88:	e014      	b.n	8005eb4 <HAL_ADCEx_Calibration_Start+0x80>
      wait_loop_index++;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d30d      	bcc.n	8005eb4 <HAL_ADCEx_Calibration_Start+0x80>
        ADC_STATE_CLR_SET(hadc->State,
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9c:	f023 0312 	bic.w	r3, r3, #18
 8005ea0:	f043 0210 	orr.w	r2, r3, #16
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e01b      	b.n	8005eec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff ffa7 	bl	8005e0c <LL_ADC_IsCalibrationOnGoing>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e2      	bne.n	8005e8a <HAL_ADCEx_Calibration_Start+0x56>
    ADC_STATE_CLR_SET(hadc->State,
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec8:	f023 0303 	bic.w	r3, r3, #3
 8005ecc:	f043 0201 	orr.w	r2, r3, #1
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54
 8005ed4:	e005      	b.n	8005ee2 <HAL_ADCEx_Calibration_Start+0xae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eda:	f043 0210 	orr.w	r2, r3, #16
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	ffffeefd 	.word	0xffffeefd
 8005ef8:	25c3f800 	.word	0x25c3f800

08005efc <HAL_ADCEx_InjectedConvCpltCallback>:
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_ADCEx_EndOfSamplingCallback>:
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <__NVIC_SetPriorityGrouping>:
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f8e:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	60d3      	str	r3, [r2, #12]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	e000ed00 	.word	0xe000ed00
 8005fa4:	05fa0000 	.word	0x05fa0000

08005fa8 <__NVIC_GetPriorityGrouping>:
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fac:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	0a1b      	lsrs	r3, r3, #8
 8005fb2:	f003 0307 	and.w	r3, r3, #7
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	e000ed00 	.word	0xe000ed00

08005fc4 <__NVIC_EnableIRQ>:
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	db0b      	blt.n	8005fee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	f003 021f 	and.w	r2, r3, #31
 8005fdc:	4907      	ldr	r1, [pc, #28]	; (8005ffc <__NVIC_EnableIRQ+0x38>)
 8005fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8005fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	e000e100 	.word	0xe000e100

08006000 <__NVIC_SetPriority>:
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	6039      	str	r1, [r7, #0]
 800600a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800600c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006010:	2b00      	cmp	r3, #0
 8006012:	db0a      	blt.n	800602a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	b2da      	uxtb	r2, r3
 8006018:	490c      	ldr	r1, [pc, #48]	; (800604c <__NVIC_SetPriority+0x4c>)
 800601a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800601e:	0112      	lsls	r2, r2, #4
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	440b      	add	r3, r1
 8006024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006028:	e00a      	b.n	8006040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	4908      	ldr	r1, [pc, #32]	; (8006050 <__NVIC_SetPriority+0x50>)
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	3b04      	subs	r3, #4
 8006038:	0112      	lsls	r2, r2, #4
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	440b      	add	r3, r1
 800603e:	761a      	strb	r2, [r3, #24]
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	e000e100 	.word	0xe000e100
 8006050:	e000ed00 	.word	0xe000ed00

08006054 <NVIC_EncodePriority>:
{
 8006054:	b480      	push	{r7}
 8006056:	b089      	sub	sp, #36	; 0x24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f1c3 0307 	rsb	r3, r3, #7
 800606e:	2b04      	cmp	r3, #4
 8006070:	bf28      	it	cs
 8006072:	2304      	movcs	r3, #4
 8006074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	3304      	adds	r3, #4
 800607a:	2b06      	cmp	r3, #6
 800607c:	d902      	bls.n	8006084 <NVIC_EncodePriority+0x30>
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	3b03      	subs	r3, #3
 8006082:	e000      	b.n	8006086 <NVIC_EncodePriority+0x32>
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006088:	f04f 32ff 	mov.w	r2, #4294967295
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	fa02 f303 	lsl.w	r3, r2, r3
 8006092:	43da      	mvns	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	401a      	ands	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800609c:	f04f 31ff 	mov.w	r1, #4294967295
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	fa01 f303 	lsl.w	r3, r1, r3
 80060a6:	43d9      	mvns	r1, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060ac:	4313      	orrs	r3, r2
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3724      	adds	r7, #36	; 0x24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060cc:	d301      	bcc.n	80060d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ce:	2301      	movs	r3, #1
 80060d0:	e00f      	b.n	80060f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060d2:	4a0a      	ldr	r2, [pc, #40]	; (80060fc <SysTick_Config+0x40>)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060da:	210f      	movs	r1, #15
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	f7ff ff8e 	bl	8006000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <SysTick_Config+0x40>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060ea:	4b04      	ldr	r3, [pc, #16]	; (80060fc <SysTick_Config+0x40>)
 80060ec:	2207      	movs	r2, #7
 80060ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	e000e010 	.word	0xe000e010

08006100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ff29 	bl	8005f60 <__NVIC_SetPriorityGrouping>
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	4603      	mov	r3, r0
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
 8006122:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006124:	f7ff ff40 	bl	8005fa8 <__NVIC_GetPriorityGrouping>
 8006128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	6978      	ldr	r0, [r7, #20]
 8006130:	f7ff ff90 	bl	8006054 <NVIC_EncodePriority>
 8006134:	4602      	mov	r2, r0
 8006136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800613a:	4611      	mov	r1, r2
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff ff5f 	bl	8006000 <__NVIC_SetPriority>
}
 8006142:	bf00      	nop
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	4603      	mov	r3, r0
 8006152:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff ff33 	bl	8005fc4 <__NVIC_EnableIRQ>
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff ffa4 	bl	80060bc <SysTick_Config>
 8006174:	4603      	mov	r3, r0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006184:	f3bf 8f5f 	dmb	sy
}
 8006188:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800618a:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <HAL_MPU_Disable+0x28>)
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	4a06      	ldr	r2, [pc, #24]	; (80061a8 <HAL_MPU_Disable+0x28>)
 8006190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006194:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006196:	4b05      	ldr	r3, [pc, #20]	; (80061ac <HAL_MPU_Disable+0x2c>)
 8006198:	2200      	movs	r2, #0
 800619a:	605a      	str	r2, [r3, #4]
}
 800619c:	bf00      	nop
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	e000ed00 	.word	0xe000ed00
 80061ac:	e000ed90 	.word	0xe000ed90

080061b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80061b8:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <HAL_MPU_Enable+0x38>)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80061c2:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <HAL_MPU_Enable+0x3c>)
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	4a09      	ldr	r2, [pc, #36]	; (80061ec <HAL_MPU_Enable+0x3c>)
 80061c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061cc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80061ce:	f3bf 8f4f 	dsb	sy
}
 80061d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80061d4:	f3bf 8f6f 	isb	sy
}
 80061d8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	e000ed90 	.word	0xe000ed90
 80061ec:	e000ed00 	.word	0xe000ed00

080061f0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	785a      	ldrb	r2, [r3, #1]
 80061fc:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <HAL_MPU_ConfigRegion+0x84>)
 80061fe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d029      	beq.n	800625c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006208:	4a1a      	ldr	r2, [pc, #104]	; (8006274 <HAL_MPU_ConfigRegion+0x84>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7b1b      	ldrb	r3, [r3, #12]
 8006214:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	7adb      	ldrb	r3, [r3, #11]
 800621a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800621c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7a9b      	ldrb	r3, [r3, #10]
 8006222:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006224:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	7b5b      	ldrb	r3, [r3, #13]
 800622a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800622c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	7b9b      	ldrb	r3, [r3, #14]
 8006232:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006234:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	7bdb      	ldrb	r3, [r3, #15]
 800623a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800623c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	7a5b      	ldrb	r3, [r3, #9]
 8006242:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006244:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	7a1b      	ldrb	r3, [r3, #8]
 800624a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800624c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006254:	4a07      	ldr	r2, [pc, #28]	; (8006274 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006256:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006258:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800625a:	e005      	b.n	8006268 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800625c:	4b05      	ldr	r3, [pc, #20]	; (8006274 <HAL_MPU_ConfigRegion+0x84>)
 800625e:	2200      	movs	r2, #0
 8006260:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006262:	4b04      	ldr	r3, [pc, #16]	; (8006274 <HAL_MPU_ConfigRegion+0x84>)
 8006264:	2200      	movs	r2, #0
 8006266:	611a      	str	r2, [r3, #16]
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	e000ed90 	.word	0xe000ed90

08006278 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e014      	b.n	80062b4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	791b      	ldrb	r3, [r3, #4]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d105      	bne.n	80062a0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fd f9da 	bl	8003654 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	795b      	ldrb	r3, [r3, #5]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_DAC_Start+0x16>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e040      	b.n	8006354 <HAL_DAC_Start+0x98>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6819      	ldr	r1, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2201      	movs	r2, #1
 80062ec:	409a      	lsls	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10f      	bne.n	800631c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006306:	2b02      	cmp	r3, #2
 8006308:	d11d      	bne.n	8006346 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	605a      	str	r2, [r3, #4]
 800631a:	e014      	b.n	8006346 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2102      	movs	r1, #2
 800632e:	fa01 f303 	lsl.w	r3, r1, r3
 8006332:	429a      	cmp	r2, r3
 8006334:	d107      	bne.n	8006346 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0202 	orr.w	r2, r2, #2
 8006344:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	3308      	adds	r3, #8
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e004      	b.n	8006394 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4413      	add	r3, r2
 8006390:	3314      	adds	r3, #20
 8006392:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	461a      	mov	r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	795b      	ldrb	r3, [r3, #5]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_DAC_ConfigChannel+0x18>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e12a      	b.n	800661a <HAL_DAC_ConfigChannel+0x26e>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2202      	movs	r2, #2
 80063ce:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b04      	cmp	r3, #4
 80063d6:	f040 8081 	bne.w	80064dc <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80063da:	f7fd fff5 	bl	80043c8 <HAL_GetTick>
 80063de:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d140      	bne.n	8006468 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80063e6:	e018      	b.n	800641a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80063e8:	f7fd ffee 	bl	80043c8 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d911      	bls.n	800641a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fc:	4b89      	ldr	r3, [pc, #548]	; (8006624 <HAL_DAC_ConfigChannel+0x278>)
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f043 0208 	orr.w	r2, r3, #8
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2203      	movs	r2, #3
 8006414:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e0ff      	b.n	800661a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006420:	4b80      	ldr	r3, [pc, #512]	; (8006624 <HAL_DAC_ConfigChannel+0x278>)
 8006422:	4013      	ands	r3, r2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1df      	bne.n	80063e8 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8006428:	2001      	movs	r0, #1
 800642a:	f7fd ffd9 	bl	80043e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	6992      	ldr	r2, [r2, #24]
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
 8006438:	e023      	b.n	8006482 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800643a:	f7fd ffc5 	bl	80043c8 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b01      	cmp	r3, #1
 8006446:	d90f      	bls.n	8006468 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644e:	2b00      	cmp	r3, #0
 8006450:	da0a      	bge.n	8006468 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f043 0208 	orr.w	r2, r3, #8
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2203      	movs	r2, #3
 8006462:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e0d8      	b.n	800661a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	2b00      	cmp	r3, #0
 8006470:	dbe3      	blt.n	800643a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8006472:	2001      	movs	r0, #1
 8006474:	f7fd ffb4 	bl	80043e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	6992      	ldr	r2, [r2, #24]
 8006480:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006492:	fa01 f303 	lsl.w	r3, r1, r3
 8006496:	43db      	mvns	r3, r3
 8006498:	ea02 0103 	and.w	r1, r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	409a      	lsls	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	21ff      	movs	r1, #255	; 0xff
 80064be:	fa01 f303 	lsl.w	r3, r1, r3
 80064c2:	43db      	mvns	r3, r3
 80064c4:	ea02 0103 	and.w	r1, r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f003 0310 	and.w	r3, r3, #16
 80064d2:	409a      	lsls	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d11d      	bne.n	8006520 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	221f      	movs	r2, #31
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	43db      	mvns	r3, r3
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4013      	ands	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006526:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2207      	movs	r2, #7
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	43db      	mvns	r3, r3
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4013      	ands	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d102      	bne.n	800654a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8006544:	2300      	movs	r3, #0
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	e00f      	b.n	800656a <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d102      	bne.n	8006558 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006552:	2301      	movs	r3, #1
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	e008      	b.n	800656a <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006560:	2301      	movs	r3, #1
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	e001      	b.n	800656a <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006566:	2300      	movs	r3, #0
 8006568:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	4313      	orrs	r3, r2
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6819      	ldr	r1, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f003 0310 	and.w	r3, r3, #16
 80065a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	43da      	mvns	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	400a      	ands	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	43db      	mvns	r3, r3
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4013      	ands	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6819      	ldr	r1, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	22c0      	movs	r2, #192	; 0xc0
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	43da      	mvns	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	400a      	ands	r2, r1
 800660a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2201      	movs	r2, #1
 8006610:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20008000 	.word	0x20008000

08006628 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e0cf      	b.n	80067da <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006640:	2b00      	cmp	r3, #0
 8006642:	d106      	bne.n	8006652 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2223      	movs	r2, #35	; 0x23
 8006648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f009 f9d9 	bl	800fa04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006652:	4b64      	ldr	r3, [pc, #400]	; (80067e4 <HAL_ETH_Init+0x1bc>)
 8006654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006658:	4a62      	ldr	r2, [pc, #392]	; (80067e4 <HAL_ETH_Init+0x1bc>)
 800665a:	f043 0302 	orr.w	r3, r3, #2
 800665e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006662:	4b60      	ldr	r3, [pc, #384]	; (80067e4 <HAL_ETH_Init+0x1bc>)
 8006664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	7a1b      	ldrb	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d103      	bne.n	8006680 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006678:	2000      	movs	r0, #0
 800667a:	f7fd fee1 	bl	8004440 <HAL_SYSCFG_ETHInterfaceSelect>
 800667e:	e003      	b.n	8006688 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006680:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006684:	f7fd fedc 	bl	8004440 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006688:	4b57      	ldr	r3, [pc, #348]	; (80067e8 <HAL_ETH_Init+0x1c0>)
 800668a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066a4:	f7fd fe90 	bl	80043c8 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80066aa:	e011      	b.n	80066d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80066ac:	f7fd fe8c 	bl	80043c8 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80066ba:	d909      	bls.n	80066d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2204      	movs	r2, #4
 80066c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	22e0      	movs	r2, #224	; 0xe0
 80066c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e084      	b.n	80067da <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e4      	bne.n	80066ac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fd94 	bl	8007210 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80066e8:	f004 fc64 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 80066ec:	4603      	mov	r3, r0
 80066ee:	4a3f      	ldr	r2, [pc, #252]	; (80067ec <HAL_ETH_Init+0x1c4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	0c9a      	lsrs	r2, r3, #18
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3a01      	subs	r2, #1
 80066fc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 ff7f 	bl	8007604 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006712:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800671e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006722:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	22e0      	movs	r2, #224	; 0xe0
 800673e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e049      	b.n	80067da <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006752:	4b27      	ldr	r3, [pc, #156]	; (80067f0 <HAL_ETH_Init+0x1c8>)
 8006754:	4013      	ands	r3, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6952      	ldr	r2, [r2, #20]
 800675a:	0051      	lsls	r1, r2, #1
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6812      	ldr	r2, [r2, #0]
 8006760:	430b      	orrs	r3, r1
 8006762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006766:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 ffe7 	bl	800773e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 f82d 	bl	80077d0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	3305      	adds	r3, #5
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	021a      	lsls	r2, r3, #8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	3304      	adds	r3, #4
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	4619      	mov	r1, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	3303      	adds	r3, #3
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	061a      	lsls	r2, r3, #24
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	3302      	adds	r3, #2
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	3301      	adds	r3, #1
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2210      	movs	r2, #16
 80067d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	58024400 	.word	0x58024400
 80067e8:	58000400 	.word	0x58000400
 80067ec:	431bde83 	.word	0x431bde83
 80067f0:	ffff8001 	.word	0xffff8001

080067f4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006802:	2b10      	cmp	r3, #16
 8006804:	d153      	bne.n	80068ae <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2223      	movs	r2, #35	; 0x23
 800680a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2204      	movs	r2, #4
 8006812:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f9f6 	bl	8006c06 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0202 	orr.w	r2, r2, #2
 8006828:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006856:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006866:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006872:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006882:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6812      	ldr	r2, [r2, #0]
 8006896:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800689a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800689e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2223      	movs	r2, #35	; 0x23
 80068a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e000      	b.n	80068b0 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
  }
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068c6:	2b23      	cmp	r3, #35	; 0x23
 80068c8:	d13f      	bne.n	800694a <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2223      	movs	r2, #35	; 0x23
 80068ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	f023 0301 	bic.w	r3, r3, #1
 80068e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068ea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006906:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0201 	orr.w	r2, r2, #1
 800692a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0202 	bic.w	r2, r2, #2
 800693c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2210      	movs	r2, #16
 8006942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e000      	b.n	800694c <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
  }
}
 800694c:	4618      	mov	r0, r3
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006970:	f043 0201 	orr.w	r2, r3, #1
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e07f      	b.n	8006a7e <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006984:	2b23      	cmp	r3, #35	; 0x23
 8006986:	d179      	bne.n	8006a7c <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8006988:	2200      	movs	r2, #0
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 ff7d 	bl	800788c <ETH_Prepare_Tx_Descriptors>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699e:	f043 0202 	orr.w	r2, r3, #2
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e068      	b.n	8006a7e <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80069ac:	f3bf 8f4f 	dsb	sy
}
 80069b0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3206      	adds	r2, #6
 80069ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069be:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	629a      	str	r2, [r3, #40]	; 0x28
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d904      	bls.n	80069dc <HAL_ETH_Transmit+0x84>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	1f1a      	subs	r2, r3, #4
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3106      	adds	r1, #6
 80069e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069f0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80069f4:	f7fd fce8 	bl	80043c8 <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80069fa:	e039      	b.n	8006a70 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a04:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d012      	beq.n	8006a36 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a16:	f043 0208 	orr.w	r2, r3, #8
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a28:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e023      	b.n	8006a7e <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d018      	beq.n	8006a70 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a3e:	f7fd fcc3 	bl	80043c8 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d302      	bcc.n	8006a54 <HAL_ETH_Transmit+0xfc>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10d      	bne.n	8006a70 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	f043 0204 	orr.w	r2, r3, #4
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8006a6a:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e006      	b.n	8006a7e <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dbc1      	blt.n	80069fc <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b088      	sub	sp, #32
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa4:	f043 0201 	orr.w	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e0a5      	b.n	8006bfe <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab8:	2b23      	cmp	r3, #35	; 0x23
 8006aba:	d001      	beq.n	8006ac0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e09e      	b.n	8006bfe <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	3212      	adds	r2, #18
 8006acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad6:	f1c3 0304 	rsb	r3, r3, #4
 8006ada:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006adc:	e067      	b.n	8006bae <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d103      	bne.n	8006b0e <HAL_ETH_ReadData+0x88>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d03d      	beq.n	8006b8a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8006b64:	461a      	mov	r2, r3
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f009 f923 	bl	800fdb4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	441a      	add	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2200      	movs	r2, #0
 8006b88:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d902      	bls.n	8006b9c <HAL_ETH_ReadData+0x116>
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	3b04      	subs	r3, #4
 8006b9a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	3212      	adds	r2, #18
 8006ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	3301      	adds	r3, #1
 8006bac:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	db06      	blt.n	8006bc4 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d202      	bcs.n	8006bc4 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d08c      	beq.n	8006ade <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	441a      	add	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f814 	bl	8006c06 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d108      	bne.n	8006bfc <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e000      	b.n	8006bfe <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b088      	sub	sp, #32
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8006c12:	2301      	movs	r3, #1
 8006c14:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c1a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	69fa      	ldr	r2, [r7, #28]
 8006c20:	3212      	adds	r2, #18
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8006c2e:	e03b      	b.n	8006ca8 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d112      	bne.n	8006c5e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f009 f889 	bl	800fd54 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	74fb      	strb	r3, [r7, #19]
 8006c4c:	e007      	b.n	8006c5e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	461a      	mov	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006c5e:	7cfb      	ldrb	r3, [r7, #19]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d021      	beq.n	8006ca8 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8006c64:	f3bf 8f5f 	dmb	sy
}
 8006c68:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006c78:	60da      	str	r2, [r3, #12]
 8006c7a:	e003      	b.n	8006c84 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8006c82:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	3301      	adds	r3, #1
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d902      	bls.n	8006c96 <ETH_UpdateDescriptor+0x90>
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	3b04      	subs	r3, #4
 8006c94:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69fa      	ldr	r2, [r7, #28]
 8006c9a:	3212      	adds	r2, #18
 8006c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca0:	617b      	str	r3, [r7, #20]
      desccount--;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <ETH_UpdateDescriptor+0xae>
 8006cae:	7cfb      	ldrb	r3, [r7, #19]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1bd      	bne.n	8006c30 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d00d      	beq.n	8006cda <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69ba      	ldr	r2, [r7, #24]
 8006cd8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8006cda:	bf00      	nop
 8006cdc:	3720      	adds	r7, #32
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e03e      	b.n	8006d82 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d0c:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	055b      	lsls	r3, r3, #21
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	041b      	lsls	r3, r3, #16
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f043 030c 	orr.w	r3, r3, #12
 8006d30:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f043 0301 	orr.w	r3, r3, #1
 8006d38:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006d44:	f7fd fb40 	bl	80043c8 <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006d4a:	e009      	b.n	8006d60 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006d4c:	f7fd fb3c 	bl	80043c8 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d5a:	d901      	bls.n	8006d60 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e010      	b.n	8006d82 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1ed      	bne.n	8006d4c <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e03c      	b.n	8006e28 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006db6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	055b      	lsls	r3, r3, #21
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	041b      	lsls	r3, r3, #16
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f023 030c 	bic.w	r3, r3, #12
 8006dda:	f043 0304 	orr.w	r3, r3, #4
 8006dde:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <HAL_ETH_WritePHYRegister+0xa4>)
 8006dee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006df2:	4a0f      	ldr	r2, [pc, #60]	; (8006e30 <HAL_ETH_WritePHYRegister+0xa4>)
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006dfa:	f7fd fae5 	bl	80043c8 <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006e00:	e009      	b.n	8006e16 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006e02:	f7fd fae1 	bl	80043c8 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e10:	d901      	bls.n	8006e16 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e008      	b.n	8006e28 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1ed      	bne.n	8006e02 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40028000 	.word	0x40028000

08006e34 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e1c3      	b.n	80071d0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 020c 	and.w	r2, r3, #12
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bf14      	ite	ne
 8006e64:	2301      	movne	r3, #1
 8006e66:	2300      	moveq	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bf0c      	ite	eq
 8006e8e:	2301      	moveq	r3, #1
 8006e90:	2300      	movne	r3, #0
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bf14      	ite	ne
 8006eaa:	2301      	movne	r3, #1
 8006eac:	2300      	moveq	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2301      	moveq	r3, #1
 8006ec6:	2300      	movne	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bf14      	ite	ne
 8006ede:	2301      	movne	r3, #1
 8006ee0:	2300      	moveq	r3, #0
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	bf14      	ite	ne
 8006ef8:	2301      	movne	r3, #1
 8006efa:	2300      	moveq	r3, #0
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	461a      	mov	r2, r3
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bf14      	ite	ne
 8006f2e:	2301      	movne	r3, #1
 8006f30:	2300      	moveq	r3, #0
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bf0c      	ite	eq
 8006f48:	2301      	moveq	r3, #1
 8006f4a:	2300      	movne	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bf0c      	ite	eq
 8006f62:	2301      	moveq	r3, #1
 8006f64:	2300      	movne	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	bf14      	ite	ne
 8006f7c:	2301      	movne	r3, #1
 8006f7e:	2300      	moveq	r3, #0
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	461a      	mov	r2, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bf14      	ite	ne
 8006f96:	2301      	movne	r3, #1
 8006f98:	2300      	moveq	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bf14      	ite	ne
 8006fb0:	2301      	movne	r3, #1
 8006fb2:	2300      	moveq	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bf14      	ite	ne
 8006fca:	2301      	movne	r3, #1
 8006fcc:	2300      	moveq	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bf14      	ite	ne
 8006ff2:	2301      	movne	r3, #1
 8006ff4:	2300      	moveq	r3, #0
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf0c      	ite	eq
 8007028:	2301      	moveq	r3, #1
 800702a:	2300      	movne	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf14      	ite	ne
 8007044:	2301      	movne	r3, #1
 8007046:	2300      	moveq	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8007058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800705c:	2b00      	cmp	r3, #0
 800705e:	bf14      	ite	ne
 8007060:	2301      	movne	r3, #1
 8007062:	2300      	moveq	r3, #0
 8007064:	b2db      	uxtb	r3, r3
 8007066:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8007078:	2b00      	cmp	r3, #0
 800707a:	bf14      	ite	ne
 800707c:	2301      	movne	r3, #1
 800707e:	2300      	moveq	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	0e5b      	lsrs	r3, r3, #25
 8007092:	f003 021f 	and.w	r2, r3, #31
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	bf14      	ite	ne
 80070a8:	2301      	movne	r3, #1
 80070aa:	2300      	moveq	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 020f 	and.w	r2, r3, #15
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	bf14      	ite	ne
 80070d2:	2301      	movne	r3, #1
 80070d4:	2300      	moveq	r3, #0
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	461a      	mov	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bf0c      	ite	eq
 80070ee:	2301      	moveq	r3, #1
 80070f0:	2300      	movne	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007102:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007110:	0c1b      	lsrs	r3, r3, #16
 8007112:	b29a      	uxth	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8007142:	2b00      	cmp	r3, #0
 8007144:	bf14      	ite	ne
 8007146:	2301      	movne	r3, #1
 8007148:	2300      	moveq	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800715c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800716c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	bf14      	ite	ne
 8007184:	2301      	movne	r3, #1
 8007186:	2300      	moveq	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800719a:	f003 0310 	and.w	r3, r3, #16
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bf14      	ite	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	2300      	moveq	r3, #0
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bf0c      	ite	eq
 80071c0:	2301      	moveq	r3, #1
 80071c2:	2300      	movne	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e00b      	b.n	8007208 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f6:	2b10      	cmp	r3, #16
 80071f8:	d105      	bne.n	8007206 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f85f 	bl	80072c0 <ETH_SetMACConfig>

    return HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	e000      	b.n	8007208 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
  }
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007220:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007228:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800722a:	f003 fec3 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800722e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	4a1e      	ldr	r2, [pc, #120]	; (80072ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d908      	bls.n	800724a <HAL_ETH_SetMDIOClockRange+0x3a>
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4a1d      	ldr	r2, [pc, #116]	; (80072b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d804      	bhi.n	800724a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	e027      	b.n	800729a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d908      	bls.n	8007264 <HAL_ETH_SetMDIOClockRange+0x54>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d204      	bcs.n	8007264 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	e01a      	b.n	800729a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	4a13      	ldr	r2, [pc, #76]	; (80072b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d303      	bcc.n	8007274 <HAL_ETH_SetMDIOClockRange+0x64>
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4a12      	ldr	r2, [pc, #72]	; (80072b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d911      	bls.n	8007298 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4a10      	ldr	r2, [pc, #64]	; (80072b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d908      	bls.n	800728e <HAL_ETH_SetMDIOClockRange+0x7e>
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4a0f      	ldr	r2, [pc, #60]	; (80072bc <HAL_ETH_SetMDIOClockRange+0xac>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d804      	bhi.n	800728e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	e005      	b.n	800729a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	e000      	b.n	800729a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007298:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	01312cff 	.word	0x01312cff
 80072b0:	02160ebf 	.word	0x02160ebf
 80072b4:	03938700 	.word	0x03938700
 80072b8:	05f5e0ff 	.word	0x05f5e0ff
 80072bc:	08f0d17f 	.word	0x08f0d17f

080072c0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80072d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	791b      	ldrb	r3, [r3, #4]
 80072d8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80072da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	7b1b      	ldrb	r3, [r3, #12]
 80072e0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80072e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	7b5b      	ldrb	r3, [r3, #13]
 80072e8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80072ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	7b9b      	ldrb	r3, [r3, #14]
 80072f0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80072f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	7bdb      	ldrb	r3, [r3, #15]
 80072f8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80072fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	7c12      	ldrb	r2, [r2, #16]
 8007300:	2a00      	cmp	r2, #0
 8007302:	d102      	bne.n	800730a <ETH_SetMACConfig+0x4a>
 8007304:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007308:	e000      	b.n	800730c <ETH_SetMACConfig+0x4c>
 800730a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800730c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	7c52      	ldrb	r2, [r2, #17]
 8007312:	2a00      	cmp	r2, #0
 8007314:	d102      	bne.n	800731c <ETH_SetMACConfig+0x5c>
 8007316:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800731a:	e000      	b.n	800731e <ETH_SetMACConfig+0x5e>
 800731c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800731e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	7c9b      	ldrb	r3, [r3, #18]
 8007324:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007326:	431a      	orrs	r2, r3
               macconf->Speed |
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800732c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007332:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	7f1b      	ldrb	r3, [r3, #28]
 8007338:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800733a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	7f5b      	ldrb	r3, [r3, #29]
 8007340:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007342:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	7f92      	ldrb	r2, [r2, #30]
 8007348:	2a00      	cmp	r2, #0
 800734a:	d102      	bne.n	8007352 <ETH_SetMACConfig+0x92>
 800734c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007350:	e000      	b.n	8007354 <ETH_SetMACConfig+0x94>
 8007352:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007354:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	7fdb      	ldrb	r3, [r3, #31]
 800735a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800735c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007364:	2a00      	cmp	r2, #0
 8007366:	d102      	bne.n	800736e <ETH_SetMACConfig+0xae>
 8007368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800736c:	e000      	b.n	8007370 <ETH_SetMACConfig+0xb0>
 800736e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007370:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007376:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800737e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007380:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4b56      	ldr	r3, [pc, #344]	; (80074ec <ETH_SetMACConfig+0x22c>)
 8007392:	4013      	ands	r3, r2
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6812      	ldr	r2, [r2, #0]
 8007398:	68f9      	ldr	r1, [r7, #12]
 800739a:	430b      	orrs	r3, r1
 800739c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80073ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80073b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80073be:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80073c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	d102      	bne.n	80073d2 <ETH_SetMACConfig+0x112>
 80073cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80073d0:	e000      	b.n	80073d4 <ETH_SetMACConfig+0x114>
 80073d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80073d4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	4b42      	ldr	r3, [pc, #264]	; (80074f0 <ETH_SetMACConfig+0x230>)
 80073e6:	4013      	ands	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	430b      	orrs	r3, r1
 80073f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	4b3a      	ldr	r3, [pc, #232]	; (80074f4 <ETH_SetMACConfig+0x234>)
 800740a:	4013      	ands	r3, r2
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6812      	ldr	r2, [r2, #0]
 8007410:	68f9      	ldr	r1, [r7, #12]
 8007412:	430b      	orrs	r3, r1
 8007414:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800741c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007422:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800742a:	2a00      	cmp	r2, #0
 800742c:	d101      	bne.n	8007432 <ETH_SetMACConfig+0x172>
 800742e:	2280      	movs	r2, #128	; 0x80
 8007430:	e000      	b.n	8007434 <ETH_SetMACConfig+0x174>
 8007432:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007434:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007446:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800744a:	4013      	ands	r3, r2
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6812      	ldr	r2, [r2, #0]
 8007450:	68f9      	ldr	r1, [r7, #12]
 8007452:	430b      	orrs	r3, r1
 8007454:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800745c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007464:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007472:	f023 0103 	bic.w	r1, r3, #3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	430a      	orrs	r2, r1
 800747e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800748a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	d101      	bne.n	80074ae <ETH_SetMACConfig+0x1ee>
 80074aa:	2240      	movs	r2, #64	; 0x40
 80074ac:	e000      	b.n	80074b0 <ETH_SetMACConfig+0x1f0>
 80074ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80074b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80074b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80074ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80074c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80074d0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	430a      	orrs	r2, r1
 80074dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80074e0:	bf00      	nop
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	00048083 	.word	0x00048083
 80074f0:	c0f88000 	.word	0xc0f88000
 80074f4:	fffffef0 	.word	0xfffffef0

080074f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	4b38      	ldr	r3, [pc, #224]	; (80075f0 <ETH_SetDMAConfig+0xf8>)
 800750e:	4013      	ands	r3, r2
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	6811      	ldr	r1, [r2, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	430b      	orrs	r3, r1
 800751a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800751e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	791b      	ldrb	r3, [r3, #4]
 8007524:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800752a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	7b1b      	ldrb	r3, [r3, #12]
 8007530:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	4b2c      	ldr	r3, [pc, #176]	; (80075f4 <ETH_SetDMAConfig+0xfc>)
 8007542:	4013      	ands	r3, r2
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	68f9      	ldr	r1, [r7, #12]
 800754a:	430b      	orrs	r3, r1
 800754c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007550:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	7b5b      	ldrb	r3, [r3, #13]
 8007556:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007568:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800756c:	4b22      	ldr	r3, [pc, #136]	; (80075f8 <ETH_SetDMAConfig+0x100>)
 800756e:	4013      	ands	r3, r2
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6812      	ldr	r2, [r2, #0]
 8007574:	68f9      	ldr	r1, [r7, #12]
 8007576:	430b      	orrs	r3, r1
 8007578:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800757c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	7d1b      	ldrb	r3, [r3, #20]
 8007588:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800758a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	7f5b      	ldrb	r3, [r3, #29]
 8007590:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80075a2:	4b16      	ldr	r3, [pc, #88]	; (80075fc <ETH_SetDMAConfig+0x104>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	430b      	orrs	r3, r1
 80075ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075b2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	7f1b      	ldrb	r3, [r3, #28]
 80075ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80075d0:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <ETH_SetDMAConfig+0x108>)
 80075d2:	4013      	ands	r3, r2
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	430b      	orrs	r3, r1
 80075dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075e0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	ffff87fd 	.word	0xffff87fd
 80075f4:	ffff2ffe 	.word	0xffff2ffe
 80075f8:	fffec000 	.word	0xfffec000
 80075fc:	ffc0efef 	.word	0xffc0efef
 8007600:	7fc0ffff 	.word	0x7fc0ffff

08007604 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b0a4      	sub	sp, #144	; 0x90
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007612:	2300      	movs	r3, #0
 8007614:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007616:	2300      	movs	r3, #0
 8007618:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800761c:	2300      	movs	r3, #0
 800761e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800762e:	2301      	movs	r3, #1
 8007630:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007634:	2300      	movs	r3, #0
 8007636:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007644:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007646:	2300      	movs	r3, #0
 8007648:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800764c:	2300      	movs	r3, #0
 800764e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007650:	2300      	movs	r3, #0
 8007652:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800765c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007660:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007662:	2300      	movs	r3, #0
 8007664:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007668:	2300      	movs	r3, #0
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800766c:	2301      	movs	r3, #1
 800766e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007672:	2300      	movs	r3, #0
 8007674:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800767e:	2300      	movs	r3, #0
 8007680:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007682:	2300      	movs	r3, #0
 8007684:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007686:	2300      	movs	r3, #0
 8007688:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800768a:	2300      	movs	r3, #0
 800768c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007690:	2300      	movs	r3, #0
 8007692:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800769c:	2320      	movs	r3, #32
 800769e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80076ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80076b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076b8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80076c0:	2302      	movs	r3, #2
 80076c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80076de:	2300      	movs	r3, #0
 80076e0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80076e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fde6 	bl	80072c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80076f8:	2301      	movs	r3, #1
 80076fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007700:	2300      	movs	r3, #0
 8007702:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007706:	2300      	movs	r3, #0
 8007708:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800770a:	2300      	movs	r3, #0
 800770c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800770e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007712:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007714:	2300      	movs	r3, #0
 8007716:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800771c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800771e:	2300      	movs	r3, #0
 8007720:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007724:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800772a:	f107 0308 	add.w	r3, r7, #8
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff fee1 	bl	80074f8 <ETH_SetDMAConfig>
}
 8007736:	bf00      	nop
 8007738:	3790      	adds	r7, #144	; 0x90
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	e01d      	b.n	8007788 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68d9      	ldr	r1, [r3, #12]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4613      	mov	r3, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	4413      	add	r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	440b      	add	r3, r1
 800775c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2200      	movs	r2, #0
 800776e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	3206      	adds	r2, #6
 800777e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b03      	cmp	r3, #3
 800778c:	d9de      	bls.n	800774c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779c:	461a      	mov	r2, r3
 800779e:	2303      	movs	r3, #3
 80077a0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e023      	b.n	8007826 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6919      	ldr	r1, [r3, #16]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4613      	mov	r3, r2
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	4413      	add	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	440b      	add	r3, r1
 80077ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2200      	movs	r2, #0
 80077fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2200      	movs	r2, #0
 8007806:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2200      	movs	r2, #0
 8007812:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	3212      	adds	r2, #18
 800781c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3301      	adds	r3, #1
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d9d8      	bls.n	80077de <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007852:	461a      	mov	r2, r3
 8007854:	2303      	movs	r3, #3
 8007856:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007866:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800787e:	bf00      	nop
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
	...

0800788c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800788c:	b480      	push	{r7}
 800788e:	b08d      	sub	sp, #52	; 0x34
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3318      	adds	r3, #24
 800789c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ce:	d007      	beq.n	80078e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	3304      	adds	r3, #4
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80078e0:	2302      	movs	r3, #2
 80078e2:	e259      	b.n	8007d98 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d044      	beq.n	800797a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	4b75      	ldr	r3, [pc, #468]	; (8007acc <ETH_Prepare_Tx_Descriptors+0x240>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078fc:	431a      	orrs	r2, r3
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800791c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	d027      	beq.n	800797a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	b29a      	uxth	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	041b      	lsls	r3, r3, #16
 8007936:	431a      	orrs	r2, r3
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	431a      	orrs	r2, r3
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007968:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007978:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00e      	beq.n	80079a4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	689a      	ldr	r2, [r3, #8]
 800798a:	4b51      	ldr	r3, [pc, #324]	; (8007ad0 <ETH_Prepare_Tx_Descriptors+0x244>)
 800798c:	4013      	ands	r3, r2
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	6992      	ldr	r2, [r2, #24]
 8007992:	431a      	orrs	r2, r3
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d105      	bne.n	80079bc <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d036      	beq.n	8007a2a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80079c8:	f3bf 8f5f 	dmb	sy
}
 80079cc:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	3301      	adds	r3, #1
 80079de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d902      	bls.n	80079ec <ETH_Prepare_Tx_Descriptors+0x160>
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	3b04      	subs	r3, #4
 80079ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f4:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	3301      	adds	r3, #1
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a08:	d10f      	bne.n	8007a2a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8007a14:	f3bf 8f5f 	dmb	sy
}
 8007a18:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8007a26:	2302      	movs	r3, #2
 8007a28:	e1b6      	b.n	8007d98 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	461a      	mov	r2, r3
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	4b24      	ldr	r3, [pc, #144]	; (8007ad0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	6852      	ldr	r2, [r2, #4]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d012      	beq.n	8007a7a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	4b1a      	ldr	r3, [pc, #104]	; (8007ad4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	6852      	ldr	r2, [r2, #4]
 8007a70:	0412      	lsls	r2, r2, #16
 8007a72:	431a      	orrs	r2, r3
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	609a      	str	r2, [r3, #8]
 8007a78:	e008      	b.n	8007a8c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	6a3a      	ldr	r2, [r7, #32]
 8007a8a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d021      	beq.n	8007adc <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	04db      	lsls	r3, r3, #19
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	69d2      	ldr	r2, [r2, #28]
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	60da      	str	r2, [r3, #12]
 8007aca:	e02e      	b.n	8007b2a <ETH_Prepare_Tx_Descriptors+0x29e>
 8007acc:	ffff0000 	.word	0xffff0000
 8007ad0:	ffffc000 	.word	0xffffc000
 8007ad4:	c000ffff 	.word	0xc000ffff
 8007ad8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	4b7b      	ldr	r3, [pc, #492]	; (8007cd0 <ETH_Prepare_Tx_Descriptors+0x444>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	6852      	ldr	r2, [r2, #4]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	431a      	orrs	r2, r3
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0304 	and.w	r3, r3, #4
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d008      	beq.n	8007b48 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b42:	431a      	orrs	r2, r3
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007b60:	f3bf 8f5f 	dmb	sy
}
 8007b64:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80da 	beq.w	8007d34 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8007b92:	e0cf      	b.n	8007d34 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d902      	bls.n	8007bb2 <ETH_Prepare_Tx_Descriptors+0x326>
 8007bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bae:	3b04      	subs	r3, #4
 8007bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bba:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bd4:	d007      	beq.n	8007be6 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	3304      	adds	r3, #4
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d029      	beq.n	8007c3a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf2:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bf8:	e019      	b.n	8007c2e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8007bfa:	f3bf 8f5f 	dmb	sy
}
 8007bfe:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	3301      	adds	r3, #1
 8007c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d902      	bls.n	8007c1e <ETH_Prepare_Tx_Descriptors+0x392>
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	3b04      	subs	r3, #4
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c26:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d3e1      	bcc.n	8007bfa <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8007c36:	2302      	movs	r3, #2
 8007c38:	e0ae      	b.n	8007d98 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	4b1f      	ldr	r3, [pc, #124]	; (8007cd4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8007c56:	4013      	ands	r3, r2
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	6852      	ldr	r2, [r2, #4]
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d012      	beq.n	8007c90 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	4b16      	ldr	r3, [pc, #88]	; (8007cd8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007c80:	4013      	ands	r3, r2
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	6852      	ldr	r2, [r2, #4]
 8007c86:	0412      	lsls	r2, r2, #16
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	609a      	str	r2, [r3, #8]
 8007c8e:	e008      	b.n	8007ca2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	2200      	movs	r2, #0
 8007c94:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	4b0f      	ldr	r3, [pc, #60]	; (8007cd8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	6a3a      	ldr	r2, [r7, #32]
 8007ca0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0310 	and.w	r3, r3, #16
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d018      	beq.n	8007ce0 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <ETH_Prepare_Tx_Descriptors+0x450>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	69d2      	ldr	r2, [r2, #28]
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	60da      	str	r2, [r3, #12]
 8007ccc:	e020      	b.n	8007d10 <ETH_Prepare_Tx_Descriptors+0x484>
 8007cce:	bf00      	nop
 8007cd0:	ffff8000 	.word	0xffff8000
 8007cd4:	ffffc000 	.word	0xffffc000
 8007cd8:	c000ffff 	.word	0xc000ffff
 8007cdc:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	4b2f      	ldr	r3, [pc, #188]	; (8007da4 <ETH_Prepare_Tx_Descriptors+0x518>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	6852      	ldr	r2, [r2, #4]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d008      	beq.n	8007d10 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	3301      	adds	r3, #1
 8007d14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8007d16:	f3bf 8f5f 	dmb	sy
}
 8007d1a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f47f af2b 	bne.w	8007b94 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d006      	beq.n	8007d52 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	609a      	str	r2, [r3, #8]
 8007d50:	e005      	b.n	8007d5e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d6e:	6979      	ldr	r1, [r7, #20]
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	3304      	adds	r3, #4
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d7e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d80:	b672      	cpsid	i
}
 8007d82:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007d92:	b662      	cpsie	i
}
 8007d94:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3734      	adds	r7, #52	; 0x34
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	ffff8000 	.word	0xffff8000

08007da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b089      	sub	sp, #36	; 0x24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007db6:	4b89      	ldr	r3, [pc, #548]	; (8007fdc <HAL_GPIO_Init+0x234>)
 8007db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dba:	e194      	b.n	80080e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc8:	4013      	ands	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8186 	beq.w	80080e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d005      	beq.n	8007dec <HAL_GPIO_Init+0x44>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d130      	bne.n	8007e4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	2203      	movs	r2, #3
 8007df8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	4013      	ands	r3, r2
 8007e02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e22:	2201      	movs	r2, #1
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	43db      	mvns	r3, r3
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	091b      	lsrs	r3, r3, #4
 8007e38:	f003 0201 	and.w	r2, r3, #1
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d017      	beq.n	8007e8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	2203      	movs	r2, #3
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d123      	bne.n	8007ede <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	08da      	lsrs	r2, r3, #3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3208      	adds	r2, #8
 8007e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	220f      	movs	r2, #15
 8007eae:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb2:	43db      	mvns	r3, r3
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	08da      	lsrs	r2, r3, #3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3208      	adds	r2, #8
 8007ed8:	69b9      	ldr	r1, [r7, #24]
 8007eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	2203      	movs	r2, #3
 8007eea:	fa02 f303 	lsl.w	r3, r2, r3
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f003 0203 	and.w	r2, r3, #3
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 80e0 	beq.w	80080e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f20:	4b2f      	ldr	r3, [pc, #188]	; (8007fe0 <HAL_GPIO_Init+0x238>)
 8007f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f26:	4a2e      	ldr	r2, [pc, #184]	; (8007fe0 <HAL_GPIO_Init+0x238>)
 8007f28:	f043 0302 	orr.w	r3, r3, #2
 8007f2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f30:	4b2b      	ldr	r3, [pc, #172]	; (8007fe0 <HAL_GPIO_Init+0x238>)
 8007f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f3e:	4a29      	ldr	r2, [pc, #164]	; (8007fe4 <HAL_GPIO_Init+0x23c>)
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	089b      	lsrs	r3, r3, #2
 8007f44:	3302      	adds	r3, #2
 8007f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	220f      	movs	r2, #15
 8007f56:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5a:	43db      	mvns	r3, r3
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a20      	ldr	r2, [pc, #128]	; (8007fe8 <HAL_GPIO_Init+0x240>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d052      	beq.n	8008010 <HAL_GPIO_Init+0x268>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a1f      	ldr	r2, [pc, #124]	; (8007fec <HAL_GPIO_Init+0x244>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d031      	beq.n	8007fd6 <HAL_GPIO_Init+0x22e>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a1e      	ldr	r2, [pc, #120]	; (8007ff0 <HAL_GPIO_Init+0x248>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d02b      	beq.n	8007fd2 <HAL_GPIO_Init+0x22a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <HAL_GPIO_Init+0x24c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d025      	beq.n	8007fce <HAL_GPIO_Init+0x226>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <HAL_GPIO_Init+0x250>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d01f      	beq.n	8007fca <HAL_GPIO_Init+0x222>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a1b      	ldr	r2, [pc, #108]	; (8007ffc <HAL_GPIO_Init+0x254>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d019      	beq.n	8007fc6 <HAL_GPIO_Init+0x21e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a1a      	ldr	r2, [pc, #104]	; (8008000 <HAL_GPIO_Init+0x258>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d013      	beq.n	8007fc2 <HAL_GPIO_Init+0x21a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a19      	ldr	r2, [pc, #100]	; (8008004 <HAL_GPIO_Init+0x25c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00d      	beq.n	8007fbe <HAL_GPIO_Init+0x216>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a18      	ldr	r2, [pc, #96]	; (8008008 <HAL_GPIO_Init+0x260>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d007      	beq.n	8007fba <HAL_GPIO_Init+0x212>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a17      	ldr	r2, [pc, #92]	; (800800c <HAL_GPIO_Init+0x264>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d101      	bne.n	8007fb6 <HAL_GPIO_Init+0x20e>
 8007fb2:	2309      	movs	r3, #9
 8007fb4:	e02d      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fb6:	230a      	movs	r3, #10
 8007fb8:	e02b      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fba:	2308      	movs	r3, #8
 8007fbc:	e029      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fbe:	2307      	movs	r3, #7
 8007fc0:	e027      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fc2:	2306      	movs	r3, #6
 8007fc4:	e025      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fc6:	2305      	movs	r3, #5
 8007fc8:	e023      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fca:	2304      	movs	r3, #4
 8007fcc:	e021      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e01f      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e01d      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e01b      	b.n	8008012 <HAL_GPIO_Init+0x26a>
 8007fda:	bf00      	nop
 8007fdc:	58000080 	.word	0x58000080
 8007fe0:	58024400 	.word	0x58024400
 8007fe4:	58000400 	.word	0x58000400
 8007fe8:	58020000 	.word	0x58020000
 8007fec:	58020400 	.word	0x58020400
 8007ff0:	58020800 	.word	0x58020800
 8007ff4:	58020c00 	.word	0x58020c00
 8007ff8:	58021000 	.word	0x58021000
 8007ffc:	58021400 	.word	0x58021400
 8008000:	58021800 	.word	0x58021800
 8008004:	58021c00 	.word	0x58021c00
 8008008:	58022000 	.word	0x58022000
 800800c:	58022400 	.word	0x58022400
 8008010:	2300      	movs	r3, #0
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	f002 0203 	and.w	r2, r2, #3
 8008018:	0092      	lsls	r2, r2, #2
 800801a:	4093      	lsls	r3, r2
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	4313      	orrs	r3, r2
 8008020:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008022:	4938      	ldr	r1, [pc, #224]	; (8008104 <HAL_GPIO_Init+0x35c>)
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	089b      	lsrs	r3, r3, #2
 8008028:	3302      	adds	r3, #2
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	43db      	mvns	r3, r3
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	4013      	ands	r3, r2
 8008040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800805e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	43db      	mvns	r3, r3
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	4013      	ands	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	4313      	orrs	r3, r2
 8008082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	43db      	mvns	r3, r3
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	4013      	ands	r3, r2
 800809a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	43db      	mvns	r3, r3
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	4013      	ands	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	3301      	adds	r3, #1
 80080e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	fa22 f303 	lsr.w	r3, r2, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f47f ae63 	bne.w	8007dbc <HAL_GPIO_Init+0x14>
  }
}
 80080f6:	bf00      	nop
 80080f8:	bf00      	nop
 80080fa:	3724      	adds	r7, #36	; 0x24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	58000400 	.word	0x58000400

08008108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	887b      	ldrh	r3, [r7, #2]
 800811a:	4013      	ands	r3, r2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008120:	2301      	movs	r3, #1
 8008122:	73fb      	strb	r3, [r7, #15]
 8008124:	e001      	b.n	800812a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800812a:	7bfb      	ldrb	r3, [r7, #15]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	807b      	strh	r3, [r7, #2]
 8008144:	4613      	mov	r3, r2
 8008146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008148:	787b      	ldrb	r3, [r7, #1]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800814e:	887a      	ldrh	r2, [r7, #2]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008154:	e003      	b.n	800815e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008156:	887b      	ldrh	r3, [r7, #2]
 8008158:	041a      	lsls	r2, r3, #16
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	619a      	str	r2, [r3, #24]
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800816a:	b480      	push	{r7}
 800816c:	b085      	sub	sp, #20
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800817c:	887a      	ldrh	r2, [r7, #2]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4013      	ands	r3, r2
 8008182:	041a      	lsls	r2, r3, #16
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	43d9      	mvns	r1, r3
 8008188:	887b      	ldrh	r3, [r7, #2]
 800818a:	400b      	ands	r3, r1
 800818c:	431a      	orrs	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	619a      	str	r2, [r3, #24]
}
 8008192:	bf00      	nop
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	4603      	mov	r3, r0
 80081a6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80081a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	4013      	ands	r3, r2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d008      	beq.n	80081ca <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80081b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80081c2:	88fb      	ldrh	r3, [r7, #6]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f804 	bl	80081d2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	4603      	mov	r3, r0
 80081da:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e0bd      	b.n	8008376 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2202      	movs	r2, #2
 80081fe:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d031      	beq.n	80082a2 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a4f      	ldr	r2, [pc, #316]	; (8008380 <HAL_HRTIM_Init+0x198>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d10e      	bne.n	8008266 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8008248:	4b4e      	ldr	r3, [pc, #312]	; (8008384 <HAL_HRTIM_Init+0x19c>)
 800824a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800824e:	4a4d      	ldr	r2, [pc, #308]	; (8008384 <HAL_HRTIM_Init+0x19c>)
 8008250:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008254:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008258:	4b4a      	ldr	r3, [pc, #296]	; (8008384 <HAL_HRTIM_Init+0x19c>)
 800825a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800825e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008274:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800828a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7fb fa1c 	bl	80036e0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d012      	beq.n	80082da <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80082ea:	2300      	movs	r3, #0
 80082ec:	75fb      	strb	r3, [r7, #23]
 80082ee:	e03e      	b.n	800836e <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80082f0:	7dfa      	ldrb	r2, [r7, #23]
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	1a9b      	subs	r3, r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	3318      	adds	r3, #24
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8008304:	7dfa      	ldrb	r2, [r7, #23]
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	1a9b      	subs	r3, r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	331c      	adds	r3, #28
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8008318:	7dfa      	ldrb	r2, [r7, #23]
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	3320      	adds	r3, #32
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800832c:	7dfa      	ldrb	r2, [r7, #23]
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	4613      	mov	r3, r2
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	1a9b      	subs	r3, r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	3324      	adds	r3, #36	; 0x24
 800833c:	2200      	movs	r2, #0
 800833e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8008340:	7dfa      	ldrb	r2, [r7, #23]
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	4613      	mov	r3, r2
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	1a9b      	subs	r3, r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	3328      	adds	r3, #40	; 0x28
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8008354:	7dfa      	ldrb	r2, [r7, #23]
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	4613      	mov	r3, r2
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	1a9b      	subs	r3, r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	440b      	add	r3, r1
 8008362:	3330      	adds	r3, #48	; 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	3301      	adds	r3, #1
 800836c:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	2b05      	cmp	r3, #5
 8008372:	d9bd      	bls.n	80082f0 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	40017400 	.word	0x40017400
 8008384:	58024400 	.word	0x58024400

08008388 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b02      	cmp	r3, #2
 800839e:	d101      	bne.n	80083a4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
 80083a2:	e015      	b.n	80083d0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b05      	cmp	r3, #5
 80083b0:	d104      	bne.n	80083bc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fc4d 	bl	8008c54 <HRTIM_MasterBase_Config>
 80083ba:	e004      	b.n	80083c6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 fc76 	bl	8008cb2 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d101      	bne.n	80083f4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80083f0:	2302      	movs	r3, #2
 80083f2:	e05f      	b.n	80084b4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80083fe:	2302      	movs	r3, #2
 8008400:	e058      	b.n	80084b4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2202      	movs	r2, #2
 800840e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b05      	cmp	r3, #5
 8008416:	d104      	bne.n	8008422 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 fc89 	bl	8008d32 <HRTIM_MasterWaveform_Config>
 8008420:	e004      	b.n	800842c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 fcea 	bl	8008e00 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6819      	ldr	r1, [r3, #0]
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	4613      	mov	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4403      	add	r3, r0
 800843e:	3320      	adds	r3, #32
 8008440:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6859      	ldr	r1, [r3, #4]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	1a9b      	subs	r3, r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4403      	add	r3, r0
 8008454:	3324      	adds	r3, #36	; 0x24
 8008456:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6899      	ldr	r1, [r3, #8]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	4613      	mov	r3, r2
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	1a9b      	subs	r3, r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4403      	add	r3, r0
 800846a:	3328      	adds	r3, #40	; 0x28
 800846c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68d9      	ldr	r1, [r3, #12]
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	1a9b      	subs	r3, r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4403      	add	r3, r0
 8008480:	332c      	adds	r3, #44	; 0x2c
 8008482:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6919      	ldr	r1, [r3, #16]
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4613      	mov	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4403      	add	r3, r0
 8008496:	3330      	adds	r3, #48	; 0x30
 8008498:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fec7 	bl	8009230 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d101      	bne.n	80084da <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80084d6:	2302      	movs	r3, #2
 80084d8:	e157      	b.n	800878a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d101      	bne.n	80084e8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80084e4:	2302      	movs	r3, #2
 80084e6:	e150      	b.n	800878a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2202      	movs	r2, #2
 80084f4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	d140      	bne.n	8008580 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3b01      	subs	r3, #1
 8008502:	2b07      	cmp	r3, #7
 8008504:	d82a      	bhi.n	800855c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8008506:	a201      	add	r2, pc, #4	; (adr r2, 800850c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8008508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850c:	0800852d 	.word	0x0800852d
 8008510:	08008539 	.word	0x08008539
 8008514:	0800855d 	.word	0x0800855d
 8008518:	08008545 	.word	0x08008545
 800851c:	0800855d 	.word	0x0800855d
 8008520:	0800855d 	.word	0x0800855d
 8008524:	0800855d 	.word	0x0800855d
 8008528:	08008551 	.word	0x08008551
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	61da      	str	r2, [r3, #28]
        break;
 8008536:	e01a      	b.n	800856e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8008542:	e014      	b.n	800856e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800854e:	e00e      	b.n	800856e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	6812      	ldr	r2, [r2, #0]
 8008558:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800855a:	e008      	b.n	800856e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2207      	movs	r2, #7
 8008560:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 800856c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b07      	cmp	r3, #7
 8008578:	f040 80fe 	bne.w	8008778 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e104      	b.n	800878a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3b01      	subs	r3, #1
 8008584:	2b07      	cmp	r3, #7
 8008586:	f200 80e3 	bhi.w	8008750 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085b1 	.word	0x080085b1
 8008594:	080085c5 	.word	0x080085c5
 8008598:	08008751 	.word	0x08008751
 800859c:	08008681 	.word	0x08008681
 80085a0:	08008751 	.word	0x08008751
 80085a4:	08008751 	.word	0x08008751
 80085a8:	08008751 	.word	0x08008751
 80085ac:	08008695 	.word	0x08008695
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6819      	ldr	r1, [r3, #0]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	01db      	lsls	r3, r3, #7
 80085bc:	440b      	add	r3, r1
 80085be:	339c      	adds	r3, #156	; 0x9c
 80085c0:	601a      	str	r2, [r3, #0]
        break;
 80085c2:	e0d1      	b.n	8008768 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6819      	ldr	r1, [r3, #0]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	01db      	lsls	r3, r3, #7
 80085d0:	440b      	add	r3, r1
 80085d2:	33a4      	adds	r3, #164	; 0xa4
 80085d4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d03f      	beq.n	800865e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	3301      	adds	r3, #1
 80085e6:	01db      	lsls	r3, r3, #7
 80085e8:	4413      	add	r3, r2
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	6811      	ldr	r1, [r2, #0]
 80085f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	3301      	adds	r3, #1
 80085f8:	01db      	lsls	r3, r3, #7
 80085fa:	440b      	add	r3, r1
 80085fc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	3301      	adds	r3, #1
 8008606:	01db      	lsls	r3, r3, #7
 8008608:	4413      	add	r3, r2
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	68f9      	ldr	r1, [r7, #12]
 8008612:	6809      	ldr	r1, [r1, #0]
 8008614:	431a      	orrs	r2, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	3301      	adds	r3, #1
 800861a:	01db      	lsls	r3, r3, #7
 800861c:	440b      	add	r3, r1
 800861e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008628:	d109      	bne.n	800863e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6819      	ldr	r1, [r3, #0]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	01db      	lsls	r3, r3, #7
 8008636:	440b      	add	r3, r1
 8008638:	339c      	adds	r3, #156	; 0x9c
 800863a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800863c:	e091      	b.n	8008762 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008646:	f040 808c 	bne.w	8008762 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6819      	ldr	r1, [r3, #0]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	689a      	ldr	r2, [r3, #8]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	01db      	lsls	r3, r3, #7
 8008656:	440b      	add	r3, r1
 8008658:	33a8      	adds	r3, #168	; 0xa8
 800865a:	601a      	str	r2, [r3, #0]
         break;
 800865c:	e081      	b.n	8008762 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	3301      	adds	r3, #1
 8008666:	01db      	lsls	r3, r3, #7
 8008668:	4413      	add	r3, r2
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	6811      	ldr	r1, [r2, #0]
 8008670:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	3301      	adds	r3, #1
 8008678:	01db      	lsls	r3, r3, #7
 800867a:	440b      	add	r3, r1
 800867c:	601a      	str	r2, [r3, #0]
         break;
 800867e:	e070      	b.n	8008762 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6819      	ldr	r1, [r3, #0]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	01db      	lsls	r3, r3, #7
 800868c:	440b      	add	r3, r1
 800868e:	33a8      	adds	r3, #168	; 0xa8
 8008690:	601a      	str	r2, [r3, #0]
        break;
 8008692:	e069      	b.n	8008768 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6819      	ldr	r1, [r3, #0]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	01db      	lsls	r3, r3, #7
 80086a0:	440b      	add	r3, r1
 80086a2:	33ac      	adds	r3, #172	; 0xac
 80086a4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d03f      	beq.n	800872e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	3301      	adds	r3, #1
 80086b6:	01db      	lsls	r3, r3, #7
 80086b8:	4413      	add	r3, r2
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	6811      	ldr	r1, [r2, #0]
 80086c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	3301      	adds	r3, #1
 80086c8:	01db      	lsls	r3, r3, #7
 80086ca:	440b      	add	r3, r1
 80086cc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3301      	adds	r3, #1
 80086d6:	01db      	lsls	r3, r3, #7
 80086d8:	4413      	add	r3, r2
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	6809      	ldr	r1, [r1, #0]
 80086e6:	431a      	orrs	r2, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	3301      	adds	r3, #1
 80086ec:	01db      	lsls	r3, r3, #7
 80086ee:	440b      	add	r3, r1
 80086f0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086fa:	d109      	bne.n	8008710 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6819      	ldr	r1, [r3, #0]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	01db      	lsls	r3, r3, #7
 8008708:	440b      	add	r3, r1
 800870a:	339c      	adds	r3, #156	; 0x9c
 800870c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800870e:	e02a      	b.n	8008766 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008718:	d125      	bne.n	8008766 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6819      	ldr	r1, [r3, #0]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	01db      	lsls	r3, r3, #7
 8008726:	440b      	add	r3, r1
 8008728:	33a8      	adds	r3, #168	; 0xa8
 800872a:	601a      	str	r2, [r3, #0]
         break;
 800872c:	e01b      	b.n	8008766 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	3301      	adds	r3, #1
 8008736:	01db      	lsls	r3, r3, #7
 8008738:	4413      	add	r3, r2
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	6811      	ldr	r1, [r2, #0]
 8008740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	3301      	adds	r3, #1
 8008748:	01db      	lsls	r3, r3, #7
 800874a:	440b      	add	r3, r1
 800874c:	601a      	str	r2, [r3, #0]
         break;
 800874e:	e00a      	b.n	8008766 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2207      	movs	r2, #7
 8008754:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8008760:	e002      	b.n	8008768 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008762:	bf00      	nop
 8008764:	e000      	b.n	8008768 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008766:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b07      	cmp	r3, #7
 8008772:	d101      	bne.n	8008778 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e008      	b.n	800878a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop

08008798 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d101      	bne.n	80087b6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80087b2:	2302      	movs	r3, #2
 80087b4:	e01d      	b.n	80087f2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e016      	b.n	80087f2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fc50 	bl	8009080 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <HAL_HRTIM_WaveformOutputStart+0x18>
 800880e:	2302      	movs	r3, #2
 8008810:	e01a      	b.n	8008848 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2202      	movs	r2, #2
 800881e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008864:	2b01      	cmp	r3, #1
 8008866:	d101      	bne.n	800886c <HAL_HRTIM_WaveformOutputStop+0x18>
 8008868:	2302      	movs	r3, #2
 800886a:	e01a      	b.n	80088a2 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d101      	bne.n	80088c8 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 80088c4:	2302      	movs	r3, #2
 80088c6:	e05b      	b.n	8008980 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68d9      	ldr	r1, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800890c:	2300      	movs	r3, #0
 800890e:	73fb      	strb	r3, [r7, #15]
 8008910:	e022      	b.n	8008958 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	4a1d      	ldr	r2, [pc, #116]	; (800898c <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8008916:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	4013      	ands	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d017      	beq.n	8008952 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	01db      	lsls	r3, r3, #7
 800892a:	4413      	add	r3, r2
 800892c:	338c      	adds	r3, #140	; 0x8c
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	7bfa      	ldrb	r2, [r7, #15]
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	3320      	adds	r3, #32
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6819      	ldr	r1, [r3, #0]
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	4302      	orrs	r2, r0
 800894a:	01db      	lsls	r3, r3, #7
 800894c:	440b      	add	r3, r1
 800894e:	338c      	adds	r3, #140	; 0x8c
 8008950:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	3301      	adds	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	2b04      	cmp	r3, #4
 800895c:	d9d9      	bls.n	8008912 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6819      	ldr	r1, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 800897e:	2300      	movs	r3, #0
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	2000014c 	.word	0x2000014c

08008990 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 800899a:	f240 137f 	movw	r3, #383	; 0x17f
 800899e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d101      	bne.n	80089ae <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 80089aa:	2302      	movs	r3, #2
 80089ac:	e065      	b.n	8008a7a <HAL_HRTIM_WaveformCountStop_IT+0xea>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	43da      	mvns	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	400a      	ands	r2, r1
 80089d2:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68d9      	ldr	r1, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089ec:	43da      	mvns	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	400a      	ands	r2, r1
 80089f4:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]
 80089fa:	e023      	b.n	8008a44 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	4a22      	ldr	r2, [pc, #136]	; (8008a88 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8008a00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	4013      	ands	r3, r2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d018      	beq.n	8008a3e <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	01db      	lsls	r3, r3, #7
 8008a14:	4413      	add	r3, r2
 8008a16:	338c      	adds	r3, #140	; 0x8c
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	7bfa      	ldrb	r2, [r7, #15]
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	1a9b      	subs	r3, r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	440b      	add	r3, r1
 8008a28:	3320      	adds	r3, #32
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	43da      	mvns	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6819      	ldr	r1, [r3, #0]
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	4002      	ands	r2, r0
 8008a36:	01db      	lsls	r3, r3, #7
 8008a38:	440b      	add	r3, r1
 8008a3a:	338c      	adds	r3, #140	; 0x8c
 8008a3c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	3301      	adds	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d9d8      	bls.n	80089fc <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	60bb      	str	r3, [r7, #8]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1f9      	bne.n	8008a4a <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6819      	ldr	r1, [r3, #0]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	43da      	mvns	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	400a      	ands	r2, r1
 8008a66:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	2000014c 	.word	0x2000014c

08008a8c <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2bff      	cmp	r3, #255	; 0xff
 8008a9a:	d103      	bne.n	8008aa4 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fc29 	bl	80092f4 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8008aa2:	e00a      	b.n	8008aba <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	d103      	bne.n	8008ab2 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fca0 	bl	80093f0 <HRTIM_Master_ISR>
}
 8008ab0:	e003      	b.n	8008aba <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fd45 	bl	8009544 <HRTIM_Timer_ISR>
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8008b2e:	bf00      	nop
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f023 0307 	bic.w	r3, r3, #7
 8008c6c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0318 	bic.w	r3, r3, #24
 8008c7e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	6812      	ldr	r2, [r2, #0]
 8008c9a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	6852      	ldr	r2, [r2, #4]
 8008ca4:	619a      	str	r2, [r3, #24]
}
 8008ca6:	bf00      	nop
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b087      	sub	sp, #28
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	01db      	lsls	r3, r3, #7
 8008cc8:	4413      	add	r3, r2
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f023 0307 	bic.w	r3, r3, #7
 8008cd4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f023 0318 	bic.w	r3, r3, #24
 8008ce6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	01db      	lsls	r3, r3, #7
 8008cfc:	4413      	add	r3, r2
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6819      	ldr	r1, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	01db      	lsls	r3, r3, #7
 8008d0e:	440b      	add	r3, r1
 8008d10:	3394      	adds	r3, #148	; 0x94
 8008d12:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6819      	ldr	r1, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	01db      	lsls	r3, r3, #7
 8008d20:	440b      	add	r3, r1
 8008d22:	3398      	adds	r3, #152	; 0x98
 8008d24:	601a      	str	r2, [r3, #0]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008d4c:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f023 0320 	bic.w	r3, r3, #32
 8008d54:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d66:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d78:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d8a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008d9c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008dae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dc2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dd4:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b08b      	sub	sp, #44	; 0x2c
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	3301      	adds	r3, #1
 8008e14:	01db      	lsls	r3, r3, #7
 8008e16:	4413      	add	r3, r2
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	6811      	ldr	r1, [r2, #0]
 8008e1e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	3301      	adds	r3, #1
 8008e26:	01db      	lsls	r3, r3, #7
 8008e28:	440b      	add	r3, r1
 8008e2a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	3301      	adds	r3, #1
 8008e34:	01db      	lsls	r3, r3, #7
 8008e36:	4413      	add	r3, r2
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	01db      	lsls	r3, r3, #7
 8008e44:	4413      	add	r3, r2
 8008e46:	33e8      	adds	r3, #232	; 0xe8
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	01db      	lsls	r3, r3, #7
 8008e54:	4413      	add	r3, r2
 8008e56:	33e4      	adds	r3, #228	; 0xe4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008e64:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e68:	f023 0320 	bic.w	r3, r3, #32
 8008e6c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e74:	4313      	orrs	r3, r2
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e86:	4313      	orrs	r3, r2
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008ea2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008eb4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee2:	d103      	bne.n	8008eec <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efa:	4313      	orrs	r3, r2
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008f16:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	f023 031f 	bic.w	r3, r3, #31
 8008f28:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f3e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d108      	bne.n	8008f64 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f58:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	6a3a      	ldr	r2, [r7, #32]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f68:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008f6c:	d004      	beq.n	8008f78 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f72:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008f76:	d103      	bne.n	8008f80 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7c:	2b40      	cmp	r3, #64	; 0x40
 8008f7e:	d108      	bne.n	8008f92 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008f86:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f8c:	6a3a      	ldr	r2, [r7, #32]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f96:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d843      	bhi.n	8009026 <HRTIM_TimingUnitWaveform_Config+0x226>
 8008f9e:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008fb9 	.word	0x08008fb9
 8008fa8:	08008fcf 	.word	0x08008fcf
 8008fac:	08008fe5 	.word	0x08008fe5
 8008fb0:	08008ffb 	.word	0x08008ffb
 8008fb4:	08009011 	.word	0x08009011
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008fbe:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	61fb      	str	r3, [r7, #28]
      break;
 8008fcc:	e02c      	b.n	8009028 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fd4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	69fa      	ldr	r2, [r7, #28]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	61fb      	str	r3, [r7, #28]
      break;
 8008fe2:	e021      	b.n	8009028 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008fea:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	00db      	lsls	r3, r3, #3
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	61fb      	str	r3, [r7, #28]
      break;
 8008ff8:	e016      	b.n	8009028 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009000:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	4313      	orrs	r3, r2
 800900c:	61fb      	str	r3, [r7, #28]
      break;
 800900e:	e00b      	b.n	8009028 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009016:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	015b      	lsls	r3, r3, #5
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	4313      	orrs	r3, r2
 8009022:	61fb      	str	r3, [r7, #28]
      break;
 8009024:	e000      	b.n	8009028 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8009026:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	3301      	adds	r3, #1
 8009030:	01db      	lsls	r3, r3, #7
 8009032:	4413      	add	r3, r2
 8009034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009036:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	01db      	lsls	r3, r3, #7
 8009040:	4413      	add	r3, r2
 8009042:	33e8      	adds	r3, #232	; 0xe8
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	01db      	lsls	r3, r3, #7
 8009050:	4413      	add	r3, r2
 8009052:	33e4      	adds	r3, #228	; 0xe4
 8009054:	6a3a      	ldr	r2, [r7, #32]
 8009056:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	01db      	lsls	r3, r3, #7
 8009060:	4413      	add	r3, r2
 8009062:	33d4      	adds	r3, #212	; 0xd4
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8009072:	bf00      	nop
 8009074:	372c      	adds	r7, #44	; 0x2c
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop

08009080 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8009080:	b480      	push	{r7}
 8009082:	b089      	sub	sp, #36	; 0x24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	01db      	lsls	r3, r3, #7
 800909a:	4413      	add	r3, r2
 800909c:	33e4      	adds	r3, #228	; 0xe4
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	01db      	lsls	r3, r3, #7
 80090aa:	4413      	add	r3, r2
 80090ac:	33b8      	adds	r3, #184	; 0xb8
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	617b      	str	r3, [r7, #20]

  switch (Output)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090b8:	d04d      	beq.n	8009156 <HRTIM_OutputConfig+0xd6>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090c0:	d85e      	bhi.n	8009180 <HRTIM_OutputConfig+0x100>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090c8:	d032      	beq.n	8009130 <HRTIM_OutputConfig+0xb0>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d0:	d856      	bhi.n	8009180 <HRTIM_OutputConfig+0x100>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b80      	cmp	r3, #128	; 0x80
 80090d6:	d03e      	beq.n	8009156 <HRTIM_OutputConfig+0xd6>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b80      	cmp	r3, #128	; 0x80
 80090dc:	d850      	bhi.n	8009180 <HRTIM_OutputConfig+0x100>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b40      	cmp	r3, #64	; 0x40
 80090e2:	d025      	beq.n	8009130 <HRTIM_OutputConfig+0xb0>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b40      	cmp	r3, #64	; 0x40
 80090e8:	d84a      	bhi.n	8009180 <HRTIM_OutputConfig+0x100>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d01f      	beq.n	8009130 <HRTIM_OutputConfig+0xb0>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d044      	beq.n	8009180 <HRTIM_OutputConfig+0x100>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d841      	bhi.n	8009180 <HRTIM_OutputConfig+0x100>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d33e      	bcc.n	8009180 <HRTIM_OutputConfig+0x100>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3b02      	subs	r3, #2
 8009106:	2201      	movs	r2, #1
 8009108:	409a      	lsls	r2, r3
 800910a:	4b48      	ldr	r3, [pc, #288]	; (800922c <HRTIM_OutputConfig+0x1ac>)
 800910c:	4013      	ands	r3, r2
 800910e:	2b00      	cmp	r3, #0
 8009110:	bf14      	ite	ne
 8009112:	2301      	movne	r3, #1
 8009114:	2300      	moveq	r3, #0
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d11c      	bne.n	8009156 <HRTIM_OutputConfig+0xd6>
 800911c:	f244 0304 	movw	r3, #16388	; 0x4004
 8009120:	4013      	ands	r3, r2
 8009122:	2b00      	cmp	r3, #0
 8009124:	bf14      	ite	ne
 8009126:	2301      	movne	r3, #1
 8009128:	2300      	moveq	r3, #0
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	d027      	beq.n	8009180 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	01db      	lsls	r3, r3, #7
 800913c:	440b      	add	r3, r1
 800913e:	33bc      	adds	r3, #188	; 0xbc
 8009140:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6819      	ldr	r1, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	01db      	lsls	r3, r3, #7
 800914e:	440b      	add	r3, r1
 8009150:	33c0      	adds	r3, #192	; 0xc0
 8009152:	601a      	str	r2, [r3, #0]
      break;
 8009154:	e015      	b.n	8009182 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6819      	ldr	r1, [r3, #0]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	01db      	lsls	r3, r3, #7
 8009162:	440b      	add	r3, r1
 8009164:	33c4      	adds	r3, #196	; 0xc4
 8009166:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6819      	ldr	r1, [r3, #0]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	689a      	ldr	r2, [r3, #8]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	01db      	lsls	r3, r3, #7
 8009174:	440b      	add	r3, r1
 8009176:	33c8      	adds	r3, #200	; 0xc8
 8009178:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800917a:	2310      	movs	r3, #16
 800917c:	61bb      	str	r3, [r7, #24]
      break;
 800917e:	e000      	b.n	8009182 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8009180:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8009182:	22fe      	movs	r2, #254	; 0xfe
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800918a:	43db      	mvns	r3, r3
 800918c:	69fa      	ldr	r2, [r7, #28]
 800918e:	4013      	ands	r3, r2
 8009190:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	fa02 f303 	lsl.w	r3, r2, r3
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	4313      	orrs	r3, r2
 80091a0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	691a      	ldr	r2, [r3, #16]
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	fa02 f303 	lsl.w	r3, r2, r3
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	4313      	orrs	r3, r2
 80091c0:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	695a      	ldr	r2, [r3, #20]
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	fa02 f303 	lsl.w	r3, r2, r3
 80091cc:	69fa      	ldr	r2, [r7, #28]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	fa02 f303 	lsl.w	r3, r2, r3
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	4313      	orrs	r3, r2
 80091e0:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b08      	cmp	r3, #8
 80091e8:	d111      	bne.n	800920e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10c      	bne.n	800920e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d107      	bne.n	800920e <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	69da      	ldr	r2, [r3, #28]
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	fa02 f303 	lsl.w	r3, r2, r3
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	4313      	orrs	r3, r2
 800920c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	01db      	lsls	r3, r3, #7
 8009216:	4413      	add	r3, r2
 8009218:	33e4      	adds	r3, #228	; 0xe4
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	601a      	str	r2, [r3, #0]
}
 800921e:	bf00      	nop
 8009220:	3724      	adds	r7, #36	; 0x24
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	40000041 	.word	0x40000041

08009230 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b05      	cmp	r3, #5
 800923e:	d851      	bhi.n	80092e4 <HRTIM_ForceRegistersUpdate+0xb4>
 8009240:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <HRTIM_ForceRegistersUpdate+0x18>)
 8009242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009246:	bf00      	nop
 8009248:	08009277 	.word	0x08009277
 800924c:	0800928d 	.word	0x0800928d
 8009250:	080092a3 	.word	0x080092a3
 8009254:	080092b9 	.word	0x080092b9
 8009258:	080092cf 	.word	0x080092cf
 800925c:	08009261 	.word	0x08009261
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f042 0201 	orr.w	r2, r2, #1
 8009270:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009274:	e037      	b.n	80092e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f042 0202 	orr.w	r2, r2, #2
 8009286:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800928a:	e02c      	b.n	80092e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 0204 	orr.w	r2, r2, #4
 800929c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80092a0:	e021      	b.n	80092e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f042 0208 	orr.w	r2, r2, #8
 80092b2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80092b6:	e016      	b.n	80092e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 0210 	orr.w	r2, r2, #16
 80092c8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80092cc:	e00b      	b.n	80092e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f042 0220 	orr.w	r2, r2, #32
 80092de:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80092e2:	e000      	b.n	80092e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80092e4:	bf00      	nop
  }
}
 80092e6:	bf00      	nop
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop

080092f4 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009304:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800930e:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00c      	beq.n	8009334 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d007      	beq.n	8009334 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2201      	movs	r2, #1
 800932a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7ff fbc7 	bl	8008ac2 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00c      	beq.n	8009358 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d007      	beq.n	8009358 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2202      	movs	r2, #2
 800934e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff fbbf 	bl	8008ad6 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00c      	beq.n	800937c <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d007      	beq.n	800937c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2204      	movs	r2, #4
 8009372:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff fbb7 	bl	8008aea <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f003 0308 	and.w	r3, r3, #8
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00c      	beq.n	80093a0 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f003 0308 	and.w	r3, r3, #8
 800938c:	2b00      	cmp	r3, #0
 800938e:	d007      	beq.n	80093a0 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2208      	movs	r2, #8
 8009396:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff fbaf 	bl	8008afe <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f003 0310 	and.w	r3, r3, #16
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00c      	beq.n	80093c4 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	f003 0310 	and.w	r3, r3, #16
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d007      	beq.n	80093c4 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2210      	movs	r2, #16
 80093ba:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7ff fba7 	bl	8008b12 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f003 0320 	and.w	r3, r3, #32
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00c      	beq.n	80093e8 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d007      	beq.n	80093e8 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2220      	movs	r2, #32
 80093de:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff fb9f 	bl	8008b26 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80093e8:	bf00      	nop
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009400:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800940a:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00d      	beq.n	8009442 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d008      	beq.n	8009442 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009438:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7ff fb7c 	bl	8008b3a <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00c      	beq.n	8009466 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d007      	beq.n	8009466 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2201      	movs	r2, #1
 800945c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800945e:	2105      	movs	r1, #5
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff fb89 	bl	8008b78 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00c      	beq.n	800948a <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d007      	beq.n	800948a <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2202      	movs	r2, #2
 8009480:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009482:	2105      	movs	r1, #5
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7fa fcd5 	bl	8003e34 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00c      	beq.n	80094ae <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	d007      	beq.n	80094ae <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2204      	movs	r2, #4
 80094a4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80094a6:	2105      	movs	r1, #5
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7fa fccf 	bl	8003e4c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f003 0308 	and.w	r3, r3, #8
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00c      	beq.n	80094d2 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	f003 0308 	and.w	r3, r3, #8
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d007      	beq.n	80094d2 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2208      	movs	r2, #8
 80094c8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80094ca:	2105      	movs	r1, #5
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fb5e 	bl	8008b8e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f003 0310 	and.w	r3, r3, #16
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f003 0310 	and.w	r3, r3, #16
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2210      	movs	r2, #16
 80094ec:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80094ee:	2105      	movs	r1, #5
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7fa fd1f 	bl	8003f34 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f003 0320 	and.w	r3, r3, #32
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00b      	beq.n	8009518 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b00      	cmp	r3, #0
 8009508:	d006      	beq.n	8009518 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2220      	movs	r2, #32
 8009510:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff fb1b 	bl	8008b4e <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00c      	beq.n	800953c <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d007      	beq.n	800953c <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2240      	movs	r2, #64	; 0x40
 8009532:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009534:	2105      	movs	r1, #5
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff fb13 	bl	8008b62 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800953c:	bf00      	nop
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	3301      	adds	r3, #1
 8009556:	01db      	lsls	r3, r3, #7
 8009558:	4413      	add	r3, r2
 800955a:	3304      	adds	r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	01db      	lsls	r3, r3, #7
 8009568:	4413      	add	r3, r2
 800956a:	338c      	adds	r3, #140	; 0x8c
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d010      	beq.n	800959c <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00b      	beq.n	800959c <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	01db      	lsls	r3, r3, #7
 800958c:	4413      	add	r3, r2
 800958e:	3388      	adds	r3, #136	; 0x88
 8009590:	2201      	movs	r2, #1
 8009592:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff faee 	bl	8008b78 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d010      	beq.n	80095c8 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f003 0302 	and.w	r3, r3, #2
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00b      	beq.n	80095c8 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	01db      	lsls	r3, r3, #7
 80095b8:	4413      	add	r3, r2
 80095ba:	3388      	adds	r3, #136	; 0x88
 80095bc:	2202      	movs	r2, #2
 80095be:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7fa fc36 	bl	8003e34 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f003 0304 	and.w	r3, r3, #4
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d010      	beq.n	80095f4 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00b      	beq.n	80095f4 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	01db      	lsls	r3, r3, #7
 80095e4:	4413      	add	r3, r2
 80095e6:	3388      	adds	r3, #136	; 0x88
 80095e8:	2204      	movs	r2, #4
 80095ea:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fa fc2c 	bl	8003e4c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d010      	beq.n	8009620 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	f003 0308 	and.w	r3, r3, #8
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00b      	beq.n	8009620 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	01db      	lsls	r3, r3, #7
 8009610:	4413      	add	r3, r2
 8009612:	3388      	adds	r3, #136	; 0x88
 8009614:	2208      	movs	r2, #8
 8009616:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff fab7 	bl	8008b8e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f003 0310 	and.w	r3, r3, #16
 8009626:	2b00      	cmp	r3, #0
 8009628:	d010      	beq.n	800964c <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f003 0310 	and.w	r3, r3, #16
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00b      	beq.n	800964c <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	01db      	lsls	r3, r3, #7
 800963c:	4413      	add	r3, r2
 800963e:	3388      	adds	r3, #136	; 0x88
 8009640:	2210      	movs	r2, #16
 8009642:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7fa fc74 	bl	8003f34 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009652:	2b00      	cmp	r3, #0
 8009654:	d010      	beq.n	8009678 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00b      	beq.n	8009678 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	01db      	lsls	r3, r3, #7
 8009668:	4413      	add	r3, r2
 800966a:	3388      	adds	r3, #136	; 0x88
 800966c:	2240      	movs	r2, #64	; 0x40
 800966e:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff fa75 	bl	8008b62 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967e:	2b00      	cmp	r3, #0
 8009680:	d010      	beq.n	80096a4 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	01db      	lsls	r3, r3, #7
 8009694:	4413      	add	r3, r2
 8009696:	3388      	adds	r3, #136	; 0x88
 8009698:	2280      	movs	r2, #128	; 0x80
 800969a:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff fa80 	bl	8008ba4 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d011      	beq.n	80096d2 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00c      	beq.n	80096d2 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	01db      	lsls	r3, r3, #7
 80096c0:	4413      	add	r3, r2
 80096c2:	3388      	adds	r3, #136	; 0x88
 80096c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096c8:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff fa74 	bl	8008bba <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d011      	beq.n	8009700 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00c      	beq.n	8009700 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	01db      	lsls	r3, r3, #7
 80096ee:	4413      	add	r3, r2
 80096f0:	3388      	adds	r3, #136	; 0x88
 80096f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096f6:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fa7e 	bl	8008bfc <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009706:	2b00      	cmp	r3, #0
 8009708:	d011      	beq.n	800972e <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00c      	beq.n	800972e <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	01db      	lsls	r3, r3, #7
 800971c:	4413      	add	r3, r2
 800971e:	3388      	adds	r3, #136	; 0x88
 8009720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009724:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7ff fa72 	bl	8008c12 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009734:	2b00      	cmp	r3, #0
 8009736:	d011      	beq.n	800975c <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00c      	beq.n	800975c <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	01db      	lsls	r3, r3, #7
 800974a:	4413      	add	r3, r2
 800974c:	3388      	adds	r3, #136	; 0x88
 800974e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009752:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff fa66 	bl	8008c28 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d011      	beq.n	800978a <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00c      	beq.n	800978a <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	01db      	lsls	r3, r3, #7
 8009778:	4413      	add	r3, r2
 800977a:	3388      	adds	r3, #136	; 0x88
 800977c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009780:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fa5a 	bl	8008c3e <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d011      	beq.n	80097b8 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00c      	beq.n	80097b8 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	01db      	lsls	r3, r3, #7
 80097a6:	4413      	add	r3, r2
 80097a8:	3388      	adds	r3, #136	; 0x88
 80097aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80097ae:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7ff fa17 	bl	8008be6 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d011      	beq.n	80097e6 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00c      	beq.n	80097e6 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	01db      	lsls	r3, r3, #7
 80097d4:	4413      	add	r3, r2
 80097d6:	3388      	adds	r3, #136	; 0x88
 80097d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80097dc:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff f9f5 	bl	8008bd0 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e097      	b.n	8009932 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d106      	bne.n	8009822 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fa f805 	bl	800382c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2202      	movs	r2, #2
 8009826:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d004      	beq.n	8009844 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009842:	d103      	bne.n	800984c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 031e 	bic.w	r3, r3, #30
 800984a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009854:	4293      	cmp	r3, r2
 8009856:	d003      	beq.n	8009860 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	4b38      	ldr	r3, [pc, #224]	; (800993c <HAL_LPTIM_Init+0x14c>)
 800985c:	4013      	ands	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	4b37      	ldr	r3, [pc, #220]	; (8009940 <HAL_LPTIM_Init+0x150>)
 8009864:	4013      	ands	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009870:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8009876:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800987c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8009882:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4313      	orrs	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d107      	bne.n	80098a2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800989a:	4313      	orrs	r3, r2
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d004      	beq.n	80098b4 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098b2:	d107      	bne.n	80098c4 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80098bc:	4313      	orrs	r3, r2
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d00a      	beq.n	80098e6 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80098d8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80098de:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a14      	ldr	r2, [pc, #80]	; (8009944 <HAL_LPTIM_Init+0x154>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d004      	beq.n	8009902 <HAL_LPTIM_Init+0x112>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a12      	ldr	r2, [pc, #72]	; (8009948 <HAL_LPTIM_Init+0x158>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d108      	bne.n	8009914 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	625a      	str	r2, [r3, #36]	; 0x24
 8009912:	e009      	b.n	8009928 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a0c      	ldr	r2, [pc, #48]	; (800994c <HAL_LPTIM_Init+0x15c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d104      	bne.n	8009928 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009926:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	ffff1f3f 	.word	0xffff1f3f
 8009940:	ff19f1fe 	.word	0xff19f1fe
 8009944:	40002400 	.word	0x40002400
 8009948:	58002400 	.word	0x58002400
 800994c:	58002800 	.word	0x58002800

08009950 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2202      	movs	r2, #2
 800995e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d00c      	beq.n	8009984 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009972:	d107      	bne.n	8009984 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68da      	ldr	r2, [r3, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8009982:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f042 0201 	orr.w	r2, r2, #1
 8009992:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2210      	movs	r2, #16
 800999a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80099a4:	2110      	movs	r1, #16
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f91e 	bl	8009be8 <LPTIM_WaitForFlag>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d101      	bne.n	80099b6 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e02f      	b.n	8009a16 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f946 	bl	8009c48 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f905 	bl	8009bcc <HAL_LPTIM_GetState>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d101      	bne.n	80099cc <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e024      	b.n	8009a16 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689a      	ldr	r2, [r3, #8]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0210 	orr.w	r2, r2, #16
 80099da:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689a      	ldr	r2, [r3, #8]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0202 	orr.w	r2, r2, #2
 80099ea:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	691a      	ldr	r2, [r3, #16]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 0201 	orr.w	r2, r2, #1
 80099fa:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	691a      	ldr	r2, [r3, #16]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0204 	orr.w	r2, r2, #4
 8009a0a:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d10d      	bne.n	8009a50 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d106      	bne.n	8009a50 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2201      	movs	r2, #1
 8009a48:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f882 	bl	8009b54 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0302 	and.w	r3, r3, #2
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d10d      	bne.n	8009a7a <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f003 0302 	and.w	r3, r3, #2
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d106      	bne.n	8009a7a <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2202      	movs	r2, #2
 8009a72:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fa f9cf 	bl	8003e18 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b04      	cmp	r3, #4
 8009a86:	d10d      	bne.n	8009aa4 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d106      	bne.n	8009aa4 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f862 	bl	8009b68 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0308 	and.w	r3, r3, #8
 8009aae:	2b08      	cmp	r3, #8
 8009ab0:	d10d      	bne.n	8009ace <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f003 0308 	and.w	r3, r3, #8
 8009abc:	2b08      	cmp	r3, #8
 8009abe:	d106      	bne.n	8009ace <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2208      	movs	r2, #8
 8009ac6:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f857 	bl	8009b7c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0310 	and.w	r3, r3, #16
 8009ad8:	2b10      	cmp	r3, #16
 8009ada:	d10d      	bne.n	8009af8 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	f003 0310 	and.w	r3, r3, #16
 8009ae6:	2b10      	cmp	r3, #16
 8009ae8:	d106      	bne.n	8009af8 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2210      	movs	r2, #16
 8009af0:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f84c 	bl	8009b90 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0320 	and.w	r3, r3, #32
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	d10d      	bne.n	8009b22 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b20      	cmp	r3, #32
 8009b12:	d106      	bne.n	8009b22 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f841 	bl	8009ba4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2c:	2b40      	cmp	r3, #64	; 0x40
 8009b2e:	d10d      	bne.n	8009b4c <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b3a:	2b40      	cmp	r3, #64	; 0x40
 8009b3c:	d106      	bne.n	8009b4c <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2240      	movs	r2, #64	; 0x40
 8009b44:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f836 	bl	8009bb8 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009bda:	b2db      	uxtb	r3, r3
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8009bf6:	4b12      	ldr	r3, [pc, #72]	; (8009c40 <LPTIM_WaitForFlag+0x58>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a12      	ldr	r2, [pc, #72]	; (8009c44 <LPTIM_WaitForFlag+0x5c>)
 8009bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009c00:	0b9b      	lsrs	r3, r3, #14
 8009c02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c06:	fb02 f303 	mul.w	r3, r2, r3
 8009c0a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	4013      	ands	r3, r2
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d002      	beq.n	8009c32 <LPTIM_WaitForFlag+0x4a>
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1ec      	bne.n	8009c0c <LPTIM_WaitForFlag+0x24>

  return result;
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	2000012c 	.word	0x2000012c
 8009c44:	d1b71759 	.word	0xd1b71759

08009c48 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08c      	sub	sp, #48	; 0x30
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c54:	f3ef 8310 	mrs	r3, PRIMASK
 8009c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c5e:	2301      	movs	r3, #1
 8009c60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	f383 8810 	msr	PRIMASK, r3
}
 8009c68:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a81      	ldr	r2, [pc, #516]	; (8009e74 <LPTIM_Disable+0x22c>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d02d      	beq.n	8009cd0 <LPTIM_Disable+0x88>
 8009c74:	4a7f      	ldr	r2, [pc, #508]	; (8009e74 <LPTIM_Disable+0x22c>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d830      	bhi.n	8009cdc <LPTIM_Disable+0x94>
 8009c7a:	4a7f      	ldr	r2, [pc, #508]	; (8009e78 <LPTIM_Disable+0x230>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d021      	beq.n	8009cc4 <LPTIM_Disable+0x7c>
 8009c80:	4a7d      	ldr	r2, [pc, #500]	; (8009e78 <LPTIM_Disable+0x230>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d82a      	bhi.n	8009cdc <LPTIM_Disable+0x94>
 8009c86:	4a7d      	ldr	r2, [pc, #500]	; (8009e7c <LPTIM_Disable+0x234>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d015      	beq.n	8009cb8 <LPTIM_Disable+0x70>
 8009c8c:	4a7b      	ldr	r2, [pc, #492]	; (8009e7c <LPTIM_Disable+0x234>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d824      	bhi.n	8009cdc <LPTIM_Disable+0x94>
 8009c92:	4a7b      	ldr	r2, [pc, #492]	; (8009e80 <LPTIM_Disable+0x238>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d003      	beq.n	8009ca0 <LPTIM_Disable+0x58>
 8009c98:	4a7a      	ldr	r2, [pc, #488]	; (8009e84 <LPTIM_Disable+0x23c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d006      	beq.n	8009cac <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009c9e:	e01d      	b.n	8009cdc <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009ca0:	4b79      	ldr	r3, [pc, #484]	; (8009e88 <LPTIM_Disable+0x240>)
 8009ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009caa:	e018      	b.n	8009cde <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009cac:	4b76      	ldr	r3, [pc, #472]	; (8009e88 <LPTIM_Disable+0x240>)
 8009cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009cb6:	e012      	b.n	8009cde <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009cb8:	4b73      	ldr	r3, [pc, #460]	; (8009e88 <LPTIM_Disable+0x240>)
 8009cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009cc2:	e00c      	b.n	8009cde <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009cc4:	4b70      	ldr	r3, [pc, #448]	; (8009e88 <LPTIM_Disable+0x240>)
 8009cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009cce:	e006      	b.n	8009cde <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009cd0:	4b6d      	ldr	r3, [pc, #436]	; (8009e88 <LPTIM_Disable+0x240>)
 8009cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009cda:	e000      	b.n	8009cde <LPTIM_Disable+0x96>
      break;
 8009cdc:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	699b      	ldr	r3, [r3, #24]
 8009cfc:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d04:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a5a      	ldr	r2, [pc, #360]	; (8009e74 <LPTIM_Disable+0x22c>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d059      	beq.n	8009dc4 <LPTIM_Disable+0x17c>
 8009d10:	4a58      	ldr	r2, [pc, #352]	; (8009e74 <LPTIM_Disable+0x22c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d867      	bhi.n	8009de6 <LPTIM_Disable+0x19e>
 8009d16:	4a58      	ldr	r2, [pc, #352]	; (8009e78 <LPTIM_Disable+0x230>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d042      	beq.n	8009da2 <LPTIM_Disable+0x15a>
 8009d1c:	4a56      	ldr	r2, [pc, #344]	; (8009e78 <LPTIM_Disable+0x230>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d861      	bhi.n	8009de6 <LPTIM_Disable+0x19e>
 8009d22:	4a56      	ldr	r2, [pc, #344]	; (8009e7c <LPTIM_Disable+0x234>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d02b      	beq.n	8009d80 <LPTIM_Disable+0x138>
 8009d28:	4a54      	ldr	r2, [pc, #336]	; (8009e7c <LPTIM_Disable+0x234>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d85b      	bhi.n	8009de6 <LPTIM_Disable+0x19e>
 8009d2e:	4a54      	ldr	r2, [pc, #336]	; (8009e80 <LPTIM_Disable+0x238>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d003      	beq.n	8009d3c <LPTIM_Disable+0xf4>
 8009d34:	4a53      	ldr	r2, [pc, #332]	; (8009e84 <LPTIM_Disable+0x23c>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d011      	beq.n	8009d5e <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009d3a:	e054      	b.n	8009de6 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009d3c:	4b52      	ldr	r3, [pc, #328]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d42:	4a51      	ldr	r2, [pc, #324]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009d4c:	4b4e      	ldr	r3, [pc, #312]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d52:	4a4d      	ldr	r2, [pc, #308]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009d5c:	e044      	b.n	8009de8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009d5e:	4b4a      	ldr	r3, [pc, #296]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d64:	4a48      	ldr	r2, [pc, #288]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009d6e:	4b46      	ldr	r3, [pc, #280]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d74:	4a44      	ldr	r2, [pc, #272]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d7a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009d7e:	e033      	b.n	8009de8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009d80:	4b41      	ldr	r3, [pc, #260]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d86:	4a40      	ldr	r2, [pc, #256]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009d90:	4b3d      	ldr	r3, [pc, #244]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d96:	4a3c      	ldr	r2, [pc, #240]	; (8009e88 <LPTIM_Disable+0x240>)
 8009d98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d9c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009da0:	e022      	b.n	8009de8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8009da2:	4b39      	ldr	r3, [pc, #228]	; (8009e88 <LPTIM_Disable+0x240>)
 8009da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009da8:	4a37      	ldr	r2, [pc, #220]	; (8009e88 <LPTIM_Disable+0x240>)
 8009daa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009dae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8009db2:	4b35      	ldr	r3, [pc, #212]	; (8009e88 <LPTIM_Disable+0x240>)
 8009db4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009db8:	4a33      	ldr	r2, [pc, #204]	; (8009e88 <LPTIM_Disable+0x240>)
 8009dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dbe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009dc2:	e011      	b.n	8009de8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8009dc4:	4b30      	ldr	r3, [pc, #192]	; (8009e88 <LPTIM_Disable+0x240>)
 8009dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009dca:	4a2f      	ldr	r2, [pc, #188]	; (8009e88 <LPTIM_Disable+0x240>)
 8009dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009dd0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8009dd4:	4b2c      	ldr	r3, [pc, #176]	; (8009e88 <LPTIM_Disable+0x240>)
 8009dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009dda:	4a2b      	ldr	r2, [pc, #172]	; (8009e88 <LPTIM_Disable+0x240>)
 8009ddc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009de0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009de4:	e000      	b.n	8009de8 <LPTIM_Disable+0x1a0>
      break;
 8009de6:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d103      	bne.n	8009df6 <LPTIM_Disable+0x1ae>
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 80d1 	beq.w	8009f98 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a1e      	ldr	r2, [pc, #120]	; (8009e74 <LPTIM_Disable+0x22c>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d031      	beq.n	8009e64 <LPTIM_Disable+0x21c>
 8009e00:	4a1c      	ldr	r2, [pc, #112]	; (8009e74 <LPTIM_Disable+0x22c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d842      	bhi.n	8009e8c <LPTIM_Disable+0x244>
 8009e06:	4a1c      	ldr	r2, [pc, #112]	; (8009e78 <LPTIM_Disable+0x230>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d024      	beq.n	8009e56 <LPTIM_Disable+0x20e>
 8009e0c:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <LPTIM_Disable+0x230>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d83c      	bhi.n	8009e8c <LPTIM_Disable+0x244>
 8009e12:	4a1a      	ldr	r2, [pc, #104]	; (8009e7c <LPTIM_Disable+0x234>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d017      	beq.n	8009e48 <LPTIM_Disable+0x200>
 8009e18:	4a18      	ldr	r2, [pc, #96]	; (8009e7c <LPTIM_Disable+0x234>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d836      	bhi.n	8009e8c <LPTIM_Disable+0x244>
 8009e1e:	4a18      	ldr	r2, [pc, #96]	; (8009e80 <LPTIM_Disable+0x238>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d003      	beq.n	8009e2c <LPTIM_Disable+0x1e4>
 8009e24:	4a17      	ldr	r2, [pc, #92]	; (8009e84 <LPTIM_Disable+0x23c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d007      	beq.n	8009e3a <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009e2a:	e02f      	b.n	8009e8c <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009e2c:	4b16      	ldr	r3, [pc, #88]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e30:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e32:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009e36:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009e38:	e029      	b.n	8009e8e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009e3a:	4b13      	ldr	r3, [pc, #76]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e3e:	4a12      	ldr	r2, [pc, #72]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e40:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009e44:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009e46:	e022      	b.n	8009e8e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009e48:	4b0f      	ldr	r3, [pc, #60]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4c:	4a0e      	ldr	r2, [pc, #56]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e4e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009e52:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009e54:	e01b      	b.n	8009e8e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8009e56:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5a:	4a0b      	ldr	r2, [pc, #44]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e5c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009e60:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009e62:	e014      	b.n	8009e8e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009e64:	4b08      	ldr	r3, [pc, #32]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e68:	4a07      	ldr	r2, [pc, #28]	; (8009e88 <LPTIM_Disable+0x240>)
 8009e6a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009e6e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009e70:	e00d      	b.n	8009e8e <LPTIM_Disable+0x246>
 8009e72:	bf00      	nop
 8009e74:	58003000 	.word	0x58003000
 8009e78:	58002c00 	.word	0x58002c00
 8009e7c:	58002800 	.word	0x58002800
 8009e80:	40002400 	.word	0x40002400
 8009e84:	58002400 	.word	0x58002400
 8009e88:	58024400 	.word	0x58024400
        break;
 8009e8c:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01a      	beq.n	8009eca <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691a      	ldr	r2, [r3, #16]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 0201 	orr.w	r2, r2, #1
 8009ea2:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009eac:	2108      	movs	r1, #8
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7ff fe9a 	bl	8009be8 <LPTIM_WaitForFlag>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d103      	bne.n	8009ec2 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2203      	movs	r2, #3
 8009ebe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2208      	movs	r2, #8
 8009ec8:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d01a      	beq.n	8009f06 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	691a      	ldr	r2, [r3, #16]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0201 	orr.w	r2, r2, #1
 8009ede:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009ee8:	2110      	movs	r1, #16
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7ff fe7c 	bl	8009be8 <LPTIM_WaitForFlag>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d103      	bne.n	8009efe <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2203      	movs	r2, #3
 8009efa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2210      	movs	r2, #16
 8009f04:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a32      	ldr	r2, [pc, #200]	; (8009fd4 <LPTIM_Disable+0x38c>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d039      	beq.n	8009f84 <LPTIM_Disable+0x33c>
 8009f10:	4a30      	ldr	r2, [pc, #192]	; (8009fd4 <LPTIM_Disable+0x38c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d83f      	bhi.n	8009f96 <LPTIM_Disable+0x34e>
 8009f16:	4a30      	ldr	r2, [pc, #192]	; (8009fd8 <LPTIM_Disable+0x390>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d02a      	beq.n	8009f72 <LPTIM_Disable+0x32a>
 8009f1c:	4a2e      	ldr	r2, [pc, #184]	; (8009fd8 <LPTIM_Disable+0x390>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d839      	bhi.n	8009f96 <LPTIM_Disable+0x34e>
 8009f22:	4a2e      	ldr	r2, [pc, #184]	; (8009fdc <LPTIM_Disable+0x394>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d01b      	beq.n	8009f60 <LPTIM_Disable+0x318>
 8009f28:	4a2c      	ldr	r2, [pc, #176]	; (8009fdc <LPTIM_Disable+0x394>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d833      	bhi.n	8009f96 <LPTIM_Disable+0x34e>
 8009f2e:	4a2c      	ldr	r2, [pc, #176]	; (8009fe0 <LPTIM_Disable+0x398>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <LPTIM_Disable+0x2f4>
 8009f34:	4a2b      	ldr	r2, [pc, #172]	; (8009fe4 <LPTIM_Disable+0x39c>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d009      	beq.n	8009f4e <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009f3a:	e02c      	b.n	8009f96 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009f3c:	4b2a      	ldr	r3, [pc, #168]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f40:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009f44:	4928      	ldr	r1, [pc, #160]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009f4c:	e024      	b.n	8009f98 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009f4e:	4b26      	ldr	r3, [pc, #152]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f56:	4924      	ldr	r1, [pc, #144]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009f5e:	e01b      	b.n	8009f98 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009f60:	4b21      	ldr	r3, [pc, #132]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f68:	491f      	ldr	r1, [pc, #124]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009f70:	e012      	b.n	8009f98 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8009f72:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f7a:	491b      	ldr	r1, [pc, #108]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009f82:	e009      	b.n	8009f98 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009f84:	4b18      	ldr	r3, [pc, #96]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f8c:	4916      	ldr	r1, [pc, #88]	; (8009fe8 <LPTIM_Disable+0x3a0>)
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	4313      	orrs	r3, r2
 8009f92:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009f94:	e000      	b.n	8009f98 <LPTIM_Disable+0x350>
        break;
 8009f96:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0201 	bic.w	r2, r2, #1
 8009fa6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fae:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6a3a      	ldr	r2, [r7, #32]
 8009fb6:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f383 8810 	msr	PRIMASK, r3
}
 8009fca:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009fcc:	bf00      	nop
 8009fce:	3730      	adds	r7, #48	; 0x30
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	58003000 	.word	0x58003000
 8009fd8:	58002c00 	.word	0x58002c00
 8009fdc:	58002800 	.word	0x58002800
 8009fe0:	40002400 	.word	0x40002400
 8009fe4:	58002400 	.word	0x58002400
 8009fe8:	58024400 	.word	0x58024400

08009fec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009fec:	b480      	push	{r7}
 8009fee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a04      	ldr	r2, [pc, #16]	; (800a008 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ffa:	6013      	str	r3, [r2, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	58024800 	.word	0x58024800

0800a00c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a014:	4b19      	ldr	r3, [pc, #100]	; (800a07c <HAL_PWREx_ConfigSupply+0x70>)
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f003 0304 	and.w	r3, r3, #4
 800a01c:	2b04      	cmp	r3, #4
 800a01e:	d00a      	beq.n	800a036 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a020:	4b16      	ldr	r3, [pc, #88]	; (800a07c <HAL_PWREx_ConfigSupply+0x70>)
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d001      	beq.n	800a032 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e01f      	b.n	800a072 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	e01d      	b.n	800a072 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a036:	4b11      	ldr	r3, [pc, #68]	; (800a07c <HAL_PWREx_ConfigSupply+0x70>)
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	f023 0207 	bic.w	r2, r3, #7
 800a03e:	490f      	ldr	r1, [pc, #60]	; (800a07c <HAL_PWREx_ConfigSupply+0x70>)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4313      	orrs	r3, r2
 800a044:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a046:	f7fa f9bf 	bl	80043c8 <HAL_GetTick>
 800a04a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a04c:	e009      	b.n	800a062 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a04e:	f7fa f9bb 	bl	80043c8 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a05c:	d901      	bls.n	800a062 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e007      	b.n	800a072 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a062:	4b06      	ldr	r3, [pc, #24]	; (800a07c <HAL_PWREx_ConfigSupply+0x70>)
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a06a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a06e:	d1ee      	bne.n	800a04e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	58024800 	.word	0x58024800

0800a080 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08c      	sub	sp, #48	; 0x30
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	f000 bc48 	b.w	800a924 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 8088 	beq.w	800a1b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0a2:	4b99      	ldr	r3, [pc, #612]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0ac:	4b96      	ldr	r3, [pc, #600]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	2b10      	cmp	r3, #16
 800a0b6:	d007      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x48>
 800a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ba:	2b18      	cmp	r3, #24
 800a0bc:	d111      	bne.n	800a0e2 <HAL_RCC_OscConfig+0x62>
 800a0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c0:	f003 0303 	and.w	r3, r3, #3
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d10c      	bne.n	800a0e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0c8:	4b8f      	ldr	r3, [pc, #572]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d06d      	beq.n	800a1b0 <HAL_RCC_OscConfig+0x130>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d169      	bne.n	800a1b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	f000 bc21 	b.w	800a924 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ea:	d106      	bne.n	800a0fa <HAL_RCC_OscConfig+0x7a>
 800a0ec:	4b86      	ldr	r3, [pc, #536]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a85      	ldr	r2, [pc, #532]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a0f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	e02e      	b.n	800a158 <HAL_RCC_OscConfig+0xd8>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10c      	bne.n	800a11c <HAL_RCC_OscConfig+0x9c>
 800a102:	4b81      	ldr	r3, [pc, #516]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a80      	ldr	r2, [pc, #512]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	4b7e      	ldr	r3, [pc, #504]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a7d      	ldr	r2, [pc, #500]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a118:	6013      	str	r3, [r2, #0]
 800a11a:	e01d      	b.n	800a158 <HAL_RCC_OscConfig+0xd8>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a124:	d10c      	bne.n	800a140 <HAL_RCC_OscConfig+0xc0>
 800a126:	4b78      	ldr	r3, [pc, #480]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a77      	ldr	r2, [pc, #476]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a12c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	4b75      	ldr	r3, [pc, #468]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a74      	ldr	r2, [pc, #464]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	e00b      	b.n	800a158 <HAL_RCC_OscConfig+0xd8>
 800a140:	4b71      	ldr	r3, [pc, #452]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a70      	ldr	r2, [pc, #448]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	4b6e      	ldr	r3, [pc, #440]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a6d      	ldr	r2, [pc, #436]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d013      	beq.n	800a188 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a160:	f7fa f932 	bl	80043c8 <HAL_GetTick>
 800a164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a166:	e008      	b.n	800a17a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a168:	f7fa f92e 	bl	80043c8 <HAL_GetTick>
 800a16c:	4602      	mov	r2, r0
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	2b64      	cmp	r3, #100	; 0x64
 800a174:	d901      	bls.n	800a17a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e3d4      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a17a:	4b63      	ldr	r3, [pc, #396]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0f0      	beq.n	800a168 <HAL_RCC_OscConfig+0xe8>
 800a186:	e014      	b.n	800a1b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a188:	f7fa f91e 	bl	80043c8 <HAL_GetTick>
 800a18c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a18e:	e008      	b.n	800a1a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a190:	f7fa f91a 	bl	80043c8 <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	2b64      	cmp	r3, #100	; 0x64
 800a19c:	d901      	bls.n	800a1a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	e3c0      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a1a2:	4b59      	ldr	r3, [pc, #356]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1f0      	bne.n	800a190 <HAL_RCC_OscConfig+0x110>
 800a1ae:	e000      	b.n	800a1b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 0302 	and.w	r3, r3, #2
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80ca 	beq.w	800a354 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1c0:	4b51      	ldr	r3, [pc, #324]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1ca:	4b4f      	ldr	r3, [pc, #316]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d007      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x166>
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	2b18      	cmp	r3, #24
 800a1da:	d156      	bne.n	800a28a <HAL_RCC_OscConfig+0x20a>
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	f003 0303 	and.w	r3, r3, #3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d151      	bne.n	800a28a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1e6:	4b48      	ldr	r3, [pc, #288]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d005      	beq.n	800a1fe <HAL_RCC_OscConfig+0x17e>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e392      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1fe:	4b42      	ldr	r3, [pc, #264]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f023 0219 	bic.w	r2, r3, #25
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	493f      	ldr	r1, [pc, #252]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a210:	f7fa f8da 	bl	80043c8 <HAL_GetTick>
 800a214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a216:	e008      	b.n	800a22a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a218:	f7fa f8d6 	bl	80043c8 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b02      	cmp	r3, #2
 800a224:	d901      	bls.n	800a22a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e37c      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a22a:	4b37      	ldr	r3, [pc, #220]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0f0      	beq.n	800a218 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a236:	f7fa f8f7 	bl	8004428 <HAL_GetREVID>
 800a23a:	4603      	mov	r3, r0
 800a23c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a240:	4293      	cmp	r3, r2
 800a242:	d817      	bhi.n	800a274 <HAL_RCC_OscConfig+0x1f4>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	2b40      	cmp	r3, #64	; 0x40
 800a24a:	d108      	bne.n	800a25e <HAL_RCC_OscConfig+0x1de>
 800a24c:	4b2e      	ldr	r3, [pc, #184]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a254:	4a2c      	ldr	r2, [pc, #176]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a25a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a25c:	e07a      	b.n	800a354 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a25e:	4b2a      	ldr	r3, [pc, #168]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	031b      	lsls	r3, r3, #12
 800a26c:	4926      	ldr	r1, [pc, #152]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a272:	e06f      	b.n	800a354 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a274:	4b24      	ldr	r3, [pc, #144]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	061b      	lsls	r3, r3, #24
 800a282:	4921      	ldr	r1, [pc, #132]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a284:	4313      	orrs	r3, r2
 800a286:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a288:	e064      	b.n	800a354 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d047      	beq.n	800a322 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a292:	4b1d      	ldr	r3, [pc, #116]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f023 0219 	bic.w	r2, r3, #25
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	491a      	ldr	r1, [pc, #104]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7fa f890 	bl	80043c8 <HAL_GetTick>
 800a2a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2ac:	f7fa f88c 	bl	80043c8 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e332      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2be:	4b12      	ldr	r3, [pc, #72]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0304 	and.w	r3, r3, #4
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0f0      	beq.n	800a2ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2ca:	f7fa f8ad 	bl	8004428 <HAL_GetREVID>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d819      	bhi.n	800a30c <HAL_RCC_OscConfig+0x28c>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	2b40      	cmp	r3, #64	; 0x40
 800a2de:	d108      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x272>
 800a2e0:	4b09      	ldr	r3, [pc, #36]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a2e8:	4a07      	ldr	r2, [pc, #28]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a2ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ee:	6053      	str	r3, [r2, #4]
 800a2f0:	e030      	b.n	800a354 <HAL_RCC_OscConfig+0x2d4>
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	031b      	lsls	r3, r3, #12
 800a300:	4901      	ldr	r1, [pc, #4]	; (800a308 <HAL_RCC_OscConfig+0x288>)
 800a302:	4313      	orrs	r3, r2
 800a304:	604b      	str	r3, [r1, #4]
 800a306:	e025      	b.n	800a354 <HAL_RCC_OscConfig+0x2d4>
 800a308:	58024400 	.word	0x58024400
 800a30c:	4b9a      	ldr	r3, [pc, #616]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	061b      	lsls	r3, r3, #24
 800a31a:	4997      	ldr	r1, [pc, #604]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	604b      	str	r3, [r1, #4]
 800a320:	e018      	b.n	800a354 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a322:	4b95      	ldr	r3, [pc, #596]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a94      	ldr	r2, [pc, #592]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a328:	f023 0301 	bic.w	r3, r3, #1
 800a32c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a32e:	f7fa f84b 	bl	80043c8 <HAL_GetTick>
 800a332:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a334:	e008      	b.n	800a348 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a336:	f7fa f847 	bl	80043c8 <HAL_GetTick>
 800a33a:	4602      	mov	r2, r0
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	2b02      	cmp	r3, #2
 800a342:	d901      	bls.n	800a348 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a344:	2303      	movs	r3, #3
 800a346:	e2ed      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a348:	4b8b      	ldr	r3, [pc, #556]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1f0      	bne.n	800a336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0310 	and.w	r3, r3, #16
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 80a9 	beq.w	800a4b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a362:	4b85      	ldr	r3, [pc, #532]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a36a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a36c:	4b82      	ldr	r3, [pc, #520]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a370:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	2b08      	cmp	r3, #8
 800a376:	d007      	beq.n	800a388 <HAL_RCC_OscConfig+0x308>
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	2b18      	cmp	r3, #24
 800a37c:	d13a      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x374>
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f003 0303 	and.w	r3, r3, #3
 800a384:	2b01      	cmp	r3, #1
 800a386:	d135      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a388:	4b7b      	ldr	r3, [pc, #492]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a390:	2b00      	cmp	r3, #0
 800a392:	d005      	beq.n	800a3a0 <HAL_RCC_OscConfig+0x320>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	2b80      	cmp	r3, #128	; 0x80
 800a39a:	d001      	beq.n	800a3a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e2c1      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3a0:	f7fa f842 	bl	8004428 <HAL_GetREVID>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f241 0203 	movw	r2, #4099	; 0x1003
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d817      	bhi.n	800a3de <HAL_RCC_OscConfig+0x35e>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	2b20      	cmp	r3, #32
 800a3b4:	d108      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x348>
 800a3b6:	4b70      	ldr	r3, [pc, #448]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a3be:	4a6e      	ldr	r2, [pc, #440]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a3c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3c6:	e075      	b.n	800a4b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3c8:	4b6b      	ldr	r3, [pc, #428]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a1b      	ldr	r3, [r3, #32]
 800a3d4:	069b      	lsls	r3, r3, #26
 800a3d6:	4968      	ldr	r1, [pc, #416]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3dc:	e06a      	b.n	800a4b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3de:	4b66      	ldr	r3, [pc, #408]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	061b      	lsls	r3, r3, #24
 800a3ec:	4962      	ldr	r1, [pc, #392]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3f2:	e05f      	b.n	800a4b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d042      	beq.n	800a482 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a3fc:	4b5e      	ldr	r3, [pc, #376]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a5d      	ldr	r2, [pc, #372]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a408:	f7f9 ffde 	bl	80043c8 <HAL_GetTick>
 800a40c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a40e:	e008      	b.n	800a422 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a410:	f7f9 ffda 	bl	80043c8 <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d901      	bls.n	800a422 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e280      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a422:	4b55      	ldr	r3, [pc, #340]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0f0      	beq.n	800a410 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a42e:	f7f9 fffb 	bl	8004428 <HAL_GetREVID>
 800a432:	4603      	mov	r3, r0
 800a434:	f241 0203 	movw	r2, #4099	; 0x1003
 800a438:	4293      	cmp	r3, r2
 800a43a:	d817      	bhi.n	800a46c <HAL_RCC_OscConfig+0x3ec>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a1b      	ldr	r3, [r3, #32]
 800a440:	2b20      	cmp	r3, #32
 800a442:	d108      	bne.n	800a456 <HAL_RCC_OscConfig+0x3d6>
 800a444:	4b4c      	ldr	r3, [pc, #304]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a44c:	4a4a      	ldr	r2, [pc, #296]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a44e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a452:	6053      	str	r3, [r2, #4]
 800a454:	e02e      	b.n	800a4b4 <HAL_RCC_OscConfig+0x434>
 800a456:	4b48      	ldr	r3, [pc, #288]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	069b      	lsls	r3, r3, #26
 800a464:	4944      	ldr	r1, [pc, #272]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a466:	4313      	orrs	r3, r2
 800a468:	604b      	str	r3, [r1, #4]
 800a46a:	e023      	b.n	800a4b4 <HAL_RCC_OscConfig+0x434>
 800a46c:	4b42      	ldr	r3, [pc, #264]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a1b      	ldr	r3, [r3, #32]
 800a478:	061b      	lsls	r3, r3, #24
 800a47a:	493f      	ldr	r1, [pc, #252]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a47c:	4313      	orrs	r3, r2
 800a47e:	60cb      	str	r3, [r1, #12]
 800a480:	e018      	b.n	800a4b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a482:	4b3d      	ldr	r3, [pc, #244]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a3c      	ldr	r2, [pc, #240]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a48c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a48e:	f7f9 ff9b 	bl	80043c8 <HAL_GetTick>
 800a492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a494:	e008      	b.n	800a4a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a496:	f7f9 ff97 	bl	80043c8 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d901      	bls.n	800a4a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e23d      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a4a8:	4b33      	ldr	r3, [pc, #204]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f0      	bne.n	800a496 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0308 	and.w	r3, r3, #8
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d036      	beq.n	800a52e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d019      	beq.n	800a4fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4c8:	4b2b      	ldr	r3, [pc, #172]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4cc:	4a2a      	ldr	r2, [pc, #168]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a4ce:	f043 0301 	orr.w	r3, r3, #1
 800a4d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4d4:	f7f9 ff78 	bl	80043c8 <HAL_GetTick>
 800a4d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4da:	e008      	b.n	800a4ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4dc:	f7f9 ff74 	bl	80043c8 <HAL_GetTick>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d901      	bls.n	800a4ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e21a      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4ee:	4b22      	ldr	r3, [pc, #136]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a4f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0f0      	beq.n	800a4dc <HAL_RCC_OscConfig+0x45c>
 800a4fa:	e018      	b.n	800a52e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4fc:	4b1e      	ldr	r3, [pc, #120]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a4fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a500:	4a1d      	ldr	r2, [pc, #116]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a502:	f023 0301 	bic.w	r3, r3, #1
 800a506:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a508:	f7f9 ff5e 	bl	80043c8 <HAL_GetTick>
 800a50c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a50e:	e008      	b.n	800a522 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a510:	f7f9 ff5a 	bl	80043c8 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d901      	bls.n	800a522 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e200      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a522:	4b15      	ldr	r3, [pc, #84]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1f0      	bne.n	800a510 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 0320 	and.w	r3, r3, #32
 800a536:	2b00      	cmp	r3, #0
 800a538:	d039      	beq.n	800a5ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d01c      	beq.n	800a57c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a542:	4b0d      	ldr	r3, [pc, #52]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a0c      	ldr	r2, [pc, #48]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a54c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a54e:	f7f9 ff3b 	bl	80043c8 <HAL_GetTick>
 800a552:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a554:	e008      	b.n	800a568 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a556:	f7f9 ff37 	bl	80043c8 <HAL_GetTick>
 800a55a:	4602      	mov	r2, r0
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	2b02      	cmp	r3, #2
 800a562:	d901      	bls.n	800a568 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a564:	2303      	movs	r3, #3
 800a566:	e1dd      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a568:	4b03      	ldr	r3, [pc, #12]	; (800a578 <HAL_RCC_OscConfig+0x4f8>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0f0      	beq.n	800a556 <HAL_RCC_OscConfig+0x4d6>
 800a574:	e01b      	b.n	800a5ae <HAL_RCC_OscConfig+0x52e>
 800a576:	bf00      	nop
 800a578:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a57c:	4b9b      	ldr	r3, [pc, #620]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a9a      	ldr	r2, [pc, #616]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a586:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a588:	f7f9 ff1e 	bl	80043c8 <HAL_GetTick>
 800a58c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a58e:	e008      	b.n	800a5a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a590:	f7f9 ff1a 	bl	80043c8 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d901      	bls.n	800a5a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e1c0      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a5a2:	4b92      	ldr	r3, [pc, #584]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1f0      	bne.n	800a590 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 0304 	and.w	r3, r3, #4
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 8081 	beq.w	800a6be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a5bc:	4b8c      	ldr	r3, [pc, #560]	; (800a7f0 <HAL_RCC_OscConfig+0x770>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a8b      	ldr	r2, [pc, #556]	; (800a7f0 <HAL_RCC_OscConfig+0x770>)
 800a5c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5c8:	f7f9 fefe 	bl	80043c8 <HAL_GetTick>
 800a5cc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5ce:	e008      	b.n	800a5e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5d0:	f7f9 fefa 	bl	80043c8 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	2b64      	cmp	r3, #100	; 0x64
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e1a0      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5e2:	4b83      	ldr	r3, [pc, #524]	; (800a7f0 <HAL_RCC_OscConfig+0x770>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0f0      	beq.n	800a5d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d106      	bne.n	800a604 <HAL_RCC_OscConfig+0x584>
 800a5f6:	4b7d      	ldr	r3, [pc, #500]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fa:	4a7c      	ldr	r2, [pc, #496]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a5fc:	f043 0301 	orr.w	r3, r3, #1
 800a600:	6713      	str	r3, [r2, #112]	; 0x70
 800a602:	e02d      	b.n	800a660 <HAL_RCC_OscConfig+0x5e0>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10c      	bne.n	800a626 <HAL_RCC_OscConfig+0x5a6>
 800a60c:	4b77      	ldr	r3, [pc, #476]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a610:	4a76      	ldr	r2, [pc, #472]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a612:	f023 0301 	bic.w	r3, r3, #1
 800a616:	6713      	str	r3, [r2, #112]	; 0x70
 800a618:	4b74      	ldr	r3, [pc, #464]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61c:	4a73      	ldr	r2, [pc, #460]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a61e:	f023 0304 	bic.w	r3, r3, #4
 800a622:	6713      	str	r3, [r2, #112]	; 0x70
 800a624:	e01c      	b.n	800a660 <HAL_RCC_OscConfig+0x5e0>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	d10c      	bne.n	800a648 <HAL_RCC_OscConfig+0x5c8>
 800a62e:	4b6f      	ldr	r3, [pc, #444]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a632:	4a6e      	ldr	r2, [pc, #440]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a634:	f043 0304 	orr.w	r3, r3, #4
 800a638:	6713      	str	r3, [r2, #112]	; 0x70
 800a63a:	4b6c      	ldr	r3, [pc, #432]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63e:	4a6b      	ldr	r2, [pc, #428]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a640:	f043 0301 	orr.w	r3, r3, #1
 800a644:	6713      	str	r3, [r2, #112]	; 0x70
 800a646:	e00b      	b.n	800a660 <HAL_RCC_OscConfig+0x5e0>
 800a648:	4b68      	ldr	r3, [pc, #416]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a64a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a64c:	4a67      	ldr	r2, [pc, #412]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a64e:	f023 0301 	bic.w	r3, r3, #1
 800a652:	6713      	str	r3, [r2, #112]	; 0x70
 800a654:	4b65      	ldr	r3, [pc, #404]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a658:	4a64      	ldr	r2, [pc, #400]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a65a:	f023 0304 	bic.w	r3, r3, #4
 800a65e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d015      	beq.n	800a694 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a668:	f7f9 feae 	bl	80043c8 <HAL_GetTick>
 800a66c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a66e:	e00a      	b.n	800a686 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a670:	f7f9 feaa 	bl	80043c8 <HAL_GetTick>
 800a674:	4602      	mov	r2, r0
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67e:	4293      	cmp	r3, r2
 800a680:	d901      	bls.n	800a686 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e14e      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a686:	4b59      	ldr	r3, [pc, #356]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0ee      	beq.n	800a670 <HAL_RCC_OscConfig+0x5f0>
 800a692:	e014      	b.n	800a6be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a694:	f7f9 fe98 	bl	80043c8 <HAL_GetTick>
 800a698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a69a:	e00a      	b.n	800a6b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a69c:	f7f9 fe94 	bl	80043c8 <HAL_GetTick>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	1ad3      	subs	r3, r2, r3
 800a6a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d901      	bls.n	800a6b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	e138      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a6b2:	4b4e      	ldr	r3, [pc, #312]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1ee      	bne.n	800a69c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 812d 	beq.w	800a922 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a6c8:	4b48      	ldr	r3, [pc, #288]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6d0:	2b18      	cmp	r3, #24
 800a6d2:	f000 80bd 	beq.w	800a850 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	f040 809e 	bne.w	800a81c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6e0:	4b42      	ldr	r3, [pc, #264]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a41      	ldr	r2, [pc, #260]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a6e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ec:	f7f9 fe6c 	bl	80043c8 <HAL_GetTick>
 800a6f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6f2:	e008      	b.n	800a706 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6f4:	f7f9 fe68 	bl	80043c8 <HAL_GetTick>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d901      	bls.n	800a706 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a702:	2303      	movs	r3, #3
 800a704:	e10e      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a706:	4b39      	ldr	r3, [pc, #228]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f0      	bne.n	800a6f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a712:	4b36      	ldr	r3, [pc, #216]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a716:	4b37      	ldr	r3, [pc, #220]	; (800a7f4 <HAL_RCC_OscConfig+0x774>)
 800a718:	4013      	ands	r3, r2
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a722:	0112      	lsls	r2, r2, #4
 800a724:	430a      	orrs	r2, r1
 800a726:	4931      	ldr	r1, [pc, #196]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	628b      	str	r3, [r1, #40]	; 0x28
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a730:	3b01      	subs	r3, #1
 800a732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73a:	3b01      	subs	r3, #1
 800a73c:	025b      	lsls	r3, r3, #9
 800a73e:	b29b      	uxth	r3, r3
 800a740:	431a      	orrs	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a746:	3b01      	subs	r3, #1
 800a748:	041b      	lsls	r3, r3, #16
 800a74a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a74e:	431a      	orrs	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a754:	3b01      	subs	r3, #1
 800a756:	061b      	lsls	r3, r3, #24
 800a758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a75c:	4923      	ldr	r1, [pc, #140]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a75e:	4313      	orrs	r3, r2
 800a760:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a762:	4b22      	ldr	r3, [pc, #136]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a766:	4a21      	ldr	r2, [pc, #132]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a768:	f023 0301 	bic.w	r3, r3, #1
 800a76c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a76e:	4b1f      	ldr	r3, [pc, #124]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a772:	4b21      	ldr	r3, [pc, #132]	; (800a7f8 <HAL_RCC_OscConfig+0x778>)
 800a774:	4013      	ands	r3, r2
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a77a:	00d2      	lsls	r2, r2, #3
 800a77c:	491b      	ldr	r1, [pc, #108]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a782:	4b1a      	ldr	r3, [pc, #104]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	f023 020c 	bic.w	r2, r3, #12
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78e:	4917      	ldr	r1, [pc, #92]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a790:	4313      	orrs	r3, r2
 800a792:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a794:	4b15      	ldr	r3, [pc, #84]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a798:	f023 0202 	bic.w	r2, r3, #2
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a0:	4912      	ldr	r1, [pc, #72]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a7a6:	4b11      	ldr	r3, [pc, #68]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	4a10      	ldr	r2, [pc, #64]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7b2:	4b0e      	ldr	r3, [pc, #56]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b6:	4a0d      	ldr	r2, [pc, #52]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a7be:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	4a0a      	ldr	r2, [pc, #40]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a7ca:	4b08      	ldr	r3, [pc, #32]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	4a07      	ldr	r2, [pc, #28]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7d0:	f043 0301 	orr.w	r3, r3, #1
 800a7d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7d6:	4b05      	ldr	r3, [pc, #20]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a04      	ldr	r2, [pc, #16]	; (800a7ec <HAL_RCC_OscConfig+0x76c>)
 800a7dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e2:	f7f9 fdf1 	bl	80043c8 <HAL_GetTick>
 800a7e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7e8:	e011      	b.n	800a80e <HAL_RCC_OscConfig+0x78e>
 800a7ea:	bf00      	nop
 800a7ec:	58024400 	.word	0x58024400
 800a7f0:	58024800 	.word	0x58024800
 800a7f4:	fffffc0c 	.word	0xfffffc0c
 800a7f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7fc:	f7f9 fde4 	bl	80043c8 <HAL_GetTick>
 800a800:	4602      	mov	r2, r0
 800a802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	2b02      	cmp	r3, #2
 800a808:	d901      	bls.n	800a80e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e08a      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a80e:	4b47      	ldr	r3, [pc, #284]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0f0      	beq.n	800a7fc <HAL_RCC_OscConfig+0x77c>
 800a81a:	e082      	b.n	800a922 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a81c:	4b43      	ldr	r3, [pc, #268]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a42      	ldr	r2, [pc, #264]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a828:	f7f9 fdce 	bl	80043c8 <HAL_GetTick>
 800a82c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a82e:	e008      	b.n	800a842 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a830:	f7f9 fdca 	bl	80043c8 <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d901      	bls.n	800a842 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e070      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a842:	4b3a      	ldr	r3, [pc, #232]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1f0      	bne.n	800a830 <HAL_RCC_OscConfig+0x7b0>
 800a84e:	e068      	b.n	800a922 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a850:	4b36      	ldr	r3, [pc, #216]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a854:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a856:	4b35      	ldr	r3, [pc, #212]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	2b01      	cmp	r3, #1
 800a862:	d031      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	f003 0203 	and.w	r2, r3, #3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a86e:	429a      	cmp	r2, r3
 800a870:	d12a      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	091b      	lsrs	r3, r3, #4
 800a876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a87e:	429a      	cmp	r2, r3
 800a880:	d122      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a88e:	429a      	cmp	r2, r3
 800a890:	d11a      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	0a5b      	lsrs	r3, r3, #9
 800a896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d111      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	0c1b      	lsrs	r3, r3, #16
 800a8a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d108      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	0e1b      	lsrs	r3, r3, #24
 800a8ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d001      	beq.n	800a8cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e02b      	b.n	800a924 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a8cc:	4b17      	ldr	r3, [pc, #92]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d0:	08db      	lsrs	r3, r3, #3
 800a8d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d01f      	beq.n	800a922 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a8e2:	4b12      	ldr	r3, [pc, #72]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e6:	4a11      	ldr	r2, [pc, #68]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a8e8:	f023 0301 	bic.w	r3, r3, #1
 800a8ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8ee:	f7f9 fd6b 	bl	80043c8 <HAL_GetTick>
 800a8f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a8f4:	bf00      	nop
 800a8f6:	f7f9 fd67 	bl	80043c8 <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d0f9      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a902:	4b0a      	ldr	r3, [pc, #40]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a906:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <HAL_RCC_OscConfig+0x8b0>)
 800a908:	4013      	ands	r3, r2
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a90e:	00d2      	lsls	r2, r2, #3
 800a910:	4906      	ldr	r1, [pc, #24]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a912:	4313      	orrs	r3, r2
 800a914:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a916:	4b05      	ldr	r3, [pc, #20]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91a:	4a04      	ldr	r2, [pc, #16]	; (800a92c <HAL_RCC_OscConfig+0x8ac>)
 800a91c:	f043 0301 	orr.w	r3, r3, #1
 800a920:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3730      	adds	r7, #48	; 0x30
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	58024400 	.word	0x58024400
 800a930:	ffff0007 	.word	0xffff0007

0800a934 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e19c      	b.n	800ac82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a948:	4b8a      	ldr	r3, [pc, #552]	; (800ab74 <HAL_RCC_ClockConfig+0x240>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 030f 	and.w	r3, r3, #15
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	429a      	cmp	r2, r3
 800a954:	d910      	bls.n	800a978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a956:	4b87      	ldr	r3, [pc, #540]	; (800ab74 <HAL_RCC_ClockConfig+0x240>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f023 020f 	bic.w	r2, r3, #15
 800a95e:	4985      	ldr	r1, [pc, #532]	; (800ab74 <HAL_RCC_ClockConfig+0x240>)
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	4313      	orrs	r3, r2
 800a964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a966:	4b83      	ldr	r3, [pc, #524]	; (800ab74 <HAL_RCC_ClockConfig+0x240>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 030f 	and.w	r3, r3, #15
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d001      	beq.n	800a978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e184      	b.n	800ac82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 0304 	and.w	r3, r3, #4
 800a980:	2b00      	cmp	r3, #0
 800a982:	d010      	beq.n	800a9a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	4b7b      	ldr	r3, [pc, #492]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a990:	429a      	cmp	r2, r3
 800a992:	d908      	bls.n	800a9a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a994:	4b78      	ldr	r3, [pc, #480]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	4975      	ldr	r1, [pc, #468]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 0308 	and.w	r3, r3, #8
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d010      	beq.n	800a9d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695a      	ldr	r2, [r3, #20]
 800a9b6:	4b70      	ldr	r3, [pc, #448]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d908      	bls.n	800a9d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9c2:	4b6d      	ldr	r3, [pc, #436]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	496a      	ldr	r1, [pc, #424]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0310 	and.w	r3, r3, #16
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d010      	beq.n	800aa02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	699a      	ldr	r2, [r3, #24]
 800a9e4:	4b64      	ldr	r3, [pc, #400]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d908      	bls.n	800aa02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a9f0:	4b61      	ldr	r3, [pc, #388]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800a9f2:	69db      	ldr	r3, [r3, #28]
 800a9f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	495e      	ldr	r1, [pc, #376]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d010      	beq.n	800aa30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69da      	ldr	r2, [r3, #28]
 800aa12:	4b59      	ldr	r3, [pc, #356]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d908      	bls.n	800aa30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa1e:	4b56      	ldr	r3, [pc, #344]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	4953      	ldr	r1, [pc, #332]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0302 	and.w	r3, r3, #2
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d010      	beq.n	800aa5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68da      	ldr	r2, [r3, #12]
 800aa40:	4b4d      	ldr	r3, [pc, #308]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	f003 030f 	and.w	r3, r3, #15
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d908      	bls.n	800aa5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa4c:	4b4a      	ldr	r3, [pc, #296]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	f023 020f 	bic.w	r2, r3, #15
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	4947      	ldr	r1, [pc, #284]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d055      	beq.n	800ab16 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aa6a:	4b43      	ldr	r3, [pc, #268]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	4940      	ldr	r1, [pc, #256]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d107      	bne.n	800aa94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa84:	4b3c      	ldr	r3, [pc, #240]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d121      	bne.n	800aad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e0f6      	b.n	800ac82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d107      	bne.n	800aaac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa9c:	4b36      	ldr	r3, [pc, #216]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d115      	bne.n	800aad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e0ea      	b.n	800ac82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d107      	bne.n	800aac4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aab4:	4b30      	ldr	r3, [pc, #192]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d109      	bne.n	800aad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e0de      	b.n	800ac82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aac4:	4b2c      	ldr	r3, [pc, #176]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0304 	and.w	r3, r3, #4
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d101      	bne.n	800aad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	e0d6      	b.n	800ac82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aad4:	4b28      	ldr	r3, [pc, #160]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	f023 0207 	bic.w	r2, r3, #7
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	4925      	ldr	r1, [pc, #148]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800aae2:	4313      	orrs	r3, r2
 800aae4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aae6:	f7f9 fc6f 	bl	80043c8 <HAL_GetTick>
 800aaea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaec:	e00a      	b.n	800ab04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaee:	f7f9 fc6b 	bl	80043c8 <HAL_GetTick>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d901      	bls.n	800ab04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e0be      	b.n	800ac82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab04:	4b1c      	ldr	r3, [pc, #112]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	00db      	lsls	r3, r3, #3
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d1eb      	bne.n	800aaee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d010      	beq.n	800ab44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	f003 030f 	and.w	r3, r3, #15
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d208      	bcs.n	800ab44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab32:	4b11      	ldr	r3, [pc, #68]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	f023 020f 	bic.w	r2, r3, #15
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	490e      	ldr	r1, [pc, #56]	; (800ab78 <HAL_RCC_ClockConfig+0x244>)
 800ab40:	4313      	orrs	r3, r2
 800ab42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab44:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <HAL_RCC_ClockConfig+0x240>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 030f 	and.w	r3, r3, #15
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d214      	bcs.n	800ab7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab52:	4b08      	ldr	r3, [pc, #32]	; (800ab74 <HAL_RCC_ClockConfig+0x240>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f023 020f 	bic.w	r2, r3, #15
 800ab5a:	4906      	ldr	r1, [pc, #24]	; (800ab74 <HAL_RCC_ClockConfig+0x240>)
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab62:	4b04      	ldr	r3, [pc, #16]	; (800ab74 <HAL_RCC_ClockConfig+0x240>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 030f 	and.w	r3, r3, #15
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d005      	beq.n	800ab7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e086      	b.n	800ac82 <HAL_RCC_ClockConfig+0x34e>
 800ab74:	52002000 	.word	0x52002000
 800ab78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0304 	and.w	r3, r3, #4
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d010      	beq.n	800abaa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691a      	ldr	r2, [r3, #16]
 800ab8c:	4b3f      	ldr	r3, [pc, #252]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d208      	bcs.n	800abaa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab98:	4b3c      	ldr	r3, [pc, #240]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	4939      	ldr	r1, [pc, #228]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800aba6:	4313      	orrs	r3, r2
 800aba8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 0308 	and.w	r3, r3, #8
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d010      	beq.n	800abd8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	695a      	ldr	r2, [r3, #20]
 800abba:	4b34      	ldr	r3, [pc, #208]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d208      	bcs.n	800abd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abc6:	4b31      	ldr	r3, [pc, #196]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	492e      	ldr	r1, [pc, #184]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800abd4:	4313      	orrs	r3, r2
 800abd6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0310 	and.w	r3, r3, #16
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d010      	beq.n	800ac06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	699a      	ldr	r2, [r3, #24]
 800abe8:	4b28      	ldr	r3, [pc, #160]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d208      	bcs.n	800ac06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abf4:	4b25      	ldr	r3, [pc, #148]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	4922      	ldr	r1, [pc, #136]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800ac02:	4313      	orrs	r3, r2
 800ac04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0320 	and.w	r3, r3, #32
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d010      	beq.n	800ac34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69da      	ldr	r2, [r3, #28]
 800ac16:	4b1d      	ldr	r3, [pc, #116]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d208      	bcs.n	800ac34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac22:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800ac24:	6a1b      	ldr	r3, [r3, #32]
 800ac26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	4917      	ldr	r1, [pc, #92]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac34:	f000 f844 	bl	800acc0 <HAL_RCC_GetSysClockFreq>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	0a1b      	lsrs	r3, r3, #8
 800ac40:	f003 030f 	and.w	r3, r3, #15
 800ac44:	4912      	ldr	r1, [pc, #72]	; (800ac90 <HAL_RCC_ClockConfig+0x35c>)
 800ac46:	5ccb      	ldrb	r3, [r1, r3]
 800ac48:	f003 031f 	and.w	r3, r3, #31
 800ac4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac52:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <HAL_RCC_ClockConfig+0x358>)
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	4a0d      	ldr	r2, [pc, #52]	; (800ac90 <HAL_RCC_ClockConfig+0x35c>)
 800ac5c:	5cd3      	ldrb	r3, [r2, r3]
 800ac5e:	f003 031f 	and.w	r3, r3, #31
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	fa22 f303 	lsr.w	r3, r2, r3
 800ac68:	4a0a      	ldr	r2, [pc, #40]	; (800ac94 <HAL_RCC_ClockConfig+0x360>)
 800ac6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac6c:	4a0a      	ldr	r2, [pc, #40]	; (800ac98 <HAL_RCC_ClockConfig+0x364>)
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ac72:	4b0a      	ldr	r3, [pc, #40]	; (800ac9c <HAL_RCC_ClockConfig+0x368>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7f9 fb5c 	bl	8004334 <HAL_InitTick>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	58024400 	.word	0x58024400
 800ac90:	08020dc8 	.word	0x08020dc8
 800ac94:	20000130 	.word	0x20000130
 800ac98:	2000012c 	.word	0x2000012c
 800ac9c:	20000144 	.word	0x20000144

0800aca0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800aca0:	b480      	push	{r7}
 800aca2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800aca4:	4b05      	ldr	r3, [pc, #20]	; (800acbc <HAL_RCC_EnableCSS+0x1c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a04      	ldr	r2, [pc, #16]	; (800acbc <HAL_RCC_EnableCSS+0x1c>)
 800acaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acae:	6013      	str	r3, [r2, #0]
}
 800acb0:	bf00      	nop
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	58024400 	.word	0x58024400

0800acc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b089      	sub	sp, #36	; 0x24
 800acc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800acc6:	4bb3      	ldr	r3, [pc, #716]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acce:	2b18      	cmp	r3, #24
 800acd0:	f200 8155 	bhi.w	800af7e <HAL_RCC_GetSysClockFreq+0x2be>
 800acd4:	a201      	add	r2, pc, #4	; (adr r2, 800acdc <HAL_RCC_GetSysClockFreq+0x1c>)
 800acd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acda:	bf00      	nop
 800acdc:	0800ad41 	.word	0x0800ad41
 800ace0:	0800af7f 	.word	0x0800af7f
 800ace4:	0800af7f 	.word	0x0800af7f
 800ace8:	0800af7f 	.word	0x0800af7f
 800acec:	0800af7f 	.word	0x0800af7f
 800acf0:	0800af7f 	.word	0x0800af7f
 800acf4:	0800af7f 	.word	0x0800af7f
 800acf8:	0800af7f 	.word	0x0800af7f
 800acfc:	0800ad67 	.word	0x0800ad67
 800ad00:	0800af7f 	.word	0x0800af7f
 800ad04:	0800af7f 	.word	0x0800af7f
 800ad08:	0800af7f 	.word	0x0800af7f
 800ad0c:	0800af7f 	.word	0x0800af7f
 800ad10:	0800af7f 	.word	0x0800af7f
 800ad14:	0800af7f 	.word	0x0800af7f
 800ad18:	0800af7f 	.word	0x0800af7f
 800ad1c:	0800ad6d 	.word	0x0800ad6d
 800ad20:	0800af7f 	.word	0x0800af7f
 800ad24:	0800af7f 	.word	0x0800af7f
 800ad28:	0800af7f 	.word	0x0800af7f
 800ad2c:	0800af7f 	.word	0x0800af7f
 800ad30:	0800af7f 	.word	0x0800af7f
 800ad34:	0800af7f 	.word	0x0800af7f
 800ad38:	0800af7f 	.word	0x0800af7f
 800ad3c:	0800ad73 	.word	0x0800ad73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad40:	4b94      	ldr	r3, [pc, #592]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0320 	and.w	r3, r3, #32
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d009      	beq.n	800ad60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad4c:	4b91      	ldr	r3, [pc, #580]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	08db      	lsrs	r3, r3, #3
 800ad52:	f003 0303 	and.w	r3, r3, #3
 800ad56:	4a90      	ldr	r2, [pc, #576]	; (800af98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad58:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ad5e:	e111      	b.n	800af84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ad60:	4b8d      	ldr	r3, [pc, #564]	; (800af98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad62:	61bb      	str	r3, [r7, #24]
      break;
 800ad64:	e10e      	b.n	800af84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ad66:	4b8d      	ldr	r3, [pc, #564]	; (800af9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad68:	61bb      	str	r3, [r7, #24]
      break;
 800ad6a:	e10b      	b.n	800af84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ad6c:	4b8c      	ldr	r3, [pc, #560]	; (800afa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ad6e:	61bb      	str	r3, [r7, #24]
      break;
 800ad70:	e108      	b.n	800af84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad72:	4b88      	ldr	r3, [pc, #544]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad76:	f003 0303 	and.w	r3, r3, #3
 800ad7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ad7c:	4b85      	ldr	r3, [pc, #532]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad80:	091b      	lsrs	r3, r3, #4
 800ad82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ad88:	4b82      	ldr	r3, [pc, #520]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8c:	f003 0301 	and.w	r3, r3, #1
 800ad90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad92:	4b80      	ldr	r3, [pc, #512]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad96:	08db      	lsrs	r3, r3, #3
 800ad98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	fb02 f303 	mul.w	r3, r2, r3
 800ada2:	ee07 3a90 	vmov	s15, r3
 800ada6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 80e1 	beq.w	800af78 <HAL_RCC_GetSysClockFreq+0x2b8>
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b02      	cmp	r3, #2
 800adba:	f000 8083 	beq.w	800aec4 <HAL_RCC_GetSysClockFreq+0x204>
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	f200 80a1 	bhi.w	800af08 <HAL_RCC_GetSysClockFreq+0x248>
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <HAL_RCC_GetSysClockFreq+0x114>
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d056      	beq.n	800ae80 <HAL_RCC_GetSysClockFreq+0x1c0>
 800add2:	e099      	b.n	800af08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800add4:	4b6f      	ldr	r3, [pc, #444]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0320 	and.w	r3, r3, #32
 800addc:	2b00      	cmp	r3, #0
 800adde:	d02d      	beq.n	800ae3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ade0:	4b6c      	ldr	r3, [pc, #432]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	08db      	lsrs	r3, r3, #3
 800ade6:	f003 0303 	and.w	r3, r3, #3
 800adea:	4a6b      	ldr	r2, [pc, #428]	; (800af98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800adec:	fa22 f303 	lsr.w	r3, r2, r3
 800adf0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	ee07 3a90 	vmov	s15, r3
 800adf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	ee07 3a90 	vmov	s15, r3
 800ae02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0a:	4b62      	ldr	r3, [pc, #392]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800afa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ae3a:	e087      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae46:	eddf 6a58 	vldr	s13, [pc, #352]	; 800afa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ae4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae4e:	4b51      	ldr	r3, [pc, #324]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae62:	eddf 5a50 	vldr	s11, [pc, #320]	; 800afa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae7e:	e065      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800afac <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae92:	4b40      	ldr	r3, [pc, #256]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9a:	ee07 3a90 	vmov	s15, r3
 800ae9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aea6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800afa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aeaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aec2:	e043      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aece:	eddf 6a38 	vldr	s13, [pc, #224]	; 800afb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed6:	4b2f      	ldr	r3, [pc, #188]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aede:	ee07 3a90 	vmov	s15, r3
 800aee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aeea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800afa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aeee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aefa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aefe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af06:	e021      	b.n	800af4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af12:	eddf 6a26 	vldr	s13, [pc, #152]	; 800afac <HAL_RCC_GetSysClockFreq+0x2ec>
 800af16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1a:	4b1e      	ldr	r3, [pc, #120]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2a:	ed97 6a02 	vldr	s12, [r7, #8]
 800af2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800afa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800af4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800af4c:	4b11      	ldr	r3, [pc, #68]	; (800af94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af50:	0a5b      	lsrs	r3, r3, #9
 800af52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af56:	3301      	adds	r3, #1
 800af58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	ee07 3a90 	vmov	s15, r3
 800af60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af64:	edd7 6a07 	vldr	s13, [r7, #28]
 800af68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af70:	ee17 3a90 	vmov	r3, s15
 800af74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800af76:	e005      	b.n	800af84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800af78:	2300      	movs	r3, #0
 800af7a:	61bb      	str	r3, [r7, #24]
      break;
 800af7c:	e002      	b.n	800af84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800af7e:	4b07      	ldr	r3, [pc, #28]	; (800af9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af80:	61bb      	str	r3, [r7, #24]
      break;
 800af82:	bf00      	nop
  }

  return sysclockfreq;
 800af84:	69bb      	ldr	r3, [r7, #24]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3724      	adds	r7, #36	; 0x24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	58024400 	.word	0x58024400
 800af98:	03d09000 	.word	0x03d09000
 800af9c:	003d0900 	.word	0x003d0900
 800afa0:	00989680 	.word	0x00989680
 800afa4:	46000000 	.word	0x46000000
 800afa8:	4c742400 	.word	0x4c742400
 800afac:	4a742400 	.word	0x4a742400
 800afb0:	4b189680 	.word	0x4b189680

0800afb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800afba:	f7ff fe81 	bl	800acc0 <HAL_RCC_GetSysClockFreq>
 800afbe:	4602      	mov	r2, r0
 800afc0:	4b10      	ldr	r3, [pc, #64]	; (800b004 <HAL_RCC_GetHCLKFreq+0x50>)
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	0a1b      	lsrs	r3, r3, #8
 800afc6:	f003 030f 	and.w	r3, r3, #15
 800afca:	490f      	ldr	r1, [pc, #60]	; (800b008 <HAL_RCC_GetHCLKFreq+0x54>)
 800afcc:	5ccb      	ldrb	r3, [r1, r3]
 800afce:	f003 031f 	and.w	r3, r3, #31
 800afd2:	fa22 f303 	lsr.w	r3, r2, r3
 800afd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800afd8:	4b0a      	ldr	r3, [pc, #40]	; (800b004 <HAL_RCC_GetHCLKFreq+0x50>)
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	f003 030f 	and.w	r3, r3, #15
 800afe0:	4a09      	ldr	r2, [pc, #36]	; (800b008 <HAL_RCC_GetHCLKFreq+0x54>)
 800afe2:	5cd3      	ldrb	r3, [r2, r3]
 800afe4:	f003 031f 	and.w	r3, r3, #31
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	fa22 f303 	lsr.w	r3, r2, r3
 800afee:	4a07      	ldr	r2, [pc, #28]	; (800b00c <HAL_RCC_GetHCLKFreq+0x58>)
 800aff0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aff2:	4a07      	ldr	r2, [pc, #28]	; (800b010 <HAL_RCC_GetHCLKFreq+0x5c>)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aff8:	4b04      	ldr	r3, [pc, #16]	; (800b00c <HAL_RCC_GetHCLKFreq+0x58>)
 800affa:	681b      	ldr	r3, [r3, #0]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	58024400 	.word	0x58024400
 800b008:	08020dc8 	.word	0x08020dc8
 800b00c:	20000130 	.word	0x20000130
 800b010:	2000012c 	.word	0x2000012c

0800b014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b018:	f7ff ffcc 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800b01c:	4602      	mov	r2, r0
 800b01e:	4b06      	ldr	r3, [pc, #24]	; (800b038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	091b      	lsrs	r3, r3, #4
 800b024:	f003 0307 	and.w	r3, r3, #7
 800b028:	4904      	ldr	r1, [pc, #16]	; (800b03c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b02a:	5ccb      	ldrb	r3, [r1, r3]
 800b02c:	f003 031f 	and.w	r3, r3, #31
 800b030:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b034:	4618      	mov	r0, r3
 800b036:	bd80      	pop	{r7, pc}
 800b038:	58024400 	.word	0x58024400
 800b03c:	08020dc8 	.word	0x08020dc8

0800b040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b044:	f7ff ffb6 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800b048:	4602      	mov	r2, r0
 800b04a:	4b06      	ldr	r3, [pc, #24]	; (800b064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b04c:	69db      	ldr	r3, [r3, #28]
 800b04e:	0a1b      	lsrs	r3, r3, #8
 800b050:	f003 0307 	and.w	r3, r3, #7
 800b054:	4904      	ldr	r1, [pc, #16]	; (800b068 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b056:	5ccb      	ldrb	r3, [r1, r3]
 800b058:	f003 031f 	and.w	r3, r3, #31
 800b05c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b060:	4618      	mov	r0, r3
 800b062:	bd80      	pop	{r7, pc}
 800b064:	58024400 	.word	0x58024400
 800b068:	08020dc8 	.word	0x08020dc8

0800b06c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b07c:	d105      	bne.n	800b08a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800b07e:	f000 f809 	bl	800b094 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800b082:	4b03      	ldr	r3, [pc, #12]	; (800b090 <HAL_RCC_NMI_IRQHandler+0x24>)
 800b084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b088:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800b08a:	bf00      	nop
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	58024400 	.word	0x58024400

0800b094 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800b094:	b480      	push	{r7}
 800b096:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800b098:	bf00      	nop
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
	...

0800b0a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0a8:	b0ca      	sub	sp, #296	; 0x128
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b0c8:	2500      	movs	r5, #0
 800b0ca:	ea54 0305 	orrs.w	r3, r4, r5
 800b0ce:	d049      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0da:	d02f      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b0dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0e0:	d828      	bhi.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b0e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0e6:	d01a      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b0e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0ec:	d822      	bhi.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b0f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0f6:	d007      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b0f8:	e01c      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0fa:	4bb8      	ldr	r3, [pc, #736]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fe:	4ab7      	ldr	r2, [pc, #732]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b104:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b106:	e01a      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b10c:	3308      	adds	r3, #8
 800b10e:	2102      	movs	r1, #2
 800b110:	4618      	mov	r0, r3
 800b112:	f002 fbb7 	bl	800d884 <RCCEx_PLL2_Config>
 800b116:	4603      	mov	r3, r0
 800b118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b11c:	e00f      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b122:	3328      	adds	r3, #40	; 0x28
 800b124:	2102      	movs	r1, #2
 800b126:	4618      	mov	r0, r3
 800b128:	f002 fc5e 	bl	800d9e8 <RCCEx_PLL3_Config>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b132:	e004      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b13a:	e000      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b13c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b13e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10a      	bne.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b146:	4ba5      	ldr	r3, [pc, #660]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b14a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b154:	4aa1      	ldr	r2, [pc, #644]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b156:	430b      	orrs	r3, r1
 800b158:	6513      	str	r3, [r2, #80]	; 0x50
 800b15a:	e003      	b.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b15c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b170:	f04f 0900 	mov.w	r9, #0
 800b174:	ea58 0309 	orrs.w	r3, r8, r9
 800b178:	d047      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b180:	2b04      	cmp	r3, #4
 800b182:	d82a      	bhi.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b184:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b1a1 	.word	0x0800b1a1
 800b190:	0800b1af 	.word	0x0800b1af
 800b194:	0800b1c5 	.word	0x0800b1c5
 800b198:	0800b1e3 	.word	0x0800b1e3
 800b19c:	0800b1e3 	.word	0x0800b1e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1a0:	4b8e      	ldr	r3, [pc, #568]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	4a8d      	ldr	r2, [pc, #564]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1ac:	e01a      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f002 fb64 	bl	800d884 <RCCEx_PLL2_Config>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1c2:	e00f      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c8:	3328      	adds	r3, #40	; 0x28
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f002 fc0b 	bl	800d9e8 <RCCEx_PLL3_Config>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1d8:	e004      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1e0:	e000      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b1e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10a      	bne.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b1ec:	4b7b      	ldr	r3, [pc, #492]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f0:	f023 0107 	bic.w	r1, r3, #7
 800b1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1fa:	4a78      	ldr	r2, [pc, #480]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	6513      	str	r3, [r2, #80]	; 0x50
 800b200:	e003      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b216:	f04f 0b00 	mov.w	fp, #0
 800b21a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b21e:	d04c      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b22a:	d030      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b22c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b230:	d829      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b232:	2bc0      	cmp	r3, #192	; 0xc0
 800b234:	d02d      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b236:	2bc0      	cmp	r3, #192	; 0xc0
 800b238:	d825      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b23a:	2b80      	cmp	r3, #128	; 0x80
 800b23c:	d018      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b23e:	2b80      	cmp	r3, #128	; 0x80
 800b240:	d821      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d002      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b246:	2b40      	cmp	r3, #64	; 0x40
 800b248:	d007      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b24a:	e01c      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b24c:	4b63      	ldr	r3, [pc, #396]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b250:	4a62      	ldr	r2, [pc, #392]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b258:	e01c      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25e:	3308      	adds	r3, #8
 800b260:	2100      	movs	r1, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f002 fb0e 	bl	800d884 <RCCEx_PLL2_Config>
 800b268:	4603      	mov	r3, r0
 800b26a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b26e:	e011      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b274:	3328      	adds	r3, #40	; 0x28
 800b276:	2100      	movs	r1, #0
 800b278:	4618      	mov	r0, r3
 800b27a:	f002 fbb5 	bl	800d9e8 <RCCEx_PLL3_Config>
 800b27e:	4603      	mov	r3, r0
 800b280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b284:	e006      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b28c:	e002      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b28e:	bf00      	nop
 800b290:	e000      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b292:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b29c:	4b4f      	ldr	r3, [pc, #316]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2aa:	4a4c      	ldr	r2, [pc, #304]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	6513      	str	r3, [r2, #80]	; 0x50
 800b2b0:	e003      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b2c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b2d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	d053      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2e6:	d035      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b2e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2ec:	d82e      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b2ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b2f2:	d031      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b2f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b2f8:	d828      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b2fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2fe:	d01a      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b304:	d822      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b30a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b30e:	d007      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b310:	e01c      	b.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b312:	4b32      	ldr	r3, [pc, #200]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b316:	4a31      	ldr	r2, [pc, #196]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b31c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b31e:	e01c      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b324:	3308      	adds	r3, #8
 800b326:	2100      	movs	r1, #0
 800b328:	4618      	mov	r0, r3
 800b32a:	f002 faab 	bl	800d884 <RCCEx_PLL2_Config>
 800b32e:	4603      	mov	r3, r0
 800b330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b334:	e011      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33a:	3328      	adds	r3, #40	; 0x28
 800b33c:	2100      	movs	r1, #0
 800b33e:	4618      	mov	r0, r3
 800b340:	f002 fb52 	bl	800d9e8 <RCCEx_PLL3_Config>
 800b344:	4603      	mov	r3, r0
 800b346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b34a:	e006      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b352:	e002      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b354:	bf00      	nop
 800b356:	e000      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10b      	bne.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b362:	4b1e      	ldr	r3, [pc, #120]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b366:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b372:	4a1a      	ldr	r2, [pc, #104]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b374:	430b      	orrs	r3, r1
 800b376:	6593      	str	r3, [r2, #88]	; 0x58
 800b378:	e003      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b37e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b38e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b392:	2300      	movs	r3, #0
 800b394:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b398:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b39c:	460b      	mov	r3, r1
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	d056      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3ae:	d038      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b3b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3b4:	d831      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3ba:	d034      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b3bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3c0:	d82b      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3c6:	d01d      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b3c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3cc:	d825      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d006      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b3d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3d6:	d00a      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b3d8:	e01f      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3da:	bf00      	nop
 800b3dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3e0:	4ba2      	ldr	r3, [pc, #648]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4aa1      	ldr	r2, [pc, #644]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3ec:	e01c      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f002 fa44 	bl	800d884 <RCCEx_PLL2_Config>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b402:	e011      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b408:	3328      	adds	r3, #40	; 0x28
 800b40a:	2100      	movs	r1, #0
 800b40c:	4618      	mov	r0, r3
 800b40e:	f002 faeb 	bl	800d9e8 <RCCEx_PLL3_Config>
 800b412:	4603      	mov	r3, r0
 800b414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b418:	e006      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b420:	e002      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b422:	bf00      	nop
 800b424:	e000      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b426:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b430:	4b8e      	ldr	r3, [pc, #568]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b434:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b43c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b440:	4a8a      	ldr	r2, [pc, #552]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b442:	430b      	orrs	r3, r1
 800b444:	6593      	str	r3, [r2, #88]	; 0x58
 800b446:	e003      	b.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b44c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b458:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b45c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b460:	2300      	movs	r3, #0
 800b462:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b466:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b46a:	460b      	mov	r3, r1
 800b46c:	4313      	orrs	r3, r2
 800b46e:	d03a      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b476:	2b30      	cmp	r3, #48	; 0x30
 800b478:	d01f      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b47a:	2b30      	cmp	r3, #48	; 0x30
 800b47c:	d819      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b47e:	2b20      	cmp	r3, #32
 800b480:	d00c      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b482:	2b20      	cmp	r3, #32
 800b484:	d815      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d019      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b48a:	2b10      	cmp	r3, #16
 800b48c:	d111      	bne.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b48e:	4b77      	ldr	r3, [pc, #476]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b492:	4a76      	ldr	r2, [pc, #472]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b498:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b49a:	e011      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	2102      	movs	r1, #2
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f002 f9ed 	bl	800d884 <RCCEx_PLL2_Config>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4b0:	e006      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4b8:	e002      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4ba:	bf00      	nop
 800b4bc:	e000      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b4c8:	4b68      	ldr	r3, [pc, #416]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4d6:	4a65      	ldr	r2, [pc, #404]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4d8:	430b      	orrs	r3, r1
 800b4da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4dc:	e003      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b4f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b4fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b500:	460b      	mov	r3, r1
 800b502:	4313      	orrs	r3, r2
 800b504:	d051      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b50c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b510:	d035      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b516:	d82e      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b51c:	d031      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b51e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b522:	d828      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b528:	d01a      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b52a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b52e:	d822      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b538:	d007      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b53a:	e01c      	b.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b53c:	4b4b      	ldr	r3, [pc, #300]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	4a4a      	ldr	r2, [pc, #296]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b548:	e01c      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54e:	3308      	adds	r3, #8
 800b550:	2100      	movs	r1, #0
 800b552:	4618      	mov	r0, r3
 800b554:	f002 f996 	bl	800d884 <RCCEx_PLL2_Config>
 800b558:	4603      	mov	r3, r0
 800b55a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b55e:	e011      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b564:	3328      	adds	r3, #40	; 0x28
 800b566:	2100      	movs	r1, #0
 800b568:	4618      	mov	r0, r3
 800b56a:	f002 fa3d 	bl	800d9e8 <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b574:	e006      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b57c:	e002      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b57e:	bf00      	nop
 800b580:	e000      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b582:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b58c:	4b37      	ldr	r3, [pc, #220]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b58e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b590:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b59a:	4a34      	ldr	r2, [pc, #208]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b59c:	430b      	orrs	r3, r1
 800b59e:	6513      	str	r3, [r2, #80]	; 0x50
 800b5a0:	e003      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b5b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b5c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	d056      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5d4:	d033      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b5d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5da:	d82c      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5e0:	d02f      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b5e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5e6:	d826      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5ec:	d02b      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b5ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5f2:	d820      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5f8:	d012      	beq.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b5fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5fe:	d81a      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b600:	2b00      	cmp	r3, #0
 800b602:	d022      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b608:	d115      	bne.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	3308      	adds	r3, #8
 800b610:	2101      	movs	r1, #1
 800b612:	4618      	mov	r0, r3
 800b614:	f002 f936 	bl	800d884 <RCCEx_PLL2_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b61e:	e015      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b624:	3328      	adds	r3, #40	; 0x28
 800b626:	2101      	movs	r1, #1
 800b628:	4618      	mov	r0, r3
 800b62a:	f002 f9dd 	bl	800d9e8 <RCCEx_PLL3_Config>
 800b62e:	4603      	mov	r3, r0
 800b630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b634:	e00a      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b63c:	e006      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b63e:	bf00      	nop
 800b640:	e004      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b642:	bf00      	nop
 800b644:	e002      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b646:	bf00      	nop
 800b648:	e000      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b64a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b64c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10d      	bne.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b654:	4b05      	ldr	r3, [pc, #20]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b658:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b662:	4a02      	ldr	r2, [pc, #8]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b664:	430b      	orrs	r3, r1
 800b666:	6513      	str	r3, [r2, #80]	; 0x50
 800b668:	e006      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b66a:	bf00      	nop
 800b66c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b688:	2300      	movs	r3, #0
 800b68a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b68e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b692:	460b      	mov	r3, r1
 800b694:	4313      	orrs	r3, r2
 800b696:	d055      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b69c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6a4:	d033      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b6a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6aa:	d82c      	bhi.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b0:	d02f      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b6:	d826      	bhi.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6bc:	d02b      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b6be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6c2:	d820      	bhi.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6c8:	d012      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b6ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ce:	d81a      	bhi.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d022      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b6d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6d8:	d115      	bne.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6de:	3308      	adds	r3, #8
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f002 f8ce 	bl	800d884 <RCCEx_PLL2_Config>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b6ee:	e015      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f4:	3328      	adds	r3, #40	; 0x28
 800b6f6:	2101      	movs	r1, #1
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f002 f975 	bl	800d9e8 <RCCEx_PLL3_Config>
 800b6fe:	4603      	mov	r3, r0
 800b700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b704:	e00a      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b70c:	e006      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b70e:	bf00      	nop
 800b710:	e004      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b712:	bf00      	nop
 800b714:	e002      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b716:	bf00      	nop
 800b718:	e000      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b71a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b71c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10b      	bne.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b724:	4ba3      	ldr	r3, [pc, #652]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b728:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b734:	4a9f      	ldr	r2, [pc, #636]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b736:	430b      	orrs	r3, r1
 800b738:	6593      	str	r3, [r2, #88]	; 0x58
 800b73a:	e003      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b754:	2300      	movs	r3, #0
 800b756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b75a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b75e:	460b      	mov	r3, r1
 800b760:	4313      	orrs	r3, r2
 800b762:	d037      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b76a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b76e:	d00e      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b774:	d816      	bhi.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d018      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b77a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b77e:	d111      	bne.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b780:	4b8c      	ldr	r3, [pc, #560]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b784:	4a8b      	ldr	r2, [pc, #556]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b78a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b78c:	e00f      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b792:	3308      	adds	r3, #8
 800b794:	2101      	movs	r1, #1
 800b796:	4618      	mov	r0, r3
 800b798:	f002 f874 	bl	800d884 <RCCEx_PLL2_Config>
 800b79c:	4603      	mov	r3, r0
 800b79e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7a2:	e004      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7aa:	e000      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b7ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10a      	bne.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b7b6:	4b7f      	ldr	r3, [pc, #508]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c4:	4a7b      	ldr	r2, [pc, #492]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7c6:	430b      	orrs	r3, r1
 800b7c8:	6513      	str	r3, [r2, #80]	; 0x50
 800b7ca:	e003      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b7e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b7ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	d039      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d81c      	bhi.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b7fe:	a201      	add	r2, pc, #4	; (adr r2, 800b804 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b804:	0800b841 	.word	0x0800b841
 800b808:	0800b815 	.word	0x0800b815
 800b80c:	0800b823 	.word	0x0800b823
 800b810:	0800b841 	.word	0x0800b841
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b814:	4b67      	ldr	r3, [pc, #412]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	4a66      	ldr	r2, [pc, #408]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b81a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b81e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b820:	e00f      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b826:	3308      	adds	r3, #8
 800b828:	2102      	movs	r1, #2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f002 f82a 	bl	800d884 <RCCEx_PLL2_Config>
 800b830:	4603      	mov	r3, r0
 800b832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b836:	e004      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b83e:	e000      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10a      	bne.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b84a:	4b5a      	ldr	r3, [pc, #360]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b84e:	f023 0103 	bic.w	r1, r3, #3
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b858:	4a56      	ldr	r2, [pc, #344]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b85a:	430b      	orrs	r3, r1
 800b85c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b85e:	e003      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b87e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	f000 809f 	beq.w	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b88a:	4b4b      	ldr	r3, [pc, #300]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a4a      	ldr	r2, [pc, #296]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b896:	f7f8 fd97 	bl	80043c8 <HAL_GetTick>
 800b89a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b89e:	e00b      	b.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8a0:	f7f8 fd92 	bl	80043c8 <HAL_GetTick>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	2b64      	cmp	r3, #100	; 0x64
 800b8ae:	d903      	bls.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8b6:	e005      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8b8:	4b3f      	ldr	r3, [pc, #252]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d0ed      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b8c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d179      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b8cc:	4b39      	ldr	r3, [pc, #228]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8d8:	4053      	eors	r3, r2
 800b8da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d015      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8e2:	4b34      	ldr	r3, [pc, #208]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b8ee:	4b31      	ldr	r3, [pc, #196]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f2:	4a30      	ldr	r2, [pc, #192]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b8fa:	4b2e      	ldr	r3, [pc, #184]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fe:	4a2d      	ldr	r2, [pc, #180]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b904:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b906:	4a2b      	ldr	r2, [pc, #172]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b90c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b91a:	d118      	bne.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b91c:	f7f8 fd54 	bl	80043c8 <HAL_GetTick>
 800b920:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b924:	e00d      	b.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b926:	f7f8 fd4f 	bl	80043c8 <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b930:	1ad2      	subs	r2, r2, r3
 800b932:	f241 3388 	movw	r3, #5000	; 0x1388
 800b936:	429a      	cmp	r2, r3
 800b938:	d903      	bls.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b940:	e005      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b942:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d0eb      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b94e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b952:	2b00      	cmp	r3, #0
 800b954:	d129      	bne.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b95e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b966:	d10e      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b968:	4b12      	ldr	r3, [pc, #72]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b978:	091a      	lsrs	r2, r3, #4
 800b97a:	4b10      	ldr	r3, [pc, #64]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b97c:	4013      	ands	r3, r2
 800b97e:	4a0d      	ldr	r2, [pc, #52]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b980:	430b      	orrs	r3, r1
 800b982:	6113      	str	r3, [r2, #16]
 800b984:	e005      	b.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b986:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	4a0a      	ldr	r2, [pc, #40]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b98c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b990:	6113      	str	r3, [r2, #16]
 800b992:	4b08      	ldr	r3, [pc, #32]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b994:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b99e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9a2:	4a04      	ldr	r2, [pc, #16]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9a4:	430b      	orrs	r3, r1
 800b9a6:	6713      	str	r3, [r2, #112]	; 0x70
 800b9a8:	e00e      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b9b2:	e009      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b9b4:	58024400 	.word	0x58024400
 800b9b8:	58024800 	.word	0x58024800
 800b9bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f002 0301 	and.w	r3, r2, #1
 800b9d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	f000 8089 	beq.w	800bafc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9f0:	2b28      	cmp	r3, #40	; 0x28
 800b9f2:	d86b      	bhi.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b9f4:	a201      	add	r2, pc, #4	; (adr r2, 800b9fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fa:	bf00      	nop
 800b9fc:	0800bad5 	.word	0x0800bad5
 800ba00:	0800bacd 	.word	0x0800bacd
 800ba04:	0800bacd 	.word	0x0800bacd
 800ba08:	0800bacd 	.word	0x0800bacd
 800ba0c:	0800bacd 	.word	0x0800bacd
 800ba10:	0800bacd 	.word	0x0800bacd
 800ba14:	0800bacd 	.word	0x0800bacd
 800ba18:	0800bacd 	.word	0x0800bacd
 800ba1c:	0800baa1 	.word	0x0800baa1
 800ba20:	0800bacd 	.word	0x0800bacd
 800ba24:	0800bacd 	.word	0x0800bacd
 800ba28:	0800bacd 	.word	0x0800bacd
 800ba2c:	0800bacd 	.word	0x0800bacd
 800ba30:	0800bacd 	.word	0x0800bacd
 800ba34:	0800bacd 	.word	0x0800bacd
 800ba38:	0800bacd 	.word	0x0800bacd
 800ba3c:	0800bab7 	.word	0x0800bab7
 800ba40:	0800bacd 	.word	0x0800bacd
 800ba44:	0800bacd 	.word	0x0800bacd
 800ba48:	0800bacd 	.word	0x0800bacd
 800ba4c:	0800bacd 	.word	0x0800bacd
 800ba50:	0800bacd 	.word	0x0800bacd
 800ba54:	0800bacd 	.word	0x0800bacd
 800ba58:	0800bacd 	.word	0x0800bacd
 800ba5c:	0800bad5 	.word	0x0800bad5
 800ba60:	0800bacd 	.word	0x0800bacd
 800ba64:	0800bacd 	.word	0x0800bacd
 800ba68:	0800bacd 	.word	0x0800bacd
 800ba6c:	0800bacd 	.word	0x0800bacd
 800ba70:	0800bacd 	.word	0x0800bacd
 800ba74:	0800bacd 	.word	0x0800bacd
 800ba78:	0800bacd 	.word	0x0800bacd
 800ba7c:	0800bad5 	.word	0x0800bad5
 800ba80:	0800bacd 	.word	0x0800bacd
 800ba84:	0800bacd 	.word	0x0800bacd
 800ba88:	0800bacd 	.word	0x0800bacd
 800ba8c:	0800bacd 	.word	0x0800bacd
 800ba90:	0800bacd 	.word	0x0800bacd
 800ba94:	0800bacd 	.word	0x0800bacd
 800ba98:	0800bacd 	.word	0x0800bacd
 800ba9c:	0800bad5 	.word	0x0800bad5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa4:	3308      	adds	r3, #8
 800baa6:	2101      	movs	r1, #1
 800baa8:	4618      	mov	r0, r3
 800baaa:	f001 feeb 	bl	800d884 <RCCEx_PLL2_Config>
 800baae:	4603      	mov	r3, r0
 800bab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bab4:	e00f      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baba:	3328      	adds	r3, #40	; 0x28
 800babc:	2101      	movs	r1, #1
 800babe:	4618      	mov	r0, r3
 800bac0:	f001 ff92 	bl	800d9e8 <RCCEx_PLL3_Config>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800baca:	e004      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bad2:	e000      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10a      	bne.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bade:	4bbf      	ldr	r3, [pc, #764]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baec:	4abb      	ldr	r2, [pc, #748]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800baee:	430b      	orrs	r3, r1
 800baf0:	6553      	str	r3, [r2, #84]	; 0x54
 800baf2:	e003      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f002 0302 	and.w	r3, r2, #2
 800bb08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bb16:	460b      	mov	r3, r1
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	d041      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bb1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb22:	2b05      	cmp	r3, #5
 800bb24:	d824      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb79 	.word	0x0800bb79
 800bb30:	0800bb45 	.word	0x0800bb45
 800bb34:	0800bb5b 	.word	0x0800bb5b
 800bb38:	0800bb79 	.word	0x0800bb79
 800bb3c:	0800bb79 	.word	0x0800bb79
 800bb40:	0800bb79 	.word	0x0800bb79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb48:	3308      	adds	r3, #8
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 fe99 	bl	800d884 <RCCEx_PLL2_Config>
 800bb52:	4603      	mov	r3, r0
 800bb54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb58:	e00f      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5e:	3328      	adds	r3, #40	; 0x28
 800bb60:	2101      	movs	r1, #1
 800bb62:	4618      	mov	r0, r3
 800bb64:	f001 ff40 	bl	800d9e8 <RCCEx_PLL3_Config>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb6e:	e004      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb76:	e000      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bb78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10a      	bne.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb82:	4b96      	ldr	r3, [pc, #600]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb86:	f023 0107 	bic.w	r1, r3, #7
 800bb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb90:	4a92      	ldr	r2, [pc, #584]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb92:	430b      	orrs	r3, r1
 800bb94:	6553      	str	r3, [r2, #84]	; 0x54
 800bb96:	e003      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f002 0304 	and.w	r3, r2, #4
 800bbac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	d044      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bbc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbc8:	2b05      	cmp	r3, #5
 800bbca:	d825      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bbcc:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bc21 	.word	0x0800bc21
 800bbd8:	0800bbed 	.word	0x0800bbed
 800bbdc:	0800bc03 	.word	0x0800bc03
 800bbe0:	0800bc21 	.word	0x0800bc21
 800bbe4:	0800bc21 	.word	0x0800bc21
 800bbe8:	0800bc21 	.word	0x0800bc21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	2101      	movs	r1, #1
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f001 fe45 	bl	800d884 <RCCEx_PLL2_Config>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc00:	e00f      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc06:	3328      	adds	r3, #40	; 0x28
 800bc08:	2101      	movs	r1, #1
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 feec 	bl	800d9e8 <RCCEx_PLL3_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc16:	e004      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc1e:	e000      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bc20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc2a:	4b6c      	ldr	r3, [pc, #432]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc2e:	f023 0107 	bic.w	r1, r3, #7
 800bc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc3a:	4a68      	ldr	r2, [pc, #416]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc3c:	430b      	orrs	r3, r1
 800bc3e:	6593      	str	r3, [r2, #88]	; 0x58
 800bc40:	e003      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	f002 0320 	and.w	r3, r2, #32
 800bc56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc64:	460b      	mov	r3, r1
 800bc66:	4313      	orrs	r3, r2
 800bc68:	d055      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc76:	d033      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bc78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc7c:	d82c      	bhi.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc82:	d02f      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bc84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc88:	d826      	bhi.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc8e:	d02b      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bc90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc94:	d820      	bhi.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc9a:	d012      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bc9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bca0:	d81a      	bhi.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d022      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcaa:	d115      	bne.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f001 fde5 	bl	800d884 <RCCEx_PLL2_Config>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcc0:	e015      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc6:	3328      	adds	r3, #40	; 0x28
 800bcc8:	2102      	movs	r1, #2
 800bcca:	4618      	mov	r0, r3
 800bccc:	f001 fe8c 	bl	800d9e8 <RCCEx_PLL3_Config>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcd6:	e00a      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcde:	e006      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bce0:	bf00      	nop
 800bce2:	e004      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bce4:	bf00      	nop
 800bce6:	e002      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bce8:	bf00      	nop
 800bcea:	e000      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10b      	bne.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcf6:	4b39      	ldr	r3, [pc, #228]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bcfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd06:	4a35      	ldr	r2, [pc, #212]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd08:	430b      	orrs	r3, r1
 800bd0a:	6553      	str	r3, [r2, #84]	; 0x54
 800bd0c:	e003      	b.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bd22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd26:	2300      	movs	r3, #0
 800bd28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bd2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4313      	orrs	r3, r2
 800bd34:	d058      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bd36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd42:	d033      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bd44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd48:	d82c      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd4e:	d02f      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bd50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd54:	d826      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd5a:	d02b      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bd5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd60:	d820      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd66:	d012      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bd68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd6c:	d81a      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d022      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bd72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd76:	d115      	bne.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	2100      	movs	r1, #0
 800bd80:	4618      	mov	r0, r3
 800bd82:	f001 fd7f 	bl	800d884 <RCCEx_PLL2_Config>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd8c:	e015      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd92:	3328      	adds	r3, #40	; 0x28
 800bd94:	2102      	movs	r1, #2
 800bd96:	4618      	mov	r0, r3
 800bd98:	f001 fe26 	bl	800d9e8 <RCCEx_PLL3_Config>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bda2:	e00a      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdaa:	e006      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdac:	bf00      	nop
 800bdae:	e004      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdb0:	bf00      	nop
 800bdb2:	e002      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdb4:	bf00      	nop
 800bdb6:	e000      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10e      	bne.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bdc2:	4b06      	ldr	r3, [pc, #24]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bdca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdd2:	4a02      	ldr	r2, [pc, #8]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdd4:	430b      	orrs	r3, r1
 800bdd6:	6593      	str	r3, [r2, #88]	; 0x58
 800bdd8:	e006      	b.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bdda:	bf00      	nop
 800bddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bde4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bde8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bdf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bdfe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800be02:	460b      	mov	r3, r1
 800be04:	4313      	orrs	r3, r2
 800be06:	d055      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800be08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be14:	d033      	beq.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800be16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be1a:	d82c      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be20:	d02f      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800be22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be26:	d826      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be2c:	d02b      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800be2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be32:	d820      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be38:	d012      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800be3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be3e:	d81a      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be40:	2b00      	cmp	r3, #0
 800be42:	d022      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800be44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be48:	d115      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4e:	3308      	adds	r3, #8
 800be50:	2100      	movs	r1, #0
 800be52:	4618      	mov	r0, r3
 800be54:	f001 fd16 	bl	800d884 <RCCEx_PLL2_Config>
 800be58:	4603      	mov	r3, r0
 800be5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be5e:	e015      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be64:	3328      	adds	r3, #40	; 0x28
 800be66:	2102      	movs	r1, #2
 800be68:	4618      	mov	r0, r3
 800be6a:	f001 fdbd 	bl	800d9e8 <RCCEx_PLL3_Config>
 800be6e:	4603      	mov	r3, r0
 800be70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be74:	e00a      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be7c:	e006      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be7e:	bf00      	nop
 800be80:	e004      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be82:	bf00      	nop
 800be84:	e002      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be86:	bf00      	nop
 800be88:	e000      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10b      	bne.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be94:	4ba1      	ldr	r3, [pc, #644]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be98:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800be9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bea4:	4a9d      	ldr	r2, [pc, #628]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bea6:	430b      	orrs	r3, r1
 800bea8:	6593      	str	r3, [r2, #88]	; 0x58
 800beaa:	e003      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800beb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	f002 0308 	and.w	r3, r2, #8
 800bec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bec4:	2300      	movs	r3, #0
 800bec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800beca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bece:	460b      	mov	r3, r1
 800bed0:	4313      	orrs	r3, r2
 800bed2:	d01e      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bedc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee0:	d10c      	bne.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee6:	3328      	adds	r3, #40	; 0x28
 800bee8:	2102      	movs	r1, #2
 800beea:	4618      	mov	r0, r3
 800beec:	f001 fd7c 	bl	800d9e8 <RCCEx_PLL3_Config>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800befc:	4b87      	ldr	r3, [pc, #540]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800befe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf0c:	4a83      	ldr	r2, [pc, #524]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf0e:	430b      	orrs	r3, r1
 800bf10:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1a:	f002 0310 	and.w	r3, r2, #16
 800bf1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf22:	2300      	movs	r3, #0
 800bf24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	d01e      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bf32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf3e:	d10c      	bne.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf44:	3328      	adds	r3, #40	; 0x28
 800bf46:	2102      	movs	r1, #2
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f001 fd4d 	bl	800d9e8 <RCCEx_PLL3_Config>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf5a:	4b70      	ldr	r3, [pc, #448]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf6a:	4a6c      	ldr	r2, [pc, #432]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf6c:	430b      	orrs	r3, r1
 800bf6e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf78:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf80:	2300      	movs	r3, #0
 800bf82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	d03e      	beq.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bf90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf9c:	d022      	beq.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bf9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfa2:	d81b      	bhi.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bfa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfac:	d00b      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bfae:	e015      	b.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb4:	3308      	adds	r3, #8
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f001 fc63 	bl	800d884 <RCCEx_PLL2_Config>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfc4:	e00f      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfca:	3328      	adds	r3, #40	; 0x28
 800bfcc:	2102      	movs	r1, #2
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f001 fd0a 	bl	800d9e8 <RCCEx_PLL3_Config>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfda:	e004      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfe2:	e000      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bfe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10b      	bne.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bfee:	4b4b      	ldr	r3, [pc, #300]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bff2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bffe:	4a47      	ldr	r2, [pc, #284]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c000:	430b      	orrs	r3, r1
 800c002:	6593      	str	r3, [r2, #88]	; 0x58
 800c004:	e003      	b.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c00a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c01a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c01c:	2300      	movs	r3, #0
 800c01e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c020:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c024:	460b      	mov	r3, r1
 800c026:	4313      	orrs	r3, r2
 800c028:	d03b      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c036:	d01f      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c038:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c03c:	d818      	bhi.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c03e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c042:	d003      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c048:	d007      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c04a:	e011      	b.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c04c:	4b33      	ldr	r3, [pc, #204]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c050:	4a32      	ldr	r2, [pc, #200]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c058:	e00f      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c05e:	3328      	adds	r3, #40	; 0x28
 800c060:	2101      	movs	r1, #1
 800c062:	4618      	mov	r0, r3
 800c064:	f001 fcc0 	bl	800d9e8 <RCCEx_PLL3_Config>
 800c068:	4603      	mov	r3, r0
 800c06a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c06e:	e004      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c076:	e000      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c07a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10b      	bne.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c082:	4b26      	ldr	r3, [pc, #152]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c086:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c092:	4a22      	ldr	r2, [pc, #136]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c094:	430b      	orrs	r3, r1
 800c096:	6553      	str	r3, [r2, #84]	; 0x54
 800c098:	e003      	b.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c09a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c09e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c0ae:	673b      	str	r3, [r7, #112]	; 0x70
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	677b      	str	r3, [r7, #116]	; 0x74
 800c0b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	d034      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0cc:	d007      	beq.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c0ce:	e011      	b.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0d0:	4b12      	ldr	r3, [pc, #72]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d4:	4a11      	ldr	r2, [pc, #68]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0dc:	e00e      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	2102      	movs	r1, #2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f001 fbcc 	bl	800d884 <RCCEx_PLL2_Config>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0f2:	e003      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10d      	bne.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c104:	4b05      	ldr	r3, [pc, #20]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c108:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c112:	4a02      	ldr	r2, [pc, #8]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c114:	430b      	orrs	r3, r1
 800c116:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c118:	e006      	b.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c11a:	bf00      	nop
 800c11c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c124:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c134:	66bb      	str	r3, [r7, #104]	; 0x68
 800c136:	2300      	movs	r3, #0
 800c138:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c13a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c13e:	460b      	mov	r3, r1
 800c140:	4313      	orrs	r3, r2
 800c142:	d00c      	beq.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c148:	3328      	adds	r3, #40	; 0x28
 800c14a:	2102      	movs	r1, #2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f001 fc4b 	bl	800d9e8 <RCCEx_PLL3_Config>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c16a:	663b      	str	r3, [r7, #96]	; 0x60
 800c16c:	2300      	movs	r3, #0
 800c16e:	667b      	str	r3, [r7, #100]	; 0x64
 800c170:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c174:	460b      	mov	r3, r1
 800c176:	4313      	orrs	r3, r2
 800c178:	d038      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c186:	d018      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c18c:	d811      	bhi.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c18e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c192:	d014      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c198:	d80b      	bhi.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d011      	beq.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c19e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1a2:	d106      	bne.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1a4:	4bc3      	ldr	r3, [pc, #780]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a8:	4ac2      	ldr	r2, [pc, #776]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c1b0:	e008      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1b8:	e004      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1ba:	bf00      	nop
 800c1bc:	e002      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1be:	bf00      	nop
 800c1c0:	e000      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10b      	bne.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1cc:	4bb9      	ldr	r3, [pc, #740]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1dc:	4ab5      	ldr	r2, [pc, #724]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1de:	430b      	orrs	r3, r1
 800c1e0:	6553      	str	r3, [r2, #84]	; 0x54
 800c1e2:	e003      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c1f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c202:	460b      	mov	r3, r1
 800c204:	4313      	orrs	r3, r2
 800c206:	d009      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c208:	4baa      	ldr	r3, [pc, #680]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c216:	4aa7      	ldr	r2, [pc, #668]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c218:	430b      	orrs	r3, r1
 800c21a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c224:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c228:	653b      	str	r3, [r7, #80]	; 0x50
 800c22a:	2300      	movs	r3, #0
 800c22c:	657b      	str	r3, [r7, #84]	; 0x54
 800c22e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c232:	460b      	mov	r3, r1
 800c234:	4313      	orrs	r3, r2
 800c236:	d00a      	beq.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c238:	4b9e      	ldr	r3, [pc, #632]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c244:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c248:	4a9a      	ldr	r2, [pc, #616]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c24a:	430b      	orrs	r3, r1
 800c24c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c25a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c25c:	2300      	movs	r3, #0
 800c25e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c260:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c264:	460b      	mov	r3, r1
 800c266:	4313      	orrs	r3, r2
 800c268:	d009      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c26a:	4b92      	ldr	r3, [pc, #584]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c26c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c26e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c278:	4a8e      	ldr	r2, [pc, #568]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c27a:	430b      	orrs	r3, r1
 800c27c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c28a:	643b      	str	r3, [r7, #64]	; 0x40
 800c28c:	2300      	movs	r3, #0
 800c28e:	647b      	str	r3, [r7, #68]	; 0x44
 800c290:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c294:	460b      	mov	r3, r1
 800c296:	4313      	orrs	r3, r2
 800c298:	d00e      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c29a:	4b86      	ldr	r3, [pc, #536]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	4a85      	ldr	r2, [pc, #532]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2a4:	6113      	str	r3, [r2, #16]
 800c2a6:	4b83      	ldr	r3, [pc, #524]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2a8:	6919      	ldr	r1, [r3, #16]
 800c2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c2b2:	4a80      	ldr	r2, [pc, #512]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2b4:	430b      	orrs	r3, r1
 800c2b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c2c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	d009      	beq.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c2d4:	4b77      	ldr	r3, [pc, #476]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e2:	4a74      	ldr	r2, [pc, #464]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c2f4:	633b      	str	r3, [r7, #48]	; 0x30
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c2fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c2fe:	460b      	mov	r3, r1
 800c300:	4313      	orrs	r3, r2
 800c302:	d00a      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c304:	4b6b      	ldr	r3, [pc, #428]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c308:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c314:	4a67      	ldr	r2, [pc, #412]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c316:	430b      	orrs	r3, r1
 800c318:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	2100      	movs	r1, #0
 800c324:	62b9      	str	r1, [r7, #40]	; 0x28
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c32c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c330:	460b      	mov	r3, r1
 800c332:	4313      	orrs	r3, r2
 800c334:	d011      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c33a:	3308      	adds	r3, #8
 800c33c:	2100      	movs	r1, #0
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 faa0 	bl	800d884 <RCCEx_PLL2_Config>
 800c344:	4603      	mov	r3, r0
 800c346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	2100      	movs	r1, #0
 800c364:	6239      	str	r1, [r7, #32]
 800c366:	f003 0302 	and.w	r3, r3, #2
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
 800c36c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c370:	460b      	mov	r3, r1
 800c372:	4313      	orrs	r3, r2
 800c374:	d011      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c37a:	3308      	adds	r3, #8
 800c37c:	2101      	movs	r1, #1
 800c37e:	4618      	mov	r0, r3
 800c380:	f001 fa80 	bl	800d884 <RCCEx_PLL2_Config>
 800c384:	4603      	mov	r3, r0
 800c386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c38a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	61b9      	str	r1, [r7, #24]
 800c3a6:	f003 0304 	and.w	r3, r3, #4
 800c3aa:	61fb      	str	r3, [r7, #28]
 800c3ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	d011      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	2102      	movs	r1, #2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f001 fa60 	bl	800d884 <RCCEx_PLL2_Config>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d003      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	6139      	str	r1, [r7, #16]
 800c3e6:	f003 0308 	and.w	r3, r3, #8
 800c3ea:	617b      	str	r3, [r7, #20]
 800c3ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	d011      	beq.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3fa:	3328      	adds	r3, #40	; 0x28
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f001 faf2 	bl	800d9e8 <RCCEx_PLL3_Config>
 800c404:	4603      	mov	r3, r0
 800c406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c40a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c422:	2100      	movs	r1, #0
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	f003 0310 	and.w	r3, r3, #16
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c430:	460b      	mov	r3, r1
 800c432:	4313      	orrs	r3, r2
 800c434:	d011      	beq.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c43a:	3328      	adds	r3, #40	; 0x28
 800c43c:	2101      	movs	r1, #1
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 fad2 	bl	800d9e8 <RCCEx_PLL3_Config>
 800c444:	4603      	mov	r3, r0
 800c446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c44a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d003      	beq.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	2100      	movs	r1, #0
 800c464:	6039      	str	r1, [r7, #0]
 800c466:	f003 0320 	and.w	r3, r3, #32
 800c46a:	607b      	str	r3, [r7, #4]
 800c46c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c470:	460b      	mov	r3, r1
 800c472:	4313      	orrs	r3, r2
 800c474:	d011      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c47a:	3328      	adds	r3, #40	; 0x28
 800c47c:	2102      	movs	r1, #2
 800c47e:	4618      	mov	r0, r3
 800c480:	f001 fab2 	bl	800d9e8 <RCCEx_PLL3_Config>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c48a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d003      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c49a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e000      	b.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4b4:	58024400 	.word	0x58024400

0800c4b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b090      	sub	sp, #64	; 0x40
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c4c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c4ca:	430b      	orrs	r3, r1
 800c4cc:	f040 8094 	bne.w	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c4d0:	4b9e      	ldr	r3, [pc, #632]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4d4:	f003 0307 	and.w	r3, r3, #7
 800c4d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	f200 8087 	bhi.w	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c4e2:	a201      	add	r2, pc, #4	; (adr r2, 800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e8:	0800c4fd 	.word	0x0800c4fd
 800c4ec:	0800c525 	.word	0x0800c525
 800c4f0:	0800c54d 	.word	0x0800c54d
 800c4f4:	0800c5e9 	.word	0x0800c5e9
 800c4f8:	0800c575 	.word	0x0800c575
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4fc:	4b93      	ldr	r3, [pc, #588]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c508:	d108      	bne.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c50a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c50e:	4618      	mov	r0, r3
 800c510:	f001 f810 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c518:	f000 bd45 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c520:	f000 bd41 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c524:	4b89      	ldr	r3, [pc, #548]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c52c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c530:	d108      	bne.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c532:	f107 0318 	add.w	r3, r7, #24
 800c536:	4618      	mov	r0, r3
 800c538:	f000 fd54 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c540:	f000 bd31 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c548:	f000 bd2d 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c54c:	4b7f      	ldr	r3, [pc, #508]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c558:	d108      	bne.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c55a:	f107 030c 	add.w	r3, r7, #12
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 fe94 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c568:	f000 bd1d 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c570:	f000 bd19 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c574:	4b75      	ldr	r3, [pc, #468]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c57c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c57e:	4b73      	ldr	r3, [pc, #460]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f003 0304 	and.w	r3, r3, #4
 800c586:	2b04      	cmp	r3, #4
 800c588:	d10c      	bne.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d109      	bne.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c590:	4b6e      	ldr	r3, [pc, #440]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	08db      	lsrs	r3, r3, #3
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	4a6d      	ldr	r2, [pc, #436]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c59c:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5a2:	e01f      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5a4:	4b69      	ldr	r3, [pc, #420]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b0:	d106      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5b8:	d102      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5ba:	4b66      	ldr	r3, [pc, #408]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5be:	e011      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5c0:	4b62      	ldr	r3, [pc, #392]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5cc:	d106      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5d4:	d102      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5d6:	4b60      	ldr	r3, [pc, #384]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5da:	e003      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5e0:	f000 bce1 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5e4:	f000 bcdf 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5e8:	4b5c      	ldr	r3, [pc, #368]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ec:	f000 bcdb 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f4:	f000 bcd7 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c5f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5fc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c600:	430b      	orrs	r3, r1
 800c602:	f040 80ad 	bne.w	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c606:	4b51      	ldr	r3, [pc, #324]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c60a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c60e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c616:	d056      	beq.n	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c61e:	f200 8090 	bhi.w	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	2bc0      	cmp	r3, #192	; 0xc0
 800c626:	f000 8088 	beq.w	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	2bc0      	cmp	r3, #192	; 0xc0
 800c62e:	f200 8088 	bhi.w	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	2b80      	cmp	r3, #128	; 0x80
 800c636:	d032      	beq.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	2b80      	cmp	r3, #128	; 0x80
 800c63c:	f200 8081 	bhi.w	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	2b40      	cmp	r3, #64	; 0x40
 800c64a:	d014      	beq.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c64c:	e079      	b.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c64e:	4b3f      	ldr	r3, [pc, #252]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c65a:	d108      	bne.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c65c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c660:	4618      	mov	r0, r3
 800c662:	f000 ff67 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c66a:	f000 bc9c 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c672:	f000 bc98 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c676:	4b35      	ldr	r3, [pc, #212]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c67e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c682:	d108      	bne.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c684:	f107 0318 	add.w	r3, r7, #24
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fcab 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c692:	f000 bc88 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69a:	f000 bc84 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c69e:	4b2b      	ldr	r3, [pc, #172]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6aa:	d108      	bne.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ac:	f107 030c 	add.w	r3, r7, #12
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fdeb 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ba:	f000 bc74 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c2:	f000 bc70 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6c6:	4b21      	ldr	r3, [pc, #132]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6d0:	4b1e      	ldr	r3, [pc, #120]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0304 	and.w	r3, r3, #4
 800c6d8:	2b04      	cmp	r3, #4
 800c6da:	d10c      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d109      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6e2:	4b1a      	ldr	r3, [pc, #104]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	08db      	lsrs	r3, r3, #3
 800c6e8:	f003 0303 	and.w	r3, r3, #3
 800c6ec:	4a18      	ldr	r2, [pc, #96]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f4:	e01f      	b.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6f6:	4b15      	ldr	r3, [pc, #84]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c702:	d106      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c70a:	d102      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c70c:	4b11      	ldr	r3, [pc, #68]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c710:	e011      	b.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c712:	4b0e      	ldr	r3, [pc, #56]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c71a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c71e:	d106      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c726:	d102      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c728:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72c:	e003      	b.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c732:	f000 bc38 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c736:	f000 bc36 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c73a:	4b08      	ldr	r3, [pc, #32]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c73e:	f000 bc32 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c746:	f000 bc2e 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c74a:	bf00      	nop
 800c74c:	58024400 	.word	0x58024400
 800c750:	03d09000 	.word	0x03d09000
 800c754:	003d0900 	.word	0x003d0900
 800c758:	00989680 	.word	0x00989680
 800c75c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c764:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c768:	430b      	orrs	r3, r1
 800c76a:	f040 809c 	bne.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c76e:	4b9e      	ldr	r3, [pc, #632]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c772:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c776:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c77e:	d054      	beq.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c786:	f200 808b 	bhi.w	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c790:	f000 8083 	beq.w	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c79a:	f200 8081 	bhi.w	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7a4:	d02f      	beq.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7ac:	d878      	bhi.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d004      	beq.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7ba:	d012      	beq.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c7bc:	e070      	b.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7be:	4b8a      	ldr	r3, [pc, #552]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7ca:	d107      	bne.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 feaf 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7da:	e3e4      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e0:	e3e1      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7e2:	4b81      	ldr	r3, [pc, #516]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7ee:	d107      	bne.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7f0:	f107 0318 	add.w	r3, r7, #24
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f000 fbf5 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7fe:	e3d2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c804:	e3cf      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c806:	4b78      	ldr	r3, [pc, #480]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c80e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c812:	d107      	bne.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c814:	f107 030c 	add.w	r3, r7, #12
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 fd37 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c822:	e3c0      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c828:	e3bd      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c82a:	4b6f      	ldr	r3, [pc, #444]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c82c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c82e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c832:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c834:	4b6c      	ldr	r3, [pc, #432]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0304 	and.w	r3, r3, #4
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d10c      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c842:	2b00      	cmp	r3, #0
 800c844:	d109      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c846:	4b68      	ldr	r3, [pc, #416]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	08db      	lsrs	r3, r3, #3
 800c84c:	f003 0303 	and.w	r3, r3, #3
 800c850:	4a66      	ldr	r2, [pc, #408]	; (800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c852:	fa22 f303 	lsr.w	r3, r2, r3
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c858:	e01e      	b.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c85a:	4b63      	ldr	r3, [pc, #396]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c866:	d106      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c86a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c86e:	d102      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c870:	4b5f      	ldr	r3, [pc, #380]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c874:	e010      	b.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c876:	4b5c      	ldr	r3, [pc, #368]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c87e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c882:	d106      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c88a:	d102      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c88c:	4b59      	ldr	r3, [pc, #356]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c890:	e002      	b.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c892:	2300      	movs	r3, #0
 800c894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c896:	e386      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c898:	e385      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c89a:	4b57      	ldr	r3, [pc, #348]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c89c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c89e:	e382      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a4:	e37f      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c8a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c8ae:	430b      	orrs	r3, r1
 800c8b0:	f040 80a7 	bne.w	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c8b4:	4b4c      	ldr	r3, [pc, #304]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c8bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8c4:	d055      	beq.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8cc:	f200 8096 	bhi.w	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8d6:	f000 8084 	beq.w	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8e0:	f200 808c 	bhi.w	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8ea:	d030      	beq.n	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8f2:	f200 8083 	bhi.w	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d004      	beq.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c902:	d012      	beq.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c904:	e07a      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c906:	4b38      	ldr	r3, [pc, #224]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c90e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c912:	d107      	bne.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 fe0b 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c922:	e340      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c928:	e33d      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c92a:	4b2f      	ldr	r3, [pc, #188]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c936:	d107      	bne.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c938:	f107 0318 	add.w	r3, r7, #24
 800c93c:	4618      	mov	r0, r3
 800c93e:	f000 fb51 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c946:	e32e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c94c:	e32b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c94e:	4b26      	ldr	r3, [pc, #152]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c95a:	d107      	bne.n	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c95c:	f107 030c 	add.w	r3, r7, #12
 800c960:	4618      	mov	r0, r3
 800c962:	f000 fc93 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c96a:	e31c      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c970:	e319      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c972:	4b1d      	ldr	r3, [pc, #116]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c97a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c97c:	4b1a      	ldr	r3, [pc, #104]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 0304 	and.w	r3, r3, #4
 800c984:	2b04      	cmp	r3, #4
 800c986:	d10c      	bne.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d109      	bne.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c98e:	4b16      	ldr	r3, [pc, #88]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	08db      	lsrs	r3, r3, #3
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	4a14      	ldr	r2, [pc, #80]	; (800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c99a:	fa22 f303 	lsr.w	r3, r2, r3
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a0:	e01e      	b.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9a2:	4b11      	ldr	r3, [pc, #68]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ae:	d106      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9b6:	d102      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9b8:	4b0d      	ldr	r3, [pc, #52]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9bc:	e010      	b.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9be:	4b0a      	ldr	r3, [pc, #40]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9ca:	d106      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9d2:	d102      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9d4:	4b07      	ldr	r3, [pc, #28]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9d8:	e002      	b.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9de:	e2e2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9e0:	e2e1      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9e2:	4b05      	ldr	r3, [pc, #20]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e6:	e2de      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9e8:	58024400 	.word	0x58024400
 800c9ec:	03d09000 	.word	0x03d09000
 800c9f0:	003d0900 	.word	0x003d0900
 800c9f4:	00989680 	.word	0x00989680
 800c9f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca00:	e2d1      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca06:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ca0a:	430b      	orrs	r3, r1
 800ca0c:	f040 809c 	bne.w	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ca10:	4b93      	ldr	r3, [pc, #588]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca14:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca20:	d054      	beq.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca28:	f200 808b 	bhi.w	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca32:	f000 8083 	beq.w	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca3c:	f200 8081 	bhi.w	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca46:	d02f      	beq.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca4e:	d878      	bhi.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d004      	beq.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca5c:	d012      	beq.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ca5e:	e070      	b.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca60:	4b7f      	ldr	r3, [pc, #508]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca6c:	d107      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 fd5e 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca7c:	e293      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca82:	e290      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca84:	4b76      	ldr	r3, [pc, #472]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca90:	d107      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca92:	f107 0318 	add.w	r3, r7, #24
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 faa4 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa0:	e281      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa6:	e27e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800caa8:	4b6d      	ldr	r3, [pc, #436]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab4:	d107      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cab6:	f107 030c 	add.w	r3, r7, #12
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 fbe6 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cac4:	e26f      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caca:	e26c      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cacc:	4b64      	ldr	r3, [pc, #400]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cad4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cad6:	4b62      	ldr	r3, [pc, #392]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 0304 	and.w	r3, r3, #4
 800cade:	2b04      	cmp	r3, #4
 800cae0:	d10c      	bne.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d109      	bne.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cae8:	4b5d      	ldr	r3, [pc, #372]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	08db      	lsrs	r3, r3, #3
 800caee:	f003 0303 	and.w	r3, r3, #3
 800caf2:	4a5c      	ldr	r2, [pc, #368]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800caf4:	fa22 f303 	lsr.w	r3, r2, r3
 800caf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cafa:	e01e      	b.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cafc:	4b58      	ldr	r3, [pc, #352]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb08:	d106      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb10:	d102      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb12:	4b55      	ldr	r3, [pc, #340]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb16:	e010      	b.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb18:	4b51      	ldr	r3, [pc, #324]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb24:	d106      	bne.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb2c:	d102      	bne.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb2e:	4b4f      	ldr	r3, [pc, #316]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb32:	e002      	b.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb38:	e235      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb3a:	e234      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb3c:	4b4c      	ldr	r3, [pc, #304]	; (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb40:	e231      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb46:	e22e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb4c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cb50:	430b      	orrs	r3, r1
 800cb52:	f040 808f 	bne.w	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cb56:	4b42      	ldr	r3, [pc, #264]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb5a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cb5e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb66:	d06b      	beq.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb6e:	d874      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb76:	d056      	beq.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb7e:	d86c      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb86:	d03b      	beq.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb8e:	d864      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb96:	d021      	beq.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb9e:	d85c      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d004      	beq.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbac:	d004      	beq.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cbae:	e054      	b.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cbb0:	f7fe fa30 	bl	800b014 <HAL_RCC_GetPCLK1Freq>
 800cbb4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbb6:	e1f6      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbb8:	4b29      	ldr	r3, [pc, #164]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbc4:	d107      	bne.n	800cbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbc6:	f107 0318 	add.w	r3, r7, #24
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 fa0a 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd4:	e1e7      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbda:	e1e4      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbdc:	4b20      	ldr	r3, [pc, #128]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbe8:	d107      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbea:	f107 030c 	add.w	r3, r7, #12
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 fb4c 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbf8:	e1d5      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbfe:	e1d2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc00:	4b17      	ldr	r3, [pc, #92]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f003 0304 	and.w	r3, r3, #4
 800cc08:	2b04      	cmp	r3, #4
 800cc0a:	d109      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc0c:	4b14      	ldr	r3, [pc, #80]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	08db      	lsrs	r3, r3, #3
 800cc12:	f003 0303 	and.w	r3, r3, #3
 800cc16:	4a13      	ldr	r2, [pc, #76]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc18:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc1e:	e1c2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc24:	e1bf      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc26:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc32:	d102      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cc34:	4b0c      	ldr	r3, [pc, #48]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc38:	e1b5      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc3e:	e1b2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc4c:	d102      	bne.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cc4e:	4b07      	ldr	r3, [pc, #28]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cc50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc52:	e1a8      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc58:	e1a5      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc5e:	e1a2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc60:	58024400 	.word	0x58024400
 800cc64:	03d09000 	.word	0x03d09000
 800cc68:	003d0900 	.word	0x003d0900
 800cc6c:	00989680 	.word	0x00989680
 800cc70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cc74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc78:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc7c:	430b      	orrs	r3, r1
 800cc7e:	d173      	bne.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc80:	4b9c      	ldr	r3, [pc, #624]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc90:	d02f      	beq.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc98:	d863      	bhi.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d004      	beq.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cca6:	d012      	beq.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cca8:	e05b      	b.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccaa:	4b92      	ldr	r3, [pc, #584]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccb6:	d107      	bne.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccb8:	f107 0318 	add.w	r3, r7, #24
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 f991 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc6:	e16e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cccc:	e16b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccce:	4b89      	ldr	r3, [pc, #548]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccda:	d107      	bne.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccdc:	f107 030c 	add.w	r3, r7, #12
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 fad3 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccea:	e15c      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccec:	2300      	movs	r3, #0
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf0:	e159      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccf2:	4b80      	ldr	r3, [pc, #512]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccfa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccfc:	4b7d      	ldr	r3, [pc, #500]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f003 0304 	and.w	r3, r3, #4
 800cd04:	2b04      	cmp	r3, #4
 800cd06:	d10c      	bne.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d109      	bne.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd0e:	4b79      	ldr	r3, [pc, #484]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	08db      	lsrs	r3, r3, #3
 800cd14:	f003 0303 	and.w	r3, r3, #3
 800cd18:	4a77      	ldr	r2, [pc, #476]	; (800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd1a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd20:	e01e      	b.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd22:	4b74      	ldr	r3, [pc, #464]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd2e:	d106      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd36:	d102      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd38:	4b70      	ldr	r3, [pc, #448]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd3c:	e010      	b.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd3e:	4b6d      	ldr	r3, [pc, #436]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd4a:	d106      	bne.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd52:	d102      	bne.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd54:	4b6a      	ldr	r3, [pc, #424]	; (800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd58:	e002      	b.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd5e:	e122      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd60:	e121      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd66:	e11e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd6c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cd70:	430b      	orrs	r3, r1
 800cd72:	d133      	bne.n	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd74:	4b5f      	ldr	r3, [pc, #380]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d004      	beq.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd8a:	d012      	beq.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cd8c:	e023      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd8e:	4b59      	ldr	r3, [pc, #356]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd9a:	d107      	bne.n	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 fbc7 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdaa:	e0fc      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb0:	e0f9      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdb2:	4b50      	ldr	r3, [pc, #320]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdbe:	d107      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdc0:	f107 0318 	add.w	r3, r7, #24
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 f90d 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdce:	e0ea      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd4:	e0e7      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdda:	e0e4      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cde4:	430b      	orrs	r3, r1
 800cde6:	f040 808d 	bne.w	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cdea:	4b42      	ldr	r3, [pc, #264]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cdf2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdfa:	d06b      	beq.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce02:	d874      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce0a:	d056      	beq.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce12:	d86c      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce1a:	d03b      	beq.n	800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce22:	d864      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce2a:	d021      	beq.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce32:	d85c      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d004      	beq.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce40:	d004      	beq.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ce42:	e054      	b.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ce44:	f000 f8b8 	bl	800cfb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce48:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce4a:	e0ac      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce4c:	4b29      	ldr	r3, [pc, #164]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce58:	d107      	bne.n	800ce6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce5a:	f107 0318 	add.w	r3, r7, #24
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 f8c0 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce68:	e09d      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce6e:	e09a      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce70:	4b20      	ldr	r3, [pc, #128]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce7c:	d107      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce7e:	f107 030c 	add.w	r3, r7, #12
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 fa02 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce8c:	e08b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce92:	e088      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce94:	4b17      	ldr	r3, [pc, #92]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 0304 	and.w	r3, r3, #4
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	d109      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cea0:	4b14      	ldr	r3, [pc, #80]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	08db      	lsrs	r3, r3, #3
 800cea6:	f003 0303 	and.w	r3, r3, #3
 800ceaa:	4a13      	ldr	r2, [pc, #76]	; (800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ceac:	fa22 f303 	lsr.w	r3, r2, r3
 800ceb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb2:	e078      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb8:	e075      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ceba:	4b0e      	ldr	r3, [pc, #56]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cec6:	d102      	bne.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cec8:	4b0c      	ldr	r3, [pc, #48]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ceca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cecc:	e06b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cece:	2300      	movs	r3, #0
 800ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced2:	e068      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ced4:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cedc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cee0:	d102      	bne.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cee2:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cee6:	e05e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cee8:	2300      	movs	r3, #0
 800ceea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceec:	e05b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef2:	e058      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cef4:	58024400 	.word	0x58024400
 800cef8:	03d09000 	.word	0x03d09000
 800cefc:	003d0900 	.word	0x003d0900
 800cf00:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cf04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf08:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cf0c:	430b      	orrs	r3, r1
 800cf0e:	d148      	bne.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cf10:	4b27      	ldr	r3, [pc, #156]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf20:	d02a      	beq.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf28:	d838      	bhi.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d004      	beq.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf36:	d00d      	beq.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cf38:	e030      	b.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf3a:	4b1d      	ldr	r3, [pc, #116]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf46:	d102      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cf48:	4b1a      	ldr	r3, [pc, #104]	; (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf4c:	e02b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf52:	e028      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf54:	4b16      	ldr	r3, [pc, #88]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf60:	d107      	bne.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fae4 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf70:	e019      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf76:	e016      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf78:	4b0d      	ldr	r3, [pc, #52]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf84:	d107      	bne.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf86:	f107 0318 	add.w	r3, r7, #24
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f000 f82a 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf94:	e007      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf9a:	e004      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa0:	e001      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3740      	adds	r7, #64	; 0x40
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	58024400 	.word	0x58024400
 800cfb4:	00989680 	.word	0x00989680

0800cfb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfbc:	f7fd fffa 	bl	800afb4 <HAL_RCC_GetHCLKFreq>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	091b      	lsrs	r3, r3, #4
 800cfc8:	f003 0307 	and.w	r3, r3, #7
 800cfcc:	4904      	ldr	r1, [pc, #16]	; (800cfe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cfce:	5ccb      	ldrb	r3, [r1, r3]
 800cfd0:	f003 031f 	and.w	r3, r3, #31
 800cfd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	58024400 	.word	0x58024400
 800cfe0:	08020dc8 	.word	0x08020dc8

0800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b089      	sub	sp, #36	; 0x24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfec:	4ba1      	ldr	r3, [pc, #644]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff0:	f003 0303 	and.w	r3, r3, #3
 800cff4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cff6:	4b9f      	ldr	r3, [pc, #636]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffa:	0b1b      	lsrs	r3, r3, #12
 800cffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d000:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d002:	4b9c      	ldr	r3, [pc, #624]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d006:	091b      	lsrs	r3, r3, #4
 800d008:	f003 0301 	and.w	r3, r3, #1
 800d00c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d00e:	4b99      	ldr	r3, [pc, #612]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d012:	08db      	lsrs	r3, r3, #3
 800d014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	fb02 f303 	mul.w	r3, r2, r3
 800d01e:	ee07 3a90 	vmov	s15, r3
 800d022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f000 8111 	beq.w	800d254 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	2b02      	cmp	r3, #2
 800d036:	f000 8083 	beq.w	800d140 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	f200 80a1 	bhi.w	800d184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d003      	beq.n	800d050 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d056      	beq.n	800d0fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d04e:	e099      	b.n	800d184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d050:	4b88      	ldr	r3, [pc, #544]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f003 0320 	and.w	r3, r3, #32
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d02d      	beq.n	800d0b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d05c:	4b85      	ldr	r3, [pc, #532]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	08db      	lsrs	r3, r3, #3
 800d062:	f003 0303 	and.w	r3, r3, #3
 800d066:	4a84      	ldr	r2, [pc, #528]	; (800d278 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d068:	fa22 f303 	lsr.w	r3, r2, r3
 800d06c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	ee07 3a90 	vmov	s15, r3
 800d074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	ee07 3a90 	vmov	s15, r3
 800d07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d086:	4b7b      	ldr	r3, [pc, #492]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d096:	ed97 6a03 	vldr	s12, [r7, #12]
 800d09a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0b6:	e087      	b.n	800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	ee07 3a90 	vmov	s15, r3
 800d0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d280 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ca:	4b6a      	ldr	r3, [pc, #424]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0d2:	ee07 3a90 	vmov	s15, r3
 800d0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0fa:	e065      	b.n	800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	ee07 3a90 	vmov	s15, r3
 800d102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d106:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d10e:	4b59      	ldr	r3, [pc, #356]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d116:	ee07 3a90 	vmov	s15, r3
 800d11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d122:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d13e:	e043      	b.n	800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	ee07 3a90 	vmov	s15, r3
 800d146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d152:	4b48      	ldr	r3, [pc, #288]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d15a:	ee07 3a90 	vmov	s15, r3
 800d15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d162:	ed97 6a03 	vldr	s12, [r7, #12]
 800d166:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d182:	e021      	b.n	800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	ee07 3a90 	vmov	s15, r3
 800d18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d196:	4b37      	ldr	r3, [pc, #220]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d19e:	ee07 3a90 	vmov	s15, r3
 800d1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d1c8:	4b2a      	ldr	r3, [pc, #168]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1cc:	0a5b      	lsrs	r3, r3, #9
 800d1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1ee:	ee17 2a90 	vmov	r2, s15
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d1f6:	4b1f      	ldr	r3, [pc, #124]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fa:	0c1b      	lsrs	r3, r3, #16
 800d1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d200:	ee07 3a90 	vmov	s15, r3
 800d204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d20c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d210:	edd7 6a07 	vldr	s13, [r7, #28]
 800d214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d21c:	ee17 2a90 	vmov	r2, s15
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d224:	4b13      	ldr	r3, [pc, #76]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d228:	0e1b      	lsrs	r3, r3, #24
 800d22a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d22e:	ee07 3a90 	vmov	s15, r3
 800d232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d23a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d23e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d24a:	ee17 2a90 	vmov	r2, s15
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d252:	e008      	b.n	800d266 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	609a      	str	r2, [r3, #8]
}
 800d266:	bf00      	nop
 800d268:	3724      	adds	r7, #36	; 0x24
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	58024400 	.word	0x58024400
 800d278:	03d09000 	.word	0x03d09000
 800d27c:	46000000 	.word	0x46000000
 800d280:	4c742400 	.word	0x4c742400
 800d284:	4a742400 	.word	0x4a742400
 800d288:	4b189680 	.word	0x4b189680

0800d28c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b089      	sub	sp, #36	; 0x24
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d294:	4ba1      	ldr	r3, [pc, #644]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d298:	f003 0303 	and.w	r3, r3, #3
 800d29c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d29e:	4b9f      	ldr	r3, [pc, #636]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a2:	0d1b      	lsrs	r3, r3, #20
 800d2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d2aa:	4b9c      	ldr	r3, [pc, #624]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ae:	0a1b      	lsrs	r3, r3, #8
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d2b6:	4b99      	ldr	r3, [pc, #612]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ba:	08db      	lsrs	r3, r3, #3
 800d2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	fb02 f303 	mul.w	r3, r2, r3
 800d2c6:	ee07 3a90 	vmov	s15, r3
 800d2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f000 8111 	beq.w	800d4fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	f000 8083 	beq.w	800d3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	f200 80a1 	bhi.w	800d42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d003      	beq.n	800d2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d056      	beq.n	800d3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d2f6:	e099      	b.n	800d42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2f8:	4b88      	ldr	r3, [pc, #544]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0320 	and.w	r3, r3, #32
 800d300:	2b00      	cmp	r3, #0
 800d302:	d02d      	beq.n	800d360 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d304:	4b85      	ldr	r3, [pc, #532]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	08db      	lsrs	r3, r3, #3
 800d30a:	f003 0303 	and.w	r3, r3, #3
 800d30e:	4a84      	ldr	r2, [pc, #528]	; (800d520 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d310:	fa22 f303 	lsr.w	r3, r2, r3
 800d314:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	ee07 3a90 	vmov	s15, r3
 800d31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	ee07 3a90 	vmov	s15, r3
 800d326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d32e:	4b7b      	ldr	r3, [pc, #492]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d336:	ee07 3a90 	vmov	s15, r3
 800d33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d342:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d35a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d35e:	e087      	b.n	800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	ee07 3a90 	vmov	s15, r3
 800d366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d36a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d528 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d372:	4b6a      	ldr	r3, [pc, #424]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d37a:	ee07 3a90 	vmov	s15, r3
 800d37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d382:	ed97 6a03 	vldr	s12, [r7, #12]
 800d386:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3a2:	e065      	b.n	800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	ee07 3a90 	vmov	s15, r3
 800d3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3b6:	4b59      	ldr	r3, [pc, #356]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3be:	ee07 3a90 	vmov	s15, r3
 800d3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3e6:	e043      	b.n	800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3fa:	4b48      	ldr	r3, [pc, #288]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d402:	ee07 3a90 	vmov	s15, r3
 800d406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d40e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d42a:	e021      	b.n	800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d436:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d43e:	4b37      	ldr	r3, [pc, #220]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d452:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d45e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d46a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d46e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d470:	4b2a      	ldr	r3, [pc, #168]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d474:	0a5b      	lsrs	r3, r3, #9
 800d476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d47a:	ee07 3a90 	vmov	s15, r3
 800d47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d496:	ee17 2a90 	vmov	r2, s15
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d49e:	4b1f      	ldr	r3, [pc, #124]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a2:	0c1b      	lsrs	r3, r3, #16
 800d4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a8:	ee07 3a90 	vmov	s15, r3
 800d4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4c4:	ee17 2a90 	vmov	r2, s15
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d4cc:	4b13      	ldr	r3, [pc, #76]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d0:	0e1b      	lsrs	r3, r3, #24
 800d4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4d6:	ee07 3a90 	vmov	s15, r3
 800d4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4f2:	ee17 2a90 	vmov	r2, s15
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d4fa:	e008      	b.n	800d50e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	609a      	str	r2, [r3, #8]
}
 800d50e:	bf00      	nop
 800d510:	3724      	adds	r7, #36	; 0x24
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	58024400 	.word	0x58024400
 800d520:	03d09000 	.word	0x03d09000
 800d524:	46000000 	.word	0x46000000
 800d528:	4c742400 	.word	0x4c742400
 800d52c:	4a742400 	.word	0x4a742400
 800d530:	4b189680 	.word	0x4b189680

0800d534 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d534:	b480      	push	{r7}
 800d536:	b089      	sub	sp, #36	; 0x24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d53c:	4ba0      	ldr	r3, [pc, #640]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d540:	f003 0303 	and.w	r3, r3, #3
 800d544:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d546:	4b9e      	ldr	r3, [pc, #632]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54a:	091b      	lsrs	r3, r3, #4
 800d54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d550:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d552:	4b9b      	ldr	r3, [pc, #620]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d55c:	4b98      	ldr	r3, [pc, #608]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d560:	08db      	lsrs	r3, r3, #3
 800d562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	fb02 f303 	mul.w	r3, r2, r3
 800d56c:	ee07 3a90 	vmov	s15, r3
 800d570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d574:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 8111 	beq.w	800d7a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	2b02      	cmp	r3, #2
 800d584:	f000 8083 	beq.w	800d68e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	f200 80a1 	bhi.w	800d6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d003      	beq.n	800d59e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d056      	beq.n	800d64a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d59c:	e099      	b.n	800d6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d59e:	4b88      	ldr	r3, [pc, #544]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f003 0320 	and.w	r3, r3, #32
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d02d      	beq.n	800d606 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5aa:	4b85      	ldr	r3, [pc, #532]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	08db      	lsrs	r3, r3, #3
 800d5b0:	f003 0303 	and.w	r3, r3, #3
 800d5b4:	4a83      	ldr	r2, [pc, #524]	; (800d7c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	ee07 3a90 	vmov	s15, r3
 800d5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	ee07 3a90 	vmov	s15, r3
 800d5cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5d4:	4b7a      	ldr	r3, [pc, #488]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5dc:	ee07 3a90 	vmov	s15, r3
 800d5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d600:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d604:	e087      	b.n	800d716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	ee07 3a90 	vmov	s15, r3
 800d60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d610:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d618:	4b69      	ldr	r3, [pc, #420]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d620:	ee07 3a90 	vmov	s15, r3
 800d624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d628:	ed97 6a03 	vldr	s12, [r7, #12]
 800d62c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d63c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d640:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d648:	e065      	b.n	800d716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	ee07 3a90 	vmov	s15, r3
 800d650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d654:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d65c:	4b58      	ldr	r3, [pc, #352]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d664:	ee07 3a90 	vmov	s15, r3
 800d668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d66c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d670:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d67c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d684:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d688:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d68c:	e043      	b.n	800d716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	ee07 3a90 	vmov	s15, r3
 800d694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d698:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d69c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6a0:	4b47      	ldr	r3, [pc, #284]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6d0:	e021      	b.n	800d716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	ee07 3a90 	vmov	s15, r3
 800d6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6e4:	4b36      	ldr	r3, [pc, #216]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ec:	ee07 3a90 	vmov	s15, r3
 800d6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d714:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d716:	4b2a      	ldr	r3, [pc, #168]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71a:	0a5b      	lsrs	r3, r3, #9
 800d71c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d720:	ee07 3a90 	vmov	s15, r3
 800d724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d72c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d730:	edd7 6a07 	vldr	s13, [r7, #28]
 800d734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d73c:	ee17 2a90 	vmov	r2, s15
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d744:	4b1e      	ldr	r3, [pc, #120]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d748:	0c1b      	lsrs	r3, r3, #16
 800d74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d74e:	ee07 3a90 	vmov	s15, r3
 800d752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d75a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d75e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d76a:	ee17 2a90 	vmov	r2, s15
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d772:	4b13      	ldr	r3, [pc, #76]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d776:	0e1b      	lsrs	r3, r3, #24
 800d778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d77c:	ee07 3a90 	vmov	s15, r3
 800d780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d78c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d798:	ee17 2a90 	vmov	r2, s15
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d7a0:	e008      	b.n	800d7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	609a      	str	r2, [r3, #8]
}
 800d7b4:	bf00      	nop
 800d7b6:	3724      	adds	r7, #36	; 0x24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	58024400 	.word	0x58024400
 800d7c4:	03d09000 	.word	0x03d09000
 800d7c8:	46000000 	.word	0x46000000
 800d7cc:	4c742400 	.word	0x4c742400
 800d7d0:	4a742400 	.word	0x4a742400
 800d7d4:	4b189680 	.word	0x4b189680

0800d7d8 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d7e0:	4b26      	ldr	r3, [pc, #152]	; (800d87c <HAL_RCCEx_CRSConfig+0xa4>)
 800d7e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7e6:	4a25      	ldr	r2, [pc, #148]	; (800d87c <HAL_RCCEx_CRSConfig+0xa4>)
 800d7e8:	f043 0302 	orr.w	r3, r3, #2
 800d7ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d7f0:	4b22      	ldr	r3, [pc, #136]	; (800d87c <HAL_RCCEx_CRSConfig+0xa4>)
 800d7f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7f6:	4a21      	ldr	r2, [pc, #132]	; (800d87c <HAL_RCCEx_CRSConfig+0xa4>)
 800d7f8:	f023 0302 	bic.w	r3, r3, #2
 800d7fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d800:	f7f6 fe12 	bl	8004428 <HAL_GetREVID>
 800d804:	4603      	mov	r3, r0
 800d806:	f241 0203 	movw	r2, #4099	; 0x1003
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d80b      	bhi.n	800d826 <HAL_RCCEx_CRSConfig+0x4e>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d816:	d106      	bne.n	800d826 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	e008      	b.n	800d838 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	431a      	orrs	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	689b      	ldr	r3, [r3, #8]
 800d834:	4313      	orrs	r3, r2
 800d836:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	4313      	orrs	r3, r2
 800d840:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	041b      	lsls	r3, r3, #16
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	4313      	orrs	r3, r2
 800d84c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d84e:	4a0c      	ldr	r2, [pc, #48]	; (800d880 <HAL_RCCEx_CRSConfig+0xa8>)
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d854:	4b0a      	ldr	r3, [pc, #40]	; (800d880 <HAL_RCCEx_CRSConfig+0xa8>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	021b      	lsls	r3, r3, #8
 800d862:	4907      	ldr	r1, [pc, #28]	; (800d880 <HAL_RCCEx_CRSConfig+0xa8>)
 800d864:	4313      	orrs	r3, r2
 800d866:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d868:	4b05      	ldr	r3, [pc, #20]	; (800d880 <HAL_RCCEx_CRSConfig+0xa8>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a04      	ldr	r2, [pc, #16]	; (800d880 <HAL_RCCEx_CRSConfig+0xa8>)
 800d86e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d872:	6013      	str	r3, [r2, #0]
}
 800d874:	bf00      	nop
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	58024400 	.word	0x58024400
 800d880:	40008400 	.word	0x40008400

0800d884 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d892:	4b53      	ldr	r3, [pc, #332]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d896:	f003 0303 	and.w	r3, r3, #3
 800d89a:	2b03      	cmp	r3, #3
 800d89c:	d101      	bne.n	800d8a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e099      	b.n	800d9d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d8a2:	4b4f      	ldr	r3, [pc, #316]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a4e      	ldr	r2, [pc, #312]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d8a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d8ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8ae:	f7f6 fd8b 	bl	80043c8 <HAL_GetTick>
 800d8b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8b4:	e008      	b.n	800d8c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d8b6:	f7f6 fd87 	bl	80043c8 <HAL_GetTick>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d901      	bls.n	800d8c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	e086      	b.n	800d9d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8c8:	4b45      	ldr	r3, [pc, #276]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d1f0      	bne.n	800d8b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d8d4:	4b42      	ldr	r3, [pc, #264]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	031b      	lsls	r3, r3, #12
 800d8e2:	493f      	ldr	r1, [pc, #252]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	628b      	str	r3, [r1, #40]	; 0x28
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	3b01      	subs	r3, #1
 800d8f8:	025b      	lsls	r3, r3, #9
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	431a      	orrs	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	3b01      	subs	r3, #1
 800d904:	041b      	lsls	r3, r3, #16
 800d906:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d90a:	431a      	orrs	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	3b01      	subs	r3, #1
 800d912:	061b      	lsls	r3, r3, #24
 800d914:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d918:	4931      	ldr	r1, [pc, #196]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d91a:	4313      	orrs	r3, r2
 800d91c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d91e:	4b30      	ldr	r3, [pc, #192]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d922:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	695b      	ldr	r3, [r3, #20]
 800d92a:	492d      	ldr	r1, [pc, #180]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d92c:	4313      	orrs	r3, r2
 800d92e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d930:	4b2b      	ldr	r3, [pc, #172]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d934:	f023 0220 	bic.w	r2, r3, #32
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	4928      	ldr	r1, [pc, #160]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d93e:	4313      	orrs	r3, r2
 800d940:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d942:	4b27      	ldr	r3, [pc, #156]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d946:	4a26      	ldr	r2, [pc, #152]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d948:	f023 0310 	bic.w	r3, r3, #16
 800d94c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d94e:	4b24      	ldr	r3, [pc, #144]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d952:	4b24      	ldr	r3, [pc, #144]	; (800d9e4 <RCCEx_PLL2_Config+0x160>)
 800d954:	4013      	ands	r3, r2
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	69d2      	ldr	r2, [r2, #28]
 800d95a:	00d2      	lsls	r2, r2, #3
 800d95c:	4920      	ldr	r1, [pc, #128]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d95e:	4313      	orrs	r3, r2
 800d960:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d962:	4b1f      	ldr	r3, [pc, #124]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d966:	4a1e      	ldr	r2, [pc, #120]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d968:	f043 0310 	orr.w	r3, r3, #16
 800d96c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d106      	bne.n	800d982 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d974:	4b1a      	ldr	r3, [pc, #104]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d978:	4a19      	ldr	r2, [pc, #100]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d97a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d97e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d980:	e00f      	b.n	800d9a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	2b01      	cmp	r3, #1
 800d986:	d106      	bne.n	800d996 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d988:	4b15      	ldr	r3, [pc, #84]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d98c:	4a14      	ldr	r2, [pc, #80]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d98e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d992:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d994:	e005      	b.n	800d9a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d996:	4b12      	ldr	r3, [pc, #72]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99a:	4a11      	ldr	r2, [pc, #68]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d99c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d9a2:	4b0f      	ldr	r3, [pc, #60]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a0e      	ldr	r2, [pc, #56]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d9a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d9ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9ae:	f7f6 fd0b 	bl	80043c8 <HAL_GetTick>
 800d9b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9b4:	e008      	b.n	800d9c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d9b6:	f7f6 fd07 	bl	80043c8 <HAL_GetTick>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	2b02      	cmp	r3, #2
 800d9c2:	d901      	bls.n	800d9c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9c4:	2303      	movs	r3, #3
 800d9c6:	e006      	b.n	800d9d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9c8:	4b05      	ldr	r3, [pc, #20]	; (800d9e0 <RCCEx_PLL2_Config+0x15c>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d0f0      	beq.n	800d9b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	58024400 	.word	0x58024400
 800d9e4:	ffff0007 	.word	0xffff0007

0800d9e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d9f6:	4b53      	ldr	r3, [pc, #332]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800d9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9fa:	f003 0303 	and.w	r3, r3, #3
 800d9fe:	2b03      	cmp	r3, #3
 800da00:	d101      	bne.n	800da06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	e099      	b.n	800db3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800da06:	4b4f      	ldr	r3, [pc, #316]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a4e      	ldr	r2, [pc, #312]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800da0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da12:	f7f6 fcd9 	bl	80043c8 <HAL_GetTick>
 800da16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da18:	e008      	b.n	800da2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da1a:	f7f6 fcd5 	bl	80043c8 <HAL_GetTick>
 800da1e:	4602      	mov	r2, r0
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	1ad3      	subs	r3, r2, r3
 800da24:	2b02      	cmp	r3, #2
 800da26:	d901      	bls.n	800da2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800da28:	2303      	movs	r3, #3
 800da2a:	e086      	b.n	800db3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da2c:	4b45      	ldr	r3, [pc, #276]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1f0      	bne.n	800da1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800da38:	4b42      	ldr	r3, [pc, #264]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800da3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	051b      	lsls	r3, r3, #20
 800da46:	493f      	ldr	r1, [pc, #252]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800da48:	4313      	orrs	r3, r2
 800da4a:	628b      	str	r3, [r1, #40]	; 0x28
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	3b01      	subs	r3, #1
 800da52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	3b01      	subs	r3, #1
 800da5c:	025b      	lsls	r3, r3, #9
 800da5e:	b29b      	uxth	r3, r3
 800da60:	431a      	orrs	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	3b01      	subs	r3, #1
 800da68:	041b      	lsls	r3, r3, #16
 800da6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800da6e:	431a      	orrs	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	3b01      	subs	r3, #1
 800da76:	061b      	lsls	r3, r3, #24
 800da78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800da7c:	4931      	ldr	r1, [pc, #196]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800da7e:	4313      	orrs	r3, r2
 800da80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800da82:	4b30      	ldr	r3, [pc, #192]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800da84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	695b      	ldr	r3, [r3, #20]
 800da8e:	492d      	ldr	r1, [pc, #180]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800da90:	4313      	orrs	r3, r2
 800da92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800da94:	4b2b      	ldr	r3, [pc, #172]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800da96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	4928      	ldr	r1, [pc, #160]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800daa2:	4313      	orrs	r3, r2
 800daa4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800daa6:	4b27      	ldr	r3, [pc, #156]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800daa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daaa:	4a26      	ldr	r2, [pc, #152]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800daac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dab2:	4b24      	ldr	r3, [pc, #144]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800dab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dab6:	4b24      	ldr	r3, [pc, #144]	; (800db48 <RCCEx_PLL3_Config+0x160>)
 800dab8:	4013      	ands	r3, r2
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	69d2      	ldr	r2, [r2, #28]
 800dabe:	00d2      	lsls	r2, r2, #3
 800dac0:	4920      	ldr	r1, [pc, #128]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800dac2:	4313      	orrs	r3, r2
 800dac4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dac6:	4b1f      	ldr	r3, [pc, #124]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800dac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daca:	4a1e      	ldr	r2, [pc, #120]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800dacc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d106      	bne.n	800dae6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dad8:	4b1a      	ldr	r3, [pc, #104]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dadc:	4a19      	ldr	r2, [pc, #100]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800dade:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dae2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dae4:	e00f      	b.n	800db06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d106      	bne.n	800dafa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800daec:	4b15      	ldr	r3, [pc, #84]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800daee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf0:	4a14      	ldr	r2, [pc, #80]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800daf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800daf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800daf8:	e005      	b.n	800db06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dafa:	4b12      	ldr	r3, [pc, #72]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800dafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafe:	4a11      	ldr	r2, [pc, #68]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800db00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800db04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800db06:	4b0f      	ldr	r3, [pc, #60]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a0e      	ldr	r2, [pc, #56]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800db0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db12:	f7f6 fc59 	bl	80043c8 <HAL_GetTick>
 800db16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db18:	e008      	b.n	800db2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800db1a:	f7f6 fc55 	bl	80043c8 <HAL_GetTick>
 800db1e:	4602      	mov	r2, r0
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	2b02      	cmp	r3, #2
 800db26:	d901      	bls.n	800db2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800db28:	2303      	movs	r3, #3
 800db2a:	e006      	b.n	800db3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db2c:	4b05      	ldr	r3, [pc, #20]	; (800db44 <RCCEx_PLL3_Config+0x15c>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db34:	2b00      	cmp	r3, #0
 800db36:	d0f0      	beq.n	800db1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800db38:	7bfb      	ldrb	r3, [r7, #15]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	58024400 	.word	0x58024400
 800db48:	ffff0007 	.word	0xffff0007

0800db4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db5a:	2301      	movs	r3, #1
 800db5c:	e049      	b.n	800dbf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	d106      	bne.n	800db78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f7f5 fe9e 	bl	80038b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2202      	movs	r2, #2
 800db7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	3304      	adds	r3, #4
 800db88:	4619      	mov	r1, r3
 800db8a:	4610      	mov	r0, r2
 800db8c:	f000 f92e 	bl	800ddec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dc06:	2300      	movs	r3, #0
 800dc08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d101      	bne.n	800dc18 <HAL_TIM_ConfigClockSource+0x1c>
 800dc14:	2302      	movs	r3, #2
 800dc16:	e0dc      	b.n	800ddd2 <HAL_TIM_ConfigClockSource+0x1d6>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2202      	movs	r2, #2
 800dc24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	4b6a      	ldr	r3, [pc, #424]	; (800dddc <HAL_TIM_ConfigClockSource+0x1e0>)
 800dc34:	4013      	ands	r3, r2
 800dc36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	68ba      	ldr	r2, [r7, #8]
 800dc46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a64      	ldr	r2, [pc, #400]	; (800dde0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	f000 80a9 	beq.w	800dda6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc54:	4a62      	ldr	r2, [pc, #392]	; (800dde0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	f200 80ae 	bhi.w	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc5c:	4a61      	ldr	r2, [pc, #388]	; (800dde4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	f000 80a1 	beq.w	800dda6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc64:	4a5f      	ldr	r2, [pc, #380]	; (800dde4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	f200 80a6 	bhi.w	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc6c:	4a5e      	ldr	r2, [pc, #376]	; (800dde8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	f000 8099 	beq.w	800dda6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc74:	4a5c      	ldr	r2, [pc, #368]	; (800dde8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	f200 809e 	bhi.w	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dc80:	f000 8091 	beq.w	800dda6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dc88:	f200 8096 	bhi.w	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc90:	f000 8089 	beq.w	800dda6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dc94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc98:	f200 808e 	bhi.w	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dc9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dca0:	d03e      	beq.n	800dd20 <HAL_TIM_ConfigClockSource+0x124>
 800dca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dca6:	f200 8087 	bhi.w	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcae:	f000 8086 	beq.w	800ddbe <HAL_TIM_ConfigClockSource+0x1c2>
 800dcb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcb6:	d87f      	bhi.n	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcb8:	2b70      	cmp	r3, #112	; 0x70
 800dcba:	d01a      	beq.n	800dcf2 <HAL_TIM_ConfigClockSource+0xf6>
 800dcbc:	2b70      	cmp	r3, #112	; 0x70
 800dcbe:	d87b      	bhi.n	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcc0:	2b60      	cmp	r3, #96	; 0x60
 800dcc2:	d050      	beq.n	800dd66 <HAL_TIM_ConfigClockSource+0x16a>
 800dcc4:	2b60      	cmp	r3, #96	; 0x60
 800dcc6:	d877      	bhi.n	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcc8:	2b50      	cmp	r3, #80	; 0x50
 800dcca:	d03c      	beq.n	800dd46 <HAL_TIM_ConfigClockSource+0x14a>
 800dccc:	2b50      	cmp	r3, #80	; 0x50
 800dcce:	d873      	bhi.n	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcd0:	2b40      	cmp	r3, #64	; 0x40
 800dcd2:	d058      	beq.n	800dd86 <HAL_TIM_ConfigClockSource+0x18a>
 800dcd4:	2b40      	cmp	r3, #64	; 0x40
 800dcd6:	d86f      	bhi.n	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dcd8:	2b30      	cmp	r3, #48	; 0x30
 800dcda:	d064      	beq.n	800dda6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dcdc:	2b30      	cmp	r3, #48	; 0x30
 800dcde:	d86b      	bhi.n	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dce0:	2b20      	cmp	r3, #32
 800dce2:	d060      	beq.n	800dda6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dce4:	2b20      	cmp	r3, #32
 800dce6:	d867      	bhi.n	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d05c      	beq.n	800dda6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dcec:	2b10      	cmp	r3, #16
 800dcee:	d05a      	beq.n	800dda6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dcf0:	e062      	b.n	800ddb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dd02:	f000 f98b 	bl	800e01c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dd14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	609a      	str	r2, [r3, #8]
      break;
 800dd1e:	e04f      	b.n	800ddc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dd30:	f000 f974 	bl	800e01c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	689a      	ldr	r2, [r3, #8]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd42:	609a      	str	r2, [r3, #8]
      break;
 800dd44:	e03c      	b.n	800ddc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd52:	461a      	mov	r2, r3
 800dd54:	f000 f8e4 	bl	800df20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2150      	movs	r1, #80	; 0x50
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f000 f93e 	bl	800dfe0 <TIM_ITRx_SetConfig>
      break;
 800dd64:	e02c      	b.n	800ddc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd72:	461a      	mov	r2, r3
 800dd74:	f000 f903 	bl	800df7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2160      	movs	r1, #96	; 0x60
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 f92e 	bl	800dfe0 <TIM_ITRx_SetConfig>
      break;
 800dd84:	e01c      	b.n	800ddc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd92:	461a      	mov	r2, r3
 800dd94:	f000 f8c4 	bl	800df20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2140      	movs	r1, #64	; 0x40
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 f91e 	bl	800dfe0 <TIM_ITRx_SetConfig>
      break;
 800dda4:	e00c      	b.n	800ddc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4619      	mov	r1, r3
 800ddb0:	4610      	mov	r0, r2
 800ddb2:	f000 f915 	bl	800dfe0 <TIM_ITRx_SetConfig>
      break;
 800ddb6:	e003      	b.n	800ddc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	73fb      	strb	r3, [r7, #15]
      break;
 800ddbc:	e000      	b.n	800ddc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ddbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	ffceff88 	.word	0xffceff88
 800dde0:	00100040 	.word	0x00100040
 800dde4:	00100030 	.word	0x00100030
 800dde8:	00100020 	.word	0x00100020

0800ddec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a40      	ldr	r2, [pc, #256]	; (800df00 <TIM_Base_SetConfig+0x114>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d013      	beq.n	800de2c <TIM_Base_SetConfig+0x40>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de0a:	d00f      	beq.n	800de2c <TIM_Base_SetConfig+0x40>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a3d      	ldr	r2, [pc, #244]	; (800df04 <TIM_Base_SetConfig+0x118>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d00b      	beq.n	800de2c <TIM_Base_SetConfig+0x40>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a3c      	ldr	r2, [pc, #240]	; (800df08 <TIM_Base_SetConfig+0x11c>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d007      	beq.n	800de2c <TIM_Base_SetConfig+0x40>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a3b      	ldr	r2, [pc, #236]	; (800df0c <TIM_Base_SetConfig+0x120>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d003      	beq.n	800de2c <TIM_Base_SetConfig+0x40>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4a3a      	ldr	r2, [pc, #232]	; (800df10 <TIM_Base_SetConfig+0x124>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d108      	bne.n	800de3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	4313      	orrs	r3, r2
 800de3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a2f      	ldr	r2, [pc, #188]	; (800df00 <TIM_Base_SetConfig+0x114>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d01f      	beq.n	800de86 <TIM_Base_SetConfig+0x9a>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de4c:	d01b      	beq.n	800de86 <TIM_Base_SetConfig+0x9a>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a2c      	ldr	r2, [pc, #176]	; (800df04 <TIM_Base_SetConfig+0x118>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d017      	beq.n	800de86 <TIM_Base_SetConfig+0x9a>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a2b      	ldr	r2, [pc, #172]	; (800df08 <TIM_Base_SetConfig+0x11c>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d013      	beq.n	800de86 <TIM_Base_SetConfig+0x9a>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a2a      	ldr	r2, [pc, #168]	; (800df0c <TIM_Base_SetConfig+0x120>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d00f      	beq.n	800de86 <TIM_Base_SetConfig+0x9a>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a29      	ldr	r2, [pc, #164]	; (800df10 <TIM_Base_SetConfig+0x124>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d00b      	beq.n	800de86 <TIM_Base_SetConfig+0x9a>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a28      	ldr	r2, [pc, #160]	; (800df14 <TIM_Base_SetConfig+0x128>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d007      	beq.n	800de86 <TIM_Base_SetConfig+0x9a>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a27      	ldr	r2, [pc, #156]	; (800df18 <TIM_Base_SetConfig+0x12c>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d003      	beq.n	800de86 <TIM_Base_SetConfig+0x9a>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a26      	ldr	r2, [pc, #152]	; (800df1c <TIM_Base_SetConfig+0x130>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d108      	bne.n	800de98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	4313      	orrs	r3, r2
 800de96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	695b      	ldr	r3, [r3, #20]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	689a      	ldr	r2, [r3, #8]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	4a10      	ldr	r2, [pc, #64]	; (800df00 <TIM_Base_SetConfig+0x114>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d00f      	beq.n	800dee4 <TIM_Base_SetConfig+0xf8>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	4a12      	ldr	r2, [pc, #72]	; (800df10 <TIM_Base_SetConfig+0x124>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d00b      	beq.n	800dee4 <TIM_Base_SetConfig+0xf8>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a11      	ldr	r2, [pc, #68]	; (800df14 <TIM_Base_SetConfig+0x128>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d007      	beq.n	800dee4 <TIM_Base_SetConfig+0xf8>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a10      	ldr	r2, [pc, #64]	; (800df18 <TIM_Base_SetConfig+0x12c>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d003      	beq.n	800dee4 <TIM_Base_SetConfig+0xf8>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4a0f      	ldr	r2, [pc, #60]	; (800df1c <TIM_Base_SetConfig+0x130>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d103      	bne.n	800deec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	691a      	ldr	r2, [r3, #16]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2201      	movs	r2, #1
 800def0:	615a      	str	r2, [r3, #20]
}
 800def2:	bf00      	nop
 800def4:	3714      	adds	r7, #20
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	40010000 	.word	0x40010000
 800df04:	40000400 	.word	0x40000400
 800df08:	40000800 	.word	0x40000800
 800df0c:	40000c00 	.word	0x40000c00
 800df10:	40010400 	.word	0x40010400
 800df14:	40014000 	.word	0x40014000
 800df18:	40014400 	.word	0x40014400
 800df1c:	40014800 	.word	0x40014800

0800df20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df20:	b480      	push	{r7}
 800df22:	b087      	sub	sp, #28
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6a1b      	ldr	r3, [r3, #32]
 800df30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6a1b      	ldr	r3, [r3, #32]
 800df36:	f023 0201 	bic.w	r2, r3, #1
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	699b      	ldr	r3, [r3, #24]
 800df42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	011b      	lsls	r3, r3, #4
 800df50:	693a      	ldr	r2, [r7, #16]
 800df52:	4313      	orrs	r3, r2
 800df54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	f023 030a 	bic.w	r3, r3, #10
 800df5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	4313      	orrs	r3, r2
 800df64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	697a      	ldr	r2, [r7, #20]
 800df70:	621a      	str	r2, [r3, #32]
}
 800df72:	bf00      	nop
 800df74:	371c      	adds	r7, #28
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr

0800df7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df7e:	b480      	push	{r7}
 800df80:	b087      	sub	sp, #28
 800df82:	af00      	add	r7, sp, #0
 800df84:	60f8      	str	r0, [r7, #12]
 800df86:	60b9      	str	r1, [r7, #8]
 800df88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	f023 0210 	bic.w	r2, r3, #16
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	699b      	ldr	r3, [r3, #24]
 800df9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6a1b      	ldr	r3, [r3, #32]
 800dfa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dfa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	031b      	lsls	r3, r3, #12
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dfba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	011b      	lsls	r3, r3, #4
 800dfc0:	693a      	ldr	r2, [r7, #16]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	693a      	ldr	r2, [r7, #16]
 800dfd0:	621a      	str	r2, [r3, #32]
}
 800dfd2:	bf00      	nop
 800dfd4:	371c      	adds	r7, #28
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
	...

0800dfe0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	4b09      	ldr	r3, [pc, #36]	; (800e018 <TIM_ITRx_SetConfig+0x38>)
 800dff4:	4013      	ands	r3, r2
 800dff6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	4313      	orrs	r3, r2
 800dffe:	f043 0307 	orr.w	r3, r3, #7
 800e002:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	609a      	str	r2, [r3, #8]
}
 800e00a:	bf00      	nop
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	ffcfff8f 	.word	0xffcfff8f

0800e01c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b087      	sub	sp, #28
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	607a      	str	r2, [r7, #4]
 800e028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	021a      	lsls	r2, r3, #8
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	431a      	orrs	r2, r3
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	4313      	orrs	r3, r2
 800e044:	697a      	ldr	r2, [r7, #20]
 800e046:	4313      	orrs	r3, r2
 800e048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	697a      	ldr	r2, [r7, #20]
 800e04e:	609a      	str	r2, [r3, #8]
}
 800e050:	bf00      	nop
 800e052:	371c      	adds	r7, #28
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d101      	bne.n	800e074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e070:	2302      	movs	r3, #2
 800e072:	e06d      	b.n	800e150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2201      	movs	r2, #1
 800e078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2202      	movs	r2, #2
 800e080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a30      	ldr	r2, [pc, #192]	; (800e15c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d004      	beq.n	800e0a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a2f      	ldr	r2, [pc, #188]	; (800e160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d108      	bne.n	800e0ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e0ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	68fa      	ldr	r2, [r7, #12]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a20      	ldr	r2, [pc, #128]	; (800e15c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d022      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0e6:	d01d      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a1d      	ldr	r2, [pc, #116]	; (800e164 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d018      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a1c      	ldr	r2, [pc, #112]	; (800e168 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d013      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a1a      	ldr	r2, [pc, #104]	; (800e16c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d00e      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a15      	ldr	r2, [pc, #84]	; (800e160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d009      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a16      	ldr	r2, [pc, #88]	; (800e170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d004      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a15      	ldr	r2, [pc, #84]	; (800e174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d10c      	bne.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e12a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	4313      	orrs	r3, r2
 800e134:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68ba      	ldr	r2, [r7, #8]
 800e13c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2201      	movs	r2, #1
 800e142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2200      	movs	r2, #0
 800e14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e14e:	2300      	movs	r3, #0
}
 800e150:	4618      	mov	r0, r3
 800e152:	3714      	adds	r7, #20
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr
 800e15c:	40010000 	.word	0x40010000
 800e160:	40010400 	.word	0x40010400
 800e164:	40000400 	.word	0x40000400
 800e168:	40000800 	.word	0x40000800
 800e16c:	40000c00 	.word	0x40000c00
 800e170:	40001800 	.word	0x40001800
 800e174:	40014000 	.word	0x40014000

0800e178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d101      	bne.n	800e18a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e186:	2301      	movs	r3, #1
 800e188:	e042      	b.n	800e210 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e190:	2b00      	cmp	r3, #0
 800e192:	d106      	bne.n	800e1a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7f5 fc05 	bl	80039ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2224      	movs	r2, #36	; 0x24
 800e1a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f022 0201 	bic.w	r2, r2, #1
 800e1b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 f8ba 	bl	800e334 <UART_SetConfig>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d101      	bne.n	800e1ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	e022      	b.n	800e210 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d002      	beq.n	800e1d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 fe16 	bl	800ee04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e1e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	689a      	ldr	r2, [r3, #8]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e1f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f042 0201 	orr.w	r2, r2, #1
 800e206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 fe9d 	bl	800ef48 <UART_CheckIdleState>
 800e20e:	4603      	mov	r3, r0
}
 800e210:	4618      	mov	r0, r3
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b08a      	sub	sp, #40	; 0x28
 800e21c:	af02      	add	r7, sp, #8
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	603b      	str	r3, [r7, #0]
 800e224:	4613      	mov	r3, r2
 800e226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e22e:	2b20      	cmp	r3, #32
 800e230:	d17b      	bne.n	800e32a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <HAL_UART_Transmit+0x26>
 800e238:	88fb      	ldrh	r3, [r7, #6]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d101      	bne.n	800e242 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	e074      	b.n	800e32c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2200      	movs	r2, #0
 800e246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2221      	movs	r2, #33	; 0x21
 800e24e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e252:	f7f6 f8b9 	bl	80043c8 <HAL_GetTick>
 800e256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	88fa      	ldrh	r2, [r7, #6]
 800e25c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	88fa      	ldrh	r2, [r7, #6]
 800e264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e270:	d108      	bne.n	800e284 <HAL_UART_Transmit+0x6c>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	691b      	ldr	r3, [r3, #16]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d104      	bne.n	800e284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	61bb      	str	r3, [r7, #24]
 800e282:	e003      	b.n	800e28c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e288:	2300      	movs	r3, #0
 800e28a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e28c:	e030      	b.n	800e2f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	2200      	movs	r2, #0
 800e296:	2180      	movs	r1, #128	; 0x80
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 feff 	bl	800f09c <UART_WaitOnFlagUntilTimeout>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d005      	beq.n	800e2b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2220      	movs	r2, #32
 800e2a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	e03d      	b.n	800e32c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d10b      	bne.n	800e2ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	3302      	adds	r3, #2
 800e2ca:	61bb      	str	r3, [r7, #24]
 800e2cc:	e007      	b.n	800e2de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	781a      	ldrb	r2, [r3, #0]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1c8      	bne.n	800e28e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	9300      	str	r3, [sp, #0]
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	2200      	movs	r2, #0
 800e304:	2140      	movs	r1, #64	; 0x40
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f000 fec8 	bl	800f09c <UART_WaitOnFlagUntilTimeout>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d005      	beq.n	800e31e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2220      	movs	r2, #32
 800e316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e31a:	2303      	movs	r3, #3
 800e31c:	e006      	b.n	800e32c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2220      	movs	r2, #32
 800e322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e326:	2300      	movs	r3, #0
 800e328:	e000      	b.n	800e32c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e32a:	2302      	movs	r3, #2
  }
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3720      	adds	r7, #32
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e338:	b092      	sub	sp, #72	; 0x48
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	689a      	ldr	r2, [r3, #8]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	431a      	orrs	r2, r3
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	431a      	orrs	r2, r3
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	69db      	ldr	r3, [r3, #28]
 800e358:	4313      	orrs	r3, r2
 800e35a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	4bbe      	ldr	r3, [pc, #760]	; (800e65c <UART_SetConfig+0x328>)
 800e364:	4013      	ands	r3, r2
 800e366:	697a      	ldr	r2, [r7, #20]
 800e368:	6812      	ldr	r2, [r2, #0]
 800e36a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e36c:	430b      	orrs	r3, r1
 800e36e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	68da      	ldr	r2, [r3, #12]
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	430a      	orrs	r2, r1
 800e384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	699b      	ldr	r3, [r3, #24]
 800e38a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4ab3      	ldr	r2, [pc, #716]	; (800e660 <UART_SetConfig+0x32c>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d004      	beq.n	800e3a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	6a1b      	ldr	r3, [r3, #32]
 800e39a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e39c:	4313      	orrs	r3, r2
 800e39e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	689a      	ldr	r2, [r3, #8]
 800e3a6:	4baf      	ldr	r3, [pc, #700]	; (800e664 <UART_SetConfig+0x330>)
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	697a      	ldr	r2, [r7, #20]
 800e3ac:	6812      	ldr	r2, [r2, #0]
 800e3ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3b0:	430b      	orrs	r3, r1
 800e3b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ba:	f023 010f 	bic.w	r1, r3, #15
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	430a      	orrs	r2, r1
 800e3c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4aa6      	ldr	r2, [pc, #664]	; (800e668 <UART_SetConfig+0x334>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d177      	bne.n	800e4c4 <UART_SetConfig+0x190>
 800e3d4:	4ba5      	ldr	r3, [pc, #660]	; (800e66c <UART_SetConfig+0x338>)
 800e3d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3dc:	2b28      	cmp	r3, #40	; 0x28
 800e3de:	d86d      	bhi.n	800e4bc <UART_SetConfig+0x188>
 800e3e0:	a201      	add	r2, pc, #4	; (adr r2, 800e3e8 <UART_SetConfig+0xb4>)
 800e3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e6:	bf00      	nop
 800e3e8:	0800e48d 	.word	0x0800e48d
 800e3ec:	0800e4bd 	.word	0x0800e4bd
 800e3f0:	0800e4bd 	.word	0x0800e4bd
 800e3f4:	0800e4bd 	.word	0x0800e4bd
 800e3f8:	0800e4bd 	.word	0x0800e4bd
 800e3fc:	0800e4bd 	.word	0x0800e4bd
 800e400:	0800e4bd 	.word	0x0800e4bd
 800e404:	0800e4bd 	.word	0x0800e4bd
 800e408:	0800e495 	.word	0x0800e495
 800e40c:	0800e4bd 	.word	0x0800e4bd
 800e410:	0800e4bd 	.word	0x0800e4bd
 800e414:	0800e4bd 	.word	0x0800e4bd
 800e418:	0800e4bd 	.word	0x0800e4bd
 800e41c:	0800e4bd 	.word	0x0800e4bd
 800e420:	0800e4bd 	.word	0x0800e4bd
 800e424:	0800e4bd 	.word	0x0800e4bd
 800e428:	0800e49d 	.word	0x0800e49d
 800e42c:	0800e4bd 	.word	0x0800e4bd
 800e430:	0800e4bd 	.word	0x0800e4bd
 800e434:	0800e4bd 	.word	0x0800e4bd
 800e438:	0800e4bd 	.word	0x0800e4bd
 800e43c:	0800e4bd 	.word	0x0800e4bd
 800e440:	0800e4bd 	.word	0x0800e4bd
 800e444:	0800e4bd 	.word	0x0800e4bd
 800e448:	0800e4a5 	.word	0x0800e4a5
 800e44c:	0800e4bd 	.word	0x0800e4bd
 800e450:	0800e4bd 	.word	0x0800e4bd
 800e454:	0800e4bd 	.word	0x0800e4bd
 800e458:	0800e4bd 	.word	0x0800e4bd
 800e45c:	0800e4bd 	.word	0x0800e4bd
 800e460:	0800e4bd 	.word	0x0800e4bd
 800e464:	0800e4bd 	.word	0x0800e4bd
 800e468:	0800e4ad 	.word	0x0800e4ad
 800e46c:	0800e4bd 	.word	0x0800e4bd
 800e470:	0800e4bd 	.word	0x0800e4bd
 800e474:	0800e4bd 	.word	0x0800e4bd
 800e478:	0800e4bd 	.word	0x0800e4bd
 800e47c:	0800e4bd 	.word	0x0800e4bd
 800e480:	0800e4bd 	.word	0x0800e4bd
 800e484:	0800e4bd 	.word	0x0800e4bd
 800e488:	0800e4b5 	.word	0x0800e4b5
 800e48c:	2301      	movs	r3, #1
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e222      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e494:	2304      	movs	r3, #4
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e21e      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e49c:	2308      	movs	r3, #8
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e21a      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e4a4:	2310      	movs	r3, #16
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e216      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e4ac:	2320      	movs	r3, #32
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e212      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e4b4:	2340      	movs	r3, #64	; 0x40
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e20e      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e4bc:	2380      	movs	r3, #128	; 0x80
 800e4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c2:	e20a      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a69      	ldr	r2, [pc, #420]	; (800e670 <UART_SetConfig+0x33c>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d130      	bne.n	800e530 <UART_SetConfig+0x1fc>
 800e4ce:	4b67      	ldr	r3, [pc, #412]	; (800e66c <UART_SetConfig+0x338>)
 800e4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4d2:	f003 0307 	and.w	r3, r3, #7
 800e4d6:	2b05      	cmp	r3, #5
 800e4d8:	d826      	bhi.n	800e528 <UART_SetConfig+0x1f4>
 800e4da:	a201      	add	r2, pc, #4	; (adr r2, 800e4e0 <UART_SetConfig+0x1ac>)
 800e4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e0:	0800e4f9 	.word	0x0800e4f9
 800e4e4:	0800e501 	.word	0x0800e501
 800e4e8:	0800e509 	.word	0x0800e509
 800e4ec:	0800e511 	.word	0x0800e511
 800e4f0:	0800e519 	.word	0x0800e519
 800e4f4:	0800e521 	.word	0x0800e521
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e1ec      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e500:	2304      	movs	r3, #4
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e1e8      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e508:	2308      	movs	r3, #8
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e1e4      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e510:	2310      	movs	r3, #16
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e1e0      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e518:	2320      	movs	r3, #32
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e1dc      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e520:	2340      	movs	r3, #64	; 0x40
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e1d8      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e528:	2380      	movs	r3, #128	; 0x80
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e1d4      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a4f      	ldr	r2, [pc, #316]	; (800e674 <UART_SetConfig+0x340>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d130      	bne.n	800e59c <UART_SetConfig+0x268>
 800e53a:	4b4c      	ldr	r3, [pc, #304]	; (800e66c <UART_SetConfig+0x338>)
 800e53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e53e:	f003 0307 	and.w	r3, r3, #7
 800e542:	2b05      	cmp	r3, #5
 800e544:	d826      	bhi.n	800e594 <UART_SetConfig+0x260>
 800e546:	a201      	add	r2, pc, #4	; (adr r2, 800e54c <UART_SetConfig+0x218>)
 800e548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54c:	0800e565 	.word	0x0800e565
 800e550:	0800e56d 	.word	0x0800e56d
 800e554:	0800e575 	.word	0x0800e575
 800e558:	0800e57d 	.word	0x0800e57d
 800e55c:	0800e585 	.word	0x0800e585
 800e560:	0800e58d 	.word	0x0800e58d
 800e564:	2300      	movs	r3, #0
 800e566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56a:	e1b6      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e56c:	2304      	movs	r3, #4
 800e56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e572:	e1b2      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e574:	2308      	movs	r3, #8
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57a:	e1ae      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e57c:	2310      	movs	r3, #16
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e582:	e1aa      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e584:	2320      	movs	r3, #32
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58a:	e1a6      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e58c:	2340      	movs	r3, #64	; 0x40
 800e58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e592:	e1a2      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e594:	2380      	movs	r3, #128	; 0x80
 800e596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59a:	e19e      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a35      	ldr	r2, [pc, #212]	; (800e678 <UART_SetConfig+0x344>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d130      	bne.n	800e608 <UART_SetConfig+0x2d4>
 800e5a6:	4b31      	ldr	r3, [pc, #196]	; (800e66c <UART_SetConfig+0x338>)
 800e5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5aa:	f003 0307 	and.w	r3, r3, #7
 800e5ae:	2b05      	cmp	r3, #5
 800e5b0:	d826      	bhi.n	800e600 <UART_SetConfig+0x2cc>
 800e5b2:	a201      	add	r2, pc, #4	; (adr r2, 800e5b8 <UART_SetConfig+0x284>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e5d1 	.word	0x0800e5d1
 800e5bc:	0800e5d9 	.word	0x0800e5d9
 800e5c0:	0800e5e1 	.word	0x0800e5e1
 800e5c4:	0800e5e9 	.word	0x0800e5e9
 800e5c8:	0800e5f1 	.word	0x0800e5f1
 800e5cc:	0800e5f9 	.word	0x0800e5f9
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5d6:	e180      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e5d8:	2304      	movs	r3, #4
 800e5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5de:	e17c      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e5e0:	2308      	movs	r3, #8
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e6:	e178      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e5e8:	2310      	movs	r3, #16
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ee:	e174      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e5f0:	2320      	movs	r3, #32
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f6:	e170      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e5f8:	2340      	movs	r3, #64	; 0x40
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fe:	e16c      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e600:	2380      	movs	r3, #128	; 0x80
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e606:	e168      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e608:	697b      	ldr	r3, [r7, #20]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a1b      	ldr	r2, [pc, #108]	; (800e67c <UART_SetConfig+0x348>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d142      	bne.n	800e698 <UART_SetConfig+0x364>
 800e612:	4b16      	ldr	r3, [pc, #88]	; (800e66c <UART_SetConfig+0x338>)
 800e614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e616:	f003 0307 	and.w	r3, r3, #7
 800e61a:	2b05      	cmp	r3, #5
 800e61c:	d838      	bhi.n	800e690 <UART_SetConfig+0x35c>
 800e61e:	a201      	add	r2, pc, #4	; (adr r2, 800e624 <UART_SetConfig+0x2f0>)
 800e620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e624:	0800e63d 	.word	0x0800e63d
 800e628:	0800e645 	.word	0x0800e645
 800e62c:	0800e64d 	.word	0x0800e64d
 800e630:	0800e655 	.word	0x0800e655
 800e634:	0800e681 	.word	0x0800e681
 800e638:	0800e689 	.word	0x0800e689
 800e63c:	2300      	movs	r3, #0
 800e63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e642:	e14a      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e644:	2304      	movs	r3, #4
 800e646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64a:	e146      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e64c:	2308      	movs	r3, #8
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e652:	e142      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e654:	2310      	movs	r3, #16
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65a:	e13e      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e65c:	cfff69f3 	.word	0xcfff69f3
 800e660:	58000c00 	.word	0x58000c00
 800e664:	11fff4ff 	.word	0x11fff4ff
 800e668:	40011000 	.word	0x40011000
 800e66c:	58024400 	.word	0x58024400
 800e670:	40004400 	.word	0x40004400
 800e674:	40004800 	.word	0x40004800
 800e678:	40004c00 	.word	0x40004c00
 800e67c:	40005000 	.word	0x40005000
 800e680:	2320      	movs	r3, #32
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e128      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e688:	2340      	movs	r3, #64	; 0x40
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68e:	e124      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e690:	2380      	movs	r3, #128	; 0x80
 800e692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e696:	e120      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4acb      	ldr	r2, [pc, #812]	; (800e9cc <UART_SetConfig+0x698>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d176      	bne.n	800e790 <UART_SetConfig+0x45c>
 800e6a2:	4bcb      	ldr	r3, [pc, #812]	; (800e9d0 <UART_SetConfig+0x69c>)
 800e6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e6aa:	2b28      	cmp	r3, #40	; 0x28
 800e6ac:	d86c      	bhi.n	800e788 <UART_SetConfig+0x454>
 800e6ae:	a201      	add	r2, pc, #4	; (adr r2, 800e6b4 <UART_SetConfig+0x380>)
 800e6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b4:	0800e759 	.word	0x0800e759
 800e6b8:	0800e789 	.word	0x0800e789
 800e6bc:	0800e789 	.word	0x0800e789
 800e6c0:	0800e789 	.word	0x0800e789
 800e6c4:	0800e789 	.word	0x0800e789
 800e6c8:	0800e789 	.word	0x0800e789
 800e6cc:	0800e789 	.word	0x0800e789
 800e6d0:	0800e789 	.word	0x0800e789
 800e6d4:	0800e761 	.word	0x0800e761
 800e6d8:	0800e789 	.word	0x0800e789
 800e6dc:	0800e789 	.word	0x0800e789
 800e6e0:	0800e789 	.word	0x0800e789
 800e6e4:	0800e789 	.word	0x0800e789
 800e6e8:	0800e789 	.word	0x0800e789
 800e6ec:	0800e789 	.word	0x0800e789
 800e6f0:	0800e789 	.word	0x0800e789
 800e6f4:	0800e769 	.word	0x0800e769
 800e6f8:	0800e789 	.word	0x0800e789
 800e6fc:	0800e789 	.word	0x0800e789
 800e700:	0800e789 	.word	0x0800e789
 800e704:	0800e789 	.word	0x0800e789
 800e708:	0800e789 	.word	0x0800e789
 800e70c:	0800e789 	.word	0x0800e789
 800e710:	0800e789 	.word	0x0800e789
 800e714:	0800e771 	.word	0x0800e771
 800e718:	0800e789 	.word	0x0800e789
 800e71c:	0800e789 	.word	0x0800e789
 800e720:	0800e789 	.word	0x0800e789
 800e724:	0800e789 	.word	0x0800e789
 800e728:	0800e789 	.word	0x0800e789
 800e72c:	0800e789 	.word	0x0800e789
 800e730:	0800e789 	.word	0x0800e789
 800e734:	0800e779 	.word	0x0800e779
 800e738:	0800e789 	.word	0x0800e789
 800e73c:	0800e789 	.word	0x0800e789
 800e740:	0800e789 	.word	0x0800e789
 800e744:	0800e789 	.word	0x0800e789
 800e748:	0800e789 	.word	0x0800e789
 800e74c:	0800e789 	.word	0x0800e789
 800e750:	0800e789 	.word	0x0800e789
 800e754:	0800e781 	.word	0x0800e781
 800e758:	2301      	movs	r3, #1
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75e:	e0bc      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e760:	2304      	movs	r3, #4
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e766:	e0b8      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e768:	2308      	movs	r3, #8
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e0b4      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e770:	2310      	movs	r3, #16
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e0b0      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e778:	2320      	movs	r3, #32
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77e:	e0ac      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e780:	2340      	movs	r3, #64	; 0x40
 800e782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e786:	e0a8      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e788:	2380      	movs	r3, #128	; 0x80
 800e78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e78e:	e0a4      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a8f      	ldr	r2, [pc, #572]	; (800e9d4 <UART_SetConfig+0x6a0>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d130      	bne.n	800e7fc <UART_SetConfig+0x4c8>
 800e79a:	4b8d      	ldr	r3, [pc, #564]	; (800e9d0 <UART_SetConfig+0x69c>)
 800e79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e79e:	f003 0307 	and.w	r3, r3, #7
 800e7a2:	2b05      	cmp	r3, #5
 800e7a4:	d826      	bhi.n	800e7f4 <UART_SetConfig+0x4c0>
 800e7a6:	a201      	add	r2, pc, #4	; (adr r2, 800e7ac <UART_SetConfig+0x478>)
 800e7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ac:	0800e7c5 	.word	0x0800e7c5
 800e7b0:	0800e7cd 	.word	0x0800e7cd
 800e7b4:	0800e7d5 	.word	0x0800e7d5
 800e7b8:	0800e7dd 	.word	0x0800e7dd
 800e7bc:	0800e7e5 	.word	0x0800e7e5
 800e7c0:	0800e7ed 	.word	0x0800e7ed
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ca:	e086      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e7cc:	2304      	movs	r3, #4
 800e7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d2:	e082      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e7d4:	2308      	movs	r3, #8
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7da:	e07e      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e7dc:	2310      	movs	r3, #16
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e07a      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e7e4:	2320      	movs	r3, #32
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ea:	e076      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e7ec:	2340      	movs	r3, #64	; 0x40
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f2:	e072      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e7f4:	2380      	movs	r3, #128	; 0x80
 800e7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fa:	e06e      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4a75      	ldr	r2, [pc, #468]	; (800e9d8 <UART_SetConfig+0x6a4>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d130      	bne.n	800e868 <UART_SetConfig+0x534>
 800e806:	4b72      	ldr	r3, [pc, #456]	; (800e9d0 <UART_SetConfig+0x69c>)
 800e808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e80a:	f003 0307 	and.w	r3, r3, #7
 800e80e:	2b05      	cmp	r3, #5
 800e810:	d826      	bhi.n	800e860 <UART_SetConfig+0x52c>
 800e812:	a201      	add	r2, pc, #4	; (adr r2, 800e818 <UART_SetConfig+0x4e4>)
 800e814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e818:	0800e831 	.word	0x0800e831
 800e81c:	0800e839 	.word	0x0800e839
 800e820:	0800e841 	.word	0x0800e841
 800e824:	0800e849 	.word	0x0800e849
 800e828:	0800e851 	.word	0x0800e851
 800e82c:	0800e859 	.word	0x0800e859
 800e830:	2300      	movs	r3, #0
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e836:	e050      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e838:	2304      	movs	r3, #4
 800e83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e83e:	e04c      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e840:	2308      	movs	r3, #8
 800e842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e846:	e048      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e848:	2310      	movs	r3, #16
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84e:	e044      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e850:	2320      	movs	r3, #32
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e856:	e040      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e858:	2340      	movs	r3, #64	; 0x40
 800e85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85e:	e03c      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e860:	2380      	movs	r3, #128	; 0x80
 800e862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e866:	e038      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a5b      	ldr	r2, [pc, #364]	; (800e9dc <UART_SetConfig+0x6a8>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d130      	bne.n	800e8d4 <UART_SetConfig+0x5a0>
 800e872:	4b57      	ldr	r3, [pc, #348]	; (800e9d0 <UART_SetConfig+0x69c>)
 800e874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e876:	f003 0307 	and.w	r3, r3, #7
 800e87a:	2b05      	cmp	r3, #5
 800e87c:	d826      	bhi.n	800e8cc <UART_SetConfig+0x598>
 800e87e:	a201      	add	r2, pc, #4	; (adr r2, 800e884 <UART_SetConfig+0x550>)
 800e880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e884:	0800e89d 	.word	0x0800e89d
 800e888:	0800e8a5 	.word	0x0800e8a5
 800e88c:	0800e8ad 	.word	0x0800e8ad
 800e890:	0800e8b5 	.word	0x0800e8b5
 800e894:	0800e8bd 	.word	0x0800e8bd
 800e898:	0800e8c5 	.word	0x0800e8c5
 800e89c:	2302      	movs	r3, #2
 800e89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8a2:	e01a      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e8a4:	2304      	movs	r3, #4
 800e8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8aa:	e016      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e8ac:	2308      	movs	r3, #8
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b2:	e012      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e8b4:	2310      	movs	r3, #16
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ba:	e00e      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e8bc:	2320      	movs	r3, #32
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c2:	e00a      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e8c4:	2340      	movs	r3, #64	; 0x40
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ca:	e006      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e8cc:	2380      	movs	r3, #128	; 0x80
 800e8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8d2:	e002      	b.n	800e8da <UART_SetConfig+0x5a6>
 800e8d4:	2380      	movs	r3, #128	; 0x80
 800e8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a3f      	ldr	r2, [pc, #252]	; (800e9dc <UART_SetConfig+0x6a8>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	f040 80f8 	bne.w	800ead6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e8e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8ea:	2b20      	cmp	r3, #32
 800e8ec:	dc46      	bgt.n	800e97c <UART_SetConfig+0x648>
 800e8ee:	2b02      	cmp	r3, #2
 800e8f0:	f2c0 8082 	blt.w	800e9f8 <UART_SetConfig+0x6c4>
 800e8f4:	3b02      	subs	r3, #2
 800e8f6:	2b1e      	cmp	r3, #30
 800e8f8:	d87e      	bhi.n	800e9f8 <UART_SetConfig+0x6c4>
 800e8fa:	a201      	add	r2, pc, #4	; (adr r2, 800e900 <UART_SetConfig+0x5cc>)
 800e8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e900:	0800e983 	.word	0x0800e983
 800e904:	0800e9f9 	.word	0x0800e9f9
 800e908:	0800e98b 	.word	0x0800e98b
 800e90c:	0800e9f9 	.word	0x0800e9f9
 800e910:	0800e9f9 	.word	0x0800e9f9
 800e914:	0800e9f9 	.word	0x0800e9f9
 800e918:	0800e99b 	.word	0x0800e99b
 800e91c:	0800e9f9 	.word	0x0800e9f9
 800e920:	0800e9f9 	.word	0x0800e9f9
 800e924:	0800e9f9 	.word	0x0800e9f9
 800e928:	0800e9f9 	.word	0x0800e9f9
 800e92c:	0800e9f9 	.word	0x0800e9f9
 800e930:	0800e9f9 	.word	0x0800e9f9
 800e934:	0800e9f9 	.word	0x0800e9f9
 800e938:	0800e9ab 	.word	0x0800e9ab
 800e93c:	0800e9f9 	.word	0x0800e9f9
 800e940:	0800e9f9 	.word	0x0800e9f9
 800e944:	0800e9f9 	.word	0x0800e9f9
 800e948:	0800e9f9 	.word	0x0800e9f9
 800e94c:	0800e9f9 	.word	0x0800e9f9
 800e950:	0800e9f9 	.word	0x0800e9f9
 800e954:	0800e9f9 	.word	0x0800e9f9
 800e958:	0800e9f9 	.word	0x0800e9f9
 800e95c:	0800e9f9 	.word	0x0800e9f9
 800e960:	0800e9f9 	.word	0x0800e9f9
 800e964:	0800e9f9 	.word	0x0800e9f9
 800e968:	0800e9f9 	.word	0x0800e9f9
 800e96c:	0800e9f9 	.word	0x0800e9f9
 800e970:	0800e9f9 	.word	0x0800e9f9
 800e974:	0800e9f9 	.word	0x0800e9f9
 800e978:	0800e9eb 	.word	0x0800e9eb
 800e97c:	2b40      	cmp	r3, #64	; 0x40
 800e97e:	d037      	beq.n	800e9f0 <UART_SetConfig+0x6bc>
 800e980:	e03a      	b.n	800e9f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e982:	f7fe fb19 	bl	800cfb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e986:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e988:	e03c      	b.n	800ea04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e98a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fe fb28 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e998:	e034      	b.n	800ea04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e99a:	f107 0318 	add.w	r3, r7, #24
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7fe fc74 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9a8:	e02c      	b.n	800ea04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9aa:	4b09      	ldr	r3, [pc, #36]	; (800e9d0 <UART_SetConfig+0x69c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f003 0320 	and.w	r3, r3, #32
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d016      	beq.n	800e9e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e9b6:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <UART_SetConfig+0x69c>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	08db      	lsrs	r3, r3, #3
 800e9bc:	f003 0303 	and.w	r3, r3, #3
 800e9c0:	4a07      	ldr	r2, [pc, #28]	; (800e9e0 <UART_SetConfig+0x6ac>)
 800e9c2:	fa22 f303 	lsr.w	r3, r2, r3
 800e9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9c8:	e01c      	b.n	800ea04 <UART_SetConfig+0x6d0>
 800e9ca:	bf00      	nop
 800e9cc:	40011400 	.word	0x40011400
 800e9d0:	58024400 	.word	0x58024400
 800e9d4:	40007800 	.word	0x40007800
 800e9d8:	40007c00 	.word	0x40007c00
 800e9dc:	58000c00 	.word	0x58000c00
 800e9e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e9e4:	4b9d      	ldr	r3, [pc, #628]	; (800ec5c <UART_SetConfig+0x928>)
 800e9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9e8:	e00c      	b.n	800ea04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9ea:	4b9d      	ldr	r3, [pc, #628]	; (800ec60 <UART_SetConfig+0x92c>)
 800e9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9ee:	e009      	b.n	800ea04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9f6:	e005      	b.n	800ea04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ea04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	f000 81de 	beq.w	800edc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea10:	4a94      	ldr	r2, [pc, #592]	; (800ec64 <UART_SetConfig+0x930>)
 800ea12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea16:	461a      	mov	r2, r3
 800ea18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea1e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	685a      	ldr	r2, [r3, #4]
 800ea24:	4613      	mov	r3, r2
 800ea26:	005b      	lsls	r3, r3, #1
 800ea28:	4413      	add	r3, r2
 800ea2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d305      	bcc.n	800ea3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d903      	bls.n	800ea44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea42:	e1c1      	b.n	800edc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea46:	2200      	movs	r2, #0
 800ea48:	60bb      	str	r3, [r7, #8]
 800ea4a:	60fa      	str	r2, [r7, #12]
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea50:	4a84      	ldr	r2, [pc, #528]	; (800ec64 <UART_SetConfig+0x930>)
 800ea52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	2200      	movs	r2, #0
 800ea5a:	603b      	str	r3, [r7, #0]
 800ea5c:	607a      	str	r2, [r7, #4]
 800ea5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea66:	f7f3 fb33 	bl	80020d0 <__aeabi_uldivmod>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	4610      	mov	r0, r2
 800ea70:	4619      	mov	r1, r3
 800ea72:	f04f 0200 	mov.w	r2, #0
 800ea76:	f04f 0300 	mov.w	r3, #0
 800ea7a:	020b      	lsls	r3, r1, #8
 800ea7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ea80:	0202      	lsls	r2, r0, #8
 800ea82:	6979      	ldr	r1, [r7, #20]
 800ea84:	6849      	ldr	r1, [r1, #4]
 800ea86:	0849      	lsrs	r1, r1, #1
 800ea88:	2000      	movs	r0, #0
 800ea8a:	460c      	mov	r4, r1
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	eb12 0804 	adds.w	r8, r2, r4
 800ea92:	eb43 0905 	adc.w	r9, r3, r5
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	469a      	mov	sl, r3
 800ea9e:	4693      	mov	fp, r2
 800eaa0:	4652      	mov	r2, sl
 800eaa2:	465b      	mov	r3, fp
 800eaa4:	4640      	mov	r0, r8
 800eaa6:	4649      	mov	r1, r9
 800eaa8:	f7f3 fb12 	bl	80020d0 <__aeabi_uldivmod>
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	4613      	mov	r3, r2
 800eab2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eaba:	d308      	bcc.n	800eace <UART_SetConfig+0x79a>
 800eabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eabe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eac2:	d204      	bcs.n	800eace <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaca:	60da      	str	r2, [r3, #12]
 800eacc:	e17c      	b.n	800edc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800eace:	2301      	movs	r3, #1
 800ead0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ead4:	e178      	b.n	800edc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	69db      	ldr	r3, [r3, #28]
 800eada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eade:	f040 80c5 	bne.w	800ec6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800eae2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eae6:	2b20      	cmp	r3, #32
 800eae8:	dc48      	bgt.n	800eb7c <UART_SetConfig+0x848>
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	db7b      	blt.n	800ebe6 <UART_SetConfig+0x8b2>
 800eaee:	2b20      	cmp	r3, #32
 800eaf0:	d879      	bhi.n	800ebe6 <UART_SetConfig+0x8b2>
 800eaf2:	a201      	add	r2, pc, #4	; (adr r2, 800eaf8 <UART_SetConfig+0x7c4>)
 800eaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf8:	0800eb83 	.word	0x0800eb83
 800eafc:	0800eb8b 	.word	0x0800eb8b
 800eb00:	0800ebe7 	.word	0x0800ebe7
 800eb04:	0800ebe7 	.word	0x0800ebe7
 800eb08:	0800eb93 	.word	0x0800eb93
 800eb0c:	0800ebe7 	.word	0x0800ebe7
 800eb10:	0800ebe7 	.word	0x0800ebe7
 800eb14:	0800ebe7 	.word	0x0800ebe7
 800eb18:	0800eba3 	.word	0x0800eba3
 800eb1c:	0800ebe7 	.word	0x0800ebe7
 800eb20:	0800ebe7 	.word	0x0800ebe7
 800eb24:	0800ebe7 	.word	0x0800ebe7
 800eb28:	0800ebe7 	.word	0x0800ebe7
 800eb2c:	0800ebe7 	.word	0x0800ebe7
 800eb30:	0800ebe7 	.word	0x0800ebe7
 800eb34:	0800ebe7 	.word	0x0800ebe7
 800eb38:	0800ebb3 	.word	0x0800ebb3
 800eb3c:	0800ebe7 	.word	0x0800ebe7
 800eb40:	0800ebe7 	.word	0x0800ebe7
 800eb44:	0800ebe7 	.word	0x0800ebe7
 800eb48:	0800ebe7 	.word	0x0800ebe7
 800eb4c:	0800ebe7 	.word	0x0800ebe7
 800eb50:	0800ebe7 	.word	0x0800ebe7
 800eb54:	0800ebe7 	.word	0x0800ebe7
 800eb58:	0800ebe7 	.word	0x0800ebe7
 800eb5c:	0800ebe7 	.word	0x0800ebe7
 800eb60:	0800ebe7 	.word	0x0800ebe7
 800eb64:	0800ebe7 	.word	0x0800ebe7
 800eb68:	0800ebe7 	.word	0x0800ebe7
 800eb6c:	0800ebe7 	.word	0x0800ebe7
 800eb70:	0800ebe7 	.word	0x0800ebe7
 800eb74:	0800ebe7 	.word	0x0800ebe7
 800eb78:	0800ebd9 	.word	0x0800ebd9
 800eb7c:	2b40      	cmp	r3, #64	; 0x40
 800eb7e:	d02e      	beq.n	800ebde <UART_SetConfig+0x8aa>
 800eb80:	e031      	b.n	800ebe6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb82:	f7fc fa47 	bl	800b014 <HAL_RCC_GetPCLK1Freq>
 800eb86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb88:	e033      	b.n	800ebf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb8a:	f7fc fa59 	bl	800b040 <HAL_RCC_GetPCLK2Freq>
 800eb8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb90:	e02f      	b.n	800ebf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7fe fa24 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eba0:	e027      	b.n	800ebf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eba2:	f107 0318 	add.w	r3, r7, #24
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe fb70 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebb0:	e01f      	b.n	800ebf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebb2:	4b2d      	ldr	r3, [pc, #180]	; (800ec68 <UART_SetConfig+0x934>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f003 0320 	and.w	r3, r3, #32
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d009      	beq.n	800ebd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebbe:	4b2a      	ldr	r3, [pc, #168]	; (800ec68 <UART_SetConfig+0x934>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	08db      	lsrs	r3, r3, #3
 800ebc4:	f003 0303 	and.w	r3, r3, #3
 800ebc8:	4a24      	ldr	r2, [pc, #144]	; (800ec5c <UART_SetConfig+0x928>)
 800ebca:	fa22 f303 	lsr.w	r3, r2, r3
 800ebce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebd0:	e00f      	b.n	800ebf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ebd2:	4b22      	ldr	r3, [pc, #136]	; (800ec5c <UART_SetConfig+0x928>)
 800ebd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd6:	e00c      	b.n	800ebf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebd8:	4b21      	ldr	r3, [pc, #132]	; (800ec60 <UART_SetConfig+0x92c>)
 800ebda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebdc:	e009      	b.n	800ebf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebe4:	e005      	b.n	800ebf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ebea:	2301      	movs	r3, #1
 800ebec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ebf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f000 80e7 	beq.w	800edc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfe:	4a19      	ldr	r2, [pc, #100]	; (800ec64 <UART_SetConfig+0x930>)
 800ec00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec04:	461a      	mov	r2, r3
 800ec06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec0c:	005a      	lsls	r2, r3, #1
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	085b      	lsrs	r3, r3, #1
 800ec14:	441a      	add	r2, r3
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec22:	2b0f      	cmp	r3, #15
 800ec24:	d916      	bls.n	800ec54 <UART_SetConfig+0x920>
 800ec26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec2c:	d212      	bcs.n	800ec54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	f023 030f 	bic.w	r3, r3, #15
 800ec36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3a:	085b      	lsrs	r3, r3, #1
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	f003 0307 	and.w	r3, r3, #7
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec46:	4313      	orrs	r3, r2
 800ec48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec50:	60da      	str	r2, [r3, #12]
 800ec52:	e0b9      	b.n	800edc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ec54:	2301      	movs	r3, #1
 800ec56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ec5a:	e0b5      	b.n	800edc8 <UART_SetConfig+0xa94>
 800ec5c:	03d09000 	.word	0x03d09000
 800ec60:	003d0900 	.word	0x003d0900
 800ec64:	08020dd8 	.word	0x08020dd8
 800ec68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec70:	2b20      	cmp	r3, #32
 800ec72:	dc49      	bgt.n	800ed08 <UART_SetConfig+0x9d4>
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	db7c      	blt.n	800ed72 <UART_SetConfig+0xa3e>
 800ec78:	2b20      	cmp	r3, #32
 800ec7a:	d87a      	bhi.n	800ed72 <UART_SetConfig+0xa3e>
 800ec7c:	a201      	add	r2, pc, #4	; (adr r2, 800ec84 <UART_SetConfig+0x950>)
 800ec7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec82:	bf00      	nop
 800ec84:	0800ed0f 	.word	0x0800ed0f
 800ec88:	0800ed17 	.word	0x0800ed17
 800ec8c:	0800ed73 	.word	0x0800ed73
 800ec90:	0800ed73 	.word	0x0800ed73
 800ec94:	0800ed1f 	.word	0x0800ed1f
 800ec98:	0800ed73 	.word	0x0800ed73
 800ec9c:	0800ed73 	.word	0x0800ed73
 800eca0:	0800ed73 	.word	0x0800ed73
 800eca4:	0800ed2f 	.word	0x0800ed2f
 800eca8:	0800ed73 	.word	0x0800ed73
 800ecac:	0800ed73 	.word	0x0800ed73
 800ecb0:	0800ed73 	.word	0x0800ed73
 800ecb4:	0800ed73 	.word	0x0800ed73
 800ecb8:	0800ed73 	.word	0x0800ed73
 800ecbc:	0800ed73 	.word	0x0800ed73
 800ecc0:	0800ed73 	.word	0x0800ed73
 800ecc4:	0800ed3f 	.word	0x0800ed3f
 800ecc8:	0800ed73 	.word	0x0800ed73
 800eccc:	0800ed73 	.word	0x0800ed73
 800ecd0:	0800ed73 	.word	0x0800ed73
 800ecd4:	0800ed73 	.word	0x0800ed73
 800ecd8:	0800ed73 	.word	0x0800ed73
 800ecdc:	0800ed73 	.word	0x0800ed73
 800ece0:	0800ed73 	.word	0x0800ed73
 800ece4:	0800ed73 	.word	0x0800ed73
 800ece8:	0800ed73 	.word	0x0800ed73
 800ecec:	0800ed73 	.word	0x0800ed73
 800ecf0:	0800ed73 	.word	0x0800ed73
 800ecf4:	0800ed73 	.word	0x0800ed73
 800ecf8:	0800ed73 	.word	0x0800ed73
 800ecfc:	0800ed73 	.word	0x0800ed73
 800ed00:	0800ed73 	.word	0x0800ed73
 800ed04:	0800ed65 	.word	0x0800ed65
 800ed08:	2b40      	cmp	r3, #64	; 0x40
 800ed0a:	d02e      	beq.n	800ed6a <UART_SetConfig+0xa36>
 800ed0c:	e031      	b.n	800ed72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed0e:	f7fc f981 	bl	800b014 <HAL_RCC_GetPCLK1Freq>
 800ed12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed14:	e033      	b.n	800ed7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed16:	f7fc f993 	bl	800b040 <HAL_RCC_GetPCLK2Freq>
 800ed1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed1c:	e02f      	b.n	800ed7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fe f95e 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed2c:	e027      	b.n	800ed7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed2e:	f107 0318 	add.w	r3, r7, #24
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fe faaa 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed3c:	e01f      	b.n	800ed7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed3e:	4b2d      	ldr	r3, [pc, #180]	; (800edf4 <UART_SetConfig+0xac0>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f003 0320 	and.w	r3, r3, #32
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d009      	beq.n	800ed5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed4a:	4b2a      	ldr	r3, [pc, #168]	; (800edf4 <UART_SetConfig+0xac0>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	08db      	lsrs	r3, r3, #3
 800ed50:	f003 0303 	and.w	r3, r3, #3
 800ed54:	4a28      	ldr	r2, [pc, #160]	; (800edf8 <UART_SetConfig+0xac4>)
 800ed56:	fa22 f303 	lsr.w	r3, r2, r3
 800ed5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed5c:	e00f      	b.n	800ed7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ed5e:	4b26      	ldr	r3, [pc, #152]	; (800edf8 <UART_SetConfig+0xac4>)
 800ed60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed62:	e00c      	b.n	800ed7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed64:	4b25      	ldr	r3, [pc, #148]	; (800edfc <UART_SetConfig+0xac8>)
 800ed66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed68:	e009      	b.n	800ed7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed70:	e005      	b.n	800ed7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ed72:	2300      	movs	r3, #0
 800ed74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ed76:	2301      	movs	r3, #1
 800ed78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ed7c:	bf00      	nop
    }

    if (pclk != 0U)
 800ed7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d021      	beq.n	800edc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	4a1d      	ldr	r2, [pc, #116]	; (800ee00 <UART_SetConfig+0xacc>)
 800ed8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed92:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	085b      	lsrs	r3, r3, #1
 800ed9c:	441a      	add	r2, r3
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	fbb2 f3f3 	udiv	r3, r2, r3
 800eda6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edaa:	2b0f      	cmp	r3, #15
 800edac:	d909      	bls.n	800edc2 <UART_SetConfig+0xa8e>
 800edae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edb4:	d205      	bcs.n	800edc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800edb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb8:	b29a      	uxth	r2, r3
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	60da      	str	r2, [r3, #12]
 800edc0:	e002      	b.n	800edc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	2201      	movs	r2, #1
 800edcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	2200      	movs	r2, #0
 800eddc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	2200      	movs	r2, #0
 800ede2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ede4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3748      	adds	r7, #72	; 0x48
 800edec:	46bd      	mov	sp, r7
 800edee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800edf2:	bf00      	nop
 800edf4:	58024400 	.word	0x58024400
 800edf8:	03d09000 	.word	0x03d09000
 800edfc:	003d0900 	.word	0x003d0900
 800ee00:	08020dd8 	.word	0x08020dd8

0800ee04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee10:	f003 0301 	and.w	r3, r3, #1
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00a      	beq.n	800ee2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	430a      	orrs	r2, r1
 800ee2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee32:	f003 0302 	and.w	r3, r3, #2
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00a      	beq.n	800ee50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	430a      	orrs	r2, r1
 800ee4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee54:	f003 0304 	and.w	r3, r3, #4
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00a      	beq.n	800ee72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	430a      	orrs	r2, r1
 800ee70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee76:	f003 0308 	and.w	r3, r3, #8
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00a      	beq.n	800ee94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	430a      	orrs	r2, r1
 800ee92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee98:	f003 0310 	and.w	r3, r3, #16
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d00a      	beq.n	800eeb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	430a      	orrs	r2, r1
 800eeb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeba:	f003 0320 	and.w	r3, r3, #32
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00a      	beq.n	800eed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	430a      	orrs	r2, r1
 800eed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d01a      	beq.n	800ef1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	430a      	orrs	r2, r1
 800eef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eefe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef02:	d10a      	bne.n	800ef1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	430a      	orrs	r2, r1
 800ef18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00a      	beq.n	800ef3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	430a      	orrs	r2, r1
 800ef3a:	605a      	str	r2, [r3, #4]
  }
}
 800ef3c:	bf00      	nop
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b098      	sub	sp, #96	; 0x60
 800ef4c:	af02      	add	r7, sp, #8
 800ef4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef58:	f7f5 fa36 	bl	80043c8 <HAL_GetTick>
 800ef5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f003 0308 	and.w	r3, r3, #8
 800ef68:	2b08      	cmp	r3, #8
 800ef6a:	d12f      	bne.n	800efcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef70:	9300      	str	r3, [sp, #0]
 800ef72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef74:	2200      	movs	r2, #0
 800ef76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 f88e 	bl	800f09c <UART_WaitOnFlagUntilTimeout>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d022      	beq.n	800efcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8e:	e853 3f00 	ldrex	r3, [r3]
 800ef92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef9a:	653b      	str	r3, [r7, #80]	; 0x50
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	461a      	mov	r2, r3
 800efa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efa4:	647b      	str	r3, [r7, #68]	; 0x44
 800efa6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efac:	e841 2300 	strex	r3, r2, [r1]
 800efb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800efb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1e6      	bne.n	800ef86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2220      	movs	r2, #32
 800efbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800efc8:	2303      	movs	r3, #3
 800efca:	e063      	b.n	800f094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f003 0304 	and.w	r3, r3, #4
 800efd6:	2b04      	cmp	r3, #4
 800efd8:	d149      	bne.n	800f06e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efe2:	2200      	movs	r2, #0
 800efe4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 f857 	bl	800f09c <UART_WaitOnFlagUntilTimeout>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d03c      	beq.n	800f06e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800effa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effc:	e853 3f00 	ldrex	r3, [r3]
 800f000:	623b      	str	r3, [r7, #32]
   return(result);
 800f002:	6a3b      	ldr	r3, [r7, #32]
 800f004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	461a      	mov	r2, r3
 800f010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f012:	633b      	str	r3, [r7, #48]	; 0x30
 800f014:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f01a:	e841 2300 	strex	r3, r2, [r1]
 800f01e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1e6      	bne.n	800eff4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	3308      	adds	r3, #8
 800f02c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	e853 3f00 	ldrex	r3, [r3]
 800f034:	60fb      	str	r3, [r7, #12]
   return(result);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f023 0301 	bic.w	r3, r3, #1
 800f03c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3308      	adds	r3, #8
 800f044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f046:	61fa      	str	r2, [r7, #28]
 800f048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04a:	69b9      	ldr	r1, [r7, #24]
 800f04c:	69fa      	ldr	r2, [r7, #28]
 800f04e:	e841 2300 	strex	r3, r2, [r1]
 800f052:	617b      	str	r3, [r7, #20]
   return(result);
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1e5      	bne.n	800f026 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2220      	movs	r2, #32
 800f05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f06a:	2303      	movs	r3, #3
 800f06c:	e012      	b.n	800f094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2220      	movs	r2, #32
 800f072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2220      	movs	r2, #32
 800f07a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f092:	2300      	movs	r3, #0
}
 800f094:	4618      	mov	r0, r3
 800f096:	3758      	adds	r7, #88	; 0x58
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	603b      	str	r3, [r7, #0]
 800f0a8:	4613      	mov	r3, r2
 800f0aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0ac:	e049      	b.n	800f142 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0b4:	d045      	beq.n	800f142 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0b6:	f7f5 f987 	bl	80043c8 <HAL_GetTick>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	69ba      	ldr	r2, [r7, #24]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d302      	bcc.n	800f0cc <UART_WaitOnFlagUntilTimeout+0x30>
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d101      	bne.n	800f0d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f0cc:	2303      	movs	r3, #3
 800f0ce:	e048      	b.n	800f162 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f003 0304 	and.w	r3, r3, #4
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d031      	beq.n	800f142 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	69db      	ldr	r3, [r3, #28]
 800f0e4:	f003 0308 	and.w	r3, r3, #8
 800f0e8:	2b08      	cmp	r3, #8
 800f0ea:	d110      	bne.n	800f10e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2208      	movs	r2, #8
 800f0f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f000 f839 	bl	800f16c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2208      	movs	r2, #8
 800f0fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2200      	movs	r2, #0
 800f106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f10a:	2301      	movs	r3, #1
 800f10c:	e029      	b.n	800f162 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	69db      	ldr	r3, [r3, #28]
 800f114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f11c:	d111      	bne.n	800f142 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f000 f81f 	bl	800f16c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2220      	movs	r2, #32
 800f132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f13e:	2303      	movs	r3, #3
 800f140:	e00f      	b.n	800f162 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	69da      	ldr	r2, [r3, #28]
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	4013      	ands	r3, r2
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	429a      	cmp	r2, r3
 800f150:	bf0c      	ite	eq
 800f152:	2301      	moveq	r3, #1
 800f154:	2300      	movne	r3, #0
 800f156:	b2db      	uxtb	r3, r3
 800f158:	461a      	mov	r2, r3
 800f15a:	79fb      	ldrb	r3, [r7, #7]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d0a6      	beq.n	800f0ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
	...

0800f16c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b095      	sub	sp, #84	; 0x54
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f17c:	e853 3f00 	ldrex	r3, [r3]
 800f180:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f192:	643b      	str	r3, [r7, #64]	; 0x40
 800f194:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f196:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f19a:	e841 2300 	strex	r3, r2, [r1]
 800f19e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1e6      	bne.n	800f174 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	3308      	adds	r3, #8
 800f1ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	e853 3f00 	ldrex	r3, [r3]
 800f1b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1b6:	69fa      	ldr	r2, [r7, #28]
 800f1b8:	4b1e      	ldr	r3, [pc, #120]	; (800f234 <UART_EndRxTransfer+0xc8>)
 800f1ba:	4013      	ands	r3, r2
 800f1bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	3308      	adds	r3, #8
 800f1c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1ce:	e841 2300 	strex	r3, r2, [r1]
 800f1d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1e5      	bne.n	800f1a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d118      	bne.n	800f214 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	e853 3f00 	ldrex	r3, [r3]
 800f1ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	f023 0310 	bic.w	r3, r3, #16
 800f1f6:	647b      	str	r3, [r7, #68]	; 0x44
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f200:	61bb      	str	r3, [r7, #24]
 800f202:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f204:	6979      	ldr	r1, [r7, #20]
 800f206:	69ba      	ldr	r2, [r7, #24]
 800f208:	e841 2300 	strex	r3, r2, [r1]
 800f20c:	613b      	str	r3, [r7, #16]
   return(result);
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1e6      	bne.n	800f1e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2220      	movs	r2, #32
 800f218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2200      	movs	r2, #0
 800f226:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f228:	bf00      	nop
 800f22a:	3754      	adds	r7, #84	; 0x54
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr
 800f234:	effffffe 	.word	0xeffffffe

0800f238 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f238:	b480      	push	{r7}
 800f23a:	b085      	sub	sp, #20
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f246:	2b01      	cmp	r3, #1
 800f248:	d101      	bne.n	800f24e <HAL_UARTEx_DisableFifoMode+0x16>
 800f24a:	2302      	movs	r3, #2
 800f24c:	e027      	b.n	800f29e <HAL_UARTEx_DisableFifoMode+0x66>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2201      	movs	r2, #1
 800f252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2224      	movs	r2, #36	; 0x24
 800f25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f022 0201 	bic.w	r2, r2, #1
 800f274:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f27c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2200      	movs	r2, #0
 800f282:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2220      	movs	r2, #32
 800f290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3714      	adds	r7, #20
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr

0800f2aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b084      	sub	sp, #16
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
 800f2b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2ba:	2b01      	cmp	r3, #1
 800f2bc:	d101      	bne.n	800f2c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f2be:	2302      	movs	r3, #2
 800f2c0:	e02d      	b.n	800f31e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2224      	movs	r2, #36	; 0x24
 800f2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f022 0201 	bic.w	r2, r2, #1
 800f2e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	689b      	ldr	r3, [r3, #8]
 800f2f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	683a      	ldr	r2, [r7, #0]
 800f2fa:	430a      	orrs	r2, r1
 800f2fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 f850 	bl	800f3a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2220      	movs	r2, #32
 800f310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b084      	sub	sp, #16
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f336:	2b01      	cmp	r3, #1
 800f338:	d101      	bne.n	800f33e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f33a:	2302      	movs	r3, #2
 800f33c:	e02d      	b.n	800f39a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2201      	movs	r2, #1
 800f342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2224      	movs	r2, #36	; 0x24
 800f34a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f022 0201 	bic.w	r2, r2, #1
 800f364:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	689b      	ldr	r3, [r3, #8]
 800f36c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	683a      	ldr	r2, [r7, #0]
 800f376:	430a      	orrs	r2, r1
 800f378:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f812 	bl	800f3a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2220      	movs	r2, #32
 800f38c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
	...

0800f3a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d108      	bne.n	800f3c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f3c4:	e031      	b.n	800f42a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f3c6:	2310      	movs	r3, #16
 800f3c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f3ca:	2310      	movs	r3, #16
 800f3cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	0e5b      	lsrs	r3, r3, #25
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	f003 0307 	and.w	r3, r3, #7
 800f3dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	689b      	ldr	r3, [r3, #8]
 800f3e4:	0f5b      	lsrs	r3, r3, #29
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	f003 0307 	and.w	r3, r3, #7
 800f3ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f3ee:	7bbb      	ldrb	r3, [r7, #14]
 800f3f0:	7b3a      	ldrb	r2, [r7, #12]
 800f3f2:	4911      	ldr	r1, [pc, #68]	; (800f438 <UARTEx_SetNbDataToProcess+0x94>)
 800f3f4:	5c8a      	ldrb	r2, [r1, r2]
 800f3f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f3fa:	7b3a      	ldrb	r2, [r7, #12]
 800f3fc:	490f      	ldr	r1, [pc, #60]	; (800f43c <UARTEx_SetNbDataToProcess+0x98>)
 800f3fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f400:	fb93 f3f2 	sdiv	r3, r3, r2
 800f404:	b29a      	uxth	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f40c:	7bfb      	ldrb	r3, [r7, #15]
 800f40e:	7b7a      	ldrb	r2, [r7, #13]
 800f410:	4909      	ldr	r1, [pc, #36]	; (800f438 <UARTEx_SetNbDataToProcess+0x94>)
 800f412:	5c8a      	ldrb	r2, [r1, r2]
 800f414:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f418:	7b7a      	ldrb	r2, [r7, #13]
 800f41a:	4908      	ldr	r1, [pc, #32]	; (800f43c <UARTEx_SetNbDataToProcess+0x98>)
 800f41c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f41e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f422:	b29a      	uxth	r2, r3
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f42a:	bf00      	nop
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	08020df0 	.word	0x08020df0
 800f43c:	08020df8 	.word	0x08020df8

0800f440 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f446:	4b8d      	ldr	r3, [pc, #564]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f448:	22c0      	movs	r2, #192	; 0xc0
 800f44a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f44c:	4b8b      	ldr	r3, [pc, #556]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f44e:	22a8      	movs	r2, #168	; 0xa8
 800f450:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800f452:	4b8a      	ldr	r3, [pc, #552]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f454:	2201      	movs	r2, #1
 800f456:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800f458:	4b88      	ldr	r3, [pc, #544]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f45a:	220a      	movs	r2, #10
 800f45c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f45e:	4b88      	ldr	r3, [pc, #544]	; (800f680 <MX_LWIP_Init+0x240>)
 800f460:	22ff      	movs	r2, #255	; 0xff
 800f462:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f464:	4b86      	ldr	r3, [pc, #536]	; (800f680 <MX_LWIP_Init+0x240>)
 800f466:	22ff      	movs	r2, #255	; 0xff
 800f468:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800f46a:	4b85      	ldr	r3, [pc, #532]	; (800f680 <MX_LWIP_Init+0x240>)
 800f46c:	2200      	movs	r2, #0
 800f46e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f470:	4b83      	ldr	r3, [pc, #524]	; (800f680 <MX_LWIP_Init+0x240>)
 800f472:	2200      	movs	r2, #0
 800f474:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f476:	4b83      	ldr	r3, [pc, #524]	; (800f684 <MX_LWIP_Init+0x244>)
 800f478:	22c0      	movs	r2, #192	; 0xc0
 800f47a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f47c:	4b81      	ldr	r3, [pc, #516]	; (800f684 <MX_LWIP_Init+0x244>)
 800f47e:	22a8      	movs	r2, #168	; 0xa8
 800f480:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800f482:	4b80      	ldr	r3, [pc, #512]	; (800f684 <MX_LWIP_Init+0x244>)
 800f484:	2201      	movs	r2, #1
 800f486:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f488:	4b7e      	ldr	r3, [pc, #504]	; (800f684 <MX_LWIP_Init+0x244>)
 800f48a:	2201      	movs	r2, #1
 800f48c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800f48e:	f000 fde3 	bl	8010058 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f492:	4b7a      	ldr	r3, [pc, #488]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	061a      	lsls	r2, r3, #24
 800f498:	4b78      	ldr	r3, [pc, #480]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f49a:	785b      	ldrb	r3, [r3, #1]
 800f49c:	041b      	lsls	r3, r3, #16
 800f49e:	431a      	orrs	r2, r3
 800f4a0:	4b76      	ldr	r3, [pc, #472]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4a2:	789b      	ldrb	r3, [r3, #2]
 800f4a4:	021b      	lsls	r3, r3, #8
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	4a74      	ldr	r2, [pc, #464]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4aa:	78d2      	ldrb	r2, [r2, #3]
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	061a      	lsls	r2, r3, #24
 800f4b0:	4b72      	ldr	r3, [pc, #456]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	0619      	lsls	r1, r3, #24
 800f4b6:	4b71      	ldr	r3, [pc, #452]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4b8:	785b      	ldrb	r3, [r3, #1]
 800f4ba:	041b      	lsls	r3, r3, #16
 800f4bc:	4319      	orrs	r1, r3
 800f4be:	4b6f      	ldr	r3, [pc, #444]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4c0:	789b      	ldrb	r3, [r3, #2]
 800f4c2:	021b      	lsls	r3, r3, #8
 800f4c4:	430b      	orrs	r3, r1
 800f4c6:	496d      	ldr	r1, [pc, #436]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4c8:	78c9      	ldrb	r1, [r1, #3]
 800f4ca:	430b      	orrs	r3, r1
 800f4cc:	021b      	lsls	r3, r3, #8
 800f4ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f4d2:	431a      	orrs	r2, r3
 800f4d4:	4b69      	ldr	r3, [pc, #420]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	0619      	lsls	r1, r3, #24
 800f4da:	4b68      	ldr	r3, [pc, #416]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4dc:	785b      	ldrb	r3, [r3, #1]
 800f4de:	041b      	lsls	r3, r3, #16
 800f4e0:	4319      	orrs	r1, r3
 800f4e2:	4b66      	ldr	r3, [pc, #408]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4e4:	789b      	ldrb	r3, [r3, #2]
 800f4e6:	021b      	lsls	r3, r3, #8
 800f4e8:	430b      	orrs	r3, r1
 800f4ea:	4964      	ldr	r1, [pc, #400]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4ec:	78c9      	ldrb	r1, [r1, #3]
 800f4ee:	430b      	orrs	r3, r1
 800f4f0:	0a1b      	lsrs	r3, r3, #8
 800f4f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f4f6:	431a      	orrs	r2, r3
 800f4f8:	4b60      	ldr	r3, [pc, #384]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	0619      	lsls	r1, r3, #24
 800f4fe:	4b5f      	ldr	r3, [pc, #380]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f500:	785b      	ldrb	r3, [r3, #1]
 800f502:	041b      	lsls	r3, r3, #16
 800f504:	4319      	orrs	r1, r3
 800f506:	4b5d      	ldr	r3, [pc, #372]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f508:	789b      	ldrb	r3, [r3, #2]
 800f50a:	021b      	lsls	r3, r3, #8
 800f50c:	430b      	orrs	r3, r1
 800f50e:	495b      	ldr	r1, [pc, #364]	; (800f67c <MX_LWIP_Init+0x23c>)
 800f510:	78c9      	ldrb	r1, [r1, #3]
 800f512:	430b      	orrs	r3, r1
 800f514:	0e1b      	lsrs	r3, r3, #24
 800f516:	4313      	orrs	r3, r2
 800f518:	4a5b      	ldr	r2, [pc, #364]	; (800f688 <MX_LWIP_Init+0x248>)
 800f51a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f51c:	4b58      	ldr	r3, [pc, #352]	; (800f680 <MX_LWIP_Init+0x240>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	061a      	lsls	r2, r3, #24
 800f522:	4b57      	ldr	r3, [pc, #348]	; (800f680 <MX_LWIP_Init+0x240>)
 800f524:	785b      	ldrb	r3, [r3, #1]
 800f526:	041b      	lsls	r3, r3, #16
 800f528:	431a      	orrs	r2, r3
 800f52a:	4b55      	ldr	r3, [pc, #340]	; (800f680 <MX_LWIP_Init+0x240>)
 800f52c:	789b      	ldrb	r3, [r3, #2]
 800f52e:	021b      	lsls	r3, r3, #8
 800f530:	4313      	orrs	r3, r2
 800f532:	4a53      	ldr	r2, [pc, #332]	; (800f680 <MX_LWIP_Init+0x240>)
 800f534:	78d2      	ldrb	r2, [r2, #3]
 800f536:	4313      	orrs	r3, r2
 800f538:	061a      	lsls	r2, r3, #24
 800f53a:	4b51      	ldr	r3, [pc, #324]	; (800f680 <MX_LWIP_Init+0x240>)
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	0619      	lsls	r1, r3, #24
 800f540:	4b4f      	ldr	r3, [pc, #316]	; (800f680 <MX_LWIP_Init+0x240>)
 800f542:	785b      	ldrb	r3, [r3, #1]
 800f544:	041b      	lsls	r3, r3, #16
 800f546:	4319      	orrs	r1, r3
 800f548:	4b4d      	ldr	r3, [pc, #308]	; (800f680 <MX_LWIP_Init+0x240>)
 800f54a:	789b      	ldrb	r3, [r3, #2]
 800f54c:	021b      	lsls	r3, r3, #8
 800f54e:	430b      	orrs	r3, r1
 800f550:	494b      	ldr	r1, [pc, #300]	; (800f680 <MX_LWIP_Init+0x240>)
 800f552:	78c9      	ldrb	r1, [r1, #3]
 800f554:	430b      	orrs	r3, r1
 800f556:	021b      	lsls	r3, r3, #8
 800f558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f55c:	431a      	orrs	r2, r3
 800f55e:	4b48      	ldr	r3, [pc, #288]	; (800f680 <MX_LWIP_Init+0x240>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	0619      	lsls	r1, r3, #24
 800f564:	4b46      	ldr	r3, [pc, #280]	; (800f680 <MX_LWIP_Init+0x240>)
 800f566:	785b      	ldrb	r3, [r3, #1]
 800f568:	041b      	lsls	r3, r3, #16
 800f56a:	4319      	orrs	r1, r3
 800f56c:	4b44      	ldr	r3, [pc, #272]	; (800f680 <MX_LWIP_Init+0x240>)
 800f56e:	789b      	ldrb	r3, [r3, #2]
 800f570:	021b      	lsls	r3, r3, #8
 800f572:	430b      	orrs	r3, r1
 800f574:	4942      	ldr	r1, [pc, #264]	; (800f680 <MX_LWIP_Init+0x240>)
 800f576:	78c9      	ldrb	r1, [r1, #3]
 800f578:	430b      	orrs	r3, r1
 800f57a:	0a1b      	lsrs	r3, r3, #8
 800f57c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f580:	431a      	orrs	r2, r3
 800f582:	4b3f      	ldr	r3, [pc, #252]	; (800f680 <MX_LWIP_Init+0x240>)
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	0619      	lsls	r1, r3, #24
 800f588:	4b3d      	ldr	r3, [pc, #244]	; (800f680 <MX_LWIP_Init+0x240>)
 800f58a:	785b      	ldrb	r3, [r3, #1]
 800f58c:	041b      	lsls	r3, r3, #16
 800f58e:	4319      	orrs	r1, r3
 800f590:	4b3b      	ldr	r3, [pc, #236]	; (800f680 <MX_LWIP_Init+0x240>)
 800f592:	789b      	ldrb	r3, [r3, #2]
 800f594:	021b      	lsls	r3, r3, #8
 800f596:	430b      	orrs	r3, r1
 800f598:	4939      	ldr	r1, [pc, #228]	; (800f680 <MX_LWIP_Init+0x240>)
 800f59a:	78c9      	ldrb	r1, [r1, #3]
 800f59c:	430b      	orrs	r3, r1
 800f59e:	0e1b      	lsrs	r3, r3, #24
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	4a3a      	ldr	r2, [pc, #232]	; (800f68c <MX_LWIP_Init+0x24c>)
 800f5a4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f5a6:	4b37      	ldr	r3, [pc, #220]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	061a      	lsls	r2, r3, #24
 800f5ac:	4b35      	ldr	r3, [pc, #212]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5ae:	785b      	ldrb	r3, [r3, #1]
 800f5b0:	041b      	lsls	r3, r3, #16
 800f5b2:	431a      	orrs	r2, r3
 800f5b4:	4b33      	ldr	r3, [pc, #204]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5b6:	789b      	ldrb	r3, [r3, #2]
 800f5b8:	021b      	lsls	r3, r3, #8
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	4a31      	ldr	r2, [pc, #196]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5be:	78d2      	ldrb	r2, [r2, #3]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	061a      	lsls	r2, r3, #24
 800f5c4:	4b2f      	ldr	r3, [pc, #188]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	0619      	lsls	r1, r3, #24
 800f5ca:	4b2e      	ldr	r3, [pc, #184]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5cc:	785b      	ldrb	r3, [r3, #1]
 800f5ce:	041b      	lsls	r3, r3, #16
 800f5d0:	4319      	orrs	r1, r3
 800f5d2:	4b2c      	ldr	r3, [pc, #176]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5d4:	789b      	ldrb	r3, [r3, #2]
 800f5d6:	021b      	lsls	r3, r3, #8
 800f5d8:	430b      	orrs	r3, r1
 800f5da:	492a      	ldr	r1, [pc, #168]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5dc:	78c9      	ldrb	r1, [r1, #3]
 800f5de:	430b      	orrs	r3, r1
 800f5e0:	021b      	lsls	r3, r3, #8
 800f5e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f5e6:	431a      	orrs	r2, r3
 800f5e8:	4b26      	ldr	r3, [pc, #152]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	0619      	lsls	r1, r3, #24
 800f5ee:	4b25      	ldr	r3, [pc, #148]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5f0:	785b      	ldrb	r3, [r3, #1]
 800f5f2:	041b      	lsls	r3, r3, #16
 800f5f4:	4319      	orrs	r1, r3
 800f5f6:	4b23      	ldr	r3, [pc, #140]	; (800f684 <MX_LWIP_Init+0x244>)
 800f5f8:	789b      	ldrb	r3, [r3, #2]
 800f5fa:	021b      	lsls	r3, r3, #8
 800f5fc:	430b      	orrs	r3, r1
 800f5fe:	4921      	ldr	r1, [pc, #132]	; (800f684 <MX_LWIP_Init+0x244>)
 800f600:	78c9      	ldrb	r1, [r1, #3]
 800f602:	430b      	orrs	r3, r1
 800f604:	0a1b      	lsrs	r3, r3, #8
 800f606:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f60a:	431a      	orrs	r2, r3
 800f60c:	4b1d      	ldr	r3, [pc, #116]	; (800f684 <MX_LWIP_Init+0x244>)
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	0619      	lsls	r1, r3, #24
 800f612:	4b1c      	ldr	r3, [pc, #112]	; (800f684 <MX_LWIP_Init+0x244>)
 800f614:	785b      	ldrb	r3, [r3, #1]
 800f616:	041b      	lsls	r3, r3, #16
 800f618:	4319      	orrs	r1, r3
 800f61a:	4b1a      	ldr	r3, [pc, #104]	; (800f684 <MX_LWIP_Init+0x244>)
 800f61c:	789b      	ldrb	r3, [r3, #2]
 800f61e:	021b      	lsls	r3, r3, #8
 800f620:	430b      	orrs	r3, r1
 800f622:	4918      	ldr	r1, [pc, #96]	; (800f684 <MX_LWIP_Init+0x244>)
 800f624:	78c9      	ldrb	r1, [r1, #3]
 800f626:	430b      	orrs	r3, r1
 800f628:	0e1b      	lsrs	r3, r3, #24
 800f62a:	4313      	orrs	r3, r2
 800f62c:	4a18      	ldr	r2, [pc, #96]	; (800f690 <MX_LWIP_Init+0x250>)
 800f62e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f630:	4b18      	ldr	r3, [pc, #96]	; (800f694 <MX_LWIP_Init+0x254>)
 800f632:	9302      	str	r3, [sp, #8]
 800f634:	4b18      	ldr	r3, [pc, #96]	; (800f698 <MX_LWIP_Init+0x258>)
 800f636:	9301      	str	r3, [sp, #4]
 800f638:	2300      	movs	r3, #0
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	4b14      	ldr	r3, [pc, #80]	; (800f690 <MX_LWIP_Init+0x250>)
 800f63e:	4a13      	ldr	r2, [pc, #76]	; (800f68c <MX_LWIP_Init+0x24c>)
 800f640:	4911      	ldr	r1, [pc, #68]	; (800f688 <MX_LWIP_Init+0x248>)
 800f642:	4816      	ldr	r0, [pc, #88]	; (800f69c <MX_LWIP_Init+0x25c>)
 800f644:	f001 f9de 	bl	8010a04 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f648:	4814      	ldr	r0, [pc, #80]	; (800f69c <MX_LWIP_Init+0x25c>)
 800f64a:	f001 fb8d 	bl	8010d68 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f64e:	4b13      	ldr	r3, [pc, #76]	; (800f69c <MX_LWIP_Init+0x25c>)
 800f650:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f654:	089b      	lsrs	r3, r3, #2
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d003      	beq.n	800f668 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f660:	480e      	ldr	r0, [pc, #56]	; (800f69c <MX_LWIP_Init+0x25c>)
 800f662:	f001 fb91 	bl	8010d88 <netif_set_up>
 800f666:	e002      	b.n	800f66e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f668:	480c      	ldr	r0, [pc, #48]	; (800f69c <MX_LWIP_Init+0x25c>)
 800f66a:	f001 fbf9 	bl	8010e60 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f66e:	490c      	ldr	r1, [pc, #48]	; (800f6a0 <MX_LWIP_Init+0x260>)
 800f670:	480a      	ldr	r0, [pc, #40]	; (800f69c <MX_LWIP_Init+0x25c>)
 800f672:	f001 fc8b 	bl	8010f8c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f676:	bf00      	nop
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	200007c4 	.word	0x200007c4
 800f680:	200007c8 	.word	0x200007c8
 800f684:	200007cc 	.word	0x200007cc
 800f688:	200007b8 	.word	0x200007b8
 800f68c:	200007bc 	.word	0x200007bc
 800f690:	200007c0 	.word	0x200007c0
 800f694:	0801a68d 	.word	0x0801a68d
 800f698:	0800f965 	.word	0x0800f965
 800f69c:	20000784 	.word	0x20000784
 800f6a0:	0800f6a5 	.word	0x0800f6a5

0800f6a4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f6c4:	4b41      	ldr	r3, [pc, #260]	; (800f7cc <low_level_init+0x114>)
 800f6c6:	4a42      	ldr	r2, [pc, #264]	; (800f7d0 <low_level_init+0x118>)
 800f6c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800f6ce:	2380      	movs	r3, #128	; 0x80
 800f6d0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800f6d2:	23e1      	movs	r3, #225	; 0xe1
 800f6d4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f6e2:	4a3a      	ldr	r2, [pc, #232]	; (800f7cc <low_level_init+0x114>)
 800f6e4:	f107 0308 	add.w	r3, r7, #8
 800f6e8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f6ea:	4b38      	ldr	r3, [pc, #224]	; (800f7cc <low_level_init+0x114>)
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f6f0:	4b36      	ldr	r3, [pc, #216]	; (800f7cc <low_level_init+0x114>)
 800f6f2:	4a38      	ldr	r2, [pc, #224]	; (800f7d4 <low_level_init+0x11c>)
 800f6f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f6f6:	4b35      	ldr	r3, [pc, #212]	; (800f7cc <low_level_init+0x114>)
 800f6f8:	4a37      	ldr	r2, [pc, #220]	; (800f7d8 <low_level_init+0x120>)
 800f6fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f6fc:	4b33      	ldr	r3, [pc, #204]	; (800f7cc <low_level_init+0x114>)
 800f6fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f702:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f704:	4831      	ldr	r0, [pc, #196]	; (800f7cc <low_level_init+0x114>)
 800f706:	f7f6 ff8f 	bl	8006628 <HAL_ETH_Init>
 800f70a:	4603      	mov	r3, r0
 800f70c:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f70e:	2238      	movs	r2, #56	; 0x38
 800f710:	2100      	movs	r1, #0
 800f712:	4832      	ldr	r0, [pc, #200]	; (800f7dc <low_level_init+0x124>)
 800f714:	f00b ff5c 	bl	801b5d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f718:	4b30      	ldr	r3, [pc, #192]	; (800f7dc <low_level_init+0x124>)
 800f71a:	2221      	movs	r2, #33	; 0x21
 800f71c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f71e:	4b2f      	ldr	r3, [pc, #188]	; (800f7dc <low_level_init+0x124>)
 800f720:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f724:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f726:	4b2d      	ldr	r3, [pc, #180]	; (800f7dc <low_level_init+0x124>)
 800f728:	2200      	movs	r2, #0
 800f72a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f72c:	482c      	ldr	r0, [pc, #176]	; (800f7e0 <low_level_init+0x128>)
 800f72e:	f001 f831 	bl	8010794 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2206      	movs	r2, #6
 800f736:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f73a:	4b24      	ldr	r3, [pc, #144]	; (800f7cc <low_level_init+0x114>)
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	781a      	ldrb	r2, [r3, #0]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f746:	4b21      	ldr	r3, [pc, #132]	; (800f7cc <low_level_init+0x114>)
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	785a      	ldrb	r2, [r3, #1]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f752:	4b1e      	ldr	r3, [pc, #120]	; (800f7cc <low_level_init+0x114>)
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	789a      	ldrb	r2, [r3, #2]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f75e:	4b1b      	ldr	r3, [pc, #108]	; (800f7cc <low_level_init+0x114>)
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	78da      	ldrb	r2, [r3, #3]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f76a:	4b18      	ldr	r3, [pc, #96]	; (800f7cc <low_level_init+0x114>)
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	791a      	ldrb	r2, [r3, #4]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f776:	4b15      	ldr	r3, [pc, #84]	; (800f7cc <low_level_init+0x114>)
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	795a      	ldrb	r2, [r3, #5]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f788:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f790:	f043 030a 	orr.w	r3, r3, #10
 800f794:	b2da      	uxtb	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f79c:	4911      	ldr	r1, [pc, #68]	; (800f7e4 <low_level_init+0x12c>)
 800f79e:	4812      	ldr	r0, [pc, #72]	; (800f7e8 <low_level_init+0x130>)
 800f7a0:	f7f4 fbfd 	bl	8003f9e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f7a4:	4810      	ldr	r0, [pc, #64]	; (800f7e8 <low_level_init+0x130>)
 800f7a6:	f7f4 fc2c 	bl	8004002 <LAN8742_Init>

  /* Stuart's workaround for comms failure after reset */
  LAN8742_StartAutoNego(&LAN8742);
 800f7aa:	480f      	ldr	r0, [pc, #60]	; (800f7e8 <low_level_init+0x130>)
 800f7ac:	f7f4 fcd1 	bl	8004152 <LAN8742_StartAutoNego>

  if (hal_eth_init_status == HAL_OK)
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d103      	bne.n	800f7be <low_level_init+0x106>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fa40 	bl	800fc3c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f7bc:	e001      	b.n	800f7c2 <low_level_init+0x10a>
    Error_Handler();
 800f7be:	f7f3 fe97 	bl	80034f0 <Error_Handler>
}
 800f7c2:	bf00      	nop
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	200007d8 	.word	0x200007d8
 800f7d0:	40028000 	.word	0x40028000
 800f7d4:	30040060 	.word	0x30040060
 800f7d8:	30040000 	.word	0x30040000
 800f7dc:	20000888 	.word	0x20000888
 800f7e0:	08020e00 	.word	0x08020e00
 800f7e4:	20000164 	.word	0x20000164
 800f7e8:	200008c0 	.word	0x200008c0

0800f7ec <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b092      	sub	sp, #72	; 0x48
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f804:	f107 030c 	add.w	r3, r7, #12
 800f808:	2230      	movs	r2, #48	; 0x30
 800f80a:	2100      	movs	r1, #0
 800f80c:	4618      	mov	r0, r3
 800f80e:	f00b fedf 	bl	801b5d0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f812:	f107 030c 	add.w	r3, r7, #12
 800f816:	2230      	movs	r2, #48	; 0x30
 800f818:	2100      	movs	r1, #0
 800f81a:	4618      	mov	r0, r3
 800f81c:	f00b fed8 	bl	801b5d0 <memset>

  for(q = p; q != NULL; q = q->next)
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	643b      	str	r3, [r7, #64]	; 0x40
 800f824:	e045      	b.n	800f8b2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f828:	2b03      	cmp	r3, #3
 800f82a:	d902      	bls.n	800f832 <low_level_output+0x46>
      return ERR_IF;
 800f82c:	f06f 030b 	mvn.w	r3, #11
 800f830:	e055      	b.n	800f8de <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f834:	6859      	ldr	r1, [r3, #4]
 800f836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f838:	4613      	mov	r3, r2
 800f83a:	005b      	lsls	r3, r3, #1
 800f83c:	4413      	add	r3, r2
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	3348      	adds	r3, #72	; 0x48
 800f842:	443b      	add	r3, r7
 800f844:	3b3c      	subs	r3, #60	; 0x3c
 800f846:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f84a:	895b      	ldrh	r3, [r3, #10]
 800f84c:	4619      	mov	r1, r3
 800f84e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f850:	4613      	mov	r3, r2
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	4413      	add	r3, r2
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	3348      	adds	r3, #72	; 0x48
 800f85a:	443b      	add	r3, r7
 800f85c:	3b38      	subs	r3, #56	; 0x38
 800f85e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f862:	2b00      	cmp	r3, #0
 800f864:	d011      	beq.n	800f88a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f868:	1e5a      	subs	r2, r3, #1
 800f86a:	f107 000c 	add.w	r0, r7, #12
 800f86e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f870:	460b      	mov	r3, r1
 800f872:	005b      	lsls	r3, r3, #1
 800f874:	440b      	add	r3, r1
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	18c1      	adds	r1, r0, r3
 800f87a:	4613      	mov	r3, r2
 800f87c:	005b      	lsls	r3, r3, #1
 800f87e:	4413      	add	r3, r2
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	3348      	adds	r3, #72	; 0x48
 800f884:	443b      	add	r3, r7
 800f886:	3b34      	subs	r3, #52	; 0x34
 800f888:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f88a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d109      	bne.n	800f8a6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f894:	4613      	mov	r3, r2
 800f896:	005b      	lsls	r3, r3, #1
 800f898:	4413      	add	r3, r2
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	3348      	adds	r3, #72	; 0x48
 800f89e:	443b      	add	r3, r7
 800f8a0:	3b34      	subs	r3, #52	; 0x34
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f8a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	643b      	str	r3, [r7, #64]	; 0x40
 800f8b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1b6      	bne.n	800f826 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	891b      	ldrh	r3, [r3, #8]
 800f8bc:	461a      	mov	r2, r3
 800f8be:	4b0a      	ldr	r3, [pc, #40]	; (800f8e8 <low_level_output+0xfc>)
 800f8c0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f8c2:	4a09      	ldr	r2, [pc, #36]	; (800f8e8 <low_level_output+0xfc>)
 800f8c4:	f107 030c 	add.w	r3, r7, #12
 800f8c8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f8ca:	4a07      	ldr	r2, [pc, #28]	; (800f8e8 <low_level_output+0xfc>)
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f8d0:	2214      	movs	r2, #20
 800f8d2:	4905      	ldr	r1, [pc, #20]	; (800f8e8 <low_level_output+0xfc>)
 800f8d4:	4805      	ldr	r0, [pc, #20]	; (800f8ec <low_level_output+0x100>)
 800f8d6:	f7f7 f83f 	bl	8006958 <HAL_ETH_Transmit>

  return errval;
 800f8da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3748      	adds	r7, #72	; 0x48
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
 800f8e6:	bf00      	nop
 800f8e8:	20000888 	.word	0x20000888
 800f8ec:	200007d8 	.word	0x200007d8

0800f8f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800f8fc:	4b07      	ldr	r3, [pc, #28]	; (800f91c <low_level_input+0x2c>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d105      	bne.n	800f910 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800f904:	f107 030c 	add.w	r3, r7, #12
 800f908:	4619      	mov	r1, r3
 800f90a:	4805      	ldr	r0, [pc, #20]	; (800f920 <low_level_input+0x30>)
 800f90c:	f7f7 f8bb 	bl	8006a86 <HAL_ETH_ReadData>
  }

  return p;
 800f910:	68fb      	ldr	r3, [r7, #12]
}
 800f912:	4618      	mov	r0, r3
 800f914:	3710      	adds	r7, #16
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	200007d4 	.word	0x200007d4
 800f920:	200007d8 	.word	0x200007d8

0800f924 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f92c:	2300      	movs	r3, #0
 800f92e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7ff ffdd 	bl	800f8f0 <low_level_input>
 800f936:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00a      	beq.n	800f954 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	691b      	ldr	r3, [r3, #16]
 800f942:	6879      	ldr	r1, [r7, #4]
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	4798      	blx	r3
 800f948:	4603      	mov	r3, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d002      	beq.n	800f954 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f001 fe9c 	bl	801168c <pbuf_free>
      }
    }
  } while(p!=NULL);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d1ea      	bne.n	800f930 <ethernetif_input+0xc>
}
 800f95a:	bf00      	nop
 800f95c:	bf00      	nop
 800f95e:	3710      	adds	r7, #16
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d106      	bne.n	800f980 <ethernetif_init+0x1c>
 800f972:	4b0e      	ldr	r3, [pc, #56]	; (800f9ac <ethernetif_init+0x48>)
 800f974:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800f978:	490d      	ldr	r1, [pc, #52]	; (800f9b0 <ethernetif_init+0x4c>)
 800f97a:	480e      	ldr	r0, [pc, #56]	; (800f9b4 <ethernetif_init+0x50>)
 800f97c:	f00b fc98 	bl	801b2b0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2273      	movs	r2, #115	; 0x73
 800f984:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2274      	movs	r2, #116	; 0x74
 800f98c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4a09      	ldr	r2, [pc, #36]	; (800f9b8 <ethernetif_init+0x54>)
 800f994:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	4a08      	ldr	r2, [pc, #32]	; (800f9bc <ethernetif_init+0x58>)
 800f99a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f7ff fe8b 	bl	800f6b8 <low_level_init>

  return ERR_OK;
 800f9a2:	2300      	movs	r3, #0
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	0801e3c4 	.word	0x0801e3c4
 800f9b0:	0801e3e0 	.word	0x0801e3e0
 800f9b4:	0801e3f0 	.word	0x0801e3f0
 800f9b8:	08018af9 	.word	0x08018af9
 800f9bc:	0800f7ed 	.word	0x0800f7ed

0800f9c0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b084      	sub	sp, #16
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f9cc:	68f9      	ldr	r1, [r7, #12]
 800f9ce:	4807      	ldr	r0, [pc, #28]	; (800f9ec <pbuf_free_custom+0x2c>)
 800f9d0:	f000 ffc2 	bl	8010958 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f9d4:	4b06      	ldr	r3, [pc, #24]	; (800f9f0 <pbuf_free_custom+0x30>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d102      	bne.n	800f9e2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f9dc:	4b04      	ldr	r3, [pc, #16]	; (800f9f0 <pbuf_free_custom+0x30>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	701a      	strb	r2, [r3, #0]
  }
}
 800f9e2:	bf00      	nop
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	08020e00 	.word	0x08020e00
 800f9f0:	200007d4 	.word	0x200007d4

0800f9f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f9f8:	f7f4 fce6 	bl	80043c8 <HAL_GetTick>
 800f9fc:	4603      	mov	r3, r0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	bd80      	pop	{r7, pc}
	...

0800fa04 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08e      	sub	sp, #56	; 0x38
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa10:	2200      	movs	r2, #0
 800fa12:	601a      	str	r2, [r3, #0]
 800fa14:	605a      	str	r2, [r3, #4]
 800fa16:	609a      	str	r2, [r3, #8]
 800fa18:	60da      	str	r2, [r3, #12]
 800fa1a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a59      	ldr	r2, [pc, #356]	; (800fb88 <HAL_ETH_MspInit+0x184>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	f040 80ab 	bne.w	800fb7e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800fa28:	4b58      	ldr	r3, [pc, #352]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fa2e:	4a57      	ldr	r2, [pc, #348]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fa38:	4b54      	ldr	r3, [pc, #336]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fa3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa42:	623b      	str	r3, [r7, #32]
 800fa44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800fa46:	4b51      	ldr	r3, [pc, #324]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fa4c:	4a4f      	ldr	r2, [pc, #316]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fa52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fa56:	4b4d      	ldr	r3, [pc, #308]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fa5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa60:	61fb      	str	r3, [r7, #28]
 800fa62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800fa64:	4b49      	ldr	r3, [pc, #292]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fa6a:	4a48      	ldr	r2, [pc, #288]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fa74:	4b45      	ldr	r3, [pc, #276]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fa7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa7e:	61bb      	str	r3, [r7, #24]
 800fa80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fa82:	4b42      	ldr	r3, [pc, #264]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa88:	4a40      	ldr	r2, [pc, #256]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa8a:	f043 0304 	orr.w	r3, r3, #4
 800fa8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fa92:	4b3e      	ldr	r3, [pc, #248]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fa94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa98:	f003 0304 	and.w	r3, r3, #4
 800fa9c:	617b      	str	r3, [r7, #20]
 800fa9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800faa0:	4b3a      	ldr	r3, [pc, #232]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800faa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800faa6:	4a39      	ldr	r2, [pc, #228]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800faa8:	f043 0301 	orr.w	r3, r3, #1
 800faac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fab0:	4b36      	ldr	r3, [pc, #216]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fab6:	f003 0301 	and.w	r3, r3, #1
 800faba:	613b      	str	r3, [r7, #16]
 800fabc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fabe:	4b33      	ldr	r3, [pc, #204]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fac4:	4a31      	ldr	r2, [pc, #196]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fac6:	f043 0302 	orr.w	r3, r3, #2
 800faca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800face:	4b2f      	ldr	r3, [pc, #188]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fad4:	f003 0302 	and.w	r3, r3, #2
 800fad8:	60fb      	str	r3, [r7, #12]
 800fada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fadc:	4b2b      	ldr	r3, [pc, #172]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fae2:	4a2a      	ldr	r2, [pc, #168]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800fae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800faec:	4b27      	ldr	r3, [pc, #156]	; (800fb8c <HAL_ETH_MspInit+0x188>)
 800faee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800faf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faf6:	60bb      	str	r3, [r7, #8]
 800faf8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800fafa:	2332      	movs	r3, #50	; 0x32
 800fafc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fafe:	2302      	movs	r3, #2
 800fb00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb02:	2300      	movs	r3, #0
 800fb04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb06:	2300      	movs	r3, #0
 800fb08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fb0a:	230b      	movs	r3, #11
 800fb0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fb0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb12:	4619      	mov	r1, r3
 800fb14:	481e      	ldr	r0, [pc, #120]	; (800fb90 <HAL_ETH_MspInit+0x18c>)
 800fb16:	f7f8 f947 	bl	8007da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800fb1a:	2386      	movs	r3, #134	; 0x86
 800fb1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb1e:	2302      	movs	r3, #2
 800fb20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb22:	2300      	movs	r3, #0
 800fb24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb26:	2300      	movs	r3, #0
 800fb28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fb2a:	230b      	movs	r3, #11
 800fb2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb32:	4619      	mov	r1, r3
 800fb34:	4817      	ldr	r0, [pc, #92]	; (800fb94 <HAL_ETH_MspInit+0x190>)
 800fb36:	f7f8 f937 	bl	8007da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800fb3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb40:	2302      	movs	r3, #2
 800fb42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb44:	2300      	movs	r3, #0
 800fb46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fb4c:	230b      	movs	r3, #11
 800fb4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fb50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb54:	4619      	mov	r1, r3
 800fb56:	4810      	ldr	r0, [pc, #64]	; (800fb98 <HAL_ETH_MspInit+0x194>)
 800fb58:	f7f8 f926 	bl	8007da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800fb5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800fb60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb62:	2302      	movs	r3, #2
 800fb64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb66:	2300      	movs	r3, #0
 800fb68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fb6e:	230b      	movs	r3, #11
 800fb70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fb72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb76:	4619      	mov	r1, r3
 800fb78:	4808      	ldr	r0, [pc, #32]	; (800fb9c <HAL_ETH_MspInit+0x198>)
 800fb7a:	f7f8 f915 	bl	8007da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800fb7e:	bf00      	nop
 800fb80:	3738      	adds	r7, #56	; 0x38
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	40028000 	.word	0x40028000
 800fb8c:	58024400 	.word	0x58024400
 800fb90:	58020800 	.word	0x58020800
 800fb94:	58020000 	.word	0x58020000
 800fb98:	58020400 	.word	0x58020400
 800fb9c:	58021800 	.word	0x58021800

0800fba0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800fba4:	4802      	ldr	r0, [pc, #8]	; (800fbb0 <ETH_PHY_IO_Init+0x10>)
 800fba6:	f7f7 fb33 	bl	8007210 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800fbaa:	2300      	movs	r3, #0
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	200007d8 	.word	0x200007d8

0800fbb4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	af00      	add	r7, sp, #0
  return 0;
 800fbb8:	2300      	movs	r3, #0
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	68ba      	ldr	r2, [r7, #8]
 800fbd4:	68f9      	ldr	r1, [r7, #12]
 800fbd6:	4807      	ldr	r0, [pc, #28]	; (800fbf4 <ETH_PHY_IO_ReadReg+0x30>)
 800fbd8:	f7f7 f883 	bl	8006ce2 <HAL_ETH_ReadPHYRegister>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d002      	beq.n	800fbe8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800fbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbe6:	e000      	b.n	800fbea <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800fbe8:	2300      	movs	r3, #0
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	200007d8 	.word	0x200007d8

0800fbf8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	68ba      	ldr	r2, [r7, #8]
 800fc08:	68f9      	ldr	r1, [r7, #12]
 800fc0a:	4807      	ldr	r0, [pc, #28]	; (800fc28 <ETH_PHY_IO_WriteReg+0x30>)
 800fc0c:	f7f7 f8be 	bl	8006d8c <HAL_ETH_WritePHYRegister>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d002      	beq.n	800fc1c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800fc16:	f04f 33ff 	mov.w	r3, #4294967295
 800fc1a:	e000      	b.n	800fc1e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3710      	adds	r7, #16
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	200007d8 	.word	0x200007d8

0800fc2c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fc30:	f7f4 fbca 	bl	80043c8 <HAL_GetTick>
 800fc34:	4603      	mov	r3, r0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	bd80      	pop	{r7, pc}
	...

0800fc3c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b0a0      	sub	sp, #128	; 0x80
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800fc44:	f107 030c 	add.w	r3, r7, #12
 800fc48:	2264      	movs	r2, #100	; 0x64
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f00b fcbf 	bl	801b5d0 <memset>
  int32_t PHYLinkState = 0;
 800fc52:	2300      	movs	r3, #0
 800fc54:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800fc56:	2300      	movs	r3, #0
 800fc58:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	67bb      	str	r3, [r7, #120]	; 0x78
 800fc5e:	2300      	movs	r3, #0
 800fc60:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fc62:	483a      	ldr	r0, [pc, #232]	; (800fd4c <ethernet_link_check_state+0x110>)
 800fc64:	f7f4 faa2 	bl	80041ac <LAN8742_GetLinkState>
 800fc68:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc70:	089b      	lsrs	r3, r3, #2
 800fc72:	f003 0301 	and.w	r3, r3, #1
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d00c      	beq.n	800fc96 <ethernet_link_check_state+0x5a>
 800fc7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	dc09      	bgt.n	800fc96 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800fc82:	4833      	ldr	r0, [pc, #204]	; (800fd50 <ethernet_link_check_state+0x114>)
 800fc84:	f7f6 fe18 	bl	80068b8 <HAL_ETH_Stop>
    netif_set_down(netif);
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f001 f8e9 	bl	8010e60 <netif_set_down>
    netif_set_link_down(netif);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f001 f94c 	bl	8010f2c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800fc94:	e055      	b.n	800fd42 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc9c:	f003 0304 	and.w	r3, r3, #4
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d14e      	bne.n	800fd42 <ethernet_link_check_state+0x106>
 800fca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	dd4b      	ble.n	800fd42 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800fcaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fcac:	3b02      	subs	r3, #2
 800fcae:	2b03      	cmp	r3, #3
 800fcb0:	d82a      	bhi.n	800fd08 <ethernet_link_check_state+0xcc>
 800fcb2:	a201      	add	r2, pc, #4	; (adr r2, 800fcb8 <ethernet_link_check_state+0x7c>)
 800fcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb8:	0800fcc9 	.word	0x0800fcc9
 800fcbc:	0800fcdb 	.word	0x0800fcdb
 800fcc0:	0800fceb 	.word	0x0800fceb
 800fcc4:	0800fcfb 	.word	0x0800fcfb
      duplex = ETH_FULLDUPLEX_MODE;
 800fcc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fccc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fcce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fcd2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fcd8:	e017      	b.n	800fd0a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fcde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fce2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fce4:	2301      	movs	r3, #1
 800fce6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fce8:	e00f      	b.n	800fd0a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800fcea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fcee:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fcf8:	e007      	b.n	800fd0a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fd02:	2301      	movs	r3, #1
 800fd04:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fd06:	e000      	b.n	800fd0a <ethernet_link_check_state+0xce>
      break;
 800fd08:	bf00      	nop
    if(linkchanged)
 800fd0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d018      	beq.n	800fd42 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fd10:	f107 030c 	add.w	r3, r7, #12
 800fd14:	4619      	mov	r1, r3
 800fd16:	480e      	ldr	r0, [pc, #56]	; (800fd50 <ethernet_link_check_state+0x114>)
 800fd18:	f7f7 f88c 	bl	8006e34 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800fd1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd1e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800fd20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd22:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fd24:	f107 030c 	add.w	r3, r7, #12
 800fd28:	4619      	mov	r1, r3
 800fd2a:	4809      	ldr	r0, [pc, #36]	; (800fd50 <ethernet_link_check_state+0x114>)
 800fd2c:	f7f7 fa56 	bl	80071dc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800fd30:	4807      	ldr	r0, [pc, #28]	; (800fd50 <ethernet_link_check_state+0x114>)
 800fd32:	f7f6 fd5f 	bl	80067f4 <HAL_ETH_Start>
      netif_set_up(netif);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f001 f826 	bl	8010d88 <netif_set_up>
      netif_set_link_up(netif);
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f001 f8c1 	bl	8010ec4 <netif_set_link_up>
}
 800fd42:	bf00      	nop
 800fd44:	3780      	adds	r7, #128	; 0x80
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	200008c0 	.word	0x200008c0
 800fd50:	200007d8 	.word	0x200007d8

0800fd54 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b086      	sub	sp, #24
 800fd58:	af02      	add	r7, sp, #8
 800fd5a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800fd5c:	4812      	ldr	r0, [pc, #72]	; (800fda8 <HAL_ETH_RxAllocateCallback+0x54>)
 800fd5e:	f000 fd8d 	bl	801087c <memp_malloc_pool>
 800fd62:	60f8      	str	r0, [r7, #12]
  if (p)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d014      	beq.n	800fd94 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f103 0220 	add.w	r2, r3, #32
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	4a0d      	ldr	r2, [pc, #52]	; (800fdac <HAL_ETH_RxAllocateCallback+0x58>)
 800fd78:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800fd82:	9201      	str	r2, [sp, #4]
 800fd84:	9300      	str	r3, [sp, #0]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2241      	movs	r2, #65	; 0x41
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	2000      	movs	r0, #0
 800fd8e:	f001 fac5 	bl	801131c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800fd92:	e005      	b.n	800fda0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800fd94:	4b06      	ldr	r3, [pc, #24]	; (800fdb0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800fd96:	2201      	movs	r2, #1
 800fd98:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	601a      	str	r2, [r3, #0]
}
 800fda0:	bf00      	nop
 800fda2:	3710      	adds	r7, #16
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	08020e00 	.word	0x08020e00
 800fdac:	0800f9c1 	.word	0x0800f9c1
 800fdb0:	200007d4 	.word	0x200007d4

0800fdb4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b08d      	sub	sp, #52	; 0x34
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
 800fdc0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	3b20      	subs	r3, #32
 800fdd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800fdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800fdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fddc:	2200      	movs	r2, #0
 800fdde:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800fde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde2:	887a      	ldrh	r2, [r7, #2]
 800fde4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800fde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d103      	bne.n	800fdf6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800fdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdf2:	601a      	str	r2, [r3, #0]
 800fdf4:	e003      	b.n	800fdfe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdfc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800fdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe02:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe0a:	e009      	b.n	800fe20 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800fe0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0e:	891a      	ldrh	r2, [r3, #8]
 800fe10:	887b      	ldrh	r3, [r7, #2]
 800fe12:	4413      	add	r3, r2
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe18:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800fe1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d1f2      	bne.n	800fe0c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800fe26:	887b      	ldrh	r3, [r7, #2]
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	623a      	str	r2, [r7, #32]
 800fe2c:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	dd1d      	ble.n	800fe70 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800fe34:	6a3b      	ldr	r3, [r7, #32]
 800fe36:	f003 021f 	and.w	r2, r3, #31
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800fe40:	6a3b      	ldr	r3, [r7, #32]
 800fe42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800fe44:	f3bf 8f4f 	dsb	sy
}
 800fe48:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800fe4a:	4a0d      	ldr	r2, [pc, #52]	; (800fe80 <HAL_ETH_RxLinkCallback+0xcc>)
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	3320      	adds	r3, #32
 800fe56:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	3b20      	subs	r3, #32
 800fe5c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	dcf2      	bgt.n	800fe4a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800fe64:	f3bf 8f4f 	dsb	sy
}
 800fe68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fe6a:	f3bf 8f6f 	isb	sy
}
 800fe6e:	bf00      	nop
}
 800fe70:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800fe72:	bf00      	nop
 800fe74:	3734      	adds	r7, #52	; 0x34
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	e000ed00 	.word	0xe000ed00

0800fe84 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fe8e:	88fb      	ldrh	r3, [r7, #6]
 800fe90:	021b      	lsls	r3, r3, #8
 800fe92:	b21a      	sxth	r2, r3
 800fe94:	88fb      	ldrh	r3, [r7, #6]
 800fe96:	0a1b      	lsrs	r3, r3, #8
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	b21b      	sxth	r3, r3
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	b21b      	sxth	r3, r3
 800fea0:	b29b      	uxth	r3, r3
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	370c      	adds	r7, #12
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr

0800feae <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800feae:	b480      	push	{r7}
 800feb0:	b083      	sub	sp, #12
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	061a      	lsls	r2, r3, #24
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	021b      	lsls	r3, r3, #8
 800febe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fec2:	431a      	orrs	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	0a1b      	lsrs	r3, r3, #8
 800fec8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fecc:	431a      	orrs	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	0e1b      	lsrs	r3, r3, #24
 800fed2:	4313      	orrs	r3, r2
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b089      	sub	sp, #36	; 0x24
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800feee:	2300      	movs	r3, #0
 800fef0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800fef2:	2300      	movs	r3, #0
 800fef4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	f003 0301 	and.w	r3, r3, #1
 800fefc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d00d      	beq.n	800ff20 <lwip_standard_chksum+0x40>
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	dd0a      	ble.n	800ff20 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800ff0a:	69fa      	ldr	r2, [r7, #28]
 800ff0c:	1c53      	adds	r3, r2, #1
 800ff0e:	61fb      	str	r3, [r7, #28]
 800ff10:	f107 030e 	add.w	r3, r7, #14
 800ff14:	3301      	adds	r3, #1
 800ff16:	7812      	ldrb	r2, [r2, #0]
 800ff18:	701a      	strb	r2, [r3, #0]
    len--;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ff20:	69fb      	ldr	r3, [r7, #28]
 800ff22:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ff24:	e00a      	b.n	800ff3c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	1c9a      	adds	r2, r3, #2
 800ff2a:	61ba      	str	r2, [r7, #24]
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	4413      	add	r3, r2
 800ff34:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	3b02      	subs	r3, #2
 800ff3a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	dcf1      	bgt.n	800ff26 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	dd04      	ble.n	800ff52 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ff48:	f107 030e 	add.w	r3, r7, #14
 800ff4c:	69ba      	ldr	r2, [r7, #24]
 800ff4e:	7812      	ldrb	r2, [r2, #0]
 800ff50:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ff52:	89fb      	ldrh	r3, [r7, #14]
 800ff54:	461a      	mov	r2, r3
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	4413      	add	r3, r2
 800ff5a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	0c1a      	lsrs	r2, r3, #16
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	4413      	add	r3, r2
 800ff66:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	0c1a      	lsrs	r2, r3, #16
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	4413      	add	r3, r2
 800ff72:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d007      	beq.n	800ff8a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	021b      	lsls	r3, r3, #8
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	0a1b      	lsrs	r3, r3, #8
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	4313      	orrs	r3, r2
 800ff88:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	b29b      	uxth	r3, r3
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3724      	adds	r7, #36	; 0x24
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr

0800ff9a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b082      	sub	sp, #8
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ffa6:	887b      	ldrh	r3, [r7, #2]
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7ff ff98 	bl	800fee0 <lwip_standard_chksum>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	43db      	mvns	r3, r3
 800ffb4:	b29b      	uxth	r3, r3
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b086      	sub	sp, #24
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	613b      	str	r3, [r7, #16]
 800ffd2:	e02b      	b.n	801002c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	685a      	ldr	r2, [r3, #4]
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	895b      	ldrh	r3, [r3, #10]
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4610      	mov	r0, r2
 800ffe0:	f7ff ff7e 	bl	800fee0 <lwip_standard_chksum>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	4413      	add	r3, r2
 800ffec:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	0c1a      	lsrs	r2, r3, #16
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	b29b      	uxth	r3, r3
 800fff6:	4413      	add	r3, r2
 800fff8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	895b      	ldrh	r3, [r3, #10]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	b29b      	uxth	r3, r3
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00e      	beq.n	8010026 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2b00      	cmp	r3, #0
 801000c:	bf0c      	ite	eq
 801000e:	2301      	moveq	r3, #1
 8010010:	2300      	movne	r3, #0
 8010012:	b2db      	uxtb	r3, r3
 8010014:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	021b      	lsls	r3, r3, #8
 801001a:	b29a      	uxth	r2, r3
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	0a1b      	lsrs	r3, r3, #8
 8010020:	b2db      	uxtb	r3, r3
 8010022:	4313      	orrs	r3, r2
 8010024:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	613b      	str	r3, [r7, #16]
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1d0      	bne.n	800ffd4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d007      	beq.n	8010048 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	021b      	lsls	r3, r3, #8
 801003c:	b29a      	uxth	r2, r3
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	0a1b      	lsrs	r3, r3, #8
 8010042:	b2db      	uxtb	r3, r3
 8010044:	4313      	orrs	r3, r2
 8010046:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	b29b      	uxth	r3, r3
 801004c:	43db      	mvns	r3, r3
 801004e:	b29b      	uxth	r3, r3
}
 8010050:	4618      	mov	r0, r3
 8010052:	3718      	adds	r7, #24
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801005e:	2300      	movs	r3, #0
 8010060:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8010062:	f000 f8d3 	bl	801020c <mem_init>
  memp_init();
 8010066:	f000 fbc5 	bl	80107f4 <memp_init>
  pbuf_init();
  netif_init();
 801006a:	f000 fcc3 	bl	80109f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801006e:	f007 ff3d 	bl	8017eec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010072:	f001 fe2b 	bl	8011ccc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010076:	f007 feaf 	bl	8017dd8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801007a:	bf00      	nop
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 801008c:	4b04      	ldr	r3, [pc, #16]	; (80100a0 <ptr_to_mem+0x1c>)
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	4413      	add	r3, r2
}
 8010094:	4618      	mov	r0, r3
 8010096:	370c      	adds	r7, #12
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr
 80100a0:	200008f8 	.word	0x200008f8

080100a4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80100ac:	4b04      	ldr	r3, [pc, #16]	; (80100c0 <mem_to_ptr+0x1c>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	1ad3      	subs	r3, r2, r3
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	370c      	adds	r7, #12
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr
 80100c0:	200008f8 	.word	0x200008f8

080100c4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80100c4:	b590      	push	{r4, r7, lr}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80100cc:	4b45      	ldr	r3, [pc, #276]	; (80101e4 <plug_holes+0x120>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d206      	bcs.n	80100e4 <plug_holes+0x20>
 80100d6:	4b44      	ldr	r3, [pc, #272]	; (80101e8 <plug_holes+0x124>)
 80100d8:	f240 12df 	movw	r2, #479	; 0x1df
 80100dc:	4943      	ldr	r1, [pc, #268]	; (80101ec <plug_holes+0x128>)
 80100de:	4844      	ldr	r0, [pc, #272]	; (80101f0 <plug_holes+0x12c>)
 80100e0:	f00b f8e6 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80100e4:	4b43      	ldr	r3, [pc, #268]	; (80101f4 <plug_holes+0x130>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d306      	bcc.n	80100fc <plug_holes+0x38>
 80100ee:	4b3e      	ldr	r3, [pc, #248]	; (80101e8 <plug_holes+0x124>)
 80100f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80100f4:	4940      	ldr	r1, [pc, #256]	; (80101f8 <plug_holes+0x134>)
 80100f6:	483e      	ldr	r0, [pc, #248]	; (80101f0 <plug_holes+0x12c>)
 80100f8:	f00b f8da 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	7a1b      	ldrb	r3, [r3, #8]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d006      	beq.n	8010112 <plug_holes+0x4e>
 8010104:	4b38      	ldr	r3, [pc, #224]	; (80101e8 <plug_holes+0x124>)
 8010106:	f240 12e1 	movw	r2, #481	; 0x1e1
 801010a:	493c      	ldr	r1, [pc, #240]	; (80101fc <plug_holes+0x138>)
 801010c:	4838      	ldr	r0, [pc, #224]	; (80101f0 <plug_holes+0x12c>)
 801010e:	f00b f8cf 	bl	801b2b0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a3a      	ldr	r2, [pc, #232]	; (8010200 <plug_holes+0x13c>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d906      	bls.n	801012a <plug_holes+0x66>
 801011c:	4b32      	ldr	r3, [pc, #200]	; (80101e8 <plug_holes+0x124>)
 801011e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010122:	4938      	ldr	r1, [pc, #224]	; (8010204 <plug_holes+0x140>)
 8010124:	4832      	ldr	r0, [pc, #200]	; (80101f0 <plug_holes+0x12c>)
 8010126:	f00b f8c3 	bl	801b2b0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4618      	mov	r0, r3
 8010130:	f7ff ffa8 	bl	8010084 <ptr_to_mem>
 8010134:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	429a      	cmp	r2, r3
 801013c:	d024      	beq.n	8010188 <plug_holes+0xc4>
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	7a1b      	ldrb	r3, [r3, #8]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d120      	bne.n	8010188 <plug_holes+0xc4>
 8010146:	4b2b      	ldr	r3, [pc, #172]	; (80101f4 <plug_holes+0x130>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	68fa      	ldr	r2, [r7, #12]
 801014c:	429a      	cmp	r2, r3
 801014e:	d01b      	beq.n	8010188 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010150:	4b2d      	ldr	r3, [pc, #180]	; (8010208 <plug_holes+0x144>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	429a      	cmp	r2, r3
 8010158:	d102      	bne.n	8010160 <plug_holes+0x9c>
      lfree = mem;
 801015a:	4a2b      	ldr	r2, [pc, #172]	; (8010208 <plug_holes+0x144>)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681a      	ldr	r2, [r3, #0]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4a24      	ldr	r2, [pc, #144]	; (8010200 <plug_holes+0x13c>)
 801016e:	4293      	cmp	r3, r2
 8010170:	d00a      	beq.n	8010188 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff ff84 	bl	8010084 <ptr_to_mem>
 801017c:	4604      	mov	r4, r0
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7ff ff90 	bl	80100a4 <mem_to_ptr>
 8010184:	4603      	mov	r3, r0
 8010186:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	4618      	mov	r0, r3
 801018e:	f7ff ff79 	bl	8010084 <ptr_to_mem>
 8010192:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	429a      	cmp	r2, r3
 801019a:	d01f      	beq.n	80101dc <plug_holes+0x118>
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	7a1b      	ldrb	r3, [r3, #8]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d11b      	bne.n	80101dc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80101a4:	4b18      	ldr	r3, [pc, #96]	; (8010208 <plug_holes+0x144>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	687a      	ldr	r2, [r7, #4]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d102      	bne.n	80101b4 <plug_holes+0xf0>
      lfree = pmem;
 80101ae:	4a16      	ldr	r2, [pc, #88]	; (8010208 <plug_holes+0x144>)
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a0f      	ldr	r2, [pc, #60]	; (8010200 <plug_holes+0x13c>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d00a      	beq.n	80101dc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7ff ff5a 	bl	8010084 <ptr_to_mem>
 80101d0:	4604      	mov	r4, r0
 80101d2:	68b8      	ldr	r0, [r7, #8]
 80101d4:	f7ff ff66 	bl	80100a4 <mem_to_ptr>
 80101d8:	4603      	mov	r3, r0
 80101da:	6063      	str	r3, [r4, #4]
    }
  }
}
 80101dc:	bf00      	nop
 80101de:	3714      	adds	r7, #20
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd90      	pop	{r4, r7, pc}
 80101e4:	200008f8 	.word	0x200008f8
 80101e8:	0801e418 	.word	0x0801e418
 80101ec:	0801e448 	.word	0x0801e448
 80101f0:	0801e460 	.word	0x0801e460
 80101f4:	200008fc 	.word	0x200008fc
 80101f8:	0801e488 	.word	0x0801e488
 80101fc:	0801e4a4 	.word	0x0801e4a4
 8010200:	0001ffe8 	.word	0x0001ffe8
 8010204:	0801e4c0 	.word	0x0801e4c0
 8010208:	20000900 	.word	0x20000900

0801020c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010212:	4b14      	ldr	r3, [pc, #80]	; (8010264 <mem_init+0x58>)
 8010214:	4a14      	ldr	r2, [pc, #80]	; (8010268 <mem_init+0x5c>)
 8010216:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010218:	4b12      	ldr	r3, [pc, #72]	; (8010264 <mem_init+0x58>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4a12      	ldr	r2, [pc, #72]	; (801026c <mem_init+0x60>)
 8010222:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010230:	480e      	ldr	r0, [pc, #56]	; (801026c <mem_init+0x60>)
 8010232:	f7ff ff27 	bl	8010084 <ptr_to_mem>
 8010236:	4603      	mov	r3, r0
 8010238:	4a0d      	ldr	r2, [pc, #52]	; (8010270 <mem_init+0x64>)
 801023a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801023c:	4b0c      	ldr	r3, [pc, #48]	; (8010270 <mem_init+0x64>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2201      	movs	r2, #1
 8010242:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010244:	4b0a      	ldr	r3, [pc, #40]	; (8010270 <mem_init+0x64>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a08      	ldr	r2, [pc, #32]	; (801026c <mem_init+0x60>)
 801024a:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801024c:	4b08      	ldr	r3, [pc, #32]	; (8010270 <mem_init+0x64>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a06      	ldr	r2, [pc, #24]	; (801026c <mem_init+0x60>)
 8010252:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010254:	4b03      	ldr	r3, [pc, #12]	; (8010264 <mem_init+0x58>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4a06      	ldr	r2, [pc, #24]	; (8010274 <mem_init+0x68>)
 801025a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801025c:	bf00      	nop
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	200008f8 	.word	0x200008f8
 8010268:	30020000 	.word	0x30020000
 801026c:	0001ffe8 	.word	0x0001ffe8
 8010270:	200008fc 	.word	0x200008fc
 8010274:	20000900 	.word	0x20000900

08010278 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f7ff ff0f 	bl	80100a4 <mem_to_ptr>
 8010286:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4618      	mov	r0, r3
 801028e:	f7ff fef9 	bl	8010084 <ptr_to_mem>
 8010292:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	4618      	mov	r0, r3
 801029a:	f7ff fef3 	bl	8010084 <ptr_to_mem>
 801029e:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	4a11      	ldr	r2, [pc, #68]	; (80102ec <mem_link_valid+0x74>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d818      	bhi.n	80102dc <mem_link_valid+0x64>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	4a0f      	ldr	r2, [pc, #60]	; (80102ec <mem_link_valid+0x74>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d813      	bhi.n	80102dc <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80102b8:	697a      	ldr	r2, [r7, #20]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d004      	beq.n	80102c8 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	697a      	ldr	r2, [r7, #20]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d109      	bne.n	80102dc <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80102c8:	4b09      	ldr	r3, [pc, #36]	; (80102f0 <mem_link_valid+0x78>)
 80102ca:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80102cc:	693a      	ldr	r2, [r7, #16]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d006      	beq.n	80102e0 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	697a      	ldr	r2, [r7, #20]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d001      	beq.n	80102e0 <mem_link_valid+0x68>
    return 0;
 80102dc:	2300      	movs	r3, #0
 80102de:	e000      	b.n	80102e2 <mem_link_valid+0x6a>
  }
  return 1;
 80102e0:	2301      	movs	r3, #1
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3718      	adds	r7, #24
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	0001ffe8 	.word	0x0001ffe8
 80102f0:	200008fc 	.word	0x200008fc

080102f4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d04c      	beq.n	801039c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f003 0303 	and.w	r3, r3, #3
 8010308:	2b00      	cmp	r3, #0
 801030a:	d007      	beq.n	801031c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801030c:	4b25      	ldr	r3, [pc, #148]	; (80103a4 <mem_free+0xb0>)
 801030e:	f240 2273 	movw	r2, #627	; 0x273
 8010312:	4925      	ldr	r1, [pc, #148]	; (80103a8 <mem_free+0xb4>)
 8010314:	4825      	ldr	r0, [pc, #148]	; (80103ac <mem_free+0xb8>)
 8010316:	f00a ffcb 	bl	801b2b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801031a:	e040      	b.n	801039e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	3b0c      	subs	r3, #12
 8010320:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010322:	4b23      	ldr	r3, [pc, #140]	; (80103b0 <mem_free+0xbc>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	68fa      	ldr	r2, [r7, #12]
 8010328:	429a      	cmp	r2, r3
 801032a:	d306      	bcc.n	801033a <mem_free+0x46>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f103 020c 	add.w	r2, r3, #12
 8010332:	4b20      	ldr	r3, [pc, #128]	; (80103b4 <mem_free+0xc0>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	429a      	cmp	r2, r3
 8010338:	d907      	bls.n	801034a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801033a:	4b1a      	ldr	r3, [pc, #104]	; (80103a4 <mem_free+0xb0>)
 801033c:	f240 227f 	movw	r2, #639	; 0x27f
 8010340:	491d      	ldr	r1, [pc, #116]	; (80103b8 <mem_free+0xc4>)
 8010342:	481a      	ldr	r0, [pc, #104]	; (80103ac <mem_free+0xb8>)
 8010344:	f00a ffb4 	bl	801b2b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010348:	e029      	b.n	801039e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	7a1b      	ldrb	r3, [r3, #8]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d107      	bne.n	8010362 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010352:	4b14      	ldr	r3, [pc, #80]	; (80103a4 <mem_free+0xb0>)
 8010354:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010358:	4918      	ldr	r1, [pc, #96]	; (80103bc <mem_free+0xc8>)
 801035a:	4814      	ldr	r0, [pc, #80]	; (80103ac <mem_free+0xb8>)
 801035c:	f00a ffa8 	bl	801b2b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010360:	e01d      	b.n	801039e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7ff ff88 	bl	8010278 <mem_link_valid>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d107      	bne.n	801037e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801036e:	4b0d      	ldr	r3, [pc, #52]	; (80103a4 <mem_free+0xb0>)
 8010370:	f240 2295 	movw	r2, #661	; 0x295
 8010374:	4912      	ldr	r1, [pc, #72]	; (80103c0 <mem_free+0xcc>)
 8010376:	480d      	ldr	r0, [pc, #52]	; (80103ac <mem_free+0xb8>)
 8010378:	f00a ff9a 	bl	801b2b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801037c:	e00f      	b.n	801039e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2200      	movs	r2, #0
 8010382:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8010384:	4b0f      	ldr	r3, [pc, #60]	; (80103c4 <mem_free+0xd0>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	429a      	cmp	r2, r3
 801038c:	d202      	bcs.n	8010394 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801038e:	4a0d      	ldr	r2, [pc, #52]	; (80103c4 <mem_free+0xd0>)
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010394:	68f8      	ldr	r0, [r7, #12]
 8010396:	f7ff fe95 	bl	80100c4 <plug_holes>
 801039a:	e000      	b.n	801039e <mem_free+0xaa>
    return;
 801039c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801039e:	3710      	adds	r7, #16
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	0801e418 	.word	0x0801e418
 80103a8:	0801e4ec 	.word	0x0801e4ec
 80103ac:	0801e460 	.word	0x0801e460
 80103b0:	200008f8 	.word	0x200008f8
 80103b4:	200008fc 	.word	0x200008fc
 80103b8:	0801e510 	.word	0x0801e510
 80103bc:	0801e52c 	.word	0x0801e52c
 80103c0:	0801e554 	.word	0x0801e554
 80103c4:	20000900 	.word	0x20000900

080103c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b08a      	sub	sp, #40	; 0x28
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	3303      	adds	r3, #3
 80103d6:	f023 0303 	bic.w	r3, r3, #3
 80103da:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 80103dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103de:	2b0b      	cmp	r3, #11
 80103e0:	d801      	bhi.n	80103e6 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80103e2:	230c      	movs	r3, #12
 80103e4:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80103e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e8:	4a68      	ldr	r2, [pc, #416]	; (801058c <mem_trim+0x1c4>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d803      	bhi.n	80103f6 <mem_trim+0x2e>
 80103ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d201      	bcs.n	80103fa <mem_trim+0x32>
    return NULL;
 80103f6:	2300      	movs	r3, #0
 80103f8:	e0c4      	b.n	8010584 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80103fa:	4b65      	ldr	r3, [pc, #404]	; (8010590 <mem_trim+0x1c8>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	429a      	cmp	r2, r3
 8010402:	d304      	bcc.n	801040e <mem_trim+0x46>
 8010404:	4b63      	ldr	r3, [pc, #396]	; (8010594 <mem_trim+0x1cc>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	429a      	cmp	r2, r3
 801040c:	d306      	bcc.n	801041c <mem_trim+0x54>
 801040e:	4b62      	ldr	r3, [pc, #392]	; (8010598 <mem_trim+0x1d0>)
 8010410:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010414:	4961      	ldr	r1, [pc, #388]	; (801059c <mem_trim+0x1d4>)
 8010416:	4862      	ldr	r0, [pc, #392]	; (80105a0 <mem_trim+0x1d8>)
 8010418:	f00a ff4a 	bl	801b2b0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801041c:	4b5c      	ldr	r3, [pc, #368]	; (8010590 <mem_trim+0x1c8>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	429a      	cmp	r2, r3
 8010424:	d304      	bcc.n	8010430 <mem_trim+0x68>
 8010426:	4b5b      	ldr	r3, [pc, #364]	; (8010594 <mem_trim+0x1cc>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	429a      	cmp	r2, r3
 801042e:	d301      	bcc.n	8010434 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	e0a7      	b.n	8010584 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	3b0c      	subs	r3, #12
 8010438:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801043a:	6a38      	ldr	r0, [r7, #32]
 801043c:	f7ff fe32 	bl	80100a4 <mem_to_ptr>
 8010440:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010442:	6a3b      	ldr	r3, [r7, #32]
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	1ad3      	subs	r3, r2, r3
 801044a:	3b0c      	subs	r3, #12
 801044c:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801044e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	429a      	cmp	r2, r3
 8010454:	d906      	bls.n	8010464 <mem_trim+0x9c>
 8010456:	4b50      	ldr	r3, [pc, #320]	; (8010598 <mem_trim+0x1d0>)
 8010458:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801045c:	4951      	ldr	r1, [pc, #324]	; (80105a4 <mem_trim+0x1dc>)
 801045e:	4850      	ldr	r0, [pc, #320]	; (80105a0 <mem_trim+0x1d8>)
 8010460:	f00a ff26 	bl	801b2b0 <iprintf>
  if (newsize > size) {
 8010464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	429a      	cmp	r2, r3
 801046a:	d901      	bls.n	8010470 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 801046c:	2300      	movs	r3, #0
 801046e:	e089      	b.n	8010584 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 8010470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	429a      	cmp	r2, r3
 8010476:	d101      	bne.n	801047c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	e083      	b.n	8010584 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801047c:	6a3b      	ldr	r3, [r7, #32]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4618      	mov	r0, r3
 8010482:	f7ff fdff 	bl	8010084 <ptr_to_mem>
 8010486:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	7a1b      	ldrb	r3, [r3, #8]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d13c      	bne.n	801050a <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010490:	6a3b      	ldr	r3, [r7, #32]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4a3d      	ldr	r2, [pc, #244]	; (801058c <mem_trim+0x1c4>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d106      	bne.n	80104a8 <mem_trim+0xe0>
 801049a:	4b3f      	ldr	r3, [pc, #252]	; (8010598 <mem_trim+0x1d0>)
 801049c:	f240 22f5 	movw	r2, #757	; 0x2f5
 80104a0:	4941      	ldr	r1, [pc, #260]	; (80105a8 <mem_trim+0x1e0>)
 80104a2:	483f      	ldr	r0, [pc, #252]	; (80105a0 <mem_trim+0x1d8>)
 80104a4:	f00a ff04 	bl	801b2b0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80104ae:	69fa      	ldr	r2, [r7, #28]
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b2:	4413      	add	r3, r2
 80104b4:	330c      	adds	r3, #12
 80104b6:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 80104b8:	4b3c      	ldr	r3, [pc, #240]	; (80105ac <mem_trim+0x1e4>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	697a      	ldr	r2, [r7, #20]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d105      	bne.n	80104ce <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 80104c2:	6938      	ldr	r0, [r7, #16]
 80104c4:	f7ff fdde 	bl	8010084 <ptr_to_mem>
 80104c8:	4603      	mov	r3, r0
 80104ca:	4a38      	ldr	r2, [pc, #224]	; (80105ac <mem_trim+0x1e4>)
 80104cc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80104ce:	6938      	ldr	r0, [r7, #16]
 80104d0:	f7ff fdd8 	bl	8010084 <ptr_to_mem>
 80104d4:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	2200      	movs	r2, #0
 80104da:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	69fa      	ldr	r2, [r7, #28]
 80104e6:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 80104e8:	6a3b      	ldr	r3, [r7, #32]
 80104ea:	693a      	ldr	r2, [r7, #16]
 80104ec:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	4a26      	ldr	r2, [pc, #152]	; (801058c <mem_trim+0x1c4>)
 80104f4:	4293      	cmp	r3, r2
 80104f6:	d044      	beq.n	8010582 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7ff fdc1 	bl	8010084 <ptr_to_mem>
 8010502:	4602      	mov	r2, r0
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	6053      	str	r3, [r2, #4]
 8010508:	e03b      	b.n	8010582 <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050c:	3318      	adds	r3, #24
 801050e:	69ba      	ldr	r2, [r7, #24]
 8010510:	429a      	cmp	r2, r3
 8010512:	d336      	bcc.n	8010582 <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010514:	69fa      	ldr	r2, [r7, #28]
 8010516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010518:	4413      	add	r3, r2
 801051a:	330c      	adds	r3, #12
 801051c:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801051e:	6a3b      	ldr	r3, [r7, #32]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a1a      	ldr	r2, [pc, #104]	; (801058c <mem_trim+0x1c4>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d106      	bne.n	8010536 <mem_trim+0x16e>
 8010528:	4b1b      	ldr	r3, [pc, #108]	; (8010598 <mem_trim+0x1d0>)
 801052a:	f240 3216 	movw	r2, #790	; 0x316
 801052e:	491e      	ldr	r1, [pc, #120]	; (80105a8 <mem_trim+0x1e0>)
 8010530:	481b      	ldr	r0, [pc, #108]	; (80105a0 <mem_trim+0x1d8>)
 8010532:	f00a febd 	bl	801b2b0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010536:	6938      	ldr	r0, [r7, #16]
 8010538:	f7ff fda4 	bl	8010084 <ptr_to_mem>
 801053c:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 801053e:	4b1b      	ldr	r3, [pc, #108]	; (80105ac <mem_trim+0x1e4>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	429a      	cmp	r2, r3
 8010546:	d202      	bcs.n	801054e <mem_trim+0x186>
      lfree = mem2;
 8010548:	4a18      	ldr	r2, [pc, #96]	; (80105ac <mem_trim+0x1e4>)
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	2200      	movs	r2, #0
 8010552:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8010554:	6a3b      	ldr	r3, [r7, #32]
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	69fa      	ldr	r2, [r7, #28]
 8010560:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8010562:	6a3b      	ldr	r3, [r7, #32]
 8010564:	693a      	ldr	r2, [r7, #16]
 8010566:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	4a07      	ldr	r2, [pc, #28]	; (801058c <mem_trim+0x1c4>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d007      	beq.n	8010582 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4618      	mov	r0, r3
 8010578:	f7ff fd84 	bl	8010084 <ptr_to_mem>
 801057c:	4602      	mov	r2, r0
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8010582:	687b      	ldr	r3, [r7, #4]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3728      	adds	r7, #40	; 0x28
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	0001ffe8 	.word	0x0001ffe8
 8010590:	200008f8 	.word	0x200008f8
 8010594:	200008fc 	.word	0x200008fc
 8010598:	0801e418 	.word	0x0801e418
 801059c:	0801e588 	.word	0x0801e588
 80105a0:	0801e460 	.word	0x0801e460
 80105a4:	0801e5a0 	.word	0x0801e5a0
 80105a8:	0801e5c0 	.word	0x0801e5c0
 80105ac:	20000900 	.word	0x20000900

080105b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b088      	sub	sp, #32
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d101      	bne.n	80105c2 <mem_malloc+0x12>
    return NULL;
 80105be:	2300      	movs	r3, #0
 80105c0:	e0d0      	b.n	8010764 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	3303      	adds	r3, #3
 80105c6:	f023 0303 	bic.w	r3, r3, #3
 80105ca:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	2b0b      	cmp	r3, #11
 80105d0:	d801      	bhi.n	80105d6 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80105d2:	230c      	movs	r3, #12
 80105d4:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80105d6:	69bb      	ldr	r3, [r7, #24]
 80105d8:	4a64      	ldr	r2, [pc, #400]	; (801076c <mem_malloc+0x1bc>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d803      	bhi.n	80105e6 <mem_malloc+0x36>
 80105de:	69ba      	ldr	r2, [r7, #24]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d201      	bcs.n	80105ea <mem_malloc+0x3a>
    return NULL;
 80105e6:	2300      	movs	r3, #0
 80105e8:	e0bc      	b.n	8010764 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80105ea:	4b61      	ldr	r3, [pc, #388]	; (8010770 <mem_malloc+0x1c0>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7ff fd58 	bl	80100a4 <mem_to_ptr>
 80105f4:	61f8      	str	r0, [r7, #28]
 80105f6:	e0ad      	b.n	8010754 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80105f8:	69f8      	ldr	r0, [r7, #28]
 80105fa:	f7ff fd43 	bl	8010084 <ptr_to_mem>
 80105fe:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	7a1b      	ldrb	r3, [r3, #8]
 8010604:	2b00      	cmp	r3, #0
 8010606:	f040 809f 	bne.w	8010748 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	1ad3      	subs	r3, r2, r3
 8010612:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8010614:	69ba      	ldr	r2, [r7, #24]
 8010616:	429a      	cmp	r2, r3
 8010618:	f200 8096 	bhi.w	8010748 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	f1a3 020c 	sub.w	r2, r3, #12
 8010628:	69bb      	ldr	r3, [r7, #24]
 801062a:	3318      	adds	r3, #24
 801062c:	429a      	cmp	r2, r3
 801062e:	d331      	bcc.n	8010694 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010630:	69fa      	ldr	r2, [r7, #28]
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	4413      	add	r3, r2
 8010636:	330c      	adds	r3, #12
 8010638:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	4a4b      	ldr	r2, [pc, #300]	; (801076c <mem_malloc+0x1bc>)
 801063e:	4293      	cmp	r3, r2
 8010640:	d106      	bne.n	8010650 <mem_malloc+0xa0>
 8010642:	4b4c      	ldr	r3, [pc, #304]	; (8010774 <mem_malloc+0x1c4>)
 8010644:	f240 3287 	movw	r2, #903	; 0x387
 8010648:	494b      	ldr	r1, [pc, #300]	; (8010778 <mem_malloc+0x1c8>)
 801064a:	484c      	ldr	r0, [pc, #304]	; (801077c <mem_malloc+0x1cc>)
 801064c:	f00a fe30 	bl	801b2b0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f7ff fd17 	bl	8010084 <ptr_to_mem>
 8010656:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	2200      	movs	r2, #0
 801065c:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	69fa      	ldr	r2, [r7, #28]
 801066a:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	68fa      	ldr	r2, [r7, #12]
 8010670:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	2201      	movs	r2, #1
 8010676:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a3b      	ldr	r2, [pc, #236]	; (801076c <mem_malloc+0x1bc>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d00b      	beq.n	801069a <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4618      	mov	r0, r3
 8010688:	f7ff fcfc 	bl	8010084 <ptr_to_mem>
 801068c:	4602      	mov	r2, r0
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6053      	str	r3, [r2, #4]
 8010692:	e002      	b.n	801069a <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	2201      	movs	r2, #1
 8010698:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801069a:	4b35      	ldr	r3, [pc, #212]	; (8010770 <mem_malloc+0x1c0>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	693a      	ldr	r2, [r7, #16]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d127      	bne.n	80106f4 <mem_malloc+0x144>
          struct mem *cur = lfree;
 80106a4:	4b32      	ldr	r3, [pc, #200]	; (8010770 <mem_malloc+0x1c0>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80106aa:	e005      	b.n	80106b8 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7ff fce7 	bl	8010084 <ptr_to_mem>
 80106b6:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	7a1b      	ldrb	r3, [r3, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d004      	beq.n	80106ca <mem_malloc+0x11a>
 80106c0:	4b2f      	ldr	r3, [pc, #188]	; (8010780 <mem_malloc+0x1d0>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	697a      	ldr	r2, [r7, #20]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d1f0      	bne.n	80106ac <mem_malloc+0xfc>
          }
          lfree = cur;
 80106ca:	4a29      	ldr	r2, [pc, #164]	; (8010770 <mem_malloc+0x1c0>)
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80106d0:	4b27      	ldr	r3, [pc, #156]	; (8010770 <mem_malloc+0x1c0>)
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	4b2a      	ldr	r3, [pc, #168]	; (8010780 <mem_malloc+0x1d0>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d00b      	beq.n	80106f4 <mem_malloc+0x144>
 80106dc:	4b24      	ldr	r3, [pc, #144]	; (8010770 <mem_malloc+0x1c0>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	7a1b      	ldrb	r3, [r3, #8]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d006      	beq.n	80106f4 <mem_malloc+0x144>
 80106e6:	4b23      	ldr	r3, [pc, #140]	; (8010774 <mem_malloc+0x1c4>)
 80106e8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80106ec:	4925      	ldr	r1, [pc, #148]	; (8010784 <mem_malloc+0x1d4>)
 80106ee:	4823      	ldr	r0, [pc, #140]	; (801077c <mem_malloc+0x1cc>)
 80106f0:	f00a fdde 	bl	801b2b0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80106f4:	693a      	ldr	r2, [r7, #16]
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	4413      	add	r3, r2
 80106fa:	330c      	adds	r3, #12
 80106fc:	4a20      	ldr	r2, [pc, #128]	; (8010780 <mem_malloc+0x1d0>)
 80106fe:	6812      	ldr	r2, [r2, #0]
 8010700:	4293      	cmp	r3, r2
 8010702:	d906      	bls.n	8010712 <mem_malloc+0x162>
 8010704:	4b1b      	ldr	r3, [pc, #108]	; (8010774 <mem_malloc+0x1c4>)
 8010706:	f240 32b9 	movw	r2, #953	; 0x3b9
 801070a:	491f      	ldr	r1, [pc, #124]	; (8010788 <mem_malloc+0x1d8>)
 801070c:	481b      	ldr	r0, [pc, #108]	; (801077c <mem_malloc+0x1cc>)
 801070e:	f00a fdcf 	bl	801b2b0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	f003 0303 	and.w	r3, r3, #3
 8010718:	2b00      	cmp	r3, #0
 801071a:	d006      	beq.n	801072a <mem_malloc+0x17a>
 801071c:	4b15      	ldr	r3, [pc, #84]	; (8010774 <mem_malloc+0x1c4>)
 801071e:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010722:	491a      	ldr	r1, [pc, #104]	; (801078c <mem_malloc+0x1dc>)
 8010724:	4815      	ldr	r0, [pc, #84]	; (801077c <mem_malloc+0x1cc>)
 8010726:	f00a fdc3 	bl	801b2b0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	f003 0303 	and.w	r3, r3, #3
 8010730:	2b00      	cmp	r3, #0
 8010732:	d006      	beq.n	8010742 <mem_malloc+0x192>
 8010734:	4b0f      	ldr	r3, [pc, #60]	; (8010774 <mem_malloc+0x1c4>)
 8010736:	f240 32bd 	movw	r2, #957	; 0x3bd
 801073a:	4915      	ldr	r1, [pc, #84]	; (8010790 <mem_malloc+0x1e0>)
 801073c:	480f      	ldr	r0, [pc, #60]	; (801077c <mem_malloc+0x1cc>)
 801073e:	f00a fdb7 	bl	801b2b0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	330c      	adds	r3, #12
 8010746:	e00d      	b.n	8010764 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 8010748:	69f8      	ldr	r0, [r7, #28]
 801074a:	f7ff fc9b 	bl	8010084 <ptr_to_mem>
 801074e:	4603      	mov	r3, r0
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010754:	69ba      	ldr	r2, [r7, #24]
 8010756:	4b05      	ldr	r3, [pc, #20]	; (801076c <mem_malloc+0x1bc>)
 8010758:	1a9b      	subs	r3, r3, r2
 801075a:	69fa      	ldr	r2, [r7, #28]
 801075c:	429a      	cmp	r2, r3
 801075e:	f4ff af4b 	bcc.w	80105f8 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010762:	2300      	movs	r3, #0
}
 8010764:	4618      	mov	r0, r3
 8010766:	3720      	adds	r7, #32
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	0001ffe8 	.word	0x0001ffe8
 8010770:	20000900 	.word	0x20000900
 8010774:	0801e418 	.word	0x0801e418
 8010778:	0801e5c0 	.word	0x0801e5c0
 801077c:	0801e460 	.word	0x0801e460
 8010780:	200008fc 	.word	0x200008fc
 8010784:	0801e5d4 	.word	0x0801e5d4
 8010788:	0801e5f0 	.word	0x0801e5f0
 801078c:	0801e620 	.word	0x0801e620
 8010790:	0801e650 	.word	0x0801e650

08010794 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	689b      	ldr	r3, [r3, #8]
 80107a0:	2200      	movs	r2, #0
 80107a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	3303      	adds	r3, #3
 80107aa:	f023 0303 	bic.w	r3, r3, #3
 80107ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80107b0:	2300      	movs	r3, #0
 80107b2:	60fb      	str	r3, [r7, #12]
 80107b4:	e011      	b.n	80107da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	689b      	ldr	r3, [r3, #8]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	68ba      	ldr	r2, [r7, #8]
 80107c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	881b      	ldrh	r3, [r3, #0]
 80107cc:	461a      	mov	r2, r3
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	4413      	add	r3, r2
 80107d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	3301      	adds	r3, #1
 80107d8:	60fb      	str	r3, [r7, #12]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	885b      	ldrh	r3, [r3, #2]
 80107de:	461a      	mov	r2, r3
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	4293      	cmp	r3, r2
 80107e4:	dbe7      	blt.n	80107b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80107e6:	bf00      	nop
 80107e8:	bf00      	nop
 80107ea:	3714      	adds	r7, #20
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr

080107f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b082      	sub	sp, #8
 80107f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80107fa:	2300      	movs	r3, #0
 80107fc:	80fb      	strh	r3, [r7, #6]
 80107fe:	e009      	b.n	8010814 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010800:	88fb      	ldrh	r3, [r7, #6]
 8010802:	4a08      	ldr	r2, [pc, #32]	; (8010824 <memp_init+0x30>)
 8010804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff ffc3 	bl	8010794 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801080e:	88fb      	ldrh	r3, [r7, #6]
 8010810:	3301      	adds	r3, #1
 8010812:	80fb      	strh	r3, [r7, #6]
 8010814:	88fb      	ldrh	r3, [r7, #6]
 8010816:	2b08      	cmp	r3, #8
 8010818:	d9f2      	bls.n	8010800 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801081a:	bf00      	nop
 801081c:	bf00      	nop
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	08020e78 	.word	0x08020e78

08010828 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	689b      	ldr	r3, [r3, #8]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d012      	beq.n	8010864 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	689b      	ldr	r3, [r3, #8]
 8010842:	68fa      	ldr	r2, [r7, #12]
 8010844:	6812      	ldr	r2, [r2, #0]
 8010846:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f003 0303 	and.w	r3, r3, #3
 801084e:	2b00      	cmp	r3, #0
 8010850:	d006      	beq.n	8010860 <do_memp_malloc_pool+0x38>
 8010852:	4b07      	ldr	r3, [pc, #28]	; (8010870 <do_memp_malloc_pool+0x48>)
 8010854:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010858:	4906      	ldr	r1, [pc, #24]	; (8010874 <do_memp_malloc_pool+0x4c>)
 801085a:	4807      	ldr	r0, [pc, #28]	; (8010878 <do_memp_malloc_pool+0x50>)
 801085c:	f00a fd28 	bl	801b2b0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	e000      	b.n	8010866 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010864:	2300      	movs	r3, #0
}
 8010866:	4618      	mov	r0, r3
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	0801e674 	.word	0x0801e674
 8010874:	0801e6a4 	.word	0x0801e6a4
 8010878:	0801e6c8 	.word	0x0801e6c8

0801087c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d106      	bne.n	8010898 <memp_malloc_pool+0x1c>
 801088a:	4b0a      	ldr	r3, [pc, #40]	; (80108b4 <memp_malloc_pool+0x38>)
 801088c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010890:	4909      	ldr	r1, [pc, #36]	; (80108b8 <memp_malloc_pool+0x3c>)
 8010892:	480a      	ldr	r0, [pc, #40]	; (80108bc <memp_malloc_pool+0x40>)
 8010894:	f00a fd0c 	bl	801b2b0 <iprintf>
  if (desc == NULL) {
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d101      	bne.n	80108a2 <memp_malloc_pool+0x26>
    return NULL;
 801089e:	2300      	movs	r3, #0
 80108a0:	e003      	b.n	80108aa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff ffc0 	bl	8010828 <do_memp_malloc_pool>
 80108a8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3708      	adds	r7, #8
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop
 80108b4:	0801e674 	.word	0x0801e674
 80108b8:	0801e6f0 	.word	0x0801e6f0
 80108bc:	0801e6c8 	.word	0x0801e6c8

080108c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	4603      	mov	r3, r0
 80108c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80108ca:	79fb      	ldrb	r3, [r7, #7]
 80108cc:	2b08      	cmp	r3, #8
 80108ce:	d908      	bls.n	80108e2 <memp_malloc+0x22>
 80108d0:	4b0a      	ldr	r3, [pc, #40]	; (80108fc <memp_malloc+0x3c>)
 80108d2:	f240 1257 	movw	r2, #343	; 0x157
 80108d6:	490a      	ldr	r1, [pc, #40]	; (8010900 <memp_malloc+0x40>)
 80108d8:	480a      	ldr	r0, [pc, #40]	; (8010904 <memp_malloc+0x44>)
 80108da:	f00a fce9 	bl	801b2b0 <iprintf>
 80108de:	2300      	movs	r3, #0
 80108e0:	e008      	b.n	80108f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80108e2:	79fb      	ldrb	r3, [r7, #7]
 80108e4:	4a08      	ldr	r2, [pc, #32]	; (8010908 <memp_malloc+0x48>)
 80108e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7ff ff9c 	bl	8010828 <do_memp_malloc_pool>
 80108f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80108f2:	68fb      	ldr	r3, [r7, #12]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3710      	adds	r7, #16
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	0801e674 	.word	0x0801e674
 8010900:	0801e704 	.word	0x0801e704
 8010904:	0801e6c8 	.word	0x0801e6c8
 8010908:	08020e78 	.word	0x08020e78

0801090c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b084      	sub	sp, #16
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	f003 0303 	and.w	r3, r3, #3
 801091c:	2b00      	cmp	r3, #0
 801091e:	d006      	beq.n	801092e <do_memp_free_pool+0x22>
 8010920:	4b0a      	ldr	r3, [pc, #40]	; (801094c <do_memp_free_pool+0x40>)
 8010922:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010926:	490a      	ldr	r1, [pc, #40]	; (8010950 <do_memp_free_pool+0x44>)
 8010928:	480a      	ldr	r0, [pc, #40]	; (8010954 <do_memp_free_pool+0x48>)
 801092a:	f00a fcc1 	bl	801b2b0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	689b      	ldr	r3, [r3, #8]
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	689b      	ldr	r3, [r3, #8]
 8010940:	68fa      	ldr	r2, [r7, #12]
 8010942:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8010944:	bf00      	nop
 8010946:	3710      	adds	r7, #16
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	0801e674 	.word	0x0801e674
 8010950:	0801e724 	.word	0x0801e724
 8010954:	0801e6c8 	.word	0x0801e6c8

08010958 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d106      	bne.n	8010976 <memp_free_pool+0x1e>
 8010968:	4b0a      	ldr	r3, [pc, #40]	; (8010994 <memp_free_pool+0x3c>)
 801096a:	f240 1295 	movw	r2, #405	; 0x195
 801096e:	490a      	ldr	r1, [pc, #40]	; (8010998 <memp_free_pool+0x40>)
 8010970:	480a      	ldr	r0, [pc, #40]	; (801099c <memp_free_pool+0x44>)
 8010972:	f00a fc9d 	bl	801b2b0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d007      	beq.n	801098c <memp_free_pool+0x34>
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d004      	beq.n	801098c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010982:	6839      	ldr	r1, [r7, #0]
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff ffc1 	bl	801090c <do_memp_free_pool>
 801098a:	e000      	b.n	801098e <memp_free_pool+0x36>
    return;
 801098c:	bf00      	nop
}
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	0801e674 	.word	0x0801e674
 8010998:	0801e6f0 	.word	0x0801e6f0
 801099c:	0801e6c8 	.word	0x0801e6c8

080109a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	4603      	mov	r3, r0
 80109a8:	6039      	str	r1, [r7, #0]
 80109aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80109ac:	79fb      	ldrb	r3, [r7, #7]
 80109ae:	2b08      	cmp	r3, #8
 80109b0:	d907      	bls.n	80109c2 <memp_free+0x22>
 80109b2:	4b0c      	ldr	r3, [pc, #48]	; (80109e4 <memp_free+0x44>)
 80109b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80109b8:	490b      	ldr	r1, [pc, #44]	; (80109e8 <memp_free+0x48>)
 80109ba:	480c      	ldr	r0, [pc, #48]	; (80109ec <memp_free+0x4c>)
 80109bc:	f00a fc78 	bl	801b2b0 <iprintf>
 80109c0:	e00c      	b.n	80109dc <memp_free+0x3c>

  if (mem == NULL) {
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d008      	beq.n	80109da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80109c8:	79fb      	ldrb	r3, [r7, #7]
 80109ca:	4a09      	ldr	r2, [pc, #36]	; (80109f0 <memp_free+0x50>)
 80109cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109d0:	6839      	ldr	r1, [r7, #0]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7ff ff9a 	bl	801090c <do_memp_free_pool>
 80109d8:	e000      	b.n	80109dc <memp_free+0x3c>
    return;
 80109da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80109dc:	3708      	adds	r7, #8
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	0801e674 	.word	0x0801e674
 80109e8:	0801e744 	.word	0x0801e744
 80109ec:	0801e6c8 	.word	0x0801e6c8
 80109f0:	08020e78 	.word	0x08020e78

080109f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80109f4:	b480      	push	{r7}
 80109f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80109f8:	bf00      	nop
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr
	...

08010a04 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b086      	sub	sp, #24
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	607a      	str	r2, [r7, #4]
 8010a10:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d108      	bne.n	8010a2a <netif_add+0x26>
 8010a18:	4b57      	ldr	r3, [pc, #348]	; (8010b78 <netif_add+0x174>)
 8010a1a:	f240 1227 	movw	r2, #295	; 0x127
 8010a1e:	4957      	ldr	r1, [pc, #348]	; (8010b7c <netif_add+0x178>)
 8010a20:	4857      	ldr	r0, [pc, #348]	; (8010b80 <netif_add+0x17c>)
 8010a22:	f00a fc45 	bl	801b2b0 <iprintf>
 8010a26:	2300      	movs	r3, #0
 8010a28:	e0a2      	b.n	8010b70 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d108      	bne.n	8010a42 <netif_add+0x3e>
 8010a30:	4b51      	ldr	r3, [pc, #324]	; (8010b78 <netif_add+0x174>)
 8010a32:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010a36:	4953      	ldr	r1, [pc, #332]	; (8010b84 <netif_add+0x180>)
 8010a38:	4851      	ldr	r0, [pc, #324]	; (8010b80 <netif_add+0x17c>)
 8010a3a:	f00a fc39 	bl	801b2b0 <iprintf>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	e096      	b.n	8010b70 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d101      	bne.n	8010a4c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010a48:	4b4f      	ldr	r3, [pc, #316]	; (8010b88 <netif_add+0x184>)
 8010a4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d101      	bne.n	8010a56 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010a52:	4b4d      	ldr	r3, [pc, #308]	; (8010b88 <netif_add+0x184>)
 8010a54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d101      	bne.n	8010a60 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010a5c:	4b4a      	ldr	r3, [pc, #296]	; (8010b88 <netif_add+0x184>)
 8010a5e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2200      	movs	r2, #0
 8010a64:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	4a45      	ldr	r2, [pc, #276]	; (8010b8c <netif_add+0x188>)
 8010a76:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2200      	movs	r2, #0
 8010a82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6a3a      	ldr	r2, [r7, #32]
 8010a90:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010a92:	4b3f      	ldr	r3, [pc, #252]	; (8010b90 <netif_add+0x18c>)
 8010a94:	781a      	ldrb	r2, [r3, #0]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010aa0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	68b9      	ldr	r1, [r7, #8]
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f000 f913 	bl	8010cd4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab0:	68f8      	ldr	r0, [r7, #12]
 8010ab2:	4798      	blx	r3
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d001      	beq.n	8010abe <netif_add+0xba>
    return NULL;
 8010aba:	2300      	movs	r3, #0
 8010abc:	e058      	b.n	8010b70 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ac4:	2bff      	cmp	r3, #255	; 0xff
 8010ac6:	d103      	bne.n	8010ad0 <netif_add+0xcc>
        netif->num = 0;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2200      	movs	r2, #0
 8010acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010ad4:	4b2f      	ldr	r3, [pc, #188]	; (8010b94 <netif_add+0x190>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	617b      	str	r3, [r7, #20]
 8010ada:	e02b      	b.n	8010b34 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010adc:	697a      	ldr	r2, [r7, #20]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d106      	bne.n	8010af2 <netif_add+0xee>
 8010ae4:	4b24      	ldr	r3, [pc, #144]	; (8010b78 <netif_add+0x174>)
 8010ae6:	f240 128b 	movw	r2, #395	; 0x18b
 8010aea:	492b      	ldr	r1, [pc, #172]	; (8010b98 <netif_add+0x194>)
 8010aec:	4824      	ldr	r0, [pc, #144]	; (8010b80 <netif_add+0x17c>)
 8010aee:	f00a fbdf 	bl	801b2b0 <iprintf>
        num_netifs++;
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	3301      	adds	r3, #1
 8010af6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	2bff      	cmp	r3, #255	; 0xff
 8010afc:	dd06      	ble.n	8010b0c <netif_add+0x108>
 8010afe:	4b1e      	ldr	r3, [pc, #120]	; (8010b78 <netif_add+0x174>)
 8010b00:	f240 128d 	movw	r2, #397	; 0x18d
 8010b04:	4925      	ldr	r1, [pc, #148]	; (8010b9c <netif_add+0x198>)
 8010b06:	481e      	ldr	r0, [pc, #120]	; (8010b80 <netif_add+0x17c>)
 8010b08:	f00a fbd2 	bl	801b2b0 <iprintf>
        if (netif2->num == netif->num) {
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d108      	bne.n	8010b2e <netif_add+0x12a>
          netif->num++;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b22:	3301      	adds	r3, #1
 8010b24:	b2da      	uxtb	r2, r3
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010b2c:	e005      	b.n	8010b3a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	617b      	str	r3, [r7, #20]
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d1d0      	bne.n	8010adc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d1be      	bne.n	8010abe <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b46:	2bfe      	cmp	r3, #254	; 0xfe
 8010b48:	d103      	bne.n	8010b52 <netif_add+0x14e>
    netif_num = 0;
 8010b4a:	4b11      	ldr	r3, [pc, #68]	; (8010b90 <netif_add+0x18c>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	701a      	strb	r2, [r3, #0]
 8010b50:	e006      	b.n	8010b60 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b58:	3301      	adds	r3, #1
 8010b5a:	b2da      	uxtb	r2, r3
 8010b5c:	4b0c      	ldr	r3, [pc, #48]	; (8010b90 <netif_add+0x18c>)
 8010b5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010b60:	4b0c      	ldr	r3, [pc, #48]	; (8010b94 <netif_add+0x190>)
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010b68:	4a0a      	ldr	r2, [pc, #40]	; (8010b94 <netif_add+0x190>)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3718      	adds	r7, #24
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	0801e760 	.word	0x0801e760
 8010b7c:	0801e7f4 	.word	0x0801e7f4
 8010b80:	0801e7b0 	.word	0x0801e7b0
 8010b84:	0801e810 	.word	0x0801e810
 8010b88:	08020edc 	.word	0x08020edc
 8010b8c:	08010faf 	.word	0x08010faf
 8010b90:	200071b8 	.word	0x200071b8
 8010b94:	200071b0 	.word	0x200071b0
 8010b98:	0801e834 	.word	0x0801e834
 8010b9c:	0801e848 	.word	0x0801e848

08010ba0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010baa:	6839      	ldr	r1, [r7, #0]
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f002 fde7 	bl	8013780 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010bb2:	6839      	ldr	r1, [r7, #0]
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f007 fb23 	bl	8018200 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010bba:	bf00      	nop
 8010bbc:	3708      	adds	r7, #8
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
	...

08010bc4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b086      	sub	sp, #24
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d106      	bne.n	8010be4 <netif_do_set_ipaddr+0x20>
 8010bd6:	4b1d      	ldr	r3, [pc, #116]	; (8010c4c <netif_do_set_ipaddr+0x88>)
 8010bd8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010bdc:	491c      	ldr	r1, [pc, #112]	; (8010c50 <netif_do_set_ipaddr+0x8c>)
 8010bde:	481d      	ldr	r0, [pc, #116]	; (8010c54 <netif_do_set_ipaddr+0x90>)
 8010be0:	f00a fb66 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d106      	bne.n	8010bf8 <netif_do_set_ipaddr+0x34>
 8010bea:	4b18      	ldr	r3, [pc, #96]	; (8010c4c <netif_do_set_ipaddr+0x88>)
 8010bec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010bf0:	4917      	ldr	r1, [pc, #92]	; (8010c50 <netif_do_set_ipaddr+0x8c>)
 8010bf2:	4818      	ldr	r0, [pc, #96]	; (8010c54 <netif_do_set_ipaddr+0x90>)
 8010bf4:	f00a fb5c 	bl	801b2b0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	3304      	adds	r3, #4
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d01c      	beq.n	8010c40 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	3304      	adds	r3, #4
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010c16:	f107 0314 	add.w	r3, r7, #20
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f7ff ffbf 	bl	8010ba0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d002      	beq.n	8010c2e <netif_do_set_ipaddr+0x6a>
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	e000      	b.n	8010c30 <netif_do_set_ipaddr+0x6c>
 8010c2e:	2300      	movs	r3, #0
 8010c30:	68fa      	ldr	r2, [r7, #12]
 8010c32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010c34:	2101      	movs	r1, #1
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	f000 f8d2 	bl	8010de0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e000      	b.n	8010c42 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010c40:	2300      	movs	r3, #0
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3718      	adds	r7, #24
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	0801e760 	.word	0x0801e760
 8010c50:	0801e878 	.word	0x0801e878
 8010c54:	0801e7b0 	.word	0x0801e7b0

08010c58 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b085      	sub	sp, #20
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	60b9      	str	r1, [r7, #8]
 8010c62:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	3308      	adds	r3, #8
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d00a      	beq.n	8010c88 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d002      	beq.n	8010c7e <netif_do_set_netmask+0x26>
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	e000      	b.n	8010c80 <netif_do_set_netmask+0x28>
 8010c7e:	2300      	movs	r3, #0
 8010c80:	68fa      	ldr	r2, [r7, #12]
 8010c82:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010c84:	2301      	movs	r3, #1
 8010c86:	e000      	b.n	8010c8a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010c88:	2300      	movs	r3, #0
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3714      	adds	r7, #20
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c94:	4770      	bx	lr

08010c96 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010c96:	b480      	push	{r7}
 8010c98:	b085      	sub	sp, #20
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	60f8      	str	r0, [r7, #12]
 8010c9e:	60b9      	str	r1, [r7, #8]
 8010ca0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	681a      	ldr	r2, [r3, #0]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	330c      	adds	r3, #12
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d00a      	beq.n	8010cc6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d002      	beq.n	8010cbc <netif_do_set_gw+0x26>
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	e000      	b.n	8010cbe <netif_do_set_gw+0x28>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	68fa      	ldr	r2, [r7, #12]
 8010cc0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e000      	b.n	8010cc8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010cc6:	2300      	movs	r3, #0
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3714      	adds	r7, #20
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b088      	sub	sp, #32
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	607a      	str	r2, [r7, #4]
 8010ce0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d101      	bne.n	8010cf4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010cf0:	4b1c      	ldr	r3, [pc, #112]	; (8010d64 <netif_set_addr+0x90>)
 8010cf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d101      	bne.n	8010cfe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010cfa:	4b1a      	ldr	r3, [pc, #104]	; (8010d64 <netif_set_addr+0x90>)
 8010cfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d101      	bne.n	8010d08 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010d04:	4b17      	ldr	r3, [pc, #92]	; (8010d64 <netif_set_addr+0x90>)
 8010d06:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d003      	beq.n	8010d16 <netif_set_addr+0x42>
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <netif_set_addr+0x46>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e000      	b.n	8010d1c <netif_set_addr+0x48>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d006      	beq.n	8010d32 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010d24:	f107 0310 	add.w	r3, r7, #16
 8010d28:	461a      	mov	r2, r3
 8010d2a:	68b9      	ldr	r1, [r7, #8]
 8010d2c:	68f8      	ldr	r0, [r7, #12]
 8010d2e:	f7ff ff49 	bl	8010bc4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010d32:	69fa      	ldr	r2, [r7, #28]
 8010d34:	6879      	ldr	r1, [r7, #4]
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f7ff ff8e 	bl	8010c58 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010d3c:	69ba      	ldr	r2, [r7, #24]
 8010d3e:	6839      	ldr	r1, [r7, #0]
 8010d40:	68f8      	ldr	r0, [r7, #12]
 8010d42:	f7ff ffa8 	bl	8010c96 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d106      	bne.n	8010d5a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010d4c:	f107 0310 	add.w	r3, r7, #16
 8010d50:	461a      	mov	r2, r3
 8010d52:	68b9      	ldr	r1, [r7, #8]
 8010d54:	68f8      	ldr	r0, [r7, #12]
 8010d56:	f7ff ff35 	bl	8010bc4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010d5a:	bf00      	nop
 8010d5c:	3720      	adds	r7, #32
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	08020edc 	.word	0x08020edc

08010d68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010d70:	4a04      	ldr	r2, [pc, #16]	; (8010d84 <netif_set_default+0x1c>)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010d76:	bf00      	nop
 8010d78:	370c      	adds	r7, #12
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	200071b4 	.word	0x200071b4

08010d88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d107      	bne.n	8010da6 <netif_set_up+0x1e>
 8010d96:	4b0f      	ldr	r3, [pc, #60]	; (8010dd4 <netif_set_up+0x4c>)
 8010d98:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010d9c:	490e      	ldr	r1, [pc, #56]	; (8010dd8 <netif_set_up+0x50>)
 8010d9e:	480f      	ldr	r0, [pc, #60]	; (8010ddc <netif_set_up+0x54>)
 8010da0:	f00a fa86 	bl	801b2b0 <iprintf>
 8010da4:	e013      	b.n	8010dce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dac:	f003 0301 	and.w	r3, r3, #1
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d10c      	bne.n	8010dce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dba:	f043 0301 	orr.w	r3, r3, #1
 8010dbe:	b2da      	uxtb	r2, r3
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010dc6:	2103      	movs	r1, #3
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 f809 	bl	8010de0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010dce:	3708      	adds	r7, #8
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	0801e760 	.word	0x0801e760
 8010dd8:	0801e8e8 	.word	0x0801e8e8
 8010ddc:	0801e7b0 	.word	0x0801e7b0

08010de0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	460b      	mov	r3, r1
 8010dea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d106      	bne.n	8010e00 <netif_issue_reports+0x20>
 8010df2:	4b18      	ldr	r3, [pc, #96]	; (8010e54 <netif_issue_reports+0x74>)
 8010df4:	f240 326d 	movw	r2, #877	; 0x36d
 8010df8:	4917      	ldr	r1, [pc, #92]	; (8010e58 <netif_issue_reports+0x78>)
 8010dfa:	4818      	ldr	r0, [pc, #96]	; (8010e5c <netif_issue_reports+0x7c>)
 8010dfc:	f00a fa58 	bl	801b2b0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e06:	f003 0304 	and.w	r3, r3, #4
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d01e      	beq.n	8010e4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d017      	beq.n	8010e4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010e1c:	78fb      	ldrb	r3, [r7, #3]
 8010e1e:	f003 0301 	and.w	r3, r3, #1
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d013      	beq.n	8010e4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	3304      	adds	r3, #4
 8010e2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00e      	beq.n	8010e4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e36:	f003 0308 	and.w	r3, r3, #8
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d007      	beq.n	8010e4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	3304      	adds	r3, #4
 8010e42:	4619      	mov	r1, r3
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f008 f945 	bl	80190d4 <etharp_request>
 8010e4a:	e000      	b.n	8010e4e <netif_issue_reports+0x6e>
    return;
 8010e4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010e4e:	3708      	adds	r7, #8
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	0801e760 	.word	0x0801e760
 8010e58:	0801e904 	.word	0x0801e904
 8010e5c:	0801e7b0 	.word	0x0801e7b0

08010e60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d107      	bne.n	8010e7e <netif_set_down+0x1e>
 8010e6e:	4b12      	ldr	r3, [pc, #72]	; (8010eb8 <netif_set_down+0x58>)
 8010e70:	f240 329b 	movw	r2, #923	; 0x39b
 8010e74:	4911      	ldr	r1, [pc, #68]	; (8010ebc <netif_set_down+0x5c>)
 8010e76:	4812      	ldr	r0, [pc, #72]	; (8010ec0 <netif_set_down+0x60>)
 8010e78:	f00a fa1a 	bl	801b2b0 <iprintf>
 8010e7c:	e019      	b.n	8010eb2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e84:	f003 0301 	and.w	r3, r3, #1
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d012      	beq.n	8010eb2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e92:	f023 0301 	bic.w	r3, r3, #1
 8010e96:	b2da      	uxtb	r2, r3
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ea4:	f003 0308 	and.w	r3, r3, #8
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d002      	beq.n	8010eb2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f007 fccf 	bl	8018850 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	0801e760 	.word	0x0801e760
 8010ebc:	0801e928 	.word	0x0801e928
 8010ec0:	0801e7b0 	.word	0x0801e7b0

08010ec4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d107      	bne.n	8010ee2 <netif_set_link_up+0x1e>
 8010ed2:	4b13      	ldr	r3, [pc, #76]	; (8010f20 <netif_set_link_up+0x5c>)
 8010ed4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010ed8:	4912      	ldr	r1, [pc, #72]	; (8010f24 <netif_set_link_up+0x60>)
 8010eda:	4813      	ldr	r0, [pc, #76]	; (8010f28 <netif_set_link_up+0x64>)
 8010edc:	f00a f9e8 	bl	801b2b0 <iprintf>
 8010ee0:	e01b      	b.n	8010f1a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ee8:	f003 0304 	and.w	r3, r3, #4
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d114      	bne.n	8010f1a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ef6:	f043 0304 	orr.w	r3, r3, #4
 8010efa:	b2da      	uxtb	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010f02:	2103      	movs	r1, #3
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f7ff ff6b 	bl	8010de0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	69db      	ldr	r3, [r3, #28]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d003      	beq.n	8010f1a <netif_set_link_up+0x56>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	69db      	ldr	r3, [r3, #28]
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	0801e760 	.word	0x0801e760
 8010f24:	0801e948 	.word	0x0801e948
 8010f28:	0801e7b0 	.word	0x0801e7b0

08010f2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d107      	bne.n	8010f4a <netif_set_link_down+0x1e>
 8010f3a:	4b11      	ldr	r3, [pc, #68]	; (8010f80 <netif_set_link_down+0x54>)
 8010f3c:	f240 4206 	movw	r2, #1030	; 0x406
 8010f40:	4910      	ldr	r1, [pc, #64]	; (8010f84 <netif_set_link_down+0x58>)
 8010f42:	4811      	ldr	r0, [pc, #68]	; (8010f88 <netif_set_link_down+0x5c>)
 8010f44:	f00a f9b4 	bl	801b2b0 <iprintf>
 8010f48:	e017      	b.n	8010f7a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f50:	f003 0304 	and.w	r3, r3, #4
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d010      	beq.n	8010f7a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f5e:	f023 0304 	bic.w	r3, r3, #4
 8010f62:	b2da      	uxtb	r2, r3
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	69db      	ldr	r3, [r3, #28]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d003      	beq.n	8010f7a <netif_set_link_down+0x4e>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	69db      	ldr	r3, [r3, #28]
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010f7a:	3708      	adds	r7, #8
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	0801e760 	.word	0x0801e760
 8010f84:	0801e96c 	.word	0x0801e96c
 8010f88:	0801e7b0 	.word	0x0801e7b0

08010f8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d002      	beq.n	8010fa2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	683a      	ldr	r2, [r7, #0]
 8010fa0:	61da      	str	r2, [r3, #28]
  }
}
 8010fa2:	bf00      	nop
 8010fa4:	370c      	adds	r7, #12
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr

08010fae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010fae:	b480      	push	{r7}
 8010fb0:	b085      	sub	sp, #20
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	60f8      	str	r0, [r7, #12]
 8010fb6:	60b9      	str	r1, [r7, #8]
 8010fb8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010fba:	f06f 030b 	mvn.w	r3, #11
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3714      	adds	r7, #20
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr
	...

08010fcc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b085      	sub	sp, #20
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010fd6:	79fb      	ldrb	r3, [r7, #7]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d013      	beq.n	8011004 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010fdc:	4b0d      	ldr	r3, [pc, #52]	; (8011014 <netif_get_by_index+0x48>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	60fb      	str	r3, [r7, #12]
 8010fe2:	e00c      	b.n	8010ffe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fea:	3301      	adds	r3, #1
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	79fa      	ldrb	r2, [r7, #7]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d101      	bne.n	8010ff8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	e006      	b.n	8011006 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	60fb      	str	r3, [r7, #12]
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d1ef      	bne.n	8010fe4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011004:	2300      	movs	r3, #0
}
 8011006:	4618      	mov	r0, r3
 8011008:	3714      	adds	r7, #20
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop
 8011014:	200071b0 	.word	0x200071b0

08011018 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801101e:	4b0c      	ldr	r3, [pc, #48]	; (8011050 <pbuf_free_ooseq+0x38>)
 8011020:	2200      	movs	r2, #0
 8011022:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011024:	4b0b      	ldr	r3, [pc, #44]	; (8011054 <pbuf_free_ooseq+0x3c>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	607b      	str	r3, [r7, #4]
 801102a:	e00a      	b.n	8011042 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011030:	2b00      	cmp	r3, #0
 8011032:	d003      	beq.n	801103c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f002 fbe1 	bl	80137fc <tcp_free_ooseq>
      return;
 801103a:	e005      	b.n	8011048 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	607b      	str	r3, [r7, #4]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d1f1      	bne.n	801102c <pbuf_free_ooseq+0x14>
    }
  }
}
 8011048:	3708      	adds	r7, #8
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	200071b9 	.word	0x200071b9
 8011054:	200071c8 	.word	0x200071c8

08011058 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011058:	b480      	push	{r7}
 801105a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 801105c:	4b03      	ldr	r3, [pc, #12]	; (801106c <pbuf_pool_is_empty+0x14>)
 801105e:	2201      	movs	r2, #1
 8011060:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011062:	bf00      	nop
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr
 801106c:	200071b9 	.word	0x200071b9

08011070 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011070:	b480      	push	{r7}
 8011072:	b085      	sub	sp, #20
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	4611      	mov	r1, r2
 801107c:	461a      	mov	r2, r3
 801107e:	460b      	mov	r3, r1
 8011080:	80fb      	strh	r3, [r7, #6]
 8011082:	4613      	mov	r3, r2
 8011084:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2200      	movs	r2, #0
 801108a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	68ba      	ldr	r2, [r7, #8]
 8011090:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	88fa      	ldrh	r2, [r7, #6]
 8011096:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	88ba      	ldrh	r2, [r7, #4]
 801109c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801109e:	8b3b      	ldrh	r3, [r7, #24]
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	7f3a      	ldrb	r2, [r7, #28]
 80110aa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2201      	movs	r2, #1
 80110b0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2200      	movs	r2, #0
 80110b6:	73da      	strb	r2, [r3, #15]
}
 80110b8:	bf00      	nop
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr

080110c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b08c      	sub	sp, #48	; 0x30
 80110c8:	af02      	add	r7, sp, #8
 80110ca:	4603      	mov	r3, r0
 80110cc:	71fb      	strb	r3, [r7, #7]
 80110ce:	460b      	mov	r3, r1
 80110d0:	80bb      	strh	r3, [r7, #4]
 80110d2:	4613      	mov	r3, r2
 80110d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80110d6:	79fb      	ldrb	r3, [r7, #7]
 80110d8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80110da:	887b      	ldrh	r3, [r7, #2]
 80110dc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80110e0:	f000 8082 	beq.w	80111e8 <pbuf_alloc+0x124>
 80110e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80110e8:	f300 80c9 	bgt.w	801127e <pbuf_alloc+0x1ba>
 80110ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80110f0:	d010      	beq.n	8011114 <pbuf_alloc+0x50>
 80110f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80110f6:	f300 80c2 	bgt.w	801127e <pbuf_alloc+0x1ba>
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d002      	beq.n	8011104 <pbuf_alloc+0x40>
 80110fe:	2b41      	cmp	r3, #65	; 0x41
 8011100:	f040 80bd 	bne.w	801127e <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011104:	887a      	ldrh	r2, [r7, #2]
 8011106:	88bb      	ldrh	r3, [r7, #4]
 8011108:	4619      	mov	r1, r3
 801110a:	2000      	movs	r0, #0
 801110c:	f000 f8d2 	bl	80112b4 <pbuf_alloc_reference>
 8011110:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8011112:	e0be      	b.n	8011292 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011114:	2300      	movs	r3, #0
 8011116:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011118:	2300      	movs	r3, #0
 801111a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801111c:	88bb      	ldrh	r3, [r7, #4]
 801111e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011120:	2008      	movs	r0, #8
 8011122:	f7ff fbcd 	bl	80108c0 <memp_malloc>
 8011126:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d109      	bne.n	8011142 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 801112e:	f7ff ff93 	bl	8011058 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011134:	2b00      	cmp	r3, #0
 8011136:	d002      	beq.n	801113e <pbuf_alloc+0x7a>
            pbuf_free(p);
 8011138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801113a:	f000 faa7 	bl	801168c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801113e:	2300      	movs	r3, #0
 8011140:	e0a8      	b.n	8011294 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011144:	3303      	adds	r3, #3
 8011146:	b29b      	uxth	r3, r3
 8011148:	f023 0303 	bic.w	r3, r3, #3
 801114c:	b29a      	uxth	r2, r3
 801114e:	f240 53ec 	movw	r3, #1516	; 0x5ec
 8011152:	1a9b      	subs	r3, r3, r2
 8011154:	b29b      	uxth	r3, r3
 8011156:	8b7a      	ldrh	r2, [r7, #26]
 8011158:	4293      	cmp	r3, r2
 801115a:	bf28      	it	cs
 801115c:	4613      	movcs	r3, r2
 801115e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011160:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011162:	3310      	adds	r3, #16
 8011164:	693a      	ldr	r2, [r7, #16]
 8011166:	4413      	add	r3, r2
 8011168:	3303      	adds	r3, #3
 801116a:	f023 0303 	bic.w	r3, r3, #3
 801116e:	4618      	mov	r0, r3
 8011170:	89f9      	ldrh	r1, [r7, #14]
 8011172:	8b7a      	ldrh	r2, [r7, #26]
 8011174:	2300      	movs	r3, #0
 8011176:	9301      	str	r3, [sp, #4]
 8011178:	887b      	ldrh	r3, [r7, #2]
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	460b      	mov	r3, r1
 801117e:	4601      	mov	r1, r0
 8011180:	6938      	ldr	r0, [r7, #16]
 8011182:	f7ff ff75 	bl	8011070 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	f003 0303 	and.w	r3, r3, #3
 801118e:	2b00      	cmp	r3, #0
 8011190:	d006      	beq.n	80111a0 <pbuf_alloc+0xdc>
 8011192:	4b42      	ldr	r3, [pc, #264]	; (801129c <pbuf_alloc+0x1d8>)
 8011194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011198:	4941      	ldr	r1, [pc, #260]	; (80112a0 <pbuf_alloc+0x1dc>)
 801119a:	4842      	ldr	r0, [pc, #264]	; (80112a4 <pbuf_alloc+0x1e0>)
 801119c:	f00a f888 	bl	801b2b0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80111a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111a2:	3303      	adds	r3, #3
 80111a4:	f023 0303 	bic.w	r3, r3, #3
 80111a8:	f240 52ec 	movw	r2, #1516	; 0x5ec
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d106      	bne.n	80111be <pbuf_alloc+0xfa>
 80111b0:	4b3a      	ldr	r3, [pc, #232]	; (801129c <pbuf_alloc+0x1d8>)
 80111b2:	f44f 7281 	mov.w	r2, #258	; 0x102
 80111b6:	493c      	ldr	r1, [pc, #240]	; (80112a8 <pbuf_alloc+0x1e4>)
 80111b8:	483a      	ldr	r0, [pc, #232]	; (80112a4 <pbuf_alloc+0x1e0>)
 80111ba:	f00a f879 	bl	801b2b0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80111be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d102      	bne.n	80111ca <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	627b      	str	r3, [r7, #36]	; 0x24
 80111c8:	e002      	b.n	80111d0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	693a      	ldr	r2, [r7, #16]
 80111ce:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80111d4:	8b7a      	ldrh	r2, [r7, #26]
 80111d6:	89fb      	ldrh	r3, [r7, #14]
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80111dc:	2300      	movs	r3, #0
 80111de:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80111e0:	8b7b      	ldrh	r3, [r7, #26]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d19c      	bne.n	8011120 <pbuf_alloc+0x5c>
      break;
 80111e6:	e054      	b.n	8011292 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80111e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111ea:	3303      	adds	r3, #3
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	f023 0303 	bic.w	r3, r3, #3
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	88bb      	ldrh	r3, [r7, #4]
 80111f6:	3303      	adds	r3, #3
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	f023 0303 	bic.w	r3, r3, #3
 80111fe:	b29b      	uxth	r3, r3
 8011200:	4413      	add	r3, r2
 8011202:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011204:	8b3b      	ldrh	r3, [r7, #24]
 8011206:	3310      	adds	r3, #16
 8011208:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801120a:	8b3a      	ldrh	r2, [r7, #24]
 801120c:	88bb      	ldrh	r3, [r7, #4]
 801120e:	3303      	adds	r3, #3
 8011210:	f023 0303 	bic.w	r3, r3, #3
 8011214:	429a      	cmp	r2, r3
 8011216:	d306      	bcc.n	8011226 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011218:	88bb      	ldrh	r3, [r7, #4]
 801121a:	3303      	adds	r3, #3
 801121c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011220:	697a      	ldr	r2, [r7, #20]
 8011222:	429a      	cmp	r2, r3
 8011224:	d201      	bcs.n	801122a <pbuf_alloc+0x166>
        return NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	e034      	b.n	8011294 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801122a:	6978      	ldr	r0, [r7, #20]
 801122c:	f7ff f9c0 	bl	80105b0 <mem_malloc>
 8011230:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011234:	2b00      	cmp	r3, #0
 8011236:	d101      	bne.n	801123c <pbuf_alloc+0x178>
        return NULL;
 8011238:	2300      	movs	r3, #0
 801123a:	e02b      	b.n	8011294 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801123c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801123e:	3310      	adds	r3, #16
 8011240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011242:	4413      	add	r3, r2
 8011244:	3303      	adds	r3, #3
 8011246:	f023 0303 	bic.w	r3, r3, #3
 801124a:	4618      	mov	r0, r3
 801124c:	88b9      	ldrh	r1, [r7, #4]
 801124e:	88ba      	ldrh	r2, [r7, #4]
 8011250:	2300      	movs	r3, #0
 8011252:	9301      	str	r3, [sp, #4]
 8011254:	887b      	ldrh	r3, [r7, #2]
 8011256:	9300      	str	r3, [sp, #0]
 8011258:	460b      	mov	r3, r1
 801125a:	4601      	mov	r1, r0
 801125c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801125e:	f7ff ff07 	bl	8011070 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	f003 0303 	and.w	r3, r3, #3
 801126a:	2b00      	cmp	r3, #0
 801126c:	d010      	beq.n	8011290 <pbuf_alloc+0x1cc>
 801126e:	4b0b      	ldr	r3, [pc, #44]	; (801129c <pbuf_alloc+0x1d8>)
 8011270:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011274:	490d      	ldr	r1, [pc, #52]	; (80112ac <pbuf_alloc+0x1e8>)
 8011276:	480b      	ldr	r0, [pc, #44]	; (80112a4 <pbuf_alloc+0x1e0>)
 8011278:	f00a f81a 	bl	801b2b0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801127c:	e008      	b.n	8011290 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801127e:	4b07      	ldr	r3, [pc, #28]	; (801129c <pbuf_alloc+0x1d8>)
 8011280:	f240 1227 	movw	r2, #295	; 0x127
 8011284:	490a      	ldr	r1, [pc, #40]	; (80112b0 <pbuf_alloc+0x1ec>)
 8011286:	4807      	ldr	r0, [pc, #28]	; (80112a4 <pbuf_alloc+0x1e0>)
 8011288:	f00a f812 	bl	801b2b0 <iprintf>
      return NULL;
 801128c:	2300      	movs	r3, #0
 801128e:	e001      	b.n	8011294 <pbuf_alloc+0x1d0>
      break;
 8011290:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011294:	4618      	mov	r0, r3
 8011296:	3728      	adds	r7, #40	; 0x28
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	0801e990 	.word	0x0801e990
 80112a0:	0801e9c0 	.word	0x0801e9c0
 80112a4:	0801e9f0 	.word	0x0801e9f0
 80112a8:	0801ea18 	.word	0x0801ea18
 80112ac:	0801ea4c 	.word	0x0801ea4c
 80112b0:	0801ea78 	.word	0x0801ea78

080112b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b086      	sub	sp, #24
 80112b8:	af02      	add	r7, sp, #8
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	460b      	mov	r3, r1
 80112be:	807b      	strh	r3, [r7, #2]
 80112c0:	4613      	mov	r3, r2
 80112c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80112c4:	883b      	ldrh	r3, [r7, #0]
 80112c6:	2b41      	cmp	r3, #65	; 0x41
 80112c8:	d009      	beq.n	80112de <pbuf_alloc_reference+0x2a>
 80112ca:	883b      	ldrh	r3, [r7, #0]
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d006      	beq.n	80112de <pbuf_alloc_reference+0x2a>
 80112d0:	4b0f      	ldr	r3, [pc, #60]	; (8011310 <pbuf_alloc_reference+0x5c>)
 80112d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80112d6:	490f      	ldr	r1, [pc, #60]	; (8011314 <pbuf_alloc_reference+0x60>)
 80112d8:	480f      	ldr	r0, [pc, #60]	; (8011318 <pbuf_alloc_reference+0x64>)
 80112da:	f009 ffe9 	bl	801b2b0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80112de:	2007      	movs	r0, #7
 80112e0:	f7ff faee 	bl	80108c0 <memp_malloc>
 80112e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d101      	bne.n	80112f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80112ec:	2300      	movs	r3, #0
 80112ee:	e00b      	b.n	8011308 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80112f0:	8879      	ldrh	r1, [r7, #2]
 80112f2:	887a      	ldrh	r2, [r7, #2]
 80112f4:	2300      	movs	r3, #0
 80112f6:	9301      	str	r3, [sp, #4]
 80112f8:	883b      	ldrh	r3, [r7, #0]
 80112fa:	9300      	str	r3, [sp, #0]
 80112fc:	460b      	mov	r3, r1
 80112fe:	6879      	ldr	r1, [r7, #4]
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f7ff feb5 	bl	8011070 <pbuf_init_alloced_pbuf>
  return p;
 8011306:	68fb      	ldr	r3, [r7, #12]
}
 8011308:	4618      	mov	r0, r3
 801130a:	3710      	adds	r7, #16
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	0801e990 	.word	0x0801e990
 8011314:	0801ea94 	.word	0x0801ea94
 8011318:	0801e9f0 	.word	0x0801e9f0

0801131c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b088      	sub	sp, #32
 8011320:	af02      	add	r7, sp, #8
 8011322:	607b      	str	r3, [r7, #4]
 8011324:	4603      	mov	r3, r0
 8011326:	73fb      	strb	r3, [r7, #15]
 8011328:	460b      	mov	r3, r1
 801132a:	81bb      	strh	r3, [r7, #12]
 801132c:	4613      	mov	r3, r2
 801132e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011330:	7bfb      	ldrb	r3, [r7, #15]
 8011332:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011334:	8a7b      	ldrh	r3, [r7, #18]
 8011336:	3303      	adds	r3, #3
 8011338:	f023 0203 	bic.w	r2, r3, #3
 801133c:	89bb      	ldrh	r3, [r7, #12]
 801133e:	441a      	add	r2, r3
 8011340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011342:	429a      	cmp	r2, r3
 8011344:	d901      	bls.n	801134a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011346:	2300      	movs	r3, #0
 8011348:	e018      	b.n	801137c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801134a:	6a3b      	ldr	r3, [r7, #32]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d007      	beq.n	8011360 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011350:	8a7b      	ldrh	r3, [r7, #18]
 8011352:	3303      	adds	r3, #3
 8011354:	f023 0303 	bic.w	r3, r3, #3
 8011358:	6a3a      	ldr	r2, [r7, #32]
 801135a:	4413      	add	r3, r2
 801135c:	617b      	str	r3, [r7, #20]
 801135e:	e001      	b.n	8011364 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011360:	2300      	movs	r3, #0
 8011362:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	89b9      	ldrh	r1, [r7, #12]
 8011368:	89ba      	ldrh	r2, [r7, #12]
 801136a:	2302      	movs	r3, #2
 801136c:	9301      	str	r3, [sp, #4]
 801136e:	897b      	ldrh	r3, [r7, #10]
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	460b      	mov	r3, r1
 8011374:	6979      	ldr	r1, [r7, #20]
 8011376:	f7ff fe7b 	bl	8011070 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801137a:	687b      	ldr	r3, [r7, #4]
}
 801137c:	4618      	mov	r0, r3
 801137e:	3718      	adds	r7, #24
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	460b      	mov	r3, r1
 801138e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d106      	bne.n	80113a4 <pbuf_realloc+0x20>
 8011396:	4b39      	ldr	r3, [pc, #228]	; (801147c <pbuf_realloc+0xf8>)
 8011398:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801139c:	4938      	ldr	r1, [pc, #224]	; (8011480 <pbuf_realloc+0xfc>)
 801139e:	4839      	ldr	r0, [pc, #228]	; (8011484 <pbuf_realloc+0x100>)
 80113a0:	f009 ff86 	bl	801b2b0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	891b      	ldrh	r3, [r3, #8]
 80113a8:	887a      	ldrh	r2, [r7, #2]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d261      	bcs.n	8011472 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	891a      	ldrh	r2, [r3, #8]
 80113b2:	887b      	ldrh	r3, [r7, #2]
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80113b8:	887b      	ldrh	r3, [r7, #2]
 80113ba:	817b      	strh	r3, [r7, #10]
  q = p;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80113c0:	e018      	b.n	80113f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	895b      	ldrh	r3, [r3, #10]
 80113c6:	897a      	ldrh	r2, [r7, #10]
 80113c8:	1ad3      	subs	r3, r2, r3
 80113ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	891a      	ldrh	r2, [r3, #8]
 80113d0:	893b      	ldrh	r3, [r7, #8]
 80113d2:	1ad3      	subs	r3, r2, r3
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d106      	bne.n	80113f4 <pbuf_realloc+0x70>
 80113e6:	4b25      	ldr	r3, [pc, #148]	; (801147c <pbuf_realloc+0xf8>)
 80113e8:	f240 12af 	movw	r2, #431	; 0x1af
 80113ec:	4926      	ldr	r1, [pc, #152]	; (8011488 <pbuf_realloc+0x104>)
 80113ee:	4825      	ldr	r0, [pc, #148]	; (8011484 <pbuf_realloc+0x100>)
 80113f0:	f009 ff5e 	bl	801b2b0 <iprintf>
  while (rem_len > q->len) {
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	895b      	ldrh	r3, [r3, #10]
 80113f8:	897a      	ldrh	r2, [r7, #10]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d8e1      	bhi.n	80113c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	7b1b      	ldrb	r3, [r3, #12]
 8011402:	f003 030f 	and.w	r3, r3, #15
 8011406:	2b00      	cmp	r3, #0
 8011408:	d11f      	bne.n	801144a <pbuf_realloc+0xc6>
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	895b      	ldrh	r3, [r3, #10]
 801140e:	897a      	ldrh	r2, [r7, #10]
 8011410:	429a      	cmp	r2, r3
 8011412:	d01a      	beq.n	801144a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	7b5b      	ldrb	r3, [r3, #13]
 8011418:	f003 0302 	and.w	r3, r3, #2
 801141c:	2b00      	cmp	r3, #0
 801141e:	d114      	bne.n	801144a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	685a      	ldr	r2, [r3, #4]
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	1ad2      	subs	r2, r2, r3
 8011428:	897b      	ldrh	r3, [r7, #10]
 801142a:	4413      	add	r3, r2
 801142c:	4619      	mov	r1, r3
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	f7fe ffca 	bl	80103c8 <mem_trim>
 8011434:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d106      	bne.n	801144a <pbuf_realloc+0xc6>
 801143c:	4b0f      	ldr	r3, [pc, #60]	; (801147c <pbuf_realloc+0xf8>)
 801143e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011442:	4912      	ldr	r1, [pc, #72]	; (801148c <pbuf_realloc+0x108>)
 8011444:	480f      	ldr	r0, [pc, #60]	; (8011484 <pbuf_realloc+0x100>)
 8011446:	f009 ff33 	bl	801b2b0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	897a      	ldrh	r2, [r7, #10]
 801144e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	895a      	ldrh	r2, [r3, #10]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d004      	beq.n	801146a <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4618      	mov	r0, r3
 8011466:	f000 f911 	bl	801168c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2200      	movs	r2, #0
 801146e:	601a      	str	r2, [r3, #0]
 8011470:	e000      	b.n	8011474 <pbuf_realloc+0xf0>
    return;
 8011472:	bf00      	nop

}
 8011474:	3710      	adds	r7, #16
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	0801e990 	.word	0x0801e990
 8011480:	0801eaa8 	.word	0x0801eaa8
 8011484:	0801e9f0 	.word	0x0801e9f0
 8011488:	0801eac0 	.word	0x0801eac0
 801148c:	0801ead8 	.word	0x0801ead8

08011490 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	4613      	mov	r3, r2
 801149c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d106      	bne.n	80114b2 <pbuf_add_header_impl+0x22>
 80114a4:	4b2b      	ldr	r3, [pc, #172]	; (8011554 <pbuf_add_header_impl+0xc4>)
 80114a6:	f240 12df 	movw	r2, #479	; 0x1df
 80114aa:	492b      	ldr	r1, [pc, #172]	; (8011558 <pbuf_add_header_impl+0xc8>)
 80114ac:	482b      	ldr	r0, [pc, #172]	; (801155c <pbuf_add_header_impl+0xcc>)
 80114ae:	f009 feff 	bl	801b2b0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d003      	beq.n	80114c0 <pbuf_add_header_impl+0x30>
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114be:	d301      	bcc.n	80114c4 <pbuf_add_header_impl+0x34>
    return 1;
 80114c0:	2301      	movs	r3, #1
 80114c2:	e043      	b.n	801154c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d101      	bne.n	80114ce <pbuf_add_header_impl+0x3e>
    return 0;
 80114ca:	2300      	movs	r3, #0
 80114cc:	e03e      	b.n	801154c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	891a      	ldrh	r2, [r3, #8]
 80114d6:	8a7b      	ldrh	r3, [r7, #18]
 80114d8:	4413      	add	r3, r2
 80114da:	b29b      	uxth	r3, r3
 80114dc:	8a7a      	ldrh	r2, [r7, #18]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d901      	bls.n	80114e6 <pbuf_add_header_impl+0x56>
    return 1;
 80114e2:	2301      	movs	r3, #1
 80114e4:	e032      	b.n	801154c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	7b1b      	ldrb	r3, [r3, #12]
 80114ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80114ec:	8a3b      	ldrh	r3, [r7, #16]
 80114ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00c      	beq.n	8011510 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	685a      	ldr	r2, [r3, #4]
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	425b      	negs	r3, r3
 80114fe:	4413      	add	r3, r2
 8011500:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	3310      	adds	r3, #16
 8011506:	697a      	ldr	r2, [r7, #20]
 8011508:	429a      	cmp	r2, r3
 801150a:	d20d      	bcs.n	8011528 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801150c:	2301      	movs	r3, #1
 801150e:	e01d      	b.n	801154c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011510:	79fb      	ldrb	r3, [r7, #7]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d006      	beq.n	8011524 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	685a      	ldr	r2, [r3, #4]
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	425b      	negs	r3, r3
 801151e:	4413      	add	r3, r2
 8011520:	617b      	str	r3, [r7, #20]
 8011522:	e001      	b.n	8011528 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011524:	2301      	movs	r3, #1
 8011526:	e011      	b.n	801154c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	697a      	ldr	r2, [r7, #20]
 801152c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	895a      	ldrh	r2, [r3, #10]
 8011532:	8a7b      	ldrh	r3, [r7, #18]
 8011534:	4413      	add	r3, r2
 8011536:	b29a      	uxth	r2, r3
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	891a      	ldrh	r2, [r3, #8]
 8011540:	8a7b      	ldrh	r3, [r7, #18]
 8011542:	4413      	add	r3, r2
 8011544:	b29a      	uxth	r2, r3
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	811a      	strh	r2, [r3, #8]


  return 0;
 801154a:	2300      	movs	r3, #0
}
 801154c:	4618      	mov	r0, r3
 801154e:	3718      	adds	r7, #24
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	0801e990 	.word	0x0801e990
 8011558:	0801eaf4 	.word	0x0801eaf4
 801155c:	0801e9f0 	.word	0x0801e9f0

08011560 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801156a:	2200      	movs	r2, #0
 801156c:	6839      	ldr	r1, [r7, #0]
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7ff ff8e 	bl	8011490 <pbuf_add_header_impl>
 8011574:	4603      	mov	r3, r0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
	...

08011580 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d106      	bne.n	801159e <pbuf_remove_header+0x1e>
 8011590:	4b20      	ldr	r3, [pc, #128]	; (8011614 <pbuf_remove_header+0x94>)
 8011592:	f240 224b 	movw	r2, #587	; 0x24b
 8011596:	4920      	ldr	r1, [pc, #128]	; (8011618 <pbuf_remove_header+0x98>)
 8011598:	4820      	ldr	r0, [pc, #128]	; (801161c <pbuf_remove_header+0x9c>)
 801159a:	f009 fe89 	bl	801b2b0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d003      	beq.n	80115ac <pbuf_remove_header+0x2c>
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115aa:	d301      	bcc.n	80115b0 <pbuf_remove_header+0x30>
    return 1;
 80115ac:	2301      	movs	r3, #1
 80115ae:	e02c      	b.n	801160a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d101      	bne.n	80115ba <pbuf_remove_header+0x3a>
    return 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	e027      	b.n	801160a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	895b      	ldrh	r3, [r3, #10]
 80115c2:	89fa      	ldrh	r2, [r7, #14]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d908      	bls.n	80115da <pbuf_remove_header+0x5a>
 80115c8:	4b12      	ldr	r3, [pc, #72]	; (8011614 <pbuf_remove_header+0x94>)
 80115ca:	f240 2255 	movw	r2, #597	; 0x255
 80115ce:	4914      	ldr	r1, [pc, #80]	; (8011620 <pbuf_remove_header+0xa0>)
 80115d0:	4812      	ldr	r0, [pc, #72]	; (801161c <pbuf_remove_header+0x9c>)
 80115d2:	f009 fe6d 	bl	801b2b0 <iprintf>
 80115d6:	2301      	movs	r3, #1
 80115d8:	e017      	b.n	801160a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	685a      	ldr	r2, [r3, #4]
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	441a      	add	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	895a      	ldrh	r2, [r3, #10]
 80115f0:	89fb      	ldrh	r3, [r7, #14]
 80115f2:	1ad3      	subs	r3, r2, r3
 80115f4:	b29a      	uxth	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	891a      	ldrh	r2, [r3, #8]
 80115fe:	89fb      	ldrh	r3, [r7, #14]
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	b29a      	uxth	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011608:	2300      	movs	r3, #0
}
 801160a:	4618      	mov	r0, r3
 801160c:	3710      	adds	r7, #16
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	0801e990 	.word	0x0801e990
 8011618:	0801eaf4 	.word	0x0801eaf4
 801161c:	0801e9f0 	.word	0x0801e9f0
 8011620:	0801eb00 	.word	0x0801eb00

08011624 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	460b      	mov	r3, r1
 801162e:	807b      	strh	r3, [r7, #2]
 8011630:	4613      	mov	r3, r2
 8011632:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011634:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011638:	2b00      	cmp	r3, #0
 801163a:	da08      	bge.n	801164e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801163c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011640:	425b      	negs	r3, r3
 8011642:	4619      	mov	r1, r3
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f7ff ff9b 	bl	8011580 <pbuf_remove_header>
 801164a:	4603      	mov	r3, r0
 801164c:	e007      	b.n	801165e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801164e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011652:	787a      	ldrb	r2, [r7, #1]
 8011654:	4619      	mov	r1, r3
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f7ff ff1a 	bl	8011490 <pbuf_add_header_impl>
 801165c:	4603      	mov	r3, r0
  }
}
 801165e:	4618      	mov	r0, r3
 8011660:	3708      	adds	r7, #8
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011666:	b580      	push	{r7, lr}
 8011668:	b082      	sub	sp, #8
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
 801166e:	460b      	mov	r3, r1
 8011670:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011672:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011676:	2201      	movs	r2, #1
 8011678:	4619      	mov	r1, r3
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f7ff ffd2 	bl	8011624 <pbuf_header_impl>
 8011680:	4603      	mov	r3, r0
}
 8011682:	4618      	mov	r0, r3
 8011684:	3708      	adds	r7, #8
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
	...

0801168c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b086      	sub	sp, #24
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d10b      	bne.n	80116b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d106      	bne.n	80116ae <pbuf_free+0x22>
 80116a0:	4b38      	ldr	r3, [pc, #224]	; (8011784 <pbuf_free+0xf8>)
 80116a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80116a6:	4938      	ldr	r1, [pc, #224]	; (8011788 <pbuf_free+0xfc>)
 80116a8:	4838      	ldr	r0, [pc, #224]	; (801178c <pbuf_free+0x100>)
 80116aa:	f009 fe01 	bl	801b2b0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80116ae:	2300      	movs	r3, #0
 80116b0:	e063      	b.n	801177a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80116b2:	2300      	movs	r3, #0
 80116b4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80116b6:	e05c      	b.n	8011772 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	7b9b      	ldrb	r3, [r3, #14]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d106      	bne.n	80116ce <pbuf_free+0x42>
 80116c0:	4b30      	ldr	r3, [pc, #192]	; (8011784 <pbuf_free+0xf8>)
 80116c2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80116c6:	4932      	ldr	r1, [pc, #200]	; (8011790 <pbuf_free+0x104>)
 80116c8:	4830      	ldr	r0, [pc, #192]	; (801178c <pbuf_free+0x100>)
 80116ca:	f009 fdf1 	bl	801b2b0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	7b9b      	ldrb	r3, [r3, #14]
 80116d2:	3b01      	subs	r3, #1
 80116d4:	b2da      	uxtb	r2, r3
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	739a      	strb	r2, [r3, #14]
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	7b9b      	ldrb	r3, [r3, #14]
 80116de:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80116e0:	7dbb      	ldrb	r3, [r7, #22]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d143      	bne.n	801176e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	7b1b      	ldrb	r3, [r3, #12]
 80116f0:	f003 030f 	and.w	r3, r3, #15
 80116f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	7b5b      	ldrb	r3, [r3, #13]
 80116fa:	f003 0302 	and.w	r3, r3, #2
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d011      	beq.n	8011726 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d106      	bne.n	801171c <pbuf_free+0x90>
 801170e:	4b1d      	ldr	r3, [pc, #116]	; (8011784 <pbuf_free+0xf8>)
 8011710:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011714:	491f      	ldr	r1, [pc, #124]	; (8011794 <pbuf_free+0x108>)
 8011716:	481d      	ldr	r0, [pc, #116]	; (801178c <pbuf_free+0x100>)
 8011718:	f009 fdca 	bl	801b2b0 <iprintf>
        pc->custom_free_function(p);
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	691b      	ldr	r3, [r3, #16]
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	4798      	blx	r3
 8011724:	e01d      	b.n	8011762 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011726:	7bfb      	ldrb	r3, [r7, #15]
 8011728:	2b02      	cmp	r3, #2
 801172a:	d104      	bne.n	8011736 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801172c:	6879      	ldr	r1, [r7, #4]
 801172e:	2008      	movs	r0, #8
 8011730:	f7ff f936 	bl	80109a0 <memp_free>
 8011734:	e015      	b.n	8011762 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011736:	7bfb      	ldrb	r3, [r7, #15]
 8011738:	2b01      	cmp	r3, #1
 801173a:	d104      	bne.n	8011746 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801173c:	6879      	ldr	r1, [r7, #4]
 801173e:	2007      	movs	r0, #7
 8011740:	f7ff f92e 	bl	80109a0 <memp_free>
 8011744:	e00d      	b.n	8011762 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011746:	7bfb      	ldrb	r3, [r7, #15]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d103      	bne.n	8011754 <pbuf_free+0xc8>
          mem_free(p);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7fe fdd1 	bl	80102f4 <mem_free>
 8011752:	e006      	b.n	8011762 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011754:	4b0b      	ldr	r3, [pc, #44]	; (8011784 <pbuf_free+0xf8>)
 8011756:	f240 320f 	movw	r2, #783	; 0x30f
 801175a:	490f      	ldr	r1, [pc, #60]	; (8011798 <pbuf_free+0x10c>)
 801175c:	480b      	ldr	r0, [pc, #44]	; (801178c <pbuf_free+0x100>)
 801175e:	f009 fda7 	bl	801b2b0 <iprintf>
        }
      }
      count++;
 8011762:	7dfb      	ldrb	r3, [r7, #23]
 8011764:	3301      	adds	r3, #1
 8011766:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	607b      	str	r3, [r7, #4]
 801176c:	e001      	b.n	8011772 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801176e:	2300      	movs	r3, #0
 8011770:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d19f      	bne.n	80116b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011778:	7dfb      	ldrb	r3, [r7, #23]
}
 801177a:	4618      	mov	r0, r3
 801177c:	3718      	adds	r7, #24
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	0801e990 	.word	0x0801e990
 8011788:	0801eaf4 	.word	0x0801eaf4
 801178c:	0801e9f0 	.word	0x0801e9f0
 8011790:	0801eb20 	.word	0x0801eb20
 8011794:	0801eb38 	.word	0x0801eb38
 8011798:	0801eb5c 	.word	0x0801eb5c

0801179c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801179c:	b480      	push	{r7}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80117a8:	e005      	b.n	80117b6 <pbuf_clen+0x1a>
    ++len;
 80117aa:	89fb      	ldrh	r3, [r7, #14]
 80117ac:	3301      	adds	r3, #1
 80117ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d1f6      	bne.n	80117aa <pbuf_clen+0xe>
  }
  return len;
 80117bc:	89fb      	ldrh	r3, [r7, #14]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3714      	adds	r7, #20
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr
	...

080117cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d010      	beq.n	80117fc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	7b9b      	ldrb	r3, [r3, #14]
 80117de:	3301      	adds	r3, #1
 80117e0:	b2da      	uxtb	r2, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	7b9b      	ldrb	r3, [r3, #14]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d106      	bne.n	80117fc <pbuf_ref+0x30>
 80117ee:	4b05      	ldr	r3, [pc, #20]	; (8011804 <pbuf_ref+0x38>)
 80117f0:	f240 3242 	movw	r2, #834	; 0x342
 80117f4:	4904      	ldr	r1, [pc, #16]	; (8011808 <pbuf_ref+0x3c>)
 80117f6:	4805      	ldr	r0, [pc, #20]	; (801180c <pbuf_ref+0x40>)
 80117f8:	f009 fd5a 	bl	801b2b0 <iprintf>
  }
}
 80117fc:	bf00      	nop
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	0801e990 	.word	0x0801e990
 8011808:	0801eb70 	.word	0x0801eb70
 801180c:	0801e9f0 	.word	0x0801e9f0

08011810 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d002      	beq.n	8011826 <pbuf_cat+0x16>
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d107      	bne.n	8011836 <pbuf_cat+0x26>
 8011826:	4b20      	ldr	r3, [pc, #128]	; (80118a8 <pbuf_cat+0x98>)
 8011828:	f240 3259 	movw	r2, #857	; 0x359
 801182c:	491f      	ldr	r1, [pc, #124]	; (80118ac <pbuf_cat+0x9c>)
 801182e:	4820      	ldr	r0, [pc, #128]	; (80118b0 <pbuf_cat+0xa0>)
 8011830:	f009 fd3e 	bl	801b2b0 <iprintf>
 8011834:	e034      	b.n	80118a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	60fb      	str	r3, [r7, #12]
 801183a:	e00a      	b.n	8011852 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	891a      	ldrh	r2, [r3, #8]
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	891b      	ldrh	r3, [r3, #8]
 8011844:	4413      	add	r3, r2
 8011846:	b29a      	uxth	r2, r3
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	60fb      	str	r3, [r7, #12]
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d1f0      	bne.n	801183c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	891a      	ldrh	r2, [r3, #8]
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	895b      	ldrh	r3, [r3, #10]
 8011862:	429a      	cmp	r2, r3
 8011864:	d006      	beq.n	8011874 <pbuf_cat+0x64>
 8011866:	4b10      	ldr	r3, [pc, #64]	; (80118a8 <pbuf_cat+0x98>)
 8011868:	f240 3262 	movw	r2, #866	; 0x362
 801186c:	4911      	ldr	r1, [pc, #68]	; (80118b4 <pbuf_cat+0xa4>)
 801186e:	4810      	ldr	r0, [pc, #64]	; (80118b0 <pbuf_cat+0xa0>)
 8011870:	f009 fd1e 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d006      	beq.n	801188a <pbuf_cat+0x7a>
 801187c:	4b0a      	ldr	r3, [pc, #40]	; (80118a8 <pbuf_cat+0x98>)
 801187e:	f240 3263 	movw	r2, #867	; 0x363
 8011882:	490d      	ldr	r1, [pc, #52]	; (80118b8 <pbuf_cat+0xa8>)
 8011884:	480a      	ldr	r0, [pc, #40]	; (80118b0 <pbuf_cat+0xa0>)
 8011886:	f009 fd13 	bl	801b2b0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	891a      	ldrh	r2, [r3, #8]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	891b      	ldrh	r3, [r3, #8]
 8011892:	4413      	add	r3, r2
 8011894:	b29a      	uxth	r2, r3
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	683a      	ldr	r2, [r7, #0]
 801189e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80118a0:	3710      	adds	r7, #16
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	0801e990 	.word	0x0801e990
 80118ac:	0801eb84 	.word	0x0801eb84
 80118b0:	0801e9f0 	.word	0x0801e9f0
 80118b4:	0801ebbc 	.word	0x0801ebbc
 80118b8:	0801ebec 	.word	0x0801ebec

080118bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b086      	sub	sp, #24
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80118c6:	2300      	movs	r3, #0
 80118c8:	617b      	str	r3, [r7, #20]
 80118ca:	2300      	movs	r3, #0
 80118cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d008      	beq.n	80118e6 <pbuf_copy+0x2a>
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d005      	beq.n	80118e6 <pbuf_copy+0x2a>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	891a      	ldrh	r2, [r3, #8]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	891b      	ldrh	r3, [r3, #8]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d209      	bcs.n	80118fa <pbuf_copy+0x3e>
 80118e6:	4b57      	ldr	r3, [pc, #348]	; (8011a44 <pbuf_copy+0x188>)
 80118e8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80118ec:	4956      	ldr	r1, [pc, #344]	; (8011a48 <pbuf_copy+0x18c>)
 80118ee:	4857      	ldr	r0, [pc, #348]	; (8011a4c <pbuf_copy+0x190>)
 80118f0:	f009 fcde 	bl	801b2b0 <iprintf>
 80118f4:	f06f 030f 	mvn.w	r3, #15
 80118f8:	e09f      	b.n	8011a3a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	895b      	ldrh	r3, [r3, #10]
 80118fe:	461a      	mov	r2, r3
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	1ad2      	subs	r2, r2, r3
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	895b      	ldrh	r3, [r3, #10]
 8011908:	4619      	mov	r1, r3
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	1acb      	subs	r3, r1, r3
 801190e:	429a      	cmp	r2, r3
 8011910:	d306      	bcc.n	8011920 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	895b      	ldrh	r3, [r3, #10]
 8011916:	461a      	mov	r2, r3
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	1ad3      	subs	r3, r2, r3
 801191c:	60fb      	str	r3, [r7, #12]
 801191e:	e005      	b.n	801192c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	895b      	ldrh	r3, [r3, #10]
 8011924:	461a      	mov	r2, r3
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	1ad3      	subs	r3, r2, r3
 801192a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	685a      	ldr	r2, [r3, #4]
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	18d0      	adds	r0, r2, r3
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	685a      	ldr	r2, [r3, #4]
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	4413      	add	r3, r2
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	4619      	mov	r1, r3
 8011940:	f009 fed9 	bl	801b6f6 <memcpy>
    offset_to += len;
 8011944:	697a      	ldr	r2, [r7, #20]
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	4413      	add	r3, r2
 801194a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801194c:	693a      	ldr	r2, [r7, #16]
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	4413      	add	r3, r2
 8011952:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	895b      	ldrh	r3, [r3, #10]
 8011958:	461a      	mov	r2, r3
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	4293      	cmp	r3, r2
 801195e:	d906      	bls.n	801196e <pbuf_copy+0xb2>
 8011960:	4b38      	ldr	r3, [pc, #224]	; (8011a44 <pbuf_copy+0x188>)
 8011962:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011966:	493a      	ldr	r1, [pc, #232]	; (8011a50 <pbuf_copy+0x194>)
 8011968:	4838      	ldr	r0, [pc, #224]	; (8011a4c <pbuf_copy+0x190>)
 801196a:	f009 fca1 	bl	801b2b0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	895b      	ldrh	r3, [r3, #10]
 8011972:	461a      	mov	r2, r3
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	4293      	cmp	r3, r2
 8011978:	d906      	bls.n	8011988 <pbuf_copy+0xcc>
 801197a:	4b32      	ldr	r3, [pc, #200]	; (8011a44 <pbuf_copy+0x188>)
 801197c:	f240 32da 	movw	r2, #986	; 0x3da
 8011980:	4934      	ldr	r1, [pc, #208]	; (8011a54 <pbuf_copy+0x198>)
 8011982:	4832      	ldr	r0, [pc, #200]	; (8011a4c <pbuf_copy+0x190>)
 8011984:	f009 fc94 	bl	801b2b0 <iprintf>
    if (offset_from >= p_from->len) {
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	895b      	ldrh	r3, [r3, #10]
 801198c:	461a      	mov	r2, r3
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	4293      	cmp	r3, r2
 8011992:	d304      	bcc.n	801199e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011994:	2300      	movs	r3, #0
 8011996:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	895b      	ldrh	r3, [r3, #10]
 80119a2:	461a      	mov	r2, r3
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d114      	bne.n	80119d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d10c      	bne.n	80119d4 <pbuf_copy+0x118>
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d009      	beq.n	80119d4 <pbuf_copy+0x118>
 80119c0:	4b20      	ldr	r3, [pc, #128]	; (8011a44 <pbuf_copy+0x188>)
 80119c2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80119c6:	4924      	ldr	r1, [pc, #144]	; (8011a58 <pbuf_copy+0x19c>)
 80119c8:	4820      	ldr	r0, [pc, #128]	; (8011a4c <pbuf_copy+0x190>)
 80119ca:	f009 fc71 	bl	801b2b0 <iprintf>
 80119ce:	f06f 030f 	mvn.w	r3, #15
 80119d2:	e032      	b.n	8011a3a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d013      	beq.n	8011a02 <pbuf_copy+0x146>
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	895a      	ldrh	r2, [r3, #10]
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	891b      	ldrh	r3, [r3, #8]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d10d      	bne.n	8011a02 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d009      	beq.n	8011a02 <pbuf_copy+0x146>
 80119ee:	4b15      	ldr	r3, [pc, #84]	; (8011a44 <pbuf_copy+0x188>)
 80119f0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80119f4:	4919      	ldr	r1, [pc, #100]	; (8011a5c <pbuf_copy+0x1a0>)
 80119f6:	4815      	ldr	r0, [pc, #84]	; (8011a4c <pbuf_copy+0x190>)
 80119f8:	f009 fc5a 	bl	801b2b0 <iprintf>
 80119fc:	f06f 0305 	mvn.w	r3, #5
 8011a00:	e01b      	b.n	8011a3a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d013      	beq.n	8011a30 <pbuf_copy+0x174>
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	895a      	ldrh	r2, [r3, #10]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	891b      	ldrh	r3, [r3, #8]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d10d      	bne.n	8011a30 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d009      	beq.n	8011a30 <pbuf_copy+0x174>
 8011a1c:	4b09      	ldr	r3, [pc, #36]	; (8011a44 <pbuf_copy+0x188>)
 8011a1e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011a22:	490e      	ldr	r1, [pc, #56]	; (8011a5c <pbuf_copy+0x1a0>)
 8011a24:	4809      	ldr	r0, [pc, #36]	; (8011a4c <pbuf_copy+0x190>)
 8011a26:	f009 fc43 	bl	801b2b0 <iprintf>
 8011a2a:	f06f 0305 	mvn.w	r3, #5
 8011a2e:	e004      	b.n	8011a3a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	f47f af61 	bne.w	80118fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011a38:	2300      	movs	r3, #0
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3718      	adds	r7, #24
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop
 8011a44:	0801e990 	.word	0x0801e990
 8011a48:	0801ec38 	.word	0x0801ec38
 8011a4c:	0801e9f0 	.word	0x0801e9f0
 8011a50:	0801ec68 	.word	0x0801ec68
 8011a54:	0801ec80 	.word	0x0801ec80
 8011a58:	0801ec9c 	.word	0x0801ec9c
 8011a5c:	0801ecac 	.word	0x0801ecac

08011a60 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b088      	sub	sp, #32
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	4611      	mov	r1, r2
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	460b      	mov	r3, r1
 8011a70:	80fb      	strh	r3, [r7, #6]
 8011a72:	4613      	mov	r3, r2
 8011a74:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011a76:	2300      	movs	r3, #0
 8011a78:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d108      	bne.n	8011a96 <pbuf_copy_partial+0x36>
 8011a84:	4b2b      	ldr	r3, [pc, #172]	; (8011b34 <pbuf_copy_partial+0xd4>)
 8011a86:	f240 420a 	movw	r2, #1034	; 0x40a
 8011a8a:	492b      	ldr	r1, [pc, #172]	; (8011b38 <pbuf_copy_partial+0xd8>)
 8011a8c:	482b      	ldr	r0, [pc, #172]	; (8011b3c <pbuf_copy_partial+0xdc>)
 8011a8e:	f009 fc0f 	bl	801b2b0 <iprintf>
 8011a92:	2300      	movs	r3, #0
 8011a94:	e04a      	b.n	8011b2c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d108      	bne.n	8011aae <pbuf_copy_partial+0x4e>
 8011a9c:	4b25      	ldr	r3, [pc, #148]	; (8011b34 <pbuf_copy_partial+0xd4>)
 8011a9e:	f240 420b 	movw	r2, #1035	; 0x40b
 8011aa2:	4927      	ldr	r1, [pc, #156]	; (8011b40 <pbuf_copy_partial+0xe0>)
 8011aa4:	4825      	ldr	r0, [pc, #148]	; (8011b3c <pbuf_copy_partial+0xdc>)
 8011aa6:	f009 fc03 	bl	801b2b0 <iprintf>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	e03e      	b.n	8011b2c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	61fb      	str	r3, [r7, #28]
 8011ab2:	e034      	b.n	8011b1e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011ab4:	88bb      	ldrh	r3, [r7, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d00a      	beq.n	8011ad0 <pbuf_copy_partial+0x70>
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	895b      	ldrh	r3, [r3, #10]
 8011abe:	88ba      	ldrh	r2, [r7, #4]
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d305      	bcc.n	8011ad0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	895b      	ldrh	r3, [r3, #10]
 8011ac8:	88ba      	ldrh	r2, [r7, #4]
 8011aca:	1ad3      	subs	r3, r2, r3
 8011acc:	80bb      	strh	r3, [r7, #4]
 8011ace:	e023      	b.n	8011b18 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	895a      	ldrh	r2, [r3, #10]
 8011ad4:	88bb      	ldrh	r3, [r7, #4]
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011ada:	8b3a      	ldrh	r2, [r7, #24]
 8011adc:	88fb      	ldrh	r3, [r7, #6]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d901      	bls.n	8011ae6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011ae2:	88fb      	ldrh	r3, [r7, #6]
 8011ae4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011ae6:	8b7b      	ldrh	r3, [r7, #26]
 8011ae8:	68ba      	ldr	r2, [r7, #8]
 8011aea:	18d0      	adds	r0, r2, r3
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	685a      	ldr	r2, [r3, #4]
 8011af0:	88bb      	ldrh	r3, [r7, #4]
 8011af2:	4413      	add	r3, r2
 8011af4:	8b3a      	ldrh	r2, [r7, #24]
 8011af6:	4619      	mov	r1, r3
 8011af8:	f009 fdfd 	bl	801b6f6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011afc:	8afa      	ldrh	r2, [r7, #22]
 8011afe:	8b3b      	ldrh	r3, [r7, #24]
 8011b00:	4413      	add	r3, r2
 8011b02:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011b04:	8b7a      	ldrh	r2, [r7, #26]
 8011b06:	8b3b      	ldrh	r3, [r7, #24]
 8011b08:	4413      	add	r3, r2
 8011b0a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011b0c:	88fa      	ldrh	r2, [r7, #6]
 8011b0e:	8b3b      	ldrh	r3, [r7, #24]
 8011b10:	1ad3      	subs	r3, r2, r3
 8011b12:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011b14:	2300      	movs	r3, #0
 8011b16:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	61fb      	str	r3, [r7, #28]
 8011b1e:	88fb      	ldrh	r3, [r7, #6]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d002      	beq.n	8011b2a <pbuf_copy_partial+0xca>
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d1c4      	bne.n	8011ab4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011b2a:	8afb      	ldrh	r3, [r7, #22]
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3720      	adds	r7, #32
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	0801e990 	.word	0x0801e990
 8011b38:	0801ecd8 	.word	0x0801ecd8
 8011b3c:	0801e9f0 	.word	0x0801e9f0
 8011b40:	0801ecf8 	.word	0x0801ecf8

08011b44 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b088      	sub	sp, #32
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	4613      	mov	r3, r2
 8011b50:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8011b52:	88fb      	ldrh	r3, [r7, #6]
 8011b54:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8011b56:	2300      	movs	r3, #0
 8011b58:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d109      	bne.n	8011b74 <pbuf_take+0x30>
 8011b60:	4b3a      	ldr	r3, [pc, #232]	; (8011c4c <pbuf_take+0x108>)
 8011b62:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8011b66:	493a      	ldr	r1, [pc, #232]	; (8011c50 <pbuf_take+0x10c>)
 8011b68:	483a      	ldr	r0, [pc, #232]	; (8011c54 <pbuf_take+0x110>)
 8011b6a:	f009 fba1 	bl	801b2b0 <iprintf>
 8011b6e:	f06f 030f 	mvn.w	r3, #15
 8011b72:	e067      	b.n	8011c44 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d109      	bne.n	8011b8e <pbuf_take+0x4a>
 8011b7a:	4b34      	ldr	r3, [pc, #208]	; (8011c4c <pbuf_take+0x108>)
 8011b7c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8011b80:	4935      	ldr	r1, [pc, #212]	; (8011c58 <pbuf_take+0x114>)
 8011b82:	4834      	ldr	r0, [pc, #208]	; (8011c54 <pbuf_take+0x110>)
 8011b84:	f009 fb94 	bl	801b2b0 <iprintf>
 8011b88:	f06f 030f 	mvn.w	r3, #15
 8011b8c:	e05a      	b.n	8011c44 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	891b      	ldrh	r3, [r3, #8]
 8011b92:	88fa      	ldrh	r2, [r7, #6]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d909      	bls.n	8011bac <pbuf_take+0x68>
 8011b98:	4b2c      	ldr	r3, [pc, #176]	; (8011c4c <pbuf_take+0x108>)
 8011b9a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8011b9e:	492f      	ldr	r1, [pc, #188]	; (8011c5c <pbuf_take+0x118>)
 8011ba0:	482c      	ldr	r0, [pc, #176]	; (8011c54 <pbuf_take+0x110>)
 8011ba2:	f009 fb85 	bl	801b2b0 <iprintf>
 8011ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8011baa:	e04b      	b.n	8011c44 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d007      	beq.n	8011bc2 <pbuf_take+0x7e>
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d004      	beq.n	8011bc2 <pbuf_take+0x7e>
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	891b      	ldrh	r3, [r3, #8]
 8011bbc:	88fa      	ldrh	r2, [r7, #6]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d902      	bls.n	8011bc8 <pbuf_take+0x84>
    return ERR_ARG;
 8011bc2:	f06f 030f 	mvn.w	r3, #15
 8011bc6:	e03d      	b.n	8011c44 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	61fb      	str	r3, [r7, #28]
 8011bcc:	e028      	b.n	8011c20 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d106      	bne.n	8011be2 <pbuf_take+0x9e>
 8011bd4:	4b1d      	ldr	r3, [pc, #116]	; (8011c4c <pbuf_take+0x108>)
 8011bd6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011bda:	4921      	ldr	r1, [pc, #132]	; (8011c60 <pbuf_take+0x11c>)
 8011bdc:	481d      	ldr	r0, [pc, #116]	; (8011c54 <pbuf_take+0x110>)
 8011bde:	f009 fb67 	bl	801b2b0 <iprintf>
    buf_copy_len = total_copy_len;
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8011be6:	69fb      	ldr	r3, [r7, #28]
 8011be8:	895b      	ldrh	r3, [r3, #10]
 8011bea:	461a      	mov	r2, r3
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d902      	bls.n	8011bf8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	895b      	ldrh	r3, [r3, #10]
 8011bf6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	6858      	ldr	r0, [r3, #4]
 8011bfc:	68ba      	ldr	r2, [r7, #8]
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	4413      	add	r3, r2
 8011c02:	69ba      	ldr	r2, [r7, #24]
 8011c04:	4619      	mov	r1, r3
 8011c06:	f009 fd76 	bl	801b6f6 <memcpy>
    total_copy_len -= buf_copy_len;
 8011c0a:	697a      	ldr	r2, [r7, #20]
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	1ad3      	subs	r3, r2, r3
 8011c10:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8011c12:	693a      	ldr	r2, [r7, #16]
 8011c14:	69bb      	ldr	r3, [r7, #24]
 8011c16:	4413      	add	r3, r2
 8011c18:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	61fb      	str	r3, [r7, #28]
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d1d3      	bne.n	8011bce <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d103      	bne.n	8011c34 <pbuf_take+0xf0>
 8011c2c:	88fb      	ldrh	r3, [r7, #6]
 8011c2e:	693a      	ldr	r2, [r7, #16]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d006      	beq.n	8011c42 <pbuf_take+0xfe>
 8011c34:	4b05      	ldr	r3, [pc, #20]	; (8011c4c <pbuf_take+0x108>)
 8011c36:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8011c3a:	490a      	ldr	r1, [pc, #40]	; (8011c64 <pbuf_take+0x120>)
 8011c3c:	4805      	ldr	r0, [pc, #20]	; (8011c54 <pbuf_take+0x110>)
 8011c3e:	f009 fb37 	bl	801b2b0 <iprintf>
  return ERR_OK;
 8011c42:	2300      	movs	r3, #0
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3720      	adds	r7, #32
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	0801e990 	.word	0x0801e990
 8011c50:	0801ed68 	.word	0x0801ed68
 8011c54:	0801e9f0 	.word	0x0801e9f0
 8011c58:	0801ed80 	.word	0x0801ed80
 8011c5c:	0801ed9c 	.word	0x0801ed9c
 8011c60:	0801edbc 	.word	0x0801edbc
 8011c64:	0801edd4 	.word	0x0801edd4

08011c68 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b084      	sub	sp, #16
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	4603      	mov	r3, r0
 8011c70:	603a      	str	r2, [r7, #0]
 8011c72:	71fb      	strb	r3, [r7, #7]
 8011c74:	460b      	mov	r3, r1
 8011c76:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	8919      	ldrh	r1, [r3, #8]
 8011c7c:	88ba      	ldrh	r2, [r7, #4]
 8011c7e:	79fb      	ldrb	r3, [r7, #7]
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7ff fa1f 	bl	80110c4 <pbuf_alloc>
 8011c86:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d101      	bne.n	8011c92 <pbuf_clone+0x2a>
    return NULL;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	e011      	b.n	8011cb6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	68f8      	ldr	r0, [r7, #12]
 8011c96:	f7ff fe11 	bl	80118bc <pbuf_copy>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011c9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d006      	beq.n	8011cb4 <pbuf_clone+0x4c>
 8011ca6:	4b06      	ldr	r3, [pc, #24]	; (8011cc0 <pbuf_clone+0x58>)
 8011ca8:	f240 5224 	movw	r2, #1316	; 0x524
 8011cac:	4905      	ldr	r1, [pc, #20]	; (8011cc4 <pbuf_clone+0x5c>)
 8011cae:	4806      	ldr	r0, [pc, #24]	; (8011cc8 <pbuf_clone+0x60>)
 8011cb0:	f009 fafe 	bl	801b2b0 <iprintf>
  return q;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	0801e990 	.word	0x0801e990
 8011cc4:	0801ee04 	.word	0x0801ee04
 8011cc8:	0801e9f0 	.word	0x0801e9f0

08011ccc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011cd0:	f008 fdb2 	bl	801a838 <rand>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	4b01      	ldr	r3, [pc, #4]	; (8011cec <tcp_init+0x20>)
 8011ce6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011ce8:	bf00      	nop
 8011cea:	bd80      	pop	{r7, pc}
 8011cec:	20000178 	.word	0x20000178

08011cf0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	7d1b      	ldrb	r3, [r3, #20]
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d105      	bne.n	8011d0c <tcp_free+0x1c>
 8011d00:	4b06      	ldr	r3, [pc, #24]	; (8011d1c <tcp_free+0x2c>)
 8011d02:	22d4      	movs	r2, #212	; 0xd4
 8011d04:	4906      	ldr	r1, [pc, #24]	; (8011d20 <tcp_free+0x30>)
 8011d06:	4807      	ldr	r0, [pc, #28]	; (8011d24 <tcp_free+0x34>)
 8011d08:	f009 fad2 	bl	801b2b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011d0c:	6879      	ldr	r1, [r7, #4]
 8011d0e:	2001      	movs	r0, #1
 8011d10:	f7fe fe46 	bl	80109a0 <memp_free>
}
 8011d14:	bf00      	nop
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	0801ee90 	.word	0x0801ee90
 8011d20:	0801eec0 	.word	0x0801eec0
 8011d24:	0801eed4 	.word	0x0801eed4

08011d28 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	7d1b      	ldrb	r3, [r3, #20]
 8011d34:	2b01      	cmp	r3, #1
 8011d36:	d105      	bne.n	8011d44 <tcp_free_listen+0x1c>
 8011d38:	4b06      	ldr	r3, [pc, #24]	; (8011d54 <tcp_free_listen+0x2c>)
 8011d3a:	22df      	movs	r2, #223	; 0xdf
 8011d3c:	4906      	ldr	r1, [pc, #24]	; (8011d58 <tcp_free_listen+0x30>)
 8011d3e:	4807      	ldr	r0, [pc, #28]	; (8011d5c <tcp_free_listen+0x34>)
 8011d40:	f009 fab6 	bl	801b2b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011d44:	6879      	ldr	r1, [r7, #4]
 8011d46:	2002      	movs	r0, #2
 8011d48:	f7fe fe2a 	bl	80109a0 <memp_free>
}
 8011d4c:	bf00      	nop
 8011d4e:	3708      	adds	r7, #8
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	0801ee90 	.word	0x0801ee90
 8011d58:	0801eefc 	.word	0x0801eefc
 8011d5c:	0801eed4 	.word	0x0801eed4

08011d60 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011d64:	f001 f802 	bl	8012d6c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011d68:	4b07      	ldr	r3, [pc, #28]	; (8011d88 <tcp_tmr+0x28>)
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	4b05      	ldr	r3, [pc, #20]	; (8011d88 <tcp_tmr+0x28>)
 8011d72:	701a      	strb	r2, [r3, #0]
 8011d74:	4b04      	ldr	r3, [pc, #16]	; (8011d88 <tcp_tmr+0x28>)
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	f003 0301 	and.w	r3, r3, #1
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d001      	beq.n	8011d84 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011d80:	f000 fcb4 	bl	80126ec <tcp_slowtmr>
  }
}
 8011d84:	bf00      	nop
 8011d86:	bd80      	pop	{r7, pc}
 8011d88:	200071d1 	.word	0x200071d1

08011d8c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d105      	bne.n	8011da8 <tcp_remove_listener+0x1c>
 8011d9c:	4b0d      	ldr	r3, [pc, #52]	; (8011dd4 <tcp_remove_listener+0x48>)
 8011d9e:	22ff      	movs	r2, #255	; 0xff
 8011da0:	490d      	ldr	r1, [pc, #52]	; (8011dd8 <tcp_remove_listener+0x4c>)
 8011da2:	480e      	ldr	r0, [pc, #56]	; (8011ddc <tcp_remove_listener+0x50>)
 8011da4:	f009 fa84 	bl	801b2b0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	60fb      	str	r3, [r7, #12]
 8011dac:	e00a      	b.n	8011dc4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011db2:	683a      	ldr	r2, [r7, #0]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d102      	bne.n	8011dbe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	60fb      	str	r3, [r7, #12]
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d1f1      	bne.n	8011dae <tcp_remove_listener+0x22>
    }
  }
}
 8011dca:	bf00      	nop
 8011dcc:	bf00      	nop
 8011dce:	3710      	adds	r7, #16
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}
 8011dd4:	0801ee90 	.word	0x0801ee90
 8011dd8:	0801ef18 	.word	0x0801ef18
 8011ddc:	0801eed4 	.word	0x0801eed4

08011de0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d106      	bne.n	8011dfc <tcp_listen_closed+0x1c>
 8011dee:	4b14      	ldr	r3, [pc, #80]	; (8011e40 <tcp_listen_closed+0x60>)
 8011df0:	f240 1211 	movw	r2, #273	; 0x111
 8011df4:	4913      	ldr	r1, [pc, #76]	; (8011e44 <tcp_listen_closed+0x64>)
 8011df6:	4814      	ldr	r0, [pc, #80]	; (8011e48 <tcp_listen_closed+0x68>)
 8011df8:	f009 fa5a 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	7d1b      	ldrb	r3, [r3, #20]
 8011e00:	2b01      	cmp	r3, #1
 8011e02:	d006      	beq.n	8011e12 <tcp_listen_closed+0x32>
 8011e04:	4b0e      	ldr	r3, [pc, #56]	; (8011e40 <tcp_listen_closed+0x60>)
 8011e06:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011e0a:	4910      	ldr	r1, [pc, #64]	; (8011e4c <tcp_listen_closed+0x6c>)
 8011e0c:	480e      	ldr	r0, [pc, #56]	; (8011e48 <tcp_listen_closed+0x68>)
 8011e0e:	f009 fa4f 	bl	801b2b0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011e12:	2301      	movs	r3, #1
 8011e14:	60fb      	str	r3, [r7, #12]
 8011e16:	e00b      	b.n	8011e30 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011e18:	4a0d      	ldr	r2, [pc, #52]	; (8011e50 <tcp_listen_closed+0x70>)
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	6879      	ldr	r1, [r7, #4]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7ff ffb1 	bl	8011d8c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2b03      	cmp	r3, #3
 8011e34:	d9f0      	bls.n	8011e18 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011e36:	bf00      	nop
 8011e38:	bf00      	nop
 8011e3a:	3710      	adds	r7, #16
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	0801ee90 	.word	0x0801ee90
 8011e44:	0801ef40 	.word	0x0801ef40
 8011e48:	0801eed4 	.word	0x0801eed4
 8011e4c:	0801ef4c 	.word	0x0801ef4c
 8011e50:	08020eb4 	.word	0x08020eb4

08011e54 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011e54:	b5b0      	push	{r4, r5, r7, lr}
 8011e56:	b088      	sub	sp, #32
 8011e58:	af04      	add	r7, sp, #16
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d106      	bne.n	8011e74 <tcp_close_shutdown+0x20>
 8011e66:	4b63      	ldr	r3, [pc, #396]	; (8011ff4 <tcp_close_shutdown+0x1a0>)
 8011e68:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011e6c:	4962      	ldr	r1, [pc, #392]	; (8011ff8 <tcp_close_shutdown+0x1a4>)
 8011e6e:	4863      	ldr	r0, [pc, #396]	; (8011ffc <tcp_close_shutdown+0x1a8>)
 8011e70:	f009 fa1e 	bl	801b2b0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011e74:	78fb      	ldrb	r3, [r7, #3]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d067      	beq.n	8011f4a <tcp_close_shutdown+0xf6>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	7d1b      	ldrb	r3, [r3, #20]
 8011e7e:	2b04      	cmp	r3, #4
 8011e80:	d003      	beq.n	8011e8a <tcp_close_shutdown+0x36>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	7d1b      	ldrb	r3, [r3, #20]
 8011e86:	2b07      	cmp	r3, #7
 8011e88:	d15f      	bne.n	8011f4a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d105      	bne.n	8011e9e <tcp_close_shutdown+0x4a>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e96:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011e9a:	4293      	cmp	r3, r2
 8011e9c:	d055      	beq.n	8011f4a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	8b5b      	ldrh	r3, [r3, #26]
 8011ea2:	f003 0310 	and.w	r3, r3, #16
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d106      	bne.n	8011eb8 <tcp_close_shutdown+0x64>
 8011eaa:	4b52      	ldr	r3, [pc, #328]	; (8011ff4 <tcp_close_shutdown+0x1a0>)
 8011eac:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011eb0:	4953      	ldr	r1, [pc, #332]	; (8012000 <tcp_close_shutdown+0x1ac>)
 8011eb2:	4852      	ldr	r0, [pc, #328]	; (8011ffc <tcp_close_shutdown+0x1a8>)
 8011eb4:	f009 f9fc 	bl	801b2b0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011ec0:	687d      	ldr	r5, [r7, #4]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	3304      	adds	r3, #4
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	8ad2      	ldrh	r2, [r2, #22]
 8011eca:	6879      	ldr	r1, [r7, #4]
 8011ecc:	8b09      	ldrh	r1, [r1, #24]
 8011ece:	9102      	str	r1, [sp, #8]
 8011ed0:	9201      	str	r2, [sp, #4]
 8011ed2:	9300      	str	r3, [sp, #0]
 8011ed4:	462b      	mov	r3, r5
 8011ed6:	4622      	mov	r2, r4
 8011ed8:	4601      	mov	r1, r0
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f005 fcfa 	bl	80178d4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f001 fad7 	bl	8013494 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011ee6:	4b47      	ldr	r3, [pc, #284]	; (8012004 <tcp_close_shutdown+0x1b0>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d105      	bne.n	8011efc <tcp_close_shutdown+0xa8>
 8011ef0:	4b44      	ldr	r3, [pc, #272]	; (8012004 <tcp_close_shutdown+0x1b0>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	4a43      	ldr	r2, [pc, #268]	; (8012004 <tcp_close_shutdown+0x1b0>)
 8011ef8:	6013      	str	r3, [r2, #0]
 8011efa:	e013      	b.n	8011f24 <tcp_close_shutdown+0xd0>
 8011efc:	4b41      	ldr	r3, [pc, #260]	; (8012004 <tcp_close_shutdown+0x1b0>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	60fb      	str	r3, [r7, #12]
 8011f02:	e00c      	b.n	8011f1e <tcp_close_shutdown+0xca>
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	687a      	ldr	r2, [r7, #4]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d104      	bne.n	8011f18 <tcp_close_shutdown+0xc4>
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	68da      	ldr	r2, [r3, #12]
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	60da      	str	r2, [r3, #12]
 8011f16:	e005      	b.n	8011f24 <tcp_close_shutdown+0xd0>
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	68db      	ldr	r3, [r3, #12]
 8011f1c:	60fb      	str	r3, [r7, #12]
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d1ef      	bne.n	8011f04 <tcp_close_shutdown+0xb0>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2200      	movs	r2, #0
 8011f28:	60da      	str	r2, [r3, #12]
 8011f2a:	4b37      	ldr	r3, [pc, #220]	; (8012008 <tcp_close_shutdown+0x1b4>)
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011f30:	4b36      	ldr	r3, [pc, #216]	; (801200c <tcp_close_shutdown+0x1b8>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d102      	bne.n	8011f40 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011f3a:	f003 ff6f 	bl	8015e1c <tcp_trigger_input_pcb_close>
 8011f3e:	e002      	b.n	8011f46 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7ff fed5 	bl	8011cf0 <tcp_free>
      }
      return ERR_OK;
 8011f46:	2300      	movs	r3, #0
 8011f48:	e050      	b.n	8011fec <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	7d1b      	ldrb	r3, [r3, #20]
 8011f4e:	2b02      	cmp	r3, #2
 8011f50:	d03b      	beq.n	8011fca <tcp_close_shutdown+0x176>
 8011f52:	2b02      	cmp	r3, #2
 8011f54:	dc44      	bgt.n	8011fe0 <tcp_close_shutdown+0x18c>
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d002      	beq.n	8011f60 <tcp_close_shutdown+0x10c>
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	d02a      	beq.n	8011fb4 <tcp_close_shutdown+0x160>
 8011f5e:	e03f      	b.n	8011fe0 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	8adb      	ldrh	r3, [r3, #22]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d021      	beq.n	8011fac <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011f68:	4b29      	ldr	r3, [pc, #164]	; (8012010 <tcp_close_shutdown+0x1bc>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d105      	bne.n	8011f7e <tcp_close_shutdown+0x12a>
 8011f72:	4b27      	ldr	r3, [pc, #156]	; (8012010 <tcp_close_shutdown+0x1bc>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	68db      	ldr	r3, [r3, #12]
 8011f78:	4a25      	ldr	r2, [pc, #148]	; (8012010 <tcp_close_shutdown+0x1bc>)
 8011f7a:	6013      	str	r3, [r2, #0]
 8011f7c:	e013      	b.n	8011fa6 <tcp_close_shutdown+0x152>
 8011f7e:	4b24      	ldr	r3, [pc, #144]	; (8012010 <tcp_close_shutdown+0x1bc>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	60bb      	str	r3, [r7, #8]
 8011f84:	e00c      	b.n	8011fa0 <tcp_close_shutdown+0x14c>
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	68db      	ldr	r3, [r3, #12]
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d104      	bne.n	8011f9a <tcp_close_shutdown+0x146>
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	68da      	ldr	r2, [r3, #12]
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	60da      	str	r2, [r3, #12]
 8011f98:	e005      	b.n	8011fa6 <tcp_close_shutdown+0x152>
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	68db      	ldr	r3, [r3, #12]
 8011f9e:	60bb      	str	r3, [r7, #8]
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1ef      	bne.n	8011f86 <tcp_close_shutdown+0x132>
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f7ff fe9f 	bl	8011cf0 <tcp_free>
      break;
 8011fb2:	e01a      	b.n	8011fea <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7ff ff13 	bl	8011de0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011fba:	6879      	ldr	r1, [r7, #4]
 8011fbc:	4815      	ldr	r0, [pc, #84]	; (8012014 <tcp_close_shutdown+0x1c0>)
 8011fbe:	f001 fab9 	bl	8013534 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f7ff feb0 	bl	8011d28 <tcp_free_listen>
      break;
 8011fc8:	e00f      	b.n	8011fea <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011fca:	6879      	ldr	r1, [r7, #4]
 8011fcc:	480d      	ldr	r0, [pc, #52]	; (8012004 <tcp_close_shutdown+0x1b0>)
 8011fce:	f001 fab1 	bl	8013534 <tcp_pcb_remove>
 8011fd2:	4b0d      	ldr	r3, [pc, #52]	; (8012008 <tcp_close_shutdown+0x1b4>)
 8011fd4:	2201      	movs	r2, #1
 8011fd6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7ff fe89 	bl	8011cf0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011fde:	e004      	b.n	8011fea <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 f819 	bl	8012018 <tcp_close_shutdown_fin>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	e000      	b.n	8011fec <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011fea:	2300      	movs	r3, #0
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3710      	adds	r7, #16
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8011ff4:	0801ee90 	.word	0x0801ee90
 8011ff8:	0801ef64 	.word	0x0801ef64
 8011ffc:	0801eed4 	.word	0x0801eed4
 8012000:	0801ef84 	.word	0x0801ef84
 8012004:	200071c8 	.word	0x200071c8
 8012008:	200071d0 	.word	0x200071d0
 801200c:	20007208 	.word	0x20007208
 8012010:	200071c0 	.word	0x200071c0
 8012014:	200071c4 	.word	0x200071c4

08012018 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b084      	sub	sp, #16
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d106      	bne.n	8012034 <tcp_close_shutdown_fin+0x1c>
 8012026:	4b2e      	ldr	r3, [pc, #184]	; (80120e0 <tcp_close_shutdown_fin+0xc8>)
 8012028:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801202c:	492d      	ldr	r1, [pc, #180]	; (80120e4 <tcp_close_shutdown_fin+0xcc>)
 801202e:	482e      	ldr	r0, [pc, #184]	; (80120e8 <tcp_close_shutdown_fin+0xd0>)
 8012030:	f009 f93e 	bl	801b2b0 <iprintf>

  switch (pcb->state) {
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	7d1b      	ldrb	r3, [r3, #20]
 8012038:	2b07      	cmp	r3, #7
 801203a:	d020      	beq.n	801207e <tcp_close_shutdown_fin+0x66>
 801203c:	2b07      	cmp	r3, #7
 801203e:	dc2b      	bgt.n	8012098 <tcp_close_shutdown_fin+0x80>
 8012040:	2b03      	cmp	r3, #3
 8012042:	d002      	beq.n	801204a <tcp_close_shutdown_fin+0x32>
 8012044:	2b04      	cmp	r3, #4
 8012046:	d00d      	beq.n	8012064 <tcp_close_shutdown_fin+0x4c>
 8012048:	e026      	b.n	8012098 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f004 fd50 	bl	8016af0 <tcp_send_fin>
 8012050:	4603      	mov	r3, r0
 8012052:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d11f      	bne.n	801209c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2205      	movs	r2, #5
 8012060:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012062:	e01b      	b.n	801209c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f004 fd43 	bl	8016af0 <tcp_send_fin>
 801206a:	4603      	mov	r3, r0
 801206c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d114      	bne.n	80120a0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2205      	movs	r2, #5
 801207a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801207c:	e010      	b.n	80120a0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f004 fd36 	bl	8016af0 <tcp_send_fin>
 8012084:	4603      	mov	r3, r0
 8012086:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d109      	bne.n	80120a4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2209      	movs	r2, #9
 8012094:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012096:	e005      	b.n	80120a4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012098:	2300      	movs	r3, #0
 801209a:	e01c      	b.n	80120d6 <tcp_close_shutdown_fin+0xbe>
      break;
 801209c:	bf00      	nop
 801209e:	e002      	b.n	80120a6 <tcp_close_shutdown_fin+0x8e>
      break;
 80120a0:	bf00      	nop
 80120a2:	e000      	b.n	80120a6 <tcp_close_shutdown_fin+0x8e>
      break;
 80120a4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80120a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d103      	bne.n	80120b6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f004 fe5c 	bl	8016d6c <tcp_output>
 80120b4:	e00d      	b.n	80120d2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80120b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120be:	d108      	bne.n	80120d2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	8b5b      	ldrh	r3, [r3, #26]
 80120c4:	f043 0308 	orr.w	r3, r3, #8
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80120ce:	2300      	movs	r3, #0
 80120d0:	e001      	b.n	80120d6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80120d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3710      	adds	r7, #16
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	0801ee90 	.word	0x0801ee90
 80120e4:	0801ef40 	.word	0x0801ef40
 80120e8:	0801eed4 	.word	0x0801eed4

080120ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d109      	bne.n	801210e <tcp_close+0x22>
 80120fa:	4b0f      	ldr	r3, [pc, #60]	; (8012138 <tcp_close+0x4c>)
 80120fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012100:	490e      	ldr	r1, [pc, #56]	; (801213c <tcp_close+0x50>)
 8012102:	480f      	ldr	r0, [pc, #60]	; (8012140 <tcp_close+0x54>)
 8012104:	f009 f8d4 	bl	801b2b0 <iprintf>
 8012108:	f06f 030f 	mvn.w	r3, #15
 801210c:	e00f      	b.n	801212e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	7d1b      	ldrb	r3, [r3, #20]
 8012112:	2b01      	cmp	r3, #1
 8012114:	d006      	beq.n	8012124 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	8b5b      	ldrh	r3, [r3, #26]
 801211a:	f043 0310 	orr.w	r3, r3, #16
 801211e:	b29a      	uxth	r2, r3
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012124:	2101      	movs	r1, #1
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f7ff fe94 	bl	8011e54 <tcp_close_shutdown>
 801212c:	4603      	mov	r3, r0
}
 801212e:	4618      	mov	r0, r3
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	0801ee90 	.word	0x0801ee90
 801213c:	0801efa0 	.word	0x0801efa0
 8012140:	0801eed4 	.word	0x0801eed4

08012144 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b08e      	sub	sp, #56	; 0x38
 8012148:	af04      	add	r7, sp, #16
 801214a:	6078      	str	r0, [r7, #4]
 801214c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d107      	bne.n	8012164 <tcp_abandon+0x20>
 8012154:	4b52      	ldr	r3, [pc, #328]	; (80122a0 <tcp_abandon+0x15c>)
 8012156:	f240 223d 	movw	r2, #573	; 0x23d
 801215a:	4952      	ldr	r1, [pc, #328]	; (80122a4 <tcp_abandon+0x160>)
 801215c:	4852      	ldr	r0, [pc, #328]	; (80122a8 <tcp_abandon+0x164>)
 801215e:	f009 f8a7 	bl	801b2b0 <iprintf>
 8012162:	e099      	b.n	8012298 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	7d1b      	ldrb	r3, [r3, #20]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d106      	bne.n	801217a <tcp_abandon+0x36>
 801216c:	4b4c      	ldr	r3, [pc, #304]	; (80122a0 <tcp_abandon+0x15c>)
 801216e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012172:	494e      	ldr	r1, [pc, #312]	; (80122ac <tcp_abandon+0x168>)
 8012174:	484c      	ldr	r0, [pc, #304]	; (80122a8 <tcp_abandon+0x164>)
 8012176:	f009 f89b 	bl	801b2b0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	7d1b      	ldrb	r3, [r3, #20]
 801217e:	2b0a      	cmp	r3, #10
 8012180:	d107      	bne.n	8012192 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012182:	6879      	ldr	r1, [r7, #4]
 8012184:	484a      	ldr	r0, [pc, #296]	; (80122b0 <tcp_abandon+0x16c>)
 8012186:	f001 f9d5 	bl	8013534 <tcp_pcb_remove>
    tcp_free(pcb);
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f7ff fdb0 	bl	8011cf0 <tcp_free>
 8012190:	e082      	b.n	8012298 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012192:	2300      	movs	r3, #0
 8012194:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012196:	2300      	movs	r3, #0
 8012198:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801219e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121ac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	691b      	ldr	r3, [r3, #16]
 80121b2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	7d1b      	ldrb	r3, [r3, #20]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d126      	bne.n	801220a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	8adb      	ldrh	r3, [r3, #22]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d02e      	beq.n	8012222 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80121c4:	4b3b      	ldr	r3, [pc, #236]	; (80122b4 <tcp_abandon+0x170>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d105      	bne.n	80121da <tcp_abandon+0x96>
 80121ce:	4b39      	ldr	r3, [pc, #228]	; (80122b4 <tcp_abandon+0x170>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	68db      	ldr	r3, [r3, #12]
 80121d4:	4a37      	ldr	r2, [pc, #220]	; (80122b4 <tcp_abandon+0x170>)
 80121d6:	6013      	str	r3, [r2, #0]
 80121d8:	e013      	b.n	8012202 <tcp_abandon+0xbe>
 80121da:	4b36      	ldr	r3, [pc, #216]	; (80122b4 <tcp_abandon+0x170>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	61fb      	str	r3, [r7, #28]
 80121e0:	e00c      	b.n	80121fc <tcp_abandon+0xb8>
 80121e2:	69fb      	ldr	r3, [r7, #28]
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d104      	bne.n	80121f6 <tcp_abandon+0xb2>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	68da      	ldr	r2, [r3, #12]
 80121f0:	69fb      	ldr	r3, [r7, #28]
 80121f2:	60da      	str	r2, [r3, #12]
 80121f4:	e005      	b.n	8012202 <tcp_abandon+0xbe>
 80121f6:	69fb      	ldr	r3, [r7, #28]
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	61fb      	str	r3, [r7, #28]
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d1ef      	bne.n	80121e2 <tcp_abandon+0x9e>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2200      	movs	r2, #0
 8012206:	60da      	str	r2, [r3, #12]
 8012208:	e00b      	b.n	8012222 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	8adb      	ldrh	r3, [r3, #22]
 8012212:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012214:	6879      	ldr	r1, [r7, #4]
 8012216:	4828      	ldr	r0, [pc, #160]	; (80122b8 <tcp_abandon+0x174>)
 8012218:	f001 f98c 	bl	8013534 <tcp_pcb_remove>
 801221c:	4b27      	ldr	r3, [pc, #156]	; (80122bc <tcp_abandon+0x178>)
 801221e:	2201      	movs	r2, #1
 8012220:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012226:	2b00      	cmp	r3, #0
 8012228:	d004      	beq.n	8012234 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801222e:	4618      	mov	r0, r3
 8012230:	f000 fe7e 	bl	8012f30 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012238:	2b00      	cmp	r3, #0
 801223a:	d004      	beq.n	8012246 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012240:	4618      	mov	r0, r3
 8012242:	f000 fe75 	bl	8012f30 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801224a:	2b00      	cmp	r3, #0
 801224c:	d004      	beq.n	8012258 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012252:	4618      	mov	r0, r3
 8012254:	f000 fe6c 	bl	8012f30 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225a:	2b00      	cmp	r3, #0
 801225c:	d00e      	beq.n	801227c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801225e:	6879      	ldr	r1, [r7, #4]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	3304      	adds	r3, #4
 8012264:	687a      	ldr	r2, [r7, #4]
 8012266:	8b12      	ldrh	r2, [r2, #24]
 8012268:	9202      	str	r2, [sp, #8]
 801226a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801226c:	9201      	str	r2, [sp, #4]
 801226e:	9300      	str	r3, [sp, #0]
 8012270:	460b      	mov	r3, r1
 8012272:	697a      	ldr	r2, [r7, #20]
 8012274:	69b9      	ldr	r1, [r7, #24]
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f005 fb2c 	bl	80178d4 <tcp_rst>
    }
    last_state = pcb->state;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	7d1b      	ldrb	r3, [r3, #20]
 8012280:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f7ff fd34 	bl	8011cf0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d004      	beq.n	8012298 <tcp_abandon+0x154>
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	f06f 010c 	mvn.w	r1, #12
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	4798      	blx	r3
  }
}
 8012298:	3728      	adds	r7, #40	; 0x28
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	0801ee90 	.word	0x0801ee90
 80122a4:	0801efd4 	.word	0x0801efd4
 80122a8:	0801eed4 	.word	0x0801eed4
 80122ac:	0801eff0 	.word	0x0801eff0
 80122b0:	200071cc 	.word	0x200071cc
 80122b4:	200071c0 	.word	0x200071c0
 80122b8:	200071c8 	.word	0x200071c8
 80122bc:	200071d0 	.word	0x200071d0

080122c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80122c8:	2101      	movs	r1, #1
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7ff ff3a 	bl	8012144 <tcp_abandon>
}
 80122d0:	bf00      	nop
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}

080122d8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b084      	sub	sp, #16
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d106      	bne.n	80122f4 <tcp_update_rcv_ann_wnd+0x1c>
 80122e6:	4b25      	ldr	r3, [pc, #148]	; (801237c <tcp_update_rcv_ann_wnd+0xa4>)
 80122e8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80122ec:	4924      	ldr	r1, [pc, #144]	; (8012380 <tcp_update_rcv_ann_wnd+0xa8>)
 80122ee:	4825      	ldr	r0, [pc, #148]	; (8012384 <tcp_update_rcv_ann_wnd+0xac>)
 80122f0:	f008 ffde 	bl	801b2b0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122f8:	687a      	ldr	r2, [r7, #4]
 80122fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80122fc:	4413      	add	r3, r2
 80122fe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012308:	f640 3168 	movw	r1, #2920	; 0xb68
 801230c:	428a      	cmp	r2, r1
 801230e:	bf28      	it	cs
 8012310:	460a      	movcs	r2, r1
 8012312:	b292      	uxth	r2, r2
 8012314:	4413      	add	r3, r2
 8012316:	68fa      	ldr	r2, [r7, #12]
 8012318:	1ad3      	subs	r3, r2, r3
 801231a:	2b00      	cmp	r3, #0
 801231c:	db08      	blt.n	8012330 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801232a:	68fa      	ldr	r2, [r7, #12]
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	e020      	b.n	8012372 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012338:	1ad3      	subs	r3, r2, r3
 801233a:	2b00      	cmp	r3, #0
 801233c:	dd03      	ble.n	8012346 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2200      	movs	r2, #0
 8012342:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012344:	e014      	b.n	8012370 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801234e:	1ad3      	subs	r3, r2, r3
 8012350:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012358:	d306      	bcc.n	8012368 <tcp_update_rcv_ann_wnd+0x90>
 801235a:	4b08      	ldr	r3, [pc, #32]	; (801237c <tcp_update_rcv_ann_wnd+0xa4>)
 801235c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012360:	4909      	ldr	r1, [pc, #36]	; (8012388 <tcp_update_rcv_ann_wnd+0xb0>)
 8012362:	4808      	ldr	r0, [pc, #32]	; (8012384 <tcp_update_rcv_ann_wnd+0xac>)
 8012364:	f008 ffa4 	bl	801b2b0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	b29a      	uxth	r2, r3
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012370:	2300      	movs	r3, #0
  }
}
 8012372:	4618      	mov	r0, r3
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	0801ee90 	.word	0x0801ee90
 8012380:	0801f0ec 	.word	0x0801f0ec
 8012384:	0801eed4 	.word	0x0801eed4
 8012388:	0801f110 	.word	0x0801f110

0801238c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	460b      	mov	r3, r1
 8012396:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d107      	bne.n	80123ae <tcp_recved+0x22>
 801239e:	4b20      	ldr	r3, [pc, #128]	; (8012420 <tcp_recved+0x94>)
 80123a0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80123a4:	491f      	ldr	r1, [pc, #124]	; (8012424 <tcp_recved+0x98>)
 80123a6:	4820      	ldr	r0, [pc, #128]	; (8012428 <tcp_recved+0x9c>)
 80123a8:	f008 ff82 	bl	801b2b0 <iprintf>
 80123ac:	e034      	b.n	8012418 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	7d1b      	ldrb	r3, [r3, #20]
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d106      	bne.n	80123c4 <tcp_recved+0x38>
 80123b6:	4b1a      	ldr	r3, [pc, #104]	; (8012420 <tcp_recved+0x94>)
 80123b8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80123bc:	491b      	ldr	r1, [pc, #108]	; (801242c <tcp_recved+0xa0>)
 80123be:	481a      	ldr	r0, [pc, #104]	; (8012428 <tcp_recved+0x9c>)
 80123c0:	f008 ff76 	bl	801b2b0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123c8:	887b      	ldrh	r3, [r7, #2]
 80123ca:	4413      	add	r3, r2
 80123cc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80123ce:	89fb      	ldrh	r3, [r7, #14]
 80123d0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80123d4:	4293      	cmp	r3, r2
 80123d6:	d804      	bhi.n	80123e2 <tcp_recved+0x56>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123dc:	89fa      	ldrh	r2, [r7, #14]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d204      	bcs.n	80123ec <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80123e8:	851a      	strh	r2, [r3, #40]	; 0x28
 80123ea:	e002      	b.n	80123f2 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	89fa      	ldrh	r2, [r7, #14]
 80123f0:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f7ff ff70 	bl	80122d8 <tcp_update_rcv_ann_wnd>
 80123f8:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012400:	4293      	cmp	r3, r2
 8012402:	d909      	bls.n	8012418 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	8b5b      	ldrh	r3, [r3, #26]
 8012408:	f043 0302 	orr.w	r3, r3, #2
 801240c:	b29a      	uxth	r2, r3
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f004 fcaa 	bl	8016d6c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	0801ee90 	.word	0x0801ee90
 8012424:	0801f12c 	.word	0x0801f12c
 8012428:	0801eed4 	.word	0x0801eed4
 801242c:	0801f144 	.word	0x0801f144

08012430 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012436:	2300      	movs	r3, #0
 8012438:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801243a:	4b1e      	ldr	r3, [pc, #120]	; (80124b4 <tcp_new_port+0x84>)
 801243c:	881b      	ldrh	r3, [r3, #0]
 801243e:	3301      	adds	r3, #1
 8012440:	b29a      	uxth	r2, r3
 8012442:	4b1c      	ldr	r3, [pc, #112]	; (80124b4 <tcp_new_port+0x84>)
 8012444:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012446:	4b1b      	ldr	r3, [pc, #108]	; (80124b4 <tcp_new_port+0x84>)
 8012448:	881b      	ldrh	r3, [r3, #0]
 801244a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801244e:	4293      	cmp	r3, r2
 8012450:	d103      	bne.n	801245a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012452:	4b18      	ldr	r3, [pc, #96]	; (80124b4 <tcp_new_port+0x84>)
 8012454:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012458:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801245a:	2300      	movs	r3, #0
 801245c:	71fb      	strb	r3, [r7, #7]
 801245e:	e01e      	b.n	801249e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012460:	79fb      	ldrb	r3, [r7, #7]
 8012462:	4a15      	ldr	r2, [pc, #84]	; (80124b8 <tcp_new_port+0x88>)
 8012464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	603b      	str	r3, [r7, #0]
 801246c:	e011      	b.n	8012492 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	8ada      	ldrh	r2, [r3, #22]
 8012472:	4b10      	ldr	r3, [pc, #64]	; (80124b4 <tcp_new_port+0x84>)
 8012474:	881b      	ldrh	r3, [r3, #0]
 8012476:	429a      	cmp	r2, r3
 8012478:	d108      	bne.n	801248c <tcp_new_port+0x5c>
        n++;
 801247a:	88bb      	ldrh	r3, [r7, #4]
 801247c:	3301      	adds	r3, #1
 801247e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012480:	88bb      	ldrh	r3, [r7, #4]
 8012482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012486:	d3d8      	bcc.n	801243a <tcp_new_port+0xa>
          return 0;
 8012488:	2300      	movs	r3, #0
 801248a:	e00d      	b.n	80124a8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	68db      	ldr	r3, [r3, #12]
 8012490:	603b      	str	r3, [r7, #0]
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1ea      	bne.n	801246e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012498:	79fb      	ldrb	r3, [r7, #7]
 801249a:	3301      	adds	r3, #1
 801249c:	71fb      	strb	r3, [r7, #7]
 801249e:	79fb      	ldrb	r3, [r7, #7]
 80124a0:	2b03      	cmp	r3, #3
 80124a2:	d9dd      	bls.n	8012460 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80124a4:	4b03      	ldr	r3, [pc, #12]	; (80124b4 <tcp_new_port+0x84>)
 80124a6:	881b      	ldrh	r3, [r3, #0]
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	370c      	adds	r7, #12
 80124ac:	46bd      	mov	sp, r7
 80124ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b2:	4770      	bx	lr
 80124b4:	20000178 	.word	0x20000178
 80124b8:	08020eb4 	.word	0x08020eb4

080124bc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b08a      	sub	sp, #40	; 0x28
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	60f8      	str	r0, [r7, #12]
 80124c4:	60b9      	str	r1, [r7, #8]
 80124c6:	603b      	str	r3, [r7, #0]
 80124c8:	4613      	mov	r3, r2
 80124ca:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80124cc:	2300      	movs	r3, #0
 80124ce:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d109      	bne.n	80124ea <tcp_connect+0x2e>
 80124d6:	4b7d      	ldr	r3, [pc, #500]	; (80126cc <tcp_connect+0x210>)
 80124d8:	f240 4235 	movw	r2, #1077	; 0x435
 80124dc:	497c      	ldr	r1, [pc, #496]	; (80126d0 <tcp_connect+0x214>)
 80124de:	487d      	ldr	r0, [pc, #500]	; (80126d4 <tcp_connect+0x218>)
 80124e0:	f008 fee6 	bl	801b2b0 <iprintf>
 80124e4:	f06f 030f 	mvn.w	r3, #15
 80124e8:	e0ec      	b.n	80126c4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d109      	bne.n	8012504 <tcp_connect+0x48>
 80124f0:	4b76      	ldr	r3, [pc, #472]	; (80126cc <tcp_connect+0x210>)
 80124f2:	f240 4236 	movw	r2, #1078	; 0x436
 80124f6:	4978      	ldr	r1, [pc, #480]	; (80126d8 <tcp_connect+0x21c>)
 80124f8:	4876      	ldr	r0, [pc, #472]	; (80126d4 <tcp_connect+0x218>)
 80124fa:	f008 fed9 	bl	801b2b0 <iprintf>
 80124fe:	f06f 030f 	mvn.w	r3, #15
 8012502:	e0df      	b.n	80126c4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	7d1b      	ldrb	r3, [r3, #20]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d009      	beq.n	8012520 <tcp_connect+0x64>
 801250c:	4b6f      	ldr	r3, [pc, #444]	; (80126cc <tcp_connect+0x210>)
 801250e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8012512:	4972      	ldr	r1, [pc, #456]	; (80126dc <tcp_connect+0x220>)
 8012514:	486f      	ldr	r0, [pc, #444]	; (80126d4 <tcp_connect+0x218>)
 8012516:	f008 fecb 	bl	801b2b0 <iprintf>
 801251a:	f06f 0309 	mvn.w	r3, #9
 801251e:	e0d1      	b.n	80126c4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d002      	beq.n	801252c <tcp_connect+0x70>
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	e000      	b.n	801252e <tcp_connect+0x72>
 801252c:	2300      	movs	r3, #0
 801252e:	68fa      	ldr	r2, [r7, #12]
 8012530:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	88fa      	ldrh	r2, [r7, #6]
 8012536:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	7a1b      	ldrb	r3, [r3, #8]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d006      	beq.n	801254e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	7a1b      	ldrb	r3, [r3, #8]
 8012544:	4618      	mov	r0, r3
 8012546:	f7fe fd41 	bl	8010fcc <netif_get_by_index>
 801254a:	6278      	str	r0, [r7, #36]	; 0x24
 801254c:	e005      	b.n	801255a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	3304      	adds	r3, #4
 8012552:	4618      	mov	r0, r3
 8012554:	f006 ff84 	bl	8019460 <ip4_route>
 8012558:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255c:	2b00      	cmp	r3, #0
 801255e:	d102      	bne.n	8012566 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012560:	f06f 0303 	mvn.w	r3, #3
 8012564:	e0ae      	b.n	80126c4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d003      	beq.n	8012574 <tcp_connect+0xb8>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d111      	bne.n	8012598 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8012574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012576:	2b00      	cmp	r3, #0
 8012578:	d002      	beq.n	8012580 <tcp_connect+0xc4>
 801257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801257c:	3304      	adds	r3, #4
 801257e:	e000      	b.n	8012582 <tcp_connect+0xc6>
 8012580:	2300      	movs	r3, #0
 8012582:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d102      	bne.n	8012590 <tcp_connect+0xd4>
      return ERR_RTE;
 801258a:	f06f 0303 	mvn.w	r3, #3
 801258e:	e099      	b.n	80126c4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012590:	69fb      	ldr	r3, [r7, #28]
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	8adb      	ldrh	r3, [r3, #22]
 801259c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	8adb      	ldrh	r3, [r3, #22]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d10c      	bne.n	80125c0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80125a6:	f7ff ff43 	bl	8012430 <tcp_new_port>
 80125aa:	4603      	mov	r3, r0
 80125ac:	461a      	mov	r2, r3
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	8adb      	ldrh	r3, [r3, #22]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d102      	bne.n	80125c0 <tcp_connect+0x104>
      return ERR_BUF;
 80125ba:	f06f 0301 	mvn.w	r3, #1
 80125be:	e081      	b.n	80126c4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80125c0:	68f8      	ldr	r0, [r7, #12]
 80125c2:	f001 f84b 	bl	801365c <tcp_next_iss>
 80125c6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2200      	movs	r2, #0
 80125cc:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	697a      	ldr	r2, [r7, #20]
 80125d2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	1e5a      	subs	r2, r3, #1
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	1e5a      	subs	r2, r3, #1
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	1e5a      	subs	r2, r3, #1
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80125f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801260a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012614:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	3304      	adds	r3, #4
 801261e:	461a      	mov	r2, r3
 8012620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012622:	f001 f841 	bl	80136a8 <tcp_eff_send_mss_netif>
 8012626:	4603      	mov	r3, r0
 8012628:	461a      	mov	r2, r3
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2201      	movs	r2, #1
 8012632:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	683a      	ldr	r2, [r7, #0]
 801263a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801263e:	2102      	movs	r1, #2
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f004 faa5 	bl	8016b90 <tcp_enqueue_flags>
 8012646:	4603      	mov	r3, r0
 8012648:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801264a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d136      	bne.n	80126c0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	2202      	movs	r2, #2
 8012656:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012658:	8b7b      	ldrh	r3, [r7, #26]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d021      	beq.n	80126a2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801265e:	4b20      	ldr	r3, [pc, #128]	; (80126e0 <tcp_connect+0x224>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	68fa      	ldr	r2, [r7, #12]
 8012664:	429a      	cmp	r2, r3
 8012666:	d105      	bne.n	8012674 <tcp_connect+0x1b8>
 8012668:	4b1d      	ldr	r3, [pc, #116]	; (80126e0 <tcp_connect+0x224>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	68db      	ldr	r3, [r3, #12]
 801266e:	4a1c      	ldr	r2, [pc, #112]	; (80126e0 <tcp_connect+0x224>)
 8012670:	6013      	str	r3, [r2, #0]
 8012672:	e013      	b.n	801269c <tcp_connect+0x1e0>
 8012674:	4b1a      	ldr	r3, [pc, #104]	; (80126e0 <tcp_connect+0x224>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	623b      	str	r3, [r7, #32]
 801267a:	e00c      	b.n	8012696 <tcp_connect+0x1da>
 801267c:	6a3b      	ldr	r3, [r7, #32]
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	429a      	cmp	r2, r3
 8012684:	d104      	bne.n	8012690 <tcp_connect+0x1d4>
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	68da      	ldr	r2, [r3, #12]
 801268a:	6a3b      	ldr	r3, [r7, #32]
 801268c:	60da      	str	r2, [r3, #12]
 801268e:	e005      	b.n	801269c <tcp_connect+0x1e0>
 8012690:	6a3b      	ldr	r3, [r7, #32]
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	623b      	str	r3, [r7, #32]
 8012696:	6a3b      	ldr	r3, [r7, #32]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1ef      	bne.n	801267c <tcp_connect+0x1c0>
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2200      	movs	r2, #0
 80126a0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80126a2:	4b10      	ldr	r3, [pc, #64]	; (80126e4 <tcp_connect+0x228>)
 80126a4:	681a      	ldr	r2, [r3, #0]
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	60da      	str	r2, [r3, #12]
 80126aa:	4a0e      	ldr	r2, [pc, #56]	; (80126e4 <tcp_connect+0x228>)
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	6013      	str	r3, [r2, #0]
 80126b0:	f005 fad2 	bl	8017c58 <tcp_timer_needed>
 80126b4:	4b0c      	ldr	r3, [pc, #48]	; (80126e8 <tcp_connect+0x22c>)
 80126b6:	2201      	movs	r2, #1
 80126b8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80126ba:	68f8      	ldr	r0, [r7, #12]
 80126bc:	f004 fb56 	bl	8016d6c <tcp_output>
  }
  return ret;
 80126c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	3728      	adds	r7, #40	; 0x28
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}
 80126cc:	0801ee90 	.word	0x0801ee90
 80126d0:	0801f16c 	.word	0x0801f16c
 80126d4:	0801eed4 	.word	0x0801eed4
 80126d8:	0801f188 	.word	0x0801f188
 80126dc:	0801f1a4 	.word	0x0801f1a4
 80126e0:	200071c0 	.word	0x200071c0
 80126e4:	200071c8 	.word	0x200071c8
 80126e8:	200071d0 	.word	0x200071d0

080126ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80126ec:	b5b0      	push	{r4, r5, r7, lr}
 80126ee:	b090      	sub	sp, #64	; 0x40
 80126f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80126f2:	2300      	movs	r3, #0
 80126f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80126f8:	4b94      	ldr	r3, [pc, #592]	; (801294c <tcp_slowtmr+0x260>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	3301      	adds	r3, #1
 80126fe:	4a93      	ldr	r2, [pc, #588]	; (801294c <tcp_slowtmr+0x260>)
 8012700:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012702:	4b93      	ldr	r3, [pc, #588]	; (8012950 <tcp_slowtmr+0x264>)
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	3301      	adds	r3, #1
 8012708:	b2da      	uxtb	r2, r3
 801270a:	4b91      	ldr	r3, [pc, #580]	; (8012950 <tcp_slowtmr+0x264>)
 801270c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801270e:	2300      	movs	r3, #0
 8012710:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012712:	4b90      	ldr	r3, [pc, #576]	; (8012954 <tcp_slowtmr+0x268>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012718:	e29d      	b.n	8012c56 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801271c:	7d1b      	ldrb	r3, [r3, #20]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d106      	bne.n	8012730 <tcp_slowtmr+0x44>
 8012722:	4b8d      	ldr	r3, [pc, #564]	; (8012958 <tcp_slowtmr+0x26c>)
 8012724:	f240 42be 	movw	r2, #1214	; 0x4be
 8012728:	498c      	ldr	r1, [pc, #560]	; (801295c <tcp_slowtmr+0x270>)
 801272a:	488d      	ldr	r0, [pc, #564]	; (8012960 <tcp_slowtmr+0x274>)
 801272c:	f008 fdc0 	bl	801b2b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012732:	7d1b      	ldrb	r3, [r3, #20]
 8012734:	2b01      	cmp	r3, #1
 8012736:	d106      	bne.n	8012746 <tcp_slowtmr+0x5a>
 8012738:	4b87      	ldr	r3, [pc, #540]	; (8012958 <tcp_slowtmr+0x26c>)
 801273a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801273e:	4989      	ldr	r1, [pc, #548]	; (8012964 <tcp_slowtmr+0x278>)
 8012740:	4887      	ldr	r0, [pc, #540]	; (8012960 <tcp_slowtmr+0x274>)
 8012742:	f008 fdb5 	bl	801b2b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012748:	7d1b      	ldrb	r3, [r3, #20]
 801274a:	2b0a      	cmp	r3, #10
 801274c:	d106      	bne.n	801275c <tcp_slowtmr+0x70>
 801274e:	4b82      	ldr	r3, [pc, #520]	; (8012958 <tcp_slowtmr+0x26c>)
 8012750:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012754:	4984      	ldr	r1, [pc, #528]	; (8012968 <tcp_slowtmr+0x27c>)
 8012756:	4882      	ldr	r0, [pc, #520]	; (8012960 <tcp_slowtmr+0x274>)
 8012758:	f008 fdaa 	bl	801b2b0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275e:	7f9a      	ldrb	r2, [r3, #30]
 8012760:	4b7b      	ldr	r3, [pc, #492]	; (8012950 <tcp_slowtmr+0x264>)
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	429a      	cmp	r2, r3
 8012766:	d105      	bne.n	8012774 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012772:	e270      	b.n	8012c56 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012774:	4b76      	ldr	r3, [pc, #472]	; (8012950 <tcp_slowtmr+0x264>)
 8012776:	781a      	ldrb	r2, [r3, #0]
 8012778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801277c:	2300      	movs	r3, #0
 801277e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012782:	2300      	movs	r3, #0
 8012784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	7d1b      	ldrb	r3, [r3, #20]
 801278c:	2b02      	cmp	r3, #2
 801278e:	d10a      	bne.n	80127a6 <tcp_slowtmr+0xba>
 8012790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012796:	2b05      	cmp	r3, #5
 8012798:	d905      	bls.n	80127a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801279a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801279e:	3301      	adds	r3, #1
 80127a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80127a4:	e11e      	b.n	80129e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80127a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127ac:	2b0b      	cmp	r3, #11
 80127ae:	d905      	bls.n	80127bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80127b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127b4:	3301      	adds	r3, #1
 80127b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80127ba:	e113      	b.n	80129e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80127bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d075      	beq.n	80128b2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80127c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d006      	beq.n	80127dc <tcp_slowtmr+0xf0>
 80127ce:	4b62      	ldr	r3, [pc, #392]	; (8012958 <tcp_slowtmr+0x26c>)
 80127d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80127d4:	4965      	ldr	r1, [pc, #404]	; (801296c <tcp_slowtmr+0x280>)
 80127d6:	4862      	ldr	r0, [pc, #392]	; (8012960 <tcp_slowtmr+0x274>)
 80127d8:	f008 fd6a 	bl	801b2b0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80127dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d106      	bne.n	80127f2 <tcp_slowtmr+0x106>
 80127e4:	4b5c      	ldr	r3, [pc, #368]	; (8012958 <tcp_slowtmr+0x26c>)
 80127e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80127ea:	4961      	ldr	r1, [pc, #388]	; (8012970 <tcp_slowtmr+0x284>)
 80127ec:	485c      	ldr	r0, [pc, #368]	; (8012960 <tcp_slowtmr+0x274>)
 80127ee:	f008 fd5f 	bl	801b2b0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80127f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80127f8:	2b0b      	cmp	r3, #11
 80127fa:	d905      	bls.n	8012808 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80127fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012800:	3301      	adds	r3, #1
 8012802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012806:	e0ed      	b.n	80129e4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801280e:	3b01      	subs	r3, #1
 8012810:	4a58      	ldr	r2, [pc, #352]	; (8012974 <tcp_slowtmr+0x288>)
 8012812:	5cd3      	ldrb	r3, [r2, r3]
 8012814:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012818:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801281c:	7c7a      	ldrb	r2, [r7, #17]
 801281e:	429a      	cmp	r2, r3
 8012820:	d907      	bls.n	8012832 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012824:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012828:	3301      	adds	r3, #1
 801282a:	b2da      	uxtb	r2, r3
 801282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801282e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012834:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012838:	7c7a      	ldrb	r2, [r7, #17]
 801283a:	429a      	cmp	r2, r3
 801283c:	f200 80d2 	bhi.w	80129e4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012840:	2301      	movs	r3, #1
 8012842:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801284a:	2b00      	cmp	r3, #0
 801284c:	d108      	bne.n	8012860 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801284e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012850:	f005 f934 	bl	8017abc <tcp_zero_window_probe>
 8012854:	4603      	mov	r3, r0
 8012856:	2b00      	cmp	r3, #0
 8012858:	d014      	beq.n	8012884 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801285a:	2300      	movs	r3, #0
 801285c:	623b      	str	r3, [r7, #32]
 801285e:	e011      	b.n	8012884 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012866:	4619      	mov	r1, r3
 8012868:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801286a:	f003 fff9 	bl	8016860 <tcp_split_unsent_seg>
 801286e:	4603      	mov	r3, r0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d107      	bne.n	8012884 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012876:	f004 fa79 	bl	8016d6c <tcp_output>
 801287a:	4603      	mov	r3, r0
 801287c:	2b00      	cmp	r3, #0
 801287e:	d101      	bne.n	8012884 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012880:	2300      	movs	r3, #0
 8012882:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012884:	6a3b      	ldr	r3, [r7, #32]
 8012886:	2b00      	cmp	r3, #0
 8012888:	f000 80ac 	beq.w	80129e4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288e:	2200      	movs	r2, #0
 8012890:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012896:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801289a:	2b06      	cmp	r3, #6
 801289c:	f200 80a2 	bhi.w	80129e4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80128a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80128a6:	3301      	adds	r3, #1
 80128a8:	b2da      	uxtb	r2, r3
 80128aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80128b0:	e098      	b.n	80129e4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80128b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	db0f      	blt.n	80128dc <tcp_slowtmr+0x1f0>
 80128bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80128c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d008      	beq.n	80128dc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80128ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80128d0:	b29b      	uxth	r3, r3
 80128d2:	3301      	adds	r3, #1
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	b21a      	sxth	r2, r3
 80128d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80128dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80128e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80128e8:	429a      	cmp	r2, r3
 80128ea:	db7b      	blt.n	80129e4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80128ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128ee:	f004 fd31 	bl	8017354 <tcp_rexmit_rto_prepare>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d007      	beq.n	8012908 <tcp_slowtmr+0x21c>
 80128f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d171      	bne.n	80129e4 <tcp_slowtmr+0x2f8>
 8012900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012904:	2b00      	cmp	r3, #0
 8012906:	d06d      	beq.n	80129e4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290a:	7d1b      	ldrb	r3, [r3, #20]
 801290c:	2b02      	cmp	r3, #2
 801290e:	d03a      	beq.n	8012986 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012916:	2b0c      	cmp	r3, #12
 8012918:	bf28      	it	cs
 801291a:	230c      	movcs	r3, #12
 801291c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012920:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012924:	10db      	asrs	r3, r3, #3
 8012926:	b21b      	sxth	r3, r3
 8012928:	461a      	mov	r2, r3
 801292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801292c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012930:	4413      	add	r3, r2
 8012932:	7efa      	ldrb	r2, [r7, #27]
 8012934:	4910      	ldr	r1, [pc, #64]	; (8012978 <tcp_slowtmr+0x28c>)
 8012936:	5c8a      	ldrb	r2, [r1, r2]
 8012938:	4093      	lsls	r3, r2
 801293a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801293c:	697b      	ldr	r3, [r7, #20]
 801293e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012942:	4293      	cmp	r3, r2
 8012944:	dc1a      	bgt.n	801297c <tcp_slowtmr+0x290>
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	b21a      	sxth	r2, r3
 801294a:	e019      	b.n	8012980 <tcp_slowtmr+0x294>
 801294c:	200071bc 	.word	0x200071bc
 8012950:	200071d2 	.word	0x200071d2
 8012954:	200071c8 	.word	0x200071c8
 8012958:	0801ee90 	.word	0x0801ee90
 801295c:	0801f1d4 	.word	0x0801f1d4
 8012960:	0801eed4 	.word	0x0801eed4
 8012964:	0801f200 	.word	0x0801f200
 8012968:	0801f22c 	.word	0x0801f22c
 801296c:	0801f25c 	.word	0x0801f25c
 8012970:	0801f290 	.word	0x0801f290
 8012974:	08020eac 	.word	0x08020eac
 8012978:	08020e9c 	.word	0x08020e9c
 801297c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012982:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012988:	2200      	movs	r2, #0
 801298a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012994:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012998:	4293      	cmp	r3, r2
 801299a:	bf28      	it	cs
 801299c:	4613      	movcs	r3, r2
 801299e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80129a0:	8a7b      	ldrh	r3, [r7, #18]
 80129a2:	085b      	lsrs	r3, r3, #1
 80129a4:	b29a      	uxth	r2, r3
 80129a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80129ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80129b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d206      	bcs.n	80129cc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80129be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129c2:	005b      	lsls	r3, r3, #1
 80129c4:	b29a      	uxth	r2, r3
 80129c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80129d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80129d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d8:	2200      	movs	r2, #0
 80129da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80129de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129e0:	f004 fd28 	bl	8017434 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80129e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e6:	7d1b      	ldrb	r3, [r3, #20]
 80129e8:	2b06      	cmp	r3, #6
 80129ea:	d111      	bne.n	8012a10 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80129ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ee:	8b5b      	ldrh	r3, [r3, #26]
 80129f0:	f003 0310 	and.w	r3, r3, #16
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d00b      	beq.n	8012a10 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80129f8:	4b9c      	ldr	r3, [pc, #624]	; (8012c6c <tcp_slowtmr+0x580>)
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fe:	6a1b      	ldr	r3, [r3, #32]
 8012a00:	1ad3      	subs	r3, r2, r3
 8012a02:	2b28      	cmp	r3, #40	; 0x28
 8012a04:	d904      	bls.n	8012a10 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a12:	7a5b      	ldrb	r3, [r3, #9]
 8012a14:	f003 0308 	and.w	r3, r3, #8
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d04a      	beq.n	8012ab2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012a20:	2b04      	cmp	r3, #4
 8012a22:	d003      	beq.n	8012a2c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a26:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012a28:	2b07      	cmp	r3, #7
 8012a2a:	d142      	bne.n	8012ab2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a2c:	4b8f      	ldr	r3, [pc, #572]	; (8012c6c <tcp_slowtmr+0x580>)
 8012a2e:	681a      	ldr	r2, [r3, #0]
 8012a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a32:	6a1b      	ldr	r3, [r3, #32]
 8012a34:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a38:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012a3c:	4b8c      	ldr	r3, [pc, #560]	; (8012c70 <tcp_slowtmr+0x584>)
 8012a3e:	440b      	add	r3, r1
 8012a40:	498c      	ldr	r1, [pc, #560]	; (8012c74 <tcp_slowtmr+0x588>)
 8012a42:	fba1 1303 	umull	r1, r3, r1, r3
 8012a46:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d90a      	bls.n	8012a62 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a50:	3301      	adds	r3, #1
 8012a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012a56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012a60:	e027      	b.n	8012ab2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a62:	4b82      	ldr	r3, [pc, #520]	; (8012c6c <tcp_slowtmr+0x580>)
 8012a64:	681a      	ldr	r2, [r3, #0]
 8012a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a68:	6a1b      	ldr	r3, [r3, #32]
 8012a6a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a74:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012a78:	4618      	mov	r0, r3
 8012a7a:	4b7f      	ldr	r3, [pc, #508]	; (8012c78 <tcp_slowtmr+0x58c>)
 8012a7c:	fb00 f303 	mul.w	r3, r0, r3
 8012a80:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012a82:	497c      	ldr	r1, [pc, #496]	; (8012c74 <tcp_slowtmr+0x588>)
 8012a84:	fba1 1303 	umull	r1, r3, r1, r3
 8012a88:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d911      	bls.n	8012ab2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8012a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a90:	f004 ffd4 	bl	8017a3c <tcp_keepalive>
 8012a94:	4603      	mov	r3, r0
 8012a96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012a9a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d107      	bne.n	8012ab2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8012aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	b2da      	uxtb	r2, r3
 8012aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aae:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d011      	beq.n	8012ade <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012aba:	4b6c      	ldr	r3, [pc, #432]	; (8012c6c <tcp_slowtmr+0x580>)
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac0:	6a1b      	ldr	r3, [r3, #32]
 8012ac2:	1ad2      	subs	r2, r2, r3
 8012ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012aca:	4619      	mov	r1, r3
 8012acc:	460b      	mov	r3, r1
 8012ace:	005b      	lsls	r3, r3, #1
 8012ad0:	440b      	add	r3, r1
 8012ad2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d302      	bcc.n	8012ade <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ada:	f000 fe8f 	bl	80137fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae0:	7d1b      	ldrb	r3, [r3, #20]
 8012ae2:	2b03      	cmp	r3, #3
 8012ae4:	d10b      	bne.n	8012afe <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012ae6:	4b61      	ldr	r3, [pc, #388]	; (8012c6c <tcp_slowtmr+0x580>)
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aec:	6a1b      	ldr	r3, [r3, #32]
 8012aee:	1ad3      	subs	r3, r2, r3
 8012af0:	2b28      	cmp	r3, #40	; 0x28
 8012af2:	d904      	bls.n	8012afe <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012af8:	3301      	adds	r3, #1
 8012afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b00:	7d1b      	ldrb	r3, [r3, #20]
 8012b02:	2b09      	cmp	r3, #9
 8012b04:	d10b      	bne.n	8012b1e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012b06:	4b59      	ldr	r3, [pc, #356]	; (8012c6c <tcp_slowtmr+0x580>)
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0c:	6a1b      	ldr	r3, [r3, #32]
 8012b0e:	1ad3      	subs	r3, r2, r3
 8012b10:	2bf0      	cmp	r3, #240	; 0xf0
 8012b12:	d904      	bls.n	8012b1e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8012b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b18:	3301      	adds	r3, #1
 8012b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d060      	beq.n	8012be8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b2c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b30:	f000 fcb0 	bl	8013494 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d010      	beq.n	8012b5c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012b3a:	4b50      	ldr	r3, [pc, #320]	; (8012c7c <tcp_slowtmr+0x590>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d106      	bne.n	8012b52 <tcp_slowtmr+0x466>
 8012b44:	4b4e      	ldr	r3, [pc, #312]	; (8012c80 <tcp_slowtmr+0x594>)
 8012b46:	f240 526d 	movw	r2, #1389	; 0x56d
 8012b4a:	494e      	ldr	r1, [pc, #312]	; (8012c84 <tcp_slowtmr+0x598>)
 8012b4c:	484e      	ldr	r0, [pc, #312]	; (8012c88 <tcp_slowtmr+0x59c>)
 8012b4e:	f008 fbaf 	bl	801b2b0 <iprintf>
        prev->next = pcb->next;
 8012b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b54:	68da      	ldr	r2, [r3, #12]
 8012b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b58:	60da      	str	r2, [r3, #12]
 8012b5a:	e00f      	b.n	8012b7c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012b5c:	4b47      	ldr	r3, [pc, #284]	; (8012c7c <tcp_slowtmr+0x590>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d006      	beq.n	8012b74 <tcp_slowtmr+0x488>
 8012b66:	4b46      	ldr	r3, [pc, #280]	; (8012c80 <tcp_slowtmr+0x594>)
 8012b68:	f240 5271 	movw	r2, #1393	; 0x571
 8012b6c:	4947      	ldr	r1, [pc, #284]	; (8012c8c <tcp_slowtmr+0x5a0>)
 8012b6e:	4846      	ldr	r0, [pc, #280]	; (8012c88 <tcp_slowtmr+0x59c>)
 8012b70:	f008 fb9e 	bl	801b2b0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	4a40      	ldr	r2, [pc, #256]	; (8012c7c <tcp_slowtmr+0x590>)
 8012b7a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d013      	beq.n	8012bac <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b86:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012b8c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b90:	3304      	adds	r3, #4
 8012b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b94:	8ad2      	ldrh	r2, [r2, #22]
 8012b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b98:	8b09      	ldrh	r1, [r1, #24]
 8012b9a:	9102      	str	r1, [sp, #8]
 8012b9c:	9201      	str	r2, [sp, #4]
 8012b9e:	9300      	str	r3, [sp, #0]
 8012ba0:	462b      	mov	r3, r5
 8012ba2:	4622      	mov	r2, r4
 8012ba4:	4601      	mov	r1, r0
 8012ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ba8:	f004 fe94 	bl	80178d4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bae:	691b      	ldr	r3, [r3, #16]
 8012bb0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb4:	7d1b      	ldrb	r3, [r3, #20]
 8012bb6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bbe:	68db      	ldr	r3, [r3, #12]
 8012bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012bc2:	6838      	ldr	r0, [r7, #0]
 8012bc4:	f7ff f894 	bl	8011cf0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012bc8:	4b31      	ldr	r3, [pc, #196]	; (8012c90 <tcp_slowtmr+0x5a4>)
 8012bca:	2200      	movs	r2, #0
 8012bcc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d004      	beq.n	8012bde <tcp_slowtmr+0x4f2>
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f06f 010c 	mvn.w	r1, #12
 8012bda:	68b8      	ldr	r0, [r7, #8]
 8012bdc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012bde:	4b2c      	ldr	r3, [pc, #176]	; (8012c90 <tcp_slowtmr+0x5a4>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d037      	beq.n	8012c56 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012be6:	e592      	b.n	801270e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bee:	68db      	ldr	r3, [r3, #12]
 8012bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf4:	7f1b      	ldrb	r3, [r3, #28]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	b2da      	uxtb	r2, r3
 8012bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bfc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c00:	7f1a      	ldrb	r2, [r3, #28]
 8012c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c04:	7f5b      	ldrb	r3, [r3, #29]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d325      	bcc.n	8012c56 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012c10:	4b1f      	ldr	r3, [pc, #124]	; (8012c90 <tcp_slowtmr+0x5a4>)
 8012c12:	2200      	movs	r2, #0
 8012c14:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d00b      	beq.n	8012c38 <tcp_slowtmr+0x54c>
 8012c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c28:	6912      	ldr	r2, [r2, #16]
 8012c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012c2c:	4610      	mov	r0, r2
 8012c2e:	4798      	blx	r3
 8012c30:	4603      	mov	r3, r0
 8012c32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012c36:	e002      	b.n	8012c3e <tcp_slowtmr+0x552>
 8012c38:	2300      	movs	r3, #0
 8012c3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012c3e:	4b14      	ldr	r3, [pc, #80]	; (8012c90 <tcp_slowtmr+0x5a4>)
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d000      	beq.n	8012c48 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012c46:	e562      	b.n	801270e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012c48:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d102      	bne.n	8012c56 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c52:	f004 f88b 	bl	8016d6c <tcp_output>
  while (pcb != NULL) {
 8012c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	f47f ad5e 	bne.w	801271a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012c62:	4b0c      	ldr	r3, [pc, #48]	; (8012c94 <tcp_slowtmr+0x5a8>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012c68:	e069      	b.n	8012d3e <tcp_slowtmr+0x652>
 8012c6a:	bf00      	nop
 8012c6c:	200071bc 	.word	0x200071bc
 8012c70:	000a4cb8 	.word	0x000a4cb8
 8012c74:	10624dd3 	.word	0x10624dd3
 8012c78:	000124f8 	.word	0x000124f8
 8012c7c:	200071c8 	.word	0x200071c8
 8012c80:	0801ee90 	.word	0x0801ee90
 8012c84:	0801f2c8 	.word	0x0801f2c8
 8012c88:	0801eed4 	.word	0x0801eed4
 8012c8c:	0801f2f4 	.word	0x0801f2f4
 8012c90:	200071d0 	.word	0x200071d0
 8012c94:	200071cc 	.word	0x200071cc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9a:	7d1b      	ldrb	r3, [r3, #20]
 8012c9c:	2b0a      	cmp	r3, #10
 8012c9e:	d006      	beq.n	8012cae <tcp_slowtmr+0x5c2>
 8012ca0:	4b2b      	ldr	r3, [pc, #172]	; (8012d50 <tcp_slowtmr+0x664>)
 8012ca2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012ca6:	492b      	ldr	r1, [pc, #172]	; (8012d54 <tcp_slowtmr+0x668>)
 8012ca8:	482b      	ldr	r0, [pc, #172]	; (8012d58 <tcp_slowtmr+0x66c>)
 8012caa:	f008 fb01 	bl	801b2b0 <iprintf>
    pcb_remove = 0;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012cb4:	4b29      	ldr	r3, [pc, #164]	; (8012d5c <tcp_slowtmr+0x670>)
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	6a1b      	ldr	r3, [r3, #32]
 8012cbc:	1ad3      	subs	r3, r2, r3
 8012cbe:	2bf0      	cmp	r3, #240	; 0xf0
 8012cc0:	d904      	bls.n	8012ccc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d02f      	beq.n	8012d34 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012cd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cd6:	f000 fbdd 	bl	8013494 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d010      	beq.n	8012d02 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012ce0:	4b1f      	ldr	r3, [pc, #124]	; (8012d60 <tcp_slowtmr+0x674>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d106      	bne.n	8012cf8 <tcp_slowtmr+0x60c>
 8012cea:	4b19      	ldr	r3, [pc, #100]	; (8012d50 <tcp_slowtmr+0x664>)
 8012cec:	f240 52af 	movw	r2, #1455	; 0x5af
 8012cf0:	491c      	ldr	r1, [pc, #112]	; (8012d64 <tcp_slowtmr+0x678>)
 8012cf2:	4819      	ldr	r0, [pc, #100]	; (8012d58 <tcp_slowtmr+0x66c>)
 8012cf4:	f008 fadc 	bl	801b2b0 <iprintf>
        prev->next = pcb->next;
 8012cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfa:	68da      	ldr	r2, [r3, #12]
 8012cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfe:	60da      	str	r2, [r3, #12]
 8012d00:	e00f      	b.n	8012d22 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012d02:	4b17      	ldr	r3, [pc, #92]	; (8012d60 <tcp_slowtmr+0x674>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d006      	beq.n	8012d1a <tcp_slowtmr+0x62e>
 8012d0c:	4b10      	ldr	r3, [pc, #64]	; (8012d50 <tcp_slowtmr+0x664>)
 8012d0e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012d12:	4915      	ldr	r1, [pc, #84]	; (8012d68 <tcp_slowtmr+0x67c>)
 8012d14:	4810      	ldr	r0, [pc, #64]	; (8012d58 <tcp_slowtmr+0x66c>)
 8012d16:	f008 facb 	bl	801b2b0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	4a10      	ldr	r2, [pc, #64]	; (8012d60 <tcp_slowtmr+0x674>)
 8012d20:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d24:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d28:	68db      	ldr	r3, [r3, #12]
 8012d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012d2c:	69f8      	ldr	r0, [r7, #28]
 8012d2e:	f7fe ffdf 	bl	8011cf0 <tcp_free>
 8012d32:	e004      	b.n	8012d3e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d1a9      	bne.n	8012c98 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012d44:	bf00      	nop
 8012d46:	bf00      	nop
 8012d48:	3730      	adds	r7, #48	; 0x30
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	0801ee90 	.word	0x0801ee90
 8012d54:	0801f320 	.word	0x0801f320
 8012d58:	0801eed4 	.word	0x0801eed4
 8012d5c:	200071bc 	.word	0x200071bc
 8012d60:	200071cc 	.word	0x200071cc
 8012d64:	0801f350 	.word	0x0801f350
 8012d68:	0801f378 	.word	0x0801f378

08012d6c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b082      	sub	sp, #8
 8012d70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012d72:	4b2d      	ldr	r3, [pc, #180]	; (8012e28 <tcp_fasttmr+0xbc>)
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	3301      	adds	r3, #1
 8012d78:	b2da      	uxtb	r2, r3
 8012d7a:	4b2b      	ldr	r3, [pc, #172]	; (8012e28 <tcp_fasttmr+0xbc>)
 8012d7c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012d7e:	4b2b      	ldr	r3, [pc, #172]	; (8012e2c <tcp_fasttmr+0xc0>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012d84:	e048      	b.n	8012e18 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	7f9a      	ldrb	r2, [r3, #30]
 8012d8a:	4b27      	ldr	r3, [pc, #156]	; (8012e28 <tcp_fasttmr+0xbc>)
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d03f      	beq.n	8012e12 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012d92:	4b25      	ldr	r3, [pc, #148]	; (8012e28 <tcp_fasttmr+0xbc>)
 8012d94:	781a      	ldrb	r2, [r3, #0]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	8b5b      	ldrh	r3, [r3, #26]
 8012d9e:	f003 0301 	and.w	r3, r3, #1
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d010      	beq.n	8012dc8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	8b5b      	ldrh	r3, [r3, #26]
 8012daa:	f043 0302 	orr.w	r3, r3, #2
 8012dae:	b29a      	uxth	r2, r3
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f003 ffd9 	bl	8016d6c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	8b5b      	ldrh	r3, [r3, #26]
 8012dbe:	f023 0303 	bic.w	r3, r3, #3
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	8b5b      	ldrh	r3, [r3, #26]
 8012dcc:	f003 0308 	and.w	r3, r3, #8
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d009      	beq.n	8012de8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	8b5b      	ldrh	r3, [r3, #26]
 8012dd8:	f023 0308 	bic.w	r3, r3, #8
 8012ddc:	b29a      	uxth	r2, r3
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f7ff f918 	bl	8012018 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d00a      	beq.n	8012e0c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012df6:	4b0e      	ldr	r3, [pc, #56]	; (8012e30 <tcp_fasttmr+0xc4>)
 8012df8:	2200      	movs	r2, #0
 8012dfa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f000 f819 	bl	8012e34 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012e02:	4b0b      	ldr	r3, [pc, #44]	; (8012e30 <tcp_fasttmr+0xc4>)
 8012e04:	781b      	ldrb	r3, [r3, #0]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d000      	beq.n	8012e0c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012e0a:	e7b8      	b.n	8012d7e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	607b      	str	r3, [r7, #4]
 8012e10:	e002      	b.n	8012e18 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	68db      	ldr	r3, [r3, #12]
 8012e16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d1b3      	bne.n	8012d86 <tcp_fasttmr+0x1a>
    }
  }
}
 8012e1e:	bf00      	nop
 8012e20:	bf00      	nop
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	200071d2 	.word	0x200071d2
 8012e2c:	200071c8 	.word	0x200071c8
 8012e30:	200071d0 	.word	0x200071d0

08012e34 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012e34:	b590      	push	{r4, r7, lr}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d109      	bne.n	8012e56 <tcp_process_refused_data+0x22>
 8012e42:	4b38      	ldr	r3, [pc, #224]	; (8012f24 <tcp_process_refused_data+0xf0>)
 8012e44:	f240 6209 	movw	r2, #1545	; 0x609
 8012e48:	4937      	ldr	r1, [pc, #220]	; (8012f28 <tcp_process_refused_data+0xf4>)
 8012e4a:	4838      	ldr	r0, [pc, #224]	; (8012f2c <tcp_process_refused_data+0xf8>)
 8012e4c:	f008 fa30 	bl	801b2b0 <iprintf>
 8012e50:	f06f 030f 	mvn.w	r3, #15
 8012e54:	e061      	b.n	8012f1a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e5a:	7b5b      	ldrb	r3, [r3, #13]
 8012e5c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e62:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2200      	movs	r2, #0
 8012e68:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00b      	beq.n	8012e8c <tcp_process_refused_data+0x58>
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6918      	ldr	r0, [r3, #16]
 8012e7e:	2300      	movs	r3, #0
 8012e80:	68ba      	ldr	r2, [r7, #8]
 8012e82:	6879      	ldr	r1, [r7, #4]
 8012e84:	47a0      	blx	r4
 8012e86:	4603      	mov	r3, r0
 8012e88:	73fb      	strb	r3, [r7, #15]
 8012e8a:	e007      	b.n	8012e9c <tcp_process_refused_data+0x68>
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	68ba      	ldr	r2, [r7, #8]
 8012e90:	6879      	ldr	r1, [r7, #4]
 8012e92:	2000      	movs	r0, #0
 8012e94:	f000 f8a6 	bl	8012fe4 <tcp_recv_null>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d12b      	bne.n	8012efc <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012ea4:	7bbb      	ldrb	r3, [r7, #14]
 8012ea6:	f003 0320 	and.w	r3, r3, #32
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d034      	beq.n	8012f18 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012eb2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d005      	beq.n	8012ec6 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	b29a      	uxth	r2, r3
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00b      	beq.n	8012ee8 <tcp_process_refused_data+0xb4>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6918      	ldr	r0, [r3, #16]
 8012eda:	2300      	movs	r3, #0
 8012edc:	2200      	movs	r2, #0
 8012ede:	6879      	ldr	r1, [r7, #4]
 8012ee0:	47a0      	blx	r4
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	73fb      	strb	r3, [r7, #15]
 8012ee6:	e001      	b.n	8012eec <tcp_process_refused_data+0xb8>
 8012ee8:	2300      	movs	r3, #0
 8012eea:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ef0:	f113 0f0d 	cmn.w	r3, #13
 8012ef4:	d110      	bne.n	8012f18 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8012ef6:	f06f 030c 	mvn.w	r3, #12
 8012efa:	e00e      	b.n	8012f1a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f00:	f113 0f0d 	cmn.w	r3, #13
 8012f04:	d102      	bne.n	8012f0c <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012f06:	f06f 030c 	mvn.w	r3, #12
 8012f0a:	e006      	b.n	8012f1a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	68ba      	ldr	r2, [r7, #8]
 8012f10:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012f12:	f06f 0304 	mvn.w	r3, #4
 8012f16:	e000      	b.n	8012f1a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8012f18:	2300      	movs	r3, #0
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3714      	adds	r7, #20
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd90      	pop	{r4, r7, pc}
 8012f22:	bf00      	nop
 8012f24:	0801ee90 	.word	0x0801ee90
 8012f28:	0801f3a0 	.word	0x0801f3a0
 8012f2c:	0801eed4 	.word	0x0801eed4

08012f30 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b084      	sub	sp, #16
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012f38:	e007      	b.n	8012f4a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f000 f80a 	bl	8012f5a <tcp_seg_free>
    seg = next;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1f4      	bne.n	8012f3a <tcp_segs_free+0xa>
  }
}
 8012f50:	bf00      	nop
 8012f52:	bf00      	nop
 8012f54:	3710      	adds	r7, #16
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012f5a:	b580      	push	{r7, lr}
 8012f5c:	b082      	sub	sp, #8
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d00c      	beq.n	8012f82 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d004      	beq.n	8012f7a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	685b      	ldr	r3, [r3, #4]
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7fe fb89 	bl	801168c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012f7a:	6879      	ldr	r1, [r7, #4]
 8012f7c:	2003      	movs	r0, #3
 8012f7e:	f7fd fd0f 	bl	80109a0 <memp_free>
  }
}
 8012f82:	bf00      	nop
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
	...

08012f8c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b084      	sub	sp, #16
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d106      	bne.n	8012fa8 <tcp_seg_copy+0x1c>
 8012f9a:	4b0f      	ldr	r3, [pc, #60]	; (8012fd8 <tcp_seg_copy+0x4c>)
 8012f9c:	f240 6282 	movw	r2, #1666	; 0x682
 8012fa0:	490e      	ldr	r1, [pc, #56]	; (8012fdc <tcp_seg_copy+0x50>)
 8012fa2:	480f      	ldr	r0, [pc, #60]	; (8012fe0 <tcp_seg_copy+0x54>)
 8012fa4:	f008 f984 	bl	801b2b0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012fa8:	2003      	movs	r0, #3
 8012faa:	f7fd fc89 	bl	80108c0 <memp_malloc>
 8012fae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d101      	bne.n	8012fba <tcp_seg_copy+0x2e>
    return NULL;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	e00a      	b.n	8012fd0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012fba:	2210      	movs	r2, #16
 8012fbc:	6879      	ldr	r1, [r7, #4]
 8012fbe:	68f8      	ldr	r0, [r7, #12]
 8012fc0:	f008 fb99 	bl	801b6f6 <memcpy>
  pbuf_ref(cseg->p);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fe fbff 	bl	80117cc <pbuf_ref>
  return cseg;
 8012fce:	68fb      	ldr	r3, [r7, #12]
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3710      	adds	r7, #16
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	0801ee90 	.word	0x0801ee90
 8012fdc:	0801f3e4 	.word	0x0801f3e4
 8012fe0:	0801eed4 	.word	0x0801eed4

08012fe4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	60f8      	str	r0, [r7, #12]
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	607a      	str	r2, [r7, #4]
 8012ff0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d109      	bne.n	801300c <tcp_recv_null+0x28>
 8012ff8:	4b12      	ldr	r3, [pc, #72]	; (8013044 <tcp_recv_null+0x60>)
 8012ffa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012ffe:	4912      	ldr	r1, [pc, #72]	; (8013048 <tcp_recv_null+0x64>)
 8013000:	4812      	ldr	r0, [pc, #72]	; (801304c <tcp_recv_null+0x68>)
 8013002:	f008 f955 	bl	801b2b0 <iprintf>
 8013006:	f06f 030f 	mvn.w	r3, #15
 801300a:	e016      	b.n	801303a <tcp_recv_null+0x56>

  if (p != NULL) {
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d009      	beq.n	8013026 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	891b      	ldrh	r3, [r3, #8]
 8013016:	4619      	mov	r1, r3
 8013018:	68b8      	ldr	r0, [r7, #8]
 801301a:	f7ff f9b7 	bl	801238c <tcp_recved>
    pbuf_free(p);
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7fe fb34 	bl	801168c <pbuf_free>
 8013024:	e008      	b.n	8013038 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d104      	bne.n	8013038 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801302e:	68b8      	ldr	r0, [r7, #8]
 8013030:	f7ff f85c 	bl	80120ec <tcp_close>
 8013034:	4603      	mov	r3, r0
 8013036:	e000      	b.n	801303a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013038:	2300      	movs	r3, #0
}
 801303a:	4618      	mov	r0, r3
 801303c:	3710      	adds	r7, #16
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	0801ee90 	.word	0x0801ee90
 8013048:	0801f400 	.word	0x0801f400
 801304c:	0801eed4 	.word	0x0801eed4

08013050 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
 8013056:	4603      	mov	r3, r0
 8013058:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801305e:	2b00      	cmp	r3, #0
 8013060:	db01      	blt.n	8013066 <tcp_kill_prio+0x16>
 8013062:	79fb      	ldrb	r3, [r7, #7]
 8013064:	e000      	b.n	8013068 <tcp_kill_prio+0x18>
 8013066:	237f      	movs	r3, #127	; 0x7f
 8013068:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801306a:	7afb      	ldrb	r3, [r7, #11]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d034      	beq.n	80130da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013070:	7afb      	ldrb	r3, [r7, #11]
 8013072:	3b01      	subs	r3, #1
 8013074:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013076:	2300      	movs	r3, #0
 8013078:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801307a:	2300      	movs	r3, #0
 801307c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801307e:	4b19      	ldr	r3, [pc, #100]	; (80130e4 <tcp_kill_prio+0x94>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	617b      	str	r3, [r7, #20]
 8013084:	e01f      	b.n	80130c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	7d5b      	ldrb	r3, [r3, #21]
 801308a:	7afa      	ldrb	r2, [r7, #11]
 801308c:	429a      	cmp	r2, r3
 801308e:	d80c      	bhi.n	80130aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013094:	7afa      	ldrb	r2, [r7, #11]
 8013096:	429a      	cmp	r2, r3
 8013098:	d112      	bne.n	80130c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801309a:	4b13      	ldr	r3, [pc, #76]	; (80130e8 <tcp_kill_prio+0x98>)
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	6a1b      	ldr	r3, [r3, #32]
 80130a2:	1ad3      	subs	r3, r2, r3
 80130a4:	68fa      	ldr	r2, [r7, #12]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d80a      	bhi.n	80130c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80130aa:	4b0f      	ldr	r3, [pc, #60]	; (80130e8 <tcp_kill_prio+0x98>)
 80130ac:	681a      	ldr	r2, [r3, #0]
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	6a1b      	ldr	r3, [r3, #32]
 80130b2:	1ad3      	subs	r3, r2, r3
 80130b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	7d5b      	ldrb	r3, [r3, #21]
 80130be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	617b      	str	r3, [r7, #20]
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d1dc      	bne.n	8013086 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d004      	beq.n	80130dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80130d2:	6938      	ldr	r0, [r7, #16]
 80130d4:	f7ff f8f4 	bl	80122c0 <tcp_abort>
 80130d8:	e000      	b.n	80130dc <tcp_kill_prio+0x8c>
    return;
 80130da:	bf00      	nop
  }
}
 80130dc:	3718      	adds	r7, #24
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
 80130e2:	bf00      	nop
 80130e4:	200071c8 	.word	0x200071c8
 80130e8:	200071bc 	.word	0x200071bc

080130ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b086      	sub	sp, #24
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	4603      	mov	r3, r0
 80130f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80130f6:	79fb      	ldrb	r3, [r7, #7]
 80130f8:	2b08      	cmp	r3, #8
 80130fa:	d009      	beq.n	8013110 <tcp_kill_state+0x24>
 80130fc:	79fb      	ldrb	r3, [r7, #7]
 80130fe:	2b09      	cmp	r3, #9
 8013100:	d006      	beq.n	8013110 <tcp_kill_state+0x24>
 8013102:	4b1a      	ldr	r3, [pc, #104]	; (801316c <tcp_kill_state+0x80>)
 8013104:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8013108:	4919      	ldr	r1, [pc, #100]	; (8013170 <tcp_kill_state+0x84>)
 801310a:	481a      	ldr	r0, [pc, #104]	; (8013174 <tcp_kill_state+0x88>)
 801310c:	f008 f8d0 	bl	801b2b0 <iprintf>

  inactivity = 0;
 8013110:	2300      	movs	r3, #0
 8013112:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013114:	2300      	movs	r3, #0
 8013116:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013118:	4b17      	ldr	r3, [pc, #92]	; (8013178 <tcp_kill_state+0x8c>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	617b      	str	r3, [r7, #20]
 801311e:	e017      	b.n	8013150 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	7d1b      	ldrb	r3, [r3, #20]
 8013124:	79fa      	ldrb	r2, [r7, #7]
 8013126:	429a      	cmp	r2, r3
 8013128:	d10f      	bne.n	801314a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801312a:	4b14      	ldr	r3, [pc, #80]	; (801317c <tcp_kill_state+0x90>)
 801312c:	681a      	ldr	r2, [r3, #0]
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	6a1b      	ldr	r3, [r3, #32]
 8013132:	1ad3      	subs	r3, r2, r3
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	429a      	cmp	r2, r3
 8013138:	d807      	bhi.n	801314a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801313a:	4b10      	ldr	r3, [pc, #64]	; (801317c <tcp_kill_state+0x90>)
 801313c:	681a      	ldr	r2, [r3, #0]
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	6a1b      	ldr	r3, [r3, #32]
 8013142:	1ad3      	subs	r3, r2, r3
 8013144:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801314a:	697b      	ldr	r3, [r7, #20]
 801314c:	68db      	ldr	r3, [r3, #12]
 801314e:	617b      	str	r3, [r7, #20]
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d1e4      	bne.n	8013120 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d003      	beq.n	8013164 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801315c:	2100      	movs	r1, #0
 801315e:	6938      	ldr	r0, [r7, #16]
 8013160:	f7fe fff0 	bl	8012144 <tcp_abandon>
  }
}
 8013164:	bf00      	nop
 8013166:	3718      	adds	r7, #24
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	0801ee90 	.word	0x0801ee90
 8013170:	0801f41c 	.word	0x0801f41c
 8013174:	0801eed4 	.word	0x0801eed4
 8013178:	200071c8 	.word	0x200071c8
 801317c:	200071bc 	.word	0x200071bc

08013180 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b084      	sub	sp, #16
 8013184:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013186:	2300      	movs	r3, #0
 8013188:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801318a:	2300      	movs	r3, #0
 801318c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801318e:	4b12      	ldr	r3, [pc, #72]	; (80131d8 <tcp_kill_timewait+0x58>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	60fb      	str	r3, [r7, #12]
 8013194:	e012      	b.n	80131bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013196:	4b11      	ldr	r3, [pc, #68]	; (80131dc <tcp_kill_timewait+0x5c>)
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	6a1b      	ldr	r3, [r3, #32]
 801319e:	1ad3      	subs	r3, r2, r3
 80131a0:	687a      	ldr	r2, [r7, #4]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d807      	bhi.n	80131b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80131a6:	4b0d      	ldr	r3, [pc, #52]	; (80131dc <tcp_kill_timewait+0x5c>)
 80131a8:	681a      	ldr	r2, [r3, #0]
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	6a1b      	ldr	r3, [r3, #32]
 80131ae:	1ad3      	subs	r3, r2, r3
 80131b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	68db      	ldr	r3, [r3, #12]
 80131ba:	60fb      	str	r3, [r7, #12]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1e9      	bne.n	8013196 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d002      	beq.n	80131ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80131c8:	68b8      	ldr	r0, [r7, #8]
 80131ca:	f7ff f879 	bl	80122c0 <tcp_abort>
  }
}
 80131ce:	bf00      	nop
 80131d0:	3710      	adds	r7, #16
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	200071cc 	.word	0x200071cc
 80131dc:	200071bc 	.word	0x200071bc

080131e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b082      	sub	sp, #8
 80131e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80131e6:	4b10      	ldr	r3, [pc, #64]	; (8013228 <tcp_handle_closepend+0x48>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80131ec:	e014      	b.n	8013218 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	8b5b      	ldrh	r3, [r3, #26]
 80131f8:	f003 0308 	and.w	r3, r3, #8
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d009      	beq.n	8013214 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	8b5b      	ldrh	r3, [r3, #26]
 8013204:	f023 0308 	bic.w	r3, r3, #8
 8013208:	b29a      	uxth	r2, r3
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7fe ff02 	bl	8012018 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d1e7      	bne.n	80131ee <tcp_handle_closepend+0xe>
  }
}
 801321e:	bf00      	nop
 8013220:	bf00      	nop
 8013222:	3708      	adds	r7, #8
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	200071c8 	.word	0x200071c8

0801322c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b084      	sub	sp, #16
 8013230:	af00      	add	r7, sp, #0
 8013232:	4603      	mov	r3, r0
 8013234:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013236:	2001      	movs	r0, #1
 8013238:	f7fd fb42 	bl	80108c0 <memp_malloc>
 801323c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d126      	bne.n	8013292 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013244:	f7ff ffcc 	bl	80131e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013248:	f7ff ff9a 	bl	8013180 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801324c:	2001      	movs	r0, #1
 801324e:	f7fd fb37 	bl	80108c0 <memp_malloc>
 8013252:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d11b      	bne.n	8013292 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801325a:	2009      	movs	r0, #9
 801325c:	f7ff ff46 	bl	80130ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013260:	2001      	movs	r0, #1
 8013262:	f7fd fb2d 	bl	80108c0 <memp_malloc>
 8013266:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d111      	bne.n	8013292 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801326e:	2008      	movs	r0, #8
 8013270:	f7ff ff3c 	bl	80130ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013274:	2001      	movs	r0, #1
 8013276:	f7fd fb23 	bl	80108c0 <memp_malloc>
 801327a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d107      	bne.n	8013292 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013282:	79fb      	ldrb	r3, [r7, #7]
 8013284:	4618      	mov	r0, r3
 8013286:	f7ff fee3 	bl	8013050 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801328a:	2001      	movs	r0, #1
 801328c:	f7fd fb18 	bl	80108c0 <memp_malloc>
 8013290:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d03f      	beq.n	8013318 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013298:	229c      	movs	r2, #156	; 0x9c
 801329a:	2100      	movs	r1, #0
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f008 f997 	bl	801b5d0 <memset>
    pcb->prio = prio;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	79fa      	ldrb	r2, [r7, #7]
 80132a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80132ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80132b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	22ff      	movs	r2, #255	; 0xff
 80132c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f44f 7206 	mov.w	r2, #536	; 0x218
 80132ce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	2206      	movs	r2, #6
 80132d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2206      	movs	r2, #6
 80132dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132e4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2201      	movs	r2, #1
 80132ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80132ee:	4b0d      	ldr	r3, [pc, #52]	; (8013324 <tcp_alloc+0xf8>)
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80132f6:	4b0c      	ldr	r3, [pc, #48]	; (8013328 <tcp_alloc+0xfc>)
 80132f8:	781a      	ldrb	r2, [r3, #0]
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013304:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	4a08      	ldr	r2, [pc, #32]	; (801332c <tcp_alloc+0x100>)
 801330c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	4a07      	ldr	r2, [pc, #28]	; (8013330 <tcp_alloc+0x104>)
 8013314:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013318:	68fb      	ldr	r3, [r7, #12]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	200071bc 	.word	0x200071bc
 8013328:	200071d2 	.word	0x200071d2
 801332c:	08012fe5 	.word	0x08012fe5
 8013330:	006ddd00 	.word	0x006ddd00

08013334 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8013338:	2040      	movs	r0, #64	; 0x40
 801333a:	f7ff ff77 	bl	801322c <tcp_alloc>
 801333e:	4603      	mov	r3, r0
}
 8013340:	4618      	mov	r0, r3
 8013342:	bd80      	pop	{r7, pc}

08013344 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013344:	b480      	push	{r7}
 8013346:	b083      	sub	sp, #12
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d002      	beq.n	801335a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	683a      	ldr	r2, [r7, #0]
 8013358:	611a      	str	r2, [r3, #16]
  }
}
 801335a:	bf00      	nop
 801335c:	370c      	adds	r7, #12
 801335e:	46bd      	mov	sp, r7
 8013360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013364:	4770      	bx	lr
	...

08013368 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d00e      	beq.n	8013396 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	7d1b      	ldrb	r3, [r3, #20]
 801337c:	2b01      	cmp	r3, #1
 801337e:	d106      	bne.n	801338e <tcp_recv+0x26>
 8013380:	4b07      	ldr	r3, [pc, #28]	; (80133a0 <tcp_recv+0x38>)
 8013382:	f240 72df 	movw	r2, #2015	; 0x7df
 8013386:	4907      	ldr	r1, [pc, #28]	; (80133a4 <tcp_recv+0x3c>)
 8013388:	4807      	ldr	r0, [pc, #28]	; (80133a8 <tcp_recv+0x40>)
 801338a:	f007 ff91 	bl	801b2b0 <iprintf>
    pcb->recv = recv;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	683a      	ldr	r2, [r7, #0]
 8013392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013396:	bf00      	nop
 8013398:	3708      	adds	r7, #8
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	0801ee90 	.word	0x0801ee90
 80133a4:	0801f42c 	.word	0x0801f42c
 80133a8:	0801eed4 	.word	0x0801eed4

080133ac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d00e      	beq.n	80133da <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	7d1b      	ldrb	r3, [r3, #20]
 80133c0:	2b01      	cmp	r3, #1
 80133c2:	d106      	bne.n	80133d2 <tcp_sent+0x26>
 80133c4:	4b07      	ldr	r3, [pc, #28]	; (80133e4 <tcp_sent+0x38>)
 80133c6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80133ca:	4907      	ldr	r1, [pc, #28]	; (80133e8 <tcp_sent+0x3c>)
 80133cc:	4807      	ldr	r0, [pc, #28]	; (80133ec <tcp_sent+0x40>)
 80133ce:	f007 ff6f 	bl	801b2b0 <iprintf>
    pcb->sent = sent;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	683a      	ldr	r2, [r7, #0]
 80133d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80133da:	bf00      	nop
 80133dc:	3708      	adds	r7, #8
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
 80133e2:	bf00      	nop
 80133e4:	0801ee90 	.word	0x0801ee90
 80133e8:	0801f454 	.word	0x0801f454
 80133ec:	0801eed4 	.word	0x0801eed4

080133f0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d00e      	beq.n	801341e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	7d1b      	ldrb	r3, [r3, #20]
 8013404:	2b01      	cmp	r3, #1
 8013406:	d106      	bne.n	8013416 <tcp_err+0x26>
 8013408:	4b07      	ldr	r3, [pc, #28]	; (8013428 <tcp_err+0x38>)
 801340a:	f640 020d 	movw	r2, #2061	; 0x80d
 801340e:	4907      	ldr	r1, [pc, #28]	; (801342c <tcp_err+0x3c>)
 8013410:	4807      	ldr	r0, [pc, #28]	; (8013430 <tcp_err+0x40>)
 8013412:	f007 ff4d 	bl	801b2b0 <iprintf>
    pcb->errf = err;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	683a      	ldr	r2, [r7, #0]
 801341a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801341e:	bf00      	nop
 8013420:	3708      	adds	r7, #8
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}
 8013426:	bf00      	nop
 8013428:	0801ee90 	.word	0x0801ee90
 801342c:	0801f47c 	.word	0x0801f47c
 8013430:	0801eed4 	.word	0x0801eed4

08013434 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b084      	sub	sp, #16
 8013438:	af00      	add	r7, sp, #0
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	4613      	mov	r3, r2
 8013440:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d107      	bne.n	8013458 <tcp_poll+0x24>
 8013448:	4b0e      	ldr	r3, [pc, #56]	; (8013484 <tcp_poll+0x50>)
 801344a:	f640 023d 	movw	r2, #2109	; 0x83d
 801344e:	490e      	ldr	r1, [pc, #56]	; (8013488 <tcp_poll+0x54>)
 8013450:	480e      	ldr	r0, [pc, #56]	; (801348c <tcp_poll+0x58>)
 8013452:	f007 ff2d 	bl	801b2b0 <iprintf>
 8013456:	e011      	b.n	801347c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	7d1b      	ldrb	r3, [r3, #20]
 801345c:	2b01      	cmp	r3, #1
 801345e:	d106      	bne.n	801346e <tcp_poll+0x3a>
 8013460:	4b08      	ldr	r3, [pc, #32]	; (8013484 <tcp_poll+0x50>)
 8013462:	f640 023e 	movw	r2, #2110	; 0x83e
 8013466:	490a      	ldr	r1, [pc, #40]	; (8013490 <tcp_poll+0x5c>)
 8013468:	4808      	ldr	r0, [pc, #32]	; (801348c <tcp_poll+0x58>)
 801346a:	f007 ff21 	bl	801b2b0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	68ba      	ldr	r2, [r7, #8]
 8013472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	79fa      	ldrb	r2, [r7, #7]
 801347a:	775a      	strb	r2, [r3, #29]
}
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	0801ee90 	.word	0x0801ee90
 8013488:	0801f4a4 	.word	0x0801f4a4
 801348c:	0801eed4 	.word	0x0801eed4
 8013490:	0801f4bc 	.word	0x0801f4bc

08013494 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d107      	bne.n	80134b2 <tcp_pcb_purge+0x1e>
 80134a2:	4b21      	ldr	r3, [pc, #132]	; (8013528 <tcp_pcb_purge+0x94>)
 80134a4:	f640 0251 	movw	r2, #2129	; 0x851
 80134a8:	4920      	ldr	r1, [pc, #128]	; (801352c <tcp_pcb_purge+0x98>)
 80134aa:	4821      	ldr	r0, [pc, #132]	; (8013530 <tcp_pcb_purge+0x9c>)
 80134ac:	f007 ff00 	bl	801b2b0 <iprintf>
 80134b0:	e037      	b.n	8013522 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	7d1b      	ldrb	r3, [r3, #20]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d033      	beq.n	8013522 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80134be:	2b0a      	cmp	r3, #10
 80134c0:	d02f      	beq.n	8013522 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80134c6:	2b01      	cmp	r3, #1
 80134c8:	d02b      	beq.n	8013522 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d007      	beq.n	80134e2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7fe f8d8 	bl	801168c <pbuf_free>
      pcb->refused_data = NULL;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2200      	movs	r2, #0
 80134e0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d002      	beq.n	80134f0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f000 f986 	bl	80137fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134f6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7ff fd17 	bl	8012f30 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013506:	4618      	mov	r0, r3
 8013508:	f7ff fd12 	bl	8012f30 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2200      	movs	r2, #0
 8013510:	66da      	str	r2, [r3, #108]	; 0x6c
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	2200      	movs	r2, #0
 801351e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013522:	3708      	adds	r7, #8
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}
 8013528:	0801ee90 	.word	0x0801ee90
 801352c:	0801f4dc 	.word	0x0801f4dc
 8013530:	0801eed4 	.word	0x0801eed4

08013534 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b084      	sub	sp, #16
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d106      	bne.n	8013552 <tcp_pcb_remove+0x1e>
 8013544:	4b3e      	ldr	r3, [pc, #248]	; (8013640 <tcp_pcb_remove+0x10c>)
 8013546:	f640 0283 	movw	r2, #2179	; 0x883
 801354a:	493e      	ldr	r1, [pc, #248]	; (8013644 <tcp_pcb_remove+0x110>)
 801354c:	483e      	ldr	r0, [pc, #248]	; (8013648 <tcp_pcb_remove+0x114>)
 801354e:	f007 feaf 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d106      	bne.n	8013566 <tcp_pcb_remove+0x32>
 8013558:	4b39      	ldr	r3, [pc, #228]	; (8013640 <tcp_pcb_remove+0x10c>)
 801355a:	f640 0284 	movw	r2, #2180	; 0x884
 801355e:	493b      	ldr	r1, [pc, #236]	; (801364c <tcp_pcb_remove+0x118>)
 8013560:	4839      	ldr	r0, [pc, #228]	; (8013648 <tcp_pcb_remove+0x114>)
 8013562:	f007 fea5 	bl	801b2b0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	683a      	ldr	r2, [r7, #0]
 801356c:	429a      	cmp	r2, r3
 801356e:	d105      	bne.n	801357c <tcp_pcb_remove+0x48>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	68da      	ldr	r2, [r3, #12]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	601a      	str	r2, [r3, #0]
 801357a:	e013      	b.n	80135a4 <tcp_pcb_remove+0x70>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	60fb      	str	r3, [r7, #12]
 8013582:	e00c      	b.n	801359e <tcp_pcb_remove+0x6a>
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	683a      	ldr	r2, [r7, #0]
 801358a:	429a      	cmp	r2, r3
 801358c:	d104      	bne.n	8013598 <tcp_pcb_remove+0x64>
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	68da      	ldr	r2, [r3, #12]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	60da      	str	r2, [r3, #12]
 8013596:	e005      	b.n	80135a4 <tcp_pcb_remove+0x70>
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	68db      	ldr	r3, [r3, #12]
 801359c:	60fb      	str	r3, [r7, #12]
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d1ef      	bne.n	8013584 <tcp_pcb_remove+0x50>
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	2200      	movs	r2, #0
 80135a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80135aa:	6838      	ldr	r0, [r7, #0]
 80135ac:	f7ff ff72 	bl	8013494 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	7d1b      	ldrb	r3, [r3, #20]
 80135b4:	2b0a      	cmp	r3, #10
 80135b6:	d013      	beq.n	80135e0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80135bc:	2b01      	cmp	r3, #1
 80135be:	d00f      	beq.n	80135e0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	8b5b      	ldrh	r3, [r3, #26]
 80135c4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d009      	beq.n	80135e0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	8b5b      	ldrh	r3, [r3, #26]
 80135d0:	f043 0302 	orr.w	r3, r3, #2
 80135d4:	b29a      	uxth	r2, r3
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80135da:	6838      	ldr	r0, [r7, #0]
 80135dc:	f003 fbc6 	bl	8016d6c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	7d1b      	ldrb	r3, [r3, #20]
 80135e4:	2b01      	cmp	r3, #1
 80135e6:	d020      	beq.n	801362a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d006      	beq.n	80135fe <tcp_pcb_remove+0xca>
 80135f0:	4b13      	ldr	r3, [pc, #76]	; (8013640 <tcp_pcb_remove+0x10c>)
 80135f2:	f640 0293 	movw	r2, #2195	; 0x893
 80135f6:	4916      	ldr	r1, [pc, #88]	; (8013650 <tcp_pcb_remove+0x11c>)
 80135f8:	4813      	ldr	r0, [pc, #76]	; (8013648 <tcp_pcb_remove+0x114>)
 80135fa:	f007 fe59 	bl	801b2b0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013602:	2b00      	cmp	r3, #0
 8013604:	d006      	beq.n	8013614 <tcp_pcb_remove+0xe0>
 8013606:	4b0e      	ldr	r3, [pc, #56]	; (8013640 <tcp_pcb_remove+0x10c>)
 8013608:	f640 0294 	movw	r2, #2196	; 0x894
 801360c:	4911      	ldr	r1, [pc, #68]	; (8013654 <tcp_pcb_remove+0x120>)
 801360e:	480e      	ldr	r0, [pc, #56]	; (8013648 <tcp_pcb_remove+0x114>)
 8013610:	f007 fe4e 	bl	801b2b0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013618:	2b00      	cmp	r3, #0
 801361a:	d006      	beq.n	801362a <tcp_pcb_remove+0xf6>
 801361c:	4b08      	ldr	r3, [pc, #32]	; (8013640 <tcp_pcb_remove+0x10c>)
 801361e:	f640 0296 	movw	r2, #2198	; 0x896
 8013622:	490d      	ldr	r1, [pc, #52]	; (8013658 <tcp_pcb_remove+0x124>)
 8013624:	4808      	ldr	r0, [pc, #32]	; (8013648 <tcp_pcb_remove+0x114>)
 8013626:	f007 fe43 	bl	801b2b0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	2200      	movs	r2, #0
 801362e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	2200      	movs	r2, #0
 8013634:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013636:	bf00      	nop
 8013638:	3710      	adds	r7, #16
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	0801ee90 	.word	0x0801ee90
 8013644:	0801f4f8 	.word	0x0801f4f8
 8013648:	0801eed4 	.word	0x0801eed4
 801364c:	0801f514 	.word	0x0801f514
 8013650:	0801f534 	.word	0x0801f534
 8013654:	0801f54c 	.word	0x0801f54c
 8013658:	0801f568 	.word	0x0801f568

0801365c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d106      	bne.n	8013678 <tcp_next_iss+0x1c>
 801366a:	4b0a      	ldr	r3, [pc, #40]	; (8013694 <tcp_next_iss+0x38>)
 801366c:	f640 02af 	movw	r2, #2223	; 0x8af
 8013670:	4909      	ldr	r1, [pc, #36]	; (8013698 <tcp_next_iss+0x3c>)
 8013672:	480a      	ldr	r0, [pc, #40]	; (801369c <tcp_next_iss+0x40>)
 8013674:	f007 fe1c 	bl	801b2b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013678:	4b09      	ldr	r3, [pc, #36]	; (80136a0 <tcp_next_iss+0x44>)
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	4b09      	ldr	r3, [pc, #36]	; (80136a4 <tcp_next_iss+0x48>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	4413      	add	r3, r2
 8013682:	4a07      	ldr	r2, [pc, #28]	; (80136a0 <tcp_next_iss+0x44>)
 8013684:	6013      	str	r3, [r2, #0]
  return iss;
 8013686:	4b06      	ldr	r3, [pc, #24]	; (80136a0 <tcp_next_iss+0x44>)
 8013688:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801368a:	4618      	mov	r0, r3
 801368c:	3708      	adds	r7, #8
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	0801ee90 	.word	0x0801ee90
 8013698:	0801f580 	.word	0x0801f580
 801369c:	0801eed4 	.word	0x0801eed4
 80136a0:	2000017c 	.word	0x2000017c
 80136a4:	200071bc 	.word	0x200071bc

080136a8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b086      	sub	sp, #24
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	4603      	mov	r3, r0
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	607a      	str	r2, [r7, #4]
 80136b4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d106      	bne.n	80136ca <tcp_eff_send_mss_netif+0x22>
 80136bc:	4b14      	ldr	r3, [pc, #80]	; (8013710 <tcp_eff_send_mss_netif+0x68>)
 80136be:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80136c2:	4914      	ldr	r1, [pc, #80]	; (8013714 <tcp_eff_send_mss_netif+0x6c>)
 80136c4:	4814      	ldr	r0, [pc, #80]	; (8013718 <tcp_eff_send_mss_netif+0x70>)
 80136c6:	f007 fdf3 	bl	801b2b0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d101      	bne.n	80136d4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80136d0:	89fb      	ldrh	r3, [r7, #14]
 80136d2:	e019      	b.n	8013708 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80136d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80136da:	8afb      	ldrh	r3, [r7, #22]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d012      	beq.n	8013706 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80136e0:	2328      	movs	r3, #40	; 0x28
 80136e2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80136e4:	8afa      	ldrh	r2, [r7, #22]
 80136e6:	8abb      	ldrh	r3, [r7, #20]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d904      	bls.n	80136f6 <tcp_eff_send_mss_netif+0x4e>
 80136ec:	8afa      	ldrh	r2, [r7, #22]
 80136ee:	8abb      	ldrh	r3, [r7, #20]
 80136f0:	1ad3      	subs	r3, r2, r3
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	e000      	b.n	80136f8 <tcp_eff_send_mss_netif+0x50>
 80136f6:	2300      	movs	r3, #0
 80136f8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80136fa:	8a7a      	ldrh	r2, [r7, #18]
 80136fc:	89fb      	ldrh	r3, [r7, #14]
 80136fe:	4293      	cmp	r3, r2
 8013700:	bf28      	it	cs
 8013702:	4613      	movcs	r3, r2
 8013704:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013706:	89fb      	ldrh	r3, [r7, #14]
}
 8013708:	4618      	mov	r0, r3
 801370a:	3718      	adds	r7, #24
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	0801ee90 	.word	0x0801ee90
 8013714:	0801f59c 	.word	0x0801f59c
 8013718:	0801eed4 	.word	0x0801eed4

0801371c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b084      	sub	sp, #16
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d119      	bne.n	8013764 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013730:	4b10      	ldr	r3, [pc, #64]	; (8013774 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013732:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013736:	4910      	ldr	r1, [pc, #64]	; (8013778 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013738:	4810      	ldr	r0, [pc, #64]	; (801377c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801373a:	f007 fdb9 	bl	801b2b0 <iprintf>

  while (pcb != NULL) {
 801373e:	e011      	b.n	8013764 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	681a      	ldr	r2, [r3, #0]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	429a      	cmp	r2, r3
 801374a:	d108      	bne.n	801375e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013752:	68f8      	ldr	r0, [r7, #12]
 8013754:	f7fe fdb4 	bl	80122c0 <tcp_abort>
      pcb = next;
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	60fb      	str	r3, [r7, #12]
 801375c:	e002      	b.n	8013764 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d1ea      	bne.n	8013740 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801376a:	bf00      	nop
 801376c:	bf00      	nop
 801376e:	3710      	adds	r7, #16
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	0801ee90 	.word	0x0801ee90
 8013778:	0801f5c4 	.word	0x0801f5c4
 801377c:	0801eed4 	.word	0x0801eed4

08013780 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d02a      	beq.n	80137e6 <tcp_netif_ip_addr_changed+0x66>
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d026      	beq.n	80137e6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013798:	4b15      	ldr	r3, [pc, #84]	; (80137f0 <tcp_netif_ip_addr_changed+0x70>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	4619      	mov	r1, r3
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7ff ffbc 	bl	801371c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80137a4:	4b13      	ldr	r3, [pc, #76]	; (80137f4 <tcp_netif_ip_addr_changed+0x74>)
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	4619      	mov	r1, r3
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f7ff ffb6 	bl	801371c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d017      	beq.n	80137e6 <tcp_netif_ip_addr_changed+0x66>
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d013      	beq.n	80137e6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80137be:	4b0e      	ldr	r3, [pc, #56]	; (80137f8 <tcp_netif_ip_addr_changed+0x78>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	60fb      	str	r3, [r7, #12]
 80137c4:	e00c      	b.n	80137e0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	681a      	ldr	r2, [r3, #0]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d103      	bne.n	80137da <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	681a      	ldr	r2, [r3, #0]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	68db      	ldr	r3, [r3, #12]
 80137de:	60fb      	str	r3, [r7, #12]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d1ef      	bne.n	80137c6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80137e6:	bf00      	nop
 80137e8:	3710      	adds	r7, #16
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	200071c8 	.word	0x200071c8
 80137f4:	200071c0 	.word	0x200071c0
 80137f8:	200071c4 	.word	0x200071c4

080137fc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013808:	2b00      	cmp	r3, #0
 801380a:	d007      	beq.n	801381c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013810:	4618      	mov	r0, r3
 8013812:	f7ff fb8d 	bl	8012f30 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2200      	movs	r2, #0
 801381a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801381c:	bf00      	nop
 801381e:	3708      	adds	r7, #8
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}

08013824 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013824:	b590      	push	{r4, r7, lr}
 8013826:	b08d      	sub	sp, #52	; 0x34
 8013828:	af04      	add	r7, sp, #16
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d105      	bne.n	8013840 <tcp_input+0x1c>
 8013834:	4b9b      	ldr	r3, [pc, #620]	; (8013aa4 <tcp_input+0x280>)
 8013836:	2283      	movs	r2, #131	; 0x83
 8013838:	499b      	ldr	r1, [pc, #620]	; (8013aa8 <tcp_input+0x284>)
 801383a:	489c      	ldr	r0, [pc, #624]	; (8013aac <tcp_input+0x288>)
 801383c:	f007 fd38 	bl	801b2b0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	4a9a      	ldr	r2, [pc, #616]	; (8013ab0 <tcp_input+0x28c>)
 8013846:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	895b      	ldrh	r3, [r3, #10]
 801384c:	2b13      	cmp	r3, #19
 801384e:	f240 83d1 	bls.w	8013ff4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013852:	4b98      	ldr	r3, [pc, #608]	; (8013ab4 <tcp_input+0x290>)
 8013854:	695b      	ldr	r3, [r3, #20]
 8013856:	4a97      	ldr	r2, [pc, #604]	; (8013ab4 <tcp_input+0x290>)
 8013858:	6812      	ldr	r2, [r2, #0]
 801385a:	4611      	mov	r1, r2
 801385c:	4618      	mov	r0, r3
 801385e:	f006 f895 	bl	801998c <ip4_addr_isbroadcast_u32>
 8013862:	4603      	mov	r3, r0
 8013864:	2b00      	cmp	r3, #0
 8013866:	f040 83c7 	bne.w	8013ff8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801386a:	4b92      	ldr	r3, [pc, #584]	; (8013ab4 <tcp_input+0x290>)
 801386c:	695b      	ldr	r3, [r3, #20]
 801386e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013872:	2be0      	cmp	r3, #224	; 0xe0
 8013874:	f000 83c0 	beq.w	8013ff8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013878:	4b8d      	ldr	r3, [pc, #564]	; (8013ab0 <tcp_input+0x28c>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	899b      	ldrh	r3, [r3, #12]
 801387e:	b29b      	uxth	r3, r3
 8013880:	4618      	mov	r0, r3
 8013882:	f7fc faff 	bl	800fe84 <lwip_htons>
 8013886:	4603      	mov	r3, r0
 8013888:	0b1b      	lsrs	r3, r3, #12
 801388a:	b29b      	uxth	r3, r3
 801388c:	b2db      	uxtb	r3, r3
 801388e:	009b      	lsls	r3, r3, #2
 8013890:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013892:	7cbb      	ldrb	r3, [r7, #18]
 8013894:	2b13      	cmp	r3, #19
 8013896:	f240 83b1 	bls.w	8013ffc <tcp_input+0x7d8>
 801389a:	7cbb      	ldrb	r3, [r7, #18]
 801389c:	b29a      	uxth	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	891b      	ldrh	r3, [r3, #8]
 80138a2:	429a      	cmp	r2, r3
 80138a4:	f200 83aa 	bhi.w	8013ffc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80138a8:	7cbb      	ldrb	r3, [r7, #18]
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	3b14      	subs	r3, #20
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	4b81      	ldr	r3, [pc, #516]	; (8013ab8 <tcp_input+0x294>)
 80138b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80138b4:	4b81      	ldr	r3, [pc, #516]	; (8013abc <tcp_input+0x298>)
 80138b6:	2200      	movs	r2, #0
 80138b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	895a      	ldrh	r2, [r3, #10]
 80138be:	7cbb      	ldrb	r3, [r7, #18]
 80138c0:	b29b      	uxth	r3, r3
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d309      	bcc.n	80138da <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80138c6:	4b7c      	ldr	r3, [pc, #496]	; (8013ab8 <tcp_input+0x294>)
 80138c8:	881a      	ldrh	r2, [r3, #0]
 80138ca:	4b7d      	ldr	r3, [pc, #500]	; (8013ac0 <tcp_input+0x29c>)
 80138cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80138ce:	7cbb      	ldrb	r3, [r7, #18]
 80138d0:	4619      	mov	r1, r3
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f7fd fe54 	bl	8011580 <pbuf_remove_header>
 80138d8:	e04e      	b.n	8013978 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d105      	bne.n	80138ee <tcp_input+0xca>
 80138e2:	4b70      	ldr	r3, [pc, #448]	; (8013aa4 <tcp_input+0x280>)
 80138e4:	22c2      	movs	r2, #194	; 0xc2
 80138e6:	4977      	ldr	r1, [pc, #476]	; (8013ac4 <tcp_input+0x2a0>)
 80138e8:	4870      	ldr	r0, [pc, #448]	; (8013aac <tcp_input+0x288>)
 80138ea:	f007 fce1 	bl	801b2b0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80138ee:	2114      	movs	r1, #20
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f7fd fe45 	bl	8011580 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	895a      	ldrh	r2, [r3, #10]
 80138fa:	4b71      	ldr	r3, [pc, #452]	; (8013ac0 <tcp_input+0x29c>)
 80138fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80138fe:	4b6e      	ldr	r3, [pc, #440]	; (8013ab8 <tcp_input+0x294>)
 8013900:	881a      	ldrh	r2, [r3, #0]
 8013902:	4b6f      	ldr	r3, [pc, #444]	; (8013ac0 <tcp_input+0x29c>)
 8013904:	881b      	ldrh	r3, [r3, #0]
 8013906:	1ad3      	subs	r3, r2, r3
 8013908:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801390a:	4b6d      	ldr	r3, [pc, #436]	; (8013ac0 <tcp_input+0x29c>)
 801390c:	881b      	ldrh	r3, [r3, #0]
 801390e:	4619      	mov	r1, r3
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f7fd fe35 	bl	8011580 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	895b      	ldrh	r3, [r3, #10]
 801391c:	8a3a      	ldrh	r2, [r7, #16]
 801391e:	429a      	cmp	r2, r3
 8013920:	f200 836e 	bhi.w	8014000 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	4a64      	ldr	r2, [pc, #400]	; (8013abc <tcp_input+0x298>)
 801392c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	8a3a      	ldrh	r2, [r7, #16]
 8013934:	4611      	mov	r1, r2
 8013936:	4618      	mov	r0, r3
 8013938:	f7fd fe22 	bl	8011580 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	891a      	ldrh	r2, [r3, #8]
 8013940:	8a3b      	ldrh	r3, [r7, #16]
 8013942:	1ad3      	subs	r3, r2, r3
 8013944:	b29a      	uxth	r2, r3
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	895b      	ldrh	r3, [r3, #10]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d005      	beq.n	801395e <tcp_input+0x13a>
 8013952:	4b54      	ldr	r3, [pc, #336]	; (8013aa4 <tcp_input+0x280>)
 8013954:	22df      	movs	r2, #223	; 0xdf
 8013956:	495c      	ldr	r1, [pc, #368]	; (8013ac8 <tcp_input+0x2a4>)
 8013958:	4854      	ldr	r0, [pc, #336]	; (8013aac <tcp_input+0x288>)
 801395a:	f007 fca9 	bl	801b2b0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	891a      	ldrh	r2, [r3, #8]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	891b      	ldrh	r3, [r3, #8]
 8013968:	429a      	cmp	r2, r3
 801396a:	d005      	beq.n	8013978 <tcp_input+0x154>
 801396c:	4b4d      	ldr	r3, [pc, #308]	; (8013aa4 <tcp_input+0x280>)
 801396e:	22e0      	movs	r2, #224	; 0xe0
 8013970:	4956      	ldr	r1, [pc, #344]	; (8013acc <tcp_input+0x2a8>)
 8013972:	484e      	ldr	r0, [pc, #312]	; (8013aac <tcp_input+0x288>)
 8013974:	f007 fc9c 	bl	801b2b0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013978:	4b4d      	ldr	r3, [pc, #308]	; (8013ab0 <tcp_input+0x28c>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	881b      	ldrh	r3, [r3, #0]
 801397e:	b29b      	uxth	r3, r3
 8013980:	4a4b      	ldr	r2, [pc, #300]	; (8013ab0 <tcp_input+0x28c>)
 8013982:	6814      	ldr	r4, [r2, #0]
 8013984:	4618      	mov	r0, r3
 8013986:	f7fc fa7d 	bl	800fe84 <lwip_htons>
 801398a:	4603      	mov	r3, r0
 801398c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801398e:	4b48      	ldr	r3, [pc, #288]	; (8013ab0 <tcp_input+0x28c>)
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	885b      	ldrh	r3, [r3, #2]
 8013994:	b29b      	uxth	r3, r3
 8013996:	4a46      	ldr	r2, [pc, #280]	; (8013ab0 <tcp_input+0x28c>)
 8013998:	6814      	ldr	r4, [r2, #0]
 801399a:	4618      	mov	r0, r3
 801399c:	f7fc fa72 	bl	800fe84 <lwip_htons>
 80139a0:	4603      	mov	r3, r0
 80139a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80139a4:	4b42      	ldr	r3, [pc, #264]	; (8013ab0 <tcp_input+0x28c>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	4a41      	ldr	r2, [pc, #260]	; (8013ab0 <tcp_input+0x28c>)
 80139ac:	6814      	ldr	r4, [r2, #0]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7fc fa7d 	bl	800feae <lwip_htonl>
 80139b4:	4603      	mov	r3, r0
 80139b6:	6063      	str	r3, [r4, #4]
 80139b8:	6863      	ldr	r3, [r4, #4]
 80139ba:	4a45      	ldr	r2, [pc, #276]	; (8013ad0 <tcp_input+0x2ac>)
 80139bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80139be:	4b3c      	ldr	r3, [pc, #240]	; (8013ab0 <tcp_input+0x28c>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	689b      	ldr	r3, [r3, #8]
 80139c4:	4a3a      	ldr	r2, [pc, #232]	; (8013ab0 <tcp_input+0x28c>)
 80139c6:	6814      	ldr	r4, [r2, #0]
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7fc fa70 	bl	800feae <lwip_htonl>
 80139ce:	4603      	mov	r3, r0
 80139d0:	60a3      	str	r3, [r4, #8]
 80139d2:	68a3      	ldr	r3, [r4, #8]
 80139d4:	4a3f      	ldr	r2, [pc, #252]	; (8013ad4 <tcp_input+0x2b0>)
 80139d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80139d8:	4b35      	ldr	r3, [pc, #212]	; (8013ab0 <tcp_input+0x28c>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	89db      	ldrh	r3, [r3, #14]
 80139de:	b29b      	uxth	r3, r3
 80139e0:	4a33      	ldr	r2, [pc, #204]	; (8013ab0 <tcp_input+0x28c>)
 80139e2:	6814      	ldr	r4, [r2, #0]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fc fa4d 	bl	800fe84 <lwip_htons>
 80139ea:	4603      	mov	r3, r0
 80139ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80139ee:	4b30      	ldr	r3, [pc, #192]	; (8013ab0 <tcp_input+0x28c>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	899b      	ldrh	r3, [r3, #12]
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7fc fa44 	bl	800fe84 <lwip_htons>
 80139fc:	4603      	mov	r3, r0
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a04:	b2da      	uxtb	r2, r3
 8013a06:	4b34      	ldr	r3, [pc, #208]	; (8013ad8 <tcp_input+0x2b4>)
 8013a08:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	891a      	ldrh	r2, [r3, #8]
 8013a0e:	4b33      	ldr	r3, [pc, #204]	; (8013adc <tcp_input+0x2b8>)
 8013a10:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013a12:	4b31      	ldr	r3, [pc, #196]	; (8013ad8 <tcp_input+0x2b4>)
 8013a14:	781b      	ldrb	r3, [r3, #0]
 8013a16:	f003 0303 	and.w	r3, r3, #3
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00c      	beq.n	8013a38 <tcp_input+0x214>
    tcplen++;
 8013a1e:	4b2f      	ldr	r3, [pc, #188]	; (8013adc <tcp_input+0x2b8>)
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	3301      	adds	r3, #1
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	4b2d      	ldr	r3, [pc, #180]	; (8013adc <tcp_input+0x2b8>)
 8013a28:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	891a      	ldrh	r2, [r3, #8]
 8013a2e:	4b2b      	ldr	r3, [pc, #172]	; (8013adc <tcp_input+0x2b8>)
 8013a30:	881b      	ldrh	r3, [r3, #0]
 8013a32:	429a      	cmp	r2, r3
 8013a34:	f200 82e6 	bhi.w	8014004 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a3c:	4b28      	ldr	r3, [pc, #160]	; (8013ae0 <tcp_input+0x2bc>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	61fb      	str	r3, [r7, #28]
 8013a42:	e09d      	b.n	8013b80 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	7d1b      	ldrb	r3, [r3, #20]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d105      	bne.n	8013a58 <tcp_input+0x234>
 8013a4c:	4b15      	ldr	r3, [pc, #84]	; (8013aa4 <tcp_input+0x280>)
 8013a4e:	22fb      	movs	r2, #251	; 0xfb
 8013a50:	4924      	ldr	r1, [pc, #144]	; (8013ae4 <tcp_input+0x2c0>)
 8013a52:	4816      	ldr	r0, [pc, #88]	; (8013aac <tcp_input+0x288>)
 8013a54:	f007 fc2c 	bl	801b2b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	7d1b      	ldrb	r3, [r3, #20]
 8013a5c:	2b0a      	cmp	r3, #10
 8013a5e:	d105      	bne.n	8013a6c <tcp_input+0x248>
 8013a60:	4b10      	ldr	r3, [pc, #64]	; (8013aa4 <tcp_input+0x280>)
 8013a62:	22fc      	movs	r2, #252	; 0xfc
 8013a64:	4920      	ldr	r1, [pc, #128]	; (8013ae8 <tcp_input+0x2c4>)
 8013a66:	4811      	ldr	r0, [pc, #68]	; (8013aac <tcp_input+0x288>)
 8013a68:	f007 fc22 	bl	801b2b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	7d1b      	ldrb	r3, [r3, #20]
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d105      	bne.n	8013a80 <tcp_input+0x25c>
 8013a74:	4b0b      	ldr	r3, [pc, #44]	; (8013aa4 <tcp_input+0x280>)
 8013a76:	22fd      	movs	r2, #253	; 0xfd
 8013a78:	491c      	ldr	r1, [pc, #112]	; (8013aec <tcp_input+0x2c8>)
 8013a7a:	480c      	ldr	r0, [pc, #48]	; (8013aac <tcp_input+0x288>)
 8013a7c:	f007 fc18 	bl	801b2b0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	7a1b      	ldrb	r3, [r3, #8]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d033      	beq.n	8013af0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	7a1a      	ldrb	r2, [r3, #8]
 8013a8c:	4b09      	ldr	r3, [pc, #36]	; (8013ab4 <tcp_input+0x290>)
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013a94:	3301      	adds	r3, #1
 8013a96:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d029      	beq.n	8013af0 <tcp_input+0x2cc>
      prev = pcb;
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	61bb      	str	r3, [r7, #24]
      continue;
 8013aa0:	e06b      	b.n	8013b7a <tcp_input+0x356>
 8013aa2:	bf00      	nop
 8013aa4:	0801f5f8 	.word	0x0801f5f8
 8013aa8:	0801f62c 	.word	0x0801f62c
 8013aac:	0801f644 	.word	0x0801f644
 8013ab0:	200071e4 	.word	0x200071e4
 8013ab4:	200008e0 	.word	0x200008e0
 8013ab8:	200071e8 	.word	0x200071e8
 8013abc:	200071ec 	.word	0x200071ec
 8013ac0:	200071ea 	.word	0x200071ea
 8013ac4:	0801f66c 	.word	0x0801f66c
 8013ac8:	0801f67c 	.word	0x0801f67c
 8013acc:	0801f688 	.word	0x0801f688
 8013ad0:	200071f4 	.word	0x200071f4
 8013ad4:	200071f8 	.word	0x200071f8
 8013ad8:	20007200 	.word	0x20007200
 8013adc:	200071fe 	.word	0x200071fe
 8013ae0:	200071c8 	.word	0x200071c8
 8013ae4:	0801f6a8 	.word	0x0801f6a8
 8013ae8:	0801f6d0 	.word	0x0801f6d0
 8013aec:	0801f6fc 	.word	0x0801f6fc
    }

    if (pcb->remote_port == tcphdr->src &&
 8013af0:	69fb      	ldr	r3, [r7, #28]
 8013af2:	8b1a      	ldrh	r2, [r3, #24]
 8013af4:	4b72      	ldr	r3, [pc, #456]	; (8013cc0 <tcp_input+0x49c>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	881b      	ldrh	r3, [r3, #0]
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d13a      	bne.n	8013b76 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	8ada      	ldrh	r2, [r3, #22]
 8013b04:	4b6e      	ldr	r3, [pc, #440]	; (8013cc0 <tcp_input+0x49c>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	885b      	ldrh	r3, [r3, #2]
 8013b0a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d132      	bne.n	8013b76 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013b10:	69fb      	ldr	r3, [r7, #28]
 8013b12:	685a      	ldr	r2, [r3, #4]
 8013b14:	4b6b      	ldr	r3, [pc, #428]	; (8013cc4 <tcp_input+0x4a0>)
 8013b16:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d12c      	bne.n	8013b76 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013b1c:	69fb      	ldr	r3, [r7, #28]
 8013b1e:	681a      	ldr	r2, [r3, #0]
 8013b20:	4b68      	ldr	r3, [pc, #416]	; (8013cc4 <tcp_input+0x4a0>)
 8013b22:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d126      	bne.n	8013b76 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	68db      	ldr	r3, [r3, #12]
 8013b2c:	69fa      	ldr	r2, [r7, #28]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d106      	bne.n	8013b40 <tcp_input+0x31c>
 8013b32:	4b65      	ldr	r3, [pc, #404]	; (8013cc8 <tcp_input+0x4a4>)
 8013b34:	f240 120d 	movw	r2, #269	; 0x10d
 8013b38:	4964      	ldr	r1, [pc, #400]	; (8013ccc <tcp_input+0x4a8>)
 8013b3a:	4865      	ldr	r0, [pc, #404]	; (8013cd0 <tcp_input+0x4ac>)
 8013b3c:	f007 fbb8 	bl	801b2b0 <iprintf>
      if (prev != NULL) {
 8013b40:	69bb      	ldr	r3, [r7, #24]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d00a      	beq.n	8013b5c <tcp_input+0x338>
        prev->next = pcb->next;
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	68da      	ldr	r2, [r3, #12]
 8013b4a:	69bb      	ldr	r3, [r7, #24]
 8013b4c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013b4e:	4b61      	ldr	r3, [pc, #388]	; (8013cd4 <tcp_input+0x4b0>)
 8013b50:	681a      	ldr	r2, [r3, #0]
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013b56:	4a5f      	ldr	r2, [pc, #380]	; (8013cd4 <tcp_input+0x4b0>)
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013b5c:	69fb      	ldr	r3, [r7, #28]
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	69fa      	ldr	r2, [r7, #28]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d111      	bne.n	8013b8a <tcp_input+0x366>
 8013b66:	4b58      	ldr	r3, [pc, #352]	; (8013cc8 <tcp_input+0x4a4>)
 8013b68:	f240 1215 	movw	r2, #277	; 0x115
 8013b6c:	495a      	ldr	r1, [pc, #360]	; (8013cd8 <tcp_input+0x4b4>)
 8013b6e:	4858      	ldr	r0, [pc, #352]	; (8013cd0 <tcp_input+0x4ac>)
 8013b70:	f007 fb9e 	bl	801b2b0 <iprintf>
      break;
 8013b74:	e009      	b.n	8013b8a <tcp_input+0x366>
    }
    prev = pcb;
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b7a:	69fb      	ldr	r3, [r7, #28]
 8013b7c:	68db      	ldr	r3, [r3, #12]
 8013b7e:	61fb      	str	r3, [r7, #28]
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	f47f af5e 	bne.w	8013a44 <tcp_input+0x220>
 8013b88:	e000      	b.n	8013b8c <tcp_input+0x368>
      break;
 8013b8a:	bf00      	nop
  }

  if (pcb == NULL) {
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	f040 80aa 	bne.w	8013ce8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b94:	4b51      	ldr	r3, [pc, #324]	; (8013cdc <tcp_input+0x4b8>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	61fb      	str	r3, [r7, #28]
 8013b9a:	e03f      	b.n	8013c1c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013b9c:	69fb      	ldr	r3, [r7, #28]
 8013b9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ba0:	2b0a      	cmp	r3, #10
 8013ba2:	d006      	beq.n	8013bb2 <tcp_input+0x38e>
 8013ba4:	4b48      	ldr	r3, [pc, #288]	; (8013cc8 <tcp_input+0x4a4>)
 8013ba6:	f240 121f 	movw	r2, #287	; 0x11f
 8013baa:	494d      	ldr	r1, [pc, #308]	; (8013ce0 <tcp_input+0x4bc>)
 8013bac:	4848      	ldr	r0, [pc, #288]	; (8013cd0 <tcp_input+0x4ac>)
 8013bae:	f007 fb7f 	bl	801b2b0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bb2:	69fb      	ldr	r3, [r7, #28]
 8013bb4:	7a1b      	ldrb	r3, [r3, #8]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d009      	beq.n	8013bce <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	7a1a      	ldrb	r2, [r3, #8]
 8013bbe:	4b41      	ldr	r3, [pc, #260]	; (8013cc4 <tcp_input+0x4a0>)
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d122      	bne.n	8013c14 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	8b1a      	ldrh	r2, [r3, #24]
 8013bd2:	4b3b      	ldr	r3, [pc, #236]	; (8013cc0 <tcp_input+0x49c>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	881b      	ldrh	r3, [r3, #0]
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d11b      	bne.n	8013c16 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013bde:	69fb      	ldr	r3, [r7, #28]
 8013be0:	8ada      	ldrh	r2, [r3, #22]
 8013be2:	4b37      	ldr	r3, [pc, #220]	; (8013cc0 <tcp_input+0x49c>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	885b      	ldrh	r3, [r3, #2]
 8013be8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d113      	bne.n	8013c16 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013bee:	69fb      	ldr	r3, [r7, #28]
 8013bf0:	685a      	ldr	r2, [r3, #4]
 8013bf2:	4b34      	ldr	r3, [pc, #208]	; (8013cc4 <tcp_input+0x4a0>)
 8013bf4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d10d      	bne.n	8013c16 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	4b31      	ldr	r3, [pc, #196]	; (8013cc4 <tcp_input+0x4a0>)
 8013c00:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d107      	bne.n	8013c16 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013c06:	69f8      	ldr	r0, [r7, #28]
 8013c08:	f000 fb56 	bl	80142b8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f7fd fd3d 	bl	801168c <pbuf_free>
        return;
 8013c12:	e1fd      	b.n	8014010 <tcp_input+0x7ec>
        continue;
 8013c14:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c16:	69fb      	ldr	r3, [r7, #28]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	61fb      	str	r3, [r7, #28]
 8013c1c:	69fb      	ldr	r3, [r7, #28]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d1bc      	bne.n	8013b9c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013c22:	2300      	movs	r3, #0
 8013c24:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013c26:	4b2f      	ldr	r3, [pc, #188]	; (8013ce4 <tcp_input+0x4c0>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	617b      	str	r3, [r7, #20]
 8013c2c:	e02a      	b.n	8013c84 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	7a1b      	ldrb	r3, [r3, #8]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d00c      	beq.n	8013c50 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	7a1a      	ldrb	r2, [r3, #8]
 8013c3a:	4b22      	ldr	r3, [pc, #136]	; (8013cc4 <tcp_input+0x4a0>)
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c42:	3301      	adds	r3, #1
 8013c44:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d002      	beq.n	8013c50 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	61bb      	str	r3, [r7, #24]
        continue;
 8013c4e:	e016      	b.n	8013c7e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	8ada      	ldrh	r2, [r3, #22]
 8013c54:	4b1a      	ldr	r3, [pc, #104]	; (8013cc0 <tcp_input+0x49c>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	885b      	ldrh	r3, [r3, #2]
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d10c      	bne.n	8013c7a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013c60:	697b      	ldr	r3, [r7, #20]
 8013c62:	681a      	ldr	r2, [r3, #0]
 8013c64:	4b17      	ldr	r3, [pc, #92]	; (8013cc4 <tcp_input+0x4a0>)
 8013c66:	695b      	ldr	r3, [r3, #20]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d00f      	beq.n	8013c8c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d00d      	beq.n	8013c8e <tcp_input+0x46a>
 8013c72:	697b      	ldr	r3, [r7, #20]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d009      	beq.n	8013c8e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013c7a:	697b      	ldr	r3, [r7, #20]
 8013c7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	617b      	str	r3, [r7, #20]
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1d1      	bne.n	8013c2e <tcp_input+0x40a>
 8013c8a:	e000      	b.n	8013c8e <tcp_input+0x46a>
            break;
 8013c8c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d029      	beq.n	8013ce8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013c94:	69bb      	ldr	r3, [r7, #24]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d00a      	beq.n	8013cb0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	68da      	ldr	r2, [r3, #12]
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013ca2:	4b10      	ldr	r3, [pc, #64]	; (8013ce4 <tcp_input+0x4c0>)
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013caa:	4a0e      	ldr	r2, [pc, #56]	; (8013ce4 <tcp_input+0x4c0>)
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013cb0:	6978      	ldr	r0, [r7, #20]
 8013cb2:	f000 fa03 	bl	80140bc <tcp_listen_input>
      }
      pbuf_free(p);
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f7fd fce8 	bl	801168c <pbuf_free>
      return;
 8013cbc:	e1a8      	b.n	8014010 <tcp_input+0x7ec>
 8013cbe:	bf00      	nop
 8013cc0:	200071e4 	.word	0x200071e4
 8013cc4:	200008e0 	.word	0x200008e0
 8013cc8:	0801f5f8 	.word	0x0801f5f8
 8013ccc:	0801f724 	.word	0x0801f724
 8013cd0:	0801f644 	.word	0x0801f644
 8013cd4:	200071c8 	.word	0x200071c8
 8013cd8:	0801f750 	.word	0x0801f750
 8013cdc:	200071cc 	.word	0x200071cc
 8013ce0:	0801f77c 	.word	0x0801f77c
 8013ce4:	200071c4 	.word	0x200071c4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	f000 8158 	beq.w	8013fa0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013cf0:	4b95      	ldr	r3, [pc, #596]	; (8013f48 <tcp_input+0x724>)
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	891a      	ldrh	r2, [r3, #8]
 8013cfa:	4b93      	ldr	r3, [pc, #588]	; (8013f48 <tcp_input+0x724>)
 8013cfc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013cfe:	4a92      	ldr	r2, [pc, #584]	; (8013f48 <tcp_input+0x724>)
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013d04:	4b91      	ldr	r3, [pc, #580]	; (8013f4c <tcp_input+0x728>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	4a8f      	ldr	r2, [pc, #572]	; (8013f48 <tcp_input+0x724>)
 8013d0a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013d0c:	4b90      	ldr	r3, [pc, #576]	; (8013f50 <tcp_input+0x72c>)
 8013d0e:	2200      	movs	r2, #0
 8013d10:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013d12:	4b90      	ldr	r3, [pc, #576]	; (8013f54 <tcp_input+0x730>)
 8013d14:	2200      	movs	r2, #0
 8013d16:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013d18:	4b8f      	ldr	r3, [pc, #572]	; (8013f58 <tcp_input+0x734>)
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013d1e:	4b8f      	ldr	r3, [pc, #572]	; (8013f5c <tcp_input+0x738>)
 8013d20:	781b      	ldrb	r3, [r3, #0]
 8013d22:	f003 0308 	and.w	r3, r3, #8
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d006      	beq.n	8013d38 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	7b5b      	ldrb	r3, [r3, #13]
 8013d2e:	f043 0301 	orr.w	r3, r3, #1
 8013d32:	b2da      	uxtb	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013d38:	69fb      	ldr	r3, [r7, #28]
 8013d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d017      	beq.n	8013d70 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013d40:	69f8      	ldr	r0, [r7, #28]
 8013d42:	f7ff f877 	bl	8012e34 <tcp_process_refused_data>
 8013d46:	4603      	mov	r3, r0
 8013d48:	f113 0f0d 	cmn.w	r3, #13
 8013d4c:	d007      	beq.n	8013d5e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013d4e:	69fb      	ldr	r3, [r7, #28]
 8013d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d00c      	beq.n	8013d70 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013d56:	4b82      	ldr	r3, [pc, #520]	; (8013f60 <tcp_input+0x73c>)
 8013d58:	881b      	ldrh	r3, [r3, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d008      	beq.n	8013d70 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013d5e:	69fb      	ldr	r3, [r7, #28]
 8013d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	f040 80e4 	bne.w	8013f30 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013d68:	69f8      	ldr	r0, [r7, #28]
 8013d6a:	f003 fe05 	bl	8017978 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013d6e:	e0df      	b.n	8013f30 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013d70:	4a7c      	ldr	r2, [pc, #496]	; (8013f64 <tcp_input+0x740>)
 8013d72:	69fb      	ldr	r3, [r7, #28]
 8013d74:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013d76:	69f8      	ldr	r0, [r7, #28]
 8013d78:	f000 fb18 	bl	80143ac <tcp_process>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d84:	f113 0f0d 	cmn.w	r3, #13
 8013d88:	f000 80d4 	beq.w	8013f34 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013d8c:	4b71      	ldr	r3, [pc, #452]	; (8013f54 <tcp_input+0x730>)
 8013d8e:	781b      	ldrb	r3, [r3, #0]
 8013d90:	f003 0308 	and.w	r3, r3, #8
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d015      	beq.n	8013dc4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013d98:	69fb      	ldr	r3, [r7, #28]
 8013d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d008      	beq.n	8013db4 <tcp_input+0x590>
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013da8:	69fa      	ldr	r2, [r7, #28]
 8013daa:	6912      	ldr	r2, [r2, #16]
 8013dac:	f06f 010d 	mvn.w	r1, #13
 8013db0:	4610      	mov	r0, r2
 8013db2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013db4:	69f9      	ldr	r1, [r7, #28]
 8013db6:	486c      	ldr	r0, [pc, #432]	; (8013f68 <tcp_input+0x744>)
 8013db8:	f7ff fbbc 	bl	8013534 <tcp_pcb_remove>
        tcp_free(pcb);
 8013dbc:	69f8      	ldr	r0, [r7, #28]
 8013dbe:	f7fd ff97 	bl	8011cf0 <tcp_free>
 8013dc2:	e0da      	b.n	8013f7a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013dc8:	4b63      	ldr	r3, [pc, #396]	; (8013f58 <tcp_input+0x734>)
 8013dca:	881b      	ldrh	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d01d      	beq.n	8013e0c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013dd0:	4b61      	ldr	r3, [pc, #388]	; (8013f58 <tcp_input+0x734>)
 8013dd2:	881b      	ldrh	r3, [r3, #0]
 8013dd4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013dd6:	69fb      	ldr	r3, [r7, #28]
 8013dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d00a      	beq.n	8013df6 <tcp_input+0x5d2>
 8013de0:	69fb      	ldr	r3, [r7, #28]
 8013de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013de6:	69fa      	ldr	r2, [r7, #28]
 8013de8:	6910      	ldr	r0, [r2, #16]
 8013dea:	89fa      	ldrh	r2, [r7, #14]
 8013dec:	69f9      	ldr	r1, [r7, #28]
 8013dee:	4798      	blx	r3
 8013df0:	4603      	mov	r3, r0
 8013df2:	74fb      	strb	r3, [r7, #19]
 8013df4:	e001      	b.n	8013dfa <tcp_input+0x5d6>
 8013df6:	2300      	movs	r3, #0
 8013df8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013dfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013dfe:	f113 0f0d 	cmn.w	r3, #13
 8013e02:	f000 8099 	beq.w	8013f38 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013e06:	4b54      	ldr	r3, [pc, #336]	; (8013f58 <tcp_input+0x734>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013e0c:	69f8      	ldr	r0, [r7, #28]
 8013e0e:	f000 f915 	bl	801403c <tcp_input_delayed_close>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	f040 8091 	bne.w	8013f3c <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013e1a:	4b4d      	ldr	r3, [pc, #308]	; (8013f50 <tcp_input+0x72c>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d041      	beq.n	8013ea6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013e22:	69fb      	ldr	r3, [r7, #28]
 8013e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d006      	beq.n	8013e38 <tcp_input+0x614>
 8013e2a:	4b50      	ldr	r3, [pc, #320]	; (8013f6c <tcp_input+0x748>)
 8013e2c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013e30:	494f      	ldr	r1, [pc, #316]	; (8013f70 <tcp_input+0x74c>)
 8013e32:	4850      	ldr	r0, [pc, #320]	; (8013f74 <tcp_input+0x750>)
 8013e34:	f007 fa3c 	bl	801b2b0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	8b5b      	ldrh	r3, [r3, #26]
 8013e3c:	f003 0310 	and.w	r3, r3, #16
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d008      	beq.n	8013e56 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013e44:	4b42      	ldr	r3, [pc, #264]	; (8013f50 <tcp_input+0x72c>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7fd fc1f 	bl	801168c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013e4e:	69f8      	ldr	r0, [r7, #28]
 8013e50:	f7fe fa36 	bl	80122c0 <tcp_abort>
            goto aborted;
 8013e54:	e091      	b.n	8013f7a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d00c      	beq.n	8013e7a <tcp_input+0x656>
 8013e60:	69fb      	ldr	r3, [r7, #28]
 8013e62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013e66:	69fb      	ldr	r3, [r7, #28]
 8013e68:	6918      	ldr	r0, [r3, #16]
 8013e6a:	4b39      	ldr	r3, [pc, #228]	; (8013f50 <tcp_input+0x72c>)
 8013e6c:	681a      	ldr	r2, [r3, #0]
 8013e6e:	2300      	movs	r3, #0
 8013e70:	69f9      	ldr	r1, [r7, #28]
 8013e72:	47a0      	blx	r4
 8013e74:	4603      	mov	r3, r0
 8013e76:	74fb      	strb	r3, [r7, #19]
 8013e78:	e008      	b.n	8013e8c <tcp_input+0x668>
 8013e7a:	4b35      	ldr	r3, [pc, #212]	; (8013f50 <tcp_input+0x72c>)
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	2300      	movs	r3, #0
 8013e80:	69f9      	ldr	r1, [r7, #28]
 8013e82:	2000      	movs	r0, #0
 8013e84:	f7ff f8ae 	bl	8012fe4 <tcp_recv_null>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013e8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013e90:	f113 0f0d 	cmn.w	r3, #13
 8013e94:	d054      	beq.n	8013f40 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013e96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d003      	beq.n	8013ea6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013e9e:	4b2c      	ldr	r3, [pc, #176]	; (8013f50 <tcp_input+0x72c>)
 8013ea0:	681a      	ldr	r2, [r3, #0]
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013ea6:	4b2b      	ldr	r3, [pc, #172]	; (8013f54 <tcp_input+0x730>)
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	f003 0320 	and.w	r3, r3, #32
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d031      	beq.n	8013f16 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013eb2:	69fb      	ldr	r3, [r7, #28]
 8013eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d009      	beq.n	8013ece <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ebe:	7b5a      	ldrb	r2, [r3, #13]
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ec4:	f042 0220 	orr.w	r2, r2, #32
 8013ec8:	b2d2      	uxtb	r2, r2
 8013eca:	735a      	strb	r2, [r3, #13]
 8013ecc:	e023      	b.n	8013f16 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013ece:	69fb      	ldr	r3, [r7, #28]
 8013ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ed2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	d005      	beq.n	8013ee6 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8013eda:	69fb      	ldr	r3, [r7, #28]
 8013edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ede:	3301      	adds	r3, #1
 8013ee0:	b29a      	uxth	r2, r3
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013ee6:	69fb      	ldr	r3, [r7, #28]
 8013ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d00b      	beq.n	8013f08 <tcp_input+0x6e4>
 8013ef0:	69fb      	ldr	r3, [r7, #28]
 8013ef2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013ef6:	69fb      	ldr	r3, [r7, #28]
 8013ef8:	6918      	ldr	r0, [r3, #16]
 8013efa:	2300      	movs	r3, #0
 8013efc:	2200      	movs	r2, #0
 8013efe:	69f9      	ldr	r1, [r7, #28]
 8013f00:	47a0      	blx	r4
 8013f02:	4603      	mov	r3, r0
 8013f04:	74fb      	strb	r3, [r7, #19]
 8013f06:	e001      	b.n	8013f0c <tcp_input+0x6e8>
 8013f08:	2300      	movs	r3, #0
 8013f0a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013f0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f10:	f113 0f0d 	cmn.w	r3, #13
 8013f14:	d016      	beq.n	8013f44 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013f16:	4b13      	ldr	r3, [pc, #76]	; (8013f64 <tcp_input+0x740>)
 8013f18:	2200      	movs	r2, #0
 8013f1a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013f1c:	69f8      	ldr	r0, [r7, #28]
 8013f1e:	f000 f88d 	bl	801403c <tcp_input_delayed_close>
 8013f22:	4603      	mov	r3, r0
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d127      	bne.n	8013f78 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013f28:	69f8      	ldr	r0, [r7, #28]
 8013f2a:	f002 ff1f 	bl	8016d6c <tcp_output>
 8013f2e:	e024      	b.n	8013f7a <tcp_input+0x756>
        goto aborted;
 8013f30:	bf00      	nop
 8013f32:	e022      	b.n	8013f7a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013f34:	bf00      	nop
 8013f36:	e020      	b.n	8013f7a <tcp_input+0x756>
              goto aborted;
 8013f38:	bf00      	nop
 8013f3a:	e01e      	b.n	8013f7a <tcp_input+0x756>
          goto aborted;
 8013f3c:	bf00      	nop
 8013f3e:	e01c      	b.n	8013f7a <tcp_input+0x756>
            goto aborted;
 8013f40:	bf00      	nop
 8013f42:	e01a      	b.n	8013f7a <tcp_input+0x756>
              goto aborted;
 8013f44:	bf00      	nop
 8013f46:	e018      	b.n	8013f7a <tcp_input+0x756>
 8013f48:	200071d4 	.word	0x200071d4
 8013f4c:	200071e4 	.word	0x200071e4
 8013f50:	20007204 	.word	0x20007204
 8013f54:	20007201 	.word	0x20007201
 8013f58:	200071fc 	.word	0x200071fc
 8013f5c:	20007200 	.word	0x20007200
 8013f60:	200071fe 	.word	0x200071fe
 8013f64:	20007208 	.word	0x20007208
 8013f68:	200071c8 	.word	0x200071c8
 8013f6c:	0801f5f8 	.word	0x0801f5f8
 8013f70:	0801f7ac 	.word	0x0801f7ac
 8013f74:	0801f644 	.word	0x0801f644
          goto aborted;
 8013f78:	bf00      	nop
    tcp_input_pcb = NULL;
 8013f7a:	4b27      	ldr	r3, [pc, #156]	; (8014018 <tcp_input+0x7f4>)
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013f80:	4b26      	ldr	r3, [pc, #152]	; (801401c <tcp_input+0x7f8>)
 8013f82:	2200      	movs	r2, #0
 8013f84:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013f86:	4b26      	ldr	r3, [pc, #152]	; (8014020 <tcp_input+0x7fc>)
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d03f      	beq.n	801400e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013f8e:	4b24      	ldr	r3, [pc, #144]	; (8014020 <tcp_input+0x7fc>)
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fd fb7a 	bl	801168c <pbuf_free>
      inseg.p = NULL;
 8013f98:	4b21      	ldr	r3, [pc, #132]	; (8014020 <tcp_input+0x7fc>)
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013f9e:	e036      	b.n	801400e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013fa0:	4b20      	ldr	r3, [pc, #128]	; (8014024 <tcp_input+0x800>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	899b      	ldrh	r3, [r3, #12]
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7fb ff6b 	bl	800fe84 <lwip_htons>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	f003 0304 	and.w	r3, r3, #4
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d118      	bne.n	8013fec <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fba:	4b1b      	ldr	r3, [pc, #108]	; (8014028 <tcp_input+0x804>)
 8013fbc:	6819      	ldr	r1, [r3, #0]
 8013fbe:	4b1b      	ldr	r3, [pc, #108]	; (801402c <tcp_input+0x808>)
 8013fc0:	881b      	ldrh	r3, [r3, #0]
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	4b1a      	ldr	r3, [pc, #104]	; (8014030 <tcp_input+0x80c>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fca:	4b16      	ldr	r3, [pc, #88]	; (8014024 <tcp_input+0x800>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fce:	885b      	ldrh	r3, [r3, #2]
 8013fd0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fd2:	4a14      	ldr	r2, [pc, #80]	; (8014024 <tcp_input+0x800>)
 8013fd4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fd6:	8812      	ldrh	r2, [r2, #0]
 8013fd8:	b292      	uxth	r2, r2
 8013fda:	9202      	str	r2, [sp, #8]
 8013fdc:	9301      	str	r3, [sp, #4]
 8013fde:	4b15      	ldr	r3, [pc, #84]	; (8014034 <tcp_input+0x810>)
 8013fe0:	9300      	str	r3, [sp, #0]
 8013fe2:	4b15      	ldr	r3, [pc, #84]	; (8014038 <tcp_input+0x814>)
 8013fe4:	4602      	mov	r2, r0
 8013fe6:	2000      	movs	r0, #0
 8013fe8:	f003 fc74 	bl	80178d4 <tcp_rst>
    pbuf_free(p);
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f7fd fb4d 	bl	801168c <pbuf_free>
  return;
 8013ff2:	e00c      	b.n	801400e <tcp_input+0x7ea>
    goto dropped;
 8013ff4:	bf00      	nop
 8013ff6:	e006      	b.n	8014006 <tcp_input+0x7e2>
    goto dropped;
 8013ff8:	bf00      	nop
 8013ffa:	e004      	b.n	8014006 <tcp_input+0x7e2>
    goto dropped;
 8013ffc:	bf00      	nop
 8013ffe:	e002      	b.n	8014006 <tcp_input+0x7e2>
      goto dropped;
 8014000:	bf00      	nop
 8014002:	e000      	b.n	8014006 <tcp_input+0x7e2>
      goto dropped;
 8014004:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f7fd fb40 	bl	801168c <pbuf_free>
 801400c:	e000      	b.n	8014010 <tcp_input+0x7ec>
  return;
 801400e:	bf00      	nop
}
 8014010:	3724      	adds	r7, #36	; 0x24
 8014012:	46bd      	mov	sp, r7
 8014014:	bd90      	pop	{r4, r7, pc}
 8014016:	bf00      	nop
 8014018:	20007208 	.word	0x20007208
 801401c:	20007204 	.word	0x20007204
 8014020:	200071d4 	.word	0x200071d4
 8014024:	200071e4 	.word	0x200071e4
 8014028:	200071f8 	.word	0x200071f8
 801402c:	200071fe 	.word	0x200071fe
 8014030:	200071f4 	.word	0x200071f4
 8014034:	200008f0 	.word	0x200008f0
 8014038:	200008f4 	.word	0x200008f4

0801403c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d106      	bne.n	8014058 <tcp_input_delayed_close+0x1c>
 801404a:	4b17      	ldr	r3, [pc, #92]	; (80140a8 <tcp_input_delayed_close+0x6c>)
 801404c:	f240 225a 	movw	r2, #602	; 0x25a
 8014050:	4916      	ldr	r1, [pc, #88]	; (80140ac <tcp_input_delayed_close+0x70>)
 8014052:	4817      	ldr	r0, [pc, #92]	; (80140b0 <tcp_input_delayed_close+0x74>)
 8014054:	f007 f92c 	bl	801b2b0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014058:	4b16      	ldr	r3, [pc, #88]	; (80140b4 <tcp_input_delayed_close+0x78>)
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	f003 0310 	and.w	r3, r3, #16
 8014060:	2b00      	cmp	r3, #0
 8014062:	d01c      	beq.n	801409e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	8b5b      	ldrh	r3, [r3, #26]
 8014068:	f003 0310 	and.w	r3, r3, #16
 801406c:	2b00      	cmp	r3, #0
 801406e:	d10d      	bne.n	801408c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014076:	2b00      	cmp	r3, #0
 8014078:	d008      	beq.n	801408c <tcp_input_delayed_close+0x50>
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014080:	687a      	ldr	r2, [r7, #4]
 8014082:	6912      	ldr	r2, [r2, #16]
 8014084:	f06f 010e 	mvn.w	r1, #14
 8014088:	4610      	mov	r0, r2
 801408a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801408c:	6879      	ldr	r1, [r7, #4]
 801408e:	480a      	ldr	r0, [pc, #40]	; (80140b8 <tcp_input_delayed_close+0x7c>)
 8014090:	f7ff fa50 	bl	8013534 <tcp_pcb_remove>
    tcp_free(pcb);
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f7fd fe2b 	bl	8011cf0 <tcp_free>
    return 1;
 801409a:	2301      	movs	r3, #1
 801409c:	e000      	b.n	80140a0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801409e:	2300      	movs	r3, #0
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3708      	adds	r7, #8
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}
 80140a8:	0801f5f8 	.word	0x0801f5f8
 80140ac:	0801f7c8 	.word	0x0801f7c8
 80140b0:	0801f644 	.word	0x0801f644
 80140b4:	20007201 	.word	0x20007201
 80140b8:	200071c8 	.word	0x200071c8

080140bc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80140bc:	b590      	push	{r4, r7, lr}
 80140be:	b08b      	sub	sp, #44	; 0x2c
 80140c0:	af04      	add	r7, sp, #16
 80140c2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80140c4:	4b6f      	ldr	r3, [pc, #444]	; (8014284 <tcp_listen_input+0x1c8>)
 80140c6:	781b      	ldrb	r3, [r3, #0]
 80140c8:	f003 0304 	and.w	r3, r3, #4
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	f040 80d2 	bne.w	8014276 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d106      	bne.n	80140e6 <tcp_listen_input+0x2a>
 80140d8:	4b6b      	ldr	r3, [pc, #428]	; (8014288 <tcp_listen_input+0x1cc>)
 80140da:	f240 2281 	movw	r2, #641	; 0x281
 80140de:	496b      	ldr	r1, [pc, #428]	; (801428c <tcp_listen_input+0x1d0>)
 80140e0:	486b      	ldr	r0, [pc, #428]	; (8014290 <tcp_listen_input+0x1d4>)
 80140e2:	f007 f8e5 	bl	801b2b0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80140e6:	4b67      	ldr	r3, [pc, #412]	; (8014284 <tcp_listen_input+0x1c8>)
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	f003 0310 	and.w	r3, r3, #16
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d019      	beq.n	8014126 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80140f2:	4b68      	ldr	r3, [pc, #416]	; (8014294 <tcp_listen_input+0x1d8>)
 80140f4:	6819      	ldr	r1, [r3, #0]
 80140f6:	4b68      	ldr	r3, [pc, #416]	; (8014298 <tcp_listen_input+0x1dc>)
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	461a      	mov	r2, r3
 80140fc:	4b67      	ldr	r3, [pc, #412]	; (801429c <tcp_listen_input+0x1e0>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014102:	4b67      	ldr	r3, [pc, #412]	; (80142a0 <tcp_listen_input+0x1e4>)
 8014104:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014106:	885b      	ldrh	r3, [r3, #2]
 8014108:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801410a:	4a65      	ldr	r2, [pc, #404]	; (80142a0 <tcp_listen_input+0x1e4>)
 801410c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801410e:	8812      	ldrh	r2, [r2, #0]
 8014110:	b292      	uxth	r2, r2
 8014112:	9202      	str	r2, [sp, #8]
 8014114:	9301      	str	r3, [sp, #4]
 8014116:	4b63      	ldr	r3, [pc, #396]	; (80142a4 <tcp_listen_input+0x1e8>)
 8014118:	9300      	str	r3, [sp, #0]
 801411a:	4b63      	ldr	r3, [pc, #396]	; (80142a8 <tcp_listen_input+0x1ec>)
 801411c:	4602      	mov	r2, r0
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f003 fbd8 	bl	80178d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014124:	e0a9      	b.n	801427a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014126:	4b57      	ldr	r3, [pc, #348]	; (8014284 <tcp_listen_input+0x1c8>)
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	f003 0302 	and.w	r3, r3, #2
 801412e:	2b00      	cmp	r3, #0
 8014130:	f000 80a3 	beq.w	801427a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	7d5b      	ldrb	r3, [r3, #21]
 8014138:	4618      	mov	r0, r3
 801413a:	f7ff f877 	bl	801322c <tcp_alloc>
 801413e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d111      	bne.n	801416a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	699b      	ldr	r3, [r3, #24]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00a      	beq.n	8014164 <tcp_listen_input+0xa8>
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	699b      	ldr	r3, [r3, #24]
 8014152:	687a      	ldr	r2, [r7, #4]
 8014154:	6910      	ldr	r0, [r2, #16]
 8014156:	f04f 32ff 	mov.w	r2, #4294967295
 801415a:	2100      	movs	r1, #0
 801415c:	4798      	blx	r3
 801415e:	4603      	mov	r3, r0
 8014160:	73bb      	strb	r3, [r7, #14]
      return;
 8014162:	e08b      	b.n	801427c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014164:	23f0      	movs	r3, #240	; 0xf0
 8014166:	73bb      	strb	r3, [r7, #14]
      return;
 8014168:	e088      	b.n	801427c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801416a:	4b50      	ldr	r3, [pc, #320]	; (80142ac <tcp_listen_input+0x1f0>)
 801416c:	695a      	ldr	r2, [r3, #20]
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014172:	4b4e      	ldr	r3, [pc, #312]	; (80142ac <tcp_listen_input+0x1f0>)
 8014174:	691a      	ldr	r2, [r3, #16]
 8014176:	697b      	ldr	r3, [r7, #20]
 8014178:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	8ada      	ldrh	r2, [r3, #22]
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014182:	4b47      	ldr	r3, [pc, #284]	; (80142a0 <tcp_listen_input+0x1e4>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	881b      	ldrh	r3, [r3, #0]
 8014188:	b29a      	uxth	r2, r3
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	2203      	movs	r2, #3
 8014192:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014194:	4b41      	ldr	r3, [pc, #260]	; (801429c <tcp_listen_input+0x1e0>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	1c5a      	adds	r2, r3, #1
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80141a6:	6978      	ldr	r0, [r7, #20]
 80141a8:	f7ff fa58 	bl	801365c <tcp_next_iss>
 80141ac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	693a      	ldr	r2, [r7, #16]
 80141b2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	693a      	ldr	r2, [r7, #16]
 80141b8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	693a      	ldr	r2, [r7, #16]
 80141be:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	693a      	ldr	r2, [r7, #16]
 80141c4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80141c6:	4b35      	ldr	r3, [pc, #212]	; (801429c <tcp_listen_input+0x1e0>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	1e5a      	subs	r2, r3, #1
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	691a      	ldr	r2, [r3, #16]
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	687a      	ldr	r2, [r7, #4]
 80141dc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	7a5b      	ldrb	r3, [r3, #9]
 80141e2:	f003 030c 	and.w	r3, r3, #12
 80141e6:	b2da      	uxtb	r2, r3
 80141e8:	697b      	ldr	r3, [r7, #20]
 80141ea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	7a1a      	ldrb	r2, [r3, #8]
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80141f4:	4b2e      	ldr	r3, [pc, #184]	; (80142b0 <tcp_listen_input+0x1f4>)
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	60da      	str	r2, [r3, #12]
 80141fc:	4a2c      	ldr	r2, [pc, #176]	; (80142b0 <tcp_listen_input+0x1f4>)
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	6013      	str	r3, [r2, #0]
 8014202:	f003 fd29 	bl	8017c58 <tcp_timer_needed>
 8014206:	4b2b      	ldr	r3, [pc, #172]	; (80142b4 <tcp_listen_input+0x1f8>)
 8014208:	2201      	movs	r2, #1
 801420a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801420c:	6978      	ldr	r0, [r7, #20]
 801420e:	f001 fd8f 	bl	8015d30 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014212:	4b23      	ldr	r3, [pc, #140]	; (80142a0 <tcp_listen_input+0x1e4>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	89db      	ldrh	r3, [r3, #14]
 8014218:	b29a      	uxth	r2, r3
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	3304      	adds	r3, #4
 8014234:	4618      	mov	r0, r3
 8014236:	f005 f913 	bl	8019460 <ip4_route>
 801423a:	4601      	mov	r1, r0
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	3304      	adds	r3, #4
 8014240:	461a      	mov	r2, r3
 8014242:	4620      	mov	r0, r4
 8014244:	f7ff fa30 	bl	80136a8 <tcp_eff_send_mss_netif>
 8014248:	4603      	mov	r3, r0
 801424a:	461a      	mov	r2, r3
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014250:	2112      	movs	r1, #18
 8014252:	6978      	ldr	r0, [r7, #20]
 8014254:	f002 fc9c 	bl	8016b90 <tcp_enqueue_flags>
 8014258:	4603      	mov	r3, r0
 801425a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801425c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d004      	beq.n	801426e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014264:	2100      	movs	r1, #0
 8014266:	6978      	ldr	r0, [r7, #20]
 8014268:	f7fd ff6c 	bl	8012144 <tcp_abandon>
      return;
 801426c:	e006      	b.n	801427c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801426e:	6978      	ldr	r0, [r7, #20]
 8014270:	f002 fd7c 	bl	8016d6c <tcp_output>
  return;
 8014274:	e001      	b.n	801427a <tcp_listen_input+0x1be>
    return;
 8014276:	bf00      	nop
 8014278:	e000      	b.n	801427c <tcp_listen_input+0x1c0>
  return;
 801427a:	bf00      	nop
}
 801427c:	371c      	adds	r7, #28
 801427e:	46bd      	mov	sp, r7
 8014280:	bd90      	pop	{r4, r7, pc}
 8014282:	bf00      	nop
 8014284:	20007200 	.word	0x20007200
 8014288:	0801f5f8 	.word	0x0801f5f8
 801428c:	0801f7f0 	.word	0x0801f7f0
 8014290:	0801f644 	.word	0x0801f644
 8014294:	200071f8 	.word	0x200071f8
 8014298:	200071fe 	.word	0x200071fe
 801429c:	200071f4 	.word	0x200071f4
 80142a0:	200071e4 	.word	0x200071e4
 80142a4:	200008f0 	.word	0x200008f0
 80142a8:	200008f4 	.word	0x200008f4
 80142ac:	200008e0 	.word	0x200008e0
 80142b0:	200071c8 	.word	0x200071c8
 80142b4:	200071d0 	.word	0x200071d0

080142b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b086      	sub	sp, #24
 80142bc:	af04      	add	r7, sp, #16
 80142be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80142c0:	4b2f      	ldr	r3, [pc, #188]	; (8014380 <tcp_timewait_input+0xc8>)
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	f003 0304 	and.w	r3, r3, #4
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d153      	bne.n	8014374 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d106      	bne.n	80142e0 <tcp_timewait_input+0x28>
 80142d2:	4b2c      	ldr	r3, [pc, #176]	; (8014384 <tcp_timewait_input+0xcc>)
 80142d4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80142d8:	492b      	ldr	r1, [pc, #172]	; (8014388 <tcp_timewait_input+0xd0>)
 80142da:	482c      	ldr	r0, [pc, #176]	; (801438c <tcp_timewait_input+0xd4>)
 80142dc:	f006 ffe8 	bl	801b2b0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80142e0:	4b27      	ldr	r3, [pc, #156]	; (8014380 <tcp_timewait_input+0xc8>)
 80142e2:	781b      	ldrb	r3, [r3, #0]
 80142e4:	f003 0302 	and.w	r3, r3, #2
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d02a      	beq.n	8014342 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80142ec:	4b28      	ldr	r3, [pc, #160]	; (8014390 <tcp_timewait_input+0xd8>)
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f4:	1ad3      	subs	r3, r2, r3
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	db2d      	blt.n	8014356 <tcp_timewait_input+0x9e>
 80142fa:	4b25      	ldr	r3, [pc, #148]	; (8014390 <tcp_timewait_input+0xd8>)
 80142fc:	681a      	ldr	r2, [r3, #0]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014302:	6879      	ldr	r1, [r7, #4]
 8014304:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014306:	440b      	add	r3, r1
 8014308:	1ad3      	subs	r3, r2, r3
 801430a:	2b00      	cmp	r3, #0
 801430c:	dc23      	bgt.n	8014356 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801430e:	4b21      	ldr	r3, [pc, #132]	; (8014394 <tcp_timewait_input+0xdc>)
 8014310:	6819      	ldr	r1, [r3, #0]
 8014312:	4b21      	ldr	r3, [pc, #132]	; (8014398 <tcp_timewait_input+0xe0>)
 8014314:	881b      	ldrh	r3, [r3, #0]
 8014316:	461a      	mov	r2, r3
 8014318:	4b1d      	ldr	r3, [pc, #116]	; (8014390 <tcp_timewait_input+0xd8>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801431e:	4b1f      	ldr	r3, [pc, #124]	; (801439c <tcp_timewait_input+0xe4>)
 8014320:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014322:	885b      	ldrh	r3, [r3, #2]
 8014324:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014326:	4a1d      	ldr	r2, [pc, #116]	; (801439c <tcp_timewait_input+0xe4>)
 8014328:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801432a:	8812      	ldrh	r2, [r2, #0]
 801432c:	b292      	uxth	r2, r2
 801432e:	9202      	str	r2, [sp, #8]
 8014330:	9301      	str	r3, [sp, #4]
 8014332:	4b1b      	ldr	r3, [pc, #108]	; (80143a0 <tcp_timewait_input+0xe8>)
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	4b1b      	ldr	r3, [pc, #108]	; (80143a4 <tcp_timewait_input+0xec>)
 8014338:	4602      	mov	r2, r0
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f003 faca 	bl	80178d4 <tcp_rst>
      return;
 8014340:	e01b      	b.n	801437a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014342:	4b0f      	ldr	r3, [pc, #60]	; (8014380 <tcp_timewait_input+0xc8>)
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	f003 0301 	and.w	r3, r3, #1
 801434a:	2b00      	cmp	r3, #0
 801434c:	d003      	beq.n	8014356 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801434e:	4b16      	ldr	r3, [pc, #88]	; (80143a8 <tcp_timewait_input+0xf0>)
 8014350:	681a      	ldr	r2, [r3, #0]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014356:	4b10      	ldr	r3, [pc, #64]	; (8014398 <tcp_timewait_input+0xe0>)
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d00c      	beq.n	8014378 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	8b5b      	ldrh	r3, [r3, #26]
 8014362:	f043 0302 	orr.w	r3, r3, #2
 8014366:	b29a      	uxth	r2, r3
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f002 fcfd 	bl	8016d6c <tcp_output>
  }
  return;
 8014372:	e001      	b.n	8014378 <tcp_timewait_input+0xc0>
    return;
 8014374:	bf00      	nop
 8014376:	e000      	b.n	801437a <tcp_timewait_input+0xc2>
  return;
 8014378:	bf00      	nop
}
 801437a:	3708      	adds	r7, #8
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}
 8014380:	20007200 	.word	0x20007200
 8014384:	0801f5f8 	.word	0x0801f5f8
 8014388:	0801f810 	.word	0x0801f810
 801438c:	0801f644 	.word	0x0801f644
 8014390:	200071f4 	.word	0x200071f4
 8014394:	200071f8 	.word	0x200071f8
 8014398:	200071fe 	.word	0x200071fe
 801439c:	200071e4 	.word	0x200071e4
 80143a0:	200008f0 	.word	0x200008f0
 80143a4:	200008f4 	.word	0x200008f4
 80143a8:	200071bc 	.word	0x200071bc

080143ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80143ac:	b590      	push	{r4, r7, lr}
 80143ae:	b08d      	sub	sp, #52	; 0x34
 80143b0:	af04      	add	r7, sp, #16
 80143b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80143b4:	2300      	movs	r3, #0
 80143b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80143b8:	2300      	movs	r3, #0
 80143ba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d106      	bne.n	80143d0 <tcp_process+0x24>
 80143c2:	4b9d      	ldr	r3, [pc, #628]	; (8014638 <tcp_process+0x28c>)
 80143c4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80143c8:	499c      	ldr	r1, [pc, #624]	; (801463c <tcp_process+0x290>)
 80143ca:	489d      	ldr	r0, [pc, #628]	; (8014640 <tcp_process+0x294>)
 80143cc:	f006 ff70 	bl	801b2b0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80143d0:	4b9c      	ldr	r3, [pc, #624]	; (8014644 <tcp_process+0x298>)
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	f003 0304 	and.w	r3, r3, #4
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d04e      	beq.n	801447a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	7d1b      	ldrb	r3, [r3, #20]
 80143e0:	2b02      	cmp	r3, #2
 80143e2:	d108      	bne.n	80143f6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143e8:	4b97      	ldr	r3, [pc, #604]	; (8014648 <tcp_process+0x29c>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d123      	bne.n	8014438 <tcp_process+0x8c>
        acceptable = 1;
 80143f0:	2301      	movs	r3, #1
 80143f2:	76fb      	strb	r3, [r7, #27]
 80143f4:	e020      	b.n	8014438 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80143fa:	4b94      	ldr	r3, [pc, #592]	; (801464c <tcp_process+0x2a0>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	429a      	cmp	r2, r3
 8014400:	d102      	bne.n	8014408 <tcp_process+0x5c>
        acceptable = 1;
 8014402:	2301      	movs	r3, #1
 8014404:	76fb      	strb	r3, [r7, #27]
 8014406:	e017      	b.n	8014438 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014408:	4b90      	ldr	r3, [pc, #576]	; (801464c <tcp_process+0x2a0>)
 801440a:	681a      	ldr	r2, [r3, #0]
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014410:	1ad3      	subs	r3, r2, r3
 8014412:	2b00      	cmp	r3, #0
 8014414:	db10      	blt.n	8014438 <tcp_process+0x8c>
 8014416:	4b8d      	ldr	r3, [pc, #564]	; (801464c <tcp_process+0x2a0>)
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801441e:	6879      	ldr	r1, [r7, #4]
 8014420:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014422:	440b      	add	r3, r1
 8014424:	1ad3      	subs	r3, r2, r3
 8014426:	2b00      	cmp	r3, #0
 8014428:	dc06      	bgt.n	8014438 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	8b5b      	ldrh	r3, [r3, #26]
 801442e:	f043 0302 	orr.w	r3, r3, #2
 8014432:	b29a      	uxth	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014438:	7efb      	ldrb	r3, [r7, #27]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d01b      	beq.n	8014476 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	7d1b      	ldrb	r3, [r3, #20]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d106      	bne.n	8014454 <tcp_process+0xa8>
 8014446:	4b7c      	ldr	r3, [pc, #496]	; (8014638 <tcp_process+0x28c>)
 8014448:	f44f 724e 	mov.w	r2, #824	; 0x338
 801444c:	4980      	ldr	r1, [pc, #512]	; (8014650 <tcp_process+0x2a4>)
 801444e:	487c      	ldr	r0, [pc, #496]	; (8014640 <tcp_process+0x294>)
 8014450:	f006 ff2e 	bl	801b2b0 <iprintf>
      recv_flags |= TF_RESET;
 8014454:	4b7f      	ldr	r3, [pc, #508]	; (8014654 <tcp_process+0x2a8>)
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	f043 0308 	orr.w	r3, r3, #8
 801445c:	b2da      	uxtb	r2, r3
 801445e:	4b7d      	ldr	r3, [pc, #500]	; (8014654 <tcp_process+0x2a8>)
 8014460:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	8b5b      	ldrh	r3, [r3, #26]
 8014466:	f023 0301 	bic.w	r3, r3, #1
 801446a:	b29a      	uxth	r2, r3
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014470:	f06f 030d 	mvn.w	r3, #13
 8014474:	e37a      	b.n	8014b6c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014476:	2300      	movs	r3, #0
 8014478:	e378      	b.n	8014b6c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801447a:	4b72      	ldr	r3, [pc, #456]	; (8014644 <tcp_process+0x298>)
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	f003 0302 	and.w	r3, r3, #2
 8014482:	2b00      	cmp	r3, #0
 8014484:	d010      	beq.n	80144a8 <tcp_process+0xfc>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	7d1b      	ldrb	r3, [r3, #20]
 801448a:	2b02      	cmp	r3, #2
 801448c:	d00c      	beq.n	80144a8 <tcp_process+0xfc>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	7d1b      	ldrb	r3, [r3, #20]
 8014492:	2b03      	cmp	r3, #3
 8014494:	d008      	beq.n	80144a8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	8b5b      	ldrh	r3, [r3, #26]
 801449a:	f043 0302 	orr.w	r3, r3, #2
 801449e:	b29a      	uxth	r2, r3
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80144a4:	2300      	movs	r3, #0
 80144a6:	e361      	b.n	8014b6c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	8b5b      	ldrh	r3, [r3, #26]
 80144ac:	f003 0310 	and.w	r3, r3, #16
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d103      	bne.n	80144bc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80144b4:	4b68      	ldr	r3, [pc, #416]	; (8014658 <tcp_process+0x2ac>)
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2200      	movs	r2, #0
 80144c0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2200      	movs	r2, #0
 80144c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f001 fc2f 	bl	8015d30 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	7d1b      	ldrb	r3, [r3, #20]
 80144d6:	3b02      	subs	r3, #2
 80144d8:	2b07      	cmp	r3, #7
 80144da:	f200 8337 	bhi.w	8014b4c <tcp_process+0x7a0>
 80144de:	a201      	add	r2, pc, #4	; (adr r2, 80144e4 <tcp_process+0x138>)
 80144e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144e4:	08014505 	.word	0x08014505
 80144e8:	08014735 	.word	0x08014735
 80144ec:	080148ad 	.word	0x080148ad
 80144f0:	080148d7 	.word	0x080148d7
 80144f4:	080149fb 	.word	0x080149fb
 80144f8:	080148ad 	.word	0x080148ad
 80144fc:	08014a87 	.word	0x08014a87
 8014500:	08014b17 	.word	0x08014b17
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014504:	4b4f      	ldr	r3, [pc, #316]	; (8014644 <tcp_process+0x298>)
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	f003 0310 	and.w	r3, r3, #16
 801450c:	2b00      	cmp	r3, #0
 801450e:	f000 80e4 	beq.w	80146da <tcp_process+0x32e>
 8014512:	4b4c      	ldr	r3, [pc, #304]	; (8014644 <tcp_process+0x298>)
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	f003 0302 	and.w	r3, r3, #2
 801451a:	2b00      	cmp	r3, #0
 801451c:	f000 80dd 	beq.w	80146da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014524:	1c5a      	adds	r2, r3, #1
 8014526:	4b48      	ldr	r3, [pc, #288]	; (8014648 <tcp_process+0x29c>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	429a      	cmp	r2, r3
 801452c:	f040 80d5 	bne.w	80146da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014530:	4b46      	ldr	r3, [pc, #280]	; (801464c <tcp_process+0x2a0>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	1c5a      	adds	r2, r3, #1
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014542:	4b41      	ldr	r3, [pc, #260]	; (8014648 <tcp_process+0x29c>)
 8014544:	681a      	ldr	r2, [r3, #0]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801454a:	4b44      	ldr	r3, [pc, #272]	; (801465c <tcp_process+0x2b0>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	89db      	ldrh	r3, [r3, #14]
 8014550:	b29a      	uxth	r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014564:	4b39      	ldr	r3, [pc, #228]	; (801464c <tcp_process+0x2a0>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	1e5a      	subs	r2, r3, #1
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2204      	movs	r2, #4
 8014572:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	3304      	adds	r3, #4
 801457c:	4618      	mov	r0, r3
 801457e:	f004 ff6f 	bl	8019460 <ip4_route>
 8014582:	4601      	mov	r1, r0
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	3304      	adds	r3, #4
 8014588:	461a      	mov	r2, r3
 801458a:	4620      	mov	r0, r4
 801458c:	f7ff f88c 	bl	80136a8 <tcp_eff_send_mss_netif>
 8014590:	4603      	mov	r3, r0
 8014592:	461a      	mov	r2, r3
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801459c:	009a      	lsls	r2, r3, #2
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145a2:	005b      	lsls	r3, r3, #1
 80145a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80145a8:	428b      	cmp	r3, r1
 80145aa:	bf38      	it	cc
 80145ac:	460b      	movcc	r3, r1
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d204      	bcs.n	80145bc <tcp_process+0x210>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145b6:	009b      	lsls	r3, r3, #2
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	e00d      	b.n	80145d8 <tcp_process+0x22c>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145c0:	005b      	lsls	r3, r3, #1
 80145c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80145c6:	4293      	cmp	r3, r2
 80145c8:	d904      	bls.n	80145d4 <tcp_process+0x228>
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145ce:	005b      	lsls	r3, r3, #1
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	e001      	b.n	80145d8 <tcp_process+0x22c>
 80145d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d106      	bne.n	80145f6 <tcp_process+0x24a>
 80145e8:	4b13      	ldr	r3, [pc, #76]	; (8014638 <tcp_process+0x28c>)
 80145ea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80145ee:	491c      	ldr	r1, [pc, #112]	; (8014660 <tcp_process+0x2b4>)
 80145f0:	4813      	ldr	r0, [pc, #76]	; (8014640 <tcp_process+0x294>)
 80145f2:	f006 fe5d 	bl	801b2b0 <iprintf>
        --pcb->snd_queuelen;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80145fc:	3b01      	subs	r3, #1
 80145fe:	b29a      	uxth	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801460a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801460c:	69fb      	ldr	r3, [r7, #28]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d12a      	bne.n	8014668 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014616:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014618:	69fb      	ldr	r3, [r7, #28]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d106      	bne.n	801462c <tcp_process+0x280>
 801461e:	4b06      	ldr	r3, [pc, #24]	; (8014638 <tcp_process+0x28c>)
 8014620:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014624:	490f      	ldr	r1, [pc, #60]	; (8014664 <tcp_process+0x2b8>)
 8014626:	4806      	ldr	r0, [pc, #24]	; (8014640 <tcp_process+0x294>)
 8014628:	f006 fe42 	bl	801b2b0 <iprintf>
          pcb->unsent = rseg->next;
 801462c:	69fb      	ldr	r3, [r7, #28]
 801462e:	681a      	ldr	r2, [r3, #0]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	66da      	str	r2, [r3, #108]	; 0x6c
 8014634:	e01c      	b.n	8014670 <tcp_process+0x2c4>
 8014636:	bf00      	nop
 8014638:	0801f5f8 	.word	0x0801f5f8
 801463c:	0801f830 	.word	0x0801f830
 8014640:	0801f644 	.word	0x0801f644
 8014644:	20007200 	.word	0x20007200
 8014648:	200071f8 	.word	0x200071f8
 801464c:	200071f4 	.word	0x200071f4
 8014650:	0801f84c 	.word	0x0801f84c
 8014654:	20007201 	.word	0x20007201
 8014658:	200071bc 	.word	0x200071bc
 801465c:	200071e4 	.word	0x200071e4
 8014660:	0801f86c 	.word	0x0801f86c
 8014664:	0801f884 	.word	0x0801f884
        } else {
          pcb->unacked = rseg->next;
 8014668:	69fb      	ldr	r3, [r7, #28]
 801466a:	681a      	ldr	r2, [r3, #0]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014670:	69f8      	ldr	r0, [r7, #28]
 8014672:	f7fe fc72 	bl	8012f5a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801467a:	2b00      	cmp	r3, #0
 801467c:	d104      	bne.n	8014688 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014684:	861a      	strh	r2, [r3, #48]	; 0x30
 8014686:	e006      	b.n	8014696 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2200      	movs	r2, #0
 801468c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2200      	movs	r2, #0
 8014692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801469c:	2b00      	cmp	r3, #0
 801469e:	d00a      	beq.n	80146b6 <tcp_process+0x30a>
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146a6:	687a      	ldr	r2, [r7, #4]
 80146a8:	6910      	ldr	r0, [r2, #16]
 80146aa:	2200      	movs	r2, #0
 80146ac:	6879      	ldr	r1, [r7, #4]
 80146ae:	4798      	blx	r3
 80146b0:	4603      	mov	r3, r0
 80146b2:	76bb      	strb	r3, [r7, #26]
 80146b4:	e001      	b.n	80146ba <tcp_process+0x30e>
 80146b6:	2300      	movs	r3, #0
 80146b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80146ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80146be:	f113 0f0d 	cmn.w	r3, #13
 80146c2:	d102      	bne.n	80146ca <tcp_process+0x31e>
          return ERR_ABRT;
 80146c4:	f06f 030c 	mvn.w	r3, #12
 80146c8:	e250      	b.n	8014b6c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	8b5b      	ldrh	r3, [r3, #26]
 80146ce:	f043 0302 	orr.w	r3, r3, #2
 80146d2:	b29a      	uxth	r2, r3
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80146d8:	e23a      	b.n	8014b50 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80146da:	4b98      	ldr	r3, [pc, #608]	; (801493c <tcp_process+0x590>)
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	f003 0310 	and.w	r3, r3, #16
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	f000 8234 	beq.w	8014b50 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146e8:	4b95      	ldr	r3, [pc, #596]	; (8014940 <tcp_process+0x594>)
 80146ea:	6819      	ldr	r1, [r3, #0]
 80146ec:	4b95      	ldr	r3, [pc, #596]	; (8014944 <tcp_process+0x598>)
 80146ee:	881b      	ldrh	r3, [r3, #0]
 80146f0:	461a      	mov	r2, r3
 80146f2:	4b95      	ldr	r3, [pc, #596]	; (8014948 <tcp_process+0x59c>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146f8:	4b94      	ldr	r3, [pc, #592]	; (801494c <tcp_process+0x5a0>)
 80146fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146fc:	885b      	ldrh	r3, [r3, #2]
 80146fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014700:	4a92      	ldr	r2, [pc, #584]	; (801494c <tcp_process+0x5a0>)
 8014702:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014704:	8812      	ldrh	r2, [r2, #0]
 8014706:	b292      	uxth	r2, r2
 8014708:	9202      	str	r2, [sp, #8]
 801470a:	9301      	str	r3, [sp, #4]
 801470c:	4b90      	ldr	r3, [pc, #576]	; (8014950 <tcp_process+0x5a4>)
 801470e:	9300      	str	r3, [sp, #0]
 8014710:	4b90      	ldr	r3, [pc, #576]	; (8014954 <tcp_process+0x5a8>)
 8014712:	4602      	mov	r2, r0
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f003 f8dd 	bl	80178d4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014720:	2b05      	cmp	r3, #5
 8014722:	f200 8215 	bhi.w	8014b50 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2200      	movs	r2, #0
 801472a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f002 fea9 	bl	8017484 <tcp_rexmit_rto>
      break;
 8014732:	e20d      	b.n	8014b50 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014734:	4b81      	ldr	r3, [pc, #516]	; (801493c <tcp_process+0x590>)
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	f003 0310 	and.w	r3, r3, #16
 801473c:	2b00      	cmp	r3, #0
 801473e:	f000 80a1 	beq.w	8014884 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014742:	4b7f      	ldr	r3, [pc, #508]	; (8014940 <tcp_process+0x594>)
 8014744:	681a      	ldr	r2, [r3, #0]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801474a:	1ad3      	subs	r3, r2, r3
 801474c:	3b01      	subs	r3, #1
 801474e:	2b00      	cmp	r3, #0
 8014750:	db7e      	blt.n	8014850 <tcp_process+0x4a4>
 8014752:	4b7b      	ldr	r3, [pc, #492]	; (8014940 <tcp_process+0x594>)
 8014754:	681a      	ldr	r2, [r3, #0]
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	2b00      	cmp	r3, #0
 801475e:	dc77      	bgt.n	8014850 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2204      	movs	r2, #4
 8014764:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801476a:	2b00      	cmp	r3, #0
 801476c:	d102      	bne.n	8014774 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801476e:	23fa      	movs	r3, #250	; 0xfa
 8014770:	76bb      	strb	r3, [r7, #26]
 8014772:	e01d      	b.n	80147b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014778:	699b      	ldr	r3, [r3, #24]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d106      	bne.n	801478c <tcp_process+0x3e0>
 801477e:	4b76      	ldr	r3, [pc, #472]	; (8014958 <tcp_process+0x5ac>)
 8014780:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014784:	4975      	ldr	r1, [pc, #468]	; (801495c <tcp_process+0x5b0>)
 8014786:	4876      	ldr	r0, [pc, #472]	; (8014960 <tcp_process+0x5b4>)
 8014788:	f006 fd92 	bl	801b2b0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014790:	699b      	ldr	r3, [r3, #24]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d00a      	beq.n	80147ac <tcp_process+0x400>
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801479a:	699b      	ldr	r3, [r3, #24]
 801479c:	687a      	ldr	r2, [r7, #4]
 801479e:	6910      	ldr	r0, [r2, #16]
 80147a0:	2200      	movs	r2, #0
 80147a2:	6879      	ldr	r1, [r7, #4]
 80147a4:	4798      	blx	r3
 80147a6:	4603      	mov	r3, r0
 80147a8:	76bb      	strb	r3, [r7, #26]
 80147aa:	e001      	b.n	80147b0 <tcp_process+0x404>
 80147ac:	23f0      	movs	r3, #240	; 0xf0
 80147ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80147b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d00a      	beq.n	80147ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80147b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80147bc:	f113 0f0d 	cmn.w	r3, #13
 80147c0:	d002      	beq.n	80147c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f7fd fd7c 	bl	80122c0 <tcp_abort>
            }
            return ERR_ABRT;
 80147c8:	f06f 030c 	mvn.w	r3, #12
 80147cc:	e1ce      	b.n	8014b6c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80147ce:	6878      	ldr	r0, [r7, #4]
 80147d0:	f000 fae0 	bl	8014d94 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80147d4:	4b63      	ldr	r3, [pc, #396]	; (8014964 <tcp_process+0x5b8>)
 80147d6:	881b      	ldrh	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d005      	beq.n	80147e8 <tcp_process+0x43c>
            recv_acked--;
 80147dc:	4b61      	ldr	r3, [pc, #388]	; (8014964 <tcp_process+0x5b8>)
 80147de:	881b      	ldrh	r3, [r3, #0]
 80147e0:	3b01      	subs	r3, #1
 80147e2:	b29a      	uxth	r2, r3
 80147e4:	4b5f      	ldr	r3, [pc, #380]	; (8014964 <tcp_process+0x5b8>)
 80147e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80147ec:	009a      	lsls	r2, r3, #2
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80147f2:	005b      	lsls	r3, r3, #1
 80147f4:	f241 111c 	movw	r1, #4380	; 0x111c
 80147f8:	428b      	cmp	r3, r1
 80147fa:	bf38      	it	cc
 80147fc:	460b      	movcc	r3, r1
 80147fe:	429a      	cmp	r2, r3
 8014800:	d204      	bcs.n	801480c <tcp_process+0x460>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014806:	009b      	lsls	r3, r3, #2
 8014808:	b29b      	uxth	r3, r3
 801480a:	e00d      	b.n	8014828 <tcp_process+0x47c>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014810:	005b      	lsls	r3, r3, #1
 8014812:	f241 121c 	movw	r2, #4380	; 0x111c
 8014816:	4293      	cmp	r3, r2
 8014818:	d904      	bls.n	8014824 <tcp_process+0x478>
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801481e:	005b      	lsls	r3, r3, #1
 8014820:	b29b      	uxth	r3, r3
 8014822:	e001      	b.n	8014828 <tcp_process+0x47c>
 8014824:	f241 131c 	movw	r3, #4380	; 0x111c
 8014828:	687a      	ldr	r2, [r7, #4]
 801482a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801482e:	4b4e      	ldr	r3, [pc, #312]	; (8014968 <tcp_process+0x5bc>)
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	f003 0320 	and.w	r3, r3, #32
 8014836:	2b00      	cmp	r3, #0
 8014838:	d037      	beq.n	80148aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	8b5b      	ldrh	r3, [r3, #26]
 801483e:	f043 0302 	orr.w	r3, r3, #2
 8014842:	b29a      	uxth	r2, r3
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2207      	movs	r2, #7
 801484c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801484e:	e02c      	b.n	80148aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014850:	4b3b      	ldr	r3, [pc, #236]	; (8014940 <tcp_process+0x594>)
 8014852:	6819      	ldr	r1, [r3, #0]
 8014854:	4b3b      	ldr	r3, [pc, #236]	; (8014944 <tcp_process+0x598>)
 8014856:	881b      	ldrh	r3, [r3, #0]
 8014858:	461a      	mov	r2, r3
 801485a:	4b3b      	ldr	r3, [pc, #236]	; (8014948 <tcp_process+0x59c>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014860:	4b3a      	ldr	r3, [pc, #232]	; (801494c <tcp_process+0x5a0>)
 8014862:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014864:	885b      	ldrh	r3, [r3, #2]
 8014866:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014868:	4a38      	ldr	r2, [pc, #224]	; (801494c <tcp_process+0x5a0>)
 801486a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801486c:	8812      	ldrh	r2, [r2, #0]
 801486e:	b292      	uxth	r2, r2
 8014870:	9202      	str	r2, [sp, #8]
 8014872:	9301      	str	r3, [sp, #4]
 8014874:	4b36      	ldr	r3, [pc, #216]	; (8014950 <tcp_process+0x5a4>)
 8014876:	9300      	str	r3, [sp, #0]
 8014878:	4b36      	ldr	r3, [pc, #216]	; (8014954 <tcp_process+0x5a8>)
 801487a:	4602      	mov	r2, r0
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f003 f829 	bl	80178d4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014882:	e167      	b.n	8014b54 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014884:	4b2d      	ldr	r3, [pc, #180]	; (801493c <tcp_process+0x590>)
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	f003 0302 	and.w	r3, r3, #2
 801488c:	2b00      	cmp	r3, #0
 801488e:	f000 8161 	beq.w	8014b54 <tcp_process+0x7a8>
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014896:	1e5a      	subs	r2, r3, #1
 8014898:	4b2b      	ldr	r3, [pc, #172]	; (8014948 <tcp_process+0x59c>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	429a      	cmp	r2, r3
 801489e:	f040 8159 	bne.w	8014b54 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f002 fe10 	bl	80174c8 <tcp_rexmit>
      break;
 80148a8:	e154      	b.n	8014b54 <tcp_process+0x7a8>
 80148aa:	e153      	b.n	8014b54 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f000 fa71 	bl	8014d94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80148b2:	4b2d      	ldr	r3, [pc, #180]	; (8014968 <tcp_process+0x5bc>)
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	f003 0320 	and.w	r3, r3, #32
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	f000 814c 	beq.w	8014b58 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	8b5b      	ldrh	r3, [r3, #26]
 80148c4:	f043 0302 	orr.w	r3, r3, #2
 80148c8:	b29a      	uxth	r2, r3
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2207      	movs	r2, #7
 80148d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80148d4:	e140      	b.n	8014b58 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f000 fa5c 	bl	8014d94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80148dc:	4b22      	ldr	r3, [pc, #136]	; (8014968 <tcp_process+0x5bc>)
 80148de:	781b      	ldrb	r3, [r3, #0]
 80148e0:	f003 0320 	and.w	r3, r3, #32
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d071      	beq.n	80149cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80148e8:	4b14      	ldr	r3, [pc, #80]	; (801493c <tcp_process+0x590>)
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	f003 0310 	and.w	r3, r3, #16
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d060      	beq.n	80149b6 <tcp_process+0x60a>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80148f8:	4b11      	ldr	r3, [pc, #68]	; (8014940 <tcp_process+0x594>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d15a      	bne.n	80149b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014904:	2b00      	cmp	r3, #0
 8014906:	d156      	bne.n	80149b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	8b5b      	ldrh	r3, [r3, #26]
 801490c:	f043 0302 	orr.w	r3, r3, #2
 8014910:	b29a      	uxth	r2, r3
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f7fe fdbc 	bl	8013494 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801491c:	4b13      	ldr	r3, [pc, #76]	; (801496c <tcp_process+0x5c0>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	687a      	ldr	r2, [r7, #4]
 8014922:	429a      	cmp	r2, r3
 8014924:	d105      	bne.n	8014932 <tcp_process+0x586>
 8014926:	4b11      	ldr	r3, [pc, #68]	; (801496c <tcp_process+0x5c0>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	68db      	ldr	r3, [r3, #12]
 801492c:	4a0f      	ldr	r2, [pc, #60]	; (801496c <tcp_process+0x5c0>)
 801492e:	6013      	str	r3, [r2, #0]
 8014930:	e02e      	b.n	8014990 <tcp_process+0x5e4>
 8014932:	4b0e      	ldr	r3, [pc, #56]	; (801496c <tcp_process+0x5c0>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	617b      	str	r3, [r7, #20]
 8014938:	e027      	b.n	801498a <tcp_process+0x5de>
 801493a:	bf00      	nop
 801493c:	20007200 	.word	0x20007200
 8014940:	200071f8 	.word	0x200071f8
 8014944:	200071fe 	.word	0x200071fe
 8014948:	200071f4 	.word	0x200071f4
 801494c:	200071e4 	.word	0x200071e4
 8014950:	200008f0 	.word	0x200008f0
 8014954:	200008f4 	.word	0x200008f4
 8014958:	0801f5f8 	.word	0x0801f5f8
 801495c:	0801f898 	.word	0x0801f898
 8014960:	0801f644 	.word	0x0801f644
 8014964:	200071fc 	.word	0x200071fc
 8014968:	20007201 	.word	0x20007201
 801496c:	200071c8 	.word	0x200071c8
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	687a      	ldr	r2, [r7, #4]
 8014976:	429a      	cmp	r2, r3
 8014978:	d104      	bne.n	8014984 <tcp_process+0x5d8>
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	68da      	ldr	r2, [r3, #12]
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	60da      	str	r2, [r3, #12]
 8014982:	e005      	b.n	8014990 <tcp_process+0x5e4>
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	68db      	ldr	r3, [r3, #12]
 8014988:	617b      	str	r3, [r7, #20]
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d1ef      	bne.n	8014970 <tcp_process+0x5c4>
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2200      	movs	r2, #0
 8014994:	60da      	str	r2, [r3, #12]
 8014996:	4b77      	ldr	r3, [pc, #476]	; (8014b74 <tcp_process+0x7c8>)
 8014998:	2201      	movs	r2, #1
 801499a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	220a      	movs	r2, #10
 80149a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80149a2:	4b75      	ldr	r3, [pc, #468]	; (8014b78 <tcp_process+0x7cc>)
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	60da      	str	r2, [r3, #12]
 80149aa:	4a73      	ldr	r2, [pc, #460]	; (8014b78 <tcp_process+0x7cc>)
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6013      	str	r3, [r2, #0]
 80149b0:	f003 f952 	bl	8017c58 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80149b4:	e0d2      	b.n	8014b5c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	8b5b      	ldrh	r3, [r3, #26]
 80149ba:	f043 0302 	orr.w	r3, r3, #2
 80149be:	b29a      	uxth	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2208      	movs	r2, #8
 80149c8:	751a      	strb	r2, [r3, #20]
      break;
 80149ca:	e0c7      	b.n	8014b5c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80149cc:	4b6b      	ldr	r3, [pc, #428]	; (8014b7c <tcp_process+0x7d0>)
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	f003 0310 	and.w	r3, r3, #16
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	f000 80c1 	beq.w	8014b5c <tcp_process+0x7b0>
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149de:	4b68      	ldr	r3, [pc, #416]	; (8014b80 <tcp_process+0x7d4>)
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	f040 80ba 	bne.w	8014b5c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	f040 80b5 	bne.w	8014b5c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2206      	movs	r2, #6
 80149f6:	751a      	strb	r2, [r3, #20]
      break;
 80149f8:	e0b0      	b.n	8014b5c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f000 f9ca 	bl	8014d94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014a00:	4b60      	ldr	r3, [pc, #384]	; (8014b84 <tcp_process+0x7d8>)
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	f003 0320 	and.w	r3, r3, #32
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f000 80a9 	beq.w	8014b60 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	8b5b      	ldrh	r3, [r3, #26]
 8014a12:	f043 0302 	orr.w	r3, r3, #2
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f7fe fd39 	bl	8013494 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014a22:	4b59      	ldr	r3, [pc, #356]	; (8014b88 <tcp_process+0x7dc>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	687a      	ldr	r2, [r7, #4]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d105      	bne.n	8014a38 <tcp_process+0x68c>
 8014a2c:	4b56      	ldr	r3, [pc, #344]	; (8014b88 <tcp_process+0x7dc>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	4a55      	ldr	r2, [pc, #340]	; (8014b88 <tcp_process+0x7dc>)
 8014a34:	6013      	str	r3, [r2, #0]
 8014a36:	e013      	b.n	8014a60 <tcp_process+0x6b4>
 8014a38:	4b53      	ldr	r3, [pc, #332]	; (8014b88 <tcp_process+0x7dc>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	613b      	str	r3, [r7, #16]
 8014a3e:	e00c      	b.n	8014a5a <tcp_process+0x6ae>
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	68db      	ldr	r3, [r3, #12]
 8014a44:	687a      	ldr	r2, [r7, #4]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d104      	bne.n	8014a54 <tcp_process+0x6a8>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	68da      	ldr	r2, [r3, #12]
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	60da      	str	r2, [r3, #12]
 8014a52:	e005      	b.n	8014a60 <tcp_process+0x6b4>
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	68db      	ldr	r3, [r3, #12]
 8014a58:	613b      	str	r3, [r7, #16]
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d1ef      	bne.n	8014a40 <tcp_process+0x694>
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	2200      	movs	r2, #0
 8014a64:	60da      	str	r2, [r3, #12]
 8014a66:	4b43      	ldr	r3, [pc, #268]	; (8014b74 <tcp_process+0x7c8>)
 8014a68:	2201      	movs	r2, #1
 8014a6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	220a      	movs	r2, #10
 8014a70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014a72:	4b41      	ldr	r3, [pc, #260]	; (8014b78 <tcp_process+0x7cc>)
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	60da      	str	r2, [r3, #12]
 8014a7a:	4a3f      	ldr	r2, [pc, #252]	; (8014b78 <tcp_process+0x7cc>)
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	6013      	str	r3, [r2, #0]
 8014a80:	f003 f8ea 	bl	8017c58 <tcp_timer_needed>
      }
      break;
 8014a84:	e06c      	b.n	8014b60 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 f984 	bl	8014d94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014a8c:	4b3b      	ldr	r3, [pc, #236]	; (8014b7c <tcp_process+0x7d0>)
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	f003 0310 	and.w	r3, r3, #16
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d065      	beq.n	8014b64 <tcp_process+0x7b8>
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a9c:	4b38      	ldr	r3, [pc, #224]	; (8014b80 <tcp_process+0x7d4>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d15f      	bne.n	8014b64 <tcp_process+0x7b8>
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d15b      	bne.n	8014b64 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f7fe fcf1 	bl	8013494 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014ab2:	4b35      	ldr	r3, [pc, #212]	; (8014b88 <tcp_process+0x7dc>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	687a      	ldr	r2, [r7, #4]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d105      	bne.n	8014ac8 <tcp_process+0x71c>
 8014abc:	4b32      	ldr	r3, [pc, #200]	; (8014b88 <tcp_process+0x7dc>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	68db      	ldr	r3, [r3, #12]
 8014ac2:	4a31      	ldr	r2, [pc, #196]	; (8014b88 <tcp_process+0x7dc>)
 8014ac4:	6013      	str	r3, [r2, #0]
 8014ac6:	e013      	b.n	8014af0 <tcp_process+0x744>
 8014ac8:	4b2f      	ldr	r3, [pc, #188]	; (8014b88 <tcp_process+0x7dc>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	60fb      	str	r3, [r7, #12]
 8014ace:	e00c      	b.n	8014aea <tcp_process+0x73e>
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	68db      	ldr	r3, [r3, #12]
 8014ad4:	687a      	ldr	r2, [r7, #4]
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	d104      	bne.n	8014ae4 <tcp_process+0x738>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	68da      	ldr	r2, [r3, #12]
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	60da      	str	r2, [r3, #12]
 8014ae2:	e005      	b.n	8014af0 <tcp_process+0x744>
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	60fb      	str	r3, [r7, #12]
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d1ef      	bne.n	8014ad0 <tcp_process+0x724>
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2200      	movs	r2, #0
 8014af4:	60da      	str	r2, [r3, #12]
 8014af6:	4b1f      	ldr	r3, [pc, #124]	; (8014b74 <tcp_process+0x7c8>)
 8014af8:	2201      	movs	r2, #1
 8014afa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	220a      	movs	r2, #10
 8014b00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014b02:	4b1d      	ldr	r3, [pc, #116]	; (8014b78 <tcp_process+0x7cc>)
 8014b04:	681a      	ldr	r2, [r3, #0]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	60da      	str	r2, [r3, #12]
 8014b0a:	4a1b      	ldr	r2, [pc, #108]	; (8014b78 <tcp_process+0x7cc>)
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6013      	str	r3, [r2, #0]
 8014b10:	f003 f8a2 	bl	8017c58 <tcp_timer_needed>
      }
      break;
 8014b14:	e026      	b.n	8014b64 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 f93c 	bl	8014d94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014b1c:	4b17      	ldr	r3, [pc, #92]	; (8014b7c <tcp_process+0x7d0>)
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	f003 0310 	and.w	r3, r3, #16
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d01f      	beq.n	8014b68 <tcp_process+0x7bc>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b2c:	4b14      	ldr	r3, [pc, #80]	; (8014b80 <tcp_process+0x7d4>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d119      	bne.n	8014b68 <tcp_process+0x7bc>
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d115      	bne.n	8014b68 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014b3c:	4b11      	ldr	r3, [pc, #68]	; (8014b84 <tcp_process+0x7d8>)
 8014b3e:	781b      	ldrb	r3, [r3, #0]
 8014b40:	f043 0310 	orr.w	r3, r3, #16
 8014b44:	b2da      	uxtb	r2, r3
 8014b46:	4b0f      	ldr	r3, [pc, #60]	; (8014b84 <tcp_process+0x7d8>)
 8014b48:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014b4a:	e00d      	b.n	8014b68 <tcp_process+0x7bc>
    default:
      break;
 8014b4c:	bf00      	nop
 8014b4e:	e00c      	b.n	8014b6a <tcp_process+0x7be>
      break;
 8014b50:	bf00      	nop
 8014b52:	e00a      	b.n	8014b6a <tcp_process+0x7be>
      break;
 8014b54:	bf00      	nop
 8014b56:	e008      	b.n	8014b6a <tcp_process+0x7be>
      break;
 8014b58:	bf00      	nop
 8014b5a:	e006      	b.n	8014b6a <tcp_process+0x7be>
      break;
 8014b5c:	bf00      	nop
 8014b5e:	e004      	b.n	8014b6a <tcp_process+0x7be>
      break;
 8014b60:	bf00      	nop
 8014b62:	e002      	b.n	8014b6a <tcp_process+0x7be>
      break;
 8014b64:	bf00      	nop
 8014b66:	e000      	b.n	8014b6a <tcp_process+0x7be>
      break;
 8014b68:	bf00      	nop
  }
  return ERR_OK;
 8014b6a:	2300      	movs	r3, #0
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3724      	adds	r7, #36	; 0x24
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd90      	pop	{r4, r7, pc}
 8014b74:	200071d0 	.word	0x200071d0
 8014b78:	200071cc 	.word	0x200071cc
 8014b7c:	20007200 	.word	0x20007200
 8014b80:	200071f8 	.word	0x200071f8
 8014b84:	20007201 	.word	0x20007201
 8014b88:	200071c8 	.word	0x200071c8

08014b8c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014b8c:	b590      	push	{r4, r7, lr}
 8014b8e:	b085      	sub	sp, #20
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d106      	bne.n	8014baa <tcp_oos_insert_segment+0x1e>
 8014b9c:	4b3b      	ldr	r3, [pc, #236]	; (8014c8c <tcp_oos_insert_segment+0x100>)
 8014b9e:	f240 421f 	movw	r2, #1055	; 0x41f
 8014ba2:	493b      	ldr	r1, [pc, #236]	; (8014c90 <tcp_oos_insert_segment+0x104>)
 8014ba4:	483b      	ldr	r0, [pc, #236]	; (8014c94 <tcp_oos_insert_segment+0x108>)
 8014ba6:	f006 fb83 	bl	801b2b0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	68db      	ldr	r3, [r3, #12]
 8014bae:	899b      	ldrh	r3, [r3, #12]
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f7fb f966 	bl	800fe84 <lwip_htons>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	f003 0301 	and.w	r3, r3, #1
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d028      	beq.n	8014c16 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014bc4:	6838      	ldr	r0, [r7, #0]
 8014bc6:	f7fe f9b3 	bl	8012f30 <tcp_segs_free>
    next = NULL;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	603b      	str	r3, [r7, #0]
 8014bce:	e056      	b.n	8014c7e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	899b      	ldrh	r3, [r3, #12]
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7fb f953 	bl	800fe84 <lwip_htons>
 8014bde:	4603      	mov	r3, r0
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	f003 0301 	and.w	r3, r3, #1
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00d      	beq.n	8014c06 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	68db      	ldr	r3, [r3, #12]
 8014bee:	899b      	ldrh	r3, [r3, #12]
 8014bf0:	b29c      	uxth	r4, r3
 8014bf2:	2001      	movs	r0, #1
 8014bf4:	f7fb f946 	bl	800fe84 <lwip_htons>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	68db      	ldr	r3, [r3, #12]
 8014c00:	4322      	orrs	r2, r4
 8014c02:	b292      	uxth	r2, r2
 8014c04:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014c06:	683b      	ldr	r3, [r7, #0]
 8014c08:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014c10:	68f8      	ldr	r0, [r7, #12]
 8014c12:	f7fe f9a2 	bl	8012f5a <tcp_seg_free>
    while (next &&
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d00e      	beq.n	8014c3a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	891b      	ldrh	r3, [r3, #8]
 8014c20:	461a      	mov	r2, r3
 8014c22:	4b1d      	ldr	r3, [pc, #116]	; (8014c98 <tcp_oos_insert_segment+0x10c>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	441a      	add	r2, r3
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	685b      	ldr	r3, [r3, #4]
 8014c2e:	6839      	ldr	r1, [r7, #0]
 8014c30:	8909      	ldrh	r1, [r1, #8]
 8014c32:	440b      	add	r3, r1
 8014c34:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	daca      	bge.n	8014bd0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d01e      	beq.n	8014c7e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	891b      	ldrh	r3, [r3, #8]
 8014c44:	461a      	mov	r2, r3
 8014c46:	4b14      	ldr	r3, [pc, #80]	; (8014c98 <tcp_oos_insert_segment+0x10c>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	441a      	add	r2, r3
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	685b      	ldr	r3, [r3, #4]
 8014c52:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	dd12      	ble.n	8014c7e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	68db      	ldr	r3, [r3, #12]
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	b29a      	uxth	r2, r3
 8014c60:	4b0d      	ldr	r3, [pc, #52]	; (8014c98 <tcp_oos_insert_segment+0x10c>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	b29b      	uxth	r3, r3
 8014c66:	1ad3      	subs	r3, r2, r3
 8014c68:	b29a      	uxth	r2, r3
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	685a      	ldr	r2, [r3, #4]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	891b      	ldrh	r3, [r3, #8]
 8014c76:	4619      	mov	r1, r3
 8014c78:	4610      	mov	r0, r2
 8014c7a:	f7fc fb83 	bl	8011384 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	683a      	ldr	r2, [r7, #0]
 8014c82:	601a      	str	r2, [r3, #0]
}
 8014c84:	bf00      	nop
 8014c86:	3714      	adds	r7, #20
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd90      	pop	{r4, r7, pc}
 8014c8c:	0801f5f8 	.word	0x0801f5f8
 8014c90:	0801f8b8 	.word	0x0801f8b8
 8014c94:	0801f644 	.word	0x0801f644
 8014c98:	200071f4 	.word	0x200071f4

08014c9c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014c9c:	b5b0      	push	{r4, r5, r7, lr}
 8014c9e:	b086      	sub	sp, #24
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	60b9      	str	r1, [r7, #8]
 8014ca6:	607a      	str	r2, [r7, #4]
 8014ca8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014caa:	e03e      	b.n	8014d2a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014cb6:	697b      	ldr	r3, [r7, #20]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fc fd6e 	bl	801179c <pbuf_clen>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014cca:	8a7a      	ldrh	r2, [r7, #18]
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	d906      	bls.n	8014cde <tcp_free_acked_segments+0x42>
 8014cd0:	4b2a      	ldr	r3, [pc, #168]	; (8014d7c <tcp_free_acked_segments+0xe0>)
 8014cd2:	f240 4257 	movw	r2, #1111	; 0x457
 8014cd6:	492a      	ldr	r1, [pc, #168]	; (8014d80 <tcp_free_acked_segments+0xe4>)
 8014cd8:	482a      	ldr	r0, [pc, #168]	; (8014d84 <tcp_free_acked_segments+0xe8>)
 8014cda:	f006 fae9 	bl	801b2b0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014ce4:	8a7b      	ldrh	r3, [r7, #18]
 8014ce6:	1ad3      	subs	r3, r2, r3
 8014ce8:	b29a      	uxth	r2, r3
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014cf0:	697b      	ldr	r3, [r7, #20]
 8014cf2:	891a      	ldrh	r2, [r3, #8]
 8014cf4:	4b24      	ldr	r3, [pc, #144]	; (8014d88 <tcp_free_acked_segments+0xec>)
 8014cf6:	881b      	ldrh	r3, [r3, #0]
 8014cf8:	4413      	add	r3, r2
 8014cfa:	b29a      	uxth	r2, r3
 8014cfc:	4b22      	ldr	r3, [pc, #136]	; (8014d88 <tcp_free_acked_segments+0xec>)
 8014cfe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014d00:	6978      	ldr	r0, [r7, #20]
 8014d02:	f7fe f92a 	bl	8012f5a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d00c      	beq.n	8014d2a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d109      	bne.n	8014d2a <tcp_free_acked_segments+0x8e>
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d106      	bne.n	8014d2a <tcp_free_acked_segments+0x8e>
 8014d1c:	4b17      	ldr	r3, [pc, #92]	; (8014d7c <tcp_free_acked_segments+0xe0>)
 8014d1e:	f240 4261 	movw	r2, #1121	; 0x461
 8014d22:	491a      	ldr	r1, [pc, #104]	; (8014d8c <tcp_free_acked_segments+0xf0>)
 8014d24:	4817      	ldr	r0, [pc, #92]	; (8014d84 <tcp_free_acked_segments+0xe8>)
 8014d26:	f006 fac3 	bl	801b2b0 <iprintf>
  while (seg_list != NULL &&
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d020      	beq.n	8014d72 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	68db      	ldr	r3, [r3, #12]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7fb f8b9 	bl	800feae <lwip_htonl>
 8014d3c:	4604      	mov	r4, r0
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	891b      	ldrh	r3, [r3, #8]
 8014d42:	461d      	mov	r5, r3
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	68db      	ldr	r3, [r3, #12]
 8014d48:	899b      	ldrh	r3, [r3, #12]
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7fb f899 	bl	800fe84 <lwip_htons>
 8014d52:	4603      	mov	r3, r0
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	f003 0303 	and.w	r3, r3, #3
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d001      	beq.n	8014d62 <tcp_free_acked_segments+0xc6>
 8014d5e:	2301      	movs	r3, #1
 8014d60:	e000      	b.n	8014d64 <tcp_free_acked_segments+0xc8>
 8014d62:	2300      	movs	r3, #0
 8014d64:	442b      	add	r3, r5
 8014d66:	18e2      	adds	r2, r4, r3
 8014d68:	4b09      	ldr	r3, [pc, #36]	; (8014d90 <tcp_free_acked_segments+0xf4>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	dd9c      	ble.n	8014cac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014d72:	68bb      	ldr	r3, [r7, #8]
}
 8014d74:	4618      	mov	r0, r3
 8014d76:	3718      	adds	r7, #24
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8014d7c:	0801f5f8 	.word	0x0801f5f8
 8014d80:	0801f8e0 	.word	0x0801f8e0
 8014d84:	0801f644 	.word	0x0801f644
 8014d88:	200071fc 	.word	0x200071fc
 8014d8c:	0801f908 	.word	0x0801f908
 8014d90:	200071f8 	.word	0x200071f8

08014d94 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014d94:	b5b0      	push	{r4, r5, r7, lr}
 8014d96:	b094      	sub	sp, #80	; 0x50
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d106      	bne.n	8014db4 <tcp_receive+0x20>
 8014da6:	4b91      	ldr	r3, [pc, #580]	; (8014fec <tcp_receive+0x258>)
 8014da8:	f240 427b 	movw	r2, #1147	; 0x47b
 8014dac:	4990      	ldr	r1, [pc, #576]	; (8014ff0 <tcp_receive+0x25c>)
 8014dae:	4891      	ldr	r0, [pc, #580]	; (8014ff4 <tcp_receive+0x260>)
 8014db0:	f006 fa7e 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	7d1b      	ldrb	r3, [r3, #20]
 8014db8:	2b03      	cmp	r3, #3
 8014dba:	d806      	bhi.n	8014dca <tcp_receive+0x36>
 8014dbc:	4b8b      	ldr	r3, [pc, #556]	; (8014fec <tcp_receive+0x258>)
 8014dbe:	f240 427c 	movw	r2, #1148	; 0x47c
 8014dc2:	498d      	ldr	r1, [pc, #564]	; (8014ff8 <tcp_receive+0x264>)
 8014dc4:	488b      	ldr	r0, [pc, #556]	; (8014ff4 <tcp_receive+0x260>)
 8014dc6:	f006 fa73 	bl	801b2b0 <iprintf>

  if (flags & TCP_ACK) {
 8014dca:	4b8c      	ldr	r3, [pc, #560]	; (8014ffc <tcp_receive+0x268>)
 8014dcc:	781b      	ldrb	r3, [r3, #0]
 8014dce:	f003 0310 	and.w	r3, r3, #16
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	f000 8264 	beq.w	80152a0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014dde:	461a      	mov	r2, r3
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014de4:	4413      	add	r3, r2
 8014de6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014dec:	4b84      	ldr	r3, [pc, #528]	; (8015000 <tcp_receive+0x26c>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	1ad3      	subs	r3, r2, r3
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	db1b      	blt.n	8014e2e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014dfa:	4b81      	ldr	r3, [pc, #516]	; (8015000 <tcp_receive+0x26c>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	d106      	bne.n	8014e10 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014e06:	4b7f      	ldr	r3, [pc, #508]	; (8015004 <tcp_receive+0x270>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	1ad3      	subs	r3, r2, r3
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	db0e      	blt.n	8014e2e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014e14:	4b7b      	ldr	r3, [pc, #492]	; (8015004 <tcp_receive+0x270>)
 8014e16:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d125      	bne.n	8014e68 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014e1c:	4b7a      	ldr	r3, [pc, #488]	; (8015008 <tcp_receive+0x274>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	89db      	ldrh	r3, [r3, #14]
 8014e22:	b29a      	uxth	r2, r3
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d91c      	bls.n	8014e68 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014e2e:	4b76      	ldr	r3, [pc, #472]	; (8015008 <tcp_receive+0x274>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	89db      	ldrh	r3, [r3, #14]
 8014e34:	b29a      	uxth	r2, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d205      	bcs.n	8014e58 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014e58:	4b69      	ldr	r3, [pc, #420]	; (8015000 <tcp_receive+0x26c>)
 8014e5a:	681a      	ldr	r2, [r3, #0]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014e60:	4b68      	ldr	r3, [pc, #416]	; (8015004 <tcp_receive+0x270>)
 8014e62:	681a      	ldr	r2, [r3, #0]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014e68:	4b66      	ldr	r3, [pc, #408]	; (8015004 <tcp_receive+0x270>)
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e70:	1ad3      	subs	r3, r2, r3
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	dc58      	bgt.n	8014f28 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014e76:	4b65      	ldr	r3, [pc, #404]	; (801500c <tcp_receive+0x278>)
 8014e78:	881b      	ldrh	r3, [r3, #0]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d14b      	bne.n	8014f16 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014e88:	4413      	add	r3, r2
 8014e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d142      	bne.n	8014f16 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	db3d      	blt.n	8014f16 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014e9e:	4b59      	ldr	r3, [pc, #356]	; (8015004 <tcp_receive+0x270>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d137      	bne.n	8014f16 <tcp_receive+0x182>
              found_dupack = 1;
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014eb0:	2bff      	cmp	r3, #255	; 0xff
 8014eb2:	d007      	beq.n	8014ec4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014eba:	3301      	adds	r3, #1
 8014ebc:	b2da      	uxtb	r2, r3
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014eca:	2b03      	cmp	r3, #3
 8014ecc:	d91b      	bls.n	8014f06 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ed8:	4413      	add	r3, r2
 8014eda:	b29a      	uxth	r2, r3
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	d30a      	bcc.n	8014efc <tcp_receive+0x168>
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ef0:	4413      	add	r3, r2
 8014ef2:	b29a      	uxth	r2, r3
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014efa:	e004      	b.n	8014f06 <tcp_receive+0x172>
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014f0c:	2b02      	cmp	r3, #2
 8014f0e:	d902      	bls.n	8014f16 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f002 fb45 	bl	80175a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	f040 8161 	bne.w	80151e0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2200      	movs	r2, #0
 8014f22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014f26:	e15b      	b.n	80151e0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f28:	4b36      	ldr	r3, [pc, #216]	; (8015004 <tcp_receive+0x270>)
 8014f2a:	681a      	ldr	r2, [r3, #0]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f30:	1ad3      	subs	r3, r2, r3
 8014f32:	3b01      	subs	r3, #1
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	f2c0 814e 	blt.w	80151d6 <tcp_receive+0x442>
 8014f3a:	4b32      	ldr	r3, [pc, #200]	; (8015004 <tcp_receive+0x270>)
 8014f3c:	681a      	ldr	r2, [r3, #0]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f42:	1ad3      	subs	r3, r2, r3
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	f300 8146 	bgt.w	80151d6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	8b5b      	ldrh	r3, [r3, #26]
 8014f4e:	f003 0304 	and.w	r3, r3, #4
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d010      	beq.n	8014f78 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	8b5b      	ldrh	r3, [r3, #26]
 8014f5a:	f023 0304 	bic.w	r3, r3, #4
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2200      	movs	r2, #0
 8014f74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f86:	10db      	asrs	r3, r3, #3
 8014f88:	b21b      	sxth	r3, r3
 8014f8a:	b29a      	uxth	r2, r3
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f92:	b29b      	uxth	r3, r3
 8014f94:	4413      	add	r3, r2
 8014f96:	b29b      	uxth	r3, r3
 8014f98:	b21a      	sxth	r2, r3
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014fa0:	4b18      	ldr	r3, [pc, #96]	; (8015004 <tcp_receive+0x270>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	b29a      	uxth	r2, r3
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	1ad3      	subs	r3, r2, r3
 8014fae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014fb8:	4b12      	ldr	r3, [pc, #72]	; (8015004 <tcp_receive+0x270>)
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	7d1b      	ldrb	r3, [r3, #20]
 8014fc4:	2b03      	cmp	r3, #3
 8014fc6:	f240 8097 	bls.w	80150f8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d245      	bcs.n	8015066 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	8b5b      	ldrh	r3, [r3, #26]
 8014fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d014      	beq.n	8015010 <tcp_receive+0x27c>
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e013      	b.n	8015012 <tcp_receive+0x27e>
 8014fea:	bf00      	nop
 8014fec:	0801f5f8 	.word	0x0801f5f8
 8014ff0:	0801f928 	.word	0x0801f928
 8014ff4:	0801f644 	.word	0x0801f644
 8014ff8:	0801f944 	.word	0x0801f944
 8014ffc:	20007200 	.word	0x20007200
 8015000:	200071f4 	.word	0x200071f4
 8015004:	200071f8 	.word	0x200071f8
 8015008:	200071e4 	.word	0x200071e4
 801500c:	200071fe 	.word	0x200071fe
 8015010:	2302      	movs	r3, #2
 8015012:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015016:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801501a:	b29a      	uxth	r2, r3
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015020:	fb12 f303 	smulbb	r3, r2, r3
 8015024:	b29b      	uxth	r3, r3
 8015026:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015028:	4293      	cmp	r3, r2
 801502a:	bf28      	it	cs
 801502c:	4613      	movcs	r3, r2
 801502e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015036:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015038:	4413      	add	r3, r2
 801503a:	b29a      	uxth	r2, r3
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015042:	429a      	cmp	r2, r3
 8015044:	d309      	bcc.n	801505a <tcp_receive+0x2c6>
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801504c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801504e:	4413      	add	r3, r2
 8015050:	b29a      	uxth	r2, r3
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015058:	e04e      	b.n	80150f8 <tcp_receive+0x364>
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015060:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015064:	e048      	b.n	80150f8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801506c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801506e:	4413      	add	r3, r2
 8015070:	b29a      	uxth	r2, r3
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015078:	429a      	cmp	r2, r3
 801507a:	d309      	bcc.n	8015090 <tcp_receive+0x2fc>
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015084:	4413      	add	r3, r2
 8015086:	b29a      	uxth	r2, r3
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801508e:	e004      	b.n	801509a <tcp_receive+0x306>
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015096:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80150a6:	429a      	cmp	r2, r3
 80150a8:	d326      	bcc.n	80150f8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80150b6:	1ad3      	subs	r3, r2, r3
 80150b8:	b29a      	uxth	r2, r3
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150ca:	4413      	add	r3, r2
 80150cc:	b29a      	uxth	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d30a      	bcc.n	80150ee <tcp_receive+0x35a>
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150e2:	4413      	add	r3, r2
 80150e4:	b29a      	uxth	r2, r3
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80150ec:	e004      	b.n	80150f8 <tcp_receive+0x364>
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015100:	4a98      	ldr	r2, [pc, #608]	; (8015364 <tcp_receive+0x5d0>)
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f7ff fdca 	bl	8014c9c <tcp_free_acked_segments>
 8015108:	4602      	mov	r2, r0
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015116:	4a94      	ldr	r2, [pc, #592]	; (8015368 <tcp_receive+0x5d4>)
 8015118:	6878      	ldr	r0, [r7, #4]
 801511a:	f7ff fdbf 	bl	8014c9c <tcp_free_acked_segments>
 801511e:	4602      	mov	r2, r0
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015128:	2b00      	cmp	r3, #0
 801512a:	d104      	bne.n	8015136 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015132:	861a      	strh	r2, [r3, #48]	; 0x30
 8015134:	e002      	b.n	801513c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	2200      	movs	r2, #0
 801513a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2200      	movs	r2, #0
 8015140:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015146:	2b00      	cmp	r3, #0
 8015148:	d103      	bne.n	8015152 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2200      	movs	r2, #0
 801514e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015158:	4b84      	ldr	r3, [pc, #528]	; (801536c <tcp_receive+0x5d8>)
 801515a:	881b      	ldrh	r3, [r3, #0]
 801515c:	4413      	add	r3, r2
 801515e:	b29a      	uxth	r2, r3
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	8b5b      	ldrh	r3, [r3, #26]
 801516a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801516e:	2b00      	cmp	r3, #0
 8015170:	d035      	beq.n	80151de <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015176:	2b00      	cmp	r3, #0
 8015178:	d118      	bne.n	80151ac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801517e:	2b00      	cmp	r3, #0
 8015180:	d00c      	beq.n	801519c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801518a:	68db      	ldr	r3, [r3, #12]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	4618      	mov	r0, r3
 8015190:	f7fa fe8d 	bl	800feae <lwip_htonl>
 8015194:	4603      	mov	r3, r0
 8015196:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015198:	2b00      	cmp	r3, #0
 801519a:	dc20      	bgt.n	80151de <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	8b5b      	ldrh	r3, [r3, #26]
 80151a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80151a4:	b29a      	uxth	r2, r3
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80151aa:	e018      	b.n	80151de <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151b4:	68db      	ldr	r3, [r3, #12]
 80151b6:	685b      	ldr	r3, [r3, #4]
 80151b8:	4618      	mov	r0, r3
 80151ba:	f7fa fe78 	bl	800feae <lwip_htonl>
 80151be:	4603      	mov	r3, r0
 80151c0:	1ae3      	subs	r3, r4, r3
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	dc0b      	bgt.n	80151de <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	8b5b      	ldrh	r3, [r3, #26]
 80151ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80151ce:	b29a      	uxth	r2, r3
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80151d4:	e003      	b.n	80151de <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f002 fbce 	bl	8017978 <tcp_send_empty_ack>
 80151dc:	e000      	b.n	80151e0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80151de:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d05b      	beq.n	80152a0 <tcp_receive+0x50c>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80151ec:	4b60      	ldr	r3, [pc, #384]	; (8015370 <tcp_receive+0x5dc>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	da54      	bge.n	80152a0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80151f6:	4b5f      	ldr	r3, [pc, #380]	; (8015374 <tcp_receive+0x5e0>)
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015200:	b29b      	uxth	r3, r3
 8015202:	1ad3      	subs	r3, r2, r3
 8015204:	b29b      	uxth	r3, r3
 8015206:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801520a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015214:	10db      	asrs	r3, r3, #3
 8015216:	b21b      	sxth	r3, r3
 8015218:	b29b      	uxth	r3, r3
 801521a:	1ad3      	subs	r3, r2, r3
 801521c:	b29b      	uxth	r3, r3
 801521e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015228:	b29a      	uxth	r2, r3
 801522a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801522e:	4413      	add	r3, r2
 8015230:	b29b      	uxth	r3, r3
 8015232:	b21a      	sxth	r2, r3
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015238:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801523c:	2b00      	cmp	r3, #0
 801523e:	da05      	bge.n	801524c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015244:	425b      	negs	r3, r3
 8015246:	b29b      	uxth	r3, r3
 8015248:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801524c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015256:	109b      	asrs	r3, r3, #2
 8015258:	b21b      	sxth	r3, r3
 801525a:	b29b      	uxth	r3, r3
 801525c:	1ad3      	subs	r3, r2, r3
 801525e:	b29b      	uxth	r3, r3
 8015260:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801526a:	b29a      	uxth	r2, r3
 801526c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015270:	4413      	add	r3, r2
 8015272:	b29b      	uxth	r3, r3
 8015274:	b21a      	sxth	r2, r3
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015280:	10db      	asrs	r3, r3, #3
 8015282:	b21b      	sxth	r3, r3
 8015284:	b29a      	uxth	r2, r3
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801528c:	b29b      	uxth	r3, r3
 801528e:	4413      	add	r3, r2
 8015290:	b29b      	uxth	r3, r3
 8015292:	b21a      	sxth	r2, r3
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	2200      	movs	r2, #0
 801529e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80152a0:	4b35      	ldr	r3, [pc, #212]	; (8015378 <tcp_receive+0x5e4>)
 80152a2:	881b      	ldrh	r3, [r3, #0]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	f000 84e2 	beq.w	8015c6e <tcp_receive+0xeda>
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	7d1b      	ldrb	r3, [r3, #20]
 80152ae:	2b06      	cmp	r3, #6
 80152b0:	f200 84dd 	bhi.w	8015c6e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152b8:	4b30      	ldr	r3, [pc, #192]	; (801537c <tcp_receive+0x5e8>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	1ad3      	subs	r3, r2, r3
 80152be:	3b01      	subs	r3, #1
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	f2c0 808f 	blt.w	80153e4 <tcp_receive+0x650>
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152ca:	4b2b      	ldr	r3, [pc, #172]	; (8015378 <tcp_receive+0x5e4>)
 80152cc:	881b      	ldrh	r3, [r3, #0]
 80152ce:	4619      	mov	r1, r3
 80152d0:	4b2a      	ldr	r3, [pc, #168]	; (801537c <tcp_receive+0x5e8>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	440b      	add	r3, r1
 80152d6:	1ad3      	subs	r3, r2, r3
 80152d8:	3301      	adds	r3, #1
 80152da:	2b00      	cmp	r3, #0
 80152dc:	f300 8082 	bgt.w	80153e4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80152e0:	4b27      	ldr	r3, [pc, #156]	; (8015380 <tcp_receive+0x5ec>)
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152ea:	4b24      	ldr	r3, [pc, #144]	; (801537c <tcp_receive+0x5e8>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	1ad3      	subs	r3, r2, r3
 80152f0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80152f2:	4b23      	ldr	r3, [pc, #140]	; (8015380 <tcp_receive+0x5ec>)
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d106      	bne.n	8015308 <tcp_receive+0x574>
 80152fa:	4b22      	ldr	r3, [pc, #136]	; (8015384 <tcp_receive+0x5f0>)
 80152fc:	f240 5294 	movw	r2, #1428	; 0x594
 8015300:	4921      	ldr	r1, [pc, #132]	; (8015388 <tcp_receive+0x5f4>)
 8015302:	4822      	ldr	r0, [pc, #136]	; (801538c <tcp_receive+0x5f8>)
 8015304:	f005 ffd4 	bl	801b2b0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801530a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801530e:	4293      	cmp	r3, r2
 8015310:	d906      	bls.n	8015320 <tcp_receive+0x58c>
 8015312:	4b1c      	ldr	r3, [pc, #112]	; (8015384 <tcp_receive+0x5f0>)
 8015314:	f240 5295 	movw	r2, #1429	; 0x595
 8015318:	491d      	ldr	r1, [pc, #116]	; (8015390 <tcp_receive+0x5fc>)
 801531a:	481c      	ldr	r0, [pc, #112]	; (801538c <tcp_receive+0x5f8>)
 801531c:	f005 ffc8 	bl	801b2b0 <iprintf>
      off = (u16_t)off32;
 8015320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015322:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015326:	4b16      	ldr	r3, [pc, #88]	; (8015380 <tcp_receive+0x5ec>)
 8015328:	685b      	ldr	r3, [r3, #4]
 801532a:	891b      	ldrh	r3, [r3, #8]
 801532c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015330:	429a      	cmp	r2, r3
 8015332:	d906      	bls.n	8015342 <tcp_receive+0x5ae>
 8015334:	4b13      	ldr	r3, [pc, #76]	; (8015384 <tcp_receive+0x5f0>)
 8015336:	f240 5297 	movw	r2, #1431	; 0x597
 801533a:	4916      	ldr	r1, [pc, #88]	; (8015394 <tcp_receive+0x600>)
 801533c:	4813      	ldr	r0, [pc, #76]	; (801538c <tcp_receive+0x5f8>)
 801533e:	f005 ffb7 	bl	801b2b0 <iprintf>
      inseg.len -= off;
 8015342:	4b0f      	ldr	r3, [pc, #60]	; (8015380 <tcp_receive+0x5ec>)
 8015344:	891a      	ldrh	r2, [r3, #8]
 8015346:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801534a:	1ad3      	subs	r3, r2, r3
 801534c:	b29a      	uxth	r2, r3
 801534e:	4b0c      	ldr	r3, [pc, #48]	; (8015380 <tcp_receive+0x5ec>)
 8015350:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015352:	4b0b      	ldr	r3, [pc, #44]	; (8015380 <tcp_receive+0x5ec>)
 8015354:	685b      	ldr	r3, [r3, #4]
 8015356:	891a      	ldrh	r2, [r3, #8]
 8015358:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801535c:	1ad3      	subs	r3, r2, r3
 801535e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015360:	e02a      	b.n	80153b8 <tcp_receive+0x624>
 8015362:	bf00      	nop
 8015364:	0801f960 	.word	0x0801f960
 8015368:	0801f968 	.word	0x0801f968
 801536c:	200071fc 	.word	0x200071fc
 8015370:	200071f8 	.word	0x200071f8
 8015374:	200071bc 	.word	0x200071bc
 8015378:	200071fe 	.word	0x200071fe
 801537c:	200071f4 	.word	0x200071f4
 8015380:	200071d4 	.word	0x200071d4
 8015384:	0801f5f8 	.word	0x0801f5f8
 8015388:	0801f970 	.word	0x0801f970
 801538c:	0801f644 	.word	0x0801f644
 8015390:	0801f980 	.word	0x0801f980
 8015394:	0801f990 	.word	0x0801f990
        off -= p->len;
 8015398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801539a:	895b      	ldrh	r3, [r3, #10]
 801539c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80153a0:	1ad3      	subs	r3, r2, r3
 80153a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80153a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80153aa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80153ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153ae:	2200      	movs	r2, #0
 80153b0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80153b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80153b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153ba:	895b      	ldrh	r3, [r3, #10]
 80153bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d8e9      	bhi.n	8015398 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80153c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153c8:	4619      	mov	r1, r3
 80153ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80153cc:	f7fc f8d8 	bl	8011580 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153d4:	4a91      	ldr	r2, [pc, #580]	; (801561c <tcp_receive+0x888>)
 80153d6:	6013      	str	r3, [r2, #0]
 80153d8:	4b91      	ldr	r3, [pc, #580]	; (8015620 <tcp_receive+0x88c>)
 80153da:	68db      	ldr	r3, [r3, #12]
 80153dc:	4a8f      	ldr	r2, [pc, #572]	; (801561c <tcp_receive+0x888>)
 80153de:	6812      	ldr	r2, [r2, #0]
 80153e0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80153e2:	e00d      	b.n	8015400 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80153e4:	4b8d      	ldr	r3, [pc, #564]	; (801561c <tcp_receive+0x888>)
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ec:	1ad3      	subs	r3, r2, r3
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	da06      	bge.n	8015400 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	8b5b      	ldrh	r3, [r3, #26]
 80153f6:	f043 0302 	orr.w	r3, r3, #2
 80153fa:	b29a      	uxth	r2, r3
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015400:	4b86      	ldr	r3, [pc, #536]	; (801561c <tcp_receive+0x888>)
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015408:	1ad3      	subs	r3, r2, r3
 801540a:	2b00      	cmp	r3, #0
 801540c:	f2c0 842a 	blt.w	8015c64 <tcp_receive+0xed0>
 8015410:	4b82      	ldr	r3, [pc, #520]	; (801561c <tcp_receive+0x888>)
 8015412:	681a      	ldr	r2, [r3, #0]
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015418:	6879      	ldr	r1, [r7, #4]
 801541a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801541c:	440b      	add	r3, r1
 801541e:	1ad3      	subs	r3, r2, r3
 8015420:	3301      	adds	r3, #1
 8015422:	2b00      	cmp	r3, #0
 8015424:	f300 841e 	bgt.w	8015c64 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801542c:	4b7b      	ldr	r3, [pc, #492]	; (801561c <tcp_receive+0x888>)
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	429a      	cmp	r2, r3
 8015432:	f040 829a 	bne.w	801596a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015436:	4b7a      	ldr	r3, [pc, #488]	; (8015620 <tcp_receive+0x88c>)
 8015438:	891c      	ldrh	r4, [r3, #8]
 801543a:	4b79      	ldr	r3, [pc, #484]	; (8015620 <tcp_receive+0x88c>)
 801543c:	68db      	ldr	r3, [r3, #12]
 801543e:	899b      	ldrh	r3, [r3, #12]
 8015440:	b29b      	uxth	r3, r3
 8015442:	4618      	mov	r0, r3
 8015444:	f7fa fd1e 	bl	800fe84 <lwip_htons>
 8015448:	4603      	mov	r3, r0
 801544a:	b2db      	uxtb	r3, r3
 801544c:	f003 0303 	and.w	r3, r3, #3
 8015450:	2b00      	cmp	r3, #0
 8015452:	d001      	beq.n	8015458 <tcp_receive+0x6c4>
 8015454:	2301      	movs	r3, #1
 8015456:	e000      	b.n	801545a <tcp_receive+0x6c6>
 8015458:	2300      	movs	r3, #0
 801545a:	4423      	add	r3, r4
 801545c:	b29a      	uxth	r2, r3
 801545e:	4b71      	ldr	r3, [pc, #452]	; (8015624 <tcp_receive+0x890>)
 8015460:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015466:	4b6f      	ldr	r3, [pc, #444]	; (8015624 <tcp_receive+0x890>)
 8015468:	881b      	ldrh	r3, [r3, #0]
 801546a:	429a      	cmp	r2, r3
 801546c:	d275      	bcs.n	801555a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801546e:	4b6c      	ldr	r3, [pc, #432]	; (8015620 <tcp_receive+0x88c>)
 8015470:	68db      	ldr	r3, [r3, #12]
 8015472:	899b      	ldrh	r3, [r3, #12]
 8015474:	b29b      	uxth	r3, r3
 8015476:	4618      	mov	r0, r3
 8015478:	f7fa fd04 	bl	800fe84 <lwip_htons>
 801547c:	4603      	mov	r3, r0
 801547e:	b2db      	uxtb	r3, r3
 8015480:	f003 0301 	and.w	r3, r3, #1
 8015484:	2b00      	cmp	r3, #0
 8015486:	d01f      	beq.n	80154c8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015488:	4b65      	ldr	r3, [pc, #404]	; (8015620 <tcp_receive+0x88c>)
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	899b      	ldrh	r3, [r3, #12]
 801548e:	b29b      	uxth	r3, r3
 8015490:	b21b      	sxth	r3, r3
 8015492:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015496:	b21c      	sxth	r4, r3
 8015498:	4b61      	ldr	r3, [pc, #388]	; (8015620 <tcp_receive+0x88c>)
 801549a:	68db      	ldr	r3, [r3, #12]
 801549c:	899b      	ldrh	r3, [r3, #12]
 801549e:	b29b      	uxth	r3, r3
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7fa fcef 	bl	800fe84 <lwip_htons>
 80154a6:	4603      	mov	r3, r0
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fa fce6 	bl	800fe84 <lwip_htons>
 80154b8:	4603      	mov	r3, r0
 80154ba:	b21b      	sxth	r3, r3
 80154bc:	4323      	orrs	r3, r4
 80154be:	b21a      	sxth	r2, r3
 80154c0:	4b57      	ldr	r3, [pc, #348]	; (8015620 <tcp_receive+0x88c>)
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	b292      	uxth	r2, r2
 80154c6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80154cc:	4b54      	ldr	r3, [pc, #336]	; (8015620 <tcp_receive+0x88c>)
 80154ce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80154d0:	4b53      	ldr	r3, [pc, #332]	; (8015620 <tcp_receive+0x88c>)
 80154d2:	68db      	ldr	r3, [r3, #12]
 80154d4:	899b      	ldrh	r3, [r3, #12]
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	4618      	mov	r0, r3
 80154da:	f7fa fcd3 	bl	800fe84 <lwip_htons>
 80154de:	4603      	mov	r3, r0
 80154e0:	b2db      	uxtb	r3, r3
 80154e2:	f003 0302 	and.w	r3, r3, #2
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d005      	beq.n	80154f6 <tcp_receive+0x762>
            inseg.len -= 1;
 80154ea:	4b4d      	ldr	r3, [pc, #308]	; (8015620 <tcp_receive+0x88c>)
 80154ec:	891b      	ldrh	r3, [r3, #8]
 80154ee:	3b01      	subs	r3, #1
 80154f0:	b29a      	uxth	r2, r3
 80154f2:	4b4b      	ldr	r3, [pc, #300]	; (8015620 <tcp_receive+0x88c>)
 80154f4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80154f6:	4b4a      	ldr	r3, [pc, #296]	; (8015620 <tcp_receive+0x88c>)
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	4a49      	ldr	r2, [pc, #292]	; (8015620 <tcp_receive+0x88c>)
 80154fc:	8912      	ldrh	r2, [r2, #8]
 80154fe:	4611      	mov	r1, r2
 8015500:	4618      	mov	r0, r3
 8015502:	f7fb ff3f 	bl	8011384 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015506:	4b46      	ldr	r3, [pc, #280]	; (8015620 <tcp_receive+0x88c>)
 8015508:	891c      	ldrh	r4, [r3, #8]
 801550a:	4b45      	ldr	r3, [pc, #276]	; (8015620 <tcp_receive+0x88c>)
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	899b      	ldrh	r3, [r3, #12]
 8015510:	b29b      	uxth	r3, r3
 8015512:	4618      	mov	r0, r3
 8015514:	f7fa fcb6 	bl	800fe84 <lwip_htons>
 8015518:	4603      	mov	r3, r0
 801551a:	b2db      	uxtb	r3, r3
 801551c:	f003 0303 	and.w	r3, r3, #3
 8015520:	2b00      	cmp	r3, #0
 8015522:	d001      	beq.n	8015528 <tcp_receive+0x794>
 8015524:	2301      	movs	r3, #1
 8015526:	e000      	b.n	801552a <tcp_receive+0x796>
 8015528:	2300      	movs	r3, #0
 801552a:	4423      	add	r3, r4
 801552c:	b29a      	uxth	r2, r3
 801552e:	4b3d      	ldr	r3, [pc, #244]	; (8015624 <tcp_receive+0x890>)
 8015530:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015532:	4b3c      	ldr	r3, [pc, #240]	; (8015624 <tcp_receive+0x890>)
 8015534:	881b      	ldrh	r3, [r3, #0]
 8015536:	461a      	mov	r2, r3
 8015538:	4b38      	ldr	r3, [pc, #224]	; (801561c <tcp_receive+0x888>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	441a      	add	r2, r3
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015542:	6879      	ldr	r1, [r7, #4]
 8015544:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015546:	440b      	add	r3, r1
 8015548:	429a      	cmp	r2, r3
 801554a:	d006      	beq.n	801555a <tcp_receive+0x7c6>
 801554c:	4b36      	ldr	r3, [pc, #216]	; (8015628 <tcp_receive+0x894>)
 801554e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015552:	4936      	ldr	r1, [pc, #216]	; (801562c <tcp_receive+0x898>)
 8015554:	4836      	ldr	r0, [pc, #216]	; (8015630 <tcp_receive+0x89c>)
 8015556:	f005 feab 	bl	801b2b0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801555e:	2b00      	cmp	r3, #0
 8015560:	f000 80e7 	beq.w	8015732 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015564:	4b2e      	ldr	r3, [pc, #184]	; (8015620 <tcp_receive+0x88c>)
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	899b      	ldrh	r3, [r3, #12]
 801556a:	b29b      	uxth	r3, r3
 801556c:	4618      	mov	r0, r3
 801556e:	f7fa fc89 	bl	800fe84 <lwip_htons>
 8015572:	4603      	mov	r3, r0
 8015574:	b2db      	uxtb	r3, r3
 8015576:	f003 0301 	and.w	r3, r3, #1
 801557a:	2b00      	cmp	r3, #0
 801557c:	d010      	beq.n	80155a0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801557e:	e00a      	b.n	8015596 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015584:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015590:	68f8      	ldr	r0, [r7, #12]
 8015592:	f7fd fce2 	bl	8012f5a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801559a:	2b00      	cmp	r3, #0
 801559c:	d1f0      	bne.n	8015580 <tcp_receive+0x7ec>
 801559e:	e0c8      	b.n	8015732 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80155a6:	e052      	b.n	801564e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80155a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155aa:	68db      	ldr	r3, [r3, #12]
 80155ac:	899b      	ldrh	r3, [r3, #12]
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	4618      	mov	r0, r3
 80155b2:	f7fa fc67 	bl	800fe84 <lwip_htons>
 80155b6:	4603      	mov	r3, r0
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	f003 0301 	and.w	r3, r3, #1
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d03d      	beq.n	801563e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80155c2:	4b17      	ldr	r3, [pc, #92]	; (8015620 <tcp_receive+0x88c>)
 80155c4:	68db      	ldr	r3, [r3, #12]
 80155c6:	899b      	ldrh	r3, [r3, #12]
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7fa fc5a 	bl	800fe84 <lwip_htons>
 80155d0:	4603      	mov	r3, r0
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d130      	bne.n	801563e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80155dc:	4b10      	ldr	r3, [pc, #64]	; (8015620 <tcp_receive+0x88c>)
 80155de:	68db      	ldr	r3, [r3, #12]
 80155e0:	899b      	ldrh	r3, [r3, #12]
 80155e2:	b29c      	uxth	r4, r3
 80155e4:	2001      	movs	r0, #1
 80155e6:	f7fa fc4d 	bl	800fe84 <lwip_htons>
 80155ea:	4603      	mov	r3, r0
 80155ec:	461a      	mov	r2, r3
 80155ee:	4b0c      	ldr	r3, [pc, #48]	; (8015620 <tcp_receive+0x88c>)
 80155f0:	68db      	ldr	r3, [r3, #12]
 80155f2:	4322      	orrs	r2, r4
 80155f4:	b292      	uxth	r2, r2
 80155f6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80155f8:	4b09      	ldr	r3, [pc, #36]	; (8015620 <tcp_receive+0x88c>)
 80155fa:	891c      	ldrh	r4, [r3, #8]
 80155fc:	4b08      	ldr	r3, [pc, #32]	; (8015620 <tcp_receive+0x88c>)
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	899b      	ldrh	r3, [r3, #12]
 8015602:	b29b      	uxth	r3, r3
 8015604:	4618      	mov	r0, r3
 8015606:	f7fa fc3d 	bl	800fe84 <lwip_htons>
 801560a:	4603      	mov	r3, r0
 801560c:	b2db      	uxtb	r3, r3
 801560e:	f003 0303 	and.w	r3, r3, #3
 8015612:	2b00      	cmp	r3, #0
 8015614:	d00e      	beq.n	8015634 <tcp_receive+0x8a0>
 8015616:	2301      	movs	r3, #1
 8015618:	e00d      	b.n	8015636 <tcp_receive+0x8a2>
 801561a:	bf00      	nop
 801561c:	200071f4 	.word	0x200071f4
 8015620:	200071d4 	.word	0x200071d4
 8015624:	200071fe 	.word	0x200071fe
 8015628:	0801f5f8 	.word	0x0801f5f8
 801562c:	0801f9a0 	.word	0x0801f9a0
 8015630:	0801f644 	.word	0x0801f644
 8015634:	2300      	movs	r3, #0
 8015636:	4423      	add	r3, r4
 8015638:	b29a      	uxth	r2, r3
 801563a:	4b98      	ldr	r3, [pc, #608]	; (801589c <tcp_receive+0xb08>)
 801563c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015640:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015648:	6938      	ldr	r0, [r7, #16]
 801564a:	f7fd fc86 	bl	8012f5a <tcp_seg_free>
            while (next &&
 801564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015650:	2b00      	cmp	r3, #0
 8015652:	d00e      	beq.n	8015672 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015654:	4b91      	ldr	r3, [pc, #580]	; (801589c <tcp_receive+0xb08>)
 8015656:	881b      	ldrh	r3, [r3, #0]
 8015658:	461a      	mov	r2, r3
 801565a:	4b91      	ldr	r3, [pc, #580]	; (80158a0 <tcp_receive+0xb0c>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	441a      	add	r2, r3
 8015660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015662:	68db      	ldr	r3, [r3, #12]
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015668:	8909      	ldrh	r1, [r1, #8]
 801566a:	440b      	add	r3, r1
 801566c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801566e:	2b00      	cmp	r3, #0
 8015670:	da9a      	bge.n	80155a8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015674:	2b00      	cmp	r3, #0
 8015676:	d059      	beq.n	801572c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8015678:	4b88      	ldr	r3, [pc, #544]	; (801589c <tcp_receive+0xb08>)
 801567a:	881b      	ldrh	r3, [r3, #0]
 801567c:	461a      	mov	r2, r3
 801567e:	4b88      	ldr	r3, [pc, #544]	; (80158a0 <tcp_receive+0xb0c>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	441a      	add	r2, r3
 8015684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801568c:	2b00      	cmp	r3, #0
 801568e:	dd4d      	ble.n	801572c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	b29a      	uxth	r2, r3
 8015698:	4b81      	ldr	r3, [pc, #516]	; (80158a0 <tcp_receive+0xb0c>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	b29b      	uxth	r3, r3
 801569e:	1ad3      	subs	r3, r2, r3
 80156a0:	b29a      	uxth	r2, r3
 80156a2:	4b80      	ldr	r3, [pc, #512]	; (80158a4 <tcp_receive+0xb10>)
 80156a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80156a6:	4b7f      	ldr	r3, [pc, #508]	; (80158a4 <tcp_receive+0xb10>)
 80156a8:	68db      	ldr	r3, [r3, #12]
 80156aa:	899b      	ldrh	r3, [r3, #12]
 80156ac:	b29b      	uxth	r3, r3
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7fa fbe8 	bl	800fe84 <lwip_htons>
 80156b4:	4603      	mov	r3, r0
 80156b6:	b2db      	uxtb	r3, r3
 80156b8:	f003 0302 	and.w	r3, r3, #2
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d005      	beq.n	80156cc <tcp_receive+0x938>
                inseg.len -= 1;
 80156c0:	4b78      	ldr	r3, [pc, #480]	; (80158a4 <tcp_receive+0xb10>)
 80156c2:	891b      	ldrh	r3, [r3, #8]
 80156c4:	3b01      	subs	r3, #1
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	4b76      	ldr	r3, [pc, #472]	; (80158a4 <tcp_receive+0xb10>)
 80156ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80156cc:	4b75      	ldr	r3, [pc, #468]	; (80158a4 <tcp_receive+0xb10>)
 80156ce:	685b      	ldr	r3, [r3, #4]
 80156d0:	4a74      	ldr	r2, [pc, #464]	; (80158a4 <tcp_receive+0xb10>)
 80156d2:	8912      	ldrh	r2, [r2, #8]
 80156d4:	4611      	mov	r1, r2
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7fb fe54 	bl	8011384 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80156dc:	4b71      	ldr	r3, [pc, #452]	; (80158a4 <tcp_receive+0xb10>)
 80156de:	891c      	ldrh	r4, [r3, #8]
 80156e0:	4b70      	ldr	r3, [pc, #448]	; (80158a4 <tcp_receive+0xb10>)
 80156e2:	68db      	ldr	r3, [r3, #12]
 80156e4:	899b      	ldrh	r3, [r3, #12]
 80156e6:	b29b      	uxth	r3, r3
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7fa fbcb 	bl	800fe84 <lwip_htons>
 80156ee:	4603      	mov	r3, r0
 80156f0:	b2db      	uxtb	r3, r3
 80156f2:	f003 0303 	and.w	r3, r3, #3
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d001      	beq.n	80156fe <tcp_receive+0x96a>
 80156fa:	2301      	movs	r3, #1
 80156fc:	e000      	b.n	8015700 <tcp_receive+0x96c>
 80156fe:	2300      	movs	r3, #0
 8015700:	4423      	add	r3, r4
 8015702:	b29a      	uxth	r2, r3
 8015704:	4b65      	ldr	r3, [pc, #404]	; (801589c <tcp_receive+0xb08>)
 8015706:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015708:	4b64      	ldr	r3, [pc, #400]	; (801589c <tcp_receive+0xb08>)
 801570a:	881b      	ldrh	r3, [r3, #0]
 801570c:	461a      	mov	r2, r3
 801570e:	4b64      	ldr	r3, [pc, #400]	; (80158a0 <tcp_receive+0xb0c>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	441a      	add	r2, r3
 8015714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015716:	68db      	ldr	r3, [r3, #12]
 8015718:	685b      	ldr	r3, [r3, #4]
 801571a:	429a      	cmp	r2, r3
 801571c:	d006      	beq.n	801572c <tcp_receive+0x998>
 801571e:	4b62      	ldr	r3, [pc, #392]	; (80158a8 <tcp_receive+0xb14>)
 8015720:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015724:	4961      	ldr	r1, [pc, #388]	; (80158ac <tcp_receive+0xb18>)
 8015726:	4862      	ldr	r0, [pc, #392]	; (80158b0 <tcp_receive+0xb1c>)
 8015728:	f005 fdc2 	bl	801b2b0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015730:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015732:	4b5a      	ldr	r3, [pc, #360]	; (801589c <tcp_receive+0xb08>)
 8015734:	881b      	ldrh	r3, [r3, #0]
 8015736:	461a      	mov	r2, r3
 8015738:	4b59      	ldr	r3, [pc, #356]	; (80158a0 <tcp_receive+0xb0c>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	441a      	add	r2, r3
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015746:	4b55      	ldr	r3, [pc, #340]	; (801589c <tcp_receive+0xb08>)
 8015748:	881b      	ldrh	r3, [r3, #0]
 801574a:	429a      	cmp	r2, r3
 801574c:	d206      	bcs.n	801575c <tcp_receive+0x9c8>
 801574e:	4b56      	ldr	r3, [pc, #344]	; (80158a8 <tcp_receive+0xb14>)
 8015750:	f240 6207 	movw	r2, #1543	; 0x607
 8015754:	4957      	ldr	r1, [pc, #348]	; (80158b4 <tcp_receive+0xb20>)
 8015756:	4856      	ldr	r0, [pc, #344]	; (80158b0 <tcp_receive+0xb1c>)
 8015758:	f005 fdaa 	bl	801b2b0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015760:	4b4e      	ldr	r3, [pc, #312]	; (801589c <tcp_receive+0xb08>)
 8015762:	881b      	ldrh	r3, [r3, #0]
 8015764:	1ad3      	subs	r3, r2, r3
 8015766:	b29a      	uxth	r2, r3
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f7fc fdb3 	bl	80122d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015772:	4b4c      	ldr	r3, [pc, #304]	; (80158a4 <tcp_receive+0xb10>)
 8015774:	685b      	ldr	r3, [r3, #4]
 8015776:	891b      	ldrh	r3, [r3, #8]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d006      	beq.n	801578a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801577c:	4b49      	ldr	r3, [pc, #292]	; (80158a4 <tcp_receive+0xb10>)
 801577e:	685b      	ldr	r3, [r3, #4]
 8015780:	4a4d      	ldr	r2, [pc, #308]	; (80158b8 <tcp_receive+0xb24>)
 8015782:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015784:	4b47      	ldr	r3, [pc, #284]	; (80158a4 <tcp_receive+0xb10>)
 8015786:	2200      	movs	r2, #0
 8015788:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801578a:	4b46      	ldr	r3, [pc, #280]	; (80158a4 <tcp_receive+0xb10>)
 801578c:	68db      	ldr	r3, [r3, #12]
 801578e:	899b      	ldrh	r3, [r3, #12]
 8015790:	b29b      	uxth	r3, r3
 8015792:	4618      	mov	r0, r3
 8015794:	f7fa fb76 	bl	800fe84 <lwip_htons>
 8015798:	4603      	mov	r3, r0
 801579a:	b2db      	uxtb	r3, r3
 801579c:	f003 0301 	and.w	r3, r3, #1
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	f000 80b8 	beq.w	8015916 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80157a6:	4b45      	ldr	r3, [pc, #276]	; (80158bc <tcp_receive+0xb28>)
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	f043 0320 	orr.w	r3, r3, #32
 80157ae:	b2da      	uxtb	r2, r3
 80157b0:	4b42      	ldr	r3, [pc, #264]	; (80158bc <tcp_receive+0xb28>)
 80157b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80157b4:	e0af      	b.n	8015916 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157c0:	68db      	ldr	r3, [r3, #12]
 80157c2:	685b      	ldr	r3, [r3, #4]
 80157c4:	4a36      	ldr	r2, [pc, #216]	; (80158a0 <tcp_receive+0xb0c>)
 80157c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	891b      	ldrh	r3, [r3, #8]
 80157cc:	461c      	mov	r4, r3
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	68db      	ldr	r3, [r3, #12]
 80157d2:	899b      	ldrh	r3, [r3, #12]
 80157d4:	b29b      	uxth	r3, r3
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7fa fb54 	bl	800fe84 <lwip_htons>
 80157dc:	4603      	mov	r3, r0
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	f003 0303 	and.w	r3, r3, #3
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d001      	beq.n	80157ec <tcp_receive+0xa58>
 80157e8:	2301      	movs	r3, #1
 80157ea:	e000      	b.n	80157ee <tcp_receive+0xa5a>
 80157ec:	2300      	movs	r3, #0
 80157ee:	191a      	adds	r2, r3, r4
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157f4:	441a      	add	r2, r3
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80157fe:	461c      	mov	r4, r3
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	891b      	ldrh	r3, [r3, #8]
 8015804:	461d      	mov	r5, r3
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	68db      	ldr	r3, [r3, #12]
 801580a:	899b      	ldrh	r3, [r3, #12]
 801580c:	b29b      	uxth	r3, r3
 801580e:	4618      	mov	r0, r3
 8015810:	f7fa fb38 	bl	800fe84 <lwip_htons>
 8015814:	4603      	mov	r3, r0
 8015816:	b2db      	uxtb	r3, r3
 8015818:	f003 0303 	and.w	r3, r3, #3
 801581c:	2b00      	cmp	r3, #0
 801581e:	d001      	beq.n	8015824 <tcp_receive+0xa90>
 8015820:	2301      	movs	r3, #1
 8015822:	e000      	b.n	8015826 <tcp_receive+0xa92>
 8015824:	2300      	movs	r3, #0
 8015826:	442b      	add	r3, r5
 8015828:	429c      	cmp	r4, r3
 801582a:	d206      	bcs.n	801583a <tcp_receive+0xaa6>
 801582c:	4b1e      	ldr	r3, [pc, #120]	; (80158a8 <tcp_receive+0xb14>)
 801582e:	f240 622b 	movw	r2, #1579	; 0x62b
 8015832:	4923      	ldr	r1, [pc, #140]	; (80158c0 <tcp_receive+0xb2c>)
 8015834:	481e      	ldr	r0, [pc, #120]	; (80158b0 <tcp_receive+0xb1c>)
 8015836:	f005 fd3b 	bl	801b2b0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	891b      	ldrh	r3, [r3, #8]
 801583e:	461c      	mov	r4, r3
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	68db      	ldr	r3, [r3, #12]
 8015844:	899b      	ldrh	r3, [r3, #12]
 8015846:	b29b      	uxth	r3, r3
 8015848:	4618      	mov	r0, r3
 801584a:	f7fa fb1b 	bl	800fe84 <lwip_htons>
 801584e:	4603      	mov	r3, r0
 8015850:	b2db      	uxtb	r3, r3
 8015852:	f003 0303 	and.w	r3, r3, #3
 8015856:	2b00      	cmp	r3, #0
 8015858:	d001      	beq.n	801585e <tcp_receive+0xaca>
 801585a:	2301      	movs	r3, #1
 801585c:	e000      	b.n	8015860 <tcp_receive+0xacc>
 801585e:	2300      	movs	r3, #0
 8015860:	1919      	adds	r1, r3, r4
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015866:	b28b      	uxth	r3, r1
 8015868:	1ad3      	subs	r3, r2, r3
 801586a:	b29a      	uxth	r2, r3
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f7fc fd31 	bl	80122d8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	891b      	ldrh	r3, [r3, #8]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d028      	beq.n	80158d2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015880:	4b0d      	ldr	r3, [pc, #52]	; (80158b8 <tcp_receive+0xb24>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d01d      	beq.n	80158c4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8015888:	4b0b      	ldr	r3, [pc, #44]	; (80158b8 <tcp_receive+0xb24>)
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	4619      	mov	r1, r3
 8015892:	4610      	mov	r0, r2
 8015894:	f7fb ffbc 	bl	8011810 <pbuf_cat>
 8015898:	e018      	b.n	80158cc <tcp_receive+0xb38>
 801589a:	bf00      	nop
 801589c:	200071fe 	.word	0x200071fe
 80158a0:	200071f4 	.word	0x200071f4
 80158a4:	200071d4 	.word	0x200071d4
 80158a8:	0801f5f8 	.word	0x0801f5f8
 80158ac:	0801f9d8 	.word	0x0801f9d8
 80158b0:	0801f644 	.word	0x0801f644
 80158b4:	0801fa14 	.word	0x0801fa14
 80158b8:	20007204 	.word	0x20007204
 80158bc:	20007201 	.word	0x20007201
 80158c0:	0801fa34 	.word	0x0801fa34
            } else {
              recv_data = cseg->p;
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	685b      	ldr	r3, [r3, #4]
 80158c8:	4a70      	ldr	r2, [pc, #448]	; (8015a8c <tcp_receive+0xcf8>)
 80158ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	2200      	movs	r2, #0
 80158d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	68db      	ldr	r3, [r3, #12]
 80158d6:	899b      	ldrh	r3, [r3, #12]
 80158d8:	b29b      	uxth	r3, r3
 80158da:	4618      	mov	r0, r3
 80158dc:	f7fa fad2 	bl	800fe84 <lwip_htons>
 80158e0:	4603      	mov	r3, r0
 80158e2:	b2db      	uxtb	r3, r3
 80158e4:	f003 0301 	and.w	r3, r3, #1
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d00d      	beq.n	8015908 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80158ec:	4b68      	ldr	r3, [pc, #416]	; (8015a90 <tcp_receive+0xcfc>)
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	f043 0320 	orr.w	r3, r3, #32
 80158f4:	b2da      	uxtb	r2, r3
 80158f6:	4b66      	ldr	r3, [pc, #408]	; (8015a90 <tcp_receive+0xcfc>)
 80158f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	7d1b      	ldrb	r3, [r3, #20]
 80158fe:	2b04      	cmp	r3, #4
 8015900:	d102      	bne.n	8015908 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	2207      	movs	r2, #7
 8015906:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	681a      	ldr	r2, [r3, #0]
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015910:	68b8      	ldr	r0, [r7, #8]
 8015912:	f7fd fb22 	bl	8012f5a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801591a:	2b00      	cmp	r3, #0
 801591c:	d008      	beq.n	8015930 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015922:	68db      	ldr	r3, [r3, #12]
 8015924:	685a      	ldr	r2, [r3, #4]
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801592a:	429a      	cmp	r2, r3
 801592c:	f43f af43 	beq.w	80157b6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	8b5b      	ldrh	r3, [r3, #26]
 8015934:	f003 0301 	and.w	r3, r3, #1
 8015938:	2b00      	cmp	r3, #0
 801593a:	d00e      	beq.n	801595a <tcp_receive+0xbc6>
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	8b5b      	ldrh	r3, [r3, #26]
 8015940:	f023 0301 	bic.w	r3, r3, #1
 8015944:	b29a      	uxth	r2, r3
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	835a      	strh	r2, [r3, #26]
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	8b5b      	ldrh	r3, [r3, #26]
 801594e:	f043 0302 	orr.w	r3, r3, #2
 8015952:	b29a      	uxth	r2, r3
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015958:	e188      	b.n	8015c6c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	8b5b      	ldrh	r3, [r3, #26]
 801595e:	f043 0301 	orr.w	r3, r3, #1
 8015962:	b29a      	uxth	r2, r3
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015968:	e180      	b.n	8015c6c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801596e:	2b00      	cmp	r3, #0
 8015970:	d106      	bne.n	8015980 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015972:	4848      	ldr	r0, [pc, #288]	; (8015a94 <tcp_receive+0xd00>)
 8015974:	f7fd fb0a 	bl	8012f8c <tcp_seg_copy>
 8015978:	4602      	mov	r2, r0
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	675a      	str	r2, [r3, #116]	; 0x74
 801597e:	e16d      	b.n	8015c5c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015980:	2300      	movs	r3, #0
 8015982:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015988:	63bb      	str	r3, [r7, #56]	; 0x38
 801598a:	e157      	b.n	8015c3c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801598e:	68db      	ldr	r3, [r3, #12]
 8015990:	685a      	ldr	r2, [r3, #4]
 8015992:	4b41      	ldr	r3, [pc, #260]	; (8015a98 <tcp_receive+0xd04>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	429a      	cmp	r2, r3
 8015998:	d11d      	bne.n	80159d6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801599a:	4b3e      	ldr	r3, [pc, #248]	; (8015a94 <tcp_receive+0xd00>)
 801599c:	891a      	ldrh	r2, [r3, #8]
 801599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a0:	891b      	ldrh	r3, [r3, #8]
 80159a2:	429a      	cmp	r2, r3
 80159a4:	f240 814f 	bls.w	8015c46 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80159a8:	483a      	ldr	r0, [pc, #232]	; (8015a94 <tcp_receive+0xd00>)
 80159aa:	f7fd faef 	bl	8012f8c <tcp_seg_copy>
 80159ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80159b0:	697b      	ldr	r3, [r7, #20]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	f000 8149 	beq.w	8015c4a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80159b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d003      	beq.n	80159c6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80159be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159c0:	697a      	ldr	r2, [r7, #20]
 80159c2:	601a      	str	r2, [r3, #0]
 80159c4:	e002      	b.n	80159cc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	697a      	ldr	r2, [r7, #20]
 80159ca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80159cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80159ce:	6978      	ldr	r0, [r7, #20]
 80159d0:	f7ff f8dc 	bl	8014b8c <tcp_oos_insert_segment>
                }
                break;
 80159d4:	e139      	b.n	8015c4a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80159d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d117      	bne.n	8015a0c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80159dc:	4b2e      	ldr	r3, [pc, #184]	; (8015a98 <tcp_receive+0xd04>)
 80159de:	681a      	ldr	r2, [r3, #0]
 80159e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159e2:	68db      	ldr	r3, [r3, #12]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	1ad3      	subs	r3, r2, r3
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	da57      	bge.n	8015a9c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80159ec:	4829      	ldr	r0, [pc, #164]	; (8015a94 <tcp_receive+0xd00>)
 80159ee:	f7fd facd 	bl	8012f8c <tcp_seg_copy>
 80159f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80159f4:	69bb      	ldr	r3, [r7, #24]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	f000 8129 	beq.w	8015c4e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	69ba      	ldr	r2, [r7, #24]
 8015a00:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015a04:	69b8      	ldr	r0, [r7, #24]
 8015a06:	f7ff f8c1 	bl	8014b8c <tcp_oos_insert_segment>
                  }
                  break;
 8015a0a:	e120      	b.n	8015c4e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015a0c:	4b22      	ldr	r3, [pc, #136]	; (8015a98 <tcp_receive+0xd04>)
 8015a0e:	681a      	ldr	r2, [r3, #0]
 8015a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a12:	68db      	ldr	r3, [r3, #12]
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	1ad3      	subs	r3, r2, r3
 8015a18:	3b01      	subs	r3, #1
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	db3e      	blt.n	8015a9c <tcp_receive+0xd08>
 8015a1e:	4b1e      	ldr	r3, [pc, #120]	; (8015a98 <tcp_receive+0xd04>)
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a24:	68db      	ldr	r3, [r3, #12]
 8015a26:	685b      	ldr	r3, [r3, #4]
 8015a28:	1ad3      	subs	r3, r2, r3
 8015a2a:	3301      	adds	r3, #1
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	dc35      	bgt.n	8015a9c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015a30:	4818      	ldr	r0, [pc, #96]	; (8015a94 <tcp_receive+0xd00>)
 8015a32:	f7fd faab 	bl	8012f8c <tcp_seg_copy>
 8015a36:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015a38:	69fb      	ldr	r3, [r7, #28]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	f000 8109 	beq.w	8015c52 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a42:	68db      	ldr	r3, [r3, #12]
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a48:	8912      	ldrh	r2, [r2, #8]
 8015a4a:	441a      	add	r2, r3
 8015a4c:	4b12      	ldr	r3, [pc, #72]	; (8015a98 <tcp_receive+0xd04>)
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	1ad3      	subs	r3, r2, r3
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	dd12      	ble.n	8015a7c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015a56:	4b10      	ldr	r3, [pc, #64]	; (8015a98 <tcp_receive+0xd04>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	b29a      	uxth	r2, r3
 8015a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a5e:	68db      	ldr	r3, [r3, #12]
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	b29b      	uxth	r3, r3
 8015a64:	1ad3      	subs	r3, r2, r3
 8015a66:	b29a      	uxth	r2, r3
 8015a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a6a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a6e:	685a      	ldr	r2, [r3, #4]
 8015a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a72:	891b      	ldrh	r3, [r3, #8]
 8015a74:	4619      	mov	r1, r3
 8015a76:	4610      	mov	r0, r2
 8015a78:	f7fb fc84 	bl	8011384 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a7e:	69fa      	ldr	r2, [r7, #28]
 8015a80:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015a84:	69f8      	ldr	r0, [r7, #28]
 8015a86:	f7ff f881 	bl	8014b8c <tcp_oos_insert_segment>
                  }
                  break;
 8015a8a:	e0e2      	b.n	8015c52 <tcp_receive+0xebe>
 8015a8c:	20007204 	.word	0x20007204
 8015a90:	20007201 	.word	0x20007201
 8015a94:	200071d4 	.word	0x200071d4
 8015a98:	200071f4 	.word	0x200071f4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a9e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	f040 80c6 	bne.w	8015c36 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015aaa:	4b80      	ldr	r3, [pc, #512]	; (8015cac <tcp_receive+0xf18>)
 8015aac:	681a      	ldr	r2, [r3, #0]
 8015aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ab0:	68db      	ldr	r3, [r3, #12]
 8015ab2:	685b      	ldr	r3, [r3, #4]
 8015ab4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	f340 80bd 	ble.w	8015c36 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015abe:	68db      	ldr	r3, [r3, #12]
 8015ac0:	899b      	ldrh	r3, [r3, #12]
 8015ac2:	b29b      	uxth	r3, r3
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7fa f9dd 	bl	800fe84 <lwip_htons>
 8015aca:	4603      	mov	r3, r0
 8015acc:	b2db      	uxtb	r3, r3
 8015ace:	f003 0301 	and.w	r3, r3, #1
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	f040 80bf 	bne.w	8015c56 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015ad8:	4875      	ldr	r0, [pc, #468]	; (8015cb0 <tcp_receive+0xf1c>)
 8015ada:	f7fd fa57 	bl	8012f8c <tcp_seg_copy>
 8015ade:	4602      	mov	r2, r0
 8015ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ae2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f000 80b6 	beq.w	8015c5a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015af0:	68db      	ldr	r3, [r3, #12]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015af6:	8912      	ldrh	r2, [r2, #8]
 8015af8:	441a      	add	r2, r3
 8015afa:	4b6c      	ldr	r3, [pc, #432]	; (8015cac <tcp_receive+0xf18>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	1ad3      	subs	r3, r2, r3
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	dd12      	ble.n	8015b2a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015b04:	4b69      	ldr	r3, [pc, #420]	; (8015cac <tcp_receive+0xf18>)
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	b29a      	uxth	r2, r3
 8015b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b0c:	68db      	ldr	r3, [r3, #12]
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	1ad3      	subs	r3, r2, r3
 8015b14:	b29a      	uxth	r2, r3
 8015b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b1c:	685a      	ldr	r2, [r3, #4]
 8015b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b20:	891b      	ldrh	r3, [r3, #8]
 8015b22:	4619      	mov	r1, r3
 8015b24:	4610      	mov	r0, r2
 8015b26:	f7fb fc2d 	bl	8011384 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015b2a:	4b62      	ldr	r3, [pc, #392]	; (8015cb4 <tcp_receive+0xf20>)
 8015b2c:	881b      	ldrh	r3, [r3, #0]
 8015b2e:	461a      	mov	r2, r3
 8015b30:	4b5e      	ldr	r3, [pc, #376]	; (8015cac <tcp_receive+0xf18>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	441a      	add	r2, r3
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b3a:	6879      	ldr	r1, [r7, #4]
 8015b3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b3e:	440b      	add	r3, r1
 8015b40:	1ad3      	subs	r3, r2, r3
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	f340 8089 	ble.w	8015c5a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	68db      	ldr	r3, [r3, #12]
 8015b4e:	899b      	ldrh	r3, [r3, #12]
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7fa f996 	bl	800fe84 <lwip_htons>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	b2db      	uxtb	r3, r3
 8015b5c:	f003 0301 	and.w	r3, r3, #1
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d022      	beq.n	8015baa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	68db      	ldr	r3, [r3, #12]
 8015b6a:	899b      	ldrh	r3, [r3, #12]
 8015b6c:	b29b      	uxth	r3, r3
 8015b6e:	b21b      	sxth	r3, r3
 8015b70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015b74:	b21c      	sxth	r4, r3
 8015b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	68db      	ldr	r3, [r3, #12]
 8015b7c:	899b      	ldrh	r3, [r3, #12]
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7fa f97f 	bl	800fe84 <lwip_htons>
 8015b86:	4603      	mov	r3, r0
 8015b88:	b2db      	uxtb	r3, r3
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015b90:	b29b      	uxth	r3, r3
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7fa f976 	bl	800fe84 <lwip_htons>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	b21b      	sxth	r3, r3
 8015b9c:	4323      	orrs	r3, r4
 8015b9e:	b21a      	sxth	r2, r3
 8015ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	68db      	ldr	r3, [r3, #12]
 8015ba6:	b292      	uxth	r2, r2
 8015ba8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bae:	b29a      	uxth	r2, r3
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bb4:	4413      	add	r3, r2
 8015bb6:	b299      	uxth	r1, r3
 8015bb8:	4b3c      	ldr	r3, [pc, #240]	; (8015cac <tcp_receive+0xf18>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	b29a      	uxth	r2, r3
 8015bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	1a8a      	subs	r2, r1, r2
 8015bc4:	b292      	uxth	r2, r2
 8015bc6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	685a      	ldr	r2, [r3, #4]
 8015bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	891b      	ldrh	r3, [r3, #8]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	4610      	mov	r0, r2
 8015bd8:	f7fb fbd4 	bl	8011384 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	891c      	ldrh	r4, [r3, #8]
 8015be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	68db      	ldr	r3, [r3, #12]
 8015be8:	899b      	ldrh	r3, [r3, #12]
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	4618      	mov	r0, r3
 8015bee:	f7fa f949 	bl	800fe84 <lwip_htons>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	b2db      	uxtb	r3, r3
 8015bf6:	f003 0303 	and.w	r3, r3, #3
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d001      	beq.n	8015c02 <tcp_receive+0xe6e>
 8015bfe:	2301      	movs	r3, #1
 8015c00:	e000      	b.n	8015c04 <tcp_receive+0xe70>
 8015c02:	2300      	movs	r3, #0
 8015c04:	4423      	add	r3, r4
 8015c06:	b29a      	uxth	r2, r3
 8015c08:	4b2a      	ldr	r3, [pc, #168]	; (8015cb4 <tcp_receive+0xf20>)
 8015c0a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015c0c:	4b29      	ldr	r3, [pc, #164]	; (8015cb4 <tcp_receive+0xf20>)
 8015c0e:	881b      	ldrh	r3, [r3, #0]
 8015c10:	461a      	mov	r2, r3
 8015c12:	4b26      	ldr	r3, [pc, #152]	; (8015cac <tcp_receive+0xf18>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	441a      	add	r2, r3
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c1c:	6879      	ldr	r1, [r7, #4]
 8015c1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c20:	440b      	add	r3, r1
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d019      	beq.n	8015c5a <tcp_receive+0xec6>
 8015c26:	4b24      	ldr	r3, [pc, #144]	; (8015cb8 <tcp_receive+0xf24>)
 8015c28:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015c2c:	4923      	ldr	r1, [pc, #140]	; (8015cbc <tcp_receive+0xf28>)
 8015c2e:	4824      	ldr	r0, [pc, #144]	; (8015cc0 <tcp_receive+0xf2c>)
 8015c30:	f005 fb3e 	bl	801b2b0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015c34:	e011      	b.n	8015c5a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8015c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	f47f aea4 	bne.w	801598c <tcp_receive+0xbf8>
 8015c44:	e00a      	b.n	8015c5c <tcp_receive+0xec8>
                break;
 8015c46:	bf00      	nop
 8015c48:	e008      	b.n	8015c5c <tcp_receive+0xec8>
                break;
 8015c4a:	bf00      	nop
 8015c4c:	e006      	b.n	8015c5c <tcp_receive+0xec8>
                  break;
 8015c4e:	bf00      	nop
 8015c50:	e004      	b.n	8015c5c <tcp_receive+0xec8>
                  break;
 8015c52:	bf00      	nop
 8015c54:	e002      	b.n	8015c5c <tcp_receive+0xec8>
                  break;
 8015c56:	bf00      	nop
 8015c58:	e000      	b.n	8015c5c <tcp_receive+0xec8>
                break;
 8015c5a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f001 fe8b 	bl	8017978 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015c62:	e003      	b.n	8015c6c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015c64:	6878      	ldr	r0, [r7, #4]
 8015c66:	f001 fe87 	bl	8017978 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015c6a:	e01a      	b.n	8015ca2 <tcp_receive+0xf0e>
 8015c6c:	e019      	b.n	8015ca2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015c6e:	4b0f      	ldr	r3, [pc, #60]	; (8015cac <tcp_receive+0xf18>)
 8015c70:	681a      	ldr	r2, [r3, #0]
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c76:	1ad3      	subs	r3, r2, r3
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	db0a      	blt.n	8015c92 <tcp_receive+0xefe>
 8015c7c:	4b0b      	ldr	r3, [pc, #44]	; (8015cac <tcp_receive+0xf18>)
 8015c7e:	681a      	ldr	r2, [r3, #0]
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c84:	6879      	ldr	r1, [r7, #4]
 8015c86:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c88:	440b      	add	r3, r1
 8015c8a:	1ad3      	subs	r3, r2, r3
 8015c8c:	3301      	adds	r3, #1
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	dd07      	ble.n	8015ca2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	8b5b      	ldrh	r3, [r3, #26]
 8015c96:	f043 0302 	orr.w	r3, r3, #2
 8015c9a:	b29a      	uxth	r2, r3
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015ca0:	e7ff      	b.n	8015ca2 <tcp_receive+0xf0e>
 8015ca2:	bf00      	nop
 8015ca4:	3750      	adds	r7, #80	; 0x50
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8015caa:	bf00      	nop
 8015cac:	200071f4 	.word	0x200071f4
 8015cb0:	200071d4 	.word	0x200071d4
 8015cb4:	200071fe 	.word	0x200071fe
 8015cb8:	0801f5f8 	.word	0x0801f5f8
 8015cbc:	0801f9a0 	.word	0x0801f9a0
 8015cc0:	0801f644 	.word	0x0801f644

08015cc4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b083      	sub	sp, #12
 8015cc8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015cca:	4b15      	ldr	r3, [pc, #84]	; (8015d20 <tcp_get_next_optbyte+0x5c>)
 8015ccc:	881b      	ldrh	r3, [r3, #0]
 8015cce:	1c5a      	adds	r2, r3, #1
 8015cd0:	b291      	uxth	r1, r2
 8015cd2:	4a13      	ldr	r2, [pc, #76]	; (8015d20 <tcp_get_next_optbyte+0x5c>)
 8015cd4:	8011      	strh	r1, [r2, #0]
 8015cd6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015cd8:	4b12      	ldr	r3, [pc, #72]	; (8015d24 <tcp_get_next_optbyte+0x60>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d004      	beq.n	8015cea <tcp_get_next_optbyte+0x26>
 8015ce0:	4b11      	ldr	r3, [pc, #68]	; (8015d28 <tcp_get_next_optbyte+0x64>)
 8015ce2:	881b      	ldrh	r3, [r3, #0]
 8015ce4:	88fa      	ldrh	r2, [r7, #6]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d208      	bcs.n	8015cfc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015cea:	4b10      	ldr	r3, [pc, #64]	; (8015d2c <tcp_get_next_optbyte+0x68>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	3314      	adds	r3, #20
 8015cf0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015cf2:	88fb      	ldrh	r3, [r7, #6]
 8015cf4:	683a      	ldr	r2, [r7, #0]
 8015cf6:	4413      	add	r3, r2
 8015cf8:	781b      	ldrb	r3, [r3, #0]
 8015cfa:	e00b      	b.n	8015d14 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015cfc:	88fb      	ldrh	r3, [r7, #6]
 8015cfe:	b2da      	uxtb	r2, r3
 8015d00:	4b09      	ldr	r3, [pc, #36]	; (8015d28 <tcp_get_next_optbyte+0x64>)
 8015d02:	881b      	ldrh	r3, [r3, #0]
 8015d04:	b2db      	uxtb	r3, r3
 8015d06:	1ad3      	subs	r3, r2, r3
 8015d08:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015d0a:	4b06      	ldr	r3, [pc, #24]	; (8015d24 <tcp_get_next_optbyte+0x60>)
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	797b      	ldrb	r3, [r7, #5]
 8015d10:	4413      	add	r3, r2
 8015d12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	370c      	adds	r7, #12
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1e:	4770      	bx	lr
 8015d20:	200071f0 	.word	0x200071f0
 8015d24:	200071ec 	.word	0x200071ec
 8015d28:	200071ea 	.word	0x200071ea
 8015d2c:	200071e4 	.word	0x200071e4

08015d30 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b084      	sub	sp, #16
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d106      	bne.n	8015d4c <tcp_parseopt+0x1c>
 8015d3e:	4b32      	ldr	r3, [pc, #200]	; (8015e08 <tcp_parseopt+0xd8>)
 8015d40:	f240 727d 	movw	r2, #1917	; 0x77d
 8015d44:	4931      	ldr	r1, [pc, #196]	; (8015e0c <tcp_parseopt+0xdc>)
 8015d46:	4832      	ldr	r0, [pc, #200]	; (8015e10 <tcp_parseopt+0xe0>)
 8015d48:	f005 fab2 	bl	801b2b0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015d4c:	4b31      	ldr	r3, [pc, #196]	; (8015e14 <tcp_parseopt+0xe4>)
 8015d4e:	881b      	ldrh	r3, [r3, #0]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d056      	beq.n	8015e02 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015d54:	4b30      	ldr	r3, [pc, #192]	; (8015e18 <tcp_parseopt+0xe8>)
 8015d56:	2200      	movs	r2, #0
 8015d58:	801a      	strh	r2, [r3, #0]
 8015d5a:	e046      	b.n	8015dea <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015d5c:	f7ff ffb2 	bl	8015cc4 <tcp_get_next_optbyte>
 8015d60:	4603      	mov	r3, r0
 8015d62:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015d64:	7bfb      	ldrb	r3, [r7, #15]
 8015d66:	2b02      	cmp	r3, #2
 8015d68:	d006      	beq.n	8015d78 <tcp_parseopt+0x48>
 8015d6a:	2b02      	cmp	r3, #2
 8015d6c:	dc2c      	bgt.n	8015dc8 <tcp_parseopt+0x98>
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d042      	beq.n	8015df8 <tcp_parseopt+0xc8>
 8015d72:	2b01      	cmp	r3, #1
 8015d74:	d128      	bne.n	8015dc8 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015d76:	e038      	b.n	8015dea <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015d78:	f7ff ffa4 	bl	8015cc4 <tcp_get_next_optbyte>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	2b04      	cmp	r3, #4
 8015d80:	d13c      	bne.n	8015dfc <tcp_parseopt+0xcc>
 8015d82:	4b25      	ldr	r3, [pc, #148]	; (8015e18 <tcp_parseopt+0xe8>)
 8015d84:	881b      	ldrh	r3, [r3, #0]
 8015d86:	3301      	adds	r3, #1
 8015d88:	4a22      	ldr	r2, [pc, #136]	; (8015e14 <tcp_parseopt+0xe4>)
 8015d8a:	8812      	ldrh	r2, [r2, #0]
 8015d8c:	4293      	cmp	r3, r2
 8015d8e:	da35      	bge.n	8015dfc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015d90:	f7ff ff98 	bl	8015cc4 <tcp_get_next_optbyte>
 8015d94:	4603      	mov	r3, r0
 8015d96:	b29b      	uxth	r3, r3
 8015d98:	021b      	lsls	r3, r3, #8
 8015d9a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015d9c:	f7ff ff92 	bl	8015cc4 <tcp_get_next_optbyte>
 8015da0:	4603      	mov	r3, r0
 8015da2:	b29a      	uxth	r2, r3
 8015da4:	89bb      	ldrh	r3, [r7, #12]
 8015da6:	4313      	orrs	r3, r2
 8015da8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015daa:	89bb      	ldrh	r3, [r7, #12]
 8015dac:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d804      	bhi.n	8015dbe <tcp_parseopt+0x8e>
 8015db4:	89bb      	ldrh	r3, [r7, #12]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d001      	beq.n	8015dbe <tcp_parseopt+0x8e>
 8015dba:	89ba      	ldrh	r2, [r7, #12]
 8015dbc:	e001      	b.n	8015dc2 <tcp_parseopt+0x92>
 8015dbe:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015dc6:	e010      	b.n	8015dea <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015dc8:	f7ff ff7c 	bl	8015cc4 <tcp_get_next_optbyte>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015dd0:	7afb      	ldrb	r3, [r7, #11]
 8015dd2:	2b01      	cmp	r3, #1
 8015dd4:	d914      	bls.n	8015e00 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015dd6:	7afb      	ldrb	r3, [r7, #11]
 8015dd8:	b29a      	uxth	r2, r3
 8015dda:	4b0f      	ldr	r3, [pc, #60]	; (8015e18 <tcp_parseopt+0xe8>)
 8015ddc:	881b      	ldrh	r3, [r3, #0]
 8015dde:	4413      	add	r3, r2
 8015de0:	b29b      	uxth	r3, r3
 8015de2:	3b02      	subs	r3, #2
 8015de4:	b29a      	uxth	r2, r3
 8015de6:	4b0c      	ldr	r3, [pc, #48]	; (8015e18 <tcp_parseopt+0xe8>)
 8015de8:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015dea:	4b0b      	ldr	r3, [pc, #44]	; (8015e18 <tcp_parseopt+0xe8>)
 8015dec:	881a      	ldrh	r2, [r3, #0]
 8015dee:	4b09      	ldr	r3, [pc, #36]	; (8015e14 <tcp_parseopt+0xe4>)
 8015df0:	881b      	ldrh	r3, [r3, #0]
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d3b2      	bcc.n	8015d5c <tcp_parseopt+0x2c>
 8015df6:	e004      	b.n	8015e02 <tcp_parseopt+0xd2>
          return;
 8015df8:	bf00      	nop
 8015dfa:	e002      	b.n	8015e02 <tcp_parseopt+0xd2>
            return;
 8015dfc:	bf00      	nop
 8015dfe:	e000      	b.n	8015e02 <tcp_parseopt+0xd2>
            return;
 8015e00:	bf00      	nop
      }
    }
  }
}
 8015e02:	3710      	adds	r7, #16
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}
 8015e08:	0801f5f8 	.word	0x0801f5f8
 8015e0c:	0801fa5c 	.word	0x0801fa5c
 8015e10:	0801f644 	.word	0x0801f644
 8015e14:	200071e8 	.word	0x200071e8
 8015e18:	200071f0 	.word	0x200071f0

08015e1c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015e1c:	b480      	push	{r7}
 8015e1e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015e20:	4b05      	ldr	r3, [pc, #20]	; (8015e38 <tcp_trigger_input_pcb_close+0x1c>)
 8015e22:	781b      	ldrb	r3, [r3, #0]
 8015e24:	f043 0310 	orr.w	r3, r3, #16
 8015e28:	b2da      	uxtb	r2, r3
 8015e2a:	4b03      	ldr	r3, [pc, #12]	; (8015e38 <tcp_trigger_input_pcb_close+0x1c>)
 8015e2c:	701a      	strb	r2, [r3, #0]
}
 8015e2e:	bf00      	nop
 8015e30:	46bd      	mov	sp, r7
 8015e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e36:	4770      	bx	lr
 8015e38:	20007201 	.word	0x20007201

08015e3c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b084      	sub	sp, #16
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d00a      	beq.n	8015e64 <tcp_route+0x28>
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	7a1b      	ldrb	r3, [r3, #8]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d006      	beq.n	8015e64 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	7a1b      	ldrb	r3, [r3, #8]
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7fb f8b6 	bl	8010fcc <netif_get_by_index>
 8015e60:	4603      	mov	r3, r0
 8015e62:	e003      	b.n	8015e6c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015e64:	6878      	ldr	r0, [r7, #4]
 8015e66:	f003 fafb 	bl	8019460 <ip4_route>
 8015e6a:	4603      	mov	r3, r0
  }
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3710      	adds	r7, #16
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015e74:	b590      	push	{r4, r7, lr}
 8015e76:	b087      	sub	sp, #28
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	60f8      	str	r0, [r7, #12]
 8015e7c:	60b9      	str	r1, [r7, #8]
 8015e7e:	603b      	str	r3, [r7, #0]
 8015e80:	4613      	mov	r3, r2
 8015e82:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d105      	bne.n	8015e96 <tcp_create_segment+0x22>
 8015e8a:	4b44      	ldr	r3, [pc, #272]	; (8015f9c <tcp_create_segment+0x128>)
 8015e8c:	22a3      	movs	r2, #163	; 0xa3
 8015e8e:	4944      	ldr	r1, [pc, #272]	; (8015fa0 <tcp_create_segment+0x12c>)
 8015e90:	4844      	ldr	r0, [pc, #272]	; (8015fa4 <tcp_create_segment+0x130>)
 8015e92:	f005 fa0d 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015e96:	68bb      	ldr	r3, [r7, #8]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d105      	bne.n	8015ea8 <tcp_create_segment+0x34>
 8015e9c:	4b3f      	ldr	r3, [pc, #252]	; (8015f9c <tcp_create_segment+0x128>)
 8015e9e:	22a4      	movs	r2, #164	; 0xa4
 8015ea0:	4941      	ldr	r1, [pc, #260]	; (8015fa8 <tcp_create_segment+0x134>)
 8015ea2:	4840      	ldr	r0, [pc, #256]	; (8015fa4 <tcp_create_segment+0x130>)
 8015ea4:	f005 fa04 	bl	801b2b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015ea8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015eac:	009b      	lsls	r3, r3, #2
 8015eae:	b2db      	uxtb	r3, r3
 8015eb0:	f003 0304 	and.w	r3, r3, #4
 8015eb4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015eb6:	2003      	movs	r0, #3
 8015eb8:	f7fa fd02 	bl	80108c0 <memp_malloc>
 8015ebc:	6138      	str	r0, [r7, #16]
 8015ebe:	693b      	ldr	r3, [r7, #16]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d104      	bne.n	8015ece <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015ec4:	68b8      	ldr	r0, [r7, #8]
 8015ec6:	f7fb fbe1 	bl	801168c <pbuf_free>
    return NULL;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e061      	b.n	8015f92 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015ed4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015ed6:	693b      	ldr	r3, [r7, #16]
 8015ed8:	2200      	movs	r2, #0
 8015eda:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	68ba      	ldr	r2, [r7, #8]
 8015ee0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	891a      	ldrh	r2, [r3, #8]
 8015ee6:	7dfb      	ldrb	r3, [r7, #23]
 8015ee8:	b29b      	uxth	r3, r3
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d205      	bcs.n	8015efa <tcp_create_segment+0x86>
 8015eee:	4b2b      	ldr	r3, [pc, #172]	; (8015f9c <tcp_create_segment+0x128>)
 8015ef0:	22b0      	movs	r2, #176	; 0xb0
 8015ef2:	492e      	ldr	r1, [pc, #184]	; (8015fac <tcp_create_segment+0x138>)
 8015ef4:	482b      	ldr	r0, [pc, #172]	; (8015fa4 <tcp_create_segment+0x130>)
 8015ef6:	f005 f9db 	bl	801b2b0 <iprintf>
  seg->len = p->tot_len - optlen;
 8015efa:	68bb      	ldr	r3, [r7, #8]
 8015efc:	891a      	ldrh	r2, [r3, #8]
 8015efe:	7dfb      	ldrb	r3, [r7, #23]
 8015f00:	b29b      	uxth	r3, r3
 8015f02:	1ad3      	subs	r3, r2, r3
 8015f04:	b29a      	uxth	r2, r3
 8015f06:	693b      	ldr	r3, [r7, #16]
 8015f08:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015f0a:	2114      	movs	r1, #20
 8015f0c:	68b8      	ldr	r0, [r7, #8]
 8015f0e:	f7fb fb27 	bl	8011560 <pbuf_add_header>
 8015f12:	4603      	mov	r3, r0
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d004      	beq.n	8015f22 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015f18:	6938      	ldr	r0, [r7, #16]
 8015f1a:	f7fd f81e 	bl	8012f5a <tcp_seg_free>
    return NULL;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	e037      	b.n	8015f92 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	685b      	ldr	r3, [r3, #4]
 8015f26:	685a      	ldr	r2, [r3, #4]
 8015f28:	693b      	ldr	r3, [r7, #16]
 8015f2a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	8ada      	ldrh	r2, [r3, #22]
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	68dc      	ldr	r4, [r3, #12]
 8015f34:	4610      	mov	r0, r2
 8015f36:	f7f9 ffa5 	bl	800fe84 <lwip_htons>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	8b1a      	ldrh	r2, [r3, #24]
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	68dc      	ldr	r4, [r3, #12]
 8015f46:	4610      	mov	r0, r2
 8015f48:	f7f9 ff9c 	bl	800fe84 <lwip_htons>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	68dc      	ldr	r4, [r3, #12]
 8015f54:	6838      	ldr	r0, [r7, #0]
 8015f56:	f7f9 ffaa 	bl	800feae <lwip_htonl>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015f5e:	7dfb      	ldrb	r3, [r7, #23]
 8015f60:	089b      	lsrs	r3, r3, #2
 8015f62:	b2db      	uxtb	r3, r3
 8015f64:	b29b      	uxth	r3, r3
 8015f66:	3305      	adds	r3, #5
 8015f68:	b29b      	uxth	r3, r3
 8015f6a:	031b      	lsls	r3, r3, #12
 8015f6c:	b29a      	uxth	r2, r3
 8015f6e:	79fb      	ldrb	r3, [r7, #7]
 8015f70:	b29b      	uxth	r3, r3
 8015f72:	4313      	orrs	r3, r2
 8015f74:	b29a      	uxth	r2, r3
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	68dc      	ldr	r4, [r3, #12]
 8015f7a:	4610      	mov	r0, r2
 8015f7c:	f7f9 ff82 	bl	800fe84 <lwip_htons>
 8015f80:	4603      	mov	r3, r0
 8015f82:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	68db      	ldr	r3, [r3, #12]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	749a      	strb	r2, [r3, #18]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	74da      	strb	r2, [r3, #19]
  return seg;
 8015f90:	693b      	ldr	r3, [r7, #16]
}
 8015f92:	4618      	mov	r0, r3
 8015f94:	371c      	adds	r7, #28
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd90      	pop	{r4, r7, pc}
 8015f9a:	bf00      	nop
 8015f9c:	0801fa78 	.word	0x0801fa78
 8015fa0:	0801faac 	.word	0x0801faac
 8015fa4:	0801facc 	.word	0x0801facc
 8015fa8:	0801faf4 	.word	0x0801faf4
 8015fac:	0801fb18 	.word	0x0801fb18

08015fb0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b086      	sub	sp, #24
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	607b      	str	r3, [r7, #4]
 8015fb8:	4603      	mov	r3, r0
 8015fba:	73fb      	strb	r3, [r7, #15]
 8015fbc:	460b      	mov	r3, r1
 8015fbe:	81bb      	strh	r3, [r7, #12]
 8015fc0:	4613      	mov	r3, r2
 8015fc2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015fc4:	89bb      	ldrh	r3, [r7, #12]
 8015fc6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d105      	bne.n	8015fda <tcp_pbuf_prealloc+0x2a>
 8015fce:	4b30      	ldr	r3, [pc, #192]	; (8016090 <tcp_pbuf_prealloc+0xe0>)
 8015fd0:	22e8      	movs	r2, #232	; 0xe8
 8015fd2:	4930      	ldr	r1, [pc, #192]	; (8016094 <tcp_pbuf_prealloc+0xe4>)
 8015fd4:	4830      	ldr	r0, [pc, #192]	; (8016098 <tcp_pbuf_prealloc+0xe8>)
 8015fd6:	f005 f96b 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015fda:	6a3b      	ldr	r3, [r7, #32]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d105      	bne.n	8015fec <tcp_pbuf_prealloc+0x3c>
 8015fe0:	4b2b      	ldr	r3, [pc, #172]	; (8016090 <tcp_pbuf_prealloc+0xe0>)
 8015fe2:	22e9      	movs	r2, #233	; 0xe9
 8015fe4:	492d      	ldr	r1, [pc, #180]	; (801609c <tcp_pbuf_prealloc+0xec>)
 8015fe6:	482c      	ldr	r0, [pc, #176]	; (8016098 <tcp_pbuf_prealloc+0xe8>)
 8015fe8:	f005 f962 	bl	801b2b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015fec:	89ba      	ldrh	r2, [r7, #12]
 8015fee:	897b      	ldrh	r3, [r7, #10]
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	d221      	bcs.n	8016038 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015ff4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015ff8:	f003 0302 	and.w	r3, r3, #2
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d111      	bne.n	8016024 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016000:	6a3b      	ldr	r3, [r7, #32]
 8016002:	8b5b      	ldrh	r3, [r3, #26]
 8016004:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016008:	2b00      	cmp	r3, #0
 801600a:	d115      	bne.n	8016038 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801600c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016010:	2b00      	cmp	r3, #0
 8016012:	d007      	beq.n	8016024 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016014:	6a3b      	ldr	r3, [r7, #32]
 8016016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016018:	2b00      	cmp	r3, #0
 801601a:	d103      	bne.n	8016024 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801601c:	6a3b      	ldr	r3, [r7, #32]
 801601e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8016020:	2b00      	cmp	r3, #0
 8016022:	d009      	beq.n	8016038 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016024:	89bb      	ldrh	r3, [r7, #12]
 8016026:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 801602a:	f023 0203 	bic.w	r2, r3, #3
 801602e:	897b      	ldrh	r3, [r7, #10]
 8016030:	4293      	cmp	r3, r2
 8016032:	bf28      	it	cs
 8016034:	4613      	movcs	r3, r2
 8016036:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016038:	8af9      	ldrh	r1, [r7, #22]
 801603a:	7bfb      	ldrb	r3, [r7, #15]
 801603c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016040:	4618      	mov	r0, r3
 8016042:	f7fb f83f 	bl	80110c4 <pbuf_alloc>
 8016046:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d101      	bne.n	8016052 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801604e:	2300      	movs	r3, #0
 8016050:	e019      	b.n	8016086 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d006      	beq.n	8016068 <tcp_pbuf_prealloc+0xb8>
 801605a:	4b0d      	ldr	r3, [pc, #52]	; (8016090 <tcp_pbuf_prealloc+0xe0>)
 801605c:	f240 120b 	movw	r2, #267	; 0x10b
 8016060:	490f      	ldr	r1, [pc, #60]	; (80160a0 <tcp_pbuf_prealloc+0xf0>)
 8016062:	480d      	ldr	r0, [pc, #52]	; (8016098 <tcp_pbuf_prealloc+0xe8>)
 8016064:	f005 f924 	bl	801b2b0 <iprintf>
  *oversize = p->len - length;
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	895a      	ldrh	r2, [r3, #10]
 801606c:	89bb      	ldrh	r3, [r7, #12]
 801606e:	1ad3      	subs	r3, r2, r3
 8016070:	b29a      	uxth	r2, r3
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	89ba      	ldrh	r2, [r7, #12]
 801607a:	811a      	strh	r2, [r3, #8]
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	891a      	ldrh	r2, [r3, #8]
 8016080:	693b      	ldr	r3, [r7, #16]
 8016082:	815a      	strh	r2, [r3, #10]
  return p;
 8016084:	693b      	ldr	r3, [r7, #16]
}
 8016086:	4618      	mov	r0, r3
 8016088:	3718      	adds	r7, #24
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	0801fa78 	.word	0x0801fa78
 8016094:	0801fb30 	.word	0x0801fb30
 8016098:	0801facc 	.word	0x0801facc
 801609c:	0801fb54 	.word	0x0801fb54
 80160a0:	0801fb74 	.word	0x0801fb74

080160a4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	460b      	mov	r3, r1
 80160ae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d106      	bne.n	80160c4 <tcp_write_checks+0x20>
 80160b6:	4b33      	ldr	r3, [pc, #204]	; (8016184 <tcp_write_checks+0xe0>)
 80160b8:	f240 1233 	movw	r2, #307	; 0x133
 80160bc:	4932      	ldr	r1, [pc, #200]	; (8016188 <tcp_write_checks+0xe4>)
 80160be:	4833      	ldr	r0, [pc, #204]	; (801618c <tcp_write_checks+0xe8>)
 80160c0:	f005 f8f6 	bl	801b2b0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	7d1b      	ldrb	r3, [r3, #20]
 80160c8:	2b04      	cmp	r3, #4
 80160ca:	d00e      	beq.n	80160ea <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80160d0:	2b07      	cmp	r3, #7
 80160d2:	d00a      	beq.n	80160ea <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80160d8:	2b02      	cmp	r3, #2
 80160da:	d006      	beq.n	80160ea <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80160e0:	2b03      	cmp	r3, #3
 80160e2:	d002      	beq.n	80160ea <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80160e4:	f06f 030a 	mvn.w	r3, #10
 80160e8:	e048      	b.n	801617c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80160ea:	887b      	ldrh	r3, [r7, #2]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d101      	bne.n	80160f4 <tcp_write_checks+0x50>
    return ERR_OK;
 80160f0:	2300      	movs	r3, #0
 80160f2:	e043      	b.n	801617c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80160fa:	887a      	ldrh	r2, [r7, #2]
 80160fc:	429a      	cmp	r2, r3
 80160fe:	d909      	bls.n	8016114 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	8b5b      	ldrh	r3, [r3, #26]
 8016104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016108:	b29a      	uxth	r2, r3
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801610e:	f04f 33ff 	mov.w	r3, #4294967295
 8016112:	e033      	b.n	801617c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801611a:	2b0f      	cmp	r3, #15
 801611c:	d909      	bls.n	8016132 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	8b5b      	ldrh	r3, [r3, #26]
 8016122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016126:	b29a      	uxth	r2, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801612c:	f04f 33ff 	mov.w	r3, #4294967295
 8016130:	e024      	b.n	801617c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016138:	2b00      	cmp	r3, #0
 801613a:	d00f      	beq.n	801615c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016140:	2b00      	cmp	r3, #0
 8016142:	d11a      	bne.n	801617a <tcp_write_checks+0xd6>
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016148:	2b00      	cmp	r3, #0
 801614a:	d116      	bne.n	801617a <tcp_write_checks+0xd6>
 801614c:	4b0d      	ldr	r3, [pc, #52]	; (8016184 <tcp_write_checks+0xe0>)
 801614e:	f240 1255 	movw	r2, #341	; 0x155
 8016152:	490f      	ldr	r1, [pc, #60]	; (8016190 <tcp_write_checks+0xec>)
 8016154:	480d      	ldr	r0, [pc, #52]	; (801618c <tcp_write_checks+0xe8>)
 8016156:	f005 f8ab 	bl	801b2b0 <iprintf>
 801615a:	e00e      	b.n	801617a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016160:	2b00      	cmp	r3, #0
 8016162:	d103      	bne.n	801616c <tcp_write_checks+0xc8>
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016168:	2b00      	cmp	r3, #0
 801616a:	d006      	beq.n	801617a <tcp_write_checks+0xd6>
 801616c:	4b05      	ldr	r3, [pc, #20]	; (8016184 <tcp_write_checks+0xe0>)
 801616e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8016172:	4908      	ldr	r1, [pc, #32]	; (8016194 <tcp_write_checks+0xf0>)
 8016174:	4805      	ldr	r0, [pc, #20]	; (801618c <tcp_write_checks+0xe8>)
 8016176:	f005 f89b 	bl	801b2b0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801617a:	2300      	movs	r3, #0
}
 801617c:	4618      	mov	r0, r3
 801617e:	3708      	adds	r7, #8
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}
 8016184:	0801fa78 	.word	0x0801fa78
 8016188:	0801fb88 	.word	0x0801fb88
 801618c:	0801facc 	.word	0x0801facc
 8016190:	0801fba8 	.word	0x0801fba8
 8016194:	0801fbe4 	.word	0x0801fbe4

08016198 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016198:	b590      	push	{r4, r7, lr}
 801619a:	b09b      	sub	sp, #108	; 0x6c
 801619c:	af04      	add	r7, sp, #16
 801619e:	60f8      	str	r0, [r7, #12]
 80161a0:	60b9      	str	r1, [r7, #8]
 80161a2:	4611      	mov	r1, r2
 80161a4:	461a      	mov	r2, r3
 80161a6:	460b      	mov	r3, r1
 80161a8:	80fb      	strh	r3, [r7, #6]
 80161aa:	4613      	mov	r3, r2
 80161ac:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80161ae:	2300      	movs	r3, #0
 80161b0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80161b2:	2300      	movs	r3, #0
 80161b4:	653b      	str	r3, [r7, #80]	; 0x50
 80161b6:	2300      	movs	r3, #0
 80161b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80161ba:	2300      	movs	r3, #0
 80161bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80161be:	2300      	movs	r3, #0
 80161c0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80161c2:	2300      	movs	r3, #0
 80161c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80161c8:	2300      	movs	r3, #0
 80161ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80161ce:	2300      	movs	r3, #0
 80161d0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80161d2:	2300      	movs	r3, #0
 80161d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80161d6:	2300      	movs	r3, #0
 80161d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d109      	bne.n	80161f4 <tcp_write+0x5c>
 80161e0:	4ba4      	ldr	r3, [pc, #656]	; (8016474 <tcp_write+0x2dc>)
 80161e2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80161e6:	49a4      	ldr	r1, [pc, #656]	; (8016478 <tcp_write+0x2e0>)
 80161e8:	48a4      	ldr	r0, [pc, #656]	; (801647c <tcp_write+0x2e4>)
 80161ea:	f005 f861 	bl	801b2b0 <iprintf>
 80161ee:	f06f 030f 	mvn.w	r3, #15
 80161f2:	e32a      	b.n	801684a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80161fa:	085b      	lsrs	r3, r3, #1
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016202:	4293      	cmp	r3, r2
 8016204:	bf28      	it	cs
 8016206:	4613      	movcs	r3, r2
 8016208:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801620a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801620c:	2b00      	cmp	r3, #0
 801620e:	d102      	bne.n	8016216 <tcp_write+0x7e>
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016214:	e000      	b.n	8016218 <tcp_write+0x80>
 8016216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016218:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d109      	bne.n	8016234 <tcp_write+0x9c>
 8016220:	4b94      	ldr	r3, [pc, #592]	; (8016474 <tcp_write+0x2dc>)
 8016222:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016226:	4996      	ldr	r1, [pc, #600]	; (8016480 <tcp_write+0x2e8>)
 8016228:	4894      	ldr	r0, [pc, #592]	; (801647c <tcp_write+0x2e4>)
 801622a:	f005 f841 	bl	801b2b0 <iprintf>
 801622e:	f06f 030f 	mvn.w	r3, #15
 8016232:	e30a      	b.n	801684a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016234:	88fb      	ldrh	r3, [r7, #6]
 8016236:	4619      	mov	r1, r3
 8016238:	68f8      	ldr	r0, [r7, #12]
 801623a:	f7ff ff33 	bl	80160a4 <tcp_write_checks>
 801623e:	4603      	mov	r3, r0
 8016240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8016244:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016248:	2b00      	cmp	r3, #0
 801624a:	d002      	beq.n	8016252 <tcp_write+0xba>
    return err;
 801624c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016250:	e2fb      	b.n	801684a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016258:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801625c:	2300      	movs	r3, #0
 801625e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016266:	2b00      	cmp	r3, #0
 8016268:	f000 80f6 	beq.w	8016458 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016270:	653b      	str	r3, [r7, #80]	; 0x50
 8016272:	e002      	b.n	801627a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801627a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d1f8      	bne.n	8016274 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016284:	7a9b      	ldrb	r3, [r3, #10]
 8016286:	009b      	lsls	r3, r3, #2
 8016288:	b29b      	uxth	r3, r3
 801628a:	f003 0304 	and.w	r3, r3, #4
 801628e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016290:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016294:	891b      	ldrh	r3, [r3, #8]
 8016296:	4619      	mov	r1, r3
 8016298:	8c3b      	ldrh	r3, [r7, #32]
 801629a:	440b      	add	r3, r1
 801629c:	429a      	cmp	r2, r3
 801629e:	da06      	bge.n	80162ae <tcp_write+0x116>
 80162a0:	4b74      	ldr	r3, [pc, #464]	; (8016474 <tcp_write+0x2dc>)
 80162a2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80162a6:	4977      	ldr	r1, [pc, #476]	; (8016484 <tcp_write+0x2ec>)
 80162a8:	4874      	ldr	r0, [pc, #464]	; (801647c <tcp_write+0x2e4>)
 80162aa:	f005 f801 	bl	801b2b0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80162ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162b0:	891a      	ldrh	r2, [r3, #8]
 80162b2:	8c3b      	ldrh	r3, [r7, #32]
 80162b4:	4413      	add	r3, r2
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162ba:	1ad3      	subs	r3, r2, r3
 80162bc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80162c4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80162c6:	8a7b      	ldrh	r3, [r7, #18]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d026      	beq.n	801631a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80162cc:	8a7b      	ldrh	r3, [r7, #18]
 80162ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162d0:	429a      	cmp	r2, r3
 80162d2:	d206      	bcs.n	80162e2 <tcp_write+0x14a>
 80162d4:	4b67      	ldr	r3, [pc, #412]	; (8016474 <tcp_write+0x2dc>)
 80162d6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80162da:	496b      	ldr	r1, [pc, #428]	; (8016488 <tcp_write+0x2f0>)
 80162dc:	4867      	ldr	r0, [pc, #412]	; (801647c <tcp_write+0x2e4>)
 80162de:	f004 ffe7 	bl	801b2b0 <iprintf>
      seg = last_unsent;
 80162e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80162e6:	8a7b      	ldrh	r3, [r7, #18]
 80162e8:	88fa      	ldrh	r2, [r7, #6]
 80162ea:	4293      	cmp	r3, r2
 80162ec:	bf28      	it	cs
 80162ee:	4613      	movcs	r3, r2
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162f4:	4293      	cmp	r3, r2
 80162f6:	bf28      	it	cs
 80162f8:	4613      	movcs	r3, r2
 80162fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80162fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016300:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016302:	4413      	add	r3, r2
 8016304:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8016308:	8a7a      	ldrh	r2, [r7, #18]
 801630a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801630c:	1ad3      	subs	r3, r2, r3
 801630e:	b29b      	uxth	r3, r3
 8016310:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016312:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016314:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016316:	1ad3      	subs	r3, r2, r3
 8016318:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801631a:	8a7b      	ldrh	r3, [r7, #18]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d00b      	beq.n	8016338 <tcp_write+0x1a0>
 8016320:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016324:	88fb      	ldrh	r3, [r7, #6]
 8016326:	429a      	cmp	r2, r3
 8016328:	d006      	beq.n	8016338 <tcp_write+0x1a0>
 801632a:	4b52      	ldr	r3, [pc, #328]	; (8016474 <tcp_write+0x2dc>)
 801632c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016330:	4956      	ldr	r1, [pc, #344]	; (801648c <tcp_write+0x2f4>)
 8016332:	4852      	ldr	r0, [pc, #328]	; (801647c <tcp_write+0x2e4>)
 8016334:	f004 ffbc 	bl	801b2b0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016338:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801633c:	88fb      	ldrh	r3, [r7, #6]
 801633e:	429a      	cmp	r2, r3
 8016340:	f080 8167 	bcs.w	8016612 <tcp_write+0x47a>
 8016344:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016346:	2b00      	cmp	r3, #0
 8016348:	f000 8163 	beq.w	8016612 <tcp_write+0x47a>
 801634c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801634e:	891b      	ldrh	r3, [r3, #8]
 8016350:	2b00      	cmp	r3, #0
 8016352:	f000 815e 	beq.w	8016612 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016356:	88fa      	ldrh	r2, [r7, #6]
 8016358:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801635c:	1ad2      	subs	r2, r2, r3
 801635e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016360:	4293      	cmp	r3, r2
 8016362:	bfa8      	it	ge
 8016364:	4613      	movge	r3, r2
 8016366:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801636a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801636c:	797b      	ldrb	r3, [r7, #5]
 801636e:	f003 0301 	and.w	r3, r3, #1
 8016372:	2b00      	cmp	r3, #0
 8016374:	d027      	beq.n	80163c6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016376:	f107 0012 	add.w	r0, r7, #18
 801637a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801637c:	8bf9      	ldrh	r1, [r7, #30]
 801637e:	2301      	movs	r3, #1
 8016380:	9302      	str	r3, [sp, #8]
 8016382:	797b      	ldrb	r3, [r7, #5]
 8016384:	9301      	str	r3, [sp, #4]
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	9300      	str	r3, [sp, #0]
 801638a:	4603      	mov	r3, r0
 801638c:	2000      	movs	r0, #0
 801638e:	f7ff fe0f 	bl	8015fb0 <tcp_pbuf_prealloc>
 8016392:	6578      	str	r0, [r7, #84]	; 0x54
 8016394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016396:	2b00      	cmp	r3, #0
 8016398:	f000 8225 	beq.w	80167e6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801639c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801639e:	6858      	ldr	r0, [r3, #4]
 80163a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163a4:	68ba      	ldr	r2, [r7, #8]
 80163a6:	4413      	add	r3, r2
 80163a8:	8bfa      	ldrh	r2, [r7, #30]
 80163aa:	4619      	mov	r1, r3
 80163ac:	f005 f9a3 	bl	801b6f6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80163b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80163b2:	f7fb f9f3 	bl	801179c <pbuf_clen>
 80163b6:	4603      	mov	r3, r0
 80163b8:	461a      	mov	r2, r3
 80163ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163be:	4413      	add	r3, r2
 80163c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80163c4:	e041      	b.n	801644a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80163c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	637b      	str	r3, [r7, #52]	; 0x34
 80163cc:	e002      	b.n	80163d4 <tcp_write+0x23c>
 80163ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	637b      	str	r3, [r7, #52]	; 0x34
 80163d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d1f8      	bne.n	80163ce <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80163dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163de:	7b1b      	ldrb	r3, [r3, #12]
 80163e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d115      	bne.n	8016414 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80163e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ea:	685b      	ldr	r3, [r3, #4]
 80163ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163ee:	8952      	ldrh	r2, [r2, #10]
 80163f0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80163f2:	68ba      	ldr	r2, [r7, #8]
 80163f4:	429a      	cmp	r2, r3
 80163f6:	d10d      	bne.n	8016414 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80163f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d006      	beq.n	801640e <tcp_write+0x276>
 8016400:	4b1c      	ldr	r3, [pc, #112]	; (8016474 <tcp_write+0x2dc>)
 8016402:	f240 2231 	movw	r2, #561	; 0x231
 8016406:	4922      	ldr	r1, [pc, #136]	; (8016490 <tcp_write+0x2f8>)
 8016408:	481c      	ldr	r0, [pc, #112]	; (801647c <tcp_write+0x2e4>)
 801640a:	f004 ff51 	bl	801b2b0 <iprintf>
          extendlen = seglen;
 801640e:	8bfb      	ldrh	r3, [r7, #30]
 8016410:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8016412:	e01a      	b.n	801644a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016414:	8bfb      	ldrh	r3, [r7, #30]
 8016416:	2201      	movs	r2, #1
 8016418:	4619      	mov	r1, r3
 801641a:	2000      	movs	r0, #0
 801641c:	f7fa fe52 	bl	80110c4 <pbuf_alloc>
 8016420:	6578      	str	r0, [r7, #84]	; 0x54
 8016422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016424:	2b00      	cmp	r3, #0
 8016426:	f000 81e0 	beq.w	80167ea <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801642a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801642e:	68ba      	ldr	r2, [r7, #8]
 8016430:	441a      	add	r2, r3
 8016432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016434:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016436:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016438:	f7fb f9b0 	bl	801179c <pbuf_clen>
 801643c:	4603      	mov	r3, r0
 801643e:	461a      	mov	r2, r3
 8016440:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016444:	4413      	add	r3, r2
 8016446:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801644a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801644e:	8bfb      	ldrh	r3, [r7, #30]
 8016450:	4413      	add	r3, r2
 8016452:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016456:	e0dc      	b.n	8016612 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801645e:	2b00      	cmp	r3, #0
 8016460:	f000 80d7 	beq.w	8016612 <tcp_write+0x47a>
 8016464:	4b03      	ldr	r3, [pc, #12]	; (8016474 <tcp_write+0x2dc>)
 8016466:	f240 224a 	movw	r2, #586	; 0x24a
 801646a:	490a      	ldr	r1, [pc, #40]	; (8016494 <tcp_write+0x2fc>)
 801646c:	4803      	ldr	r0, [pc, #12]	; (801647c <tcp_write+0x2e4>)
 801646e:	f004 ff1f 	bl	801b2b0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016472:	e0ce      	b.n	8016612 <tcp_write+0x47a>
 8016474:	0801fa78 	.word	0x0801fa78
 8016478:	0801fc18 	.word	0x0801fc18
 801647c:	0801facc 	.word	0x0801facc
 8016480:	0801fc30 	.word	0x0801fc30
 8016484:	0801fc64 	.word	0x0801fc64
 8016488:	0801fc7c 	.word	0x0801fc7c
 801648c:	0801fc9c 	.word	0x0801fc9c
 8016490:	0801fcbc 	.word	0x0801fcbc
 8016494:	0801fce8 	.word	0x0801fce8
    struct pbuf *p;
    u16_t left = len - pos;
 8016498:	88fa      	ldrh	r2, [r7, #6]
 801649a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80164a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80164a6:	b29b      	uxth	r3, r3
 80164a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80164aa:	1ad3      	subs	r3, r2, r3
 80164ac:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80164ae:	8b7a      	ldrh	r2, [r7, #26]
 80164b0:	8bbb      	ldrh	r3, [r7, #28]
 80164b2:	4293      	cmp	r3, r2
 80164b4:	bf28      	it	cs
 80164b6:	4613      	movcs	r3, r2
 80164b8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80164ba:	797b      	ldrb	r3, [r7, #5]
 80164bc:	f003 0301 	and.w	r3, r3, #1
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d036      	beq.n	8016532 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80164c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80164c8:	b29a      	uxth	r2, r3
 80164ca:	8b3b      	ldrh	r3, [r7, #24]
 80164cc:	4413      	add	r3, r2
 80164ce:	b299      	uxth	r1, r3
 80164d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	bf0c      	ite	eq
 80164d6:	2301      	moveq	r3, #1
 80164d8:	2300      	movne	r3, #0
 80164da:	b2db      	uxtb	r3, r3
 80164dc:	f107 0012 	add.w	r0, r7, #18
 80164e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80164e2:	9302      	str	r3, [sp, #8]
 80164e4:	797b      	ldrb	r3, [r7, #5]
 80164e6:	9301      	str	r3, [sp, #4]
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	9300      	str	r3, [sp, #0]
 80164ec:	4603      	mov	r3, r0
 80164ee:	2036      	movs	r0, #54	; 0x36
 80164f0:	f7ff fd5e 	bl	8015fb0 <tcp_pbuf_prealloc>
 80164f4:	6338      	str	r0, [r7, #48]	; 0x30
 80164f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	f000 8178 	beq.w	80167ee <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80164fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016500:	895b      	ldrh	r3, [r3, #10]
 8016502:	8b3a      	ldrh	r2, [r7, #24]
 8016504:	429a      	cmp	r2, r3
 8016506:	d906      	bls.n	8016516 <tcp_write+0x37e>
 8016508:	4b8c      	ldr	r3, [pc, #560]	; (801673c <tcp_write+0x5a4>)
 801650a:	f240 2266 	movw	r2, #614	; 0x266
 801650e:	498c      	ldr	r1, [pc, #560]	; (8016740 <tcp_write+0x5a8>)
 8016510:	488c      	ldr	r0, [pc, #560]	; (8016744 <tcp_write+0x5ac>)
 8016512:	f004 fecd 	bl	801b2b0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016518:	685a      	ldr	r2, [r3, #4]
 801651a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801651e:	18d0      	adds	r0, r2, r3
 8016520:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016524:	68ba      	ldr	r2, [r7, #8]
 8016526:	4413      	add	r3, r2
 8016528:	8b3a      	ldrh	r2, [r7, #24]
 801652a:	4619      	mov	r1, r3
 801652c:	f005 f8e3 	bl	801b6f6 <memcpy>
 8016530:	e02f      	b.n	8016592 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016532:	8a7b      	ldrh	r3, [r7, #18]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d006      	beq.n	8016546 <tcp_write+0x3ae>
 8016538:	4b80      	ldr	r3, [pc, #512]	; (801673c <tcp_write+0x5a4>)
 801653a:	f240 2271 	movw	r2, #625	; 0x271
 801653e:	4982      	ldr	r1, [pc, #520]	; (8016748 <tcp_write+0x5b0>)
 8016540:	4880      	ldr	r0, [pc, #512]	; (8016744 <tcp_write+0x5ac>)
 8016542:	f004 feb5 	bl	801b2b0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016546:	8b3b      	ldrh	r3, [r7, #24]
 8016548:	2201      	movs	r2, #1
 801654a:	4619      	mov	r1, r3
 801654c:	2036      	movs	r0, #54	; 0x36
 801654e:	f7fa fdb9 	bl	80110c4 <pbuf_alloc>
 8016552:	6178      	str	r0, [r7, #20]
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	2b00      	cmp	r3, #0
 8016558:	f000 814b 	beq.w	80167f2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801655c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016560:	68ba      	ldr	r2, [r7, #8]
 8016562:	441a      	add	r2, r3
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016568:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801656c:	b29b      	uxth	r3, r3
 801656e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016572:	4619      	mov	r1, r3
 8016574:	2036      	movs	r0, #54	; 0x36
 8016576:	f7fa fda5 	bl	80110c4 <pbuf_alloc>
 801657a:	6338      	str	r0, [r7, #48]	; 0x30
 801657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801657e:	2b00      	cmp	r3, #0
 8016580:	d103      	bne.n	801658a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016582:	6978      	ldr	r0, [r7, #20]
 8016584:	f7fb f882 	bl	801168c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016588:	e136      	b.n	80167f8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801658a:	6979      	ldr	r1, [r7, #20]
 801658c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801658e:	f7fb f93f 	bl	8011810 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016594:	f7fb f902 	bl	801179c <pbuf_clen>
 8016598:	4603      	mov	r3, r0
 801659a:	461a      	mov	r2, r3
 801659c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80165a0:	4413      	add	r3, r2
 80165a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80165a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80165aa:	2b10      	cmp	r3, #16
 80165ac:	d903      	bls.n	80165b6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80165ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165b0:	f7fb f86c 	bl	801168c <pbuf_free>
      goto memerr;
 80165b4:	e120      	b.n	80167f8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80165ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80165be:	441a      	add	r2, r3
 80165c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165c4:	9300      	str	r3, [sp, #0]
 80165c6:	4613      	mov	r3, r2
 80165c8:	2200      	movs	r2, #0
 80165ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80165cc:	68f8      	ldr	r0, [r7, #12]
 80165ce:	f7ff fc51 	bl	8015e74 <tcp_create_segment>
 80165d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80165d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	f000 810d 	beq.w	80167f6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80165dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d102      	bne.n	80165e8 <tcp_write+0x450>
      queue = seg;
 80165e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165e4:	647b      	str	r3, [r7, #68]	; 0x44
 80165e6:	e00c      	b.n	8016602 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80165e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d106      	bne.n	80165fc <tcp_write+0x464>
 80165ee:	4b53      	ldr	r3, [pc, #332]	; (801673c <tcp_write+0x5a4>)
 80165f0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80165f4:	4955      	ldr	r1, [pc, #340]	; (801674c <tcp_write+0x5b4>)
 80165f6:	4853      	ldr	r0, [pc, #332]	; (8016744 <tcp_write+0x5ac>)
 80165f8:	f004 fe5a 	bl	801b2b0 <iprintf>
      prev_seg->next = seg;
 80165fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016600:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016604:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016606:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801660a:	8b3b      	ldrh	r3, [r7, #24]
 801660c:	4413      	add	r3, r2
 801660e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016612:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016616:	88fb      	ldrh	r3, [r7, #6]
 8016618:	429a      	cmp	r2, r3
 801661a:	f4ff af3d 	bcc.w	8016498 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801661e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016620:	2b00      	cmp	r3, #0
 8016622:	d02c      	beq.n	801667e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016626:	685b      	ldr	r3, [r3, #4]
 8016628:	62fb      	str	r3, [r7, #44]	; 0x2c
 801662a:	e01e      	b.n	801666a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662e:	891a      	ldrh	r2, [r3, #8]
 8016630:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016632:	4413      	add	r3, r2
 8016634:	b29a      	uxth	r2, r3
 8016636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016638:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d110      	bne.n	8016664 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016644:	685b      	ldr	r3, [r3, #4]
 8016646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016648:	8952      	ldrh	r2, [r2, #10]
 801664a:	4413      	add	r3, r2
 801664c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801664e:	68b9      	ldr	r1, [r7, #8]
 8016650:	4618      	mov	r0, r3
 8016652:	f005 f850 	bl	801b6f6 <memcpy>
        p->len += oversize_used;
 8016656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016658:	895a      	ldrh	r2, [r3, #10]
 801665a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801665c:	4413      	add	r3, r2
 801665e:	b29a      	uxth	r2, r3
 8016660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016662:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	62fb      	str	r3, [r7, #44]	; 0x2c
 801666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801666c:	2b00      	cmp	r3, #0
 801666e:	d1dd      	bne.n	801662c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016672:	891a      	ldrh	r2, [r3, #8]
 8016674:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016676:	4413      	add	r3, r2
 8016678:	b29a      	uxth	r2, r3
 801667a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801667c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801667e:	8a7a      	ldrh	r2, [r7, #18]
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016688:	2b00      	cmp	r3, #0
 801668a:	d018      	beq.n	80166be <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801668c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801668e:	2b00      	cmp	r3, #0
 8016690:	d106      	bne.n	80166a0 <tcp_write+0x508>
 8016692:	4b2a      	ldr	r3, [pc, #168]	; (801673c <tcp_write+0x5a4>)
 8016694:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016698:	492d      	ldr	r1, [pc, #180]	; (8016750 <tcp_write+0x5b8>)
 801669a:	482a      	ldr	r0, [pc, #168]	; (8016744 <tcp_write+0x5ac>)
 801669c:	f004 fe08 	bl	801b2b0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80166a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7fb f8b2 	bl	8011810 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80166ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166ae:	891a      	ldrh	r2, [r3, #8]
 80166b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166b2:	891b      	ldrh	r3, [r3, #8]
 80166b4:	4413      	add	r3, r2
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166ba:	811a      	strh	r2, [r3, #8]
 80166bc:	e037      	b.n	801672e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80166be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d034      	beq.n	801672e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80166c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d003      	beq.n	80166d2 <tcp_write+0x53a>
 80166ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d106      	bne.n	80166e0 <tcp_write+0x548>
 80166d2:	4b1a      	ldr	r3, [pc, #104]	; (801673c <tcp_write+0x5a4>)
 80166d4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80166d8:	491e      	ldr	r1, [pc, #120]	; (8016754 <tcp_write+0x5bc>)
 80166da:	481a      	ldr	r0, [pc, #104]	; (8016744 <tcp_write+0x5ac>)
 80166dc:	f004 fde8 	bl	801b2b0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80166e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166e2:	685b      	ldr	r3, [r3, #4]
 80166e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80166e6:	e009      	b.n	80166fc <tcp_write+0x564>
      p->tot_len += extendlen;
 80166e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ea:	891a      	ldrh	r2, [r3, #8]
 80166ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166ee:	4413      	add	r3, r2
 80166f0:	b29a      	uxth	r2, r3
 80166f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80166f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80166fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d1f1      	bne.n	80166e8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016706:	891a      	ldrh	r2, [r3, #8]
 8016708:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801670a:	4413      	add	r3, r2
 801670c:	b29a      	uxth	r2, r3
 801670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016710:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016714:	895a      	ldrh	r2, [r3, #10]
 8016716:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016718:	4413      	add	r3, r2
 801671a:	b29a      	uxth	r2, r3
 801671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016722:	891a      	ldrh	r2, [r3, #8]
 8016724:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016726:	4413      	add	r3, r2
 8016728:	b29a      	uxth	r2, r3
 801672a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801672c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801672e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016730:	2b00      	cmp	r3, #0
 8016732:	d111      	bne.n	8016758 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016738:	66da      	str	r2, [r3, #108]	; 0x6c
 801673a:	e010      	b.n	801675e <tcp_write+0x5c6>
 801673c:	0801fa78 	.word	0x0801fa78
 8016740:	0801fd18 	.word	0x0801fd18
 8016744:	0801facc 	.word	0x0801facc
 8016748:	0801fd58 	.word	0x0801fd58
 801674c:	0801fd68 	.word	0x0801fd68
 8016750:	0801fd7c 	.word	0x0801fd7c
 8016754:	0801fdb4 	.word	0x0801fdb4
  } else {
    last_unsent->next = queue;
 8016758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801675a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801675c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016762:	88fb      	ldrh	r3, [r7, #6]
 8016764:	441a      	add	r2, r3
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016770:	88fb      	ldrh	r3, [r7, #6]
 8016772:	1ad3      	subs	r3, r2, r3
 8016774:	b29a      	uxth	r2, r3
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016782:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801678c:	2b00      	cmp	r3, #0
 801678e:	d00e      	beq.n	80167ae <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016794:	2b00      	cmp	r3, #0
 8016796:	d10a      	bne.n	80167ae <tcp_write+0x616>
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801679c:	2b00      	cmp	r3, #0
 801679e:	d106      	bne.n	80167ae <tcp_write+0x616>
 80167a0:	4b2c      	ldr	r3, [pc, #176]	; (8016854 <tcp_write+0x6bc>)
 80167a2:	f240 3212 	movw	r2, #786	; 0x312
 80167a6:	492c      	ldr	r1, [pc, #176]	; (8016858 <tcp_write+0x6c0>)
 80167a8:	482c      	ldr	r0, [pc, #176]	; (801685c <tcp_write+0x6c4>)
 80167aa:	f004 fd81 	bl	801b2b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80167ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d016      	beq.n	80167e2 <tcp_write+0x64a>
 80167b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167b6:	68db      	ldr	r3, [r3, #12]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d012      	beq.n	80167e2 <tcp_write+0x64a>
 80167bc:	797b      	ldrb	r3, [r7, #5]
 80167be:	f003 0302 	and.w	r3, r3, #2
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d10d      	bne.n	80167e2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80167c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167c8:	68db      	ldr	r3, [r3, #12]
 80167ca:	899b      	ldrh	r3, [r3, #12]
 80167cc:	b29c      	uxth	r4, r3
 80167ce:	2008      	movs	r0, #8
 80167d0:	f7f9 fb58 	bl	800fe84 <lwip_htons>
 80167d4:	4603      	mov	r3, r0
 80167d6:	461a      	mov	r2, r3
 80167d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167da:	68db      	ldr	r3, [r3, #12]
 80167dc:	4322      	orrs	r2, r4
 80167de:	b292      	uxth	r2, r2
 80167e0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80167e2:	2300      	movs	r3, #0
 80167e4:	e031      	b.n	801684a <tcp_write+0x6b2>
          goto memerr;
 80167e6:	bf00      	nop
 80167e8:	e006      	b.n	80167f8 <tcp_write+0x660>
            goto memerr;
 80167ea:	bf00      	nop
 80167ec:	e004      	b.n	80167f8 <tcp_write+0x660>
        goto memerr;
 80167ee:	bf00      	nop
 80167f0:	e002      	b.n	80167f8 <tcp_write+0x660>
        goto memerr;
 80167f2:	bf00      	nop
 80167f4:	e000      	b.n	80167f8 <tcp_write+0x660>
      goto memerr;
 80167f6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	8b5b      	ldrh	r3, [r3, #26]
 80167fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016800:	b29a      	uxth	r2, r3
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8016806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016808:	2b00      	cmp	r3, #0
 801680a:	d002      	beq.n	8016812 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801680c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801680e:	f7fa ff3d 	bl	801168c <pbuf_free>
  }
  if (queue != NULL) {
 8016812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016814:	2b00      	cmp	r3, #0
 8016816:	d002      	beq.n	801681e <tcp_write+0x686>
    tcp_segs_free(queue);
 8016818:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801681a:	f7fc fb89 	bl	8012f30 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016824:	2b00      	cmp	r3, #0
 8016826:	d00e      	beq.n	8016846 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801682c:	2b00      	cmp	r3, #0
 801682e:	d10a      	bne.n	8016846 <tcp_write+0x6ae>
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016834:	2b00      	cmp	r3, #0
 8016836:	d106      	bne.n	8016846 <tcp_write+0x6ae>
 8016838:	4b06      	ldr	r3, [pc, #24]	; (8016854 <tcp_write+0x6bc>)
 801683a:	f240 3227 	movw	r2, #807	; 0x327
 801683e:	4906      	ldr	r1, [pc, #24]	; (8016858 <tcp_write+0x6c0>)
 8016840:	4806      	ldr	r0, [pc, #24]	; (801685c <tcp_write+0x6c4>)
 8016842:	f004 fd35 	bl	801b2b0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8016846:	f04f 33ff 	mov.w	r3, #4294967295
}
 801684a:	4618      	mov	r0, r3
 801684c:	375c      	adds	r7, #92	; 0x5c
 801684e:	46bd      	mov	sp, r7
 8016850:	bd90      	pop	{r4, r7, pc}
 8016852:	bf00      	nop
 8016854:	0801fa78 	.word	0x0801fa78
 8016858:	0801fdec 	.word	0x0801fdec
 801685c:	0801facc 	.word	0x0801facc

08016860 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016860:	b590      	push	{r4, r7, lr}
 8016862:	b08b      	sub	sp, #44	; 0x2c
 8016864:	af02      	add	r7, sp, #8
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	460b      	mov	r3, r1
 801686a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801686c:	2300      	movs	r3, #0
 801686e:	61fb      	str	r3, [r7, #28]
 8016870:	2300      	movs	r3, #0
 8016872:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016874:	2300      	movs	r3, #0
 8016876:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d106      	bne.n	801688c <tcp_split_unsent_seg+0x2c>
 801687e:	4b95      	ldr	r3, [pc, #596]	; (8016ad4 <tcp_split_unsent_seg+0x274>)
 8016880:	f240 324b 	movw	r2, #843	; 0x34b
 8016884:	4994      	ldr	r1, [pc, #592]	; (8016ad8 <tcp_split_unsent_seg+0x278>)
 8016886:	4895      	ldr	r0, [pc, #596]	; (8016adc <tcp_split_unsent_seg+0x27c>)
 8016888:	f004 fd12 	bl	801b2b0 <iprintf>

  useg = pcb->unsent;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016890:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d102      	bne.n	801689e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016898:	f04f 33ff 	mov.w	r3, #4294967295
 801689c:	e116      	b.n	8016acc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801689e:	887b      	ldrh	r3, [r7, #2]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d109      	bne.n	80168b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80168a4:	4b8b      	ldr	r3, [pc, #556]	; (8016ad4 <tcp_split_unsent_seg+0x274>)
 80168a6:	f240 3253 	movw	r2, #851	; 0x353
 80168aa:	498d      	ldr	r1, [pc, #564]	; (8016ae0 <tcp_split_unsent_seg+0x280>)
 80168ac:	488b      	ldr	r0, [pc, #556]	; (8016adc <tcp_split_unsent_seg+0x27c>)
 80168ae:	f004 fcff 	bl	801b2b0 <iprintf>
    return ERR_VAL;
 80168b2:	f06f 0305 	mvn.w	r3, #5
 80168b6:	e109      	b.n	8016acc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	891b      	ldrh	r3, [r3, #8]
 80168bc:	887a      	ldrh	r2, [r7, #2]
 80168be:	429a      	cmp	r2, r3
 80168c0:	d301      	bcc.n	80168c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80168c2:	2300      	movs	r3, #0
 80168c4:	e102      	b.n	8016acc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168ca:	887a      	ldrh	r2, [r7, #2]
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d906      	bls.n	80168de <tcp_split_unsent_seg+0x7e>
 80168d0:	4b80      	ldr	r3, [pc, #512]	; (8016ad4 <tcp_split_unsent_seg+0x274>)
 80168d2:	f240 325b 	movw	r2, #859	; 0x35b
 80168d6:	4983      	ldr	r1, [pc, #524]	; (8016ae4 <tcp_split_unsent_seg+0x284>)
 80168d8:	4880      	ldr	r0, [pc, #512]	; (8016adc <tcp_split_unsent_seg+0x27c>)
 80168da:	f004 fce9 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	891b      	ldrh	r3, [r3, #8]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d106      	bne.n	80168f4 <tcp_split_unsent_seg+0x94>
 80168e6:	4b7b      	ldr	r3, [pc, #492]	; (8016ad4 <tcp_split_unsent_seg+0x274>)
 80168e8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80168ec:	497e      	ldr	r1, [pc, #504]	; (8016ae8 <tcp_split_unsent_seg+0x288>)
 80168ee:	487b      	ldr	r0, [pc, #492]	; (8016adc <tcp_split_unsent_seg+0x27c>)
 80168f0:	f004 fcde 	bl	801b2b0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80168f4:	697b      	ldr	r3, [r7, #20]
 80168f6:	7a9b      	ldrb	r3, [r3, #10]
 80168f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80168fa:	7bfb      	ldrb	r3, [r7, #15]
 80168fc:	009b      	lsls	r3, r3, #2
 80168fe:	b2db      	uxtb	r3, r3
 8016900:	f003 0304 	and.w	r3, r3, #4
 8016904:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016906:	697b      	ldr	r3, [r7, #20]
 8016908:	891a      	ldrh	r2, [r3, #8]
 801690a:	887b      	ldrh	r3, [r7, #2]
 801690c:	1ad3      	subs	r3, r2, r3
 801690e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016910:	7bbb      	ldrb	r3, [r7, #14]
 8016912:	b29a      	uxth	r2, r3
 8016914:	89bb      	ldrh	r3, [r7, #12]
 8016916:	4413      	add	r3, r2
 8016918:	b29b      	uxth	r3, r3
 801691a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801691e:	4619      	mov	r1, r3
 8016920:	2036      	movs	r0, #54	; 0x36
 8016922:	f7fa fbcf 	bl	80110c4 <pbuf_alloc>
 8016926:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016928:	693b      	ldr	r3, [r7, #16]
 801692a:	2b00      	cmp	r3, #0
 801692c:	f000 80b7 	beq.w	8016a9e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016930:	697b      	ldr	r3, [r7, #20]
 8016932:	685b      	ldr	r3, [r3, #4]
 8016934:	891a      	ldrh	r2, [r3, #8]
 8016936:	697b      	ldr	r3, [r7, #20]
 8016938:	891b      	ldrh	r3, [r3, #8]
 801693a:	1ad3      	subs	r3, r2, r3
 801693c:	b29a      	uxth	r2, r3
 801693e:	887b      	ldrh	r3, [r7, #2]
 8016940:	4413      	add	r3, r2
 8016942:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016944:	697b      	ldr	r3, [r7, #20]
 8016946:	6858      	ldr	r0, [r3, #4]
 8016948:	693b      	ldr	r3, [r7, #16]
 801694a:	685a      	ldr	r2, [r3, #4]
 801694c:	7bbb      	ldrb	r3, [r7, #14]
 801694e:	18d1      	adds	r1, r2, r3
 8016950:	897b      	ldrh	r3, [r7, #10]
 8016952:	89ba      	ldrh	r2, [r7, #12]
 8016954:	f7fb f884 	bl	8011a60 <pbuf_copy_partial>
 8016958:	4603      	mov	r3, r0
 801695a:	461a      	mov	r2, r3
 801695c:	89bb      	ldrh	r3, [r7, #12]
 801695e:	4293      	cmp	r3, r2
 8016960:	f040 809f 	bne.w	8016aa2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016964:	697b      	ldr	r3, [r7, #20]
 8016966:	68db      	ldr	r3, [r3, #12]
 8016968:	899b      	ldrh	r3, [r3, #12]
 801696a:	b29b      	uxth	r3, r3
 801696c:	4618      	mov	r0, r3
 801696e:	f7f9 fa89 	bl	800fe84 <lwip_htons>
 8016972:	4603      	mov	r3, r0
 8016974:	b2db      	uxtb	r3, r3
 8016976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801697a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801697c:	2300      	movs	r3, #0
 801697e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016980:	7efb      	ldrb	r3, [r7, #27]
 8016982:	f003 0308 	and.w	r3, r3, #8
 8016986:	2b00      	cmp	r3, #0
 8016988:	d007      	beq.n	801699a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801698a:	7efb      	ldrb	r3, [r7, #27]
 801698c:	f023 0308 	bic.w	r3, r3, #8
 8016990:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016992:	7ebb      	ldrb	r3, [r7, #26]
 8016994:	f043 0308 	orr.w	r3, r3, #8
 8016998:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801699a:	7efb      	ldrb	r3, [r7, #27]
 801699c:	f003 0301 	and.w	r3, r3, #1
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d007      	beq.n	80169b4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80169a4:	7efb      	ldrb	r3, [r7, #27]
 80169a6:	f023 0301 	bic.w	r3, r3, #1
 80169aa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80169ac:	7ebb      	ldrb	r3, [r7, #26]
 80169ae:	f043 0301 	orr.w	r3, r3, #1
 80169b2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	68db      	ldr	r3, [r3, #12]
 80169b8:	685b      	ldr	r3, [r3, #4]
 80169ba:	4618      	mov	r0, r3
 80169bc:	f7f9 fa77 	bl	800feae <lwip_htonl>
 80169c0:	4602      	mov	r2, r0
 80169c2:	887b      	ldrh	r3, [r7, #2]
 80169c4:	18d1      	adds	r1, r2, r3
 80169c6:	7eba      	ldrb	r2, [r7, #26]
 80169c8:	7bfb      	ldrb	r3, [r7, #15]
 80169ca:	9300      	str	r3, [sp, #0]
 80169cc:	460b      	mov	r3, r1
 80169ce:	6939      	ldr	r1, [r7, #16]
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f7ff fa4f 	bl	8015e74 <tcp_create_segment>
 80169d6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80169d8:	69fb      	ldr	r3, [r7, #28]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d063      	beq.n	8016aa6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80169de:	697b      	ldr	r3, [r7, #20]
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	4618      	mov	r0, r3
 80169e4:	f7fa feda 	bl	801179c <pbuf_clen>
 80169e8:	4603      	mov	r3, r0
 80169ea:	461a      	mov	r2, r3
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80169f2:	1a9b      	subs	r3, r3, r2
 80169f4:	b29a      	uxth	r2, r3
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	6858      	ldr	r0, [r3, #4]
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	891a      	ldrh	r2, [r3, #8]
 8016a06:	89bb      	ldrh	r3, [r7, #12]
 8016a08:	1ad3      	subs	r3, r2, r3
 8016a0a:	b29b      	uxth	r3, r3
 8016a0c:	4619      	mov	r1, r3
 8016a0e:	f7fa fcb9 	bl	8011384 <pbuf_realloc>
  useg->len -= remainder;
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	891a      	ldrh	r2, [r3, #8]
 8016a16:	89bb      	ldrh	r3, [r7, #12]
 8016a18:	1ad3      	subs	r3, r2, r3
 8016a1a:	b29a      	uxth	r2, r3
 8016a1c:	697b      	ldr	r3, [r7, #20]
 8016a1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	68db      	ldr	r3, [r3, #12]
 8016a24:	899b      	ldrh	r3, [r3, #12]
 8016a26:	b29c      	uxth	r4, r3
 8016a28:	7efb      	ldrb	r3, [r7, #27]
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f7f9 fa29 	bl	800fe84 <lwip_htons>
 8016a32:	4603      	mov	r3, r0
 8016a34:	461a      	mov	r2, r3
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	68db      	ldr	r3, [r3, #12]
 8016a3a:	4322      	orrs	r2, r4
 8016a3c:	b292      	uxth	r2, r2
 8016a3e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016a40:	697b      	ldr	r3, [r7, #20]
 8016a42:	685b      	ldr	r3, [r3, #4]
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7fa fea9 	bl	801179c <pbuf_clen>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	461a      	mov	r2, r3
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a54:	4413      	add	r3, r2
 8016a56:	b29a      	uxth	r2, r3
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016a5e:	69fb      	ldr	r3, [r7, #28]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	4618      	mov	r0, r3
 8016a64:	f7fa fe9a 	bl	801179c <pbuf_clen>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	461a      	mov	r2, r3
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a72:	4413      	add	r3, r2
 8016a74:	b29a      	uxth	r2, r3
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016a7c:	697b      	ldr	r3, [r7, #20]
 8016a7e:	681a      	ldr	r2, [r3, #0]
 8016a80:	69fb      	ldr	r3, [r7, #28]
 8016a82:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	69fa      	ldr	r2, [r7, #28]
 8016a88:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016a8a:	69fb      	ldr	r3, [r7, #28]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d103      	bne.n	8016a9a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2200      	movs	r2, #0
 8016a96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	e016      	b.n	8016acc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016a9e:	bf00      	nop
 8016aa0:	e002      	b.n	8016aa8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016aa2:	bf00      	nop
 8016aa4:	e000      	b.n	8016aa8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016aa6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016aa8:	69fb      	ldr	r3, [r7, #28]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d006      	beq.n	8016abc <tcp_split_unsent_seg+0x25c>
 8016aae:	4b09      	ldr	r3, [pc, #36]	; (8016ad4 <tcp_split_unsent_seg+0x274>)
 8016ab0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016ab4:	490d      	ldr	r1, [pc, #52]	; (8016aec <tcp_split_unsent_seg+0x28c>)
 8016ab6:	4809      	ldr	r0, [pc, #36]	; (8016adc <tcp_split_unsent_seg+0x27c>)
 8016ab8:	f004 fbfa 	bl	801b2b0 <iprintf>
  if (p != NULL) {
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d002      	beq.n	8016ac8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016ac2:	6938      	ldr	r0, [r7, #16]
 8016ac4:	f7fa fde2 	bl	801168c <pbuf_free>
  }

  return ERR_MEM;
 8016ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016acc:	4618      	mov	r0, r3
 8016ace:	3724      	adds	r7, #36	; 0x24
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	bd90      	pop	{r4, r7, pc}
 8016ad4:	0801fa78 	.word	0x0801fa78
 8016ad8:	0801fe0c 	.word	0x0801fe0c
 8016adc:	0801facc 	.word	0x0801facc
 8016ae0:	0801fe30 	.word	0x0801fe30
 8016ae4:	0801fe54 	.word	0x0801fe54
 8016ae8:	0801fe64 	.word	0x0801fe64
 8016aec:	0801fe74 	.word	0x0801fe74

08016af0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016af0:	b590      	push	{r4, r7, lr}
 8016af2:	b085      	sub	sp, #20
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d106      	bne.n	8016b0c <tcp_send_fin+0x1c>
 8016afe:	4b21      	ldr	r3, [pc, #132]	; (8016b84 <tcp_send_fin+0x94>)
 8016b00:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016b04:	4920      	ldr	r1, [pc, #128]	; (8016b88 <tcp_send_fin+0x98>)
 8016b06:	4821      	ldr	r0, [pc, #132]	; (8016b8c <tcp_send_fin+0x9c>)
 8016b08:	f004 fbd2 	bl	801b2b0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d02e      	beq.n	8016b72 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b18:	60fb      	str	r3, [r7, #12]
 8016b1a:	e002      	b.n	8016b22 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d1f8      	bne.n	8016b1c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	68db      	ldr	r3, [r3, #12]
 8016b2e:	899b      	ldrh	r3, [r3, #12]
 8016b30:	b29b      	uxth	r3, r3
 8016b32:	4618      	mov	r0, r3
 8016b34:	f7f9 f9a6 	bl	800fe84 <lwip_htons>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	b2db      	uxtb	r3, r3
 8016b3c:	f003 0307 	and.w	r3, r3, #7
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d116      	bne.n	8016b72 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	68db      	ldr	r3, [r3, #12]
 8016b48:	899b      	ldrh	r3, [r3, #12]
 8016b4a:	b29c      	uxth	r4, r3
 8016b4c:	2001      	movs	r0, #1
 8016b4e:	f7f9 f999 	bl	800fe84 <lwip_htons>
 8016b52:	4603      	mov	r3, r0
 8016b54:	461a      	mov	r2, r3
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	68db      	ldr	r3, [r3, #12]
 8016b5a:	4322      	orrs	r2, r4
 8016b5c:	b292      	uxth	r2, r2
 8016b5e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	8b5b      	ldrh	r3, [r3, #26]
 8016b64:	f043 0320 	orr.w	r3, r3, #32
 8016b68:	b29a      	uxth	r2, r3
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	e004      	b.n	8016b7c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016b72:	2101      	movs	r1, #1
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f000 f80b 	bl	8016b90 <tcp_enqueue_flags>
 8016b7a:	4603      	mov	r3, r0
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3714      	adds	r7, #20
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd90      	pop	{r4, r7, pc}
 8016b84:	0801fa78 	.word	0x0801fa78
 8016b88:	0801fe80 	.word	0x0801fe80
 8016b8c:	0801facc 	.word	0x0801facc

08016b90 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b08a      	sub	sp, #40	; 0x28
 8016b94:	af02      	add	r7, sp, #8
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	460b      	mov	r3, r1
 8016b9a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016ba4:	78fb      	ldrb	r3, [r7, #3]
 8016ba6:	f003 0303 	and.w	r3, r3, #3
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d106      	bne.n	8016bbc <tcp_enqueue_flags+0x2c>
 8016bae:	4b67      	ldr	r3, [pc, #412]	; (8016d4c <tcp_enqueue_flags+0x1bc>)
 8016bb0:	f240 4211 	movw	r2, #1041	; 0x411
 8016bb4:	4966      	ldr	r1, [pc, #408]	; (8016d50 <tcp_enqueue_flags+0x1c0>)
 8016bb6:	4867      	ldr	r0, [pc, #412]	; (8016d54 <tcp_enqueue_flags+0x1c4>)
 8016bb8:	f004 fb7a 	bl	801b2b0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d106      	bne.n	8016bd0 <tcp_enqueue_flags+0x40>
 8016bc2:	4b62      	ldr	r3, [pc, #392]	; (8016d4c <tcp_enqueue_flags+0x1bc>)
 8016bc4:	f240 4213 	movw	r2, #1043	; 0x413
 8016bc8:	4963      	ldr	r1, [pc, #396]	; (8016d58 <tcp_enqueue_flags+0x1c8>)
 8016bca:	4862      	ldr	r0, [pc, #392]	; (8016d54 <tcp_enqueue_flags+0x1c4>)
 8016bcc:	f004 fb70 	bl	801b2b0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016bd0:	78fb      	ldrb	r3, [r7, #3]
 8016bd2:	f003 0302 	and.w	r3, r3, #2
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d001      	beq.n	8016bde <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016bda:	2301      	movs	r3, #1
 8016bdc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016bde:	7ffb      	ldrb	r3, [r7, #31]
 8016be0:	009b      	lsls	r3, r3, #2
 8016be2:	b2db      	uxtb	r3, r3
 8016be4:	f003 0304 	and.w	r3, r3, #4
 8016be8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016bea:	7dfb      	ldrb	r3, [r7, #23]
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016bf2:	4619      	mov	r1, r3
 8016bf4:	2036      	movs	r0, #54	; 0x36
 8016bf6:	f7fa fa65 	bl	80110c4 <pbuf_alloc>
 8016bfa:	6138      	str	r0, [r7, #16]
 8016bfc:	693b      	ldr	r3, [r7, #16]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d109      	bne.n	8016c16 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	8b5b      	ldrh	r3, [r3, #26]
 8016c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c0a:	b29a      	uxth	r2, r3
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016c10:	f04f 33ff 	mov.w	r3, #4294967295
 8016c14:	e095      	b.n	8016d42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016c16:	693b      	ldr	r3, [r7, #16]
 8016c18:	895a      	ldrh	r2, [r3, #10]
 8016c1a:	7dfb      	ldrb	r3, [r7, #23]
 8016c1c:	b29b      	uxth	r3, r3
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d206      	bcs.n	8016c30 <tcp_enqueue_flags+0xa0>
 8016c22:	4b4a      	ldr	r3, [pc, #296]	; (8016d4c <tcp_enqueue_flags+0x1bc>)
 8016c24:	f240 4239 	movw	r2, #1081	; 0x439
 8016c28:	494c      	ldr	r1, [pc, #304]	; (8016d5c <tcp_enqueue_flags+0x1cc>)
 8016c2a:	484a      	ldr	r0, [pc, #296]	; (8016d54 <tcp_enqueue_flags+0x1c4>)
 8016c2c:	f004 fb40 	bl	801b2b0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016c34:	78fa      	ldrb	r2, [r7, #3]
 8016c36:	7ffb      	ldrb	r3, [r7, #31]
 8016c38:	9300      	str	r3, [sp, #0]
 8016c3a:	460b      	mov	r3, r1
 8016c3c:	6939      	ldr	r1, [r7, #16]
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f7ff f918 	bl	8015e74 <tcp_create_segment>
 8016c44:	60f8      	str	r0, [r7, #12]
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d109      	bne.n	8016c60 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	8b5b      	ldrh	r3, [r3, #26]
 8016c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c54:	b29a      	uxth	r2, r3
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c5e:	e070      	b.n	8016d42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	68db      	ldr	r3, [r3, #12]
 8016c64:	f003 0303 	and.w	r3, r3, #3
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d006      	beq.n	8016c7a <tcp_enqueue_flags+0xea>
 8016c6c:	4b37      	ldr	r3, [pc, #220]	; (8016d4c <tcp_enqueue_flags+0x1bc>)
 8016c6e:	f240 4242 	movw	r2, #1090	; 0x442
 8016c72:	493b      	ldr	r1, [pc, #236]	; (8016d60 <tcp_enqueue_flags+0x1d0>)
 8016c74:	4837      	ldr	r0, [pc, #220]	; (8016d54 <tcp_enqueue_flags+0x1c4>)
 8016c76:	f004 fb1b 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	891b      	ldrh	r3, [r3, #8]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d006      	beq.n	8016c90 <tcp_enqueue_flags+0x100>
 8016c82:	4b32      	ldr	r3, [pc, #200]	; (8016d4c <tcp_enqueue_flags+0x1bc>)
 8016c84:	f240 4243 	movw	r2, #1091	; 0x443
 8016c88:	4936      	ldr	r1, [pc, #216]	; (8016d64 <tcp_enqueue_flags+0x1d4>)
 8016c8a:	4832      	ldr	r0, [pc, #200]	; (8016d54 <tcp_enqueue_flags+0x1c4>)
 8016c8c:	f004 fb10 	bl	801b2b0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d103      	bne.n	8016ca0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	68fa      	ldr	r2, [r7, #12]
 8016c9c:	66da      	str	r2, [r3, #108]	; 0x6c
 8016c9e:	e00d      	b.n	8016cbc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ca4:	61bb      	str	r3, [r7, #24]
 8016ca6:	e002      	b.n	8016cae <tcp_enqueue_flags+0x11e>
 8016ca8:	69bb      	ldr	r3, [r7, #24]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	61bb      	str	r3, [r7, #24]
 8016cae:	69bb      	ldr	r3, [r7, #24]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d1f8      	bne.n	8016ca8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016cb6:	69bb      	ldr	r3, [r7, #24]
 8016cb8:	68fa      	ldr	r2, [r7, #12]
 8016cba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016cc4:	78fb      	ldrb	r3, [r7, #3]
 8016cc6:	f003 0302 	and.w	r3, r3, #2
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d104      	bne.n	8016cd8 <tcp_enqueue_flags+0x148>
 8016cce:	78fb      	ldrb	r3, [r7, #3]
 8016cd0:	f003 0301 	and.w	r3, r3, #1
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d004      	beq.n	8016ce2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cdc:	1c5a      	adds	r2, r3, #1
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016ce2:	78fb      	ldrb	r3, [r7, #3]
 8016ce4:	f003 0301 	and.w	r3, r3, #1
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d006      	beq.n	8016cfa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	8b5b      	ldrh	r3, [r3, #26]
 8016cf0:	f043 0320 	orr.w	r3, r3, #32
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	685b      	ldr	r3, [r3, #4]
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f7fa fd4c 	bl	801179c <pbuf_clen>
 8016d04:	4603      	mov	r3, r0
 8016d06:	461a      	mov	r2, r3
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016d0e:	4413      	add	r3, r2
 8016d10:	b29a      	uxth	r2, r3
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d00e      	beq.n	8016d40 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d10a      	bne.n	8016d40 <tcp_enqueue_flags+0x1b0>
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d106      	bne.n	8016d40 <tcp_enqueue_flags+0x1b0>
 8016d32:	4b06      	ldr	r3, [pc, #24]	; (8016d4c <tcp_enqueue_flags+0x1bc>)
 8016d34:	f240 4265 	movw	r2, #1125	; 0x465
 8016d38:	490b      	ldr	r1, [pc, #44]	; (8016d68 <tcp_enqueue_flags+0x1d8>)
 8016d3a:	4806      	ldr	r0, [pc, #24]	; (8016d54 <tcp_enqueue_flags+0x1c4>)
 8016d3c:	f004 fab8 	bl	801b2b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016d40:	2300      	movs	r3, #0
}
 8016d42:	4618      	mov	r0, r3
 8016d44:	3720      	adds	r7, #32
 8016d46:	46bd      	mov	sp, r7
 8016d48:	bd80      	pop	{r7, pc}
 8016d4a:	bf00      	nop
 8016d4c:	0801fa78 	.word	0x0801fa78
 8016d50:	0801fe9c 	.word	0x0801fe9c
 8016d54:	0801facc 	.word	0x0801facc
 8016d58:	0801fef4 	.word	0x0801fef4
 8016d5c:	0801ff14 	.word	0x0801ff14
 8016d60:	0801ff50 	.word	0x0801ff50
 8016d64:	0801ff68 	.word	0x0801ff68
 8016d68:	0801ff94 	.word	0x0801ff94

08016d6c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016d6c:	b5b0      	push	{r4, r5, r7, lr}
 8016d6e:	b08a      	sub	sp, #40	; 0x28
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d106      	bne.n	8016d88 <tcp_output+0x1c>
 8016d7a:	4b8a      	ldr	r3, [pc, #552]	; (8016fa4 <tcp_output+0x238>)
 8016d7c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016d80:	4989      	ldr	r1, [pc, #548]	; (8016fa8 <tcp_output+0x23c>)
 8016d82:	488a      	ldr	r0, [pc, #552]	; (8016fac <tcp_output+0x240>)
 8016d84:	f004 fa94 	bl	801b2b0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	7d1b      	ldrb	r3, [r3, #20]
 8016d8c:	2b01      	cmp	r3, #1
 8016d8e:	d106      	bne.n	8016d9e <tcp_output+0x32>
 8016d90:	4b84      	ldr	r3, [pc, #528]	; (8016fa4 <tcp_output+0x238>)
 8016d92:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016d96:	4986      	ldr	r1, [pc, #536]	; (8016fb0 <tcp_output+0x244>)
 8016d98:	4884      	ldr	r0, [pc, #528]	; (8016fac <tcp_output+0x240>)
 8016d9a:	f004 fa89 	bl	801b2b0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016d9e:	4b85      	ldr	r3, [pc, #532]	; (8016fb4 <tcp_output+0x248>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	687a      	ldr	r2, [r7, #4]
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d101      	bne.n	8016dac <tcp_output+0x40>
    return ERR_OK;
 8016da8:	2300      	movs	r3, #0
 8016daa:	e1ce      	b.n	801714a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016db8:	4293      	cmp	r3, r2
 8016dba:	bf28      	it	cs
 8016dbc:	4613      	movcs	r3, r2
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d10b      	bne.n	8016de6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	8b5b      	ldrh	r3, [r3, #26]
 8016dd2:	f003 0302 	and.w	r3, r3, #2
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	f000 81aa 	beq.w	8017130 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f000 fdcb 	bl	8017978 <tcp_send_empty_ack>
 8016de2:	4603      	mov	r3, r0
 8016de4:	e1b1      	b.n	801714a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016de6:	6879      	ldr	r1, [r7, #4]
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	3304      	adds	r3, #4
 8016dec:	461a      	mov	r2, r3
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f7ff f824 	bl	8015e3c <tcp_route>
 8016df4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016df6:	697b      	ldr	r3, [r7, #20]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d102      	bne.n	8016e02 <tcp_output+0x96>
    return ERR_RTE;
 8016dfc:	f06f 0303 	mvn.w	r3, #3
 8016e00:	e1a3      	b.n	801714a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d003      	beq.n	8016e10 <tcp_output+0xa4>
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d111      	bne.n	8016e34 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016e10:	697b      	ldr	r3, [r7, #20]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d002      	beq.n	8016e1c <tcp_output+0xb0>
 8016e16:	697b      	ldr	r3, [r7, #20]
 8016e18:	3304      	adds	r3, #4
 8016e1a:	e000      	b.n	8016e1e <tcp_output+0xb2>
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016e20:	693b      	ldr	r3, [r7, #16]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d102      	bne.n	8016e2c <tcp_output+0xc0>
      return ERR_RTE;
 8016e26:	f06f 0303 	mvn.w	r3, #3
 8016e2a:	e18e      	b.n	801714a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e36:	68db      	ldr	r3, [r3, #12]
 8016e38:	685b      	ldr	r3, [r3, #4]
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f7f9 f837 	bl	800feae <lwip_htonl>
 8016e40:	4602      	mov	r2, r0
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e46:	1ad3      	subs	r3, r2, r3
 8016e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e4a:	8912      	ldrh	r2, [r2, #8]
 8016e4c:	4413      	add	r3, r2
 8016e4e:	69ba      	ldr	r2, [r7, #24]
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d227      	bcs.n	8016ea4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016e5a:	461a      	mov	r2, r3
 8016e5c:	69bb      	ldr	r3, [r7, #24]
 8016e5e:	4293      	cmp	r3, r2
 8016e60:	d114      	bne.n	8016e8c <tcp_output+0x120>
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d110      	bne.n	8016e8c <tcp_output+0x120>
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d10b      	bne.n	8016e8c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2200      	movs	r2, #0
 8016e78:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	2201      	movs	r2, #1
 8016e80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	2200      	movs	r2, #0
 8016e88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	8b5b      	ldrh	r3, [r3, #26]
 8016e90:	f003 0302 	and.w	r3, r3, #2
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	f000 814d 	beq.w	8017134 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f000 fd6c 	bl	8017978 <tcp_send_empty_ack>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	e152      	b.n	801714a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016eb0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016eb2:	6a3b      	ldr	r3, [r7, #32]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	f000 811c 	beq.w	80170f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016eba:	e002      	b.n	8016ec2 <tcp_output+0x156>
 8016ebc:	6a3b      	ldr	r3, [r7, #32]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	623b      	str	r3, [r7, #32]
 8016ec2:	6a3b      	ldr	r3, [r7, #32]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d1f8      	bne.n	8016ebc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016eca:	e112      	b.n	80170f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ece:	68db      	ldr	r3, [r3, #12]
 8016ed0:	899b      	ldrh	r3, [r3, #12]
 8016ed2:	b29b      	uxth	r3, r3
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7f8 ffd5 	bl	800fe84 <lwip_htons>
 8016eda:	4603      	mov	r3, r0
 8016edc:	b2db      	uxtb	r3, r3
 8016ede:	f003 0304 	and.w	r3, r3, #4
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d006      	beq.n	8016ef4 <tcp_output+0x188>
 8016ee6:	4b2f      	ldr	r3, [pc, #188]	; (8016fa4 <tcp_output+0x238>)
 8016ee8:	f240 5236 	movw	r2, #1334	; 0x536
 8016eec:	4932      	ldr	r1, [pc, #200]	; (8016fb8 <tcp_output+0x24c>)
 8016eee:	482f      	ldr	r0, [pc, #188]	; (8016fac <tcp_output+0x240>)
 8016ef0:	f004 f9de 	bl	801b2b0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d01f      	beq.n	8016f3c <tcp_output+0x1d0>
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	8b5b      	ldrh	r3, [r3, #26]
 8016f00:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d119      	bne.n	8016f3c <tcp_output+0x1d0>
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d00b      	beq.n	8016f28 <tcp_output+0x1bc>
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d110      	bne.n	8016f3c <tcp_output+0x1d0>
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f1e:	891a      	ldrh	r2, [r3, #8]
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d209      	bcs.n	8016f3c <tcp_output+0x1d0>
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d004      	beq.n	8016f3c <tcp_output+0x1d0>
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016f38:	2b0f      	cmp	r3, #15
 8016f3a:	d901      	bls.n	8016f40 <tcp_output+0x1d4>
 8016f3c:	2301      	movs	r3, #1
 8016f3e:	e000      	b.n	8016f42 <tcp_output+0x1d6>
 8016f40:	2300      	movs	r3, #0
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d106      	bne.n	8016f54 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	8b5b      	ldrh	r3, [r3, #26]
 8016f4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	f000 80e4 	beq.w	801711c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	7d1b      	ldrb	r3, [r3, #20]
 8016f58:	2b02      	cmp	r3, #2
 8016f5a:	d00d      	beq.n	8016f78 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f5e:	68db      	ldr	r3, [r3, #12]
 8016f60:	899b      	ldrh	r3, [r3, #12]
 8016f62:	b29c      	uxth	r4, r3
 8016f64:	2010      	movs	r0, #16
 8016f66:	f7f8 ff8d 	bl	800fe84 <lwip_htons>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	461a      	mov	r2, r3
 8016f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f70:	68db      	ldr	r3, [r3, #12]
 8016f72:	4322      	orrs	r2, r4
 8016f74:	b292      	uxth	r2, r2
 8016f76:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016f78:	697a      	ldr	r2, [r7, #20]
 8016f7a:	6879      	ldr	r1, [r7, #4]
 8016f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f7e:	f000 f909 	bl	8017194 <tcp_output_segment>
 8016f82:	4603      	mov	r3, r0
 8016f84:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d016      	beq.n	8016fbc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	8b5b      	ldrh	r3, [r3, #26]
 8016f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f96:	b29a      	uxth	r2, r3
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	835a      	strh	r2, [r3, #26]
      return err;
 8016f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fa0:	e0d3      	b.n	801714a <tcp_output+0x3de>
 8016fa2:	bf00      	nop
 8016fa4:	0801fa78 	.word	0x0801fa78
 8016fa8:	0801ffbc 	.word	0x0801ffbc
 8016fac:	0801facc 	.word	0x0801facc
 8016fb0:	0801ffd4 	.word	0x0801ffd4
 8016fb4:	20007208 	.word	0x20007208
 8016fb8:	0801fffc 	.word	0x0801fffc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	7d1b      	ldrb	r3, [r3, #20]
 8016fc8:	2b02      	cmp	r3, #2
 8016fca:	d006      	beq.n	8016fda <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	8b5b      	ldrh	r3, [r3, #26]
 8016fd0:	f023 0303 	bic.w	r3, r3, #3
 8016fd4:	b29a      	uxth	r2, r3
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fdc:	68db      	ldr	r3, [r3, #12]
 8016fde:	685b      	ldr	r3, [r3, #4]
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	f7f8 ff64 	bl	800feae <lwip_htonl>
 8016fe6:	4604      	mov	r4, r0
 8016fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fea:	891b      	ldrh	r3, [r3, #8]
 8016fec:	461d      	mov	r5, r3
 8016fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff0:	68db      	ldr	r3, [r3, #12]
 8016ff2:	899b      	ldrh	r3, [r3, #12]
 8016ff4:	b29b      	uxth	r3, r3
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f7f8 ff44 	bl	800fe84 <lwip_htons>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	b2db      	uxtb	r3, r3
 8017000:	f003 0303 	and.w	r3, r3, #3
 8017004:	2b00      	cmp	r3, #0
 8017006:	d001      	beq.n	801700c <tcp_output+0x2a0>
 8017008:	2301      	movs	r3, #1
 801700a:	e000      	b.n	801700e <tcp_output+0x2a2>
 801700c:	2300      	movs	r3, #0
 801700e:	442b      	add	r3, r5
 8017010:	4423      	add	r3, r4
 8017012:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	1ad3      	subs	r3, r2, r3
 801701c:	2b00      	cmp	r3, #0
 801701e:	da02      	bge.n	8017026 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	68ba      	ldr	r2, [r7, #8]
 8017024:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017028:	891b      	ldrh	r3, [r3, #8]
 801702a:	461c      	mov	r4, r3
 801702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702e:	68db      	ldr	r3, [r3, #12]
 8017030:	899b      	ldrh	r3, [r3, #12]
 8017032:	b29b      	uxth	r3, r3
 8017034:	4618      	mov	r0, r3
 8017036:	f7f8 ff25 	bl	800fe84 <lwip_htons>
 801703a:	4603      	mov	r3, r0
 801703c:	b2db      	uxtb	r3, r3
 801703e:	f003 0303 	and.w	r3, r3, #3
 8017042:	2b00      	cmp	r3, #0
 8017044:	d001      	beq.n	801704a <tcp_output+0x2de>
 8017046:	2301      	movs	r3, #1
 8017048:	e000      	b.n	801704c <tcp_output+0x2e0>
 801704a:	2300      	movs	r3, #0
 801704c:	4423      	add	r3, r4
 801704e:	2b00      	cmp	r3, #0
 8017050:	d049      	beq.n	80170e6 <tcp_output+0x37a>
      seg->next = NULL;
 8017052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017054:	2200      	movs	r2, #0
 8017056:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801705c:	2b00      	cmp	r3, #0
 801705e:	d105      	bne.n	801706c <tcp_output+0x300>
        pcb->unacked = seg;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017064:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017068:	623b      	str	r3, [r7, #32]
 801706a:	e03f      	b.n	80170ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801706e:	68db      	ldr	r3, [r3, #12]
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	4618      	mov	r0, r3
 8017074:	f7f8 ff1b 	bl	800feae <lwip_htonl>
 8017078:	4604      	mov	r4, r0
 801707a:	6a3b      	ldr	r3, [r7, #32]
 801707c:	68db      	ldr	r3, [r3, #12]
 801707e:	685b      	ldr	r3, [r3, #4]
 8017080:	4618      	mov	r0, r3
 8017082:	f7f8 ff14 	bl	800feae <lwip_htonl>
 8017086:	4603      	mov	r3, r0
 8017088:	1ae3      	subs	r3, r4, r3
 801708a:	2b00      	cmp	r3, #0
 801708c:	da24      	bge.n	80170d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	3370      	adds	r3, #112	; 0x70
 8017092:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017094:	e002      	b.n	801709c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8017096:	69fb      	ldr	r3, [r7, #28]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801709c:	69fb      	ldr	r3, [r7, #28]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d011      	beq.n	80170c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80170a4:	69fb      	ldr	r3, [r7, #28]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	68db      	ldr	r3, [r3, #12]
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	4618      	mov	r0, r3
 80170ae:	f7f8 fefe 	bl	800feae <lwip_htonl>
 80170b2:	4604      	mov	r4, r0
 80170b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b6:	68db      	ldr	r3, [r3, #12]
 80170b8:	685b      	ldr	r3, [r3, #4]
 80170ba:	4618      	mov	r0, r3
 80170bc:	f7f8 fef7 	bl	800feae <lwip_htonl>
 80170c0:	4603      	mov	r3, r0
 80170c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	dbe6      	blt.n	8017096 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80170c8:	69fb      	ldr	r3, [r7, #28]
 80170ca:	681a      	ldr	r2, [r3, #0]
 80170cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80170d0:	69fb      	ldr	r3, [r7, #28]
 80170d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170d4:	601a      	str	r2, [r3, #0]
 80170d6:	e009      	b.n	80170ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80170d8:	6a3b      	ldr	r3, [r7, #32]
 80170da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80170de:	6a3b      	ldr	r3, [r7, #32]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	623b      	str	r3, [r7, #32]
 80170e4:	e002      	b.n	80170ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80170e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170e8:	f7fb ff37 	bl	8012f5a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80170f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d012      	beq.n	801711e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80170f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170fa:	68db      	ldr	r3, [r3, #12]
 80170fc:	685b      	ldr	r3, [r3, #4]
 80170fe:	4618      	mov	r0, r3
 8017100:	f7f8 fed5 	bl	800feae <lwip_htonl>
 8017104:	4602      	mov	r2, r0
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801710a:	1ad3      	subs	r3, r2, r3
 801710c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801710e:	8912      	ldrh	r2, [r2, #8]
 8017110:	4413      	add	r3, r2
  while (seg != NULL &&
 8017112:	69ba      	ldr	r2, [r7, #24]
 8017114:	429a      	cmp	r2, r3
 8017116:	f4bf aed9 	bcs.w	8016ecc <tcp_output+0x160>
 801711a:	e000      	b.n	801711e <tcp_output+0x3b2>
      break;
 801711c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017122:	2b00      	cmp	r3, #0
 8017124:	d108      	bne.n	8017138 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	2200      	movs	r2, #0
 801712a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801712e:	e004      	b.n	801713a <tcp_output+0x3ce>
    goto output_done;
 8017130:	bf00      	nop
 8017132:	e002      	b.n	801713a <tcp_output+0x3ce>
    goto output_done;
 8017134:	bf00      	nop
 8017136:	e000      	b.n	801713a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017138:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	8b5b      	ldrh	r3, [r3, #26]
 801713e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017142:	b29a      	uxth	r2, r3
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017148:	2300      	movs	r3, #0
}
 801714a:	4618      	mov	r0, r3
 801714c:	3728      	adds	r7, #40	; 0x28
 801714e:	46bd      	mov	sp, r7
 8017150:	bdb0      	pop	{r4, r5, r7, pc}
 8017152:	bf00      	nop

08017154 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b082      	sub	sp, #8
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d106      	bne.n	8017170 <tcp_output_segment_busy+0x1c>
 8017162:	4b09      	ldr	r3, [pc, #36]	; (8017188 <tcp_output_segment_busy+0x34>)
 8017164:	f240 529a 	movw	r2, #1434	; 0x59a
 8017168:	4908      	ldr	r1, [pc, #32]	; (801718c <tcp_output_segment_busy+0x38>)
 801716a:	4809      	ldr	r0, [pc, #36]	; (8017190 <tcp_output_segment_busy+0x3c>)
 801716c:	f004 f8a0 	bl	801b2b0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	685b      	ldr	r3, [r3, #4]
 8017174:	7b9b      	ldrb	r3, [r3, #14]
 8017176:	2b01      	cmp	r3, #1
 8017178:	d001      	beq.n	801717e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801717a:	2301      	movs	r3, #1
 801717c:	e000      	b.n	8017180 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801717e:	2300      	movs	r3, #0
}
 8017180:	4618      	mov	r0, r3
 8017182:	3708      	adds	r7, #8
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}
 8017188:	0801fa78 	.word	0x0801fa78
 801718c:	08020014 	.word	0x08020014
 8017190:	0801facc 	.word	0x0801facc

08017194 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017194:	b5b0      	push	{r4, r5, r7, lr}
 8017196:	b08c      	sub	sp, #48	; 0x30
 8017198:	af04      	add	r7, sp, #16
 801719a:	60f8      	str	r0, [r7, #12]
 801719c:	60b9      	str	r1, [r7, #8]
 801719e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d106      	bne.n	80171b4 <tcp_output_segment+0x20>
 80171a6:	4b64      	ldr	r3, [pc, #400]	; (8017338 <tcp_output_segment+0x1a4>)
 80171a8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80171ac:	4963      	ldr	r1, [pc, #396]	; (801733c <tcp_output_segment+0x1a8>)
 80171ae:	4864      	ldr	r0, [pc, #400]	; (8017340 <tcp_output_segment+0x1ac>)
 80171b0:	f004 f87e 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80171b4:	68bb      	ldr	r3, [r7, #8]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d106      	bne.n	80171c8 <tcp_output_segment+0x34>
 80171ba:	4b5f      	ldr	r3, [pc, #380]	; (8017338 <tcp_output_segment+0x1a4>)
 80171bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80171c0:	4960      	ldr	r1, [pc, #384]	; (8017344 <tcp_output_segment+0x1b0>)
 80171c2:	485f      	ldr	r0, [pc, #380]	; (8017340 <tcp_output_segment+0x1ac>)
 80171c4:	f004 f874 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d106      	bne.n	80171dc <tcp_output_segment+0x48>
 80171ce:	4b5a      	ldr	r3, [pc, #360]	; (8017338 <tcp_output_segment+0x1a4>)
 80171d0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80171d4:	495c      	ldr	r1, [pc, #368]	; (8017348 <tcp_output_segment+0x1b4>)
 80171d6:	485a      	ldr	r0, [pc, #360]	; (8017340 <tcp_output_segment+0x1ac>)
 80171d8:	f004 f86a 	bl	801b2b0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80171dc:	68f8      	ldr	r0, [r7, #12]
 80171de:	f7ff ffb9 	bl	8017154 <tcp_output_segment_busy>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d001      	beq.n	80171ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80171e8:	2300      	movs	r3, #0
 80171ea:	e0a1      	b.n	8017330 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	68dc      	ldr	r4, [r3, #12]
 80171f4:	4610      	mov	r0, r2
 80171f6:	f7f8 fe5a 	bl	800feae <lwip_htonl>
 80171fa:	4603      	mov	r3, r0
 80171fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80171fe:	68bb      	ldr	r3, [r7, #8]
 8017200:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	68dc      	ldr	r4, [r3, #12]
 8017206:	4610      	mov	r0, r2
 8017208:	f7f8 fe3c 	bl	800fe84 <lwip_htons>
 801720c:	4603      	mov	r3, r0
 801720e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017214:	68ba      	ldr	r2, [r7, #8]
 8017216:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017218:	441a      	add	r2, r3
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	68db      	ldr	r3, [r3, #12]
 8017222:	3314      	adds	r3, #20
 8017224:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	7a9b      	ldrb	r3, [r3, #10]
 801722a:	f003 0301 	and.w	r3, r3, #1
 801722e:	2b00      	cmp	r3, #0
 8017230:	d015      	beq.n	801725e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017232:	68bb      	ldr	r3, [r7, #8]
 8017234:	3304      	adds	r3, #4
 8017236:	461a      	mov	r2, r3
 8017238:	6879      	ldr	r1, [r7, #4]
 801723a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801723e:	f7fc fa33 	bl	80136a8 <tcp_eff_send_mss_netif>
 8017242:	4603      	mov	r3, r0
 8017244:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017246:	8b7b      	ldrh	r3, [r7, #26]
 8017248:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801724c:	4618      	mov	r0, r3
 801724e:	f7f8 fe2e 	bl	800feae <lwip_htonl>
 8017252:	4602      	mov	r2, r0
 8017254:	69fb      	ldr	r3, [r7, #28]
 8017256:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017258:	69fb      	ldr	r3, [r7, #28]
 801725a:	3304      	adds	r3, #4
 801725c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017264:	2b00      	cmp	r3, #0
 8017266:	da02      	bge.n	801726e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017268:	68bb      	ldr	r3, [r7, #8]
 801726a:	2200      	movs	r2, #0
 801726c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801726e:	68bb      	ldr	r3, [r7, #8]
 8017270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017272:	2b00      	cmp	r3, #0
 8017274:	d10c      	bne.n	8017290 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017276:	4b35      	ldr	r3, [pc, #212]	; (801734c <tcp_output_segment+0x1b8>)
 8017278:	681a      	ldr	r2, [r3, #0]
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	68db      	ldr	r3, [r3, #12]
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	4618      	mov	r0, r3
 8017286:	f7f8 fe12 	bl	800feae <lwip_htonl>
 801728a:	4602      	mov	r2, r0
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	68da      	ldr	r2, [r3, #12]
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	685b      	ldr	r3, [r3, #4]
 801729a:	1ad3      	subs	r3, r2, r3
 801729c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	685b      	ldr	r3, [r3, #4]
 80172a2:	8959      	ldrh	r1, [r3, #10]
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	685b      	ldr	r3, [r3, #4]
 80172a8:	8b3a      	ldrh	r2, [r7, #24]
 80172aa:	1a8a      	subs	r2, r1, r2
 80172ac:	b292      	uxth	r2, r2
 80172ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	685b      	ldr	r3, [r3, #4]
 80172b4:	8919      	ldrh	r1, [r3, #8]
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	685b      	ldr	r3, [r3, #4]
 80172ba:	8b3a      	ldrh	r2, [r7, #24]
 80172bc:	1a8a      	subs	r2, r1, r2
 80172be:	b292      	uxth	r2, r2
 80172c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	685b      	ldr	r3, [r3, #4]
 80172c6:	68fa      	ldr	r2, [r7, #12]
 80172c8:	68d2      	ldr	r2, [r2, #12]
 80172ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	68db      	ldr	r3, [r3, #12]
 80172d0:	2200      	movs	r2, #0
 80172d2:	741a      	strb	r2, [r3, #16]
 80172d4:	2200      	movs	r2, #0
 80172d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	68da      	ldr	r2, [r3, #12]
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	7a9b      	ldrb	r3, [r3, #10]
 80172e0:	f003 0301 	and.w	r3, r3, #1
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d001      	beq.n	80172ec <tcp_output_segment+0x158>
 80172e8:	2318      	movs	r3, #24
 80172ea:	e000      	b.n	80172ee <tcp_output_segment+0x15a>
 80172ec:	2314      	movs	r3, #20
 80172ee:	4413      	add	r3, r2
 80172f0:	69fa      	ldr	r2, [r7, #28]
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d006      	beq.n	8017304 <tcp_output_segment+0x170>
 80172f6:	4b10      	ldr	r3, [pc, #64]	; (8017338 <tcp_output_segment+0x1a4>)
 80172f8:	f240 621c 	movw	r2, #1564	; 0x61c
 80172fc:	4914      	ldr	r1, [pc, #80]	; (8017350 <tcp_output_segment+0x1bc>)
 80172fe:	4810      	ldr	r0, [pc, #64]	; (8017340 <tcp_output_segment+0x1ac>)
 8017300:	f003 ffd6 	bl	801b2b0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	6858      	ldr	r0, [r3, #4]
 8017308:	68b9      	ldr	r1, [r7, #8]
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	1d1c      	adds	r4, r3, #4
 801730e:	68bb      	ldr	r3, [r7, #8]
 8017310:	7add      	ldrb	r5, [r3, #11]
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	7a9b      	ldrb	r3, [r3, #10]
 8017316:	687a      	ldr	r2, [r7, #4]
 8017318:	9202      	str	r2, [sp, #8]
 801731a:	2206      	movs	r2, #6
 801731c:	9201      	str	r2, [sp, #4]
 801731e:	9300      	str	r3, [sp, #0]
 8017320:	462b      	mov	r3, r5
 8017322:	4622      	mov	r2, r4
 8017324:	f002 fa5a 	bl	80197dc <ip4_output_if>
 8017328:	4603      	mov	r3, r0
 801732a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801732c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017330:	4618      	mov	r0, r3
 8017332:	3720      	adds	r7, #32
 8017334:	46bd      	mov	sp, r7
 8017336:	bdb0      	pop	{r4, r5, r7, pc}
 8017338:	0801fa78 	.word	0x0801fa78
 801733c:	0802003c 	.word	0x0802003c
 8017340:	0801facc 	.word	0x0801facc
 8017344:	0802005c 	.word	0x0802005c
 8017348:	0802007c 	.word	0x0802007c
 801734c:	200071bc 	.word	0x200071bc
 8017350:	080200a0 	.word	0x080200a0

08017354 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017354:	b5b0      	push	{r4, r5, r7, lr}
 8017356:	b084      	sub	sp, #16
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d106      	bne.n	8017370 <tcp_rexmit_rto_prepare+0x1c>
 8017362:	4b31      	ldr	r3, [pc, #196]	; (8017428 <tcp_rexmit_rto_prepare+0xd4>)
 8017364:	f240 6263 	movw	r2, #1635	; 0x663
 8017368:	4930      	ldr	r1, [pc, #192]	; (801742c <tcp_rexmit_rto_prepare+0xd8>)
 801736a:	4831      	ldr	r0, [pc, #196]	; (8017430 <tcp_rexmit_rto_prepare+0xdc>)
 801736c:	f003 ffa0 	bl	801b2b0 <iprintf>

  if (pcb->unacked == NULL) {
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017374:	2b00      	cmp	r3, #0
 8017376:	d102      	bne.n	801737e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017378:	f06f 0305 	mvn.w	r3, #5
 801737c:	e050      	b.n	8017420 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017382:	60fb      	str	r3, [r7, #12]
 8017384:	e00b      	b.n	801739e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017386:	68f8      	ldr	r0, [r7, #12]
 8017388:	f7ff fee4 	bl	8017154 <tcp_output_segment_busy>
 801738c:	4603      	mov	r3, r0
 801738e:	2b00      	cmp	r3, #0
 8017390:	d002      	beq.n	8017398 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017392:	f06f 0305 	mvn.w	r3, #5
 8017396:	e043      	b.n	8017420 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	60fb      	str	r3, [r7, #12]
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d1ef      	bne.n	8017386 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80173a6:	68f8      	ldr	r0, [r7, #12]
 80173a8:	f7ff fed4 	bl	8017154 <tcp_output_segment_busy>
 80173ac:	4603      	mov	r3, r0
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d002      	beq.n	80173b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80173b2:	f06f 0305 	mvn.w	r3, #5
 80173b6:	e033      	b.n	8017420 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2200      	movs	r2, #0
 80173cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	8b5b      	ldrh	r3, [r3, #26]
 80173d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80173d6:	b29a      	uxth	r2, r3
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	68db      	ldr	r3, [r3, #12]
 80173e0:	685b      	ldr	r3, [r3, #4]
 80173e2:	4618      	mov	r0, r3
 80173e4:	f7f8 fd63 	bl	800feae <lwip_htonl>
 80173e8:	4604      	mov	r4, r0
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	891b      	ldrh	r3, [r3, #8]
 80173ee:	461d      	mov	r5, r3
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	68db      	ldr	r3, [r3, #12]
 80173f4:	899b      	ldrh	r3, [r3, #12]
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7f8 fd43 	bl	800fe84 <lwip_htons>
 80173fe:	4603      	mov	r3, r0
 8017400:	b2db      	uxtb	r3, r3
 8017402:	f003 0303 	and.w	r3, r3, #3
 8017406:	2b00      	cmp	r3, #0
 8017408:	d001      	beq.n	801740e <tcp_rexmit_rto_prepare+0xba>
 801740a:	2301      	movs	r3, #1
 801740c:	e000      	b.n	8017410 <tcp_rexmit_rto_prepare+0xbc>
 801740e:	2300      	movs	r3, #0
 8017410:	442b      	add	r3, r5
 8017412:	18e2      	adds	r2, r4, r3
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2200      	movs	r2, #0
 801741c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801741e:	2300      	movs	r3, #0
}
 8017420:	4618      	mov	r0, r3
 8017422:	3710      	adds	r7, #16
 8017424:	46bd      	mov	sp, r7
 8017426:	bdb0      	pop	{r4, r5, r7, pc}
 8017428:	0801fa78 	.word	0x0801fa78
 801742c:	080200b4 	.word	0x080200b4
 8017430:	0801facc 	.word	0x0801facc

08017434 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d106      	bne.n	8017450 <tcp_rexmit_rto_commit+0x1c>
 8017442:	4b0d      	ldr	r3, [pc, #52]	; (8017478 <tcp_rexmit_rto_commit+0x44>)
 8017444:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017448:	490c      	ldr	r1, [pc, #48]	; (801747c <tcp_rexmit_rto_commit+0x48>)
 801744a:	480d      	ldr	r0, [pc, #52]	; (8017480 <tcp_rexmit_rto_commit+0x4c>)
 801744c:	f003 ff30 	bl	801b2b0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017456:	2bff      	cmp	r3, #255	; 0xff
 8017458:	d007      	beq.n	801746a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017460:	3301      	adds	r3, #1
 8017462:	b2da      	uxtb	r2, r3
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f7ff fc7e 	bl	8016d6c <tcp_output>
}
 8017470:	bf00      	nop
 8017472:	3708      	adds	r7, #8
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}
 8017478:	0801fa78 	.word	0x0801fa78
 801747c:	080200d8 	.word	0x080200d8
 8017480:	0801facc 	.word	0x0801facc

08017484 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d106      	bne.n	80174a0 <tcp_rexmit_rto+0x1c>
 8017492:	4b0a      	ldr	r3, [pc, #40]	; (80174bc <tcp_rexmit_rto+0x38>)
 8017494:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017498:	4909      	ldr	r1, [pc, #36]	; (80174c0 <tcp_rexmit_rto+0x3c>)
 801749a:	480a      	ldr	r0, [pc, #40]	; (80174c4 <tcp_rexmit_rto+0x40>)
 801749c:	f003 ff08 	bl	801b2b0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f7ff ff57 	bl	8017354 <tcp_rexmit_rto_prepare>
 80174a6:	4603      	mov	r3, r0
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d102      	bne.n	80174b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80174ac:	6878      	ldr	r0, [r7, #4]
 80174ae:	f7ff ffc1 	bl	8017434 <tcp_rexmit_rto_commit>
  }
}
 80174b2:	bf00      	nop
 80174b4:	3708      	adds	r7, #8
 80174b6:	46bd      	mov	sp, r7
 80174b8:	bd80      	pop	{r7, pc}
 80174ba:	bf00      	nop
 80174bc:	0801fa78 	.word	0x0801fa78
 80174c0:	080200fc 	.word	0x080200fc
 80174c4:	0801facc 	.word	0x0801facc

080174c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80174c8:	b590      	push	{r4, r7, lr}
 80174ca:	b085      	sub	sp, #20
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d106      	bne.n	80174e4 <tcp_rexmit+0x1c>
 80174d6:	4b2f      	ldr	r3, [pc, #188]	; (8017594 <tcp_rexmit+0xcc>)
 80174d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80174dc:	492e      	ldr	r1, [pc, #184]	; (8017598 <tcp_rexmit+0xd0>)
 80174de:	482f      	ldr	r0, [pc, #188]	; (801759c <tcp_rexmit+0xd4>)
 80174e0:	f003 fee6 	bl	801b2b0 <iprintf>

  if (pcb->unacked == NULL) {
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d102      	bne.n	80174f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80174ec:	f06f 0305 	mvn.w	r3, #5
 80174f0:	e04c      	b.n	801758c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80174f8:	68b8      	ldr	r0, [r7, #8]
 80174fa:	f7ff fe2b 	bl	8017154 <tcp_output_segment_busy>
 80174fe:	4603      	mov	r3, r0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d002      	beq.n	801750a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017504:	f06f 0305 	mvn.w	r3, #5
 8017508:	e040      	b.n	801758c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801750a:	68bb      	ldr	r3, [r7, #8]
 801750c:	681a      	ldr	r2, [r3, #0]
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	336c      	adds	r3, #108	; 0x6c
 8017516:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017518:	e002      	b.n	8017520 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d011      	beq.n	801754c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	68db      	ldr	r3, [r3, #12]
 801752e:	685b      	ldr	r3, [r3, #4]
 8017530:	4618      	mov	r0, r3
 8017532:	f7f8 fcbc 	bl	800feae <lwip_htonl>
 8017536:	4604      	mov	r4, r0
 8017538:	68bb      	ldr	r3, [r7, #8]
 801753a:	68db      	ldr	r3, [r3, #12]
 801753c:	685b      	ldr	r3, [r3, #4]
 801753e:	4618      	mov	r0, r3
 8017540:	f7f8 fcb5 	bl	800feae <lwip_htonl>
 8017544:	4603      	mov	r3, r0
 8017546:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017548:	2b00      	cmp	r3, #0
 801754a:	dbe6      	blt.n	801751a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	681a      	ldr	r2, [r3, #0]
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	68ba      	ldr	r2, [r7, #8]
 8017558:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801755a:	68bb      	ldr	r3, [r7, #8]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d103      	bne.n	801756a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	2200      	movs	r2, #0
 8017566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017570:	2bff      	cmp	r3, #255	; 0xff
 8017572:	d007      	beq.n	8017584 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801757a:	3301      	adds	r3, #1
 801757c:	b2da      	uxtb	r2, r3
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2200      	movs	r2, #0
 8017588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801758a:	2300      	movs	r3, #0
}
 801758c:	4618      	mov	r0, r3
 801758e:	3714      	adds	r7, #20
 8017590:	46bd      	mov	sp, r7
 8017592:	bd90      	pop	{r4, r7, pc}
 8017594:	0801fa78 	.word	0x0801fa78
 8017598:	08020118 	.word	0x08020118
 801759c:	0801facc 	.word	0x0801facc

080175a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b082      	sub	sp, #8
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d106      	bne.n	80175bc <tcp_rexmit_fast+0x1c>
 80175ae:	4b2a      	ldr	r3, [pc, #168]	; (8017658 <tcp_rexmit_fast+0xb8>)
 80175b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80175b4:	4929      	ldr	r1, [pc, #164]	; (801765c <tcp_rexmit_fast+0xbc>)
 80175b6:	482a      	ldr	r0, [pc, #168]	; (8017660 <tcp_rexmit_fast+0xc0>)
 80175b8:	f003 fe7a 	bl	801b2b0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d045      	beq.n	8017650 <tcp_rexmit_fast+0xb0>
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	8b5b      	ldrh	r3, [r3, #26]
 80175c8:	f003 0304 	and.w	r3, r3, #4
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d13f      	bne.n	8017650 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80175d0:	6878      	ldr	r0, [r7, #4]
 80175d2:	f7ff ff79 	bl	80174c8 <tcp_rexmit>
 80175d6:	4603      	mov	r3, r0
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d139      	bne.n	8017650 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80175e8:	4293      	cmp	r3, r2
 80175ea:	bf28      	it	cs
 80175ec:	4613      	movcs	r3, r2
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	da00      	bge.n	80175f6 <tcp_rexmit_fast+0x56>
 80175f4:	3301      	adds	r3, #1
 80175f6:	105b      	asrs	r3, r3, #1
 80175f8:	b29a      	uxth	r2, r3
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017606:	461a      	mov	r2, r3
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801760c:	005b      	lsls	r3, r3, #1
 801760e:	429a      	cmp	r2, r3
 8017610:	d206      	bcs.n	8017620 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017616:	005b      	lsls	r3, r3, #1
 8017618:	b29a      	uxth	r2, r3
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801762a:	4619      	mov	r1, r3
 801762c:	0049      	lsls	r1, r1, #1
 801762e:	440b      	add	r3, r1
 8017630:	b29b      	uxth	r3, r3
 8017632:	4413      	add	r3, r2
 8017634:	b29a      	uxth	r2, r3
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	8b5b      	ldrh	r3, [r3, #26]
 8017640:	f043 0304 	orr.w	r3, r3, #4
 8017644:	b29a      	uxth	r2, r3
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	2200      	movs	r2, #0
 801764e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017650:	bf00      	nop
 8017652:	3708      	adds	r7, #8
 8017654:	46bd      	mov	sp, r7
 8017656:	bd80      	pop	{r7, pc}
 8017658:	0801fa78 	.word	0x0801fa78
 801765c:	08020130 	.word	0x08020130
 8017660:	0801facc 	.word	0x0801facc

08017664 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b086      	sub	sp, #24
 8017668:	af00      	add	r7, sp, #0
 801766a:	60f8      	str	r0, [r7, #12]
 801766c:	607b      	str	r3, [r7, #4]
 801766e:	460b      	mov	r3, r1
 8017670:	817b      	strh	r3, [r7, #10]
 8017672:	4613      	mov	r3, r2
 8017674:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017676:	897a      	ldrh	r2, [r7, #10]
 8017678:	893b      	ldrh	r3, [r7, #8]
 801767a:	4413      	add	r3, r2
 801767c:	b29b      	uxth	r3, r3
 801767e:	3314      	adds	r3, #20
 8017680:	b29b      	uxth	r3, r3
 8017682:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017686:	4619      	mov	r1, r3
 8017688:	2022      	movs	r0, #34	; 0x22
 801768a:	f7f9 fd1b 	bl	80110c4 <pbuf_alloc>
 801768e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d04d      	beq.n	8017732 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017696:	897b      	ldrh	r3, [r7, #10]
 8017698:	3313      	adds	r3, #19
 801769a:	697a      	ldr	r2, [r7, #20]
 801769c:	8952      	ldrh	r2, [r2, #10]
 801769e:	4293      	cmp	r3, r2
 80176a0:	db06      	blt.n	80176b0 <tcp_output_alloc_header_common+0x4c>
 80176a2:	4b26      	ldr	r3, [pc, #152]	; (801773c <tcp_output_alloc_header_common+0xd8>)
 80176a4:	f240 7223 	movw	r2, #1827	; 0x723
 80176a8:	4925      	ldr	r1, [pc, #148]	; (8017740 <tcp_output_alloc_header_common+0xdc>)
 80176aa:	4826      	ldr	r0, [pc, #152]	; (8017744 <tcp_output_alloc_header_common+0xe0>)
 80176ac:	f003 fe00 	bl	801b2b0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80176b0:	697b      	ldr	r3, [r7, #20]
 80176b2:	685b      	ldr	r3, [r3, #4]
 80176b4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80176b6:	8c3b      	ldrh	r3, [r7, #32]
 80176b8:	4618      	mov	r0, r3
 80176ba:	f7f8 fbe3 	bl	800fe84 <lwip_htons>
 80176be:	4603      	mov	r3, r0
 80176c0:	461a      	mov	r2, r3
 80176c2:	693b      	ldr	r3, [r7, #16]
 80176c4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80176c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80176c8:	4618      	mov	r0, r3
 80176ca:	f7f8 fbdb 	bl	800fe84 <lwip_htons>
 80176ce:	4603      	mov	r3, r0
 80176d0:	461a      	mov	r2, r3
 80176d2:	693b      	ldr	r3, [r7, #16]
 80176d4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	687a      	ldr	r2, [r7, #4]
 80176da:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80176dc:	68f8      	ldr	r0, [r7, #12]
 80176de:	f7f8 fbe6 	bl	800feae <lwip_htonl>
 80176e2:	4602      	mov	r2, r0
 80176e4:	693b      	ldr	r3, [r7, #16]
 80176e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80176e8:	897b      	ldrh	r3, [r7, #10]
 80176ea:	089b      	lsrs	r3, r3, #2
 80176ec:	b29b      	uxth	r3, r3
 80176ee:	3305      	adds	r3, #5
 80176f0:	b29b      	uxth	r3, r3
 80176f2:	031b      	lsls	r3, r3, #12
 80176f4:	b29a      	uxth	r2, r3
 80176f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80176fa:	b29b      	uxth	r3, r3
 80176fc:	4313      	orrs	r3, r2
 80176fe:	b29b      	uxth	r3, r3
 8017700:	4618      	mov	r0, r3
 8017702:	f7f8 fbbf 	bl	800fe84 <lwip_htons>
 8017706:	4603      	mov	r3, r0
 8017708:	461a      	mov	r2, r3
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801770e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017710:	4618      	mov	r0, r3
 8017712:	f7f8 fbb7 	bl	800fe84 <lwip_htons>
 8017716:	4603      	mov	r3, r0
 8017718:	461a      	mov	r2, r3
 801771a:	693b      	ldr	r3, [r7, #16]
 801771c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801771e:	693b      	ldr	r3, [r7, #16]
 8017720:	2200      	movs	r2, #0
 8017722:	741a      	strb	r2, [r3, #16]
 8017724:	2200      	movs	r2, #0
 8017726:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017728:	693b      	ldr	r3, [r7, #16]
 801772a:	2200      	movs	r2, #0
 801772c:	749a      	strb	r2, [r3, #18]
 801772e:	2200      	movs	r2, #0
 8017730:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017732:	697b      	ldr	r3, [r7, #20]
}
 8017734:	4618      	mov	r0, r3
 8017736:	3718      	adds	r7, #24
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}
 801773c:	0801fa78 	.word	0x0801fa78
 8017740:	08020150 	.word	0x08020150
 8017744:	0801facc 	.word	0x0801facc

08017748 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017748:	b5b0      	push	{r4, r5, r7, lr}
 801774a:	b08a      	sub	sp, #40	; 0x28
 801774c:	af04      	add	r7, sp, #16
 801774e:	60f8      	str	r0, [r7, #12]
 8017750:	607b      	str	r3, [r7, #4]
 8017752:	460b      	mov	r3, r1
 8017754:	817b      	strh	r3, [r7, #10]
 8017756:	4613      	mov	r3, r2
 8017758:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d106      	bne.n	801776e <tcp_output_alloc_header+0x26>
 8017760:	4b15      	ldr	r3, [pc, #84]	; (80177b8 <tcp_output_alloc_header+0x70>)
 8017762:	f240 7242 	movw	r2, #1858	; 0x742
 8017766:	4915      	ldr	r1, [pc, #84]	; (80177bc <tcp_output_alloc_header+0x74>)
 8017768:	4815      	ldr	r0, [pc, #84]	; (80177c0 <tcp_output_alloc_header+0x78>)
 801776a:	f003 fda1 	bl	801b2b0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	8adb      	ldrh	r3, [r3, #22]
 8017776:	68fa      	ldr	r2, [r7, #12]
 8017778:	8b12      	ldrh	r2, [r2, #24]
 801777a:	68f9      	ldr	r1, [r7, #12]
 801777c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801777e:	893d      	ldrh	r5, [r7, #8]
 8017780:	897c      	ldrh	r4, [r7, #10]
 8017782:	9103      	str	r1, [sp, #12]
 8017784:	2110      	movs	r1, #16
 8017786:	9102      	str	r1, [sp, #8]
 8017788:	9201      	str	r2, [sp, #4]
 801778a:	9300      	str	r3, [sp, #0]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	462a      	mov	r2, r5
 8017790:	4621      	mov	r1, r4
 8017792:	f7ff ff67 	bl	8017664 <tcp_output_alloc_header_common>
 8017796:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d006      	beq.n	80177ac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177a2:	68fa      	ldr	r2, [r7, #12]
 80177a4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80177a6:	441a      	add	r2, r3
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80177ac:	697b      	ldr	r3, [r7, #20]
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	3718      	adds	r7, #24
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bdb0      	pop	{r4, r5, r7, pc}
 80177b6:	bf00      	nop
 80177b8:	0801fa78 	.word	0x0801fa78
 80177bc:	08020180 	.word	0x08020180
 80177c0:	0801facc 	.word	0x0801facc

080177c4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b088      	sub	sp, #32
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	60f8      	str	r0, [r7, #12]
 80177cc:	60b9      	str	r1, [r7, #8]
 80177ce:	4611      	mov	r1, r2
 80177d0:	461a      	mov	r2, r3
 80177d2:	460b      	mov	r3, r1
 80177d4:	71fb      	strb	r3, [r7, #7]
 80177d6:	4613      	mov	r3, r2
 80177d8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80177da:	2300      	movs	r3, #0
 80177dc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80177de:	68bb      	ldr	r3, [r7, #8]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d106      	bne.n	80177f2 <tcp_output_fill_options+0x2e>
 80177e4:	4b12      	ldr	r3, [pc, #72]	; (8017830 <tcp_output_fill_options+0x6c>)
 80177e6:	f240 7256 	movw	r2, #1878	; 0x756
 80177ea:	4912      	ldr	r1, [pc, #72]	; (8017834 <tcp_output_fill_options+0x70>)
 80177ec:	4812      	ldr	r0, [pc, #72]	; (8017838 <tcp_output_fill_options+0x74>)
 80177ee:	f003 fd5f 	bl	801b2b0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80177f2:	68bb      	ldr	r3, [r7, #8]
 80177f4:	685b      	ldr	r3, [r3, #4]
 80177f6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80177f8:	69bb      	ldr	r3, [r7, #24]
 80177fa:	3314      	adds	r3, #20
 80177fc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80177fe:	8bfb      	ldrh	r3, [r7, #30]
 8017800:	009b      	lsls	r3, r3, #2
 8017802:	461a      	mov	r2, r3
 8017804:	79fb      	ldrb	r3, [r7, #7]
 8017806:	009b      	lsls	r3, r3, #2
 8017808:	f003 0304 	and.w	r3, r3, #4
 801780c:	4413      	add	r3, r2
 801780e:	3314      	adds	r3, #20
 8017810:	69ba      	ldr	r2, [r7, #24]
 8017812:	4413      	add	r3, r2
 8017814:	697a      	ldr	r2, [r7, #20]
 8017816:	429a      	cmp	r2, r3
 8017818:	d006      	beq.n	8017828 <tcp_output_fill_options+0x64>
 801781a:	4b05      	ldr	r3, [pc, #20]	; (8017830 <tcp_output_fill_options+0x6c>)
 801781c:	f240 7275 	movw	r2, #1909	; 0x775
 8017820:	4906      	ldr	r1, [pc, #24]	; (801783c <tcp_output_fill_options+0x78>)
 8017822:	4805      	ldr	r0, [pc, #20]	; (8017838 <tcp_output_fill_options+0x74>)
 8017824:	f003 fd44 	bl	801b2b0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017828:	bf00      	nop
 801782a:	3720      	adds	r7, #32
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}
 8017830:	0801fa78 	.word	0x0801fa78
 8017834:	080201a8 	.word	0x080201a8
 8017838:	0801facc 	.word	0x0801facc
 801783c:	080200a0 	.word	0x080200a0

08017840 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b08a      	sub	sp, #40	; 0x28
 8017844:	af04      	add	r7, sp, #16
 8017846:	60f8      	str	r0, [r7, #12]
 8017848:	60b9      	str	r1, [r7, #8]
 801784a:	607a      	str	r2, [r7, #4]
 801784c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801784e:	68bb      	ldr	r3, [r7, #8]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d106      	bne.n	8017862 <tcp_output_control_segment+0x22>
 8017854:	4b1c      	ldr	r3, [pc, #112]	; (80178c8 <tcp_output_control_segment+0x88>)
 8017856:	f240 7287 	movw	r2, #1927	; 0x787
 801785a:	491c      	ldr	r1, [pc, #112]	; (80178cc <tcp_output_control_segment+0x8c>)
 801785c:	481c      	ldr	r0, [pc, #112]	; (80178d0 <tcp_output_control_segment+0x90>)
 801785e:	f003 fd27 	bl	801b2b0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017862:	683a      	ldr	r2, [r7, #0]
 8017864:	6879      	ldr	r1, [r7, #4]
 8017866:	68f8      	ldr	r0, [r7, #12]
 8017868:	f7fe fae8 	bl	8015e3c <tcp_route>
 801786c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801786e:	693b      	ldr	r3, [r7, #16]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d102      	bne.n	801787a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017874:	23fc      	movs	r3, #252	; 0xfc
 8017876:	75fb      	strb	r3, [r7, #23]
 8017878:	e01c      	b.n	80178b4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d006      	beq.n	801788e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	7adb      	ldrb	r3, [r3, #11]
 8017884:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	7a9b      	ldrb	r3, [r3, #10]
 801788a:	757b      	strb	r3, [r7, #21]
 801788c:	e003      	b.n	8017896 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801788e:	23ff      	movs	r3, #255	; 0xff
 8017890:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017892:	2300      	movs	r3, #0
 8017894:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017896:	7dba      	ldrb	r2, [r7, #22]
 8017898:	693b      	ldr	r3, [r7, #16]
 801789a:	9302      	str	r3, [sp, #8]
 801789c:	2306      	movs	r3, #6
 801789e:	9301      	str	r3, [sp, #4]
 80178a0:	7d7b      	ldrb	r3, [r7, #21]
 80178a2:	9300      	str	r3, [sp, #0]
 80178a4:	4613      	mov	r3, r2
 80178a6:	683a      	ldr	r2, [r7, #0]
 80178a8:	6879      	ldr	r1, [r7, #4]
 80178aa:	68b8      	ldr	r0, [r7, #8]
 80178ac:	f001 ff96 	bl	80197dc <ip4_output_if>
 80178b0:	4603      	mov	r3, r0
 80178b2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80178b4:	68b8      	ldr	r0, [r7, #8]
 80178b6:	f7f9 fee9 	bl	801168c <pbuf_free>
  return err;
 80178ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80178be:	4618      	mov	r0, r3
 80178c0:	3718      	adds	r7, #24
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd80      	pop	{r7, pc}
 80178c6:	bf00      	nop
 80178c8:	0801fa78 	.word	0x0801fa78
 80178cc:	080201d0 	.word	0x080201d0
 80178d0:	0801facc 	.word	0x0801facc

080178d4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80178d4:	b590      	push	{r4, r7, lr}
 80178d6:	b08b      	sub	sp, #44	; 0x2c
 80178d8:	af04      	add	r7, sp, #16
 80178da:	60f8      	str	r0, [r7, #12]
 80178dc:	60b9      	str	r1, [r7, #8]
 80178de:	607a      	str	r2, [r7, #4]
 80178e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d106      	bne.n	80178f6 <tcp_rst+0x22>
 80178e8:	4b1f      	ldr	r3, [pc, #124]	; (8017968 <tcp_rst+0x94>)
 80178ea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80178ee:	491f      	ldr	r1, [pc, #124]	; (801796c <tcp_rst+0x98>)
 80178f0:	481f      	ldr	r0, [pc, #124]	; (8017970 <tcp_rst+0x9c>)
 80178f2:	f003 fcdd 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80178f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d106      	bne.n	801790a <tcp_rst+0x36>
 80178fc:	4b1a      	ldr	r3, [pc, #104]	; (8017968 <tcp_rst+0x94>)
 80178fe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8017902:	491c      	ldr	r1, [pc, #112]	; (8017974 <tcp_rst+0xa0>)
 8017904:	481a      	ldr	r0, [pc, #104]	; (8017970 <tcp_rst+0x9c>)
 8017906:	f003 fcd3 	bl	801b2b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801790a:	2300      	movs	r3, #0
 801790c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801790e:	f24d 0316 	movw	r3, #53270	; 0xd016
 8017912:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017914:	7dfb      	ldrb	r3, [r7, #23]
 8017916:	b29c      	uxth	r4, r3
 8017918:	68b8      	ldr	r0, [r7, #8]
 801791a:	f7f8 fac8 	bl	800feae <lwip_htonl>
 801791e:	4602      	mov	r2, r0
 8017920:	8abb      	ldrh	r3, [r7, #20]
 8017922:	9303      	str	r3, [sp, #12]
 8017924:	2314      	movs	r3, #20
 8017926:	9302      	str	r3, [sp, #8]
 8017928:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801792a:	9301      	str	r3, [sp, #4]
 801792c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801792e:	9300      	str	r3, [sp, #0]
 8017930:	4613      	mov	r3, r2
 8017932:	2200      	movs	r2, #0
 8017934:	4621      	mov	r1, r4
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f7ff fe94 	bl	8017664 <tcp_output_alloc_header_common>
 801793c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801793e:	693b      	ldr	r3, [r7, #16]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d00c      	beq.n	801795e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017944:	7dfb      	ldrb	r3, [r7, #23]
 8017946:	2200      	movs	r2, #0
 8017948:	6939      	ldr	r1, [r7, #16]
 801794a:	68f8      	ldr	r0, [r7, #12]
 801794c:	f7ff ff3a 	bl	80177c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017952:	683a      	ldr	r2, [r7, #0]
 8017954:	6939      	ldr	r1, [r7, #16]
 8017956:	68f8      	ldr	r0, [r7, #12]
 8017958:	f7ff ff72 	bl	8017840 <tcp_output_control_segment>
 801795c:	e000      	b.n	8017960 <tcp_rst+0x8c>
    return;
 801795e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017960:	371c      	adds	r7, #28
 8017962:	46bd      	mov	sp, r7
 8017964:	bd90      	pop	{r4, r7, pc}
 8017966:	bf00      	nop
 8017968:	0801fa78 	.word	0x0801fa78
 801796c:	080201fc 	.word	0x080201fc
 8017970:	0801facc 	.word	0x0801facc
 8017974:	08020218 	.word	0x08020218

08017978 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017978:	b590      	push	{r4, r7, lr}
 801797a:	b087      	sub	sp, #28
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017980:	2300      	movs	r3, #0
 8017982:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017984:	2300      	movs	r3, #0
 8017986:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d106      	bne.n	801799c <tcp_send_empty_ack+0x24>
 801798e:	4b28      	ldr	r3, [pc, #160]	; (8017a30 <tcp_send_empty_ack+0xb8>)
 8017990:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017994:	4927      	ldr	r1, [pc, #156]	; (8017a34 <tcp_send_empty_ack+0xbc>)
 8017996:	4828      	ldr	r0, [pc, #160]	; (8017a38 <tcp_send_empty_ack+0xc0>)
 8017998:	f003 fc8a 	bl	801b2b0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801799c:	7dfb      	ldrb	r3, [r7, #23]
 801799e:	009b      	lsls	r3, r3, #2
 80179a0:	b2db      	uxtb	r3, r3
 80179a2:	f003 0304 	and.w	r3, r3, #4
 80179a6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80179a8:	7d7b      	ldrb	r3, [r7, #21]
 80179aa:	b29c      	uxth	r4, r3
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80179b0:	4618      	mov	r0, r3
 80179b2:	f7f8 fa7c 	bl	800feae <lwip_htonl>
 80179b6:	4603      	mov	r3, r0
 80179b8:	2200      	movs	r2, #0
 80179ba:	4621      	mov	r1, r4
 80179bc:	6878      	ldr	r0, [r7, #4]
 80179be:	f7ff fec3 	bl	8017748 <tcp_output_alloc_header>
 80179c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80179c4:	693b      	ldr	r3, [r7, #16]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d109      	bne.n	80179de <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	8b5b      	ldrh	r3, [r3, #26]
 80179ce:	f043 0303 	orr.w	r3, r3, #3
 80179d2:	b29a      	uxth	r2, r3
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80179d8:	f06f 0301 	mvn.w	r3, #1
 80179dc:	e023      	b.n	8017a26 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80179de:	7dbb      	ldrb	r3, [r7, #22]
 80179e0:	7dfa      	ldrb	r2, [r7, #23]
 80179e2:	6939      	ldr	r1, [r7, #16]
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	f7ff feed 	bl	80177c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80179ea:	687a      	ldr	r2, [r7, #4]
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	3304      	adds	r3, #4
 80179f0:	6939      	ldr	r1, [r7, #16]
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	f7ff ff24 	bl	8017840 <tcp_output_control_segment>
 80179f8:	4603      	mov	r3, r0
 80179fa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80179fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d007      	beq.n	8017a14 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	8b5b      	ldrh	r3, [r3, #26]
 8017a08:	f043 0303 	orr.w	r3, r3, #3
 8017a0c:	b29a      	uxth	r2, r3
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	835a      	strh	r2, [r3, #26]
 8017a12:	e006      	b.n	8017a22 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	8b5b      	ldrh	r3, [r3, #26]
 8017a18:	f023 0303 	bic.w	r3, r3, #3
 8017a1c:	b29a      	uxth	r2, r3
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017a26:	4618      	mov	r0, r3
 8017a28:	371c      	adds	r7, #28
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd90      	pop	{r4, r7, pc}
 8017a2e:	bf00      	nop
 8017a30:	0801fa78 	.word	0x0801fa78
 8017a34:	08020234 	.word	0x08020234
 8017a38:	0801facc 	.word	0x0801facc

08017a3c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017a3c:	b590      	push	{r4, r7, lr}
 8017a3e:	b087      	sub	sp, #28
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a44:	2300      	movs	r3, #0
 8017a46:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d106      	bne.n	8017a5c <tcp_keepalive+0x20>
 8017a4e:	4b18      	ldr	r3, [pc, #96]	; (8017ab0 <tcp_keepalive+0x74>)
 8017a50:	f640 0224 	movw	r2, #2084	; 0x824
 8017a54:	4917      	ldr	r1, [pc, #92]	; (8017ab4 <tcp_keepalive+0x78>)
 8017a56:	4818      	ldr	r0, [pc, #96]	; (8017ab8 <tcp_keepalive+0x7c>)
 8017a58:	f003 fc2a 	bl	801b2b0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017a5c:	7dfb      	ldrb	r3, [r7, #23]
 8017a5e:	b29c      	uxth	r4, r3
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a64:	3b01      	subs	r3, #1
 8017a66:	4618      	mov	r0, r3
 8017a68:	f7f8 fa21 	bl	800feae <lwip_htonl>
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	2200      	movs	r2, #0
 8017a70:	4621      	mov	r1, r4
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f7ff fe68 	bl	8017748 <tcp_output_alloc_header>
 8017a78:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017a7a:	693b      	ldr	r3, [r7, #16]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d102      	bne.n	8017a86 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017a80:	f04f 33ff 	mov.w	r3, #4294967295
 8017a84:	e010      	b.n	8017aa8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a86:	7dfb      	ldrb	r3, [r7, #23]
 8017a88:	2200      	movs	r2, #0
 8017a8a:	6939      	ldr	r1, [r7, #16]
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	f7ff fe99 	bl	80177c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a92:	687a      	ldr	r2, [r7, #4]
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	3304      	adds	r3, #4
 8017a98:	6939      	ldr	r1, [r7, #16]
 8017a9a:	6878      	ldr	r0, [r7, #4]
 8017a9c:	f7ff fed0 	bl	8017840 <tcp_output_control_segment>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	371c      	adds	r7, #28
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd90      	pop	{r4, r7, pc}
 8017ab0:	0801fa78 	.word	0x0801fa78
 8017ab4:	08020254 	.word	0x08020254
 8017ab8:	0801facc 	.word	0x0801facc

08017abc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017abc:	b590      	push	{r4, r7, lr}
 8017abe:	b08b      	sub	sp, #44	; 0x2c
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d106      	bne.n	8017ade <tcp_zero_window_probe+0x22>
 8017ad0:	4b4c      	ldr	r3, [pc, #304]	; (8017c04 <tcp_zero_window_probe+0x148>)
 8017ad2:	f640 024f 	movw	r2, #2127	; 0x84f
 8017ad6:	494c      	ldr	r1, [pc, #304]	; (8017c08 <tcp_zero_window_probe+0x14c>)
 8017ad8:	484c      	ldr	r0, [pc, #304]	; (8017c0c <tcp_zero_window_probe+0x150>)
 8017ada:	f003 fbe9 	bl	801b2b0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ae2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017ae4:	6a3b      	ldr	r3, [r7, #32]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d101      	bne.n	8017aee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017aea:	2300      	movs	r3, #0
 8017aec:	e086      	b.n	8017bfc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017af4:	2bff      	cmp	r3, #255	; 0xff
 8017af6:	d007      	beq.n	8017b08 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017afe:	3301      	adds	r3, #1
 8017b00:	b2da      	uxtb	r2, r3
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017b08:	6a3b      	ldr	r3, [r7, #32]
 8017b0a:	68db      	ldr	r3, [r3, #12]
 8017b0c:	899b      	ldrh	r3, [r3, #12]
 8017b0e:	b29b      	uxth	r3, r3
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7f8 f9b7 	bl	800fe84 <lwip_htons>
 8017b16:	4603      	mov	r3, r0
 8017b18:	b2db      	uxtb	r3, r3
 8017b1a:	f003 0301 	and.w	r3, r3, #1
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d005      	beq.n	8017b2e <tcp_zero_window_probe+0x72>
 8017b22:	6a3b      	ldr	r3, [r7, #32]
 8017b24:	891b      	ldrh	r3, [r3, #8]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d101      	bne.n	8017b2e <tcp_zero_window_probe+0x72>
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	e000      	b.n	8017b30 <tcp_zero_window_probe+0x74>
 8017b2e:	2300      	movs	r3, #0
 8017b30:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017b32:	7ffb      	ldrb	r3, [r7, #31]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	bf0c      	ite	eq
 8017b38:	2301      	moveq	r3, #1
 8017b3a:	2300      	movne	r3, #0
 8017b3c:	b2db      	uxtb	r3, r3
 8017b3e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b44:	b299      	uxth	r1, r3
 8017b46:	6a3b      	ldr	r3, [r7, #32]
 8017b48:	68db      	ldr	r3, [r3, #12]
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	8bba      	ldrh	r2, [r7, #28]
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	f7ff fdfa 	bl	8017748 <tcp_output_alloc_header>
 8017b54:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017b56:	69bb      	ldr	r3, [r7, #24]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d102      	bne.n	8017b62 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b60:	e04c      	b.n	8017bfc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017b62:	69bb      	ldr	r3, [r7, #24]
 8017b64:	685b      	ldr	r3, [r3, #4]
 8017b66:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017b68:	7ffb      	ldrb	r3, [r7, #31]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d011      	beq.n	8017b92 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	899b      	ldrh	r3, [r3, #12]
 8017b72:	b29b      	uxth	r3, r3
 8017b74:	b21b      	sxth	r3, r3
 8017b76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017b7a:	b21c      	sxth	r4, r3
 8017b7c:	2011      	movs	r0, #17
 8017b7e:	f7f8 f981 	bl	800fe84 <lwip_htons>
 8017b82:	4603      	mov	r3, r0
 8017b84:	b21b      	sxth	r3, r3
 8017b86:	4323      	orrs	r3, r4
 8017b88:	b21b      	sxth	r3, r3
 8017b8a:	b29a      	uxth	r2, r3
 8017b8c:	697b      	ldr	r3, [r7, #20]
 8017b8e:	819a      	strh	r2, [r3, #12]
 8017b90:	e010      	b.n	8017bb4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	3314      	adds	r3, #20
 8017b98:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017b9a:	6a3b      	ldr	r3, [r7, #32]
 8017b9c:	6858      	ldr	r0, [r3, #4]
 8017b9e:	6a3b      	ldr	r3, [r7, #32]
 8017ba0:	685b      	ldr	r3, [r3, #4]
 8017ba2:	891a      	ldrh	r2, [r3, #8]
 8017ba4:	6a3b      	ldr	r3, [r7, #32]
 8017ba6:	891b      	ldrh	r3, [r3, #8]
 8017ba8:	1ad3      	subs	r3, r2, r3
 8017baa:	b29b      	uxth	r3, r3
 8017bac:	2201      	movs	r2, #1
 8017bae:	6939      	ldr	r1, [r7, #16]
 8017bb0:	f7f9 ff56 	bl	8011a60 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017bb4:	6a3b      	ldr	r3, [r7, #32]
 8017bb6:	68db      	ldr	r3, [r3, #12]
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7f8 f977 	bl	800feae <lwip_htonl>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	3301      	adds	r3, #1
 8017bc4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	1ad3      	subs	r3, r2, r3
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	da02      	bge.n	8017bd8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	68fa      	ldr	r2, [r7, #12]
 8017bd6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bdc:	2200      	movs	r2, #0
 8017bde:	69b9      	ldr	r1, [r7, #24]
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f7ff fdef 	bl	80177c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017be6:	687a      	ldr	r2, [r7, #4]
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	3304      	adds	r3, #4
 8017bec:	69b9      	ldr	r1, [r7, #24]
 8017bee:	6878      	ldr	r0, [r7, #4]
 8017bf0:	f7ff fe26 	bl	8017840 <tcp_output_control_segment>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017bf8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	372c      	adds	r7, #44	; 0x2c
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd90      	pop	{r4, r7, pc}
 8017c04:	0801fa78 	.word	0x0801fa78
 8017c08:	08020270 	.word	0x08020270
 8017c0c:	0801facc 	.word	0x0801facc

08017c10 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b082      	sub	sp, #8
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017c18:	f7fa f8a2 	bl	8011d60 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017c1c:	4b0a      	ldr	r3, [pc, #40]	; (8017c48 <tcpip_tcp_timer+0x38>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d103      	bne.n	8017c2c <tcpip_tcp_timer+0x1c>
 8017c24:	4b09      	ldr	r3, [pc, #36]	; (8017c4c <tcpip_tcp_timer+0x3c>)
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d005      	beq.n	8017c38 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	4908      	ldr	r1, [pc, #32]	; (8017c50 <tcpip_tcp_timer+0x40>)
 8017c30:	20fa      	movs	r0, #250	; 0xfa
 8017c32:	f000 f8f3 	bl	8017e1c <sys_timeout>
 8017c36:	e003      	b.n	8017c40 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017c38:	4b06      	ldr	r3, [pc, #24]	; (8017c54 <tcpip_tcp_timer+0x44>)
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	601a      	str	r2, [r3, #0]
  }
}
 8017c3e:	bf00      	nop
 8017c40:	bf00      	nop
 8017c42:	3708      	adds	r7, #8
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}
 8017c48:	200071c8 	.word	0x200071c8
 8017c4c:	200071cc 	.word	0x200071cc
 8017c50:	08017c11 	.word	0x08017c11
 8017c54:	20007214 	.word	0x20007214

08017c58 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017c5c:	4b0a      	ldr	r3, [pc, #40]	; (8017c88 <tcp_timer_needed+0x30>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d10f      	bne.n	8017c84 <tcp_timer_needed+0x2c>
 8017c64:	4b09      	ldr	r3, [pc, #36]	; (8017c8c <tcp_timer_needed+0x34>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d103      	bne.n	8017c74 <tcp_timer_needed+0x1c>
 8017c6c:	4b08      	ldr	r3, [pc, #32]	; (8017c90 <tcp_timer_needed+0x38>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d007      	beq.n	8017c84 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017c74:	4b04      	ldr	r3, [pc, #16]	; (8017c88 <tcp_timer_needed+0x30>)
 8017c76:	2201      	movs	r2, #1
 8017c78:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	4905      	ldr	r1, [pc, #20]	; (8017c94 <tcp_timer_needed+0x3c>)
 8017c7e:	20fa      	movs	r0, #250	; 0xfa
 8017c80:	f000 f8cc 	bl	8017e1c <sys_timeout>
  }
}
 8017c84:	bf00      	nop
 8017c86:	bd80      	pop	{r7, pc}
 8017c88:	20007214 	.word	0x20007214
 8017c8c:	200071c8 	.word	0x200071c8
 8017c90:	200071cc 	.word	0x200071cc
 8017c94:	08017c11 	.word	0x08017c11

08017c98 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b086      	sub	sp, #24
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	60f8      	str	r0, [r7, #12]
 8017ca0:	60b9      	str	r1, [r7, #8]
 8017ca2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017ca4:	2006      	movs	r0, #6
 8017ca6:	f7f8 fe0b 	bl	80108c0 <memp_malloc>
 8017caa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017cac:	693b      	ldr	r3, [r7, #16]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d109      	bne.n	8017cc6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017cb2:	693b      	ldr	r3, [r7, #16]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d151      	bne.n	8017d5c <sys_timeout_abs+0xc4>
 8017cb8:	4b2a      	ldr	r3, [pc, #168]	; (8017d64 <sys_timeout_abs+0xcc>)
 8017cba:	22be      	movs	r2, #190	; 0xbe
 8017cbc:	492a      	ldr	r1, [pc, #168]	; (8017d68 <sys_timeout_abs+0xd0>)
 8017cbe:	482b      	ldr	r0, [pc, #172]	; (8017d6c <sys_timeout_abs+0xd4>)
 8017cc0:	f003 faf6 	bl	801b2b0 <iprintf>
    return;
 8017cc4:	e04a      	b.n	8017d5c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017cc6:	693b      	ldr	r3, [r7, #16]
 8017cc8:	2200      	movs	r2, #0
 8017cca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017ccc:	693b      	ldr	r3, [r7, #16]
 8017cce:	68ba      	ldr	r2, [r7, #8]
 8017cd0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017cd2:	693b      	ldr	r3, [r7, #16]
 8017cd4:	687a      	ldr	r2, [r7, #4]
 8017cd6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017cd8:	693b      	ldr	r3, [r7, #16]
 8017cda:	68fa      	ldr	r2, [r7, #12]
 8017cdc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017cde:	4b24      	ldr	r3, [pc, #144]	; (8017d70 <sys_timeout_abs+0xd8>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d103      	bne.n	8017cee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017ce6:	4a22      	ldr	r2, [pc, #136]	; (8017d70 <sys_timeout_abs+0xd8>)
 8017ce8:	693b      	ldr	r3, [r7, #16]
 8017cea:	6013      	str	r3, [r2, #0]
    return;
 8017cec:	e037      	b.n	8017d5e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	685a      	ldr	r2, [r3, #4]
 8017cf2:	4b1f      	ldr	r3, [pc, #124]	; (8017d70 <sys_timeout_abs+0xd8>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	685b      	ldr	r3, [r3, #4]
 8017cf8:	1ad3      	subs	r3, r2, r3
 8017cfa:	0fdb      	lsrs	r3, r3, #31
 8017cfc:	f003 0301 	and.w	r3, r3, #1
 8017d00:	b2db      	uxtb	r3, r3
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d007      	beq.n	8017d16 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017d06:	4b1a      	ldr	r3, [pc, #104]	; (8017d70 <sys_timeout_abs+0xd8>)
 8017d08:	681a      	ldr	r2, [r3, #0]
 8017d0a:	693b      	ldr	r3, [r7, #16]
 8017d0c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017d0e:	4a18      	ldr	r2, [pc, #96]	; (8017d70 <sys_timeout_abs+0xd8>)
 8017d10:	693b      	ldr	r3, [r7, #16]
 8017d12:	6013      	str	r3, [r2, #0]
 8017d14:	e023      	b.n	8017d5e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017d16:	4b16      	ldr	r3, [pc, #88]	; (8017d70 <sys_timeout_abs+0xd8>)
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	617b      	str	r3, [r7, #20]
 8017d1c:	e01a      	b.n	8017d54 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017d1e:	697b      	ldr	r3, [r7, #20]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d00b      	beq.n	8017d3e <sys_timeout_abs+0xa6>
 8017d26:	693b      	ldr	r3, [r7, #16]
 8017d28:	685a      	ldr	r2, [r3, #4]
 8017d2a:	697b      	ldr	r3, [r7, #20]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	685b      	ldr	r3, [r3, #4]
 8017d30:	1ad3      	subs	r3, r2, r3
 8017d32:	0fdb      	lsrs	r3, r3, #31
 8017d34:	f003 0301 	and.w	r3, r3, #1
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d007      	beq.n	8017d4e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017d3e:	697b      	ldr	r3, [r7, #20]
 8017d40:	681a      	ldr	r2, [r3, #0]
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017d46:	697b      	ldr	r3, [r7, #20]
 8017d48:	693a      	ldr	r2, [r7, #16]
 8017d4a:	601a      	str	r2, [r3, #0]
        break;
 8017d4c:	e007      	b.n	8017d5e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017d4e:	697b      	ldr	r3, [r7, #20]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	617b      	str	r3, [r7, #20]
 8017d54:	697b      	ldr	r3, [r7, #20]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d1e1      	bne.n	8017d1e <sys_timeout_abs+0x86>
 8017d5a:	e000      	b.n	8017d5e <sys_timeout_abs+0xc6>
    return;
 8017d5c:	bf00      	nop
      }
    }
  }
}
 8017d5e:	3718      	adds	r7, #24
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	08020294 	.word	0x08020294
 8017d68:	080202c8 	.word	0x080202c8
 8017d6c:	08020308 	.word	0x08020308
 8017d70:	2000720c 	.word	0x2000720c

08017d74 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b086      	sub	sp, #24
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017d80:	697b      	ldr	r3, [r7, #20]
 8017d82:	685b      	ldr	r3, [r3, #4]
 8017d84:	4798      	blx	r3

  now = sys_now();
 8017d86:	f7f7 fe35 	bl	800f9f4 <sys_now>
 8017d8a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017d8c:	697b      	ldr	r3, [r7, #20]
 8017d8e:	681a      	ldr	r2, [r3, #0]
 8017d90:	4b0f      	ldr	r3, [pc, #60]	; (8017dd0 <lwip_cyclic_timer+0x5c>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	4413      	add	r3, r2
 8017d96:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017d98:	68fa      	ldr	r2, [r7, #12]
 8017d9a:	693b      	ldr	r3, [r7, #16]
 8017d9c:	1ad3      	subs	r3, r2, r3
 8017d9e:	0fdb      	lsrs	r3, r3, #31
 8017da0:	f003 0301 	and.w	r3, r3, #1
 8017da4:	b2db      	uxtb	r3, r3
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d009      	beq.n	8017dbe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017daa:	697b      	ldr	r3, [r7, #20]
 8017dac:	681a      	ldr	r2, [r3, #0]
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	4413      	add	r3, r2
 8017db2:	687a      	ldr	r2, [r7, #4]
 8017db4:	4907      	ldr	r1, [pc, #28]	; (8017dd4 <lwip_cyclic_timer+0x60>)
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7ff ff6e 	bl	8017c98 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017dbc:	e004      	b.n	8017dc8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017dbe:	687a      	ldr	r2, [r7, #4]
 8017dc0:	4904      	ldr	r1, [pc, #16]	; (8017dd4 <lwip_cyclic_timer+0x60>)
 8017dc2:	68f8      	ldr	r0, [r7, #12]
 8017dc4:	f7ff ff68 	bl	8017c98 <sys_timeout_abs>
}
 8017dc8:	bf00      	nop
 8017dca:	3718      	adds	r7, #24
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	bd80      	pop	{r7, pc}
 8017dd0:	20007210 	.word	0x20007210
 8017dd4:	08017d75 	.word	0x08017d75

08017dd8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b082      	sub	sp, #8
 8017ddc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017dde:	2301      	movs	r3, #1
 8017de0:	607b      	str	r3, [r7, #4]
 8017de2:	e00e      	b.n	8017e02 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017de4:	4a0b      	ldr	r2, [pc, #44]	; (8017e14 <sys_timeouts_init+0x3c>)
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	00db      	lsls	r3, r3, #3
 8017df0:	4a08      	ldr	r2, [pc, #32]	; (8017e14 <sys_timeouts_init+0x3c>)
 8017df2:	4413      	add	r3, r2
 8017df4:	461a      	mov	r2, r3
 8017df6:	4908      	ldr	r1, [pc, #32]	; (8017e18 <sys_timeouts_init+0x40>)
 8017df8:	f000 f810 	bl	8017e1c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	3301      	adds	r3, #1
 8017e00:	607b      	str	r3, [r7, #4]
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	2b02      	cmp	r3, #2
 8017e06:	d9ed      	bls.n	8017de4 <sys_timeouts_init+0xc>
  }
}
 8017e08:	bf00      	nop
 8017e0a:	bf00      	nop
 8017e0c:	3708      	adds	r7, #8
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}
 8017e12:	bf00      	nop
 8017e14:	08020ec4 	.word	0x08020ec4
 8017e18:	08017d75 	.word	0x08017d75

08017e1c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b086      	sub	sp, #24
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	60f8      	str	r0, [r7, #12]
 8017e24:	60b9      	str	r1, [r7, #8]
 8017e26:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017e2e:	d306      	bcc.n	8017e3e <sys_timeout+0x22>
 8017e30:	4b0a      	ldr	r3, [pc, #40]	; (8017e5c <sys_timeout+0x40>)
 8017e32:	f240 1229 	movw	r2, #297	; 0x129
 8017e36:	490a      	ldr	r1, [pc, #40]	; (8017e60 <sys_timeout+0x44>)
 8017e38:	480a      	ldr	r0, [pc, #40]	; (8017e64 <sys_timeout+0x48>)
 8017e3a:	f003 fa39 	bl	801b2b0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017e3e:	f7f7 fdd9 	bl	800f9f4 <sys_now>
 8017e42:	4602      	mov	r2, r0
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	4413      	add	r3, r2
 8017e48:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017e4a:	687a      	ldr	r2, [r7, #4]
 8017e4c:	68b9      	ldr	r1, [r7, #8]
 8017e4e:	6978      	ldr	r0, [r7, #20]
 8017e50:	f7ff ff22 	bl	8017c98 <sys_timeout_abs>
#endif
}
 8017e54:	bf00      	nop
 8017e56:	3718      	adds	r7, #24
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	bd80      	pop	{r7, pc}
 8017e5c:	08020294 	.word	0x08020294
 8017e60:	08020330 	.word	0x08020330
 8017e64:	08020308 	.word	0x08020308

08017e68 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b084      	sub	sp, #16
 8017e6c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017e6e:	f7f7 fdc1 	bl	800f9f4 <sys_now>
 8017e72:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8017e74:	4b1a      	ldr	r3, [pc, #104]	; (8017ee0 <sys_check_timeouts+0x78>)
 8017e76:	781b      	ldrb	r3, [r3, #0]
 8017e78:	b2db      	uxtb	r3, r3
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d001      	beq.n	8017e82 <sys_check_timeouts+0x1a>
 8017e7e:	f7f9 f8cb 	bl	8011018 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8017e82:	4b18      	ldr	r3, [pc, #96]	; (8017ee4 <sys_check_timeouts+0x7c>)
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017e88:	68bb      	ldr	r3, [r7, #8]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d022      	beq.n	8017ed4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017e8e:	68bb      	ldr	r3, [r7, #8]
 8017e90:	685b      	ldr	r3, [r3, #4]
 8017e92:	68fa      	ldr	r2, [r7, #12]
 8017e94:	1ad3      	subs	r3, r2, r3
 8017e96:	0fdb      	lsrs	r3, r3, #31
 8017e98:	f003 0301 	and.w	r3, r3, #1
 8017e9c:	b2db      	uxtb	r3, r3
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d11a      	bne.n	8017ed8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017ea2:	68bb      	ldr	r3, [r7, #8]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	4a0f      	ldr	r2, [pc, #60]	; (8017ee4 <sys_check_timeouts+0x7c>)
 8017ea8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	689b      	ldr	r3, [r3, #8]
 8017eae:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	68db      	ldr	r3, [r3, #12]
 8017eb4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	685b      	ldr	r3, [r3, #4]
 8017eba:	4a0b      	ldr	r2, [pc, #44]	; (8017ee8 <sys_check_timeouts+0x80>)
 8017ebc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017ebe:	68b9      	ldr	r1, [r7, #8]
 8017ec0:	2006      	movs	r0, #6
 8017ec2:	f7f8 fd6d 	bl	80109a0 <memp_free>
    if (handler != NULL) {
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d0d3      	beq.n	8017e74 <sys_check_timeouts+0xc>
      handler(arg);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	6838      	ldr	r0, [r7, #0]
 8017ed0:	4798      	blx	r3
  do {
 8017ed2:	e7cf      	b.n	8017e74 <sys_check_timeouts+0xc>
      return;
 8017ed4:	bf00      	nop
 8017ed6:	e000      	b.n	8017eda <sys_check_timeouts+0x72>
      return;
 8017ed8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017eda:	3710      	adds	r7, #16
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bd80      	pop	{r7, pc}
 8017ee0:	200071b9 	.word	0x200071b9
 8017ee4:	2000720c 	.word	0x2000720c
 8017ee8:	20007210 	.word	0x20007210

08017eec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017ef0:	f002 fca2 	bl	801a838 <rand>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	b29b      	uxth	r3, r3
 8017ef8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017efc:	b29b      	uxth	r3, r3
 8017efe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017f02:	b29a      	uxth	r2, r3
 8017f04:	4b01      	ldr	r3, [pc, #4]	; (8017f0c <udp_init+0x20>)
 8017f06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017f08:	bf00      	nop
 8017f0a:	bd80      	pop	{r7, pc}
 8017f0c:	20000180 	.word	0x20000180

08017f10 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b084      	sub	sp, #16
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	60f8      	str	r0, [r7, #12]
 8017f18:	60b9      	str	r1, [r7, #8]
 8017f1a:	4613      	mov	r3, r2
 8017f1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d105      	bne.n	8017f30 <udp_input_local_match+0x20>
 8017f24:	4b27      	ldr	r3, [pc, #156]	; (8017fc4 <udp_input_local_match+0xb4>)
 8017f26:	2287      	movs	r2, #135	; 0x87
 8017f28:	4927      	ldr	r1, [pc, #156]	; (8017fc8 <udp_input_local_match+0xb8>)
 8017f2a:	4828      	ldr	r0, [pc, #160]	; (8017fcc <udp_input_local_match+0xbc>)
 8017f2c:	f003 f9c0 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d105      	bne.n	8017f42 <udp_input_local_match+0x32>
 8017f36:	4b23      	ldr	r3, [pc, #140]	; (8017fc4 <udp_input_local_match+0xb4>)
 8017f38:	2288      	movs	r2, #136	; 0x88
 8017f3a:	4925      	ldr	r1, [pc, #148]	; (8017fd0 <udp_input_local_match+0xc0>)
 8017f3c:	4823      	ldr	r0, [pc, #140]	; (8017fcc <udp_input_local_match+0xbc>)
 8017f3e:	f003 f9b7 	bl	801b2b0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	7a1b      	ldrb	r3, [r3, #8]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d00b      	beq.n	8017f62 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	7a1a      	ldrb	r2, [r3, #8]
 8017f4e:	4b21      	ldr	r3, [pc, #132]	; (8017fd4 <udp_input_local_match+0xc4>)
 8017f50:	685b      	ldr	r3, [r3, #4]
 8017f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f56:	3301      	adds	r3, #1
 8017f58:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	d001      	beq.n	8017f62 <udp_input_local_match+0x52>
    return 0;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	e02b      	b.n	8017fba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017f62:	79fb      	ldrb	r3, [r7, #7]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d018      	beq.n	8017f9a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d013      	beq.n	8017f96 <udp_input_local_match+0x86>
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d00f      	beq.n	8017f96 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017f76:	4b17      	ldr	r3, [pc, #92]	; (8017fd4 <udp_input_local_match+0xc4>)
 8017f78:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f7e:	d00a      	beq.n	8017f96 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	681a      	ldr	r2, [r3, #0]
 8017f84:	4b13      	ldr	r3, [pc, #76]	; (8017fd4 <udp_input_local_match+0xc4>)
 8017f86:	695b      	ldr	r3, [r3, #20]
 8017f88:	405a      	eors	r2, r3
 8017f8a:	68bb      	ldr	r3, [r7, #8]
 8017f8c:	3308      	adds	r3, #8
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d110      	bne.n	8017fb8 <udp_input_local_match+0xa8>
          return 1;
 8017f96:	2301      	movs	r3, #1
 8017f98:	e00f      	b.n	8017fba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d009      	beq.n	8017fb4 <udp_input_local_match+0xa4>
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d005      	beq.n	8017fb4 <udp_input_local_match+0xa4>
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	681a      	ldr	r2, [r3, #0]
 8017fac:	4b09      	ldr	r3, [pc, #36]	; (8017fd4 <udp_input_local_match+0xc4>)
 8017fae:	695b      	ldr	r3, [r3, #20]
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d101      	bne.n	8017fb8 <udp_input_local_match+0xa8>
        return 1;
 8017fb4:	2301      	movs	r3, #1
 8017fb6:	e000      	b.n	8017fba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017fb8:	2300      	movs	r3, #0
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3710      	adds	r7, #16
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	0802037c 	.word	0x0802037c
 8017fc8:	080203ac 	.word	0x080203ac
 8017fcc:	080203d0 	.word	0x080203d0
 8017fd0:	080203f8 	.word	0x080203f8
 8017fd4:	200008e0 	.word	0x200008e0

08017fd8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017fd8:	b590      	push	{r4, r7, lr}
 8017fda:	b08d      	sub	sp, #52	; 0x34
 8017fdc:	af02      	add	r7, sp, #8
 8017fde:	6078      	str	r0, [r7, #4]
 8017fe0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d105      	bne.n	8017ff8 <udp_input+0x20>
 8017fec:	4b7c      	ldr	r3, [pc, #496]	; (80181e0 <udp_input+0x208>)
 8017fee:	22cf      	movs	r2, #207	; 0xcf
 8017ff0:	497c      	ldr	r1, [pc, #496]	; (80181e4 <udp_input+0x20c>)
 8017ff2:	487d      	ldr	r0, [pc, #500]	; (80181e8 <udp_input+0x210>)
 8017ff4:	f003 f95c 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017ff8:	683b      	ldr	r3, [r7, #0]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d105      	bne.n	801800a <udp_input+0x32>
 8017ffe:	4b78      	ldr	r3, [pc, #480]	; (80181e0 <udp_input+0x208>)
 8018000:	22d0      	movs	r2, #208	; 0xd0
 8018002:	497a      	ldr	r1, [pc, #488]	; (80181ec <udp_input+0x214>)
 8018004:	4878      	ldr	r0, [pc, #480]	; (80181e8 <udp_input+0x210>)
 8018006:	f003 f953 	bl	801b2b0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	895b      	ldrh	r3, [r3, #10]
 801800e:	2b07      	cmp	r3, #7
 8018010:	d803      	bhi.n	801801a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018012:	6878      	ldr	r0, [r7, #4]
 8018014:	f7f9 fb3a 	bl	801168c <pbuf_free>
    goto end;
 8018018:	e0de      	b.n	80181d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	685b      	ldr	r3, [r3, #4]
 801801e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018020:	4b73      	ldr	r3, [pc, #460]	; (80181f0 <udp_input+0x218>)
 8018022:	695b      	ldr	r3, [r3, #20]
 8018024:	4a72      	ldr	r2, [pc, #456]	; (80181f0 <udp_input+0x218>)
 8018026:	6812      	ldr	r2, [r2, #0]
 8018028:	4611      	mov	r1, r2
 801802a:	4618      	mov	r0, r3
 801802c:	f001 fcae 	bl	801998c <ip4_addr_isbroadcast_u32>
 8018030:	4603      	mov	r3, r0
 8018032:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018034:	697b      	ldr	r3, [r7, #20]
 8018036:	881b      	ldrh	r3, [r3, #0]
 8018038:	b29b      	uxth	r3, r3
 801803a:	4618      	mov	r0, r3
 801803c:	f7f7 ff22 	bl	800fe84 <lwip_htons>
 8018040:	4603      	mov	r3, r0
 8018042:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018044:	697b      	ldr	r3, [r7, #20]
 8018046:	885b      	ldrh	r3, [r3, #2]
 8018048:	b29b      	uxth	r3, r3
 801804a:	4618      	mov	r0, r3
 801804c:	f7f7 ff1a 	bl	800fe84 <lwip_htons>
 8018050:	4603      	mov	r3, r0
 8018052:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018054:	2300      	movs	r3, #0
 8018056:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8018058:	2300      	movs	r3, #0
 801805a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801805c:	2300      	movs	r3, #0
 801805e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018060:	4b64      	ldr	r3, [pc, #400]	; (80181f4 <udp_input+0x21c>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	627b      	str	r3, [r7, #36]	; 0x24
 8018066:	e054      	b.n	8018112 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806a:	8a5b      	ldrh	r3, [r3, #18]
 801806c:	89fa      	ldrh	r2, [r7, #14]
 801806e:	429a      	cmp	r2, r3
 8018070:	d14a      	bne.n	8018108 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018072:	7cfb      	ldrb	r3, [r7, #19]
 8018074:	461a      	mov	r2, r3
 8018076:	6839      	ldr	r1, [r7, #0]
 8018078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801807a:	f7ff ff49 	bl	8017f10 <udp_input_local_match>
 801807e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018080:	2b00      	cmp	r3, #0
 8018082:	d041      	beq.n	8018108 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018086:	7c1b      	ldrb	r3, [r3, #16]
 8018088:	f003 0304 	and.w	r3, r3, #4
 801808c:	2b00      	cmp	r3, #0
 801808e:	d11d      	bne.n	80180cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018090:	69fb      	ldr	r3, [r7, #28]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d102      	bne.n	801809c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018098:	61fb      	str	r3, [r7, #28]
 801809a:	e017      	b.n	80180cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801809c:	7cfb      	ldrb	r3, [r7, #19]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d014      	beq.n	80180cc <udp_input+0xf4>
 80180a2:	4b53      	ldr	r3, [pc, #332]	; (80181f0 <udp_input+0x218>)
 80180a4:	695b      	ldr	r3, [r3, #20]
 80180a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180aa:	d10f      	bne.n	80180cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80180ac:	69fb      	ldr	r3, [r7, #28]
 80180ae:	681a      	ldr	r2, [r3, #0]
 80180b0:	683b      	ldr	r3, [r7, #0]
 80180b2:	3304      	adds	r3, #4
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	429a      	cmp	r2, r3
 80180b8:	d008      	beq.n	80180cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80180ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180bc:	681a      	ldr	r2, [r3, #0]
 80180be:	683b      	ldr	r3, [r7, #0]
 80180c0:	3304      	adds	r3, #4
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	429a      	cmp	r2, r3
 80180c6:	d101      	bne.n	80180cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80180c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80180cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ce:	8a9b      	ldrh	r3, [r3, #20]
 80180d0:	8a3a      	ldrh	r2, [r7, #16]
 80180d2:	429a      	cmp	r2, r3
 80180d4:	d118      	bne.n	8018108 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80180d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d005      	beq.n	80180ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80180de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e0:	685a      	ldr	r2, [r3, #4]
 80180e2:	4b43      	ldr	r3, [pc, #268]	; (80181f0 <udp_input+0x218>)
 80180e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80180e6:	429a      	cmp	r2, r3
 80180e8:	d10e      	bne.n	8018108 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80180ea:	6a3b      	ldr	r3, [r7, #32]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d014      	beq.n	801811a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80180f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f2:	68da      	ldr	r2, [r3, #12]
 80180f4:	6a3b      	ldr	r3, [r7, #32]
 80180f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80180f8:	4b3e      	ldr	r3, [pc, #248]	; (80181f4 <udp_input+0x21c>)
 80180fa:	681a      	ldr	r2, [r3, #0]
 80180fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018100:	4a3c      	ldr	r2, [pc, #240]	; (80181f4 <udp_input+0x21c>)
 8018102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018104:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018106:	e008      	b.n	801811a <udp_input+0x142>
      }
    }

    prev = pcb;
 8018108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801810a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801810e:	68db      	ldr	r3, [r3, #12]
 8018110:	627b      	str	r3, [r7, #36]	; 0x24
 8018112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018114:	2b00      	cmp	r3, #0
 8018116:	d1a7      	bne.n	8018068 <udp_input+0x90>
 8018118:	e000      	b.n	801811c <udp_input+0x144>
        break;
 801811a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801811e:	2b00      	cmp	r3, #0
 8018120:	d101      	bne.n	8018126 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018122:	69fb      	ldr	r3, [r7, #28]
 8018124:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018128:	2b00      	cmp	r3, #0
 801812a:	d002      	beq.n	8018132 <udp_input+0x15a>
    for_us = 1;
 801812c:	2301      	movs	r3, #1
 801812e:	76fb      	strb	r3, [r7, #27]
 8018130:	e00a      	b.n	8018148 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	3304      	adds	r3, #4
 8018136:	681a      	ldr	r2, [r3, #0]
 8018138:	4b2d      	ldr	r3, [pc, #180]	; (80181f0 <udp_input+0x218>)
 801813a:	695b      	ldr	r3, [r3, #20]
 801813c:	429a      	cmp	r2, r3
 801813e:	bf0c      	ite	eq
 8018140:	2301      	moveq	r3, #1
 8018142:	2300      	movne	r3, #0
 8018144:	b2db      	uxtb	r3, r3
 8018146:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018148:	7efb      	ldrb	r3, [r7, #27]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d041      	beq.n	80181d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801814e:	2108      	movs	r1, #8
 8018150:	6878      	ldr	r0, [r7, #4]
 8018152:	f7f9 fa15 	bl	8011580 <pbuf_remove_header>
 8018156:	4603      	mov	r3, r0
 8018158:	2b00      	cmp	r3, #0
 801815a:	d00a      	beq.n	8018172 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801815c:	4b20      	ldr	r3, [pc, #128]	; (80181e0 <udp_input+0x208>)
 801815e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018162:	4925      	ldr	r1, [pc, #148]	; (80181f8 <udp_input+0x220>)
 8018164:	4820      	ldr	r0, [pc, #128]	; (80181e8 <udp_input+0x210>)
 8018166:	f003 f8a3 	bl	801b2b0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801816a:	6878      	ldr	r0, [r7, #4]
 801816c:	f7f9 fa8e 	bl	801168c <pbuf_free>
      goto end;
 8018170:	e032      	b.n	80181d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018174:	2b00      	cmp	r3, #0
 8018176:	d012      	beq.n	801819e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801817a:	699b      	ldr	r3, [r3, #24]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d00a      	beq.n	8018196 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018182:	699c      	ldr	r4, [r3, #24]
 8018184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018186:	69d8      	ldr	r0, [r3, #28]
 8018188:	8a3b      	ldrh	r3, [r7, #16]
 801818a:	9300      	str	r3, [sp, #0]
 801818c:	4b1b      	ldr	r3, [pc, #108]	; (80181fc <udp_input+0x224>)
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018192:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018194:	e021      	b.n	80181da <udp_input+0x202>
        pbuf_free(p);
 8018196:	6878      	ldr	r0, [r7, #4]
 8018198:	f7f9 fa78 	bl	801168c <pbuf_free>
        goto end;
 801819c:	e01c      	b.n	80181d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801819e:	7cfb      	ldrb	r3, [r7, #19]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d112      	bne.n	80181ca <udp_input+0x1f2>
 80181a4:	4b12      	ldr	r3, [pc, #72]	; (80181f0 <udp_input+0x218>)
 80181a6:	695b      	ldr	r3, [r3, #20]
 80181a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80181ac:	2be0      	cmp	r3, #224	; 0xe0
 80181ae:	d00c      	beq.n	80181ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80181b0:	4b0f      	ldr	r3, [pc, #60]	; (80181f0 <udp_input+0x218>)
 80181b2:	899b      	ldrh	r3, [r3, #12]
 80181b4:	3308      	adds	r3, #8
 80181b6:	b29b      	uxth	r3, r3
 80181b8:	b21b      	sxth	r3, r3
 80181ba:	4619      	mov	r1, r3
 80181bc:	6878      	ldr	r0, [r7, #4]
 80181be:	f7f9 fa52 	bl	8011666 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80181c2:	2103      	movs	r1, #3
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	f001 f8b7 	bl	8019338 <icmp_dest_unreach>
      pbuf_free(p);
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f7f9 fa5e 	bl	801168c <pbuf_free>
  return;
 80181d0:	e003      	b.n	80181da <udp_input+0x202>
    pbuf_free(p);
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f7f9 fa5a 	bl	801168c <pbuf_free>
  return;
 80181d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80181da:	372c      	adds	r7, #44	; 0x2c
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd90      	pop	{r4, r7, pc}
 80181e0:	0802037c 	.word	0x0802037c
 80181e4:	08020420 	.word	0x08020420
 80181e8:	080203d0 	.word	0x080203d0
 80181ec:	08020438 	.word	0x08020438
 80181f0:	200008e0 	.word	0x200008e0
 80181f4:	20007218 	.word	0x20007218
 80181f8:	08020454 	.word	0x08020454
 80181fc:	200008f0 	.word	0x200008f0

08018200 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018200:	b480      	push	{r7}
 8018202:	b085      	sub	sp, #20
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
 8018208:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d01e      	beq.n	801824e <udp_netif_ip_addr_changed+0x4e>
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d01a      	beq.n	801824e <udp_netif_ip_addr_changed+0x4e>
 8018218:	683b      	ldr	r3, [r7, #0]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d017      	beq.n	801824e <udp_netif_ip_addr_changed+0x4e>
 801821e:	683b      	ldr	r3, [r7, #0]
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d013      	beq.n	801824e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018226:	4b0d      	ldr	r3, [pc, #52]	; (801825c <udp_netif_ip_addr_changed+0x5c>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	60fb      	str	r3, [r7, #12]
 801822c:	e00c      	b.n	8018248 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	681a      	ldr	r2, [r3, #0]
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	429a      	cmp	r2, r3
 8018238:	d103      	bne.n	8018242 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801823a:	683b      	ldr	r3, [r7, #0]
 801823c:	681a      	ldr	r2, [r3, #0]
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	68db      	ldr	r3, [r3, #12]
 8018246:	60fb      	str	r3, [r7, #12]
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d1ef      	bne.n	801822e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801824e:	bf00      	nop
 8018250:	3714      	adds	r7, #20
 8018252:	46bd      	mov	sp, r7
 8018254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018258:	4770      	bx	lr
 801825a:	bf00      	nop
 801825c:	20007218 	.word	0x20007218

08018260 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b082      	sub	sp, #8
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018268:	4915      	ldr	r1, [pc, #84]	; (80182c0 <etharp_free_entry+0x60>)
 801826a:	687a      	ldr	r2, [r7, #4]
 801826c:	4613      	mov	r3, r2
 801826e:	005b      	lsls	r3, r3, #1
 8018270:	4413      	add	r3, r2
 8018272:	00db      	lsls	r3, r3, #3
 8018274:	440b      	add	r3, r1
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d013      	beq.n	80182a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801827c:	4910      	ldr	r1, [pc, #64]	; (80182c0 <etharp_free_entry+0x60>)
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	4613      	mov	r3, r2
 8018282:	005b      	lsls	r3, r3, #1
 8018284:	4413      	add	r3, r2
 8018286:	00db      	lsls	r3, r3, #3
 8018288:	440b      	add	r3, r1
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	4618      	mov	r0, r3
 801828e:	f7f9 f9fd 	bl	801168c <pbuf_free>
    arp_table[i].q = NULL;
 8018292:	490b      	ldr	r1, [pc, #44]	; (80182c0 <etharp_free_entry+0x60>)
 8018294:	687a      	ldr	r2, [r7, #4]
 8018296:	4613      	mov	r3, r2
 8018298:	005b      	lsls	r3, r3, #1
 801829a:	4413      	add	r3, r2
 801829c:	00db      	lsls	r3, r3, #3
 801829e:	440b      	add	r3, r1
 80182a0:	2200      	movs	r2, #0
 80182a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80182a4:	4906      	ldr	r1, [pc, #24]	; (80182c0 <etharp_free_entry+0x60>)
 80182a6:	687a      	ldr	r2, [r7, #4]
 80182a8:	4613      	mov	r3, r2
 80182aa:	005b      	lsls	r3, r3, #1
 80182ac:	4413      	add	r3, r2
 80182ae:	00db      	lsls	r3, r3, #3
 80182b0:	440b      	add	r3, r1
 80182b2:	3314      	adds	r3, #20
 80182b4:	2200      	movs	r2, #0
 80182b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80182b8:	bf00      	nop
 80182ba:	3708      	adds	r7, #8
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}
 80182c0:	2000721c 	.word	0x2000721c

080182c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b082      	sub	sp, #8
 80182c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80182ca:	2300      	movs	r3, #0
 80182cc:	607b      	str	r3, [r7, #4]
 80182ce:	e096      	b.n	80183fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80182d0:	494f      	ldr	r1, [pc, #316]	; (8018410 <etharp_tmr+0x14c>)
 80182d2:	687a      	ldr	r2, [r7, #4]
 80182d4:	4613      	mov	r3, r2
 80182d6:	005b      	lsls	r3, r3, #1
 80182d8:	4413      	add	r3, r2
 80182da:	00db      	lsls	r3, r3, #3
 80182dc:	440b      	add	r3, r1
 80182de:	3314      	adds	r3, #20
 80182e0:	781b      	ldrb	r3, [r3, #0]
 80182e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80182e4:	78fb      	ldrb	r3, [r7, #3]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	f000 8086 	beq.w	80183f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80182ec:	4948      	ldr	r1, [pc, #288]	; (8018410 <etharp_tmr+0x14c>)
 80182ee:	687a      	ldr	r2, [r7, #4]
 80182f0:	4613      	mov	r3, r2
 80182f2:	005b      	lsls	r3, r3, #1
 80182f4:	4413      	add	r3, r2
 80182f6:	00db      	lsls	r3, r3, #3
 80182f8:	440b      	add	r3, r1
 80182fa:	3312      	adds	r3, #18
 80182fc:	881b      	ldrh	r3, [r3, #0]
 80182fe:	3301      	adds	r3, #1
 8018300:	b298      	uxth	r0, r3
 8018302:	4943      	ldr	r1, [pc, #268]	; (8018410 <etharp_tmr+0x14c>)
 8018304:	687a      	ldr	r2, [r7, #4]
 8018306:	4613      	mov	r3, r2
 8018308:	005b      	lsls	r3, r3, #1
 801830a:	4413      	add	r3, r2
 801830c:	00db      	lsls	r3, r3, #3
 801830e:	440b      	add	r3, r1
 8018310:	3312      	adds	r3, #18
 8018312:	4602      	mov	r2, r0
 8018314:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018316:	493e      	ldr	r1, [pc, #248]	; (8018410 <etharp_tmr+0x14c>)
 8018318:	687a      	ldr	r2, [r7, #4]
 801831a:	4613      	mov	r3, r2
 801831c:	005b      	lsls	r3, r3, #1
 801831e:	4413      	add	r3, r2
 8018320:	00db      	lsls	r3, r3, #3
 8018322:	440b      	add	r3, r1
 8018324:	3312      	adds	r3, #18
 8018326:	881b      	ldrh	r3, [r3, #0]
 8018328:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801832c:	d215      	bcs.n	801835a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801832e:	4938      	ldr	r1, [pc, #224]	; (8018410 <etharp_tmr+0x14c>)
 8018330:	687a      	ldr	r2, [r7, #4]
 8018332:	4613      	mov	r3, r2
 8018334:	005b      	lsls	r3, r3, #1
 8018336:	4413      	add	r3, r2
 8018338:	00db      	lsls	r3, r3, #3
 801833a:	440b      	add	r3, r1
 801833c:	3314      	adds	r3, #20
 801833e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018340:	2b01      	cmp	r3, #1
 8018342:	d10e      	bne.n	8018362 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018344:	4932      	ldr	r1, [pc, #200]	; (8018410 <etharp_tmr+0x14c>)
 8018346:	687a      	ldr	r2, [r7, #4]
 8018348:	4613      	mov	r3, r2
 801834a:	005b      	lsls	r3, r3, #1
 801834c:	4413      	add	r3, r2
 801834e:	00db      	lsls	r3, r3, #3
 8018350:	440b      	add	r3, r1
 8018352:	3312      	adds	r3, #18
 8018354:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018356:	2b04      	cmp	r3, #4
 8018358:	d903      	bls.n	8018362 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801835a:	6878      	ldr	r0, [r7, #4]
 801835c:	f7ff ff80 	bl	8018260 <etharp_free_entry>
 8018360:	e04a      	b.n	80183f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018362:	492b      	ldr	r1, [pc, #172]	; (8018410 <etharp_tmr+0x14c>)
 8018364:	687a      	ldr	r2, [r7, #4]
 8018366:	4613      	mov	r3, r2
 8018368:	005b      	lsls	r3, r3, #1
 801836a:	4413      	add	r3, r2
 801836c:	00db      	lsls	r3, r3, #3
 801836e:	440b      	add	r3, r1
 8018370:	3314      	adds	r3, #20
 8018372:	781b      	ldrb	r3, [r3, #0]
 8018374:	2b03      	cmp	r3, #3
 8018376:	d10a      	bne.n	801838e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018378:	4925      	ldr	r1, [pc, #148]	; (8018410 <etharp_tmr+0x14c>)
 801837a:	687a      	ldr	r2, [r7, #4]
 801837c:	4613      	mov	r3, r2
 801837e:	005b      	lsls	r3, r3, #1
 8018380:	4413      	add	r3, r2
 8018382:	00db      	lsls	r3, r3, #3
 8018384:	440b      	add	r3, r1
 8018386:	3314      	adds	r3, #20
 8018388:	2204      	movs	r2, #4
 801838a:	701a      	strb	r2, [r3, #0]
 801838c:	e034      	b.n	80183f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801838e:	4920      	ldr	r1, [pc, #128]	; (8018410 <etharp_tmr+0x14c>)
 8018390:	687a      	ldr	r2, [r7, #4]
 8018392:	4613      	mov	r3, r2
 8018394:	005b      	lsls	r3, r3, #1
 8018396:	4413      	add	r3, r2
 8018398:	00db      	lsls	r3, r3, #3
 801839a:	440b      	add	r3, r1
 801839c:	3314      	adds	r3, #20
 801839e:	781b      	ldrb	r3, [r3, #0]
 80183a0:	2b04      	cmp	r3, #4
 80183a2:	d10a      	bne.n	80183ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80183a4:	491a      	ldr	r1, [pc, #104]	; (8018410 <etharp_tmr+0x14c>)
 80183a6:	687a      	ldr	r2, [r7, #4]
 80183a8:	4613      	mov	r3, r2
 80183aa:	005b      	lsls	r3, r3, #1
 80183ac:	4413      	add	r3, r2
 80183ae:	00db      	lsls	r3, r3, #3
 80183b0:	440b      	add	r3, r1
 80183b2:	3314      	adds	r3, #20
 80183b4:	2202      	movs	r2, #2
 80183b6:	701a      	strb	r2, [r3, #0]
 80183b8:	e01e      	b.n	80183f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80183ba:	4915      	ldr	r1, [pc, #84]	; (8018410 <etharp_tmr+0x14c>)
 80183bc:	687a      	ldr	r2, [r7, #4]
 80183be:	4613      	mov	r3, r2
 80183c0:	005b      	lsls	r3, r3, #1
 80183c2:	4413      	add	r3, r2
 80183c4:	00db      	lsls	r3, r3, #3
 80183c6:	440b      	add	r3, r1
 80183c8:	3314      	adds	r3, #20
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	2b01      	cmp	r3, #1
 80183ce:	d113      	bne.n	80183f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80183d0:	490f      	ldr	r1, [pc, #60]	; (8018410 <etharp_tmr+0x14c>)
 80183d2:	687a      	ldr	r2, [r7, #4]
 80183d4:	4613      	mov	r3, r2
 80183d6:	005b      	lsls	r3, r3, #1
 80183d8:	4413      	add	r3, r2
 80183da:	00db      	lsls	r3, r3, #3
 80183dc:	440b      	add	r3, r1
 80183de:	3308      	adds	r3, #8
 80183e0:	6818      	ldr	r0, [r3, #0]
 80183e2:	687a      	ldr	r2, [r7, #4]
 80183e4:	4613      	mov	r3, r2
 80183e6:	005b      	lsls	r3, r3, #1
 80183e8:	4413      	add	r3, r2
 80183ea:	00db      	lsls	r3, r3, #3
 80183ec:	4a08      	ldr	r2, [pc, #32]	; (8018410 <etharp_tmr+0x14c>)
 80183ee:	4413      	add	r3, r2
 80183f0:	3304      	adds	r3, #4
 80183f2:	4619      	mov	r1, r3
 80183f4:	f000 fe6e 	bl	80190d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	3301      	adds	r3, #1
 80183fc:	607b      	str	r3, [r7, #4]
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	2b09      	cmp	r3, #9
 8018402:	f77f af65 	ble.w	80182d0 <etharp_tmr+0xc>
      }
    }
  }
}
 8018406:	bf00      	nop
 8018408:	bf00      	nop
 801840a:	3708      	adds	r7, #8
 801840c:	46bd      	mov	sp, r7
 801840e:	bd80      	pop	{r7, pc}
 8018410:	2000721c 	.word	0x2000721c

08018414 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b08a      	sub	sp, #40	; 0x28
 8018418:	af00      	add	r7, sp, #0
 801841a:	60f8      	str	r0, [r7, #12]
 801841c:	460b      	mov	r3, r1
 801841e:	607a      	str	r2, [r7, #4]
 8018420:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018422:	230a      	movs	r3, #10
 8018424:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018426:	230a      	movs	r3, #10
 8018428:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801842a:	230a      	movs	r3, #10
 801842c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801842e:	2300      	movs	r3, #0
 8018430:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018432:	230a      	movs	r3, #10
 8018434:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018436:	2300      	movs	r3, #0
 8018438:	83bb      	strh	r3, [r7, #28]
 801843a:	2300      	movs	r3, #0
 801843c:	837b      	strh	r3, [r7, #26]
 801843e:	2300      	movs	r3, #0
 8018440:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018442:	2300      	movs	r3, #0
 8018444:	843b      	strh	r3, [r7, #32]
 8018446:	e0ae      	b.n	80185a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018448:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801844c:	49a6      	ldr	r1, [pc, #664]	; (80186e8 <etharp_find_entry+0x2d4>)
 801844e:	4613      	mov	r3, r2
 8018450:	005b      	lsls	r3, r3, #1
 8018452:	4413      	add	r3, r2
 8018454:	00db      	lsls	r3, r3, #3
 8018456:	440b      	add	r3, r1
 8018458:	3314      	adds	r3, #20
 801845a:	781b      	ldrb	r3, [r3, #0]
 801845c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801845e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018462:	2b0a      	cmp	r3, #10
 8018464:	d105      	bne.n	8018472 <etharp_find_entry+0x5e>
 8018466:	7dfb      	ldrb	r3, [r7, #23]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d102      	bne.n	8018472 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801846c:	8c3b      	ldrh	r3, [r7, #32]
 801846e:	847b      	strh	r3, [r7, #34]	; 0x22
 8018470:	e095      	b.n	801859e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018472:	7dfb      	ldrb	r3, [r7, #23]
 8018474:	2b00      	cmp	r3, #0
 8018476:	f000 8092 	beq.w	801859e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801847a:	7dfb      	ldrb	r3, [r7, #23]
 801847c:	2b01      	cmp	r3, #1
 801847e:	d009      	beq.n	8018494 <etharp_find_entry+0x80>
 8018480:	7dfb      	ldrb	r3, [r7, #23]
 8018482:	2b01      	cmp	r3, #1
 8018484:	d806      	bhi.n	8018494 <etharp_find_entry+0x80>
 8018486:	4b99      	ldr	r3, [pc, #612]	; (80186ec <etharp_find_entry+0x2d8>)
 8018488:	f240 1223 	movw	r2, #291	; 0x123
 801848c:	4998      	ldr	r1, [pc, #608]	; (80186f0 <etharp_find_entry+0x2dc>)
 801848e:	4899      	ldr	r0, [pc, #612]	; (80186f4 <etharp_find_entry+0x2e0>)
 8018490:	f002 ff0e 	bl	801b2b0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d020      	beq.n	80184dc <etharp_find_entry+0xc8>
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	6819      	ldr	r1, [r3, #0]
 801849e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184a2:	4891      	ldr	r0, [pc, #580]	; (80186e8 <etharp_find_entry+0x2d4>)
 80184a4:	4613      	mov	r3, r2
 80184a6:	005b      	lsls	r3, r3, #1
 80184a8:	4413      	add	r3, r2
 80184aa:	00db      	lsls	r3, r3, #3
 80184ac:	4403      	add	r3, r0
 80184ae:	3304      	adds	r3, #4
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	4299      	cmp	r1, r3
 80184b4:	d112      	bne.n	80184dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d00c      	beq.n	80184d6 <etharp_find_entry+0xc2>
 80184bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184c0:	4989      	ldr	r1, [pc, #548]	; (80186e8 <etharp_find_entry+0x2d4>)
 80184c2:	4613      	mov	r3, r2
 80184c4:	005b      	lsls	r3, r3, #1
 80184c6:	4413      	add	r3, r2
 80184c8:	00db      	lsls	r3, r3, #3
 80184ca:	440b      	add	r3, r1
 80184cc:	3308      	adds	r3, #8
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	687a      	ldr	r2, [r7, #4]
 80184d2:	429a      	cmp	r2, r3
 80184d4:	d102      	bne.n	80184dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80184d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184da:	e100      	b.n	80186de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80184dc:	7dfb      	ldrb	r3, [r7, #23]
 80184de:	2b01      	cmp	r3, #1
 80184e0:	d140      	bne.n	8018564 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80184e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184e6:	4980      	ldr	r1, [pc, #512]	; (80186e8 <etharp_find_entry+0x2d4>)
 80184e8:	4613      	mov	r3, r2
 80184ea:	005b      	lsls	r3, r3, #1
 80184ec:	4413      	add	r3, r2
 80184ee:	00db      	lsls	r3, r3, #3
 80184f0:	440b      	add	r3, r1
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d01a      	beq.n	801852e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80184f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184fc:	497a      	ldr	r1, [pc, #488]	; (80186e8 <etharp_find_entry+0x2d4>)
 80184fe:	4613      	mov	r3, r2
 8018500:	005b      	lsls	r3, r3, #1
 8018502:	4413      	add	r3, r2
 8018504:	00db      	lsls	r3, r3, #3
 8018506:	440b      	add	r3, r1
 8018508:	3312      	adds	r3, #18
 801850a:	881b      	ldrh	r3, [r3, #0]
 801850c:	8bba      	ldrh	r2, [r7, #28]
 801850e:	429a      	cmp	r2, r3
 8018510:	d845      	bhi.n	801859e <etharp_find_entry+0x18a>
            old_queue = i;
 8018512:	8c3b      	ldrh	r3, [r7, #32]
 8018514:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018516:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801851a:	4973      	ldr	r1, [pc, #460]	; (80186e8 <etharp_find_entry+0x2d4>)
 801851c:	4613      	mov	r3, r2
 801851e:	005b      	lsls	r3, r3, #1
 8018520:	4413      	add	r3, r2
 8018522:	00db      	lsls	r3, r3, #3
 8018524:	440b      	add	r3, r1
 8018526:	3312      	adds	r3, #18
 8018528:	881b      	ldrh	r3, [r3, #0]
 801852a:	83bb      	strh	r3, [r7, #28]
 801852c:	e037      	b.n	801859e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801852e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018532:	496d      	ldr	r1, [pc, #436]	; (80186e8 <etharp_find_entry+0x2d4>)
 8018534:	4613      	mov	r3, r2
 8018536:	005b      	lsls	r3, r3, #1
 8018538:	4413      	add	r3, r2
 801853a:	00db      	lsls	r3, r3, #3
 801853c:	440b      	add	r3, r1
 801853e:	3312      	adds	r3, #18
 8018540:	881b      	ldrh	r3, [r3, #0]
 8018542:	8b7a      	ldrh	r2, [r7, #26]
 8018544:	429a      	cmp	r2, r3
 8018546:	d82a      	bhi.n	801859e <etharp_find_entry+0x18a>
            old_pending = i;
 8018548:	8c3b      	ldrh	r3, [r7, #32]
 801854a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801854c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018550:	4965      	ldr	r1, [pc, #404]	; (80186e8 <etharp_find_entry+0x2d4>)
 8018552:	4613      	mov	r3, r2
 8018554:	005b      	lsls	r3, r3, #1
 8018556:	4413      	add	r3, r2
 8018558:	00db      	lsls	r3, r3, #3
 801855a:	440b      	add	r3, r1
 801855c:	3312      	adds	r3, #18
 801855e:	881b      	ldrh	r3, [r3, #0]
 8018560:	837b      	strh	r3, [r7, #26]
 8018562:	e01c      	b.n	801859e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018564:	7dfb      	ldrb	r3, [r7, #23]
 8018566:	2b01      	cmp	r3, #1
 8018568:	d919      	bls.n	801859e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801856a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801856e:	495e      	ldr	r1, [pc, #376]	; (80186e8 <etharp_find_entry+0x2d4>)
 8018570:	4613      	mov	r3, r2
 8018572:	005b      	lsls	r3, r3, #1
 8018574:	4413      	add	r3, r2
 8018576:	00db      	lsls	r3, r3, #3
 8018578:	440b      	add	r3, r1
 801857a:	3312      	adds	r3, #18
 801857c:	881b      	ldrh	r3, [r3, #0]
 801857e:	8b3a      	ldrh	r2, [r7, #24]
 8018580:	429a      	cmp	r2, r3
 8018582:	d80c      	bhi.n	801859e <etharp_find_entry+0x18a>
            old_stable = i;
 8018584:	8c3b      	ldrh	r3, [r7, #32]
 8018586:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801858c:	4956      	ldr	r1, [pc, #344]	; (80186e8 <etharp_find_entry+0x2d4>)
 801858e:	4613      	mov	r3, r2
 8018590:	005b      	lsls	r3, r3, #1
 8018592:	4413      	add	r3, r2
 8018594:	00db      	lsls	r3, r3, #3
 8018596:	440b      	add	r3, r1
 8018598:	3312      	adds	r3, #18
 801859a:	881b      	ldrh	r3, [r3, #0]
 801859c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801859e:	8c3b      	ldrh	r3, [r7, #32]
 80185a0:	3301      	adds	r3, #1
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	843b      	strh	r3, [r7, #32]
 80185a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80185aa:	2b09      	cmp	r3, #9
 80185ac:	f77f af4c 	ble.w	8018448 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80185b0:	7afb      	ldrb	r3, [r7, #11]
 80185b2:	f003 0302 	and.w	r3, r3, #2
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d108      	bne.n	80185cc <etharp_find_entry+0x1b8>
 80185ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80185be:	2b0a      	cmp	r3, #10
 80185c0:	d107      	bne.n	80185d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80185c2:	7afb      	ldrb	r3, [r7, #11]
 80185c4:	f003 0301 	and.w	r3, r3, #1
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d102      	bne.n	80185d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80185cc:	f04f 33ff 	mov.w	r3, #4294967295
 80185d0:	e085      	b.n	80186de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80185d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80185d6:	2b09      	cmp	r3, #9
 80185d8:	dc02      	bgt.n	80185e0 <etharp_find_entry+0x1cc>
    i = empty;
 80185da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185dc:	843b      	strh	r3, [r7, #32]
 80185de:	e039      	b.n	8018654 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80185e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80185e4:	2b09      	cmp	r3, #9
 80185e6:	dc14      	bgt.n	8018612 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80185e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80185ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80185ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185f0:	493d      	ldr	r1, [pc, #244]	; (80186e8 <etharp_find_entry+0x2d4>)
 80185f2:	4613      	mov	r3, r2
 80185f4:	005b      	lsls	r3, r3, #1
 80185f6:	4413      	add	r3, r2
 80185f8:	00db      	lsls	r3, r3, #3
 80185fa:	440b      	add	r3, r1
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d018      	beq.n	8018634 <etharp_find_entry+0x220>
 8018602:	4b3a      	ldr	r3, [pc, #232]	; (80186ec <etharp_find_entry+0x2d8>)
 8018604:	f240 126d 	movw	r2, #365	; 0x16d
 8018608:	493b      	ldr	r1, [pc, #236]	; (80186f8 <etharp_find_entry+0x2e4>)
 801860a:	483a      	ldr	r0, [pc, #232]	; (80186f4 <etharp_find_entry+0x2e0>)
 801860c:	f002 fe50 	bl	801b2b0 <iprintf>
 8018610:	e010      	b.n	8018634 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018612:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018616:	2b09      	cmp	r3, #9
 8018618:	dc02      	bgt.n	8018620 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801861a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801861c:	843b      	strh	r3, [r7, #32]
 801861e:	e009      	b.n	8018634 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018620:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018624:	2b09      	cmp	r3, #9
 8018626:	dc02      	bgt.n	801862e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018628:	8bfb      	ldrh	r3, [r7, #30]
 801862a:	843b      	strh	r3, [r7, #32]
 801862c:	e002      	b.n	8018634 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801862e:	f04f 33ff 	mov.w	r3, #4294967295
 8018632:	e054      	b.n	80186de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018634:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018638:	2b09      	cmp	r3, #9
 801863a:	dd06      	ble.n	801864a <etharp_find_entry+0x236>
 801863c:	4b2b      	ldr	r3, [pc, #172]	; (80186ec <etharp_find_entry+0x2d8>)
 801863e:	f240 127f 	movw	r2, #383	; 0x17f
 8018642:	492e      	ldr	r1, [pc, #184]	; (80186fc <etharp_find_entry+0x2e8>)
 8018644:	482b      	ldr	r0, [pc, #172]	; (80186f4 <etharp_find_entry+0x2e0>)
 8018646:	f002 fe33 	bl	801b2b0 <iprintf>
    etharp_free_entry(i);
 801864a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801864e:	4618      	mov	r0, r3
 8018650:	f7ff fe06 	bl	8018260 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018654:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018658:	2b09      	cmp	r3, #9
 801865a:	dd06      	ble.n	801866a <etharp_find_entry+0x256>
 801865c:	4b23      	ldr	r3, [pc, #140]	; (80186ec <etharp_find_entry+0x2d8>)
 801865e:	f240 1283 	movw	r2, #387	; 0x183
 8018662:	4926      	ldr	r1, [pc, #152]	; (80186fc <etharp_find_entry+0x2e8>)
 8018664:	4823      	ldr	r0, [pc, #140]	; (80186f4 <etharp_find_entry+0x2e0>)
 8018666:	f002 fe23 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801866a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801866e:	491e      	ldr	r1, [pc, #120]	; (80186e8 <etharp_find_entry+0x2d4>)
 8018670:	4613      	mov	r3, r2
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	4413      	add	r3, r2
 8018676:	00db      	lsls	r3, r3, #3
 8018678:	440b      	add	r3, r1
 801867a:	3314      	adds	r3, #20
 801867c:	781b      	ldrb	r3, [r3, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d006      	beq.n	8018690 <etharp_find_entry+0x27c>
 8018682:	4b1a      	ldr	r3, [pc, #104]	; (80186ec <etharp_find_entry+0x2d8>)
 8018684:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018688:	491d      	ldr	r1, [pc, #116]	; (8018700 <etharp_find_entry+0x2ec>)
 801868a:	481a      	ldr	r0, [pc, #104]	; (80186f4 <etharp_find_entry+0x2e0>)
 801868c:	f002 fe10 	bl	801b2b0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d00b      	beq.n	80186ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018696:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	6819      	ldr	r1, [r3, #0]
 801869e:	4812      	ldr	r0, [pc, #72]	; (80186e8 <etharp_find_entry+0x2d4>)
 80186a0:	4613      	mov	r3, r2
 80186a2:	005b      	lsls	r3, r3, #1
 80186a4:	4413      	add	r3, r2
 80186a6:	00db      	lsls	r3, r3, #3
 80186a8:	4403      	add	r3, r0
 80186aa:	3304      	adds	r3, #4
 80186ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80186ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186b2:	490d      	ldr	r1, [pc, #52]	; (80186e8 <etharp_find_entry+0x2d4>)
 80186b4:	4613      	mov	r3, r2
 80186b6:	005b      	lsls	r3, r3, #1
 80186b8:	4413      	add	r3, r2
 80186ba:	00db      	lsls	r3, r3, #3
 80186bc:	440b      	add	r3, r1
 80186be:	3312      	adds	r3, #18
 80186c0:	2200      	movs	r2, #0
 80186c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80186c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80186c8:	4907      	ldr	r1, [pc, #28]	; (80186e8 <etharp_find_entry+0x2d4>)
 80186ca:	4613      	mov	r3, r2
 80186cc:	005b      	lsls	r3, r3, #1
 80186ce:	4413      	add	r3, r2
 80186d0:	00db      	lsls	r3, r3, #3
 80186d2:	440b      	add	r3, r1
 80186d4:	3308      	adds	r3, #8
 80186d6:	687a      	ldr	r2, [r7, #4]
 80186d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80186da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80186de:	4618      	mov	r0, r3
 80186e0:	3728      	adds	r7, #40	; 0x28
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}
 80186e6:	bf00      	nop
 80186e8:	2000721c 	.word	0x2000721c
 80186ec:	080206e0 	.word	0x080206e0
 80186f0:	08020718 	.word	0x08020718
 80186f4:	08020758 	.word	0x08020758
 80186f8:	08020780 	.word	0x08020780
 80186fc:	08020798 	.word	0x08020798
 8018700:	080207ac 	.word	0x080207ac

08018704 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b088      	sub	sp, #32
 8018708:	af02      	add	r7, sp, #8
 801870a:	60f8      	str	r0, [r7, #12]
 801870c:	60b9      	str	r1, [r7, #8]
 801870e:	607a      	str	r2, [r7, #4]
 8018710:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018718:	2b06      	cmp	r3, #6
 801871a:	d006      	beq.n	801872a <etharp_update_arp_entry+0x26>
 801871c:	4b48      	ldr	r3, [pc, #288]	; (8018840 <etharp_update_arp_entry+0x13c>)
 801871e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018722:	4948      	ldr	r1, [pc, #288]	; (8018844 <etharp_update_arp_entry+0x140>)
 8018724:	4848      	ldr	r0, [pc, #288]	; (8018848 <etharp_update_arp_entry+0x144>)
 8018726:	f002 fdc3 	bl	801b2b0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801872a:	68bb      	ldr	r3, [r7, #8]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d012      	beq.n	8018756 <etharp_update_arp_entry+0x52>
 8018730:	68bb      	ldr	r3, [r7, #8]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d00e      	beq.n	8018756 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018738:	68bb      	ldr	r3, [r7, #8]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	68f9      	ldr	r1, [r7, #12]
 801873e:	4618      	mov	r0, r3
 8018740:	f001 f924 	bl	801998c <ip4_addr_isbroadcast_u32>
 8018744:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018746:	2b00      	cmp	r3, #0
 8018748:	d105      	bne.n	8018756 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801874a:	68bb      	ldr	r3, [r7, #8]
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018752:	2be0      	cmp	r3, #224	; 0xe0
 8018754:	d102      	bne.n	801875c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018756:	f06f 030f 	mvn.w	r3, #15
 801875a:	e06c      	b.n	8018836 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801875c:	78fb      	ldrb	r3, [r7, #3]
 801875e:	68fa      	ldr	r2, [r7, #12]
 8018760:	4619      	mov	r1, r3
 8018762:	68b8      	ldr	r0, [r7, #8]
 8018764:	f7ff fe56 	bl	8018414 <etharp_find_entry>
 8018768:	4603      	mov	r3, r0
 801876a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801876c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018770:	2b00      	cmp	r3, #0
 8018772:	da02      	bge.n	801877a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018774:	8afb      	ldrh	r3, [r7, #22]
 8018776:	b25b      	sxtb	r3, r3
 8018778:	e05d      	b.n	8018836 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801877a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801877e:	4933      	ldr	r1, [pc, #204]	; (801884c <etharp_update_arp_entry+0x148>)
 8018780:	4613      	mov	r3, r2
 8018782:	005b      	lsls	r3, r3, #1
 8018784:	4413      	add	r3, r2
 8018786:	00db      	lsls	r3, r3, #3
 8018788:	440b      	add	r3, r1
 801878a:	3314      	adds	r3, #20
 801878c:	2202      	movs	r2, #2
 801878e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018790:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018794:	492d      	ldr	r1, [pc, #180]	; (801884c <etharp_update_arp_entry+0x148>)
 8018796:	4613      	mov	r3, r2
 8018798:	005b      	lsls	r3, r3, #1
 801879a:	4413      	add	r3, r2
 801879c:	00db      	lsls	r3, r3, #3
 801879e:	440b      	add	r3, r1
 80187a0:	3308      	adds	r3, #8
 80187a2:	68fa      	ldr	r2, [r7, #12]
 80187a4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80187a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187aa:	4613      	mov	r3, r2
 80187ac:	005b      	lsls	r3, r3, #1
 80187ae:	4413      	add	r3, r2
 80187b0:	00db      	lsls	r3, r3, #3
 80187b2:	3308      	adds	r3, #8
 80187b4:	4a25      	ldr	r2, [pc, #148]	; (801884c <etharp_update_arp_entry+0x148>)
 80187b6:	4413      	add	r3, r2
 80187b8:	3304      	adds	r3, #4
 80187ba:	2206      	movs	r2, #6
 80187bc:	6879      	ldr	r1, [r7, #4]
 80187be:	4618      	mov	r0, r3
 80187c0:	f002 ff99 	bl	801b6f6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80187c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187c8:	4920      	ldr	r1, [pc, #128]	; (801884c <etharp_update_arp_entry+0x148>)
 80187ca:	4613      	mov	r3, r2
 80187cc:	005b      	lsls	r3, r3, #1
 80187ce:	4413      	add	r3, r2
 80187d0:	00db      	lsls	r3, r3, #3
 80187d2:	440b      	add	r3, r1
 80187d4:	3312      	adds	r3, #18
 80187d6:	2200      	movs	r2, #0
 80187d8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80187da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187de:	491b      	ldr	r1, [pc, #108]	; (801884c <etharp_update_arp_entry+0x148>)
 80187e0:	4613      	mov	r3, r2
 80187e2:	005b      	lsls	r3, r3, #1
 80187e4:	4413      	add	r3, r2
 80187e6:	00db      	lsls	r3, r3, #3
 80187e8:	440b      	add	r3, r1
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d021      	beq.n	8018834 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80187f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80187f4:	4915      	ldr	r1, [pc, #84]	; (801884c <etharp_update_arp_entry+0x148>)
 80187f6:	4613      	mov	r3, r2
 80187f8:	005b      	lsls	r3, r3, #1
 80187fa:	4413      	add	r3, r2
 80187fc:	00db      	lsls	r3, r3, #3
 80187fe:	440b      	add	r3, r1
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018804:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018808:	4910      	ldr	r1, [pc, #64]	; (801884c <etharp_update_arp_entry+0x148>)
 801880a:	4613      	mov	r3, r2
 801880c:	005b      	lsls	r3, r3, #1
 801880e:	4413      	add	r3, r2
 8018810:	00db      	lsls	r3, r3, #3
 8018812:	440b      	add	r3, r1
 8018814:	2200      	movs	r2, #0
 8018816:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801881e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018822:	9300      	str	r3, [sp, #0]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	6939      	ldr	r1, [r7, #16]
 8018828:	68f8      	ldr	r0, [r7, #12]
 801882a:	f001 ffbd 	bl	801a7a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801882e:	6938      	ldr	r0, [r7, #16]
 8018830:	f7f8 ff2c 	bl	801168c <pbuf_free>
  }
  return ERR_OK;
 8018834:	2300      	movs	r3, #0
}
 8018836:	4618      	mov	r0, r3
 8018838:	3718      	adds	r7, #24
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}
 801883e:	bf00      	nop
 8018840:	080206e0 	.word	0x080206e0
 8018844:	080207d8 	.word	0x080207d8
 8018848:	08020758 	.word	0x08020758
 801884c:	2000721c 	.word	0x2000721c

08018850 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018850:	b580      	push	{r7, lr}
 8018852:	b084      	sub	sp, #16
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018858:	2300      	movs	r3, #0
 801885a:	60fb      	str	r3, [r7, #12]
 801885c:	e01e      	b.n	801889c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801885e:	4913      	ldr	r1, [pc, #76]	; (80188ac <etharp_cleanup_netif+0x5c>)
 8018860:	68fa      	ldr	r2, [r7, #12]
 8018862:	4613      	mov	r3, r2
 8018864:	005b      	lsls	r3, r3, #1
 8018866:	4413      	add	r3, r2
 8018868:	00db      	lsls	r3, r3, #3
 801886a:	440b      	add	r3, r1
 801886c:	3314      	adds	r3, #20
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018872:	7afb      	ldrb	r3, [r7, #11]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d00e      	beq.n	8018896 <etharp_cleanup_netif+0x46>
 8018878:	490c      	ldr	r1, [pc, #48]	; (80188ac <etharp_cleanup_netif+0x5c>)
 801887a:	68fa      	ldr	r2, [r7, #12]
 801887c:	4613      	mov	r3, r2
 801887e:	005b      	lsls	r3, r3, #1
 8018880:	4413      	add	r3, r2
 8018882:	00db      	lsls	r3, r3, #3
 8018884:	440b      	add	r3, r1
 8018886:	3308      	adds	r3, #8
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	687a      	ldr	r2, [r7, #4]
 801888c:	429a      	cmp	r2, r3
 801888e:	d102      	bne.n	8018896 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018890:	68f8      	ldr	r0, [r7, #12]
 8018892:	f7ff fce5 	bl	8018260 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	3301      	adds	r3, #1
 801889a:	60fb      	str	r3, [r7, #12]
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	2b09      	cmp	r3, #9
 80188a0:	dddd      	ble.n	801885e <etharp_cleanup_netif+0xe>
    }
  }
}
 80188a2:	bf00      	nop
 80188a4:	bf00      	nop
 80188a6:	3710      	adds	r7, #16
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	2000721c 	.word	0x2000721c

080188b0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80188b0:	b5b0      	push	{r4, r5, r7, lr}
 80188b2:	b08a      	sub	sp, #40	; 0x28
 80188b4:	af04      	add	r7, sp, #16
 80188b6:	6078      	str	r0, [r7, #4]
 80188b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80188ba:	683b      	ldr	r3, [r7, #0]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d107      	bne.n	80188d0 <etharp_input+0x20>
 80188c0:	4b3d      	ldr	r3, [pc, #244]	; (80189b8 <etharp_input+0x108>)
 80188c2:	f240 228a 	movw	r2, #650	; 0x28a
 80188c6:	493d      	ldr	r1, [pc, #244]	; (80189bc <etharp_input+0x10c>)
 80188c8:	483d      	ldr	r0, [pc, #244]	; (80189c0 <etharp_input+0x110>)
 80188ca:	f002 fcf1 	bl	801b2b0 <iprintf>
 80188ce:	e06f      	b.n	80189b0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	685b      	ldr	r3, [r3, #4]
 80188d4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80188d6:	693b      	ldr	r3, [r7, #16]
 80188d8:	881b      	ldrh	r3, [r3, #0]
 80188da:	b29b      	uxth	r3, r3
 80188dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80188e0:	d10c      	bne.n	80188fc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80188e2:	693b      	ldr	r3, [r7, #16]
 80188e4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80188e6:	2b06      	cmp	r3, #6
 80188e8:	d108      	bne.n	80188fc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80188ea:	693b      	ldr	r3, [r7, #16]
 80188ec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80188ee:	2b04      	cmp	r3, #4
 80188f0:	d104      	bne.n	80188fc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80188f2:	693b      	ldr	r3, [r7, #16]
 80188f4:	885b      	ldrh	r3, [r3, #2]
 80188f6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80188f8:	2b08      	cmp	r3, #8
 80188fa:	d003      	beq.n	8018904 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80188fc:	6878      	ldr	r0, [r7, #4]
 80188fe:	f7f8 fec5 	bl	801168c <pbuf_free>
    return;
 8018902:	e055      	b.n	80189b0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018904:	693b      	ldr	r3, [r7, #16]
 8018906:	330e      	adds	r3, #14
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801890c:	693b      	ldr	r3, [r7, #16]
 801890e:	3318      	adds	r3, #24
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	3304      	adds	r3, #4
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d102      	bne.n	8018924 <etharp_input+0x74>
    for_us = 0;
 801891e:	2300      	movs	r3, #0
 8018920:	75fb      	strb	r3, [r7, #23]
 8018922:	e009      	b.n	8018938 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018924:	68ba      	ldr	r2, [r7, #8]
 8018926:	683b      	ldr	r3, [r7, #0]
 8018928:	3304      	adds	r3, #4
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	429a      	cmp	r2, r3
 801892e:	bf0c      	ite	eq
 8018930:	2301      	moveq	r3, #1
 8018932:	2300      	movne	r3, #0
 8018934:	b2db      	uxtb	r3, r3
 8018936:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018938:	693b      	ldr	r3, [r7, #16]
 801893a:	f103 0208 	add.w	r2, r3, #8
 801893e:	7dfb      	ldrb	r3, [r7, #23]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d001      	beq.n	8018948 <etharp_input+0x98>
 8018944:	2301      	movs	r3, #1
 8018946:	e000      	b.n	801894a <etharp_input+0x9a>
 8018948:	2302      	movs	r3, #2
 801894a:	f107 010c 	add.w	r1, r7, #12
 801894e:	6838      	ldr	r0, [r7, #0]
 8018950:	f7ff fed8 	bl	8018704 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018954:	693b      	ldr	r3, [r7, #16]
 8018956:	88db      	ldrh	r3, [r3, #6]
 8018958:	b29b      	uxth	r3, r3
 801895a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801895e:	d003      	beq.n	8018968 <etharp_input+0xb8>
 8018960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018964:	d01e      	beq.n	80189a4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018966:	e020      	b.n	80189aa <etharp_input+0xfa>
      if (for_us) {
 8018968:	7dfb      	ldrb	r3, [r7, #23]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d01c      	beq.n	80189a8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801896e:	683b      	ldr	r3, [r7, #0]
 8018970:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018974:	693b      	ldr	r3, [r7, #16]
 8018976:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018980:	683b      	ldr	r3, [r7, #0]
 8018982:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018984:	693a      	ldr	r2, [r7, #16]
 8018986:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018988:	2102      	movs	r1, #2
 801898a:	9103      	str	r1, [sp, #12]
 801898c:	f107 010c 	add.w	r1, r7, #12
 8018990:	9102      	str	r1, [sp, #8]
 8018992:	9201      	str	r2, [sp, #4]
 8018994:	9300      	str	r3, [sp, #0]
 8018996:	462b      	mov	r3, r5
 8018998:	4622      	mov	r2, r4
 801899a:	4601      	mov	r1, r0
 801899c:	6838      	ldr	r0, [r7, #0]
 801899e:	f000 faeb 	bl	8018f78 <etharp_raw>
      break;
 80189a2:	e001      	b.n	80189a8 <etharp_input+0xf8>
      break;
 80189a4:	bf00      	nop
 80189a6:	e000      	b.n	80189aa <etharp_input+0xfa>
      break;
 80189a8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	f7f8 fe6e 	bl	801168c <pbuf_free>
}
 80189b0:	3718      	adds	r7, #24
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bdb0      	pop	{r4, r5, r7, pc}
 80189b6:	bf00      	nop
 80189b8:	080206e0 	.word	0x080206e0
 80189bc:	08020830 	.word	0x08020830
 80189c0:	08020758 	.word	0x08020758

080189c4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b086      	sub	sp, #24
 80189c8:	af02      	add	r7, sp, #8
 80189ca:	60f8      	str	r0, [r7, #12]
 80189cc:	60b9      	str	r1, [r7, #8]
 80189ce:	4613      	mov	r3, r2
 80189d0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80189d2:	79fa      	ldrb	r2, [r7, #7]
 80189d4:	4944      	ldr	r1, [pc, #272]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 80189d6:	4613      	mov	r3, r2
 80189d8:	005b      	lsls	r3, r3, #1
 80189da:	4413      	add	r3, r2
 80189dc:	00db      	lsls	r3, r3, #3
 80189de:	440b      	add	r3, r1
 80189e0:	3314      	adds	r3, #20
 80189e2:	781b      	ldrb	r3, [r3, #0]
 80189e4:	2b01      	cmp	r3, #1
 80189e6:	d806      	bhi.n	80189f6 <etharp_output_to_arp_index+0x32>
 80189e8:	4b40      	ldr	r3, [pc, #256]	; (8018aec <etharp_output_to_arp_index+0x128>)
 80189ea:	f240 22ee 	movw	r2, #750	; 0x2ee
 80189ee:	4940      	ldr	r1, [pc, #256]	; (8018af0 <etharp_output_to_arp_index+0x12c>)
 80189f0:	4840      	ldr	r0, [pc, #256]	; (8018af4 <etharp_output_to_arp_index+0x130>)
 80189f2:	f002 fc5d 	bl	801b2b0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80189f6:	79fa      	ldrb	r2, [r7, #7]
 80189f8:	493b      	ldr	r1, [pc, #236]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 80189fa:	4613      	mov	r3, r2
 80189fc:	005b      	lsls	r3, r3, #1
 80189fe:	4413      	add	r3, r2
 8018a00:	00db      	lsls	r3, r3, #3
 8018a02:	440b      	add	r3, r1
 8018a04:	3314      	adds	r3, #20
 8018a06:	781b      	ldrb	r3, [r3, #0]
 8018a08:	2b02      	cmp	r3, #2
 8018a0a:	d153      	bne.n	8018ab4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018a0c:	79fa      	ldrb	r2, [r7, #7]
 8018a0e:	4936      	ldr	r1, [pc, #216]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 8018a10:	4613      	mov	r3, r2
 8018a12:	005b      	lsls	r3, r3, #1
 8018a14:	4413      	add	r3, r2
 8018a16:	00db      	lsls	r3, r3, #3
 8018a18:	440b      	add	r3, r1
 8018a1a:	3312      	adds	r3, #18
 8018a1c:	881b      	ldrh	r3, [r3, #0]
 8018a1e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018a22:	d919      	bls.n	8018a58 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018a24:	79fa      	ldrb	r2, [r7, #7]
 8018a26:	4613      	mov	r3, r2
 8018a28:	005b      	lsls	r3, r3, #1
 8018a2a:	4413      	add	r3, r2
 8018a2c:	00db      	lsls	r3, r3, #3
 8018a2e:	4a2e      	ldr	r2, [pc, #184]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 8018a30:	4413      	add	r3, r2
 8018a32:	3304      	adds	r3, #4
 8018a34:	4619      	mov	r1, r3
 8018a36:	68f8      	ldr	r0, [r7, #12]
 8018a38:	f000 fb4c 	bl	80190d4 <etharp_request>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d138      	bne.n	8018ab4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018a42:	79fa      	ldrb	r2, [r7, #7]
 8018a44:	4928      	ldr	r1, [pc, #160]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 8018a46:	4613      	mov	r3, r2
 8018a48:	005b      	lsls	r3, r3, #1
 8018a4a:	4413      	add	r3, r2
 8018a4c:	00db      	lsls	r3, r3, #3
 8018a4e:	440b      	add	r3, r1
 8018a50:	3314      	adds	r3, #20
 8018a52:	2203      	movs	r2, #3
 8018a54:	701a      	strb	r2, [r3, #0]
 8018a56:	e02d      	b.n	8018ab4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018a58:	79fa      	ldrb	r2, [r7, #7]
 8018a5a:	4923      	ldr	r1, [pc, #140]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 8018a5c:	4613      	mov	r3, r2
 8018a5e:	005b      	lsls	r3, r3, #1
 8018a60:	4413      	add	r3, r2
 8018a62:	00db      	lsls	r3, r3, #3
 8018a64:	440b      	add	r3, r1
 8018a66:	3312      	adds	r3, #18
 8018a68:	881b      	ldrh	r3, [r3, #0]
 8018a6a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018a6e:	d321      	bcc.n	8018ab4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018a70:	79fa      	ldrb	r2, [r7, #7]
 8018a72:	4613      	mov	r3, r2
 8018a74:	005b      	lsls	r3, r3, #1
 8018a76:	4413      	add	r3, r2
 8018a78:	00db      	lsls	r3, r3, #3
 8018a7a:	4a1b      	ldr	r2, [pc, #108]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 8018a7c:	4413      	add	r3, r2
 8018a7e:	1d19      	adds	r1, r3, #4
 8018a80:	79fa      	ldrb	r2, [r7, #7]
 8018a82:	4613      	mov	r3, r2
 8018a84:	005b      	lsls	r3, r3, #1
 8018a86:	4413      	add	r3, r2
 8018a88:	00db      	lsls	r3, r3, #3
 8018a8a:	3308      	adds	r3, #8
 8018a8c:	4a16      	ldr	r2, [pc, #88]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 8018a8e:	4413      	add	r3, r2
 8018a90:	3304      	adds	r3, #4
 8018a92:	461a      	mov	r2, r3
 8018a94:	68f8      	ldr	r0, [r7, #12]
 8018a96:	f000 fafb 	bl	8019090 <etharp_request_dst>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d109      	bne.n	8018ab4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018aa0:	79fa      	ldrb	r2, [r7, #7]
 8018aa2:	4911      	ldr	r1, [pc, #68]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 8018aa4:	4613      	mov	r3, r2
 8018aa6:	005b      	lsls	r3, r3, #1
 8018aa8:	4413      	add	r3, r2
 8018aaa:	00db      	lsls	r3, r3, #3
 8018aac:	440b      	add	r3, r1
 8018aae:	3314      	adds	r3, #20
 8018ab0:	2203      	movs	r2, #3
 8018ab2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8018aba:	79fa      	ldrb	r2, [r7, #7]
 8018abc:	4613      	mov	r3, r2
 8018abe:	005b      	lsls	r3, r3, #1
 8018ac0:	4413      	add	r3, r2
 8018ac2:	00db      	lsls	r3, r3, #3
 8018ac4:	3308      	adds	r3, #8
 8018ac6:	4a08      	ldr	r2, [pc, #32]	; (8018ae8 <etharp_output_to_arp_index+0x124>)
 8018ac8:	4413      	add	r3, r2
 8018aca:	3304      	adds	r3, #4
 8018acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018ad0:	9200      	str	r2, [sp, #0]
 8018ad2:	460a      	mov	r2, r1
 8018ad4:	68b9      	ldr	r1, [r7, #8]
 8018ad6:	68f8      	ldr	r0, [r7, #12]
 8018ad8:	f001 fe66 	bl	801a7a8 <ethernet_output>
 8018adc:	4603      	mov	r3, r0
}
 8018ade:	4618      	mov	r0, r3
 8018ae0:	3710      	adds	r7, #16
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	2000721c 	.word	0x2000721c
 8018aec:	080206e0 	.word	0x080206e0
 8018af0:	08020850 	.word	0x08020850
 8018af4:	08020758 	.word	0x08020758

08018af8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b08a      	sub	sp, #40	; 0x28
 8018afc:	af02      	add	r7, sp, #8
 8018afe:	60f8      	str	r0, [r7, #12]
 8018b00:	60b9      	str	r1, [r7, #8]
 8018b02:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d106      	bne.n	8018b1c <etharp_output+0x24>
 8018b0e:	4b73      	ldr	r3, [pc, #460]	; (8018cdc <etharp_output+0x1e4>)
 8018b10:	f240 321e 	movw	r2, #798	; 0x31e
 8018b14:	4972      	ldr	r1, [pc, #456]	; (8018ce0 <etharp_output+0x1e8>)
 8018b16:	4873      	ldr	r0, [pc, #460]	; (8018ce4 <etharp_output+0x1ec>)
 8018b18:	f002 fbca 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018b1c:	68bb      	ldr	r3, [r7, #8]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d106      	bne.n	8018b30 <etharp_output+0x38>
 8018b22:	4b6e      	ldr	r3, [pc, #440]	; (8018cdc <etharp_output+0x1e4>)
 8018b24:	f240 321f 	movw	r2, #799	; 0x31f
 8018b28:	496f      	ldr	r1, [pc, #444]	; (8018ce8 <etharp_output+0x1f0>)
 8018b2a:	486e      	ldr	r0, [pc, #440]	; (8018ce4 <etharp_output+0x1ec>)
 8018b2c:	f002 fbc0 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d106      	bne.n	8018b44 <etharp_output+0x4c>
 8018b36:	4b69      	ldr	r3, [pc, #420]	; (8018cdc <etharp_output+0x1e4>)
 8018b38:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018b3c:	496b      	ldr	r1, [pc, #428]	; (8018cec <etharp_output+0x1f4>)
 8018b3e:	4869      	ldr	r0, [pc, #420]	; (8018ce4 <etharp_output+0x1ec>)
 8018b40:	f002 fbb6 	bl	801b2b0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	68f9      	ldr	r1, [r7, #12]
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f000 ff1e 	bl	801998c <ip4_addr_isbroadcast_u32>
 8018b50:	4603      	mov	r3, r0
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d002      	beq.n	8018b5c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018b56:	4b66      	ldr	r3, [pc, #408]	; (8018cf0 <etharp_output+0x1f8>)
 8018b58:	61fb      	str	r3, [r7, #28]
 8018b5a:	e0af      	b.n	8018cbc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018b64:	2be0      	cmp	r3, #224	; 0xe0
 8018b66:	d118      	bne.n	8018b9a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018b68:	2301      	movs	r3, #1
 8018b6a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018b70:	235e      	movs	r3, #94	; 0x5e
 8018b72:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	3301      	adds	r3, #1
 8018b78:	781b      	ldrb	r3, [r3, #0]
 8018b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018b7e:	b2db      	uxtb	r3, r3
 8018b80:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	3302      	adds	r3, #2
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	3303      	adds	r3, #3
 8018b8e:	781b      	ldrb	r3, [r3, #0]
 8018b90:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018b92:	f107 0310 	add.w	r3, r7, #16
 8018b96:	61fb      	str	r3, [r7, #28]
 8018b98:	e090      	b.n	8018cbc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681a      	ldr	r2, [r3, #0]
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	3304      	adds	r3, #4
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	405a      	eors	r2, r3
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	3308      	adds	r3, #8
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	4013      	ands	r3, r2
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d012      	beq.n	8018bd8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018bb8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018bbc:	4293      	cmp	r3, r2
 8018bbe:	d00b      	beq.n	8018bd8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	330c      	adds	r3, #12
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d003      	beq.n	8018bd2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	330c      	adds	r3, #12
 8018bce:	61bb      	str	r3, [r7, #24]
 8018bd0:	e002      	b.n	8018bd8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018bd2:	f06f 0303 	mvn.w	r3, #3
 8018bd6:	e07d      	b.n	8018cd4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018bd8:	4b46      	ldr	r3, [pc, #280]	; (8018cf4 <etharp_output+0x1fc>)
 8018bda:	781b      	ldrb	r3, [r3, #0]
 8018bdc:	4619      	mov	r1, r3
 8018bde:	4a46      	ldr	r2, [pc, #280]	; (8018cf8 <etharp_output+0x200>)
 8018be0:	460b      	mov	r3, r1
 8018be2:	005b      	lsls	r3, r3, #1
 8018be4:	440b      	add	r3, r1
 8018be6:	00db      	lsls	r3, r3, #3
 8018be8:	4413      	add	r3, r2
 8018bea:	3314      	adds	r3, #20
 8018bec:	781b      	ldrb	r3, [r3, #0]
 8018bee:	2b01      	cmp	r3, #1
 8018bf0:	d925      	bls.n	8018c3e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018bf2:	4b40      	ldr	r3, [pc, #256]	; (8018cf4 <etharp_output+0x1fc>)
 8018bf4:	781b      	ldrb	r3, [r3, #0]
 8018bf6:	4619      	mov	r1, r3
 8018bf8:	4a3f      	ldr	r2, [pc, #252]	; (8018cf8 <etharp_output+0x200>)
 8018bfa:	460b      	mov	r3, r1
 8018bfc:	005b      	lsls	r3, r3, #1
 8018bfe:	440b      	add	r3, r1
 8018c00:	00db      	lsls	r3, r3, #3
 8018c02:	4413      	add	r3, r2
 8018c04:	3308      	adds	r3, #8
 8018c06:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018c08:	68fa      	ldr	r2, [r7, #12]
 8018c0a:	429a      	cmp	r2, r3
 8018c0c:	d117      	bne.n	8018c3e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018c0e:	69bb      	ldr	r3, [r7, #24]
 8018c10:	681a      	ldr	r2, [r3, #0]
 8018c12:	4b38      	ldr	r3, [pc, #224]	; (8018cf4 <etharp_output+0x1fc>)
 8018c14:	781b      	ldrb	r3, [r3, #0]
 8018c16:	4618      	mov	r0, r3
 8018c18:	4937      	ldr	r1, [pc, #220]	; (8018cf8 <etharp_output+0x200>)
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	005b      	lsls	r3, r3, #1
 8018c1e:	4403      	add	r3, r0
 8018c20:	00db      	lsls	r3, r3, #3
 8018c22:	440b      	add	r3, r1
 8018c24:	3304      	adds	r3, #4
 8018c26:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018c28:	429a      	cmp	r2, r3
 8018c2a:	d108      	bne.n	8018c3e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018c2c:	4b31      	ldr	r3, [pc, #196]	; (8018cf4 <etharp_output+0x1fc>)
 8018c2e:	781b      	ldrb	r3, [r3, #0]
 8018c30:	461a      	mov	r2, r3
 8018c32:	68b9      	ldr	r1, [r7, #8]
 8018c34:	68f8      	ldr	r0, [r7, #12]
 8018c36:	f7ff fec5 	bl	80189c4 <etharp_output_to_arp_index>
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	e04a      	b.n	8018cd4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018c3e:	2300      	movs	r3, #0
 8018c40:	75fb      	strb	r3, [r7, #23]
 8018c42:	e031      	b.n	8018ca8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018c44:	7dfa      	ldrb	r2, [r7, #23]
 8018c46:	492c      	ldr	r1, [pc, #176]	; (8018cf8 <etharp_output+0x200>)
 8018c48:	4613      	mov	r3, r2
 8018c4a:	005b      	lsls	r3, r3, #1
 8018c4c:	4413      	add	r3, r2
 8018c4e:	00db      	lsls	r3, r3, #3
 8018c50:	440b      	add	r3, r1
 8018c52:	3314      	adds	r3, #20
 8018c54:	781b      	ldrb	r3, [r3, #0]
 8018c56:	2b01      	cmp	r3, #1
 8018c58:	d923      	bls.n	8018ca2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018c5a:	7dfa      	ldrb	r2, [r7, #23]
 8018c5c:	4926      	ldr	r1, [pc, #152]	; (8018cf8 <etharp_output+0x200>)
 8018c5e:	4613      	mov	r3, r2
 8018c60:	005b      	lsls	r3, r3, #1
 8018c62:	4413      	add	r3, r2
 8018c64:	00db      	lsls	r3, r3, #3
 8018c66:	440b      	add	r3, r1
 8018c68:	3308      	adds	r3, #8
 8018c6a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018c6c:	68fa      	ldr	r2, [r7, #12]
 8018c6e:	429a      	cmp	r2, r3
 8018c70:	d117      	bne.n	8018ca2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018c72:	69bb      	ldr	r3, [r7, #24]
 8018c74:	6819      	ldr	r1, [r3, #0]
 8018c76:	7dfa      	ldrb	r2, [r7, #23]
 8018c78:	481f      	ldr	r0, [pc, #124]	; (8018cf8 <etharp_output+0x200>)
 8018c7a:	4613      	mov	r3, r2
 8018c7c:	005b      	lsls	r3, r3, #1
 8018c7e:	4413      	add	r3, r2
 8018c80:	00db      	lsls	r3, r3, #3
 8018c82:	4403      	add	r3, r0
 8018c84:	3304      	adds	r3, #4
 8018c86:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018c88:	4299      	cmp	r1, r3
 8018c8a:	d10a      	bne.n	8018ca2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018c8c:	4a19      	ldr	r2, [pc, #100]	; (8018cf4 <etharp_output+0x1fc>)
 8018c8e:	7dfb      	ldrb	r3, [r7, #23]
 8018c90:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018c92:	7dfb      	ldrb	r3, [r7, #23]
 8018c94:	461a      	mov	r2, r3
 8018c96:	68b9      	ldr	r1, [r7, #8]
 8018c98:	68f8      	ldr	r0, [r7, #12]
 8018c9a:	f7ff fe93 	bl	80189c4 <etharp_output_to_arp_index>
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	e018      	b.n	8018cd4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018ca2:	7dfb      	ldrb	r3, [r7, #23]
 8018ca4:	3301      	adds	r3, #1
 8018ca6:	75fb      	strb	r3, [r7, #23]
 8018ca8:	7dfb      	ldrb	r3, [r7, #23]
 8018caa:	2b09      	cmp	r3, #9
 8018cac:	d9ca      	bls.n	8018c44 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018cae:	68ba      	ldr	r2, [r7, #8]
 8018cb0:	69b9      	ldr	r1, [r7, #24]
 8018cb2:	68f8      	ldr	r0, [r7, #12]
 8018cb4:	f000 f822 	bl	8018cfc <etharp_query>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	e00b      	b.n	8018cd4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018cc6:	9300      	str	r3, [sp, #0]
 8018cc8:	69fb      	ldr	r3, [r7, #28]
 8018cca:	68b9      	ldr	r1, [r7, #8]
 8018ccc:	68f8      	ldr	r0, [r7, #12]
 8018cce:	f001 fd6b 	bl	801a7a8 <ethernet_output>
 8018cd2:	4603      	mov	r3, r0
}
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	3720      	adds	r7, #32
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	bd80      	pop	{r7, pc}
 8018cdc:	080206e0 	.word	0x080206e0
 8018ce0:	08020830 	.word	0x08020830
 8018ce4:	08020758 	.word	0x08020758
 8018ce8:	08020880 	.word	0x08020880
 8018cec:	08020820 	.word	0x08020820
 8018cf0:	08020ee0 	.word	0x08020ee0
 8018cf4:	2000730c 	.word	0x2000730c
 8018cf8:	2000721c 	.word	0x2000721c

08018cfc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b08c      	sub	sp, #48	; 0x30
 8018d00:	af02      	add	r7, sp, #8
 8018d02:	60f8      	str	r0, [r7, #12]
 8018d04:	60b9      	str	r1, [r7, #8]
 8018d06:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	3326      	adds	r3, #38	; 0x26
 8018d0c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018d0e:	23ff      	movs	r3, #255	; 0xff
 8018d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018d14:	2300      	movs	r3, #0
 8018d16:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	68f9      	ldr	r1, [r7, #12]
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f000 fe34 	bl	801998c <ip4_addr_isbroadcast_u32>
 8018d24:	4603      	mov	r3, r0
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d10c      	bne.n	8018d44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018d2a:	68bb      	ldr	r3, [r7, #8]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d32:	2be0      	cmp	r3, #224	; 0xe0
 8018d34:	d006      	beq.n	8018d44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d003      	beq.n	8018d44 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d102      	bne.n	8018d4a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018d44:	f06f 030f 	mvn.w	r3, #15
 8018d48:	e101      	b.n	8018f4e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018d4a:	68fa      	ldr	r2, [r7, #12]
 8018d4c:	2101      	movs	r1, #1
 8018d4e:	68b8      	ldr	r0, [r7, #8]
 8018d50:	f7ff fb60 	bl	8018414 <etharp_find_entry>
 8018d54:	4603      	mov	r3, r0
 8018d56:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018d58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	da02      	bge.n	8018d66 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018d60:	8a7b      	ldrh	r3, [r7, #18]
 8018d62:	b25b      	sxtb	r3, r3
 8018d64:	e0f3      	b.n	8018f4e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018d66:	8a7b      	ldrh	r3, [r7, #18]
 8018d68:	2b7e      	cmp	r3, #126	; 0x7e
 8018d6a:	d906      	bls.n	8018d7a <etharp_query+0x7e>
 8018d6c:	4b7a      	ldr	r3, [pc, #488]	; (8018f58 <etharp_query+0x25c>)
 8018d6e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018d72:	497a      	ldr	r1, [pc, #488]	; (8018f5c <etharp_query+0x260>)
 8018d74:	487a      	ldr	r0, [pc, #488]	; (8018f60 <etharp_query+0x264>)
 8018d76:	f002 fa9b 	bl	801b2b0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018d7a:	8a7b      	ldrh	r3, [r7, #18]
 8018d7c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018d7e:	7c7a      	ldrb	r2, [r7, #17]
 8018d80:	4978      	ldr	r1, [pc, #480]	; (8018f64 <etharp_query+0x268>)
 8018d82:	4613      	mov	r3, r2
 8018d84:	005b      	lsls	r3, r3, #1
 8018d86:	4413      	add	r3, r2
 8018d88:	00db      	lsls	r3, r3, #3
 8018d8a:	440b      	add	r3, r1
 8018d8c:	3314      	adds	r3, #20
 8018d8e:	781b      	ldrb	r3, [r3, #0]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d115      	bne.n	8018dc0 <etharp_query+0xc4>
    is_new_entry = 1;
 8018d94:	2301      	movs	r3, #1
 8018d96:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018d98:	7c7a      	ldrb	r2, [r7, #17]
 8018d9a:	4972      	ldr	r1, [pc, #456]	; (8018f64 <etharp_query+0x268>)
 8018d9c:	4613      	mov	r3, r2
 8018d9e:	005b      	lsls	r3, r3, #1
 8018da0:	4413      	add	r3, r2
 8018da2:	00db      	lsls	r3, r3, #3
 8018da4:	440b      	add	r3, r1
 8018da6:	3314      	adds	r3, #20
 8018da8:	2201      	movs	r2, #1
 8018daa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018dac:	7c7a      	ldrb	r2, [r7, #17]
 8018dae:	496d      	ldr	r1, [pc, #436]	; (8018f64 <etharp_query+0x268>)
 8018db0:	4613      	mov	r3, r2
 8018db2:	005b      	lsls	r3, r3, #1
 8018db4:	4413      	add	r3, r2
 8018db6:	00db      	lsls	r3, r3, #3
 8018db8:	440b      	add	r3, r1
 8018dba:	3308      	adds	r3, #8
 8018dbc:	68fa      	ldr	r2, [r7, #12]
 8018dbe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018dc0:	7c7a      	ldrb	r2, [r7, #17]
 8018dc2:	4968      	ldr	r1, [pc, #416]	; (8018f64 <etharp_query+0x268>)
 8018dc4:	4613      	mov	r3, r2
 8018dc6:	005b      	lsls	r3, r3, #1
 8018dc8:	4413      	add	r3, r2
 8018dca:	00db      	lsls	r3, r3, #3
 8018dcc:	440b      	add	r3, r1
 8018dce:	3314      	adds	r3, #20
 8018dd0:	781b      	ldrb	r3, [r3, #0]
 8018dd2:	2b01      	cmp	r3, #1
 8018dd4:	d011      	beq.n	8018dfa <etharp_query+0xfe>
 8018dd6:	7c7a      	ldrb	r2, [r7, #17]
 8018dd8:	4962      	ldr	r1, [pc, #392]	; (8018f64 <etharp_query+0x268>)
 8018dda:	4613      	mov	r3, r2
 8018ddc:	005b      	lsls	r3, r3, #1
 8018dde:	4413      	add	r3, r2
 8018de0:	00db      	lsls	r3, r3, #3
 8018de2:	440b      	add	r3, r1
 8018de4:	3314      	adds	r3, #20
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	2b01      	cmp	r3, #1
 8018dea:	d806      	bhi.n	8018dfa <etharp_query+0xfe>
 8018dec:	4b5a      	ldr	r3, [pc, #360]	; (8018f58 <etharp_query+0x25c>)
 8018dee:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018df2:	495d      	ldr	r1, [pc, #372]	; (8018f68 <etharp_query+0x26c>)
 8018df4:	485a      	ldr	r0, [pc, #360]	; (8018f60 <etharp_query+0x264>)
 8018df6:	f002 fa5b 	bl	801b2b0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018dfa:	6a3b      	ldr	r3, [r7, #32]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d102      	bne.n	8018e06 <etharp_query+0x10a>
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d10c      	bne.n	8018e20 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018e06:	68b9      	ldr	r1, [r7, #8]
 8018e08:	68f8      	ldr	r0, [r7, #12]
 8018e0a:	f000 f963 	bl	80190d4 <etharp_request>
 8018e0e:	4603      	mov	r3, r0
 8018e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d102      	bne.n	8018e20 <etharp_query+0x124>
      return result;
 8018e1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018e1e:	e096      	b.n	8018f4e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d106      	bne.n	8018e34 <etharp_query+0x138>
 8018e26:	4b4c      	ldr	r3, [pc, #304]	; (8018f58 <etharp_query+0x25c>)
 8018e28:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018e2c:	494f      	ldr	r1, [pc, #316]	; (8018f6c <etharp_query+0x270>)
 8018e2e:	484c      	ldr	r0, [pc, #304]	; (8018f60 <etharp_query+0x264>)
 8018e30:	f002 fa3e 	bl	801b2b0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018e34:	7c7a      	ldrb	r2, [r7, #17]
 8018e36:	494b      	ldr	r1, [pc, #300]	; (8018f64 <etharp_query+0x268>)
 8018e38:	4613      	mov	r3, r2
 8018e3a:	005b      	lsls	r3, r3, #1
 8018e3c:	4413      	add	r3, r2
 8018e3e:	00db      	lsls	r3, r3, #3
 8018e40:	440b      	add	r3, r1
 8018e42:	3314      	adds	r3, #20
 8018e44:	781b      	ldrb	r3, [r3, #0]
 8018e46:	2b01      	cmp	r3, #1
 8018e48:	d917      	bls.n	8018e7a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018e4a:	4a49      	ldr	r2, [pc, #292]	; (8018f70 <etharp_query+0x274>)
 8018e4c:	7c7b      	ldrb	r3, [r7, #17]
 8018e4e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018e50:	7c7a      	ldrb	r2, [r7, #17]
 8018e52:	4613      	mov	r3, r2
 8018e54:	005b      	lsls	r3, r3, #1
 8018e56:	4413      	add	r3, r2
 8018e58:	00db      	lsls	r3, r3, #3
 8018e5a:	3308      	adds	r3, #8
 8018e5c:	4a41      	ldr	r2, [pc, #260]	; (8018f64 <etharp_query+0x268>)
 8018e5e:	4413      	add	r3, r2
 8018e60:	3304      	adds	r3, #4
 8018e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018e66:	9200      	str	r2, [sp, #0]
 8018e68:	697a      	ldr	r2, [r7, #20]
 8018e6a:	6879      	ldr	r1, [r7, #4]
 8018e6c:	68f8      	ldr	r0, [r7, #12]
 8018e6e:	f001 fc9b 	bl	801a7a8 <ethernet_output>
 8018e72:	4603      	mov	r3, r0
 8018e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e78:	e067      	b.n	8018f4a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018e7a:	7c7a      	ldrb	r2, [r7, #17]
 8018e7c:	4939      	ldr	r1, [pc, #228]	; (8018f64 <etharp_query+0x268>)
 8018e7e:	4613      	mov	r3, r2
 8018e80:	005b      	lsls	r3, r3, #1
 8018e82:	4413      	add	r3, r2
 8018e84:	00db      	lsls	r3, r3, #3
 8018e86:	440b      	add	r3, r1
 8018e88:	3314      	adds	r3, #20
 8018e8a:	781b      	ldrb	r3, [r3, #0]
 8018e8c:	2b01      	cmp	r3, #1
 8018e8e:	d15c      	bne.n	8018f4a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018e90:	2300      	movs	r3, #0
 8018e92:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018e98:	e01c      	b.n	8018ed4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018e9a:	69fb      	ldr	r3, [r7, #28]
 8018e9c:	895a      	ldrh	r2, [r3, #10]
 8018e9e:	69fb      	ldr	r3, [r7, #28]
 8018ea0:	891b      	ldrh	r3, [r3, #8]
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d10a      	bne.n	8018ebc <etharp_query+0x1c0>
 8018ea6:	69fb      	ldr	r3, [r7, #28]
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d006      	beq.n	8018ebc <etharp_query+0x1c0>
 8018eae:	4b2a      	ldr	r3, [pc, #168]	; (8018f58 <etharp_query+0x25c>)
 8018eb0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018eb4:	492f      	ldr	r1, [pc, #188]	; (8018f74 <etharp_query+0x278>)
 8018eb6:	482a      	ldr	r0, [pc, #168]	; (8018f60 <etharp_query+0x264>)
 8018eb8:	f002 f9fa 	bl	801b2b0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018ebc:	69fb      	ldr	r3, [r7, #28]
 8018ebe:	7b1b      	ldrb	r3, [r3, #12]
 8018ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d002      	beq.n	8018ece <etharp_query+0x1d2>
        copy_needed = 1;
 8018ec8:	2301      	movs	r3, #1
 8018eca:	61bb      	str	r3, [r7, #24]
        break;
 8018ecc:	e005      	b.n	8018eda <etharp_query+0x1de>
      }
      p = p->next;
 8018ece:	69fb      	ldr	r3, [r7, #28]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018ed4:	69fb      	ldr	r3, [r7, #28]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d1df      	bne.n	8018e9a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018eda:	69bb      	ldr	r3, [r7, #24]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d007      	beq.n	8018ef0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018ee0:	687a      	ldr	r2, [r7, #4]
 8018ee2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018ee6:	200e      	movs	r0, #14
 8018ee8:	f7f8 febe 	bl	8011c68 <pbuf_clone>
 8018eec:	61f8      	str	r0, [r7, #28]
 8018eee:	e004      	b.n	8018efa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018ef4:	69f8      	ldr	r0, [r7, #28]
 8018ef6:	f7f8 fc69 	bl	80117cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018efa:	69fb      	ldr	r3, [r7, #28]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d021      	beq.n	8018f44 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018f00:	7c7a      	ldrb	r2, [r7, #17]
 8018f02:	4918      	ldr	r1, [pc, #96]	; (8018f64 <etharp_query+0x268>)
 8018f04:	4613      	mov	r3, r2
 8018f06:	005b      	lsls	r3, r3, #1
 8018f08:	4413      	add	r3, r2
 8018f0a:	00db      	lsls	r3, r3, #3
 8018f0c:	440b      	add	r3, r1
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d00a      	beq.n	8018f2a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018f14:	7c7a      	ldrb	r2, [r7, #17]
 8018f16:	4913      	ldr	r1, [pc, #76]	; (8018f64 <etharp_query+0x268>)
 8018f18:	4613      	mov	r3, r2
 8018f1a:	005b      	lsls	r3, r3, #1
 8018f1c:	4413      	add	r3, r2
 8018f1e:	00db      	lsls	r3, r3, #3
 8018f20:	440b      	add	r3, r1
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7f8 fbb1 	bl	801168c <pbuf_free>
      }
      arp_table[i].q = p;
 8018f2a:	7c7a      	ldrb	r2, [r7, #17]
 8018f2c:	490d      	ldr	r1, [pc, #52]	; (8018f64 <etharp_query+0x268>)
 8018f2e:	4613      	mov	r3, r2
 8018f30:	005b      	lsls	r3, r3, #1
 8018f32:	4413      	add	r3, r2
 8018f34:	00db      	lsls	r3, r3, #3
 8018f36:	440b      	add	r3, r1
 8018f38:	69fa      	ldr	r2, [r7, #28]
 8018f3a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f42:	e002      	b.n	8018f4a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018f44:	23ff      	movs	r3, #255	; 0xff
 8018f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018f4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018f4e:	4618      	mov	r0, r3
 8018f50:	3728      	adds	r7, #40	; 0x28
 8018f52:	46bd      	mov	sp, r7
 8018f54:	bd80      	pop	{r7, pc}
 8018f56:	bf00      	nop
 8018f58:	080206e0 	.word	0x080206e0
 8018f5c:	0802088c 	.word	0x0802088c
 8018f60:	08020758 	.word	0x08020758
 8018f64:	2000721c 	.word	0x2000721c
 8018f68:	0802089c 	.word	0x0802089c
 8018f6c:	08020880 	.word	0x08020880
 8018f70:	2000730c 	.word	0x2000730c
 8018f74:	080208c4 	.word	0x080208c4

08018f78 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b08a      	sub	sp, #40	; 0x28
 8018f7c:	af02      	add	r7, sp, #8
 8018f7e:	60f8      	str	r0, [r7, #12]
 8018f80:	60b9      	str	r1, [r7, #8]
 8018f82:	607a      	str	r2, [r7, #4]
 8018f84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018f86:	2300      	movs	r3, #0
 8018f88:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d106      	bne.n	8018f9e <etharp_raw+0x26>
 8018f90:	4b3a      	ldr	r3, [pc, #232]	; (801907c <etharp_raw+0x104>)
 8018f92:	f240 4257 	movw	r2, #1111	; 0x457
 8018f96:	493a      	ldr	r1, [pc, #232]	; (8019080 <etharp_raw+0x108>)
 8018f98:	483a      	ldr	r0, [pc, #232]	; (8019084 <etharp_raw+0x10c>)
 8018f9a:	f002 f989 	bl	801b2b0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018f9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018fa2:	211c      	movs	r1, #28
 8018fa4:	200e      	movs	r0, #14
 8018fa6:	f7f8 f88d 	bl	80110c4 <pbuf_alloc>
 8018faa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018fac:	69bb      	ldr	r3, [r7, #24]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d102      	bne.n	8018fb8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8018fb6:	e05d      	b.n	8019074 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018fb8:	69bb      	ldr	r3, [r7, #24]
 8018fba:	895b      	ldrh	r3, [r3, #10]
 8018fbc:	2b1b      	cmp	r3, #27
 8018fbe:	d806      	bhi.n	8018fce <etharp_raw+0x56>
 8018fc0:	4b2e      	ldr	r3, [pc, #184]	; (801907c <etharp_raw+0x104>)
 8018fc2:	f240 4262 	movw	r2, #1122	; 0x462
 8018fc6:	4930      	ldr	r1, [pc, #192]	; (8019088 <etharp_raw+0x110>)
 8018fc8:	482e      	ldr	r0, [pc, #184]	; (8019084 <etharp_raw+0x10c>)
 8018fca:	f002 f971 	bl	801b2b0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018fce:	69bb      	ldr	r3, [r7, #24]
 8018fd0:	685b      	ldr	r3, [r3, #4]
 8018fd2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018fd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	f7f6 ff54 	bl	800fe84 <lwip_htons>
 8018fdc:	4603      	mov	r3, r0
 8018fde:	461a      	mov	r2, r3
 8018fe0:	697b      	ldr	r3, [r7, #20]
 8018fe2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018fea:	2b06      	cmp	r3, #6
 8018fec:	d006      	beq.n	8018ffc <etharp_raw+0x84>
 8018fee:	4b23      	ldr	r3, [pc, #140]	; (801907c <etharp_raw+0x104>)
 8018ff0:	f240 4269 	movw	r2, #1129	; 0x469
 8018ff4:	4925      	ldr	r1, [pc, #148]	; (801908c <etharp_raw+0x114>)
 8018ff6:	4823      	ldr	r0, [pc, #140]	; (8019084 <etharp_raw+0x10c>)
 8018ff8:	f002 f95a 	bl	801b2b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018ffc:	697b      	ldr	r3, [r7, #20]
 8018ffe:	3308      	adds	r3, #8
 8019000:	2206      	movs	r2, #6
 8019002:	6839      	ldr	r1, [r7, #0]
 8019004:	4618      	mov	r0, r3
 8019006:	f002 fb76 	bl	801b6f6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801900a:	697b      	ldr	r3, [r7, #20]
 801900c:	3312      	adds	r3, #18
 801900e:	2206      	movs	r2, #6
 8019010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019012:	4618      	mov	r0, r3
 8019014:	f002 fb6f 	bl	801b6f6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019018:	697b      	ldr	r3, [r7, #20]
 801901a:	330e      	adds	r3, #14
 801901c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801901e:	6812      	ldr	r2, [r2, #0]
 8019020:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019022:	697b      	ldr	r3, [r7, #20]
 8019024:	3318      	adds	r3, #24
 8019026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019028:	6812      	ldr	r2, [r2, #0]
 801902a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801902c:	697b      	ldr	r3, [r7, #20]
 801902e:	2200      	movs	r2, #0
 8019030:	701a      	strb	r2, [r3, #0]
 8019032:	2200      	movs	r2, #0
 8019034:	f042 0201 	orr.w	r2, r2, #1
 8019038:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801903a:	697b      	ldr	r3, [r7, #20]
 801903c:	2200      	movs	r2, #0
 801903e:	f042 0208 	orr.w	r2, r2, #8
 8019042:	709a      	strb	r2, [r3, #2]
 8019044:	2200      	movs	r2, #0
 8019046:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019048:	697b      	ldr	r3, [r7, #20]
 801904a:	2206      	movs	r2, #6
 801904c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801904e:	697b      	ldr	r3, [r7, #20]
 8019050:	2204      	movs	r2, #4
 8019052:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019054:	f640 0306 	movw	r3, #2054	; 0x806
 8019058:	9300      	str	r3, [sp, #0]
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	68ba      	ldr	r2, [r7, #8]
 801905e:	69b9      	ldr	r1, [r7, #24]
 8019060:	68f8      	ldr	r0, [r7, #12]
 8019062:	f001 fba1 	bl	801a7a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019066:	69b8      	ldr	r0, [r7, #24]
 8019068:	f7f8 fb10 	bl	801168c <pbuf_free>
  p = NULL;
 801906c:	2300      	movs	r3, #0
 801906e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019070:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019074:	4618      	mov	r0, r3
 8019076:	3720      	adds	r7, #32
 8019078:	46bd      	mov	sp, r7
 801907a:	bd80      	pop	{r7, pc}
 801907c:	080206e0 	.word	0x080206e0
 8019080:	08020830 	.word	0x08020830
 8019084:	08020758 	.word	0x08020758
 8019088:	080208e0 	.word	0x080208e0
 801908c:	08020914 	.word	0x08020914

08019090 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b088      	sub	sp, #32
 8019094:	af04      	add	r7, sp, #16
 8019096:	60f8      	str	r0, [r7, #12]
 8019098:	60b9      	str	r1, [r7, #8]
 801909a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80190ac:	2201      	movs	r2, #1
 80190ae:	9203      	str	r2, [sp, #12]
 80190b0:	68ba      	ldr	r2, [r7, #8]
 80190b2:	9202      	str	r2, [sp, #8]
 80190b4:	4a06      	ldr	r2, [pc, #24]	; (80190d0 <etharp_request_dst+0x40>)
 80190b6:	9201      	str	r2, [sp, #4]
 80190b8:	9300      	str	r3, [sp, #0]
 80190ba:	4603      	mov	r3, r0
 80190bc:	687a      	ldr	r2, [r7, #4]
 80190be:	68f8      	ldr	r0, [r7, #12]
 80190c0:	f7ff ff5a 	bl	8018f78 <etharp_raw>
 80190c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80190c6:	4618      	mov	r0, r3
 80190c8:	3710      	adds	r7, #16
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bd80      	pop	{r7, pc}
 80190ce:	bf00      	nop
 80190d0:	08020ee8 	.word	0x08020ee8

080190d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b082      	sub	sp, #8
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
 80190dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80190de:	4a05      	ldr	r2, [pc, #20]	; (80190f4 <etharp_request+0x20>)
 80190e0:	6839      	ldr	r1, [r7, #0]
 80190e2:	6878      	ldr	r0, [r7, #4]
 80190e4:	f7ff ffd4 	bl	8019090 <etharp_request_dst>
 80190e8:	4603      	mov	r3, r0
}
 80190ea:	4618      	mov	r0, r3
 80190ec:	3708      	adds	r7, #8
 80190ee:	46bd      	mov	sp, r7
 80190f0:	bd80      	pop	{r7, pc}
 80190f2:	bf00      	nop
 80190f4:	08020ee0 	.word	0x08020ee0

080190f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b08e      	sub	sp, #56	; 0x38
 80190fc:	af04      	add	r7, sp, #16
 80190fe:	6078      	str	r0, [r7, #4]
 8019100:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019102:	4b87      	ldr	r3, [pc, #540]	; (8019320 <icmp_input+0x228>)
 8019104:	689b      	ldr	r3, [r3, #8]
 8019106:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801910a:	781b      	ldrb	r3, [r3, #0]
 801910c:	f003 030f 	and.w	r3, r3, #15
 8019110:	b2db      	uxtb	r3, r3
 8019112:	009b      	lsls	r3, r3, #2
 8019114:	b2db      	uxtb	r3, r3
 8019116:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019118:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801911a:	2b13      	cmp	r3, #19
 801911c:	f240 80e8 	bls.w	80192f0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	895b      	ldrh	r3, [r3, #10]
 8019124:	2b03      	cmp	r3, #3
 8019126:	f240 80e5 	bls.w	80192f4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	685b      	ldr	r3, [r3, #4]
 801912e:	781b      	ldrb	r3, [r3, #0]
 8019130:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019134:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019138:	2b00      	cmp	r3, #0
 801913a:	f000 80d2 	beq.w	80192e2 <icmp_input+0x1ea>
 801913e:	2b08      	cmp	r3, #8
 8019140:	f040 80d2 	bne.w	80192e8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019144:	4b77      	ldr	r3, [pc, #476]	; (8019324 <icmp_input+0x22c>)
 8019146:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019148:	4b75      	ldr	r3, [pc, #468]	; (8019320 <icmp_input+0x228>)
 801914a:	695b      	ldr	r3, [r3, #20]
 801914c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019150:	2be0      	cmp	r3, #224	; 0xe0
 8019152:	f000 80d6 	beq.w	8019302 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019156:	4b72      	ldr	r3, [pc, #456]	; (8019320 <icmp_input+0x228>)
 8019158:	695b      	ldr	r3, [r3, #20]
 801915a:	4a71      	ldr	r2, [pc, #452]	; (8019320 <icmp_input+0x228>)
 801915c:	6812      	ldr	r2, [r2, #0]
 801915e:	4611      	mov	r1, r2
 8019160:	4618      	mov	r0, r3
 8019162:	f000 fc13 	bl	801998c <ip4_addr_isbroadcast_u32>
 8019166:	4603      	mov	r3, r0
 8019168:	2b00      	cmp	r3, #0
 801916a:	f040 80cc 	bne.w	8019306 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	891b      	ldrh	r3, [r3, #8]
 8019172:	2b07      	cmp	r3, #7
 8019174:	f240 80c0 	bls.w	80192f8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8019178:	6878      	ldr	r0, [r7, #4]
 801917a:	f7f6 ff20 	bl	800ffbe <inet_chksum_pbuf>
 801917e:	4603      	mov	r3, r0
 8019180:	2b00      	cmp	r3, #0
 8019182:	d003      	beq.n	801918c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8019184:	6878      	ldr	r0, [r7, #4]
 8019186:	f7f8 fa81 	bl	801168c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801918a:	e0c5      	b.n	8019318 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801918c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801918e:	330e      	adds	r3, #14
 8019190:	4619      	mov	r1, r3
 8019192:	6878      	ldr	r0, [r7, #4]
 8019194:	f7f8 f9e4 	bl	8011560 <pbuf_add_header>
 8019198:	4603      	mov	r3, r0
 801919a:	2b00      	cmp	r3, #0
 801919c:	d04b      	beq.n	8019236 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	891a      	ldrh	r2, [r3, #8]
 80191a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191a4:	4413      	add	r3, r2
 80191a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	891b      	ldrh	r3, [r3, #8]
 80191ac:	8b7a      	ldrh	r2, [r7, #26]
 80191ae:	429a      	cmp	r2, r3
 80191b0:	f0c0 80ab 	bcc.w	801930a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80191b4:	8b7b      	ldrh	r3, [r7, #26]
 80191b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80191ba:	4619      	mov	r1, r3
 80191bc:	200e      	movs	r0, #14
 80191be:	f7f7 ff81 	bl	80110c4 <pbuf_alloc>
 80191c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80191c4:	697b      	ldr	r3, [r7, #20]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	f000 80a1 	beq.w	801930e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80191cc:	697b      	ldr	r3, [r7, #20]
 80191ce:	895b      	ldrh	r3, [r3, #10]
 80191d0:	461a      	mov	r2, r3
 80191d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191d4:	3308      	adds	r3, #8
 80191d6:	429a      	cmp	r2, r3
 80191d8:	d203      	bcs.n	80191e2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80191da:	6978      	ldr	r0, [r7, #20]
 80191dc:	f7f8 fa56 	bl	801168c <pbuf_free>
          goto icmperr;
 80191e0:	e096      	b.n	8019310 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80191e2:	697b      	ldr	r3, [r7, #20]
 80191e4:	685b      	ldr	r3, [r3, #4]
 80191e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80191e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80191ea:	4618      	mov	r0, r3
 80191ec:	f002 fa83 	bl	801b6f6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80191f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80191f2:	4619      	mov	r1, r3
 80191f4:	6978      	ldr	r0, [r7, #20]
 80191f6:	f7f8 f9c3 	bl	8011580 <pbuf_remove_header>
 80191fa:	4603      	mov	r3, r0
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d009      	beq.n	8019214 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019200:	4b49      	ldr	r3, [pc, #292]	; (8019328 <icmp_input+0x230>)
 8019202:	22b6      	movs	r2, #182	; 0xb6
 8019204:	4949      	ldr	r1, [pc, #292]	; (801932c <icmp_input+0x234>)
 8019206:	484a      	ldr	r0, [pc, #296]	; (8019330 <icmp_input+0x238>)
 8019208:	f002 f852 	bl	801b2b0 <iprintf>
          pbuf_free(r);
 801920c:	6978      	ldr	r0, [r7, #20]
 801920e:	f7f8 fa3d 	bl	801168c <pbuf_free>
          goto icmperr;
 8019212:	e07d      	b.n	8019310 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019214:	6879      	ldr	r1, [r7, #4]
 8019216:	6978      	ldr	r0, [r7, #20]
 8019218:	f7f8 fb50 	bl	80118bc <pbuf_copy>
 801921c:	4603      	mov	r3, r0
 801921e:	2b00      	cmp	r3, #0
 8019220:	d003      	beq.n	801922a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019222:	6978      	ldr	r0, [r7, #20]
 8019224:	f7f8 fa32 	bl	801168c <pbuf_free>
          goto icmperr;
 8019228:	e072      	b.n	8019310 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801922a:	6878      	ldr	r0, [r7, #4]
 801922c:	f7f8 fa2e 	bl	801168c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019230:	697b      	ldr	r3, [r7, #20]
 8019232:	607b      	str	r3, [r7, #4]
 8019234:	e00f      	b.n	8019256 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019236:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019238:	330e      	adds	r3, #14
 801923a:	4619      	mov	r1, r3
 801923c:	6878      	ldr	r0, [r7, #4]
 801923e:	f7f8 f99f 	bl	8011580 <pbuf_remove_header>
 8019242:	4603      	mov	r3, r0
 8019244:	2b00      	cmp	r3, #0
 8019246:	d006      	beq.n	8019256 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019248:	4b37      	ldr	r3, [pc, #220]	; (8019328 <icmp_input+0x230>)
 801924a:	22c7      	movs	r2, #199	; 0xc7
 801924c:	4939      	ldr	r1, [pc, #228]	; (8019334 <icmp_input+0x23c>)
 801924e:	4838      	ldr	r0, [pc, #224]	; (8019330 <icmp_input+0x238>)
 8019250:	f002 f82e 	bl	801b2b0 <iprintf>
          goto icmperr;
 8019254:	e05c      	b.n	8019310 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	685b      	ldr	r3, [r3, #4]
 801925a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801925c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801925e:	4619      	mov	r1, r3
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f7f8 f97d 	bl	8011560 <pbuf_add_header>
 8019266:	4603      	mov	r3, r0
 8019268:	2b00      	cmp	r3, #0
 801926a:	d13c      	bne.n	80192e6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	685b      	ldr	r3, [r3, #4]
 8019270:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019272:	69fb      	ldr	r3, [r7, #28]
 8019274:	681a      	ldr	r2, [r3, #0]
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801927a:	4b29      	ldr	r3, [pc, #164]	; (8019320 <icmp_input+0x228>)
 801927c:	691a      	ldr	r2, [r3, #16]
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019282:	693b      	ldr	r3, [r7, #16]
 8019284:	2200      	movs	r2, #0
 8019286:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019288:	693b      	ldr	r3, [r7, #16]
 801928a:	885b      	ldrh	r3, [r3, #2]
 801928c:	b29b      	uxth	r3, r3
 801928e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019292:	4293      	cmp	r3, r2
 8019294:	d907      	bls.n	80192a6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8019296:	693b      	ldr	r3, [r7, #16]
 8019298:	885b      	ldrh	r3, [r3, #2]
 801929a:	b29b      	uxth	r3, r3
 801929c:	3309      	adds	r3, #9
 801929e:	b29a      	uxth	r2, r3
 80192a0:	693b      	ldr	r3, [r7, #16]
 80192a2:	805a      	strh	r2, [r3, #2]
 80192a4:	e006      	b.n	80192b4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80192a6:	693b      	ldr	r3, [r7, #16]
 80192a8:	885b      	ldrh	r3, [r3, #2]
 80192aa:	b29b      	uxth	r3, r3
 80192ac:	3308      	adds	r3, #8
 80192ae:	b29a      	uxth	r2, r3
 80192b0:	693b      	ldr	r3, [r7, #16]
 80192b2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	22ff      	movs	r2, #255	; 0xff
 80192b8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	2200      	movs	r2, #0
 80192be:	729a      	strb	r2, [r3, #10]
 80192c0:	2200      	movs	r2, #0
 80192c2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80192c4:	683b      	ldr	r3, [r7, #0]
 80192c6:	9302      	str	r3, [sp, #8]
 80192c8:	2301      	movs	r3, #1
 80192ca:	9301      	str	r3, [sp, #4]
 80192cc:	2300      	movs	r3, #0
 80192ce:	9300      	str	r3, [sp, #0]
 80192d0:	23ff      	movs	r3, #255	; 0xff
 80192d2:	2200      	movs	r2, #0
 80192d4:	69f9      	ldr	r1, [r7, #28]
 80192d6:	6878      	ldr	r0, [r7, #4]
 80192d8:	f000 fa80 	bl	80197dc <ip4_output_if>
 80192dc:	4603      	mov	r3, r0
 80192de:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80192e0:	e001      	b.n	80192e6 <icmp_input+0x1ee>
      break;
 80192e2:	bf00      	nop
 80192e4:	e000      	b.n	80192e8 <icmp_input+0x1f0>
      break;
 80192e6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80192e8:	6878      	ldr	r0, [r7, #4]
 80192ea:	f7f8 f9cf 	bl	801168c <pbuf_free>
  return;
 80192ee:	e013      	b.n	8019318 <icmp_input+0x220>
    goto lenerr;
 80192f0:	bf00      	nop
 80192f2:	e002      	b.n	80192fa <icmp_input+0x202>
    goto lenerr;
 80192f4:	bf00      	nop
 80192f6:	e000      	b.n	80192fa <icmp_input+0x202>
        goto lenerr;
 80192f8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80192fa:	6878      	ldr	r0, [r7, #4]
 80192fc:	f7f8 f9c6 	bl	801168c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019300:	e00a      	b.n	8019318 <icmp_input+0x220>
        goto icmperr;
 8019302:	bf00      	nop
 8019304:	e004      	b.n	8019310 <icmp_input+0x218>
        goto icmperr;
 8019306:	bf00      	nop
 8019308:	e002      	b.n	8019310 <icmp_input+0x218>
          goto icmperr;
 801930a:	bf00      	nop
 801930c:	e000      	b.n	8019310 <icmp_input+0x218>
          goto icmperr;
 801930e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019310:	6878      	ldr	r0, [r7, #4]
 8019312:	f7f8 f9bb 	bl	801168c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019316:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019318:	3728      	adds	r7, #40	; 0x28
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}
 801931e:	bf00      	nop
 8019320:	200008e0 	.word	0x200008e0
 8019324:	200008f4 	.word	0x200008f4
 8019328:	08020958 	.word	0x08020958
 801932c:	08020990 	.word	0x08020990
 8019330:	080209c8 	.word	0x080209c8
 8019334:	080209f0 	.word	0x080209f0

08019338 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b082      	sub	sp, #8
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
 8019340:	460b      	mov	r3, r1
 8019342:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019344:	78fb      	ldrb	r3, [r7, #3]
 8019346:	461a      	mov	r2, r3
 8019348:	2103      	movs	r1, #3
 801934a:	6878      	ldr	r0, [r7, #4]
 801934c:	f000 f814 	bl	8019378 <icmp_send_response>
}
 8019350:	bf00      	nop
 8019352:	3708      	adds	r7, #8
 8019354:	46bd      	mov	sp, r7
 8019356:	bd80      	pop	{r7, pc}

08019358 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019358:	b580      	push	{r7, lr}
 801935a:	b082      	sub	sp, #8
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
 8019360:	460b      	mov	r3, r1
 8019362:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019364:	78fb      	ldrb	r3, [r7, #3]
 8019366:	461a      	mov	r2, r3
 8019368:	210b      	movs	r1, #11
 801936a:	6878      	ldr	r0, [r7, #4]
 801936c:	f000 f804 	bl	8019378 <icmp_send_response>
}
 8019370:	bf00      	nop
 8019372:	3708      	adds	r7, #8
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}

08019378 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b08c      	sub	sp, #48	; 0x30
 801937c:	af04      	add	r7, sp, #16
 801937e:	6078      	str	r0, [r7, #4]
 8019380:	460b      	mov	r3, r1
 8019382:	70fb      	strb	r3, [r7, #3]
 8019384:	4613      	mov	r3, r2
 8019386:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019388:	f44f 7220 	mov.w	r2, #640	; 0x280
 801938c:	2124      	movs	r1, #36	; 0x24
 801938e:	2022      	movs	r0, #34	; 0x22
 8019390:	f7f7 fe98 	bl	80110c4 <pbuf_alloc>
 8019394:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019396:	69fb      	ldr	r3, [r7, #28]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d056      	beq.n	801944a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801939c:	69fb      	ldr	r3, [r7, #28]
 801939e:	895b      	ldrh	r3, [r3, #10]
 80193a0:	2b23      	cmp	r3, #35	; 0x23
 80193a2:	d806      	bhi.n	80193b2 <icmp_send_response+0x3a>
 80193a4:	4b2b      	ldr	r3, [pc, #172]	; (8019454 <icmp_send_response+0xdc>)
 80193a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80193aa:	492b      	ldr	r1, [pc, #172]	; (8019458 <icmp_send_response+0xe0>)
 80193ac:	482b      	ldr	r0, [pc, #172]	; (801945c <icmp_send_response+0xe4>)
 80193ae:	f001 ff7f 	bl	801b2b0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	685b      	ldr	r3, [r3, #4]
 80193b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80193b8:	69fb      	ldr	r3, [r7, #28]
 80193ba:	685b      	ldr	r3, [r3, #4]
 80193bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80193be:	697b      	ldr	r3, [r7, #20]
 80193c0:	78fa      	ldrb	r2, [r7, #3]
 80193c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80193c4:	697b      	ldr	r3, [r7, #20]
 80193c6:	78ba      	ldrb	r2, [r7, #2]
 80193c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80193ca:	697b      	ldr	r3, [r7, #20]
 80193cc:	2200      	movs	r2, #0
 80193ce:	711a      	strb	r2, [r3, #4]
 80193d0:	2200      	movs	r2, #0
 80193d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80193d4:	697b      	ldr	r3, [r7, #20]
 80193d6:	2200      	movs	r2, #0
 80193d8:	719a      	strb	r2, [r3, #6]
 80193da:	2200      	movs	r2, #0
 80193dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80193de:	69fb      	ldr	r3, [r7, #28]
 80193e0:	685b      	ldr	r3, [r3, #4]
 80193e2:	f103 0008 	add.w	r0, r3, #8
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	685b      	ldr	r3, [r3, #4]
 80193ea:	221c      	movs	r2, #28
 80193ec:	4619      	mov	r1, r3
 80193ee:	f002 f982 	bl	801b6f6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80193f2:	69bb      	ldr	r3, [r7, #24]
 80193f4:	68db      	ldr	r3, [r3, #12]
 80193f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80193f8:	f107 030c 	add.w	r3, r7, #12
 80193fc:	4618      	mov	r0, r3
 80193fe:	f000 f82f 	bl	8019460 <ip4_route>
 8019402:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019404:	693b      	ldr	r3, [r7, #16]
 8019406:	2b00      	cmp	r3, #0
 8019408:	d01b      	beq.n	8019442 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	2200      	movs	r2, #0
 801940e:	709a      	strb	r2, [r3, #2]
 8019410:	2200      	movs	r2, #0
 8019412:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019414:	69fb      	ldr	r3, [r7, #28]
 8019416:	895b      	ldrh	r3, [r3, #10]
 8019418:	4619      	mov	r1, r3
 801941a:	6978      	ldr	r0, [r7, #20]
 801941c:	f7f6 fdbd 	bl	800ff9a <inet_chksum>
 8019420:	4603      	mov	r3, r0
 8019422:	461a      	mov	r2, r3
 8019424:	697b      	ldr	r3, [r7, #20]
 8019426:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019428:	f107 020c 	add.w	r2, r7, #12
 801942c:	693b      	ldr	r3, [r7, #16]
 801942e:	9302      	str	r3, [sp, #8]
 8019430:	2301      	movs	r3, #1
 8019432:	9301      	str	r3, [sp, #4]
 8019434:	2300      	movs	r3, #0
 8019436:	9300      	str	r3, [sp, #0]
 8019438:	23ff      	movs	r3, #255	; 0xff
 801943a:	2100      	movs	r1, #0
 801943c:	69f8      	ldr	r0, [r7, #28]
 801943e:	f000 f9cd 	bl	80197dc <ip4_output_if>
  }
  pbuf_free(q);
 8019442:	69f8      	ldr	r0, [r7, #28]
 8019444:	f7f8 f922 	bl	801168c <pbuf_free>
 8019448:	e000      	b.n	801944c <icmp_send_response+0xd4>
    return;
 801944a:	bf00      	nop
}
 801944c:	3720      	adds	r7, #32
 801944e:	46bd      	mov	sp, r7
 8019450:	bd80      	pop	{r7, pc}
 8019452:	bf00      	nop
 8019454:	08020958 	.word	0x08020958
 8019458:	08020a24 	.word	0x08020a24
 801945c:	080209c8 	.word	0x080209c8

08019460 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019460:	b480      	push	{r7}
 8019462:	b085      	sub	sp, #20
 8019464:	af00      	add	r7, sp, #0
 8019466:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019468:	4b33      	ldr	r3, [pc, #204]	; (8019538 <ip4_route+0xd8>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	60fb      	str	r3, [r7, #12]
 801946e:	e036      	b.n	80194de <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019476:	f003 0301 	and.w	r3, r3, #1
 801947a:	b2db      	uxtb	r3, r3
 801947c:	2b00      	cmp	r3, #0
 801947e:	d02b      	beq.n	80194d8 <ip4_route+0x78>
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019486:	089b      	lsrs	r3, r3, #2
 8019488:	f003 0301 	and.w	r3, r3, #1
 801948c:	b2db      	uxtb	r3, r3
 801948e:	2b00      	cmp	r3, #0
 8019490:	d022      	beq.n	80194d8 <ip4_route+0x78>
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	3304      	adds	r3, #4
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	2b00      	cmp	r3, #0
 801949a:	d01d      	beq.n	80194d8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	681a      	ldr	r2, [r3, #0]
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	3304      	adds	r3, #4
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	405a      	eors	r2, r3
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	3308      	adds	r3, #8
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	4013      	ands	r3, r2
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d101      	bne.n	80194b8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	e038      	b.n	801952a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80194be:	f003 0302 	and.w	r3, r3, #2
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d108      	bne.n	80194d8 <ip4_route+0x78>
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681a      	ldr	r2, [r3, #0]
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	330c      	adds	r3, #12
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	429a      	cmp	r2, r3
 80194d2:	d101      	bne.n	80194d8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	e028      	b.n	801952a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	60fb      	str	r3, [r7, #12]
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d1c5      	bne.n	8019470 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80194e4:	4b15      	ldr	r3, [pc, #84]	; (801953c <ip4_route+0xdc>)
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d01a      	beq.n	8019522 <ip4_route+0xc2>
 80194ec:	4b13      	ldr	r3, [pc, #76]	; (801953c <ip4_route+0xdc>)
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80194f4:	f003 0301 	and.w	r3, r3, #1
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d012      	beq.n	8019522 <ip4_route+0xc2>
 80194fc:	4b0f      	ldr	r3, [pc, #60]	; (801953c <ip4_route+0xdc>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019504:	f003 0304 	and.w	r3, r3, #4
 8019508:	2b00      	cmp	r3, #0
 801950a:	d00a      	beq.n	8019522 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801950c:	4b0b      	ldr	r3, [pc, #44]	; (801953c <ip4_route+0xdc>)
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	3304      	adds	r3, #4
 8019512:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019514:	2b00      	cmp	r3, #0
 8019516:	d004      	beq.n	8019522 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	b2db      	uxtb	r3, r3
 801951e:	2b7f      	cmp	r3, #127	; 0x7f
 8019520:	d101      	bne.n	8019526 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019522:	2300      	movs	r3, #0
 8019524:	e001      	b.n	801952a <ip4_route+0xca>
  }

  return netif_default;
 8019526:	4b05      	ldr	r3, [pc, #20]	; (801953c <ip4_route+0xdc>)
 8019528:	681b      	ldr	r3, [r3, #0]
}
 801952a:	4618      	mov	r0, r3
 801952c:	3714      	adds	r7, #20
 801952e:	46bd      	mov	sp, r7
 8019530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019534:	4770      	bx	lr
 8019536:	bf00      	nop
 8019538:	200071b0 	.word	0x200071b0
 801953c:	200071b4 	.word	0x200071b4

08019540 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b082      	sub	sp, #8
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801954e:	f003 0301 	and.w	r3, r3, #1
 8019552:	b2db      	uxtb	r3, r3
 8019554:	2b00      	cmp	r3, #0
 8019556:	d016      	beq.n	8019586 <ip4_input_accept+0x46>
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	3304      	adds	r3, #4
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d011      	beq.n	8019586 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019562:	4b0b      	ldr	r3, [pc, #44]	; (8019590 <ip4_input_accept+0x50>)
 8019564:	695a      	ldr	r2, [r3, #20]
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	3304      	adds	r3, #4
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	429a      	cmp	r2, r3
 801956e:	d008      	beq.n	8019582 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019570:	4b07      	ldr	r3, [pc, #28]	; (8019590 <ip4_input_accept+0x50>)
 8019572:	695b      	ldr	r3, [r3, #20]
 8019574:	6879      	ldr	r1, [r7, #4]
 8019576:	4618      	mov	r0, r3
 8019578:	f000 fa08 	bl	801998c <ip4_addr_isbroadcast_u32>
 801957c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801957e:	2b00      	cmp	r3, #0
 8019580:	d001      	beq.n	8019586 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019582:	2301      	movs	r3, #1
 8019584:	e000      	b.n	8019588 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019586:	2300      	movs	r3, #0
}
 8019588:	4618      	mov	r0, r3
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}
 8019590:	200008e0 	.word	0x200008e0

08019594 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b086      	sub	sp, #24
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
 801959c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	685b      	ldr	r3, [r3, #4]
 80195a2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80195a4:	697b      	ldr	r3, [r7, #20]
 80195a6:	781b      	ldrb	r3, [r3, #0]
 80195a8:	091b      	lsrs	r3, r3, #4
 80195aa:	b2db      	uxtb	r3, r3
 80195ac:	2b04      	cmp	r3, #4
 80195ae:	d004      	beq.n	80195ba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80195b0:	6878      	ldr	r0, [r7, #4]
 80195b2:	f7f8 f86b 	bl	801168c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80195b6:	2300      	movs	r3, #0
 80195b8:	e107      	b.n	80197ca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80195ba:	697b      	ldr	r3, [r7, #20]
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	f003 030f 	and.w	r3, r3, #15
 80195c2:	b2db      	uxtb	r3, r3
 80195c4:	009b      	lsls	r3, r3, #2
 80195c6:	b2db      	uxtb	r3, r3
 80195c8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80195ca:	697b      	ldr	r3, [r7, #20]
 80195cc:	885b      	ldrh	r3, [r3, #2]
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	4618      	mov	r0, r3
 80195d2:	f7f6 fc57 	bl	800fe84 <lwip_htons>
 80195d6:	4603      	mov	r3, r0
 80195d8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	891b      	ldrh	r3, [r3, #8]
 80195de:	89ba      	ldrh	r2, [r7, #12]
 80195e0:	429a      	cmp	r2, r3
 80195e2:	d204      	bcs.n	80195ee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80195e4:	89bb      	ldrh	r3, [r7, #12]
 80195e6:	4619      	mov	r1, r3
 80195e8:	6878      	ldr	r0, [r7, #4]
 80195ea:	f7f7 fecb 	bl	8011384 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	895b      	ldrh	r3, [r3, #10]
 80195f2:	89fa      	ldrh	r2, [r7, #14]
 80195f4:	429a      	cmp	r2, r3
 80195f6:	d807      	bhi.n	8019608 <ip4_input+0x74>
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	891b      	ldrh	r3, [r3, #8]
 80195fc:	89ba      	ldrh	r2, [r7, #12]
 80195fe:	429a      	cmp	r2, r3
 8019600:	d802      	bhi.n	8019608 <ip4_input+0x74>
 8019602:	89fb      	ldrh	r3, [r7, #14]
 8019604:	2b13      	cmp	r3, #19
 8019606:	d804      	bhi.n	8019612 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019608:	6878      	ldr	r0, [r7, #4]
 801960a:	f7f8 f83f 	bl	801168c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801960e:	2300      	movs	r3, #0
 8019610:	e0db      	b.n	80197ca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	691b      	ldr	r3, [r3, #16]
 8019616:	4a6f      	ldr	r2, [pc, #444]	; (80197d4 <ip4_input+0x240>)
 8019618:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801961a:	697b      	ldr	r3, [r7, #20]
 801961c:	68db      	ldr	r3, [r3, #12]
 801961e:	4a6d      	ldr	r2, [pc, #436]	; (80197d4 <ip4_input+0x240>)
 8019620:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019622:	4b6c      	ldr	r3, [pc, #432]	; (80197d4 <ip4_input+0x240>)
 8019624:	695b      	ldr	r3, [r3, #20]
 8019626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801962a:	2be0      	cmp	r3, #224	; 0xe0
 801962c:	d112      	bne.n	8019654 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801962e:	683b      	ldr	r3, [r7, #0]
 8019630:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019634:	f003 0301 	and.w	r3, r3, #1
 8019638:	b2db      	uxtb	r3, r3
 801963a:	2b00      	cmp	r3, #0
 801963c:	d007      	beq.n	801964e <ip4_input+0xba>
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	3304      	adds	r3, #4
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d002      	beq.n	801964e <ip4_input+0xba>
      netif = inp;
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	613b      	str	r3, [r7, #16]
 801964c:	e02a      	b.n	80196a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801964e:	2300      	movs	r3, #0
 8019650:	613b      	str	r3, [r7, #16]
 8019652:	e027      	b.n	80196a4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019654:	6838      	ldr	r0, [r7, #0]
 8019656:	f7ff ff73 	bl	8019540 <ip4_input_accept>
 801965a:	4603      	mov	r3, r0
 801965c:	2b00      	cmp	r3, #0
 801965e:	d002      	beq.n	8019666 <ip4_input+0xd2>
      netif = inp;
 8019660:	683b      	ldr	r3, [r7, #0]
 8019662:	613b      	str	r3, [r7, #16]
 8019664:	e01e      	b.n	80196a4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019666:	2300      	movs	r3, #0
 8019668:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801966a:	4b5a      	ldr	r3, [pc, #360]	; (80197d4 <ip4_input+0x240>)
 801966c:	695b      	ldr	r3, [r3, #20]
 801966e:	b2db      	uxtb	r3, r3
 8019670:	2b7f      	cmp	r3, #127	; 0x7f
 8019672:	d017      	beq.n	80196a4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019674:	4b58      	ldr	r3, [pc, #352]	; (80197d8 <ip4_input+0x244>)
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	613b      	str	r3, [r7, #16]
 801967a:	e00e      	b.n	801969a <ip4_input+0x106>
          if (netif == inp) {
 801967c:	693a      	ldr	r2, [r7, #16]
 801967e:	683b      	ldr	r3, [r7, #0]
 8019680:	429a      	cmp	r2, r3
 8019682:	d006      	beq.n	8019692 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019684:	6938      	ldr	r0, [r7, #16]
 8019686:	f7ff ff5b 	bl	8019540 <ip4_input_accept>
 801968a:	4603      	mov	r3, r0
 801968c:	2b00      	cmp	r3, #0
 801968e:	d108      	bne.n	80196a2 <ip4_input+0x10e>
 8019690:	e000      	b.n	8019694 <ip4_input+0x100>
            continue;
 8019692:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019694:	693b      	ldr	r3, [r7, #16]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	613b      	str	r3, [r7, #16]
 801969a:	693b      	ldr	r3, [r7, #16]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d1ed      	bne.n	801967c <ip4_input+0xe8>
 80196a0:	e000      	b.n	80196a4 <ip4_input+0x110>
            break;
 80196a2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80196a4:	4b4b      	ldr	r3, [pc, #300]	; (80197d4 <ip4_input+0x240>)
 80196a6:	691b      	ldr	r3, [r3, #16]
 80196a8:	6839      	ldr	r1, [r7, #0]
 80196aa:	4618      	mov	r0, r3
 80196ac:	f000 f96e 	bl	801998c <ip4_addr_isbroadcast_u32>
 80196b0:	4603      	mov	r3, r0
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d105      	bne.n	80196c2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80196b6:	4b47      	ldr	r3, [pc, #284]	; (80197d4 <ip4_input+0x240>)
 80196b8:	691b      	ldr	r3, [r3, #16]
 80196ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80196be:	2be0      	cmp	r3, #224	; 0xe0
 80196c0:	d104      	bne.n	80196cc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80196c2:	6878      	ldr	r0, [r7, #4]
 80196c4:	f7f7 ffe2 	bl	801168c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80196c8:	2300      	movs	r3, #0
 80196ca:	e07e      	b.n	80197ca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80196cc:	693b      	ldr	r3, [r7, #16]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d104      	bne.n	80196dc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80196d2:	6878      	ldr	r0, [r7, #4]
 80196d4:	f7f7 ffda 	bl	801168c <pbuf_free>
    return ERR_OK;
 80196d8:	2300      	movs	r3, #0
 80196da:	e076      	b.n	80197ca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	88db      	ldrh	r3, [r3, #6]
 80196e0:	b29b      	uxth	r3, r3
 80196e2:	461a      	mov	r2, r3
 80196e4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80196e8:	4013      	ands	r3, r2
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d00b      	beq.n	8019706 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80196ee:	6878      	ldr	r0, [r7, #4]
 80196f0:	f000 fc92 	bl	801a018 <ip4_reass>
 80196f4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d101      	bne.n	8019700 <ip4_input+0x16c>
      return ERR_OK;
 80196fc:	2300      	movs	r3, #0
 80196fe:	e064      	b.n	80197ca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	685b      	ldr	r3, [r3, #4]
 8019704:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019706:	4a33      	ldr	r2, [pc, #204]	; (80197d4 <ip4_input+0x240>)
 8019708:	693b      	ldr	r3, [r7, #16]
 801970a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801970c:	4a31      	ldr	r2, [pc, #196]	; (80197d4 <ip4_input+0x240>)
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019712:	4a30      	ldr	r2, [pc, #192]	; (80197d4 <ip4_input+0x240>)
 8019714:	697b      	ldr	r3, [r7, #20]
 8019716:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019718:	697b      	ldr	r3, [r7, #20]
 801971a:	781b      	ldrb	r3, [r3, #0]
 801971c:	f003 030f 	and.w	r3, r3, #15
 8019720:	b2db      	uxtb	r3, r3
 8019722:	009b      	lsls	r3, r3, #2
 8019724:	b2db      	uxtb	r3, r3
 8019726:	b29a      	uxth	r2, r3
 8019728:	4b2a      	ldr	r3, [pc, #168]	; (80197d4 <ip4_input+0x240>)
 801972a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801972c:	89fb      	ldrh	r3, [r7, #14]
 801972e:	4619      	mov	r1, r3
 8019730:	6878      	ldr	r0, [r7, #4]
 8019732:	f7f7 ff25 	bl	8011580 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019736:	697b      	ldr	r3, [r7, #20]
 8019738:	7a5b      	ldrb	r3, [r3, #9]
 801973a:	2b11      	cmp	r3, #17
 801973c:	d006      	beq.n	801974c <ip4_input+0x1b8>
 801973e:	2b11      	cmp	r3, #17
 8019740:	dc13      	bgt.n	801976a <ip4_input+0x1d6>
 8019742:	2b01      	cmp	r3, #1
 8019744:	d00c      	beq.n	8019760 <ip4_input+0x1cc>
 8019746:	2b06      	cmp	r3, #6
 8019748:	d005      	beq.n	8019756 <ip4_input+0x1c2>
 801974a:	e00e      	b.n	801976a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801974c:	6839      	ldr	r1, [r7, #0]
 801974e:	6878      	ldr	r0, [r7, #4]
 8019750:	f7fe fc42 	bl	8017fd8 <udp_input>
        break;
 8019754:	e026      	b.n	80197a4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019756:	6839      	ldr	r1, [r7, #0]
 8019758:	6878      	ldr	r0, [r7, #4]
 801975a:	f7fa f863 	bl	8013824 <tcp_input>
        break;
 801975e:	e021      	b.n	80197a4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019760:	6839      	ldr	r1, [r7, #0]
 8019762:	6878      	ldr	r0, [r7, #4]
 8019764:	f7ff fcc8 	bl	80190f8 <icmp_input>
        break;
 8019768:	e01c      	b.n	80197a4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801976a:	4b1a      	ldr	r3, [pc, #104]	; (80197d4 <ip4_input+0x240>)
 801976c:	695b      	ldr	r3, [r3, #20]
 801976e:	6939      	ldr	r1, [r7, #16]
 8019770:	4618      	mov	r0, r3
 8019772:	f000 f90b 	bl	801998c <ip4_addr_isbroadcast_u32>
 8019776:	4603      	mov	r3, r0
 8019778:	2b00      	cmp	r3, #0
 801977a:	d10f      	bne.n	801979c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801977c:	4b15      	ldr	r3, [pc, #84]	; (80197d4 <ip4_input+0x240>)
 801977e:	695b      	ldr	r3, [r3, #20]
 8019780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019784:	2be0      	cmp	r3, #224	; 0xe0
 8019786:	d009      	beq.n	801979c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801978c:	4619      	mov	r1, r3
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	f7f7 ff69 	bl	8011666 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019794:	2102      	movs	r1, #2
 8019796:	6878      	ldr	r0, [r7, #4]
 8019798:	f7ff fdce 	bl	8019338 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801979c:	6878      	ldr	r0, [r7, #4]
 801979e:	f7f7 ff75 	bl	801168c <pbuf_free>
        break;
 80197a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80197a4:	4b0b      	ldr	r3, [pc, #44]	; (80197d4 <ip4_input+0x240>)
 80197a6:	2200      	movs	r2, #0
 80197a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80197aa:	4b0a      	ldr	r3, [pc, #40]	; (80197d4 <ip4_input+0x240>)
 80197ac:	2200      	movs	r2, #0
 80197ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80197b0:	4b08      	ldr	r3, [pc, #32]	; (80197d4 <ip4_input+0x240>)
 80197b2:	2200      	movs	r2, #0
 80197b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80197b6:	4b07      	ldr	r3, [pc, #28]	; (80197d4 <ip4_input+0x240>)
 80197b8:	2200      	movs	r2, #0
 80197ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80197bc:	4b05      	ldr	r3, [pc, #20]	; (80197d4 <ip4_input+0x240>)
 80197be:	2200      	movs	r2, #0
 80197c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80197c2:	4b04      	ldr	r3, [pc, #16]	; (80197d4 <ip4_input+0x240>)
 80197c4:	2200      	movs	r2, #0
 80197c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80197c8:	2300      	movs	r3, #0
}
 80197ca:	4618      	mov	r0, r3
 80197cc:	3718      	adds	r7, #24
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bd80      	pop	{r7, pc}
 80197d2:	bf00      	nop
 80197d4:	200008e0 	.word	0x200008e0
 80197d8:	200071b0 	.word	0x200071b0

080197dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b08a      	sub	sp, #40	; 0x28
 80197e0:	af04      	add	r7, sp, #16
 80197e2:	60f8      	str	r0, [r7, #12]
 80197e4:	60b9      	str	r1, [r7, #8]
 80197e6:	607a      	str	r2, [r7, #4]
 80197e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80197ea:	68bb      	ldr	r3, [r7, #8]
 80197ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d009      	beq.n	8019808 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d003      	beq.n	8019802 <ip4_output_if+0x26>
 80197fa:	68bb      	ldr	r3, [r7, #8]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d102      	bne.n	8019808 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019804:	3304      	adds	r3, #4
 8019806:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019808:	78fa      	ldrb	r2, [r7, #3]
 801980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801980c:	9302      	str	r3, [sp, #8]
 801980e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019812:	9301      	str	r3, [sp, #4]
 8019814:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019818:	9300      	str	r3, [sp, #0]
 801981a:	4613      	mov	r3, r2
 801981c:	687a      	ldr	r2, [r7, #4]
 801981e:	6979      	ldr	r1, [r7, #20]
 8019820:	68f8      	ldr	r0, [r7, #12]
 8019822:	f000 f805 	bl	8019830 <ip4_output_if_src>
 8019826:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019828:	4618      	mov	r0, r3
 801982a:	3718      	adds	r7, #24
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}

08019830 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b088      	sub	sp, #32
 8019834:	af00      	add	r7, sp, #0
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	60b9      	str	r1, [r7, #8]
 801983a:	607a      	str	r2, [r7, #4]
 801983c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	7b9b      	ldrb	r3, [r3, #14]
 8019842:	2b01      	cmp	r3, #1
 8019844:	d006      	beq.n	8019854 <ip4_output_if_src+0x24>
 8019846:	4b4b      	ldr	r3, [pc, #300]	; (8019974 <ip4_output_if_src+0x144>)
 8019848:	f44f 7255 	mov.w	r2, #852	; 0x354
 801984c:	494a      	ldr	r1, [pc, #296]	; (8019978 <ip4_output_if_src+0x148>)
 801984e:	484b      	ldr	r0, [pc, #300]	; (801997c <ip4_output_if_src+0x14c>)
 8019850:	f001 fd2e 	bl	801b2b0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d060      	beq.n	801991c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801985a:	2314      	movs	r3, #20
 801985c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801985e:	2114      	movs	r1, #20
 8019860:	68f8      	ldr	r0, [r7, #12]
 8019862:	f7f7 fe7d 	bl	8011560 <pbuf_add_header>
 8019866:	4603      	mov	r3, r0
 8019868:	2b00      	cmp	r3, #0
 801986a:	d002      	beq.n	8019872 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801986c:	f06f 0301 	mvn.w	r3, #1
 8019870:	e07c      	b.n	801996c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	685b      	ldr	r3, [r3, #4]
 8019876:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	895b      	ldrh	r3, [r3, #10]
 801987c:	2b13      	cmp	r3, #19
 801987e:	d806      	bhi.n	801988e <ip4_output_if_src+0x5e>
 8019880:	4b3c      	ldr	r3, [pc, #240]	; (8019974 <ip4_output_if_src+0x144>)
 8019882:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019886:	493e      	ldr	r1, [pc, #248]	; (8019980 <ip4_output_if_src+0x150>)
 8019888:	483c      	ldr	r0, [pc, #240]	; (801997c <ip4_output_if_src+0x14c>)
 801988a:	f001 fd11 	bl	801b2b0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801988e:	69fb      	ldr	r3, [r7, #28]
 8019890:	78fa      	ldrb	r2, [r7, #3]
 8019892:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019894:	69fb      	ldr	r3, [r7, #28]
 8019896:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801989a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	681a      	ldr	r2, [r3, #0]
 80198a0:	69fb      	ldr	r3, [r7, #28]
 80198a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80198a4:	8b7b      	ldrh	r3, [r7, #26]
 80198a6:	089b      	lsrs	r3, r3, #2
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	b2db      	uxtb	r3, r3
 80198ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198b0:	b2da      	uxtb	r2, r3
 80198b2:	69fb      	ldr	r3, [r7, #28]
 80198b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80198b6:	69fb      	ldr	r3, [r7, #28]
 80198b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80198bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	891b      	ldrh	r3, [r3, #8]
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7f6 fade 	bl	800fe84 <lwip_htons>
 80198c8:	4603      	mov	r3, r0
 80198ca:	461a      	mov	r2, r3
 80198cc:	69fb      	ldr	r3, [r7, #28]
 80198ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80198d0:	69fb      	ldr	r3, [r7, #28]
 80198d2:	2200      	movs	r2, #0
 80198d4:	719a      	strb	r2, [r3, #6]
 80198d6:	2200      	movs	r2, #0
 80198d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80198da:	4b2a      	ldr	r3, [pc, #168]	; (8019984 <ip4_output_if_src+0x154>)
 80198dc:	881b      	ldrh	r3, [r3, #0]
 80198de:	4618      	mov	r0, r3
 80198e0:	f7f6 fad0 	bl	800fe84 <lwip_htons>
 80198e4:	4603      	mov	r3, r0
 80198e6:	461a      	mov	r2, r3
 80198e8:	69fb      	ldr	r3, [r7, #28]
 80198ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80198ec:	4b25      	ldr	r3, [pc, #148]	; (8019984 <ip4_output_if_src+0x154>)
 80198ee:	881b      	ldrh	r3, [r3, #0]
 80198f0:	3301      	adds	r3, #1
 80198f2:	b29a      	uxth	r2, r3
 80198f4:	4b23      	ldr	r3, [pc, #140]	; (8019984 <ip4_output_if_src+0x154>)
 80198f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d104      	bne.n	8019908 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80198fe:	4b22      	ldr	r3, [pc, #136]	; (8019988 <ip4_output_if_src+0x158>)
 8019900:	681a      	ldr	r2, [r3, #0]
 8019902:	69fb      	ldr	r3, [r7, #28]
 8019904:	60da      	str	r2, [r3, #12]
 8019906:	e003      	b.n	8019910 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019908:	68bb      	ldr	r3, [r7, #8]
 801990a:	681a      	ldr	r2, [r3, #0]
 801990c:	69fb      	ldr	r3, [r7, #28]
 801990e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019910:	69fb      	ldr	r3, [r7, #28]
 8019912:	2200      	movs	r2, #0
 8019914:	729a      	strb	r2, [r3, #10]
 8019916:	2200      	movs	r2, #0
 8019918:	72da      	strb	r2, [r3, #11]
 801991a:	e00f      	b.n	801993c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	895b      	ldrh	r3, [r3, #10]
 8019920:	2b13      	cmp	r3, #19
 8019922:	d802      	bhi.n	801992a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019924:	f06f 0301 	mvn.w	r3, #1
 8019928:	e020      	b.n	801996c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	685b      	ldr	r3, [r3, #4]
 801992e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019930:	69fb      	ldr	r3, [r7, #28]
 8019932:	691b      	ldr	r3, [r3, #16]
 8019934:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019936:	f107 0314 	add.w	r3, r7, #20
 801993a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801993e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019940:	2b00      	cmp	r3, #0
 8019942:	d00c      	beq.n	801995e <ip4_output_if_src+0x12e>
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	891a      	ldrh	r2, [r3, #8]
 8019948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801994a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801994c:	429a      	cmp	r2, r3
 801994e:	d906      	bls.n	801995e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019950:	687a      	ldr	r2, [r7, #4]
 8019952:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019954:	68f8      	ldr	r0, [r7, #12]
 8019956:	f000 fd53 	bl	801a400 <ip4_frag>
 801995a:	4603      	mov	r3, r0
 801995c:	e006      	b.n	801996c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019960:	695b      	ldr	r3, [r3, #20]
 8019962:	687a      	ldr	r2, [r7, #4]
 8019964:	68f9      	ldr	r1, [r7, #12]
 8019966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019968:	4798      	blx	r3
 801996a:	4603      	mov	r3, r0
}
 801996c:	4618      	mov	r0, r3
 801996e:	3720      	adds	r7, #32
 8019970:	46bd      	mov	sp, r7
 8019972:	bd80      	pop	{r7, pc}
 8019974:	08020a50 	.word	0x08020a50
 8019978:	08020a84 	.word	0x08020a84
 801997c:	08020a90 	.word	0x08020a90
 8019980:	08020ab8 	.word	0x08020ab8
 8019984:	2000730e 	.word	0x2000730e
 8019988:	08020edc 	.word	0x08020edc

0801998c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801998c:	b480      	push	{r7}
 801998e:	b085      	sub	sp, #20
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
 8019994:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199a0:	d002      	beq.n	80199a8 <ip4_addr_isbroadcast_u32+0x1c>
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d101      	bne.n	80199ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80199a8:	2301      	movs	r3, #1
 80199aa:	e02a      	b.n	8019a02 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80199ac:	683b      	ldr	r3, [r7, #0]
 80199ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80199b2:	f003 0302 	and.w	r3, r3, #2
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d101      	bne.n	80199be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80199ba:	2300      	movs	r3, #0
 80199bc:	e021      	b.n	8019a02 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80199be:	683b      	ldr	r3, [r7, #0]
 80199c0:	3304      	adds	r3, #4
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	429a      	cmp	r2, r3
 80199c8:	d101      	bne.n	80199ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80199ca:	2300      	movs	r3, #0
 80199cc:	e019      	b.n	8019a02 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80199ce:	68fa      	ldr	r2, [r7, #12]
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	3304      	adds	r3, #4
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	405a      	eors	r2, r3
 80199d8:	683b      	ldr	r3, [r7, #0]
 80199da:	3308      	adds	r3, #8
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	4013      	ands	r3, r2
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d10d      	bne.n	8019a00 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	3308      	adds	r3, #8
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	43da      	mvns	r2, r3
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	3308      	adds	r3, #8
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80199f8:	429a      	cmp	r2, r3
 80199fa:	d101      	bne.n	8019a00 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80199fc:	2301      	movs	r3, #1
 80199fe:	e000      	b.n	8019a02 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019a00:	2300      	movs	r3, #0
  }
}
 8019a02:	4618      	mov	r0, r3
 8019a04:	3714      	adds	r7, #20
 8019a06:	46bd      	mov	sp, r7
 8019a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a0c:	4770      	bx	lr
	...

08019a10 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019a10:	b580      	push	{r7, lr}
 8019a12:	b084      	sub	sp, #16
 8019a14:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019a16:	2300      	movs	r3, #0
 8019a18:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019a1a:	4b12      	ldr	r3, [pc, #72]	; (8019a64 <ip_reass_tmr+0x54>)
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019a20:	e018      	b.n	8019a54 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	7fdb      	ldrb	r3, [r3, #31]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d00b      	beq.n	8019a42 <ip_reass_tmr+0x32>
      r->timer--;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	7fdb      	ldrb	r3, [r3, #31]
 8019a2e:	3b01      	subs	r3, #1
 8019a30:	b2da      	uxtb	r2, r3
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019a36:	68fb      	ldr	r3, [r7, #12]
 8019a38:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	60fb      	str	r3, [r7, #12]
 8019a40:	e008      	b.n	8019a54 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019a4c:	68b9      	ldr	r1, [r7, #8]
 8019a4e:	6878      	ldr	r0, [r7, #4]
 8019a50:	f000 f80a 	bl	8019a68 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d1e3      	bne.n	8019a22 <ip_reass_tmr+0x12>
    }
  }
}
 8019a5a:	bf00      	nop
 8019a5c:	bf00      	nop
 8019a5e:	3710      	adds	r7, #16
 8019a60:	46bd      	mov	sp, r7
 8019a62:	bd80      	pop	{r7, pc}
 8019a64:	20007310 	.word	0x20007310

08019a68 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b088      	sub	sp, #32
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
 8019a70:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019a72:	2300      	movs	r3, #0
 8019a74:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019a76:	683a      	ldr	r2, [r7, #0]
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	429a      	cmp	r2, r3
 8019a7c:	d105      	bne.n	8019a8a <ip_reass_free_complete_datagram+0x22>
 8019a7e:	4b45      	ldr	r3, [pc, #276]	; (8019b94 <ip_reass_free_complete_datagram+0x12c>)
 8019a80:	22ab      	movs	r2, #171	; 0xab
 8019a82:	4945      	ldr	r1, [pc, #276]	; (8019b98 <ip_reass_free_complete_datagram+0x130>)
 8019a84:	4845      	ldr	r0, [pc, #276]	; (8019b9c <ip_reass_free_complete_datagram+0x134>)
 8019a86:	f001 fc13 	bl	801b2b0 <iprintf>
  if (prev != NULL) {
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d00a      	beq.n	8019aa6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019a90:	683b      	ldr	r3, [r7, #0]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	687a      	ldr	r2, [r7, #4]
 8019a96:	429a      	cmp	r2, r3
 8019a98:	d005      	beq.n	8019aa6 <ip_reass_free_complete_datagram+0x3e>
 8019a9a:	4b3e      	ldr	r3, [pc, #248]	; (8019b94 <ip_reass_free_complete_datagram+0x12c>)
 8019a9c:	22ad      	movs	r2, #173	; 0xad
 8019a9e:	4940      	ldr	r1, [pc, #256]	; (8019ba0 <ip_reass_free_complete_datagram+0x138>)
 8019aa0:	483e      	ldr	r0, [pc, #248]	; (8019b9c <ip_reass_free_complete_datagram+0x134>)
 8019aa2:	f001 fc05 	bl	801b2b0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	685b      	ldr	r3, [r3, #4]
 8019aaa:	685b      	ldr	r3, [r3, #4]
 8019aac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019aae:	697b      	ldr	r3, [r7, #20]
 8019ab0:	889b      	ldrh	r3, [r3, #4]
 8019ab2:	b29b      	uxth	r3, r3
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d12a      	bne.n	8019b0e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	685b      	ldr	r3, [r3, #4]
 8019abc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019abe:	697b      	ldr	r3, [r7, #20]
 8019ac0:	681a      	ldr	r2, [r3, #0]
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019ac6:	69bb      	ldr	r3, [r7, #24]
 8019ac8:	6858      	ldr	r0, [r3, #4]
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	3308      	adds	r3, #8
 8019ace:	2214      	movs	r2, #20
 8019ad0:	4619      	mov	r1, r3
 8019ad2:	f001 fe10 	bl	801b6f6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019ad6:	2101      	movs	r1, #1
 8019ad8:	69b8      	ldr	r0, [r7, #24]
 8019ada:	f7ff fc3d 	bl	8019358 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019ade:	69b8      	ldr	r0, [r7, #24]
 8019ae0:	f7f7 fe5c 	bl	801179c <pbuf_clen>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019ae8:	8bfa      	ldrh	r2, [r7, #30]
 8019aea:	8a7b      	ldrh	r3, [r7, #18]
 8019aec:	4413      	add	r3, r2
 8019aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019af2:	db05      	blt.n	8019b00 <ip_reass_free_complete_datagram+0x98>
 8019af4:	4b27      	ldr	r3, [pc, #156]	; (8019b94 <ip_reass_free_complete_datagram+0x12c>)
 8019af6:	22bc      	movs	r2, #188	; 0xbc
 8019af8:	492a      	ldr	r1, [pc, #168]	; (8019ba4 <ip_reass_free_complete_datagram+0x13c>)
 8019afa:	4828      	ldr	r0, [pc, #160]	; (8019b9c <ip_reass_free_complete_datagram+0x134>)
 8019afc:	f001 fbd8 	bl	801b2b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b00:	8bfa      	ldrh	r2, [r7, #30]
 8019b02:	8a7b      	ldrh	r3, [r7, #18]
 8019b04:	4413      	add	r3, r2
 8019b06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019b08:	69b8      	ldr	r0, [r7, #24]
 8019b0a:	f7f7 fdbf 	bl	801168c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	685b      	ldr	r3, [r3, #4]
 8019b12:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019b14:	e01f      	b.n	8019b56 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019b16:	69bb      	ldr	r3, [r7, #24]
 8019b18:	685b      	ldr	r3, [r3, #4]
 8019b1a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019b1c:	69bb      	ldr	r3, [r7, #24]
 8019b1e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019b20:	697b      	ldr	r3, [r7, #20]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019b26:	68f8      	ldr	r0, [r7, #12]
 8019b28:	f7f7 fe38 	bl	801179c <pbuf_clen>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019b30:	8bfa      	ldrh	r2, [r7, #30]
 8019b32:	8a7b      	ldrh	r3, [r7, #18]
 8019b34:	4413      	add	r3, r2
 8019b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019b3a:	db05      	blt.n	8019b48 <ip_reass_free_complete_datagram+0xe0>
 8019b3c:	4b15      	ldr	r3, [pc, #84]	; (8019b94 <ip_reass_free_complete_datagram+0x12c>)
 8019b3e:	22cc      	movs	r2, #204	; 0xcc
 8019b40:	4918      	ldr	r1, [pc, #96]	; (8019ba4 <ip_reass_free_complete_datagram+0x13c>)
 8019b42:	4816      	ldr	r0, [pc, #88]	; (8019b9c <ip_reass_free_complete_datagram+0x134>)
 8019b44:	f001 fbb4 	bl	801b2b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b48:	8bfa      	ldrh	r2, [r7, #30]
 8019b4a:	8a7b      	ldrh	r3, [r7, #18]
 8019b4c:	4413      	add	r3, r2
 8019b4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019b50:	68f8      	ldr	r0, [r7, #12]
 8019b52:	f7f7 fd9b 	bl	801168c <pbuf_free>
  while (p != NULL) {
 8019b56:	69bb      	ldr	r3, [r7, #24]
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d1dc      	bne.n	8019b16 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019b5c:	6839      	ldr	r1, [r7, #0]
 8019b5e:	6878      	ldr	r0, [r7, #4]
 8019b60:	f000 f8c2 	bl	8019ce8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019b64:	4b10      	ldr	r3, [pc, #64]	; (8019ba8 <ip_reass_free_complete_datagram+0x140>)
 8019b66:	881b      	ldrh	r3, [r3, #0]
 8019b68:	8bfa      	ldrh	r2, [r7, #30]
 8019b6a:	429a      	cmp	r2, r3
 8019b6c:	d905      	bls.n	8019b7a <ip_reass_free_complete_datagram+0x112>
 8019b6e:	4b09      	ldr	r3, [pc, #36]	; (8019b94 <ip_reass_free_complete_datagram+0x12c>)
 8019b70:	22d2      	movs	r2, #210	; 0xd2
 8019b72:	490e      	ldr	r1, [pc, #56]	; (8019bac <ip_reass_free_complete_datagram+0x144>)
 8019b74:	4809      	ldr	r0, [pc, #36]	; (8019b9c <ip_reass_free_complete_datagram+0x134>)
 8019b76:	f001 fb9b 	bl	801b2b0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019b7a:	4b0b      	ldr	r3, [pc, #44]	; (8019ba8 <ip_reass_free_complete_datagram+0x140>)
 8019b7c:	881a      	ldrh	r2, [r3, #0]
 8019b7e:	8bfb      	ldrh	r3, [r7, #30]
 8019b80:	1ad3      	subs	r3, r2, r3
 8019b82:	b29a      	uxth	r2, r3
 8019b84:	4b08      	ldr	r3, [pc, #32]	; (8019ba8 <ip_reass_free_complete_datagram+0x140>)
 8019b86:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019b88:	8bfb      	ldrh	r3, [r7, #30]
}
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	3720      	adds	r7, #32
 8019b8e:	46bd      	mov	sp, r7
 8019b90:	bd80      	pop	{r7, pc}
 8019b92:	bf00      	nop
 8019b94:	08020ae8 	.word	0x08020ae8
 8019b98:	08020b24 	.word	0x08020b24
 8019b9c:	08020b30 	.word	0x08020b30
 8019ba0:	08020b58 	.word	0x08020b58
 8019ba4:	08020b6c 	.word	0x08020b6c
 8019ba8:	20007314 	.word	0x20007314
 8019bac:	08020b8c 	.word	0x08020b8c

08019bb0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019bb0:	b580      	push	{r7, lr}
 8019bb2:	b08a      	sub	sp, #40	; 0x28
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	6078      	str	r0, [r7, #4]
 8019bb8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019bba:	2300      	movs	r3, #0
 8019bbc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019bca:	2300      	movs	r3, #0
 8019bcc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019bce:	4b28      	ldr	r3, [pc, #160]	; (8019c70 <ip_reass_remove_oldest_datagram+0xc0>)
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019bd4:	e030      	b.n	8019c38 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bd8:	695a      	ldr	r2, [r3, #20]
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	68db      	ldr	r3, [r3, #12]
 8019bde:	429a      	cmp	r2, r3
 8019be0:	d10c      	bne.n	8019bfc <ip_reass_remove_oldest_datagram+0x4c>
 8019be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be4:	699a      	ldr	r2, [r3, #24]
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	691b      	ldr	r3, [r3, #16]
 8019bea:	429a      	cmp	r2, r3
 8019bec:	d106      	bne.n	8019bfc <ip_reass_remove_oldest_datagram+0x4c>
 8019bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf0:	899a      	ldrh	r2, [r3, #12]
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	889b      	ldrh	r3, [r3, #4]
 8019bf6:	b29b      	uxth	r3, r3
 8019bf8:	429a      	cmp	r2, r3
 8019bfa:	d014      	beq.n	8019c26 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019bfc:	693b      	ldr	r3, [r7, #16]
 8019bfe:	3301      	adds	r3, #1
 8019c00:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019c02:	6a3b      	ldr	r3, [r7, #32]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d104      	bne.n	8019c12 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c0a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c0c:	69fb      	ldr	r3, [r7, #28]
 8019c0e:	61bb      	str	r3, [r7, #24]
 8019c10:	e009      	b.n	8019c26 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c14:	7fda      	ldrb	r2, [r3, #31]
 8019c16:	6a3b      	ldr	r3, [r7, #32]
 8019c18:	7fdb      	ldrb	r3, [r3, #31]
 8019c1a:	429a      	cmp	r2, r3
 8019c1c:	d803      	bhi.n	8019c26 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c20:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c22:	69fb      	ldr	r3, [r7, #28]
 8019c24:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d001      	beq.n	8019c32 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c30:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d1cb      	bne.n	8019bd6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019c3e:	6a3b      	ldr	r3, [r7, #32]
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d008      	beq.n	8019c56 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019c44:	69b9      	ldr	r1, [r7, #24]
 8019c46:	6a38      	ldr	r0, [r7, #32]
 8019c48:	f7ff ff0e 	bl	8019a68 <ip_reass_free_complete_datagram>
 8019c4c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019c4e:	697a      	ldr	r2, [r7, #20]
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	4413      	add	r3, r2
 8019c54:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019c56:	697a      	ldr	r2, [r7, #20]
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	429a      	cmp	r2, r3
 8019c5c:	da02      	bge.n	8019c64 <ip_reass_remove_oldest_datagram+0xb4>
 8019c5e:	693b      	ldr	r3, [r7, #16]
 8019c60:	2b01      	cmp	r3, #1
 8019c62:	dcac      	bgt.n	8019bbe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019c64:	697b      	ldr	r3, [r7, #20]
}
 8019c66:	4618      	mov	r0, r3
 8019c68:	3728      	adds	r7, #40	; 0x28
 8019c6a:	46bd      	mov	sp, r7
 8019c6c:	bd80      	pop	{r7, pc}
 8019c6e:	bf00      	nop
 8019c70:	20007310 	.word	0x20007310

08019c74 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b084      	sub	sp, #16
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	6078      	str	r0, [r7, #4]
 8019c7c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c7e:	2004      	movs	r0, #4
 8019c80:	f7f6 fe1e 	bl	80108c0 <memp_malloc>
 8019c84:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d110      	bne.n	8019cae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019c8c:	6839      	ldr	r1, [r7, #0]
 8019c8e:	6878      	ldr	r0, [r7, #4]
 8019c90:	f7ff ff8e 	bl	8019bb0 <ip_reass_remove_oldest_datagram>
 8019c94:	4602      	mov	r2, r0
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	4293      	cmp	r3, r2
 8019c9a:	dc03      	bgt.n	8019ca4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c9c:	2004      	movs	r0, #4
 8019c9e:	f7f6 fe0f 	bl	80108c0 <memp_malloc>
 8019ca2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d101      	bne.n	8019cae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019caa:	2300      	movs	r3, #0
 8019cac:	e016      	b.n	8019cdc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019cae:	2220      	movs	r2, #32
 8019cb0:	2100      	movs	r1, #0
 8019cb2:	68f8      	ldr	r0, [r7, #12]
 8019cb4:	f001 fc8c 	bl	801b5d0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	220f      	movs	r2, #15
 8019cbc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019cbe:	4b09      	ldr	r3, [pc, #36]	; (8019ce4 <ip_reass_enqueue_new_datagram+0x70>)
 8019cc0:	681a      	ldr	r2, [r3, #0]
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019cc6:	4a07      	ldr	r2, [pc, #28]	; (8019ce4 <ip_reass_enqueue_new_datagram+0x70>)
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	3308      	adds	r3, #8
 8019cd0:	2214      	movs	r2, #20
 8019cd2:	6879      	ldr	r1, [r7, #4]
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	f001 fd0e 	bl	801b6f6 <memcpy>
  return ipr;
 8019cda:	68fb      	ldr	r3, [r7, #12]
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3710      	adds	r7, #16
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}
 8019ce4:	20007310 	.word	0x20007310

08019ce8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019ce8:	b580      	push	{r7, lr}
 8019cea:	b082      	sub	sp, #8
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
 8019cf0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019cf2:	4b10      	ldr	r3, [pc, #64]	; (8019d34 <ip_reass_dequeue_datagram+0x4c>)
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	687a      	ldr	r2, [r7, #4]
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	d104      	bne.n	8019d06 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	4a0c      	ldr	r2, [pc, #48]	; (8019d34 <ip_reass_dequeue_datagram+0x4c>)
 8019d02:	6013      	str	r3, [r2, #0]
 8019d04:	e00d      	b.n	8019d22 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019d06:	683b      	ldr	r3, [r7, #0]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d106      	bne.n	8019d1a <ip_reass_dequeue_datagram+0x32>
 8019d0c:	4b0a      	ldr	r3, [pc, #40]	; (8019d38 <ip_reass_dequeue_datagram+0x50>)
 8019d0e:	f240 1245 	movw	r2, #325	; 0x145
 8019d12:	490a      	ldr	r1, [pc, #40]	; (8019d3c <ip_reass_dequeue_datagram+0x54>)
 8019d14:	480a      	ldr	r0, [pc, #40]	; (8019d40 <ip_reass_dequeue_datagram+0x58>)
 8019d16:	f001 facb 	bl	801b2b0 <iprintf>
    prev->next = ipr->next;
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	681a      	ldr	r2, [r3, #0]
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019d22:	6879      	ldr	r1, [r7, #4]
 8019d24:	2004      	movs	r0, #4
 8019d26:	f7f6 fe3b 	bl	80109a0 <memp_free>
}
 8019d2a:	bf00      	nop
 8019d2c:	3708      	adds	r7, #8
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	bd80      	pop	{r7, pc}
 8019d32:	bf00      	nop
 8019d34:	20007310 	.word	0x20007310
 8019d38:	08020ae8 	.word	0x08020ae8
 8019d3c:	08020bb0 	.word	0x08020bb0
 8019d40:	08020b30 	.word	0x08020b30

08019d44 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b08c      	sub	sp, #48	; 0x30
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	60f8      	str	r0, [r7, #12]
 8019d4c:	60b9      	str	r1, [r7, #8]
 8019d4e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019d50:	2300      	movs	r3, #0
 8019d52:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019d54:	2301      	movs	r3, #1
 8019d56:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019d58:	68bb      	ldr	r3, [r7, #8]
 8019d5a:	685b      	ldr	r3, [r3, #4]
 8019d5c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019d5e:	69fb      	ldr	r3, [r7, #28]
 8019d60:	885b      	ldrh	r3, [r3, #2]
 8019d62:	b29b      	uxth	r3, r3
 8019d64:	4618      	mov	r0, r3
 8019d66:	f7f6 f88d 	bl	800fe84 <lwip_htons>
 8019d6a:	4603      	mov	r3, r0
 8019d6c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019d6e:	69fb      	ldr	r3, [r7, #28]
 8019d70:	781b      	ldrb	r3, [r3, #0]
 8019d72:	f003 030f 	and.w	r3, r3, #15
 8019d76:	b2db      	uxtb	r3, r3
 8019d78:	009b      	lsls	r3, r3, #2
 8019d7a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019d7c:	7e7b      	ldrb	r3, [r7, #25]
 8019d7e:	b29b      	uxth	r3, r3
 8019d80:	8b7a      	ldrh	r2, [r7, #26]
 8019d82:	429a      	cmp	r2, r3
 8019d84:	d202      	bcs.n	8019d8c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d86:	f04f 33ff 	mov.w	r3, #4294967295
 8019d8a:	e135      	b.n	8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019d8c:	7e7b      	ldrb	r3, [r7, #25]
 8019d8e:	b29b      	uxth	r3, r3
 8019d90:	8b7a      	ldrh	r2, [r7, #26]
 8019d92:	1ad3      	subs	r3, r2, r3
 8019d94:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019d96:	69fb      	ldr	r3, [r7, #28]
 8019d98:	88db      	ldrh	r3, [r3, #6]
 8019d9a:	b29b      	uxth	r3, r3
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	f7f6 f871 	bl	800fe84 <lwip_htons>
 8019da2:	4603      	mov	r3, r0
 8019da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019da8:	b29b      	uxth	r3, r3
 8019daa:	00db      	lsls	r3, r3, #3
 8019dac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019dae:	68bb      	ldr	r3, [r7, #8]
 8019db0:	685b      	ldr	r3, [r3, #4]
 8019db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019db6:	2200      	movs	r2, #0
 8019db8:	701a      	strb	r2, [r3, #0]
 8019dba:	2200      	movs	r2, #0
 8019dbc:	705a      	strb	r2, [r3, #1]
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	709a      	strb	r2, [r3, #2]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dc8:	8afa      	ldrh	r2, [r7, #22]
 8019dca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019dcc:	8afa      	ldrh	r2, [r7, #22]
 8019dce:	8b7b      	ldrh	r3, [r7, #26]
 8019dd0:	4413      	add	r3, r2
 8019dd2:	b29a      	uxth	r2, r3
 8019dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dda:	88db      	ldrh	r3, [r3, #6]
 8019ddc:	b29b      	uxth	r3, r3
 8019dde:	8afa      	ldrh	r2, [r7, #22]
 8019de0:	429a      	cmp	r2, r3
 8019de2:	d902      	bls.n	8019dea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019de4:	f04f 33ff 	mov.w	r3, #4294967295
 8019de8:	e106      	b.n	8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	685b      	ldr	r3, [r3, #4]
 8019dee:	627b      	str	r3, [r7, #36]	; 0x24
 8019df0:	e068      	b.n	8019ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df4:	685b      	ldr	r3, [r3, #4]
 8019df6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfa:	889b      	ldrh	r3, [r3, #4]
 8019dfc:	b29a      	uxth	r2, r3
 8019dfe:	693b      	ldr	r3, [r7, #16]
 8019e00:	889b      	ldrh	r3, [r3, #4]
 8019e02:	b29b      	uxth	r3, r3
 8019e04:	429a      	cmp	r2, r3
 8019e06:	d235      	bcs.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e0c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d020      	beq.n	8019e56 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e16:	889b      	ldrh	r3, [r3, #4]
 8019e18:	b29a      	uxth	r2, r3
 8019e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e1c:	88db      	ldrh	r3, [r3, #6]
 8019e1e:	b29b      	uxth	r3, r3
 8019e20:	429a      	cmp	r2, r3
 8019e22:	d307      	bcc.n	8019e34 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e26:	88db      	ldrh	r3, [r3, #6]
 8019e28:	b29a      	uxth	r2, r3
 8019e2a:	693b      	ldr	r3, [r7, #16]
 8019e2c:	889b      	ldrh	r3, [r3, #4]
 8019e2e:	b29b      	uxth	r3, r3
 8019e30:	429a      	cmp	r2, r3
 8019e32:	d902      	bls.n	8019e3a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e34:	f04f 33ff 	mov.w	r3, #4294967295
 8019e38:	e0de      	b.n	8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e3c:	68ba      	ldr	r2, [r7, #8]
 8019e3e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e42:	88db      	ldrh	r3, [r3, #6]
 8019e44:	b29a      	uxth	r2, r3
 8019e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e48:	889b      	ldrh	r3, [r3, #4]
 8019e4a:	b29b      	uxth	r3, r3
 8019e4c:	429a      	cmp	r2, r3
 8019e4e:	d03d      	beq.n	8019ecc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e50:	2300      	movs	r3, #0
 8019e52:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019e54:	e03a      	b.n	8019ecc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e58:	88db      	ldrh	r3, [r3, #6]
 8019e5a:	b29a      	uxth	r2, r3
 8019e5c:	693b      	ldr	r3, [r7, #16]
 8019e5e:	889b      	ldrh	r3, [r3, #4]
 8019e60:	b29b      	uxth	r3, r3
 8019e62:	429a      	cmp	r2, r3
 8019e64:	d902      	bls.n	8019e6c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e66:	f04f 33ff 	mov.w	r3, #4294967295
 8019e6a:	e0c5      	b.n	8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	68ba      	ldr	r2, [r7, #8]
 8019e70:	605a      	str	r2, [r3, #4]
      break;
 8019e72:	e02b      	b.n	8019ecc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e76:	889b      	ldrh	r3, [r3, #4]
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	693b      	ldr	r3, [r7, #16]
 8019e7c:	889b      	ldrh	r3, [r3, #4]
 8019e7e:	b29b      	uxth	r3, r3
 8019e80:	429a      	cmp	r2, r3
 8019e82:	d102      	bne.n	8019e8a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e84:	f04f 33ff 	mov.w	r3, #4294967295
 8019e88:	e0b6      	b.n	8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8c:	889b      	ldrh	r3, [r3, #4]
 8019e8e:	b29a      	uxth	r2, r3
 8019e90:	693b      	ldr	r3, [r7, #16]
 8019e92:	88db      	ldrh	r3, [r3, #6]
 8019e94:	b29b      	uxth	r3, r3
 8019e96:	429a      	cmp	r2, r3
 8019e98:	d202      	bcs.n	8019ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8019e9e:	e0ab      	b.n	8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d009      	beq.n	8019eba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ea8:	88db      	ldrh	r3, [r3, #6]
 8019eaa:	b29a      	uxth	r2, r3
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	889b      	ldrh	r3, [r3, #4]
 8019eb0:	b29b      	uxth	r3, r3
 8019eb2:	429a      	cmp	r2, r3
 8019eb4:	d001      	beq.n	8019eba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019eba:	693b      	ldr	r3, [r7, #16]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019ec0:	693b      	ldr	r3, [r7, #16]
 8019ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d193      	bne.n	8019df2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019eca:	e000      	b.n	8019ece <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019ecc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d12d      	bne.n	8019f30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d01c      	beq.n	8019f14 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019edc:	88db      	ldrh	r3, [r3, #6]
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee2:	889b      	ldrh	r3, [r3, #4]
 8019ee4:	b29b      	uxth	r3, r3
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d906      	bls.n	8019ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019eea:	4b45      	ldr	r3, [pc, #276]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019eec:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019ef0:	4944      	ldr	r1, [pc, #272]	; (801a004 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019ef2:	4845      	ldr	r0, [pc, #276]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019ef4:	f001 f9dc 	bl	801b2b0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019efa:	68ba      	ldr	r2, [r7, #8]
 8019efc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f00:	88db      	ldrh	r3, [r3, #6]
 8019f02:	b29a      	uxth	r2, r3
 8019f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f06:	889b      	ldrh	r3, [r3, #4]
 8019f08:	b29b      	uxth	r3, r3
 8019f0a:	429a      	cmp	r2, r3
 8019f0c:	d010      	beq.n	8019f30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	623b      	str	r3, [r7, #32]
 8019f12:	e00d      	b.n	8019f30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	685b      	ldr	r3, [r3, #4]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d006      	beq.n	8019f2a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019f1c:	4b38      	ldr	r3, [pc, #224]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f1e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019f22:	493a      	ldr	r1, [pc, #232]	; (801a00c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019f24:	4838      	ldr	r0, [pc, #224]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f26:	f001 f9c3 	bl	801b2b0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	68ba      	ldr	r2, [r7, #8]
 8019f2e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d105      	bne.n	8019f42 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	7f9b      	ldrb	r3, [r3, #30]
 8019f3a:	f003 0301 	and.w	r3, r3, #1
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d059      	beq.n	8019ff6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019f42:	6a3b      	ldr	r3, [r7, #32]
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d04f      	beq.n	8019fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	685b      	ldr	r3, [r3, #4]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d006      	beq.n	8019f5e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	685b      	ldr	r3, [r3, #4]
 8019f56:	889b      	ldrh	r3, [r3, #4]
 8019f58:	b29b      	uxth	r3, r3
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d002      	beq.n	8019f64 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	623b      	str	r3, [r7, #32]
 8019f62:	e041      	b.n	8019fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f66:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f6e:	e012      	b.n	8019f96 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f72:	685b      	ldr	r3, [r3, #4]
 8019f74:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f78:	88db      	ldrh	r3, [r3, #6]
 8019f7a:	b29a      	uxth	r2, r3
 8019f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f7e:	889b      	ldrh	r3, [r3, #4]
 8019f80:	b29b      	uxth	r3, r3
 8019f82:	429a      	cmp	r2, r3
 8019f84:	d002      	beq.n	8019f8c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019f86:	2300      	movs	r3, #0
 8019f88:	623b      	str	r3, [r7, #32]
            break;
 8019f8a:	e007      	b.n	8019f9c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f8e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d1e9      	bne.n	8019f70 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019f9c:	6a3b      	ldr	r3, [r7, #32]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d022      	beq.n	8019fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d106      	bne.n	8019fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019faa:	4b15      	ldr	r3, [pc, #84]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fac:	f240 12df 	movw	r2, #479	; 0x1df
 8019fb0:	4917      	ldr	r1, [pc, #92]	; (801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019fb2:	4815      	ldr	r0, [pc, #84]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fb4:	f001 f97c 	bl	801b2b0 <iprintf>
          LWIP_ASSERT("sanity check",
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	685b      	ldr	r3, [r3, #4]
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d106      	bne.n	8019fd2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019fc4:	4b0e      	ldr	r3, [pc, #56]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fc6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019fca:	4911      	ldr	r1, [pc, #68]	; (801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019fcc:	480e      	ldr	r0, [pc, #56]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fce:	f001 f96f 	bl	801b2b0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d006      	beq.n	8019fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019fda:	4b09      	ldr	r3, [pc, #36]	; (801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fdc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019fe0:	490c      	ldr	r1, [pc, #48]	; (801a014 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019fe2:	4809      	ldr	r0, [pc, #36]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fe4:	f001 f964 	bl	801b2b0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019fe8:	6a3b      	ldr	r3, [r7, #32]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	bf14      	ite	ne
 8019fee:	2301      	movne	r3, #1
 8019ff0:	2300      	moveq	r3, #0
 8019ff2:	b2db      	uxtb	r3, r3
 8019ff4:	e000      	b.n	8019ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019ff6:	2300      	movs	r3, #0
}
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	3730      	adds	r7, #48	; 0x30
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	bd80      	pop	{r7, pc}
 801a000:	08020ae8 	.word	0x08020ae8
 801a004:	08020bcc 	.word	0x08020bcc
 801a008:	08020b30 	.word	0x08020b30
 801a00c:	08020bec 	.word	0x08020bec
 801a010:	08020c24 	.word	0x08020c24
 801a014:	08020c34 	.word	0x08020c34

0801a018 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a018:	b580      	push	{r7, lr}
 801a01a:	b08e      	sub	sp, #56	; 0x38
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	685b      	ldr	r3, [r3, #4]
 801a024:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a028:	781b      	ldrb	r3, [r3, #0]
 801a02a:	f003 030f 	and.w	r3, r3, #15
 801a02e:	b2db      	uxtb	r3, r3
 801a030:	009b      	lsls	r3, r3, #2
 801a032:	b2db      	uxtb	r3, r3
 801a034:	2b14      	cmp	r3, #20
 801a036:	f040 8171 	bne.w	801a31c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a03c:	88db      	ldrh	r3, [r3, #6]
 801a03e:	b29b      	uxth	r3, r3
 801a040:	4618      	mov	r0, r3
 801a042:	f7f5 ff1f 	bl	800fe84 <lwip_htons>
 801a046:	4603      	mov	r3, r0
 801a048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a04c:	b29b      	uxth	r3, r3
 801a04e:	00db      	lsls	r3, r3, #3
 801a050:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a054:	885b      	ldrh	r3, [r3, #2]
 801a056:	b29b      	uxth	r3, r3
 801a058:	4618      	mov	r0, r3
 801a05a:	f7f5 ff13 	bl	800fe84 <lwip_htons>
 801a05e:	4603      	mov	r3, r0
 801a060:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a064:	781b      	ldrb	r3, [r3, #0]
 801a066:	f003 030f 	and.w	r3, r3, #15
 801a06a:	b2db      	uxtb	r3, r3
 801a06c:	009b      	lsls	r3, r3, #2
 801a06e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a076:	b29b      	uxth	r3, r3
 801a078:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a07a:	429a      	cmp	r2, r3
 801a07c:	f0c0 8150 	bcc.w	801a320 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a084:	b29b      	uxth	r3, r3
 801a086:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a088:	1ad3      	subs	r3, r2, r3
 801a08a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a08c:	6878      	ldr	r0, [r7, #4]
 801a08e:	f7f7 fb85 	bl	801179c <pbuf_clen>
 801a092:	4603      	mov	r3, r0
 801a094:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a096:	4b8c      	ldr	r3, [pc, #560]	; (801a2c8 <ip4_reass+0x2b0>)
 801a098:	881b      	ldrh	r3, [r3, #0]
 801a09a:	461a      	mov	r2, r3
 801a09c:	8c3b      	ldrh	r3, [r7, #32]
 801a09e:	4413      	add	r3, r2
 801a0a0:	2b0a      	cmp	r3, #10
 801a0a2:	dd10      	ble.n	801a0c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a0a4:	8c3b      	ldrh	r3, [r7, #32]
 801a0a6:	4619      	mov	r1, r3
 801a0a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0aa:	f7ff fd81 	bl	8019bb0 <ip_reass_remove_oldest_datagram>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	f000 8137 	beq.w	801a324 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a0b6:	4b84      	ldr	r3, [pc, #528]	; (801a2c8 <ip4_reass+0x2b0>)
 801a0b8:	881b      	ldrh	r3, [r3, #0]
 801a0ba:	461a      	mov	r2, r3
 801a0bc:	8c3b      	ldrh	r3, [r7, #32]
 801a0be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a0c0:	2b0a      	cmp	r3, #10
 801a0c2:	f300 812f 	bgt.w	801a324 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a0c6:	4b81      	ldr	r3, [pc, #516]	; (801a2cc <ip4_reass+0x2b4>)
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	633b      	str	r3, [r7, #48]	; 0x30
 801a0cc:	e015      	b.n	801a0fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0d0:	695a      	ldr	r2, [r3, #20]
 801a0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0d4:	68db      	ldr	r3, [r3, #12]
 801a0d6:	429a      	cmp	r2, r3
 801a0d8:	d10c      	bne.n	801a0f4 <ip4_reass+0xdc>
 801a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0dc:	699a      	ldr	r2, [r3, #24]
 801a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0e0:	691b      	ldr	r3, [r3, #16]
 801a0e2:	429a      	cmp	r2, r3
 801a0e4:	d106      	bne.n	801a0f4 <ip4_reass+0xdc>
 801a0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0e8:	899a      	ldrh	r2, [r3, #12]
 801a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0ec:	889b      	ldrh	r3, [r3, #4]
 801a0ee:	b29b      	uxth	r3, r3
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	d006      	beq.n	801a102 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	633b      	str	r3, [r7, #48]	; 0x30
 801a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d1e6      	bne.n	801a0ce <ip4_reass+0xb6>
 801a100:	e000      	b.n	801a104 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a102:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a106:	2b00      	cmp	r3, #0
 801a108:	d109      	bne.n	801a11e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a10a:	8c3b      	ldrh	r3, [r7, #32]
 801a10c:	4619      	mov	r1, r3
 801a10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a110:	f7ff fdb0 	bl	8019c74 <ip_reass_enqueue_new_datagram>
 801a114:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d11c      	bne.n	801a156 <ip4_reass+0x13e>
      goto nullreturn;
 801a11c:	e105      	b.n	801a32a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a120:	88db      	ldrh	r3, [r3, #6]
 801a122:	b29b      	uxth	r3, r3
 801a124:	4618      	mov	r0, r3
 801a126:	f7f5 fead 	bl	800fe84 <lwip_htons>
 801a12a:	4603      	mov	r3, r0
 801a12c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a130:	2b00      	cmp	r3, #0
 801a132:	d110      	bne.n	801a156 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a136:	89db      	ldrh	r3, [r3, #14]
 801a138:	4618      	mov	r0, r3
 801a13a:	f7f5 fea3 	bl	800fe84 <lwip_htons>
 801a13e:	4603      	mov	r3, r0
 801a140:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a144:	2b00      	cmp	r3, #0
 801a146:	d006      	beq.n	801a156 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a14a:	3308      	adds	r3, #8
 801a14c:	2214      	movs	r2, #20
 801a14e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a150:	4618      	mov	r0, r3
 801a152:	f001 fad0 	bl	801b6f6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a158:	88db      	ldrh	r3, [r3, #6]
 801a15a:	b29b      	uxth	r3, r3
 801a15c:	f003 0320 	and.w	r3, r3, #32
 801a160:	2b00      	cmp	r3, #0
 801a162:	bf0c      	ite	eq
 801a164:	2301      	moveq	r3, #1
 801a166:	2300      	movne	r3, #0
 801a168:	b2db      	uxtb	r3, r3
 801a16a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a16c:	69fb      	ldr	r3, [r7, #28]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d00e      	beq.n	801a190 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a172:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a176:	4413      	add	r3, r2
 801a178:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a17a:	8b7a      	ldrh	r2, [r7, #26]
 801a17c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a17e:	429a      	cmp	r2, r3
 801a180:	f0c0 80a0 	bcc.w	801a2c4 <ip4_reass+0x2ac>
 801a184:	8b7b      	ldrh	r3, [r7, #26]
 801a186:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a18a:	4293      	cmp	r3, r2
 801a18c:	f200 809a 	bhi.w	801a2c4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a190:	69fa      	ldr	r2, [r7, #28]
 801a192:	6879      	ldr	r1, [r7, #4]
 801a194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a196:	f7ff fdd5 	bl	8019d44 <ip_reass_chain_frag_into_datagram_and_validate>
 801a19a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a19c:	697b      	ldr	r3, [r7, #20]
 801a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1a2:	f000 809b 	beq.w	801a2dc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a1a6:	4b48      	ldr	r3, [pc, #288]	; (801a2c8 <ip4_reass+0x2b0>)
 801a1a8:	881a      	ldrh	r2, [r3, #0]
 801a1aa:	8c3b      	ldrh	r3, [r7, #32]
 801a1ac:	4413      	add	r3, r2
 801a1ae:	b29a      	uxth	r2, r3
 801a1b0:	4b45      	ldr	r3, [pc, #276]	; (801a2c8 <ip4_reass+0x2b0>)
 801a1b2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a1b4:	69fb      	ldr	r3, [r7, #28]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d00d      	beq.n	801a1d6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a1ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1be:	4413      	add	r3, r2
 801a1c0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1c4:	8a7a      	ldrh	r2, [r7, #18]
 801a1c6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ca:	7f9b      	ldrb	r3, [r3, #30]
 801a1cc:	f043 0301 	orr.w	r3, r3, #1
 801a1d0:	b2da      	uxtb	r2, r3
 801a1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1d4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a1d6:	697b      	ldr	r3, [r7, #20]
 801a1d8:	2b01      	cmp	r3, #1
 801a1da:	d171      	bne.n	801a2c0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1de:	8b9b      	ldrh	r3, [r3, #28]
 801a1e0:	3314      	adds	r3, #20
 801a1e2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1e6:	685b      	ldr	r3, [r3, #4]
 801a1e8:	685b      	ldr	r3, [r3, #4]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1f0:	685b      	ldr	r3, [r3, #4]
 801a1f2:	685b      	ldr	r3, [r3, #4]
 801a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1f8:	3308      	adds	r3, #8
 801a1fa:	2214      	movs	r2, #20
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a200:	f001 fa79 	bl	801b6f6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a204:	8a3b      	ldrh	r3, [r7, #16]
 801a206:	4618      	mov	r0, r3
 801a208:	f7f5 fe3c 	bl	800fe84 <lwip_htons>
 801a20c:	4603      	mov	r3, r0
 801a20e:	461a      	mov	r2, r3
 801a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a212:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a216:	2200      	movs	r2, #0
 801a218:	719a      	strb	r2, [r3, #6]
 801a21a:	2200      	movs	r2, #0
 801a21c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a220:	2200      	movs	r2, #0
 801a222:	729a      	strb	r2, [r3, #10]
 801a224:	2200      	movs	r2, #0
 801a226:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a22a:	685b      	ldr	r3, [r3, #4]
 801a22c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a22e:	e00d      	b.n	801a24c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a232:	685b      	ldr	r3, [r3, #4]
 801a234:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a236:	2114      	movs	r1, #20
 801a238:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a23a:	f7f7 f9a1 	bl	8011580 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a23e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a240:	6878      	ldr	r0, [r7, #4]
 801a242:	f7f7 fae5 	bl	8011810 <pbuf_cat>
      r = iprh->next_pbuf;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d1ee      	bne.n	801a230 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a252:	4b1e      	ldr	r3, [pc, #120]	; (801a2cc <ip4_reass+0x2b4>)
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a258:	429a      	cmp	r2, r3
 801a25a:	d102      	bne.n	801a262 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a25c:	2300      	movs	r3, #0
 801a25e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a260:	e010      	b.n	801a284 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a262:	4b1a      	ldr	r3, [pc, #104]	; (801a2cc <ip4_reass+0x2b4>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a268:	e007      	b.n	801a27a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a270:	429a      	cmp	r2, r3
 801a272:	d006      	beq.n	801a282 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d1f4      	bne.n	801a26a <ip4_reass+0x252>
 801a280:	e000      	b.n	801a284 <ip4_reass+0x26c>
          break;
 801a282:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a288:	f7ff fd2e 	bl	8019ce8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a28c:	6878      	ldr	r0, [r7, #4]
 801a28e:	f7f7 fa85 	bl	801179c <pbuf_clen>
 801a292:	4603      	mov	r3, r0
 801a294:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a296:	4b0c      	ldr	r3, [pc, #48]	; (801a2c8 <ip4_reass+0x2b0>)
 801a298:	881b      	ldrh	r3, [r3, #0]
 801a29a:	8c3a      	ldrh	r2, [r7, #32]
 801a29c:	429a      	cmp	r2, r3
 801a29e:	d906      	bls.n	801a2ae <ip4_reass+0x296>
 801a2a0:	4b0b      	ldr	r3, [pc, #44]	; (801a2d0 <ip4_reass+0x2b8>)
 801a2a2:	f240 229b 	movw	r2, #667	; 0x29b
 801a2a6:	490b      	ldr	r1, [pc, #44]	; (801a2d4 <ip4_reass+0x2bc>)
 801a2a8:	480b      	ldr	r0, [pc, #44]	; (801a2d8 <ip4_reass+0x2c0>)
 801a2aa:	f001 f801 	bl	801b2b0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a2ae:	4b06      	ldr	r3, [pc, #24]	; (801a2c8 <ip4_reass+0x2b0>)
 801a2b0:	881a      	ldrh	r2, [r3, #0]
 801a2b2:	8c3b      	ldrh	r3, [r7, #32]
 801a2b4:	1ad3      	subs	r3, r2, r3
 801a2b6:	b29a      	uxth	r2, r3
 801a2b8:	4b03      	ldr	r3, [pc, #12]	; (801a2c8 <ip4_reass+0x2b0>)
 801a2ba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	e038      	b.n	801a332 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	e036      	b.n	801a332 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a2c4:	bf00      	nop
 801a2c6:	e00a      	b.n	801a2de <ip4_reass+0x2c6>
 801a2c8:	20007314 	.word	0x20007314
 801a2cc:	20007310 	.word	0x20007310
 801a2d0:	08020ae8 	.word	0x08020ae8
 801a2d4:	08020c58 	.word	0x08020c58
 801a2d8:	08020b30 	.word	0x08020b30
    goto nullreturn_ipr;
 801a2dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d106      	bne.n	801a2f2 <ip4_reass+0x2da>
 801a2e4:	4b15      	ldr	r3, [pc, #84]	; (801a33c <ip4_reass+0x324>)
 801a2e6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a2ea:	4915      	ldr	r1, [pc, #84]	; (801a340 <ip4_reass+0x328>)
 801a2ec:	4815      	ldr	r0, [pc, #84]	; (801a344 <ip4_reass+0x32c>)
 801a2ee:	f000 ffdf 	bl	801b2b0 <iprintf>
  if (ipr->p == NULL) {
 801a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2f4:	685b      	ldr	r3, [r3, #4]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d116      	bne.n	801a328 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a2fa:	4b13      	ldr	r3, [pc, #76]	; (801a348 <ip4_reass+0x330>)
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a300:	429a      	cmp	r2, r3
 801a302:	d006      	beq.n	801a312 <ip4_reass+0x2fa>
 801a304:	4b0d      	ldr	r3, [pc, #52]	; (801a33c <ip4_reass+0x324>)
 801a306:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a30a:	4910      	ldr	r1, [pc, #64]	; (801a34c <ip4_reass+0x334>)
 801a30c:	480d      	ldr	r0, [pc, #52]	; (801a344 <ip4_reass+0x32c>)
 801a30e:	f000 ffcf 	bl	801b2b0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a312:	2100      	movs	r1, #0
 801a314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a316:	f7ff fce7 	bl	8019ce8 <ip_reass_dequeue_datagram>
 801a31a:	e006      	b.n	801a32a <ip4_reass+0x312>
    goto nullreturn;
 801a31c:	bf00      	nop
 801a31e:	e004      	b.n	801a32a <ip4_reass+0x312>
    goto nullreturn;
 801a320:	bf00      	nop
 801a322:	e002      	b.n	801a32a <ip4_reass+0x312>
      goto nullreturn;
 801a324:	bf00      	nop
 801a326:	e000      	b.n	801a32a <ip4_reass+0x312>
  }

nullreturn:
 801a328:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a32a:	6878      	ldr	r0, [r7, #4]
 801a32c:	f7f7 f9ae 	bl	801168c <pbuf_free>
  return NULL;
 801a330:	2300      	movs	r3, #0
}
 801a332:	4618      	mov	r0, r3
 801a334:	3738      	adds	r7, #56	; 0x38
 801a336:	46bd      	mov	sp, r7
 801a338:	bd80      	pop	{r7, pc}
 801a33a:	bf00      	nop
 801a33c:	08020ae8 	.word	0x08020ae8
 801a340:	08020c74 	.word	0x08020c74
 801a344:	08020b30 	.word	0x08020b30
 801a348:	20007310 	.word	0x20007310
 801a34c:	08020c80 	.word	0x08020c80

0801a350 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a350:	b580      	push	{r7, lr}
 801a352:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a354:	2005      	movs	r0, #5
 801a356:	f7f6 fab3 	bl	80108c0 <memp_malloc>
 801a35a:	4603      	mov	r3, r0
}
 801a35c:	4618      	mov	r0, r3
 801a35e:	bd80      	pop	{r7, pc}

0801a360 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b082      	sub	sp, #8
 801a364:	af00      	add	r7, sp, #0
 801a366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d106      	bne.n	801a37c <ip_frag_free_pbuf_custom_ref+0x1c>
 801a36e:	4b07      	ldr	r3, [pc, #28]	; (801a38c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a370:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a374:	4906      	ldr	r1, [pc, #24]	; (801a390 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a376:	4807      	ldr	r0, [pc, #28]	; (801a394 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a378:	f000 ff9a 	bl	801b2b0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a37c:	6879      	ldr	r1, [r7, #4]
 801a37e:	2005      	movs	r0, #5
 801a380:	f7f6 fb0e 	bl	80109a0 <memp_free>
}
 801a384:	bf00      	nop
 801a386:	3708      	adds	r7, #8
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd80      	pop	{r7, pc}
 801a38c:	08020ae8 	.word	0x08020ae8
 801a390:	08020ca0 	.word	0x08020ca0
 801a394:	08020b30 	.word	0x08020b30

0801a398 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b084      	sub	sp, #16
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d106      	bne.n	801a3b8 <ipfrag_free_pbuf_custom+0x20>
 801a3aa:	4b11      	ldr	r3, [pc, #68]	; (801a3f0 <ipfrag_free_pbuf_custom+0x58>)
 801a3ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a3b0:	4910      	ldr	r1, [pc, #64]	; (801a3f4 <ipfrag_free_pbuf_custom+0x5c>)
 801a3b2:	4811      	ldr	r0, [pc, #68]	; (801a3f8 <ipfrag_free_pbuf_custom+0x60>)
 801a3b4:	f000 ff7c 	bl	801b2b0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a3b8:	68fa      	ldr	r2, [r7, #12]
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	d006      	beq.n	801a3ce <ipfrag_free_pbuf_custom+0x36>
 801a3c0:	4b0b      	ldr	r3, [pc, #44]	; (801a3f0 <ipfrag_free_pbuf_custom+0x58>)
 801a3c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a3c6:	490d      	ldr	r1, [pc, #52]	; (801a3fc <ipfrag_free_pbuf_custom+0x64>)
 801a3c8:	480b      	ldr	r0, [pc, #44]	; (801a3f8 <ipfrag_free_pbuf_custom+0x60>)
 801a3ca:	f000 ff71 	bl	801b2b0 <iprintf>
  if (pcr->original != NULL) {
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	695b      	ldr	r3, [r3, #20]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d004      	beq.n	801a3e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	695b      	ldr	r3, [r3, #20]
 801a3da:	4618      	mov	r0, r3
 801a3dc:	f7f7 f956 	bl	801168c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a3e0:	68f8      	ldr	r0, [r7, #12]
 801a3e2:	f7ff ffbd 	bl	801a360 <ip_frag_free_pbuf_custom_ref>
}
 801a3e6:	bf00      	nop
 801a3e8:	3710      	adds	r7, #16
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bd80      	pop	{r7, pc}
 801a3ee:	bf00      	nop
 801a3f0:	08020ae8 	.word	0x08020ae8
 801a3f4:	08020cac 	.word	0x08020cac
 801a3f8:	08020b30 	.word	0x08020b30
 801a3fc:	08020cb8 	.word	0x08020cb8

0801a400 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a400:	b580      	push	{r7, lr}
 801a402:	b094      	sub	sp, #80	; 0x50
 801a404:	af02      	add	r7, sp, #8
 801a406:	60f8      	str	r0, [r7, #12]
 801a408:	60b9      	str	r1, [r7, #8]
 801a40a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a40c:	2300      	movs	r3, #0
 801a40e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a416:	3b14      	subs	r3, #20
 801a418:	2b00      	cmp	r3, #0
 801a41a:	da00      	bge.n	801a41e <ip4_frag+0x1e>
 801a41c:	3307      	adds	r3, #7
 801a41e:	10db      	asrs	r3, r3, #3
 801a420:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a422:	2314      	movs	r3, #20
 801a424:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a42e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a432:	781b      	ldrb	r3, [r3, #0]
 801a434:	f003 030f 	and.w	r3, r3, #15
 801a438:	b2db      	uxtb	r3, r3
 801a43a:	009b      	lsls	r3, r3, #2
 801a43c:	b2db      	uxtb	r3, r3
 801a43e:	2b14      	cmp	r3, #20
 801a440:	d002      	beq.n	801a448 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a442:	f06f 0305 	mvn.w	r3, #5
 801a446:	e110      	b.n	801a66a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	895b      	ldrh	r3, [r3, #10]
 801a44c:	2b13      	cmp	r3, #19
 801a44e:	d809      	bhi.n	801a464 <ip4_frag+0x64>
 801a450:	4b88      	ldr	r3, [pc, #544]	; (801a674 <ip4_frag+0x274>)
 801a452:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a456:	4988      	ldr	r1, [pc, #544]	; (801a678 <ip4_frag+0x278>)
 801a458:	4888      	ldr	r0, [pc, #544]	; (801a67c <ip4_frag+0x27c>)
 801a45a:	f000 ff29 	bl	801b2b0 <iprintf>
 801a45e:	f06f 0305 	mvn.w	r3, #5
 801a462:	e102      	b.n	801a66a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a466:	88db      	ldrh	r3, [r3, #6]
 801a468:	b29b      	uxth	r3, r3
 801a46a:	4618      	mov	r0, r3
 801a46c:	f7f5 fd0a 	bl	800fe84 <lwip_htons>
 801a470:	4603      	mov	r3, r0
 801a472:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a474:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a476:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a47a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a47e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a484:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	891b      	ldrh	r3, [r3, #8]
 801a48a:	3b14      	subs	r3, #20
 801a48c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a490:	e0e1      	b.n	801a656 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a492:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a494:	00db      	lsls	r3, r3, #3
 801a496:	b29b      	uxth	r3, r3
 801a498:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a49c:	4293      	cmp	r3, r2
 801a49e:	bf28      	it	cs
 801a4a0:	4613      	movcs	r3, r2
 801a4a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a4a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a4a8:	2114      	movs	r1, #20
 801a4aa:	200e      	movs	r0, #14
 801a4ac:	f7f6 fe0a 	bl	80110c4 <pbuf_alloc>
 801a4b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	f000 80d5 	beq.w	801a664 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4bc:	895b      	ldrh	r3, [r3, #10]
 801a4be:	2b13      	cmp	r3, #19
 801a4c0:	d806      	bhi.n	801a4d0 <ip4_frag+0xd0>
 801a4c2:	4b6c      	ldr	r3, [pc, #432]	; (801a674 <ip4_frag+0x274>)
 801a4c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a4c8:	496d      	ldr	r1, [pc, #436]	; (801a680 <ip4_frag+0x280>)
 801a4ca:	486c      	ldr	r0, [pc, #432]	; (801a67c <ip4_frag+0x27c>)
 801a4cc:	f000 fef0 	bl	801b2b0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d2:	685b      	ldr	r3, [r3, #4]
 801a4d4:	2214      	movs	r2, #20
 801a4d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a4d8:	4618      	mov	r0, r3
 801a4da:	f001 f90c 	bl	801b6f6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e0:	685b      	ldr	r3, [r3, #4]
 801a4e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a4e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a4e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a4ea:	e064      	b.n	801a5b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	895a      	ldrh	r2, [r3, #10]
 801a4f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a4f2:	1ad3      	subs	r3, r2, r3
 801a4f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	895b      	ldrh	r3, [r3, #10]
 801a4fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a4fc:	429a      	cmp	r2, r3
 801a4fe:	d906      	bls.n	801a50e <ip4_frag+0x10e>
 801a500:	4b5c      	ldr	r3, [pc, #368]	; (801a674 <ip4_frag+0x274>)
 801a502:	f240 322d 	movw	r2, #813	; 0x32d
 801a506:	495f      	ldr	r1, [pc, #380]	; (801a684 <ip4_frag+0x284>)
 801a508:	485c      	ldr	r0, [pc, #368]	; (801a67c <ip4_frag+0x27c>)
 801a50a:	f000 fed1 	bl	801b2b0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a50e:	8bfa      	ldrh	r2, [r7, #30]
 801a510:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a514:	4293      	cmp	r3, r2
 801a516:	bf28      	it	cs
 801a518:	4613      	movcs	r3, r2
 801a51a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a51e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a522:	2b00      	cmp	r3, #0
 801a524:	d105      	bne.n	801a532 <ip4_frag+0x132>
        poff = 0;
 801a526:	2300      	movs	r3, #0
 801a528:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	60fb      	str	r3, [r7, #12]
        continue;
 801a530:	e041      	b.n	801a5b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a532:	f7ff ff0d 	bl	801a350 <ip_frag_alloc_pbuf_custom_ref>
 801a536:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a538:	69bb      	ldr	r3, [r7, #24]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d103      	bne.n	801a546 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a53e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a540:	f7f7 f8a4 	bl	801168c <pbuf_free>
        goto memerr;
 801a544:	e08f      	b.n	801a666 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a546:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a54c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a54e:	4413      	add	r3, r2
 801a550:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a554:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a558:	9201      	str	r2, [sp, #4]
 801a55a:	9300      	str	r3, [sp, #0]
 801a55c:	4603      	mov	r3, r0
 801a55e:	2241      	movs	r2, #65	; 0x41
 801a560:	2000      	movs	r0, #0
 801a562:	f7f6 fedb 	bl	801131c <pbuf_alloced_custom>
 801a566:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a568:	697b      	ldr	r3, [r7, #20]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d106      	bne.n	801a57c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a56e:	69b8      	ldr	r0, [r7, #24]
 801a570:	f7ff fef6 	bl	801a360 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a576:	f7f7 f889 	bl	801168c <pbuf_free>
        goto memerr;
 801a57a:	e074      	b.n	801a666 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a57c:	68f8      	ldr	r0, [r7, #12]
 801a57e:	f7f7 f925 	bl	80117cc <pbuf_ref>
      pcr->original = p;
 801a582:	69bb      	ldr	r3, [r7, #24]
 801a584:	68fa      	ldr	r2, [r7, #12]
 801a586:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a588:	69bb      	ldr	r3, [r7, #24]
 801a58a:	4a3f      	ldr	r2, [pc, #252]	; (801a688 <ip4_frag+0x288>)
 801a58c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a58e:	6979      	ldr	r1, [r7, #20]
 801a590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a592:	f7f7 f93d 	bl	8011810 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a596:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a59a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a59e:	1ad3      	subs	r3, r2, r3
 801a5a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a5a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d004      	beq.n	801a5b6 <ip4_frag+0x1b6>
        poff = 0;
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a5b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d196      	bne.n	801a4ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a5be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a5c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5c4:	4413      	add	r3, r2
 801a5c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a5c8:	68bb      	ldr	r3, [r7, #8]
 801a5ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a5cc:	f1a3 0213 	sub.w	r2, r3, #19
 801a5d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	bfcc      	ite	gt
 801a5d8:	2301      	movgt	r3, #1
 801a5da:	2300      	movle	r3, #0
 801a5dc:	b2db      	uxtb	r3, r3
 801a5de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a5e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a5e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a5e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a5ea:	6a3b      	ldr	r3, [r7, #32]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d002      	beq.n	801a5f6 <ip4_frag+0x1f6>
 801a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d003      	beq.n	801a5fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a5f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a5f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a5fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a5fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a600:	4618      	mov	r0, r3
 801a602:	f7f5 fc3f 	bl	800fe84 <lwip_htons>
 801a606:	4603      	mov	r3, r0
 801a608:	461a      	mov	r2, r3
 801a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a60c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a60e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a610:	3314      	adds	r3, #20
 801a612:	b29b      	uxth	r3, r3
 801a614:	4618      	mov	r0, r3
 801a616:	f7f5 fc35 	bl	800fe84 <lwip_htons>
 801a61a:	4603      	mov	r3, r0
 801a61c:	461a      	mov	r2, r3
 801a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a620:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a624:	2200      	movs	r2, #0
 801a626:	729a      	strb	r2, [r3, #10]
 801a628:	2200      	movs	r2, #0
 801a62a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a62c:	68bb      	ldr	r3, [r7, #8]
 801a62e:	695b      	ldr	r3, [r3, #20]
 801a630:	687a      	ldr	r2, [r7, #4]
 801a632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a634:	68b8      	ldr	r0, [r7, #8]
 801a636:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a63a:	f7f7 f827 	bl	801168c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a63e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a644:	1ad3      	subs	r3, r2, r3
 801a646:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a64a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a64e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a650:	4413      	add	r3, r2
 801a652:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a656:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	f47f af19 	bne.w	801a492 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a660:	2300      	movs	r3, #0
 801a662:	e002      	b.n	801a66a <ip4_frag+0x26a>
      goto memerr;
 801a664:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a666:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a66a:	4618      	mov	r0, r3
 801a66c:	3748      	adds	r7, #72	; 0x48
 801a66e:	46bd      	mov	sp, r7
 801a670:	bd80      	pop	{r7, pc}
 801a672:	bf00      	nop
 801a674:	08020ae8 	.word	0x08020ae8
 801a678:	08020cc4 	.word	0x08020cc4
 801a67c:	08020b30 	.word	0x08020b30
 801a680:	08020ce0 	.word	0x08020ce0
 801a684:	08020d00 	.word	0x08020d00
 801a688:	0801a399 	.word	0x0801a399

0801a68c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b086      	sub	sp, #24
 801a690:	af00      	add	r7, sp, #0
 801a692:	6078      	str	r0, [r7, #4]
 801a694:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a696:	230e      	movs	r3, #14
 801a698:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	895b      	ldrh	r3, [r3, #10]
 801a69e:	2b0e      	cmp	r3, #14
 801a6a0:	d96e      	bls.n	801a780 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	7bdb      	ldrb	r3, [r3, #15]
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d106      	bne.n	801a6b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a6b0:	3301      	adds	r3, #1
 801a6b2:	b2da      	uxtb	r2, r3
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	685b      	ldr	r3, [r3, #4]
 801a6bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a6be:	693b      	ldr	r3, [r7, #16]
 801a6c0:	7b1a      	ldrb	r2, [r3, #12]
 801a6c2:	7b5b      	ldrb	r3, [r3, #13]
 801a6c4:	021b      	lsls	r3, r3, #8
 801a6c6:	4313      	orrs	r3, r2
 801a6c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a6ca:	693b      	ldr	r3, [r7, #16]
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	f003 0301 	and.w	r3, r3, #1
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d023      	beq.n	801a71e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a6d6:	693b      	ldr	r3, [r7, #16]
 801a6d8:	781b      	ldrb	r3, [r3, #0]
 801a6da:	2b01      	cmp	r3, #1
 801a6dc:	d10f      	bne.n	801a6fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a6de:	693b      	ldr	r3, [r7, #16]
 801a6e0:	785b      	ldrb	r3, [r3, #1]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d11b      	bne.n	801a71e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a6ea:	2b5e      	cmp	r3, #94	; 0x5e
 801a6ec:	d117      	bne.n	801a71e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	7b5b      	ldrb	r3, [r3, #13]
 801a6f2:	f043 0310 	orr.w	r3, r3, #16
 801a6f6:	b2da      	uxtb	r2, r3
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	735a      	strb	r2, [r3, #13]
 801a6fc:	e00f      	b.n	801a71e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a6fe:	693b      	ldr	r3, [r7, #16]
 801a700:	2206      	movs	r2, #6
 801a702:	4928      	ldr	r1, [pc, #160]	; (801a7a4 <ethernet_input+0x118>)
 801a704:	4618      	mov	r0, r3
 801a706:	f000 ff39 	bl	801b57c <memcmp>
 801a70a:	4603      	mov	r3, r0
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d106      	bne.n	801a71e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	7b5b      	ldrb	r3, [r3, #13]
 801a714:	f043 0308 	orr.w	r3, r3, #8
 801a718:	b2da      	uxtb	r2, r3
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a71e:	89fb      	ldrh	r3, [r7, #14]
 801a720:	2b08      	cmp	r3, #8
 801a722:	d003      	beq.n	801a72c <ethernet_input+0xa0>
 801a724:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a728:	d014      	beq.n	801a754 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a72a:	e032      	b.n	801a792 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a732:	f003 0308 	and.w	r3, r3, #8
 801a736:	2b00      	cmp	r3, #0
 801a738:	d024      	beq.n	801a784 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a73a:	8afb      	ldrh	r3, [r7, #22]
 801a73c:	4619      	mov	r1, r3
 801a73e:	6878      	ldr	r0, [r7, #4]
 801a740:	f7f6 ff1e 	bl	8011580 <pbuf_remove_header>
 801a744:	4603      	mov	r3, r0
 801a746:	2b00      	cmp	r3, #0
 801a748:	d11e      	bne.n	801a788 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a74a:	6839      	ldr	r1, [r7, #0]
 801a74c:	6878      	ldr	r0, [r7, #4]
 801a74e:	f7fe ff21 	bl	8019594 <ip4_input>
      break;
 801a752:	e013      	b.n	801a77c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a754:	683b      	ldr	r3, [r7, #0]
 801a756:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a75a:	f003 0308 	and.w	r3, r3, #8
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d014      	beq.n	801a78c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a762:	8afb      	ldrh	r3, [r7, #22]
 801a764:	4619      	mov	r1, r3
 801a766:	6878      	ldr	r0, [r7, #4]
 801a768:	f7f6 ff0a 	bl	8011580 <pbuf_remove_header>
 801a76c:	4603      	mov	r3, r0
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d10e      	bne.n	801a790 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a772:	6839      	ldr	r1, [r7, #0]
 801a774:	6878      	ldr	r0, [r7, #4]
 801a776:	f7fe f89b 	bl	80188b0 <etharp_input>
      break;
 801a77a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a77c:	2300      	movs	r3, #0
 801a77e:	e00c      	b.n	801a79a <ethernet_input+0x10e>
    goto free_and_return;
 801a780:	bf00      	nop
 801a782:	e006      	b.n	801a792 <ethernet_input+0x106>
        goto free_and_return;
 801a784:	bf00      	nop
 801a786:	e004      	b.n	801a792 <ethernet_input+0x106>
        goto free_and_return;
 801a788:	bf00      	nop
 801a78a:	e002      	b.n	801a792 <ethernet_input+0x106>
        goto free_and_return;
 801a78c:	bf00      	nop
 801a78e:	e000      	b.n	801a792 <ethernet_input+0x106>
        goto free_and_return;
 801a790:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a792:	6878      	ldr	r0, [r7, #4]
 801a794:	f7f6 ff7a 	bl	801168c <pbuf_free>
  return ERR_OK;
 801a798:	2300      	movs	r3, #0
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	3718      	adds	r7, #24
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd80      	pop	{r7, pc}
 801a7a2:	bf00      	nop
 801a7a4:	08020ee0 	.word	0x08020ee0

0801a7a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b086      	sub	sp, #24
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	60f8      	str	r0, [r7, #12]
 801a7b0:	60b9      	str	r1, [r7, #8]
 801a7b2:	607a      	str	r2, [r7, #4]
 801a7b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a7b6:	8c3b      	ldrh	r3, [r7, #32]
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	f7f5 fb63 	bl	800fe84 <lwip_htons>
 801a7be:	4603      	mov	r3, r0
 801a7c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a7c2:	210e      	movs	r1, #14
 801a7c4:	68b8      	ldr	r0, [r7, #8]
 801a7c6:	f7f6 fecb 	bl	8011560 <pbuf_add_header>
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d125      	bne.n	801a81c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	685b      	ldr	r3, [r3, #4]
 801a7d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a7d6:	693b      	ldr	r3, [r7, #16]
 801a7d8:	8afa      	ldrh	r2, [r7, #22]
 801a7da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a7dc:	693b      	ldr	r3, [r7, #16]
 801a7de:	2206      	movs	r2, #6
 801a7e0:	6839      	ldr	r1, [r7, #0]
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f000 ff87 	bl	801b6f6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a7e8:	693b      	ldr	r3, [r7, #16]
 801a7ea:	3306      	adds	r3, #6
 801a7ec:	2206      	movs	r2, #6
 801a7ee:	6879      	ldr	r1, [r7, #4]
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	f000 ff80 	bl	801b6f6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a7f6:	68fb      	ldr	r3, [r7, #12]
 801a7f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a7fc:	2b06      	cmp	r3, #6
 801a7fe:	d006      	beq.n	801a80e <ethernet_output+0x66>
 801a800:	4b0a      	ldr	r3, [pc, #40]	; (801a82c <ethernet_output+0x84>)
 801a802:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a806:	490a      	ldr	r1, [pc, #40]	; (801a830 <ethernet_output+0x88>)
 801a808:	480a      	ldr	r0, [pc, #40]	; (801a834 <ethernet_output+0x8c>)
 801a80a:	f000 fd51 	bl	801b2b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	699b      	ldr	r3, [r3, #24]
 801a812:	68b9      	ldr	r1, [r7, #8]
 801a814:	68f8      	ldr	r0, [r7, #12]
 801a816:	4798      	blx	r3
 801a818:	4603      	mov	r3, r0
 801a81a:	e002      	b.n	801a822 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a81c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a81e:	f06f 0301 	mvn.w	r3, #1
}
 801a822:	4618      	mov	r0, r3
 801a824:	3718      	adds	r7, #24
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}
 801a82a:	bf00      	nop
 801a82c:	08020d10 	.word	0x08020d10
 801a830:	08020d48 	.word	0x08020d48
 801a834:	08020d7c 	.word	0x08020d7c

0801a838 <rand>:
 801a838:	4b16      	ldr	r3, [pc, #88]	; (801a894 <rand+0x5c>)
 801a83a:	b510      	push	{r4, lr}
 801a83c:	681c      	ldr	r4, [r3, #0]
 801a83e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a840:	b9b3      	cbnz	r3, 801a870 <rand+0x38>
 801a842:	2018      	movs	r0, #24
 801a844:	f001 fdc4 	bl	801c3d0 <malloc>
 801a848:	4602      	mov	r2, r0
 801a84a:	6320      	str	r0, [r4, #48]	; 0x30
 801a84c:	b920      	cbnz	r0, 801a858 <rand+0x20>
 801a84e:	4b12      	ldr	r3, [pc, #72]	; (801a898 <rand+0x60>)
 801a850:	4812      	ldr	r0, [pc, #72]	; (801a89c <rand+0x64>)
 801a852:	2152      	movs	r1, #82	; 0x52
 801a854:	f000 ff5e 	bl	801b714 <__assert_func>
 801a858:	4911      	ldr	r1, [pc, #68]	; (801a8a0 <rand+0x68>)
 801a85a:	4b12      	ldr	r3, [pc, #72]	; (801a8a4 <rand+0x6c>)
 801a85c:	e9c0 1300 	strd	r1, r3, [r0]
 801a860:	4b11      	ldr	r3, [pc, #68]	; (801a8a8 <rand+0x70>)
 801a862:	6083      	str	r3, [r0, #8]
 801a864:	230b      	movs	r3, #11
 801a866:	8183      	strh	r3, [r0, #12]
 801a868:	2100      	movs	r1, #0
 801a86a:	2001      	movs	r0, #1
 801a86c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a870:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a872:	480e      	ldr	r0, [pc, #56]	; (801a8ac <rand+0x74>)
 801a874:	690b      	ldr	r3, [r1, #16]
 801a876:	694c      	ldr	r4, [r1, #20]
 801a878:	4a0d      	ldr	r2, [pc, #52]	; (801a8b0 <rand+0x78>)
 801a87a:	4358      	muls	r0, r3
 801a87c:	fb02 0004 	mla	r0, r2, r4, r0
 801a880:	fba3 3202 	umull	r3, r2, r3, r2
 801a884:	3301      	adds	r3, #1
 801a886:	eb40 0002 	adc.w	r0, r0, r2
 801a88a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a88e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a892:	bd10      	pop	{r4, pc}
 801a894:	200001dc 	.word	0x200001dc
 801a898:	08020eee 	.word	0x08020eee
 801a89c:	08020f05 	.word	0x08020f05
 801a8a0:	abcd330e 	.word	0xabcd330e
 801a8a4:	e66d1234 	.word	0xe66d1234
 801a8a8:	0005deec 	.word	0x0005deec
 801a8ac:	5851f42d 	.word	0x5851f42d
 801a8b0:	4c957f2d 	.word	0x4c957f2d

0801a8b4 <__cvt>:
 801a8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8b6:	ed2d 8b02 	vpush	{d8}
 801a8ba:	eeb0 8b40 	vmov.f64	d8, d0
 801a8be:	b085      	sub	sp, #20
 801a8c0:	4617      	mov	r7, r2
 801a8c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a8c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a8c6:	ee18 2a90 	vmov	r2, s17
 801a8ca:	f025 0520 	bic.w	r5, r5, #32
 801a8ce:	2a00      	cmp	r2, #0
 801a8d0:	bfb6      	itet	lt
 801a8d2:	222d      	movlt	r2, #45	; 0x2d
 801a8d4:	2200      	movge	r2, #0
 801a8d6:	eeb1 8b40 	vneglt.f64	d8, d0
 801a8da:	2d46      	cmp	r5, #70	; 0x46
 801a8dc:	460c      	mov	r4, r1
 801a8de:	701a      	strb	r2, [r3, #0]
 801a8e0:	d004      	beq.n	801a8ec <__cvt+0x38>
 801a8e2:	2d45      	cmp	r5, #69	; 0x45
 801a8e4:	d100      	bne.n	801a8e8 <__cvt+0x34>
 801a8e6:	3401      	adds	r4, #1
 801a8e8:	2102      	movs	r1, #2
 801a8ea:	e000      	b.n	801a8ee <__cvt+0x3a>
 801a8ec:	2103      	movs	r1, #3
 801a8ee:	ab03      	add	r3, sp, #12
 801a8f0:	9301      	str	r3, [sp, #4]
 801a8f2:	ab02      	add	r3, sp, #8
 801a8f4:	9300      	str	r3, [sp, #0]
 801a8f6:	4622      	mov	r2, r4
 801a8f8:	4633      	mov	r3, r6
 801a8fa:	eeb0 0b48 	vmov.f64	d0, d8
 801a8fe:	f000 ffaf 	bl	801b860 <_dtoa_r>
 801a902:	2d47      	cmp	r5, #71	; 0x47
 801a904:	d101      	bne.n	801a90a <__cvt+0x56>
 801a906:	07fb      	lsls	r3, r7, #31
 801a908:	d51a      	bpl.n	801a940 <__cvt+0x8c>
 801a90a:	2d46      	cmp	r5, #70	; 0x46
 801a90c:	eb00 0204 	add.w	r2, r0, r4
 801a910:	d10c      	bne.n	801a92c <__cvt+0x78>
 801a912:	7803      	ldrb	r3, [r0, #0]
 801a914:	2b30      	cmp	r3, #48	; 0x30
 801a916:	d107      	bne.n	801a928 <__cvt+0x74>
 801a918:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a920:	bf1c      	itt	ne
 801a922:	f1c4 0401 	rsbne	r4, r4, #1
 801a926:	6034      	strne	r4, [r6, #0]
 801a928:	6833      	ldr	r3, [r6, #0]
 801a92a:	441a      	add	r2, r3
 801a92c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a934:	bf08      	it	eq
 801a936:	9203      	streq	r2, [sp, #12]
 801a938:	2130      	movs	r1, #48	; 0x30
 801a93a:	9b03      	ldr	r3, [sp, #12]
 801a93c:	4293      	cmp	r3, r2
 801a93e:	d307      	bcc.n	801a950 <__cvt+0x9c>
 801a940:	9b03      	ldr	r3, [sp, #12]
 801a942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a944:	1a1b      	subs	r3, r3, r0
 801a946:	6013      	str	r3, [r2, #0]
 801a948:	b005      	add	sp, #20
 801a94a:	ecbd 8b02 	vpop	{d8}
 801a94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a950:	1c5c      	adds	r4, r3, #1
 801a952:	9403      	str	r4, [sp, #12]
 801a954:	7019      	strb	r1, [r3, #0]
 801a956:	e7f0      	b.n	801a93a <__cvt+0x86>

0801a958 <__exponent>:
 801a958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a95a:	4603      	mov	r3, r0
 801a95c:	2900      	cmp	r1, #0
 801a95e:	bfb8      	it	lt
 801a960:	4249      	neglt	r1, r1
 801a962:	f803 2b02 	strb.w	r2, [r3], #2
 801a966:	bfb4      	ite	lt
 801a968:	222d      	movlt	r2, #45	; 0x2d
 801a96a:	222b      	movge	r2, #43	; 0x2b
 801a96c:	2909      	cmp	r1, #9
 801a96e:	7042      	strb	r2, [r0, #1]
 801a970:	dd2a      	ble.n	801a9c8 <__exponent+0x70>
 801a972:	f10d 0207 	add.w	r2, sp, #7
 801a976:	4617      	mov	r7, r2
 801a978:	260a      	movs	r6, #10
 801a97a:	4694      	mov	ip, r2
 801a97c:	fb91 f5f6 	sdiv	r5, r1, r6
 801a980:	fb06 1415 	mls	r4, r6, r5, r1
 801a984:	3430      	adds	r4, #48	; 0x30
 801a986:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a98a:	460c      	mov	r4, r1
 801a98c:	2c63      	cmp	r4, #99	; 0x63
 801a98e:	f102 32ff 	add.w	r2, r2, #4294967295
 801a992:	4629      	mov	r1, r5
 801a994:	dcf1      	bgt.n	801a97a <__exponent+0x22>
 801a996:	3130      	adds	r1, #48	; 0x30
 801a998:	f1ac 0402 	sub.w	r4, ip, #2
 801a99c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a9a0:	1c41      	adds	r1, r0, #1
 801a9a2:	4622      	mov	r2, r4
 801a9a4:	42ba      	cmp	r2, r7
 801a9a6:	d30a      	bcc.n	801a9be <__exponent+0x66>
 801a9a8:	f10d 0209 	add.w	r2, sp, #9
 801a9ac:	eba2 020c 	sub.w	r2, r2, ip
 801a9b0:	42bc      	cmp	r4, r7
 801a9b2:	bf88      	it	hi
 801a9b4:	2200      	movhi	r2, #0
 801a9b6:	4413      	add	r3, r2
 801a9b8:	1a18      	subs	r0, r3, r0
 801a9ba:	b003      	add	sp, #12
 801a9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9be:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a9c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a9c6:	e7ed      	b.n	801a9a4 <__exponent+0x4c>
 801a9c8:	2330      	movs	r3, #48	; 0x30
 801a9ca:	3130      	adds	r1, #48	; 0x30
 801a9cc:	7083      	strb	r3, [r0, #2]
 801a9ce:	70c1      	strb	r1, [r0, #3]
 801a9d0:	1d03      	adds	r3, r0, #4
 801a9d2:	e7f1      	b.n	801a9b8 <__exponent+0x60>
 801a9d4:	0000      	movs	r0, r0
	...

0801a9d8 <_printf_float>:
 801a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9dc:	b08b      	sub	sp, #44	; 0x2c
 801a9de:	460c      	mov	r4, r1
 801a9e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a9e4:	4616      	mov	r6, r2
 801a9e6:	461f      	mov	r7, r3
 801a9e8:	4605      	mov	r5, r0
 801a9ea:	f000 fe0b 	bl	801b604 <_localeconv_r>
 801a9ee:	f8d0 b000 	ldr.w	fp, [r0]
 801a9f2:	4658      	mov	r0, fp
 801a9f4:	f7e7 fb64 	bl	80020c0 <strlen>
 801a9f8:	2300      	movs	r3, #0
 801a9fa:	9308      	str	r3, [sp, #32]
 801a9fc:	f8d8 3000 	ldr.w	r3, [r8]
 801aa00:	f894 9018 	ldrb.w	r9, [r4, #24]
 801aa04:	6822      	ldr	r2, [r4, #0]
 801aa06:	3307      	adds	r3, #7
 801aa08:	f023 0307 	bic.w	r3, r3, #7
 801aa0c:	f103 0108 	add.w	r1, r3, #8
 801aa10:	f8c8 1000 	str.w	r1, [r8]
 801aa14:	ed93 0b00 	vldr	d0, [r3]
 801aa18:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801ac78 <_printf_float+0x2a0>
 801aa1c:	eeb0 7bc0 	vabs.f64	d7, d0
 801aa20:	eeb4 7b46 	vcmp.f64	d7, d6
 801aa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa28:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801aa2c:	4682      	mov	sl, r0
 801aa2e:	dd24      	ble.n	801aa7a <_printf_float+0xa2>
 801aa30:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801aa34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa38:	d502      	bpl.n	801aa40 <_printf_float+0x68>
 801aa3a:	232d      	movs	r3, #45	; 0x2d
 801aa3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa40:	498f      	ldr	r1, [pc, #572]	; (801ac80 <_printf_float+0x2a8>)
 801aa42:	4b90      	ldr	r3, [pc, #576]	; (801ac84 <_printf_float+0x2ac>)
 801aa44:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801aa48:	bf94      	ite	ls
 801aa4a:	4688      	movls	r8, r1
 801aa4c:	4698      	movhi	r8, r3
 801aa4e:	2303      	movs	r3, #3
 801aa50:	6123      	str	r3, [r4, #16]
 801aa52:	f022 0204 	bic.w	r2, r2, #4
 801aa56:	2300      	movs	r3, #0
 801aa58:	6022      	str	r2, [r4, #0]
 801aa5a:	9304      	str	r3, [sp, #16]
 801aa5c:	9700      	str	r7, [sp, #0]
 801aa5e:	4633      	mov	r3, r6
 801aa60:	aa09      	add	r2, sp, #36	; 0x24
 801aa62:	4621      	mov	r1, r4
 801aa64:	4628      	mov	r0, r5
 801aa66:	f000 f9d1 	bl	801ae0c <_printf_common>
 801aa6a:	3001      	adds	r0, #1
 801aa6c:	f040 808a 	bne.w	801ab84 <_printf_float+0x1ac>
 801aa70:	f04f 30ff 	mov.w	r0, #4294967295
 801aa74:	b00b      	add	sp, #44	; 0x2c
 801aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa7a:	eeb4 0b40 	vcmp.f64	d0, d0
 801aa7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa82:	d709      	bvc.n	801aa98 <_printf_float+0xc0>
 801aa84:	ee10 3a90 	vmov	r3, s1
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	bfbc      	itt	lt
 801aa8c:	232d      	movlt	r3, #45	; 0x2d
 801aa8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801aa92:	497d      	ldr	r1, [pc, #500]	; (801ac88 <_printf_float+0x2b0>)
 801aa94:	4b7d      	ldr	r3, [pc, #500]	; (801ac8c <_printf_float+0x2b4>)
 801aa96:	e7d5      	b.n	801aa44 <_printf_float+0x6c>
 801aa98:	6863      	ldr	r3, [r4, #4]
 801aa9a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801aa9e:	9104      	str	r1, [sp, #16]
 801aaa0:	1c59      	adds	r1, r3, #1
 801aaa2:	d13c      	bne.n	801ab1e <_printf_float+0x146>
 801aaa4:	2306      	movs	r3, #6
 801aaa6:	6063      	str	r3, [r4, #4]
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	9303      	str	r3, [sp, #12]
 801aaac:	ab08      	add	r3, sp, #32
 801aaae:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801aab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801aab6:	ab07      	add	r3, sp, #28
 801aab8:	6861      	ldr	r1, [r4, #4]
 801aaba:	9300      	str	r3, [sp, #0]
 801aabc:	6022      	str	r2, [r4, #0]
 801aabe:	f10d 031b 	add.w	r3, sp, #27
 801aac2:	4628      	mov	r0, r5
 801aac4:	f7ff fef6 	bl	801a8b4 <__cvt>
 801aac8:	9b04      	ldr	r3, [sp, #16]
 801aaca:	9907      	ldr	r1, [sp, #28]
 801aacc:	2b47      	cmp	r3, #71	; 0x47
 801aace:	4680      	mov	r8, r0
 801aad0:	d108      	bne.n	801aae4 <_printf_float+0x10c>
 801aad2:	1cc8      	adds	r0, r1, #3
 801aad4:	db02      	blt.n	801aadc <_printf_float+0x104>
 801aad6:	6863      	ldr	r3, [r4, #4]
 801aad8:	4299      	cmp	r1, r3
 801aada:	dd41      	ble.n	801ab60 <_printf_float+0x188>
 801aadc:	f1a9 0902 	sub.w	r9, r9, #2
 801aae0:	fa5f f989 	uxtb.w	r9, r9
 801aae4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801aae8:	d820      	bhi.n	801ab2c <_printf_float+0x154>
 801aaea:	3901      	subs	r1, #1
 801aaec:	464a      	mov	r2, r9
 801aaee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aaf2:	9107      	str	r1, [sp, #28]
 801aaf4:	f7ff ff30 	bl	801a958 <__exponent>
 801aaf8:	9a08      	ldr	r2, [sp, #32]
 801aafa:	9004      	str	r0, [sp, #16]
 801aafc:	1813      	adds	r3, r2, r0
 801aafe:	2a01      	cmp	r2, #1
 801ab00:	6123      	str	r3, [r4, #16]
 801ab02:	dc02      	bgt.n	801ab0a <_printf_float+0x132>
 801ab04:	6822      	ldr	r2, [r4, #0]
 801ab06:	07d2      	lsls	r2, r2, #31
 801ab08:	d501      	bpl.n	801ab0e <_printf_float+0x136>
 801ab0a:	3301      	adds	r3, #1
 801ab0c:	6123      	str	r3, [r4, #16]
 801ab0e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d0a2      	beq.n	801aa5c <_printf_float+0x84>
 801ab16:	232d      	movs	r3, #45	; 0x2d
 801ab18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab1c:	e79e      	b.n	801aa5c <_printf_float+0x84>
 801ab1e:	9904      	ldr	r1, [sp, #16]
 801ab20:	2947      	cmp	r1, #71	; 0x47
 801ab22:	d1c1      	bne.n	801aaa8 <_printf_float+0xd0>
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d1bf      	bne.n	801aaa8 <_printf_float+0xd0>
 801ab28:	2301      	movs	r3, #1
 801ab2a:	e7bc      	b.n	801aaa6 <_printf_float+0xce>
 801ab2c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801ab30:	d118      	bne.n	801ab64 <_printf_float+0x18c>
 801ab32:	2900      	cmp	r1, #0
 801ab34:	6863      	ldr	r3, [r4, #4]
 801ab36:	dd0b      	ble.n	801ab50 <_printf_float+0x178>
 801ab38:	6121      	str	r1, [r4, #16]
 801ab3a:	b913      	cbnz	r3, 801ab42 <_printf_float+0x16a>
 801ab3c:	6822      	ldr	r2, [r4, #0]
 801ab3e:	07d0      	lsls	r0, r2, #31
 801ab40:	d502      	bpl.n	801ab48 <_printf_float+0x170>
 801ab42:	3301      	adds	r3, #1
 801ab44:	440b      	add	r3, r1
 801ab46:	6123      	str	r3, [r4, #16]
 801ab48:	2300      	movs	r3, #0
 801ab4a:	65a1      	str	r1, [r4, #88]	; 0x58
 801ab4c:	9304      	str	r3, [sp, #16]
 801ab4e:	e7de      	b.n	801ab0e <_printf_float+0x136>
 801ab50:	b913      	cbnz	r3, 801ab58 <_printf_float+0x180>
 801ab52:	6822      	ldr	r2, [r4, #0]
 801ab54:	07d2      	lsls	r2, r2, #31
 801ab56:	d501      	bpl.n	801ab5c <_printf_float+0x184>
 801ab58:	3302      	adds	r3, #2
 801ab5a:	e7f4      	b.n	801ab46 <_printf_float+0x16e>
 801ab5c:	2301      	movs	r3, #1
 801ab5e:	e7f2      	b.n	801ab46 <_printf_float+0x16e>
 801ab60:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ab64:	9b08      	ldr	r3, [sp, #32]
 801ab66:	4299      	cmp	r1, r3
 801ab68:	db05      	blt.n	801ab76 <_printf_float+0x19e>
 801ab6a:	6823      	ldr	r3, [r4, #0]
 801ab6c:	6121      	str	r1, [r4, #16]
 801ab6e:	07d8      	lsls	r0, r3, #31
 801ab70:	d5ea      	bpl.n	801ab48 <_printf_float+0x170>
 801ab72:	1c4b      	adds	r3, r1, #1
 801ab74:	e7e7      	b.n	801ab46 <_printf_float+0x16e>
 801ab76:	2900      	cmp	r1, #0
 801ab78:	bfd4      	ite	le
 801ab7a:	f1c1 0202 	rsble	r2, r1, #2
 801ab7e:	2201      	movgt	r2, #1
 801ab80:	4413      	add	r3, r2
 801ab82:	e7e0      	b.n	801ab46 <_printf_float+0x16e>
 801ab84:	6823      	ldr	r3, [r4, #0]
 801ab86:	055a      	lsls	r2, r3, #21
 801ab88:	d407      	bmi.n	801ab9a <_printf_float+0x1c2>
 801ab8a:	6923      	ldr	r3, [r4, #16]
 801ab8c:	4642      	mov	r2, r8
 801ab8e:	4631      	mov	r1, r6
 801ab90:	4628      	mov	r0, r5
 801ab92:	47b8      	blx	r7
 801ab94:	3001      	adds	r0, #1
 801ab96:	d12a      	bne.n	801abee <_printf_float+0x216>
 801ab98:	e76a      	b.n	801aa70 <_printf_float+0x98>
 801ab9a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ab9e:	f240 80e0 	bls.w	801ad62 <_printf_float+0x38a>
 801aba2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801aba6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801abaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abae:	d133      	bne.n	801ac18 <_printf_float+0x240>
 801abb0:	4a37      	ldr	r2, [pc, #220]	; (801ac90 <_printf_float+0x2b8>)
 801abb2:	2301      	movs	r3, #1
 801abb4:	4631      	mov	r1, r6
 801abb6:	4628      	mov	r0, r5
 801abb8:	47b8      	blx	r7
 801abba:	3001      	adds	r0, #1
 801abbc:	f43f af58 	beq.w	801aa70 <_printf_float+0x98>
 801abc0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801abc4:	429a      	cmp	r2, r3
 801abc6:	db02      	blt.n	801abce <_printf_float+0x1f6>
 801abc8:	6823      	ldr	r3, [r4, #0]
 801abca:	07d8      	lsls	r0, r3, #31
 801abcc:	d50f      	bpl.n	801abee <_printf_float+0x216>
 801abce:	4653      	mov	r3, sl
 801abd0:	465a      	mov	r2, fp
 801abd2:	4631      	mov	r1, r6
 801abd4:	4628      	mov	r0, r5
 801abd6:	47b8      	blx	r7
 801abd8:	3001      	adds	r0, #1
 801abda:	f43f af49 	beq.w	801aa70 <_printf_float+0x98>
 801abde:	f04f 0800 	mov.w	r8, #0
 801abe2:	f104 091a 	add.w	r9, r4, #26
 801abe6:	9b08      	ldr	r3, [sp, #32]
 801abe8:	3b01      	subs	r3, #1
 801abea:	4543      	cmp	r3, r8
 801abec:	dc09      	bgt.n	801ac02 <_printf_float+0x22a>
 801abee:	6823      	ldr	r3, [r4, #0]
 801abf0:	079b      	lsls	r3, r3, #30
 801abf2:	f100 8106 	bmi.w	801ae02 <_printf_float+0x42a>
 801abf6:	68e0      	ldr	r0, [r4, #12]
 801abf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abfa:	4298      	cmp	r0, r3
 801abfc:	bfb8      	it	lt
 801abfe:	4618      	movlt	r0, r3
 801ac00:	e738      	b.n	801aa74 <_printf_float+0x9c>
 801ac02:	2301      	movs	r3, #1
 801ac04:	464a      	mov	r2, r9
 801ac06:	4631      	mov	r1, r6
 801ac08:	4628      	mov	r0, r5
 801ac0a:	47b8      	blx	r7
 801ac0c:	3001      	adds	r0, #1
 801ac0e:	f43f af2f 	beq.w	801aa70 <_printf_float+0x98>
 801ac12:	f108 0801 	add.w	r8, r8, #1
 801ac16:	e7e6      	b.n	801abe6 <_printf_float+0x20e>
 801ac18:	9b07      	ldr	r3, [sp, #28]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	dc3a      	bgt.n	801ac94 <_printf_float+0x2bc>
 801ac1e:	4a1c      	ldr	r2, [pc, #112]	; (801ac90 <_printf_float+0x2b8>)
 801ac20:	2301      	movs	r3, #1
 801ac22:	4631      	mov	r1, r6
 801ac24:	4628      	mov	r0, r5
 801ac26:	47b8      	blx	r7
 801ac28:	3001      	adds	r0, #1
 801ac2a:	f43f af21 	beq.w	801aa70 <_printf_float+0x98>
 801ac2e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ac32:	4313      	orrs	r3, r2
 801ac34:	d102      	bne.n	801ac3c <_printf_float+0x264>
 801ac36:	6823      	ldr	r3, [r4, #0]
 801ac38:	07d9      	lsls	r1, r3, #31
 801ac3a:	d5d8      	bpl.n	801abee <_printf_float+0x216>
 801ac3c:	4653      	mov	r3, sl
 801ac3e:	465a      	mov	r2, fp
 801ac40:	4631      	mov	r1, r6
 801ac42:	4628      	mov	r0, r5
 801ac44:	47b8      	blx	r7
 801ac46:	3001      	adds	r0, #1
 801ac48:	f43f af12 	beq.w	801aa70 <_printf_float+0x98>
 801ac4c:	f04f 0900 	mov.w	r9, #0
 801ac50:	f104 0a1a 	add.w	sl, r4, #26
 801ac54:	9b07      	ldr	r3, [sp, #28]
 801ac56:	425b      	negs	r3, r3
 801ac58:	454b      	cmp	r3, r9
 801ac5a:	dc01      	bgt.n	801ac60 <_printf_float+0x288>
 801ac5c:	9b08      	ldr	r3, [sp, #32]
 801ac5e:	e795      	b.n	801ab8c <_printf_float+0x1b4>
 801ac60:	2301      	movs	r3, #1
 801ac62:	4652      	mov	r2, sl
 801ac64:	4631      	mov	r1, r6
 801ac66:	4628      	mov	r0, r5
 801ac68:	47b8      	blx	r7
 801ac6a:	3001      	adds	r0, #1
 801ac6c:	f43f af00 	beq.w	801aa70 <_printf_float+0x98>
 801ac70:	f109 0901 	add.w	r9, r9, #1
 801ac74:	e7ee      	b.n	801ac54 <_printf_float+0x27c>
 801ac76:	bf00      	nop
 801ac78:	ffffffff 	.word	0xffffffff
 801ac7c:	7fefffff 	.word	0x7fefffff
 801ac80:	0802105e 	.word	0x0802105e
 801ac84:	08021062 	.word	0x08021062
 801ac88:	08021066 	.word	0x08021066
 801ac8c:	0802106a 	.word	0x0802106a
 801ac90:	0802106e 	.word	0x0802106e
 801ac94:	9a08      	ldr	r2, [sp, #32]
 801ac96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ac98:	429a      	cmp	r2, r3
 801ac9a:	bfa8      	it	ge
 801ac9c:	461a      	movge	r2, r3
 801ac9e:	2a00      	cmp	r2, #0
 801aca0:	4691      	mov	r9, r2
 801aca2:	dc38      	bgt.n	801ad16 <_printf_float+0x33e>
 801aca4:	2300      	movs	r3, #0
 801aca6:	9305      	str	r3, [sp, #20]
 801aca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801acac:	f104 021a 	add.w	r2, r4, #26
 801acb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801acb2:	9905      	ldr	r1, [sp, #20]
 801acb4:	9304      	str	r3, [sp, #16]
 801acb6:	eba3 0309 	sub.w	r3, r3, r9
 801acba:	428b      	cmp	r3, r1
 801acbc:	dc33      	bgt.n	801ad26 <_printf_float+0x34e>
 801acbe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801acc2:	429a      	cmp	r2, r3
 801acc4:	db3c      	blt.n	801ad40 <_printf_float+0x368>
 801acc6:	6823      	ldr	r3, [r4, #0]
 801acc8:	07da      	lsls	r2, r3, #31
 801acca:	d439      	bmi.n	801ad40 <_printf_float+0x368>
 801accc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801acd0:	eba2 0903 	sub.w	r9, r2, r3
 801acd4:	9b04      	ldr	r3, [sp, #16]
 801acd6:	1ad2      	subs	r2, r2, r3
 801acd8:	4591      	cmp	r9, r2
 801acda:	bfa8      	it	ge
 801acdc:	4691      	movge	r9, r2
 801acde:	f1b9 0f00 	cmp.w	r9, #0
 801ace2:	dc35      	bgt.n	801ad50 <_printf_float+0x378>
 801ace4:	f04f 0800 	mov.w	r8, #0
 801ace8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801acec:	f104 0a1a 	add.w	sl, r4, #26
 801acf0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801acf4:	1a9b      	subs	r3, r3, r2
 801acf6:	eba3 0309 	sub.w	r3, r3, r9
 801acfa:	4543      	cmp	r3, r8
 801acfc:	f77f af77 	ble.w	801abee <_printf_float+0x216>
 801ad00:	2301      	movs	r3, #1
 801ad02:	4652      	mov	r2, sl
 801ad04:	4631      	mov	r1, r6
 801ad06:	4628      	mov	r0, r5
 801ad08:	47b8      	blx	r7
 801ad0a:	3001      	adds	r0, #1
 801ad0c:	f43f aeb0 	beq.w	801aa70 <_printf_float+0x98>
 801ad10:	f108 0801 	add.w	r8, r8, #1
 801ad14:	e7ec      	b.n	801acf0 <_printf_float+0x318>
 801ad16:	4613      	mov	r3, r2
 801ad18:	4631      	mov	r1, r6
 801ad1a:	4642      	mov	r2, r8
 801ad1c:	4628      	mov	r0, r5
 801ad1e:	47b8      	blx	r7
 801ad20:	3001      	adds	r0, #1
 801ad22:	d1bf      	bne.n	801aca4 <_printf_float+0x2cc>
 801ad24:	e6a4      	b.n	801aa70 <_printf_float+0x98>
 801ad26:	2301      	movs	r3, #1
 801ad28:	4631      	mov	r1, r6
 801ad2a:	4628      	mov	r0, r5
 801ad2c:	9204      	str	r2, [sp, #16]
 801ad2e:	47b8      	blx	r7
 801ad30:	3001      	adds	r0, #1
 801ad32:	f43f ae9d 	beq.w	801aa70 <_printf_float+0x98>
 801ad36:	9b05      	ldr	r3, [sp, #20]
 801ad38:	9a04      	ldr	r2, [sp, #16]
 801ad3a:	3301      	adds	r3, #1
 801ad3c:	9305      	str	r3, [sp, #20]
 801ad3e:	e7b7      	b.n	801acb0 <_printf_float+0x2d8>
 801ad40:	4653      	mov	r3, sl
 801ad42:	465a      	mov	r2, fp
 801ad44:	4631      	mov	r1, r6
 801ad46:	4628      	mov	r0, r5
 801ad48:	47b8      	blx	r7
 801ad4a:	3001      	adds	r0, #1
 801ad4c:	d1be      	bne.n	801accc <_printf_float+0x2f4>
 801ad4e:	e68f      	b.n	801aa70 <_printf_float+0x98>
 801ad50:	9a04      	ldr	r2, [sp, #16]
 801ad52:	464b      	mov	r3, r9
 801ad54:	4442      	add	r2, r8
 801ad56:	4631      	mov	r1, r6
 801ad58:	4628      	mov	r0, r5
 801ad5a:	47b8      	blx	r7
 801ad5c:	3001      	adds	r0, #1
 801ad5e:	d1c1      	bne.n	801ace4 <_printf_float+0x30c>
 801ad60:	e686      	b.n	801aa70 <_printf_float+0x98>
 801ad62:	9a08      	ldr	r2, [sp, #32]
 801ad64:	2a01      	cmp	r2, #1
 801ad66:	dc01      	bgt.n	801ad6c <_printf_float+0x394>
 801ad68:	07db      	lsls	r3, r3, #31
 801ad6a:	d537      	bpl.n	801addc <_printf_float+0x404>
 801ad6c:	2301      	movs	r3, #1
 801ad6e:	4642      	mov	r2, r8
 801ad70:	4631      	mov	r1, r6
 801ad72:	4628      	mov	r0, r5
 801ad74:	47b8      	blx	r7
 801ad76:	3001      	adds	r0, #1
 801ad78:	f43f ae7a 	beq.w	801aa70 <_printf_float+0x98>
 801ad7c:	4653      	mov	r3, sl
 801ad7e:	465a      	mov	r2, fp
 801ad80:	4631      	mov	r1, r6
 801ad82:	4628      	mov	r0, r5
 801ad84:	47b8      	blx	r7
 801ad86:	3001      	adds	r0, #1
 801ad88:	f43f ae72 	beq.w	801aa70 <_printf_float+0x98>
 801ad8c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ad90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ad94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad98:	9b08      	ldr	r3, [sp, #32]
 801ad9a:	d01a      	beq.n	801add2 <_printf_float+0x3fa>
 801ad9c:	3b01      	subs	r3, #1
 801ad9e:	f108 0201 	add.w	r2, r8, #1
 801ada2:	4631      	mov	r1, r6
 801ada4:	4628      	mov	r0, r5
 801ada6:	47b8      	blx	r7
 801ada8:	3001      	adds	r0, #1
 801adaa:	d10e      	bne.n	801adca <_printf_float+0x3f2>
 801adac:	e660      	b.n	801aa70 <_printf_float+0x98>
 801adae:	2301      	movs	r3, #1
 801adb0:	464a      	mov	r2, r9
 801adb2:	4631      	mov	r1, r6
 801adb4:	4628      	mov	r0, r5
 801adb6:	47b8      	blx	r7
 801adb8:	3001      	adds	r0, #1
 801adba:	f43f ae59 	beq.w	801aa70 <_printf_float+0x98>
 801adbe:	f108 0801 	add.w	r8, r8, #1
 801adc2:	9b08      	ldr	r3, [sp, #32]
 801adc4:	3b01      	subs	r3, #1
 801adc6:	4543      	cmp	r3, r8
 801adc8:	dcf1      	bgt.n	801adae <_printf_float+0x3d6>
 801adca:	9b04      	ldr	r3, [sp, #16]
 801adcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801add0:	e6dd      	b.n	801ab8e <_printf_float+0x1b6>
 801add2:	f04f 0800 	mov.w	r8, #0
 801add6:	f104 091a 	add.w	r9, r4, #26
 801adda:	e7f2      	b.n	801adc2 <_printf_float+0x3ea>
 801addc:	2301      	movs	r3, #1
 801adde:	4642      	mov	r2, r8
 801ade0:	e7df      	b.n	801ada2 <_printf_float+0x3ca>
 801ade2:	2301      	movs	r3, #1
 801ade4:	464a      	mov	r2, r9
 801ade6:	4631      	mov	r1, r6
 801ade8:	4628      	mov	r0, r5
 801adea:	47b8      	blx	r7
 801adec:	3001      	adds	r0, #1
 801adee:	f43f ae3f 	beq.w	801aa70 <_printf_float+0x98>
 801adf2:	f108 0801 	add.w	r8, r8, #1
 801adf6:	68e3      	ldr	r3, [r4, #12]
 801adf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801adfa:	1a5b      	subs	r3, r3, r1
 801adfc:	4543      	cmp	r3, r8
 801adfe:	dcf0      	bgt.n	801ade2 <_printf_float+0x40a>
 801ae00:	e6f9      	b.n	801abf6 <_printf_float+0x21e>
 801ae02:	f04f 0800 	mov.w	r8, #0
 801ae06:	f104 0919 	add.w	r9, r4, #25
 801ae0a:	e7f4      	b.n	801adf6 <_printf_float+0x41e>

0801ae0c <_printf_common>:
 801ae0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae10:	4616      	mov	r6, r2
 801ae12:	4699      	mov	r9, r3
 801ae14:	688a      	ldr	r2, [r1, #8]
 801ae16:	690b      	ldr	r3, [r1, #16]
 801ae18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ae1c:	4293      	cmp	r3, r2
 801ae1e:	bfb8      	it	lt
 801ae20:	4613      	movlt	r3, r2
 801ae22:	6033      	str	r3, [r6, #0]
 801ae24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ae28:	4607      	mov	r7, r0
 801ae2a:	460c      	mov	r4, r1
 801ae2c:	b10a      	cbz	r2, 801ae32 <_printf_common+0x26>
 801ae2e:	3301      	adds	r3, #1
 801ae30:	6033      	str	r3, [r6, #0]
 801ae32:	6823      	ldr	r3, [r4, #0]
 801ae34:	0699      	lsls	r1, r3, #26
 801ae36:	bf42      	ittt	mi
 801ae38:	6833      	ldrmi	r3, [r6, #0]
 801ae3a:	3302      	addmi	r3, #2
 801ae3c:	6033      	strmi	r3, [r6, #0]
 801ae3e:	6825      	ldr	r5, [r4, #0]
 801ae40:	f015 0506 	ands.w	r5, r5, #6
 801ae44:	d106      	bne.n	801ae54 <_printf_common+0x48>
 801ae46:	f104 0a19 	add.w	sl, r4, #25
 801ae4a:	68e3      	ldr	r3, [r4, #12]
 801ae4c:	6832      	ldr	r2, [r6, #0]
 801ae4e:	1a9b      	subs	r3, r3, r2
 801ae50:	42ab      	cmp	r3, r5
 801ae52:	dc26      	bgt.n	801aea2 <_printf_common+0x96>
 801ae54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae58:	1e13      	subs	r3, r2, #0
 801ae5a:	6822      	ldr	r2, [r4, #0]
 801ae5c:	bf18      	it	ne
 801ae5e:	2301      	movne	r3, #1
 801ae60:	0692      	lsls	r2, r2, #26
 801ae62:	d42b      	bmi.n	801aebc <_printf_common+0xb0>
 801ae64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae68:	4649      	mov	r1, r9
 801ae6a:	4638      	mov	r0, r7
 801ae6c:	47c0      	blx	r8
 801ae6e:	3001      	adds	r0, #1
 801ae70:	d01e      	beq.n	801aeb0 <_printf_common+0xa4>
 801ae72:	6823      	ldr	r3, [r4, #0]
 801ae74:	6922      	ldr	r2, [r4, #16]
 801ae76:	f003 0306 	and.w	r3, r3, #6
 801ae7a:	2b04      	cmp	r3, #4
 801ae7c:	bf02      	ittt	eq
 801ae7e:	68e5      	ldreq	r5, [r4, #12]
 801ae80:	6833      	ldreq	r3, [r6, #0]
 801ae82:	1aed      	subeq	r5, r5, r3
 801ae84:	68a3      	ldr	r3, [r4, #8]
 801ae86:	bf0c      	ite	eq
 801ae88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae8c:	2500      	movne	r5, #0
 801ae8e:	4293      	cmp	r3, r2
 801ae90:	bfc4      	itt	gt
 801ae92:	1a9b      	subgt	r3, r3, r2
 801ae94:	18ed      	addgt	r5, r5, r3
 801ae96:	2600      	movs	r6, #0
 801ae98:	341a      	adds	r4, #26
 801ae9a:	42b5      	cmp	r5, r6
 801ae9c:	d11a      	bne.n	801aed4 <_printf_common+0xc8>
 801ae9e:	2000      	movs	r0, #0
 801aea0:	e008      	b.n	801aeb4 <_printf_common+0xa8>
 801aea2:	2301      	movs	r3, #1
 801aea4:	4652      	mov	r2, sl
 801aea6:	4649      	mov	r1, r9
 801aea8:	4638      	mov	r0, r7
 801aeaa:	47c0      	blx	r8
 801aeac:	3001      	adds	r0, #1
 801aeae:	d103      	bne.n	801aeb8 <_printf_common+0xac>
 801aeb0:	f04f 30ff 	mov.w	r0, #4294967295
 801aeb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aeb8:	3501      	adds	r5, #1
 801aeba:	e7c6      	b.n	801ae4a <_printf_common+0x3e>
 801aebc:	18e1      	adds	r1, r4, r3
 801aebe:	1c5a      	adds	r2, r3, #1
 801aec0:	2030      	movs	r0, #48	; 0x30
 801aec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aec6:	4422      	add	r2, r4
 801aec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aed0:	3302      	adds	r3, #2
 801aed2:	e7c7      	b.n	801ae64 <_printf_common+0x58>
 801aed4:	2301      	movs	r3, #1
 801aed6:	4622      	mov	r2, r4
 801aed8:	4649      	mov	r1, r9
 801aeda:	4638      	mov	r0, r7
 801aedc:	47c0      	blx	r8
 801aede:	3001      	adds	r0, #1
 801aee0:	d0e6      	beq.n	801aeb0 <_printf_common+0xa4>
 801aee2:	3601      	adds	r6, #1
 801aee4:	e7d9      	b.n	801ae9a <_printf_common+0x8e>
	...

0801aee8 <_printf_i>:
 801aee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aeec:	7e0f      	ldrb	r7, [r1, #24]
 801aeee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aef0:	2f78      	cmp	r7, #120	; 0x78
 801aef2:	4691      	mov	r9, r2
 801aef4:	4680      	mov	r8, r0
 801aef6:	460c      	mov	r4, r1
 801aef8:	469a      	mov	sl, r3
 801aefa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aefe:	d807      	bhi.n	801af10 <_printf_i+0x28>
 801af00:	2f62      	cmp	r7, #98	; 0x62
 801af02:	d80a      	bhi.n	801af1a <_printf_i+0x32>
 801af04:	2f00      	cmp	r7, #0
 801af06:	f000 80d4 	beq.w	801b0b2 <_printf_i+0x1ca>
 801af0a:	2f58      	cmp	r7, #88	; 0x58
 801af0c:	f000 80c0 	beq.w	801b090 <_printf_i+0x1a8>
 801af10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801af18:	e03a      	b.n	801af90 <_printf_i+0xa8>
 801af1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801af1e:	2b15      	cmp	r3, #21
 801af20:	d8f6      	bhi.n	801af10 <_printf_i+0x28>
 801af22:	a101      	add	r1, pc, #4	; (adr r1, 801af28 <_printf_i+0x40>)
 801af24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801af28:	0801af81 	.word	0x0801af81
 801af2c:	0801af95 	.word	0x0801af95
 801af30:	0801af11 	.word	0x0801af11
 801af34:	0801af11 	.word	0x0801af11
 801af38:	0801af11 	.word	0x0801af11
 801af3c:	0801af11 	.word	0x0801af11
 801af40:	0801af95 	.word	0x0801af95
 801af44:	0801af11 	.word	0x0801af11
 801af48:	0801af11 	.word	0x0801af11
 801af4c:	0801af11 	.word	0x0801af11
 801af50:	0801af11 	.word	0x0801af11
 801af54:	0801b099 	.word	0x0801b099
 801af58:	0801afc1 	.word	0x0801afc1
 801af5c:	0801b053 	.word	0x0801b053
 801af60:	0801af11 	.word	0x0801af11
 801af64:	0801af11 	.word	0x0801af11
 801af68:	0801b0bb 	.word	0x0801b0bb
 801af6c:	0801af11 	.word	0x0801af11
 801af70:	0801afc1 	.word	0x0801afc1
 801af74:	0801af11 	.word	0x0801af11
 801af78:	0801af11 	.word	0x0801af11
 801af7c:	0801b05b 	.word	0x0801b05b
 801af80:	682b      	ldr	r3, [r5, #0]
 801af82:	1d1a      	adds	r2, r3, #4
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	602a      	str	r2, [r5, #0]
 801af88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af90:	2301      	movs	r3, #1
 801af92:	e09f      	b.n	801b0d4 <_printf_i+0x1ec>
 801af94:	6820      	ldr	r0, [r4, #0]
 801af96:	682b      	ldr	r3, [r5, #0]
 801af98:	0607      	lsls	r7, r0, #24
 801af9a:	f103 0104 	add.w	r1, r3, #4
 801af9e:	6029      	str	r1, [r5, #0]
 801afa0:	d501      	bpl.n	801afa6 <_printf_i+0xbe>
 801afa2:	681e      	ldr	r6, [r3, #0]
 801afa4:	e003      	b.n	801afae <_printf_i+0xc6>
 801afa6:	0646      	lsls	r6, r0, #25
 801afa8:	d5fb      	bpl.n	801afa2 <_printf_i+0xba>
 801afaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 801afae:	2e00      	cmp	r6, #0
 801afb0:	da03      	bge.n	801afba <_printf_i+0xd2>
 801afb2:	232d      	movs	r3, #45	; 0x2d
 801afb4:	4276      	negs	r6, r6
 801afb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801afba:	485a      	ldr	r0, [pc, #360]	; (801b124 <_printf_i+0x23c>)
 801afbc:	230a      	movs	r3, #10
 801afbe:	e012      	b.n	801afe6 <_printf_i+0xfe>
 801afc0:	682b      	ldr	r3, [r5, #0]
 801afc2:	6820      	ldr	r0, [r4, #0]
 801afc4:	1d19      	adds	r1, r3, #4
 801afc6:	6029      	str	r1, [r5, #0]
 801afc8:	0605      	lsls	r5, r0, #24
 801afca:	d501      	bpl.n	801afd0 <_printf_i+0xe8>
 801afcc:	681e      	ldr	r6, [r3, #0]
 801afce:	e002      	b.n	801afd6 <_printf_i+0xee>
 801afd0:	0641      	lsls	r1, r0, #25
 801afd2:	d5fb      	bpl.n	801afcc <_printf_i+0xe4>
 801afd4:	881e      	ldrh	r6, [r3, #0]
 801afd6:	4853      	ldr	r0, [pc, #332]	; (801b124 <_printf_i+0x23c>)
 801afd8:	2f6f      	cmp	r7, #111	; 0x6f
 801afda:	bf0c      	ite	eq
 801afdc:	2308      	moveq	r3, #8
 801afde:	230a      	movne	r3, #10
 801afe0:	2100      	movs	r1, #0
 801afe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801afe6:	6865      	ldr	r5, [r4, #4]
 801afe8:	60a5      	str	r5, [r4, #8]
 801afea:	2d00      	cmp	r5, #0
 801afec:	bfa2      	ittt	ge
 801afee:	6821      	ldrge	r1, [r4, #0]
 801aff0:	f021 0104 	bicge.w	r1, r1, #4
 801aff4:	6021      	strge	r1, [r4, #0]
 801aff6:	b90e      	cbnz	r6, 801affc <_printf_i+0x114>
 801aff8:	2d00      	cmp	r5, #0
 801affa:	d04b      	beq.n	801b094 <_printf_i+0x1ac>
 801affc:	4615      	mov	r5, r2
 801affe:	fbb6 f1f3 	udiv	r1, r6, r3
 801b002:	fb03 6711 	mls	r7, r3, r1, r6
 801b006:	5dc7      	ldrb	r7, [r0, r7]
 801b008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b00c:	4637      	mov	r7, r6
 801b00e:	42bb      	cmp	r3, r7
 801b010:	460e      	mov	r6, r1
 801b012:	d9f4      	bls.n	801affe <_printf_i+0x116>
 801b014:	2b08      	cmp	r3, #8
 801b016:	d10b      	bne.n	801b030 <_printf_i+0x148>
 801b018:	6823      	ldr	r3, [r4, #0]
 801b01a:	07de      	lsls	r6, r3, #31
 801b01c:	d508      	bpl.n	801b030 <_printf_i+0x148>
 801b01e:	6923      	ldr	r3, [r4, #16]
 801b020:	6861      	ldr	r1, [r4, #4]
 801b022:	4299      	cmp	r1, r3
 801b024:	bfde      	ittt	le
 801b026:	2330      	movle	r3, #48	; 0x30
 801b028:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b02c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b030:	1b52      	subs	r2, r2, r5
 801b032:	6122      	str	r2, [r4, #16]
 801b034:	f8cd a000 	str.w	sl, [sp]
 801b038:	464b      	mov	r3, r9
 801b03a:	aa03      	add	r2, sp, #12
 801b03c:	4621      	mov	r1, r4
 801b03e:	4640      	mov	r0, r8
 801b040:	f7ff fee4 	bl	801ae0c <_printf_common>
 801b044:	3001      	adds	r0, #1
 801b046:	d14a      	bne.n	801b0de <_printf_i+0x1f6>
 801b048:	f04f 30ff 	mov.w	r0, #4294967295
 801b04c:	b004      	add	sp, #16
 801b04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b052:	6823      	ldr	r3, [r4, #0]
 801b054:	f043 0320 	orr.w	r3, r3, #32
 801b058:	6023      	str	r3, [r4, #0]
 801b05a:	4833      	ldr	r0, [pc, #204]	; (801b128 <_printf_i+0x240>)
 801b05c:	2778      	movs	r7, #120	; 0x78
 801b05e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b062:	6823      	ldr	r3, [r4, #0]
 801b064:	6829      	ldr	r1, [r5, #0]
 801b066:	061f      	lsls	r7, r3, #24
 801b068:	f851 6b04 	ldr.w	r6, [r1], #4
 801b06c:	d402      	bmi.n	801b074 <_printf_i+0x18c>
 801b06e:	065f      	lsls	r7, r3, #25
 801b070:	bf48      	it	mi
 801b072:	b2b6      	uxthmi	r6, r6
 801b074:	07df      	lsls	r7, r3, #31
 801b076:	bf48      	it	mi
 801b078:	f043 0320 	orrmi.w	r3, r3, #32
 801b07c:	6029      	str	r1, [r5, #0]
 801b07e:	bf48      	it	mi
 801b080:	6023      	strmi	r3, [r4, #0]
 801b082:	b91e      	cbnz	r6, 801b08c <_printf_i+0x1a4>
 801b084:	6823      	ldr	r3, [r4, #0]
 801b086:	f023 0320 	bic.w	r3, r3, #32
 801b08a:	6023      	str	r3, [r4, #0]
 801b08c:	2310      	movs	r3, #16
 801b08e:	e7a7      	b.n	801afe0 <_printf_i+0xf8>
 801b090:	4824      	ldr	r0, [pc, #144]	; (801b124 <_printf_i+0x23c>)
 801b092:	e7e4      	b.n	801b05e <_printf_i+0x176>
 801b094:	4615      	mov	r5, r2
 801b096:	e7bd      	b.n	801b014 <_printf_i+0x12c>
 801b098:	682b      	ldr	r3, [r5, #0]
 801b09a:	6826      	ldr	r6, [r4, #0]
 801b09c:	6961      	ldr	r1, [r4, #20]
 801b09e:	1d18      	adds	r0, r3, #4
 801b0a0:	6028      	str	r0, [r5, #0]
 801b0a2:	0635      	lsls	r5, r6, #24
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	d501      	bpl.n	801b0ac <_printf_i+0x1c4>
 801b0a8:	6019      	str	r1, [r3, #0]
 801b0aa:	e002      	b.n	801b0b2 <_printf_i+0x1ca>
 801b0ac:	0670      	lsls	r0, r6, #25
 801b0ae:	d5fb      	bpl.n	801b0a8 <_printf_i+0x1c0>
 801b0b0:	8019      	strh	r1, [r3, #0]
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	6123      	str	r3, [r4, #16]
 801b0b6:	4615      	mov	r5, r2
 801b0b8:	e7bc      	b.n	801b034 <_printf_i+0x14c>
 801b0ba:	682b      	ldr	r3, [r5, #0]
 801b0bc:	1d1a      	adds	r2, r3, #4
 801b0be:	602a      	str	r2, [r5, #0]
 801b0c0:	681d      	ldr	r5, [r3, #0]
 801b0c2:	6862      	ldr	r2, [r4, #4]
 801b0c4:	2100      	movs	r1, #0
 801b0c6:	4628      	mov	r0, r5
 801b0c8:	f7e6 ffaa 	bl	8002020 <memchr>
 801b0cc:	b108      	cbz	r0, 801b0d2 <_printf_i+0x1ea>
 801b0ce:	1b40      	subs	r0, r0, r5
 801b0d0:	6060      	str	r0, [r4, #4]
 801b0d2:	6863      	ldr	r3, [r4, #4]
 801b0d4:	6123      	str	r3, [r4, #16]
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0dc:	e7aa      	b.n	801b034 <_printf_i+0x14c>
 801b0de:	6923      	ldr	r3, [r4, #16]
 801b0e0:	462a      	mov	r2, r5
 801b0e2:	4649      	mov	r1, r9
 801b0e4:	4640      	mov	r0, r8
 801b0e6:	47d0      	blx	sl
 801b0e8:	3001      	adds	r0, #1
 801b0ea:	d0ad      	beq.n	801b048 <_printf_i+0x160>
 801b0ec:	6823      	ldr	r3, [r4, #0]
 801b0ee:	079b      	lsls	r3, r3, #30
 801b0f0:	d413      	bmi.n	801b11a <_printf_i+0x232>
 801b0f2:	68e0      	ldr	r0, [r4, #12]
 801b0f4:	9b03      	ldr	r3, [sp, #12]
 801b0f6:	4298      	cmp	r0, r3
 801b0f8:	bfb8      	it	lt
 801b0fa:	4618      	movlt	r0, r3
 801b0fc:	e7a6      	b.n	801b04c <_printf_i+0x164>
 801b0fe:	2301      	movs	r3, #1
 801b100:	4632      	mov	r2, r6
 801b102:	4649      	mov	r1, r9
 801b104:	4640      	mov	r0, r8
 801b106:	47d0      	blx	sl
 801b108:	3001      	adds	r0, #1
 801b10a:	d09d      	beq.n	801b048 <_printf_i+0x160>
 801b10c:	3501      	adds	r5, #1
 801b10e:	68e3      	ldr	r3, [r4, #12]
 801b110:	9903      	ldr	r1, [sp, #12]
 801b112:	1a5b      	subs	r3, r3, r1
 801b114:	42ab      	cmp	r3, r5
 801b116:	dcf2      	bgt.n	801b0fe <_printf_i+0x216>
 801b118:	e7eb      	b.n	801b0f2 <_printf_i+0x20a>
 801b11a:	2500      	movs	r5, #0
 801b11c:	f104 0619 	add.w	r6, r4, #25
 801b120:	e7f5      	b.n	801b10e <_printf_i+0x226>
 801b122:	bf00      	nop
 801b124:	08021070 	.word	0x08021070
 801b128:	08021081 	.word	0x08021081

0801b12c <std>:
 801b12c:	2300      	movs	r3, #0
 801b12e:	b510      	push	{r4, lr}
 801b130:	4604      	mov	r4, r0
 801b132:	e9c0 3300 	strd	r3, r3, [r0]
 801b136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b13a:	6083      	str	r3, [r0, #8]
 801b13c:	8181      	strh	r1, [r0, #12]
 801b13e:	6643      	str	r3, [r0, #100]	; 0x64
 801b140:	81c2      	strh	r2, [r0, #14]
 801b142:	6183      	str	r3, [r0, #24]
 801b144:	4619      	mov	r1, r3
 801b146:	2208      	movs	r2, #8
 801b148:	305c      	adds	r0, #92	; 0x5c
 801b14a:	f000 fa41 	bl	801b5d0 <memset>
 801b14e:	4b0d      	ldr	r3, [pc, #52]	; (801b184 <std+0x58>)
 801b150:	6263      	str	r3, [r4, #36]	; 0x24
 801b152:	4b0d      	ldr	r3, [pc, #52]	; (801b188 <std+0x5c>)
 801b154:	62a3      	str	r3, [r4, #40]	; 0x28
 801b156:	4b0d      	ldr	r3, [pc, #52]	; (801b18c <std+0x60>)
 801b158:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b15a:	4b0d      	ldr	r3, [pc, #52]	; (801b190 <std+0x64>)
 801b15c:	6323      	str	r3, [r4, #48]	; 0x30
 801b15e:	4b0d      	ldr	r3, [pc, #52]	; (801b194 <std+0x68>)
 801b160:	6224      	str	r4, [r4, #32]
 801b162:	429c      	cmp	r4, r3
 801b164:	d006      	beq.n	801b174 <std+0x48>
 801b166:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b16a:	4294      	cmp	r4, r2
 801b16c:	d002      	beq.n	801b174 <std+0x48>
 801b16e:	33d0      	adds	r3, #208	; 0xd0
 801b170:	429c      	cmp	r4, r3
 801b172:	d105      	bne.n	801b180 <std+0x54>
 801b174:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b17c:	f000 bab0 	b.w	801b6e0 <__retarget_lock_init_recursive>
 801b180:	bd10      	pop	{r4, pc}
 801b182:	bf00      	nop
 801b184:	0801b3cd 	.word	0x0801b3cd
 801b188:	0801b3ef 	.word	0x0801b3ef
 801b18c:	0801b427 	.word	0x0801b427
 801b190:	0801b44b 	.word	0x0801b44b
 801b194:	20007318 	.word	0x20007318

0801b198 <stdio_exit_handler>:
 801b198:	4a02      	ldr	r2, [pc, #8]	; (801b1a4 <stdio_exit_handler+0xc>)
 801b19a:	4903      	ldr	r1, [pc, #12]	; (801b1a8 <stdio_exit_handler+0x10>)
 801b19c:	4803      	ldr	r0, [pc, #12]	; (801b1ac <stdio_exit_handler+0x14>)
 801b19e:	f000 b869 	b.w	801b274 <_fwalk_sglue>
 801b1a2:	bf00      	nop
 801b1a4:	20000184 	.word	0x20000184
 801b1a8:	0801d275 	.word	0x0801d275
 801b1ac:	20000190 	.word	0x20000190

0801b1b0 <cleanup_stdio>:
 801b1b0:	6841      	ldr	r1, [r0, #4]
 801b1b2:	4b0c      	ldr	r3, [pc, #48]	; (801b1e4 <cleanup_stdio+0x34>)
 801b1b4:	4299      	cmp	r1, r3
 801b1b6:	b510      	push	{r4, lr}
 801b1b8:	4604      	mov	r4, r0
 801b1ba:	d001      	beq.n	801b1c0 <cleanup_stdio+0x10>
 801b1bc:	f002 f85a 	bl	801d274 <_fflush_r>
 801b1c0:	68a1      	ldr	r1, [r4, #8]
 801b1c2:	4b09      	ldr	r3, [pc, #36]	; (801b1e8 <cleanup_stdio+0x38>)
 801b1c4:	4299      	cmp	r1, r3
 801b1c6:	d002      	beq.n	801b1ce <cleanup_stdio+0x1e>
 801b1c8:	4620      	mov	r0, r4
 801b1ca:	f002 f853 	bl	801d274 <_fflush_r>
 801b1ce:	68e1      	ldr	r1, [r4, #12]
 801b1d0:	4b06      	ldr	r3, [pc, #24]	; (801b1ec <cleanup_stdio+0x3c>)
 801b1d2:	4299      	cmp	r1, r3
 801b1d4:	d004      	beq.n	801b1e0 <cleanup_stdio+0x30>
 801b1d6:	4620      	mov	r0, r4
 801b1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1dc:	f002 b84a 	b.w	801d274 <_fflush_r>
 801b1e0:	bd10      	pop	{r4, pc}
 801b1e2:	bf00      	nop
 801b1e4:	20007318 	.word	0x20007318
 801b1e8:	20007380 	.word	0x20007380
 801b1ec:	200073e8 	.word	0x200073e8

0801b1f0 <global_stdio_init.part.0>:
 801b1f0:	b510      	push	{r4, lr}
 801b1f2:	4b0b      	ldr	r3, [pc, #44]	; (801b220 <global_stdio_init.part.0+0x30>)
 801b1f4:	4c0b      	ldr	r4, [pc, #44]	; (801b224 <global_stdio_init.part.0+0x34>)
 801b1f6:	4a0c      	ldr	r2, [pc, #48]	; (801b228 <global_stdio_init.part.0+0x38>)
 801b1f8:	601a      	str	r2, [r3, #0]
 801b1fa:	4620      	mov	r0, r4
 801b1fc:	2200      	movs	r2, #0
 801b1fe:	2104      	movs	r1, #4
 801b200:	f7ff ff94 	bl	801b12c <std>
 801b204:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b208:	2201      	movs	r2, #1
 801b20a:	2109      	movs	r1, #9
 801b20c:	f7ff ff8e 	bl	801b12c <std>
 801b210:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b214:	2202      	movs	r2, #2
 801b216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b21a:	2112      	movs	r1, #18
 801b21c:	f7ff bf86 	b.w	801b12c <std>
 801b220:	20007450 	.word	0x20007450
 801b224:	20007318 	.word	0x20007318
 801b228:	0801b199 	.word	0x0801b199

0801b22c <__sfp_lock_acquire>:
 801b22c:	4801      	ldr	r0, [pc, #4]	; (801b234 <__sfp_lock_acquire+0x8>)
 801b22e:	f000 ba58 	b.w	801b6e2 <__retarget_lock_acquire_recursive>
 801b232:	bf00      	nop
 801b234:	20007459 	.word	0x20007459

0801b238 <__sfp_lock_release>:
 801b238:	4801      	ldr	r0, [pc, #4]	; (801b240 <__sfp_lock_release+0x8>)
 801b23a:	f000 ba53 	b.w	801b6e4 <__retarget_lock_release_recursive>
 801b23e:	bf00      	nop
 801b240:	20007459 	.word	0x20007459

0801b244 <__sinit>:
 801b244:	b510      	push	{r4, lr}
 801b246:	4604      	mov	r4, r0
 801b248:	f7ff fff0 	bl	801b22c <__sfp_lock_acquire>
 801b24c:	6a23      	ldr	r3, [r4, #32]
 801b24e:	b11b      	cbz	r3, 801b258 <__sinit+0x14>
 801b250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b254:	f7ff bff0 	b.w	801b238 <__sfp_lock_release>
 801b258:	4b04      	ldr	r3, [pc, #16]	; (801b26c <__sinit+0x28>)
 801b25a:	6223      	str	r3, [r4, #32]
 801b25c:	4b04      	ldr	r3, [pc, #16]	; (801b270 <__sinit+0x2c>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d1f5      	bne.n	801b250 <__sinit+0xc>
 801b264:	f7ff ffc4 	bl	801b1f0 <global_stdio_init.part.0>
 801b268:	e7f2      	b.n	801b250 <__sinit+0xc>
 801b26a:	bf00      	nop
 801b26c:	0801b1b1 	.word	0x0801b1b1
 801b270:	20007450 	.word	0x20007450

0801b274 <_fwalk_sglue>:
 801b274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b278:	4607      	mov	r7, r0
 801b27a:	4688      	mov	r8, r1
 801b27c:	4614      	mov	r4, r2
 801b27e:	2600      	movs	r6, #0
 801b280:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b284:	f1b9 0901 	subs.w	r9, r9, #1
 801b288:	d505      	bpl.n	801b296 <_fwalk_sglue+0x22>
 801b28a:	6824      	ldr	r4, [r4, #0]
 801b28c:	2c00      	cmp	r4, #0
 801b28e:	d1f7      	bne.n	801b280 <_fwalk_sglue+0xc>
 801b290:	4630      	mov	r0, r6
 801b292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b296:	89ab      	ldrh	r3, [r5, #12]
 801b298:	2b01      	cmp	r3, #1
 801b29a:	d907      	bls.n	801b2ac <_fwalk_sglue+0x38>
 801b29c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b2a0:	3301      	adds	r3, #1
 801b2a2:	d003      	beq.n	801b2ac <_fwalk_sglue+0x38>
 801b2a4:	4629      	mov	r1, r5
 801b2a6:	4638      	mov	r0, r7
 801b2a8:	47c0      	blx	r8
 801b2aa:	4306      	orrs	r6, r0
 801b2ac:	3568      	adds	r5, #104	; 0x68
 801b2ae:	e7e9      	b.n	801b284 <_fwalk_sglue+0x10>

0801b2b0 <iprintf>:
 801b2b0:	b40f      	push	{r0, r1, r2, r3}
 801b2b2:	b507      	push	{r0, r1, r2, lr}
 801b2b4:	4906      	ldr	r1, [pc, #24]	; (801b2d0 <iprintf+0x20>)
 801b2b6:	ab04      	add	r3, sp, #16
 801b2b8:	6808      	ldr	r0, [r1, #0]
 801b2ba:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2be:	6881      	ldr	r1, [r0, #8]
 801b2c0:	9301      	str	r3, [sp, #4]
 801b2c2:	f001 fe37 	bl	801cf34 <_vfiprintf_r>
 801b2c6:	b003      	add	sp, #12
 801b2c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2cc:	b004      	add	sp, #16
 801b2ce:	4770      	bx	lr
 801b2d0:	200001dc 	.word	0x200001dc

0801b2d4 <_puts_r>:
 801b2d4:	6a03      	ldr	r3, [r0, #32]
 801b2d6:	b570      	push	{r4, r5, r6, lr}
 801b2d8:	6884      	ldr	r4, [r0, #8]
 801b2da:	4605      	mov	r5, r0
 801b2dc:	460e      	mov	r6, r1
 801b2de:	b90b      	cbnz	r3, 801b2e4 <_puts_r+0x10>
 801b2e0:	f7ff ffb0 	bl	801b244 <__sinit>
 801b2e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2e6:	07db      	lsls	r3, r3, #31
 801b2e8:	d405      	bmi.n	801b2f6 <_puts_r+0x22>
 801b2ea:	89a3      	ldrh	r3, [r4, #12]
 801b2ec:	0598      	lsls	r0, r3, #22
 801b2ee:	d402      	bmi.n	801b2f6 <_puts_r+0x22>
 801b2f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b2f2:	f000 f9f6 	bl	801b6e2 <__retarget_lock_acquire_recursive>
 801b2f6:	89a3      	ldrh	r3, [r4, #12]
 801b2f8:	0719      	lsls	r1, r3, #28
 801b2fa:	d513      	bpl.n	801b324 <_puts_r+0x50>
 801b2fc:	6923      	ldr	r3, [r4, #16]
 801b2fe:	b18b      	cbz	r3, 801b324 <_puts_r+0x50>
 801b300:	3e01      	subs	r6, #1
 801b302:	68a3      	ldr	r3, [r4, #8]
 801b304:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b308:	3b01      	subs	r3, #1
 801b30a:	60a3      	str	r3, [r4, #8]
 801b30c:	b9e9      	cbnz	r1, 801b34a <_puts_r+0x76>
 801b30e:	2b00      	cmp	r3, #0
 801b310:	da2e      	bge.n	801b370 <_puts_r+0x9c>
 801b312:	4622      	mov	r2, r4
 801b314:	210a      	movs	r1, #10
 801b316:	4628      	mov	r0, r5
 801b318:	f000 f89b 	bl	801b452 <__swbuf_r>
 801b31c:	3001      	adds	r0, #1
 801b31e:	d007      	beq.n	801b330 <_puts_r+0x5c>
 801b320:	250a      	movs	r5, #10
 801b322:	e007      	b.n	801b334 <_puts_r+0x60>
 801b324:	4621      	mov	r1, r4
 801b326:	4628      	mov	r0, r5
 801b328:	f000 f8d0 	bl	801b4cc <__swsetup_r>
 801b32c:	2800      	cmp	r0, #0
 801b32e:	d0e7      	beq.n	801b300 <_puts_r+0x2c>
 801b330:	f04f 35ff 	mov.w	r5, #4294967295
 801b334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b336:	07da      	lsls	r2, r3, #31
 801b338:	d405      	bmi.n	801b346 <_puts_r+0x72>
 801b33a:	89a3      	ldrh	r3, [r4, #12]
 801b33c:	059b      	lsls	r3, r3, #22
 801b33e:	d402      	bmi.n	801b346 <_puts_r+0x72>
 801b340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b342:	f000 f9cf 	bl	801b6e4 <__retarget_lock_release_recursive>
 801b346:	4628      	mov	r0, r5
 801b348:	bd70      	pop	{r4, r5, r6, pc}
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	da04      	bge.n	801b358 <_puts_r+0x84>
 801b34e:	69a2      	ldr	r2, [r4, #24]
 801b350:	429a      	cmp	r2, r3
 801b352:	dc06      	bgt.n	801b362 <_puts_r+0x8e>
 801b354:	290a      	cmp	r1, #10
 801b356:	d004      	beq.n	801b362 <_puts_r+0x8e>
 801b358:	6823      	ldr	r3, [r4, #0]
 801b35a:	1c5a      	adds	r2, r3, #1
 801b35c:	6022      	str	r2, [r4, #0]
 801b35e:	7019      	strb	r1, [r3, #0]
 801b360:	e7cf      	b.n	801b302 <_puts_r+0x2e>
 801b362:	4622      	mov	r2, r4
 801b364:	4628      	mov	r0, r5
 801b366:	f000 f874 	bl	801b452 <__swbuf_r>
 801b36a:	3001      	adds	r0, #1
 801b36c:	d1c9      	bne.n	801b302 <_puts_r+0x2e>
 801b36e:	e7df      	b.n	801b330 <_puts_r+0x5c>
 801b370:	6823      	ldr	r3, [r4, #0]
 801b372:	250a      	movs	r5, #10
 801b374:	1c5a      	adds	r2, r3, #1
 801b376:	6022      	str	r2, [r4, #0]
 801b378:	701d      	strb	r5, [r3, #0]
 801b37a:	e7db      	b.n	801b334 <_puts_r+0x60>

0801b37c <puts>:
 801b37c:	4b02      	ldr	r3, [pc, #8]	; (801b388 <puts+0xc>)
 801b37e:	4601      	mov	r1, r0
 801b380:	6818      	ldr	r0, [r3, #0]
 801b382:	f7ff bfa7 	b.w	801b2d4 <_puts_r>
 801b386:	bf00      	nop
 801b388:	200001dc 	.word	0x200001dc

0801b38c <siprintf>:
 801b38c:	b40e      	push	{r1, r2, r3}
 801b38e:	b500      	push	{lr}
 801b390:	b09c      	sub	sp, #112	; 0x70
 801b392:	ab1d      	add	r3, sp, #116	; 0x74
 801b394:	9002      	str	r0, [sp, #8]
 801b396:	9006      	str	r0, [sp, #24]
 801b398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b39c:	4809      	ldr	r0, [pc, #36]	; (801b3c4 <siprintf+0x38>)
 801b39e:	9107      	str	r1, [sp, #28]
 801b3a0:	9104      	str	r1, [sp, #16]
 801b3a2:	4909      	ldr	r1, [pc, #36]	; (801b3c8 <siprintf+0x3c>)
 801b3a4:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3a8:	9105      	str	r1, [sp, #20]
 801b3aa:	6800      	ldr	r0, [r0, #0]
 801b3ac:	9301      	str	r3, [sp, #4]
 801b3ae:	a902      	add	r1, sp, #8
 801b3b0:	f001 fc98 	bl	801cce4 <_svfiprintf_r>
 801b3b4:	9b02      	ldr	r3, [sp, #8]
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	701a      	strb	r2, [r3, #0]
 801b3ba:	b01c      	add	sp, #112	; 0x70
 801b3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3c0:	b003      	add	sp, #12
 801b3c2:	4770      	bx	lr
 801b3c4:	200001dc 	.word	0x200001dc
 801b3c8:	ffff0208 	.word	0xffff0208

0801b3cc <__sread>:
 801b3cc:	b510      	push	{r4, lr}
 801b3ce:	460c      	mov	r4, r1
 801b3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3d4:	f000 f93c 	bl	801b650 <_read_r>
 801b3d8:	2800      	cmp	r0, #0
 801b3da:	bfab      	itete	ge
 801b3dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b3de:	89a3      	ldrhlt	r3, [r4, #12]
 801b3e0:	181b      	addge	r3, r3, r0
 801b3e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b3e6:	bfac      	ite	ge
 801b3e8:	6563      	strge	r3, [r4, #84]	; 0x54
 801b3ea:	81a3      	strhlt	r3, [r4, #12]
 801b3ec:	bd10      	pop	{r4, pc}

0801b3ee <__swrite>:
 801b3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3f2:	461f      	mov	r7, r3
 801b3f4:	898b      	ldrh	r3, [r1, #12]
 801b3f6:	05db      	lsls	r3, r3, #23
 801b3f8:	4605      	mov	r5, r0
 801b3fa:	460c      	mov	r4, r1
 801b3fc:	4616      	mov	r6, r2
 801b3fe:	d505      	bpl.n	801b40c <__swrite+0x1e>
 801b400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b404:	2302      	movs	r3, #2
 801b406:	2200      	movs	r2, #0
 801b408:	f000 f910 	bl	801b62c <_lseek_r>
 801b40c:	89a3      	ldrh	r3, [r4, #12]
 801b40e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b416:	81a3      	strh	r3, [r4, #12]
 801b418:	4632      	mov	r2, r6
 801b41a:	463b      	mov	r3, r7
 801b41c:	4628      	mov	r0, r5
 801b41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b422:	f000 b927 	b.w	801b674 <_write_r>

0801b426 <__sseek>:
 801b426:	b510      	push	{r4, lr}
 801b428:	460c      	mov	r4, r1
 801b42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b42e:	f000 f8fd 	bl	801b62c <_lseek_r>
 801b432:	1c43      	adds	r3, r0, #1
 801b434:	89a3      	ldrh	r3, [r4, #12]
 801b436:	bf15      	itete	ne
 801b438:	6560      	strne	r0, [r4, #84]	; 0x54
 801b43a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b43e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b442:	81a3      	strheq	r3, [r4, #12]
 801b444:	bf18      	it	ne
 801b446:	81a3      	strhne	r3, [r4, #12]
 801b448:	bd10      	pop	{r4, pc}

0801b44a <__sclose>:
 801b44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b44e:	f000 b8dd 	b.w	801b60c <_close_r>

0801b452 <__swbuf_r>:
 801b452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b454:	460e      	mov	r6, r1
 801b456:	4614      	mov	r4, r2
 801b458:	4605      	mov	r5, r0
 801b45a:	b118      	cbz	r0, 801b464 <__swbuf_r+0x12>
 801b45c:	6a03      	ldr	r3, [r0, #32]
 801b45e:	b90b      	cbnz	r3, 801b464 <__swbuf_r+0x12>
 801b460:	f7ff fef0 	bl	801b244 <__sinit>
 801b464:	69a3      	ldr	r3, [r4, #24]
 801b466:	60a3      	str	r3, [r4, #8]
 801b468:	89a3      	ldrh	r3, [r4, #12]
 801b46a:	071a      	lsls	r2, r3, #28
 801b46c:	d525      	bpl.n	801b4ba <__swbuf_r+0x68>
 801b46e:	6923      	ldr	r3, [r4, #16]
 801b470:	b31b      	cbz	r3, 801b4ba <__swbuf_r+0x68>
 801b472:	6823      	ldr	r3, [r4, #0]
 801b474:	6922      	ldr	r2, [r4, #16]
 801b476:	1a98      	subs	r0, r3, r2
 801b478:	6963      	ldr	r3, [r4, #20]
 801b47a:	b2f6      	uxtb	r6, r6
 801b47c:	4283      	cmp	r3, r0
 801b47e:	4637      	mov	r7, r6
 801b480:	dc04      	bgt.n	801b48c <__swbuf_r+0x3a>
 801b482:	4621      	mov	r1, r4
 801b484:	4628      	mov	r0, r5
 801b486:	f001 fef5 	bl	801d274 <_fflush_r>
 801b48a:	b9e0      	cbnz	r0, 801b4c6 <__swbuf_r+0x74>
 801b48c:	68a3      	ldr	r3, [r4, #8]
 801b48e:	3b01      	subs	r3, #1
 801b490:	60a3      	str	r3, [r4, #8]
 801b492:	6823      	ldr	r3, [r4, #0]
 801b494:	1c5a      	adds	r2, r3, #1
 801b496:	6022      	str	r2, [r4, #0]
 801b498:	701e      	strb	r6, [r3, #0]
 801b49a:	6962      	ldr	r2, [r4, #20]
 801b49c:	1c43      	adds	r3, r0, #1
 801b49e:	429a      	cmp	r2, r3
 801b4a0:	d004      	beq.n	801b4ac <__swbuf_r+0x5a>
 801b4a2:	89a3      	ldrh	r3, [r4, #12]
 801b4a4:	07db      	lsls	r3, r3, #31
 801b4a6:	d506      	bpl.n	801b4b6 <__swbuf_r+0x64>
 801b4a8:	2e0a      	cmp	r6, #10
 801b4aa:	d104      	bne.n	801b4b6 <__swbuf_r+0x64>
 801b4ac:	4621      	mov	r1, r4
 801b4ae:	4628      	mov	r0, r5
 801b4b0:	f001 fee0 	bl	801d274 <_fflush_r>
 801b4b4:	b938      	cbnz	r0, 801b4c6 <__swbuf_r+0x74>
 801b4b6:	4638      	mov	r0, r7
 801b4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4ba:	4621      	mov	r1, r4
 801b4bc:	4628      	mov	r0, r5
 801b4be:	f000 f805 	bl	801b4cc <__swsetup_r>
 801b4c2:	2800      	cmp	r0, #0
 801b4c4:	d0d5      	beq.n	801b472 <__swbuf_r+0x20>
 801b4c6:	f04f 37ff 	mov.w	r7, #4294967295
 801b4ca:	e7f4      	b.n	801b4b6 <__swbuf_r+0x64>

0801b4cc <__swsetup_r>:
 801b4cc:	b538      	push	{r3, r4, r5, lr}
 801b4ce:	4b2a      	ldr	r3, [pc, #168]	; (801b578 <__swsetup_r+0xac>)
 801b4d0:	4605      	mov	r5, r0
 801b4d2:	6818      	ldr	r0, [r3, #0]
 801b4d4:	460c      	mov	r4, r1
 801b4d6:	b118      	cbz	r0, 801b4e0 <__swsetup_r+0x14>
 801b4d8:	6a03      	ldr	r3, [r0, #32]
 801b4da:	b90b      	cbnz	r3, 801b4e0 <__swsetup_r+0x14>
 801b4dc:	f7ff feb2 	bl	801b244 <__sinit>
 801b4e0:	89a3      	ldrh	r3, [r4, #12]
 801b4e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b4e6:	0718      	lsls	r0, r3, #28
 801b4e8:	d422      	bmi.n	801b530 <__swsetup_r+0x64>
 801b4ea:	06d9      	lsls	r1, r3, #27
 801b4ec:	d407      	bmi.n	801b4fe <__swsetup_r+0x32>
 801b4ee:	2309      	movs	r3, #9
 801b4f0:	602b      	str	r3, [r5, #0]
 801b4f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b4f6:	81a3      	strh	r3, [r4, #12]
 801b4f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b4fc:	e034      	b.n	801b568 <__swsetup_r+0x9c>
 801b4fe:	0758      	lsls	r0, r3, #29
 801b500:	d512      	bpl.n	801b528 <__swsetup_r+0x5c>
 801b502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b504:	b141      	cbz	r1, 801b518 <__swsetup_r+0x4c>
 801b506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b50a:	4299      	cmp	r1, r3
 801b50c:	d002      	beq.n	801b514 <__swsetup_r+0x48>
 801b50e:	4628      	mov	r0, r5
 801b510:	f000 ff12 	bl	801c338 <_free_r>
 801b514:	2300      	movs	r3, #0
 801b516:	6363      	str	r3, [r4, #52]	; 0x34
 801b518:	89a3      	ldrh	r3, [r4, #12]
 801b51a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b51e:	81a3      	strh	r3, [r4, #12]
 801b520:	2300      	movs	r3, #0
 801b522:	6063      	str	r3, [r4, #4]
 801b524:	6923      	ldr	r3, [r4, #16]
 801b526:	6023      	str	r3, [r4, #0]
 801b528:	89a3      	ldrh	r3, [r4, #12]
 801b52a:	f043 0308 	orr.w	r3, r3, #8
 801b52e:	81a3      	strh	r3, [r4, #12]
 801b530:	6923      	ldr	r3, [r4, #16]
 801b532:	b94b      	cbnz	r3, 801b548 <__swsetup_r+0x7c>
 801b534:	89a3      	ldrh	r3, [r4, #12]
 801b536:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b53a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b53e:	d003      	beq.n	801b548 <__swsetup_r+0x7c>
 801b540:	4621      	mov	r1, r4
 801b542:	4628      	mov	r0, r5
 801b544:	f001 fef6 	bl	801d334 <__smakebuf_r>
 801b548:	89a0      	ldrh	r0, [r4, #12]
 801b54a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b54e:	f010 0301 	ands.w	r3, r0, #1
 801b552:	d00a      	beq.n	801b56a <__swsetup_r+0x9e>
 801b554:	2300      	movs	r3, #0
 801b556:	60a3      	str	r3, [r4, #8]
 801b558:	6963      	ldr	r3, [r4, #20]
 801b55a:	425b      	negs	r3, r3
 801b55c:	61a3      	str	r3, [r4, #24]
 801b55e:	6923      	ldr	r3, [r4, #16]
 801b560:	b943      	cbnz	r3, 801b574 <__swsetup_r+0xa8>
 801b562:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b566:	d1c4      	bne.n	801b4f2 <__swsetup_r+0x26>
 801b568:	bd38      	pop	{r3, r4, r5, pc}
 801b56a:	0781      	lsls	r1, r0, #30
 801b56c:	bf58      	it	pl
 801b56e:	6963      	ldrpl	r3, [r4, #20]
 801b570:	60a3      	str	r3, [r4, #8]
 801b572:	e7f4      	b.n	801b55e <__swsetup_r+0x92>
 801b574:	2000      	movs	r0, #0
 801b576:	e7f7      	b.n	801b568 <__swsetup_r+0x9c>
 801b578:	200001dc 	.word	0x200001dc

0801b57c <memcmp>:
 801b57c:	b510      	push	{r4, lr}
 801b57e:	3901      	subs	r1, #1
 801b580:	4402      	add	r2, r0
 801b582:	4290      	cmp	r0, r2
 801b584:	d101      	bne.n	801b58a <memcmp+0xe>
 801b586:	2000      	movs	r0, #0
 801b588:	e005      	b.n	801b596 <memcmp+0x1a>
 801b58a:	7803      	ldrb	r3, [r0, #0]
 801b58c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b590:	42a3      	cmp	r3, r4
 801b592:	d001      	beq.n	801b598 <memcmp+0x1c>
 801b594:	1b18      	subs	r0, r3, r4
 801b596:	bd10      	pop	{r4, pc}
 801b598:	3001      	adds	r0, #1
 801b59a:	e7f2      	b.n	801b582 <memcmp+0x6>

0801b59c <memmove>:
 801b59c:	4288      	cmp	r0, r1
 801b59e:	b510      	push	{r4, lr}
 801b5a0:	eb01 0402 	add.w	r4, r1, r2
 801b5a4:	d902      	bls.n	801b5ac <memmove+0x10>
 801b5a6:	4284      	cmp	r4, r0
 801b5a8:	4623      	mov	r3, r4
 801b5aa:	d807      	bhi.n	801b5bc <memmove+0x20>
 801b5ac:	1e43      	subs	r3, r0, #1
 801b5ae:	42a1      	cmp	r1, r4
 801b5b0:	d008      	beq.n	801b5c4 <memmove+0x28>
 801b5b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b5b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b5ba:	e7f8      	b.n	801b5ae <memmove+0x12>
 801b5bc:	4402      	add	r2, r0
 801b5be:	4601      	mov	r1, r0
 801b5c0:	428a      	cmp	r2, r1
 801b5c2:	d100      	bne.n	801b5c6 <memmove+0x2a>
 801b5c4:	bd10      	pop	{r4, pc}
 801b5c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b5ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b5ce:	e7f7      	b.n	801b5c0 <memmove+0x24>

0801b5d0 <memset>:
 801b5d0:	4402      	add	r2, r0
 801b5d2:	4603      	mov	r3, r0
 801b5d4:	4293      	cmp	r3, r2
 801b5d6:	d100      	bne.n	801b5da <memset+0xa>
 801b5d8:	4770      	bx	lr
 801b5da:	f803 1b01 	strb.w	r1, [r3], #1
 801b5de:	e7f9      	b.n	801b5d4 <memset+0x4>

0801b5e0 <strncmp>:
 801b5e0:	b510      	push	{r4, lr}
 801b5e2:	b16a      	cbz	r2, 801b600 <strncmp+0x20>
 801b5e4:	3901      	subs	r1, #1
 801b5e6:	1884      	adds	r4, r0, r2
 801b5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b5ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b5f0:	429a      	cmp	r2, r3
 801b5f2:	d103      	bne.n	801b5fc <strncmp+0x1c>
 801b5f4:	42a0      	cmp	r0, r4
 801b5f6:	d001      	beq.n	801b5fc <strncmp+0x1c>
 801b5f8:	2a00      	cmp	r2, #0
 801b5fa:	d1f5      	bne.n	801b5e8 <strncmp+0x8>
 801b5fc:	1ad0      	subs	r0, r2, r3
 801b5fe:	bd10      	pop	{r4, pc}
 801b600:	4610      	mov	r0, r2
 801b602:	e7fc      	b.n	801b5fe <strncmp+0x1e>

0801b604 <_localeconv_r>:
 801b604:	4800      	ldr	r0, [pc, #0]	; (801b608 <_localeconv_r+0x4>)
 801b606:	4770      	bx	lr
 801b608:	200002d0 	.word	0x200002d0

0801b60c <_close_r>:
 801b60c:	b538      	push	{r3, r4, r5, lr}
 801b60e:	4d06      	ldr	r5, [pc, #24]	; (801b628 <_close_r+0x1c>)
 801b610:	2300      	movs	r3, #0
 801b612:	4604      	mov	r4, r0
 801b614:	4608      	mov	r0, r1
 801b616:	602b      	str	r3, [r5, #0]
 801b618:	f7e8 faf9 	bl	8003c0e <_close>
 801b61c:	1c43      	adds	r3, r0, #1
 801b61e:	d102      	bne.n	801b626 <_close_r+0x1a>
 801b620:	682b      	ldr	r3, [r5, #0]
 801b622:	b103      	cbz	r3, 801b626 <_close_r+0x1a>
 801b624:	6023      	str	r3, [r4, #0]
 801b626:	bd38      	pop	{r3, r4, r5, pc}
 801b628:	20007454 	.word	0x20007454

0801b62c <_lseek_r>:
 801b62c:	b538      	push	{r3, r4, r5, lr}
 801b62e:	4d07      	ldr	r5, [pc, #28]	; (801b64c <_lseek_r+0x20>)
 801b630:	4604      	mov	r4, r0
 801b632:	4608      	mov	r0, r1
 801b634:	4611      	mov	r1, r2
 801b636:	2200      	movs	r2, #0
 801b638:	602a      	str	r2, [r5, #0]
 801b63a:	461a      	mov	r2, r3
 801b63c:	f7e8 fb0e 	bl	8003c5c <_lseek>
 801b640:	1c43      	adds	r3, r0, #1
 801b642:	d102      	bne.n	801b64a <_lseek_r+0x1e>
 801b644:	682b      	ldr	r3, [r5, #0]
 801b646:	b103      	cbz	r3, 801b64a <_lseek_r+0x1e>
 801b648:	6023      	str	r3, [r4, #0]
 801b64a:	bd38      	pop	{r3, r4, r5, pc}
 801b64c:	20007454 	.word	0x20007454

0801b650 <_read_r>:
 801b650:	b538      	push	{r3, r4, r5, lr}
 801b652:	4d07      	ldr	r5, [pc, #28]	; (801b670 <_read_r+0x20>)
 801b654:	4604      	mov	r4, r0
 801b656:	4608      	mov	r0, r1
 801b658:	4611      	mov	r1, r2
 801b65a:	2200      	movs	r2, #0
 801b65c:	602a      	str	r2, [r5, #0]
 801b65e:	461a      	mov	r2, r3
 801b660:	f7e8 fa9c 	bl	8003b9c <_read>
 801b664:	1c43      	adds	r3, r0, #1
 801b666:	d102      	bne.n	801b66e <_read_r+0x1e>
 801b668:	682b      	ldr	r3, [r5, #0]
 801b66a:	b103      	cbz	r3, 801b66e <_read_r+0x1e>
 801b66c:	6023      	str	r3, [r4, #0]
 801b66e:	bd38      	pop	{r3, r4, r5, pc}
 801b670:	20007454 	.word	0x20007454

0801b674 <_write_r>:
 801b674:	b538      	push	{r3, r4, r5, lr}
 801b676:	4d07      	ldr	r5, [pc, #28]	; (801b694 <_write_r+0x20>)
 801b678:	4604      	mov	r4, r0
 801b67a:	4608      	mov	r0, r1
 801b67c:	4611      	mov	r1, r2
 801b67e:	2200      	movs	r2, #0
 801b680:	602a      	str	r2, [r5, #0]
 801b682:	461a      	mov	r2, r3
 801b684:	f7e8 faa7 	bl	8003bd6 <_write>
 801b688:	1c43      	adds	r3, r0, #1
 801b68a:	d102      	bne.n	801b692 <_write_r+0x1e>
 801b68c:	682b      	ldr	r3, [r5, #0]
 801b68e:	b103      	cbz	r3, 801b692 <_write_r+0x1e>
 801b690:	6023      	str	r3, [r4, #0]
 801b692:	bd38      	pop	{r3, r4, r5, pc}
 801b694:	20007454 	.word	0x20007454

0801b698 <__libc_init_array>:
 801b698:	b570      	push	{r4, r5, r6, lr}
 801b69a:	4d0d      	ldr	r5, [pc, #52]	; (801b6d0 <__libc_init_array+0x38>)
 801b69c:	4c0d      	ldr	r4, [pc, #52]	; (801b6d4 <__libc_init_array+0x3c>)
 801b69e:	1b64      	subs	r4, r4, r5
 801b6a0:	10a4      	asrs	r4, r4, #2
 801b6a2:	2600      	movs	r6, #0
 801b6a4:	42a6      	cmp	r6, r4
 801b6a6:	d109      	bne.n	801b6bc <__libc_init_array+0x24>
 801b6a8:	4d0b      	ldr	r5, [pc, #44]	; (801b6d8 <__libc_init_array+0x40>)
 801b6aa:	4c0c      	ldr	r4, [pc, #48]	; (801b6dc <__libc_init_array+0x44>)
 801b6ac:	f001 ff68 	bl	801d580 <_init>
 801b6b0:	1b64      	subs	r4, r4, r5
 801b6b2:	10a4      	asrs	r4, r4, #2
 801b6b4:	2600      	movs	r6, #0
 801b6b6:	42a6      	cmp	r6, r4
 801b6b8:	d105      	bne.n	801b6c6 <__libc_init_array+0x2e>
 801b6ba:	bd70      	pop	{r4, r5, r6, pc}
 801b6bc:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6c0:	4798      	blx	r3
 801b6c2:	3601      	adds	r6, #1
 801b6c4:	e7ee      	b.n	801b6a4 <__libc_init_array+0xc>
 801b6c6:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6ca:	4798      	blx	r3
 801b6cc:	3601      	adds	r6, #1
 801b6ce:	e7f2      	b.n	801b6b6 <__libc_init_array+0x1e>
 801b6d0:	080212c0 	.word	0x080212c0
 801b6d4:	080212c0 	.word	0x080212c0
 801b6d8:	080212c0 	.word	0x080212c0
 801b6dc:	080212c4 	.word	0x080212c4

0801b6e0 <__retarget_lock_init_recursive>:
 801b6e0:	4770      	bx	lr

0801b6e2 <__retarget_lock_acquire_recursive>:
 801b6e2:	4770      	bx	lr

0801b6e4 <__retarget_lock_release_recursive>:
 801b6e4:	4770      	bx	lr

0801b6e6 <strcpy>:
 801b6e6:	4603      	mov	r3, r0
 801b6e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b6ec:	f803 2b01 	strb.w	r2, [r3], #1
 801b6f0:	2a00      	cmp	r2, #0
 801b6f2:	d1f9      	bne.n	801b6e8 <strcpy+0x2>
 801b6f4:	4770      	bx	lr

0801b6f6 <memcpy>:
 801b6f6:	440a      	add	r2, r1
 801b6f8:	4291      	cmp	r1, r2
 801b6fa:	f100 33ff 	add.w	r3, r0, #4294967295
 801b6fe:	d100      	bne.n	801b702 <memcpy+0xc>
 801b700:	4770      	bx	lr
 801b702:	b510      	push	{r4, lr}
 801b704:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b708:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b70c:	4291      	cmp	r1, r2
 801b70e:	d1f9      	bne.n	801b704 <memcpy+0xe>
 801b710:	bd10      	pop	{r4, pc}
	...

0801b714 <__assert_func>:
 801b714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b716:	4614      	mov	r4, r2
 801b718:	461a      	mov	r2, r3
 801b71a:	4b09      	ldr	r3, [pc, #36]	; (801b740 <__assert_func+0x2c>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	4605      	mov	r5, r0
 801b720:	68d8      	ldr	r0, [r3, #12]
 801b722:	b14c      	cbz	r4, 801b738 <__assert_func+0x24>
 801b724:	4b07      	ldr	r3, [pc, #28]	; (801b744 <__assert_func+0x30>)
 801b726:	9100      	str	r1, [sp, #0]
 801b728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b72c:	4906      	ldr	r1, [pc, #24]	; (801b748 <__assert_func+0x34>)
 801b72e:	462b      	mov	r3, r5
 801b730:	f001 fdc8 	bl	801d2c4 <fiprintf>
 801b734:	f001 fe6c 	bl	801d410 <abort>
 801b738:	4b04      	ldr	r3, [pc, #16]	; (801b74c <__assert_func+0x38>)
 801b73a:	461c      	mov	r4, r3
 801b73c:	e7f3      	b.n	801b726 <__assert_func+0x12>
 801b73e:	bf00      	nop
 801b740:	200001dc 	.word	0x200001dc
 801b744:	08021092 	.word	0x08021092
 801b748:	0802109f 	.word	0x0802109f
 801b74c:	080210cd 	.word	0x080210cd

0801b750 <quorem>:
 801b750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b754:	6903      	ldr	r3, [r0, #16]
 801b756:	690c      	ldr	r4, [r1, #16]
 801b758:	42a3      	cmp	r3, r4
 801b75a:	4607      	mov	r7, r0
 801b75c:	db7e      	blt.n	801b85c <quorem+0x10c>
 801b75e:	3c01      	subs	r4, #1
 801b760:	f101 0814 	add.w	r8, r1, #20
 801b764:	f100 0514 	add.w	r5, r0, #20
 801b768:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b76c:	9301      	str	r3, [sp, #4]
 801b76e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b776:	3301      	adds	r3, #1
 801b778:	429a      	cmp	r2, r3
 801b77a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b77e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b782:	fbb2 f6f3 	udiv	r6, r2, r3
 801b786:	d331      	bcc.n	801b7ec <quorem+0x9c>
 801b788:	f04f 0e00 	mov.w	lr, #0
 801b78c:	4640      	mov	r0, r8
 801b78e:	46ac      	mov	ip, r5
 801b790:	46f2      	mov	sl, lr
 801b792:	f850 2b04 	ldr.w	r2, [r0], #4
 801b796:	b293      	uxth	r3, r2
 801b798:	fb06 e303 	mla	r3, r6, r3, lr
 801b79c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b7a0:	0c1a      	lsrs	r2, r3, #16
 801b7a2:	b29b      	uxth	r3, r3
 801b7a4:	ebaa 0303 	sub.w	r3, sl, r3
 801b7a8:	f8dc a000 	ldr.w	sl, [ip]
 801b7ac:	fa13 f38a 	uxtah	r3, r3, sl
 801b7b0:	fb06 220e 	mla	r2, r6, lr, r2
 801b7b4:	9300      	str	r3, [sp, #0]
 801b7b6:	9b00      	ldr	r3, [sp, #0]
 801b7b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b7bc:	b292      	uxth	r2, r2
 801b7be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b7c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b7c6:	f8bd 3000 	ldrh.w	r3, [sp]
 801b7ca:	4581      	cmp	r9, r0
 801b7cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b7d0:	f84c 3b04 	str.w	r3, [ip], #4
 801b7d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b7d8:	d2db      	bcs.n	801b792 <quorem+0x42>
 801b7da:	f855 300b 	ldr.w	r3, [r5, fp]
 801b7de:	b92b      	cbnz	r3, 801b7ec <quorem+0x9c>
 801b7e0:	9b01      	ldr	r3, [sp, #4]
 801b7e2:	3b04      	subs	r3, #4
 801b7e4:	429d      	cmp	r5, r3
 801b7e6:	461a      	mov	r2, r3
 801b7e8:	d32c      	bcc.n	801b844 <quorem+0xf4>
 801b7ea:	613c      	str	r4, [r7, #16]
 801b7ec:	4638      	mov	r0, r7
 801b7ee:	f001 f91f 	bl	801ca30 <__mcmp>
 801b7f2:	2800      	cmp	r0, #0
 801b7f4:	db22      	blt.n	801b83c <quorem+0xec>
 801b7f6:	3601      	adds	r6, #1
 801b7f8:	4629      	mov	r1, r5
 801b7fa:	2000      	movs	r0, #0
 801b7fc:	f858 2b04 	ldr.w	r2, [r8], #4
 801b800:	f8d1 c000 	ldr.w	ip, [r1]
 801b804:	b293      	uxth	r3, r2
 801b806:	1ac3      	subs	r3, r0, r3
 801b808:	0c12      	lsrs	r2, r2, #16
 801b80a:	fa13 f38c 	uxtah	r3, r3, ip
 801b80e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801b812:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b816:	b29b      	uxth	r3, r3
 801b818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b81c:	45c1      	cmp	r9, r8
 801b81e:	f841 3b04 	str.w	r3, [r1], #4
 801b822:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b826:	d2e9      	bcs.n	801b7fc <quorem+0xac>
 801b828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b82c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b830:	b922      	cbnz	r2, 801b83c <quorem+0xec>
 801b832:	3b04      	subs	r3, #4
 801b834:	429d      	cmp	r5, r3
 801b836:	461a      	mov	r2, r3
 801b838:	d30a      	bcc.n	801b850 <quorem+0x100>
 801b83a:	613c      	str	r4, [r7, #16]
 801b83c:	4630      	mov	r0, r6
 801b83e:	b003      	add	sp, #12
 801b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b844:	6812      	ldr	r2, [r2, #0]
 801b846:	3b04      	subs	r3, #4
 801b848:	2a00      	cmp	r2, #0
 801b84a:	d1ce      	bne.n	801b7ea <quorem+0x9a>
 801b84c:	3c01      	subs	r4, #1
 801b84e:	e7c9      	b.n	801b7e4 <quorem+0x94>
 801b850:	6812      	ldr	r2, [r2, #0]
 801b852:	3b04      	subs	r3, #4
 801b854:	2a00      	cmp	r2, #0
 801b856:	d1f0      	bne.n	801b83a <quorem+0xea>
 801b858:	3c01      	subs	r4, #1
 801b85a:	e7eb      	b.n	801b834 <quorem+0xe4>
 801b85c:	2000      	movs	r0, #0
 801b85e:	e7ee      	b.n	801b83e <quorem+0xee>

0801b860 <_dtoa_r>:
 801b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b864:	ed2d 8b02 	vpush	{d8}
 801b868:	69c5      	ldr	r5, [r0, #28]
 801b86a:	b091      	sub	sp, #68	; 0x44
 801b86c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b870:	ec59 8b10 	vmov	r8, r9, d0
 801b874:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801b876:	9106      	str	r1, [sp, #24]
 801b878:	4606      	mov	r6, r0
 801b87a:	9208      	str	r2, [sp, #32]
 801b87c:	930c      	str	r3, [sp, #48]	; 0x30
 801b87e:	b975      	cbnz	r5, 801b89e <_dtoa_r+0x3e>
 801b880:	2010      	movs	r0, #16
 801b882:	f000 fda5 	bl	801c3d0 <malloc>
 801b886:	4602      	mov	r2, r0
 801b888:	61f0      	str	r0, [r6, #28]
 801b88a:	b920      	cbnz	r0, 801b896 <_dtoa_r+0x36>
 801b88c:	4ba6      	ldr	r3, [pc, #664]	; (801bb28 <_dtoa_r+0x2c8>)
 801b88e:	21ef      	movs	r1, #239	; 0xef
 801b890:	48a6      	ldr	r0, [pc, #664]	; (801bb2c <_dtoa_r+0x2cc>)
 801b892:	f7ff ff3f 	bl	801b714 <__assert_func>
 801b896:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b89a:	6005      	str	r5, [r0, #0]
 801b89c:	60c5      	str	r5, [r0, #12]
 801b89e:	69f3      	ldr	r3, [r6, #28]
 801b8a0:	6819      	ldr	r1, [r3, #0]
 801b8a2:	b151      	cbz	r1, 801b8ba <_dtoa_r+0x5a>
 801b8a4:	685a      	ldr	r2, [r3, #4]
 801b8a6:	604a      	str	r2, [r1, #4]
 801b8a8:	2301      	movs	r3, #1
 801b8aa:	4093      	lsls	r3, r2
 801b8ac:	608b      	str	r3, [r1, #8]
 801b8ae:	4630      	mov	r0, r6
 801b8b0:	f000 fe82 	bl	801c5b8 <_Bfree>
 801b8b4:	69f3      	ldr	r3, [r6, #28]
 801b8b6:	2200      	movs	r2, #0
 801b8b8:	601a      	str	r2, [r3, #0]
 801b8ba:	f1b9 0300 	subs.w	r3, r9, #0
 801b8be:	bfbb      	ittet	lt
 801b8c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b8c4:	9303      	strlt	r3, [sp, #12]
 801b8c6:	2300      	movge	r3, #0
 801b8c8:	2201      	movlt	r2, #1
 801b8ca:	bfac      	ite	ge
 801b8cc:	6023      	strge	r3, [r4, #0]
 801b8ce:	6022      	strlt	r2, [r4, #0]
 801b8d0:	4b97      	ldr	r3, [pc, #604]	; (801bb30 <_dtoa_r+0x2d0>)
 801b8d2:	9c03      	ldr	r4, [sp, #12]
 801b8d4:	43a3      	bics	r3, r4
 801b8d6:	d11c      	bne.n	801b912 <_dtoa_r+0xb2>
 801b8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b8da:	f242 730f 	movw	r3, #9999	; 0x270f
 801b8de:	6013      	str	r3, [r2, #0]
 801b8e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801b8e4:	ea53 0308 	orrs.w	r3, r3, r8
 801b8e8:	f000 84fb 	beq.w	801c2e2 <_dtoa_r+0xa82>
 801b8ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8ee:	b963      	cbnz	r3, 801b90a <_dtoa_r+0xaa>
 801b8f0:	4b90      	ldr	r3, [pc, #576]	; (801bb34 <_dtoa_r+0x2d4>)
 801b8f2:	e020      	b.n	801b936 <_dtoa_r+0xd6>
 801b8f4:	4b90      	ldr	r3, [pc, #576]	; (801bb38 <_dtoa_r+0x2d8>)
 801b8f6:	9301      	str	r3, [sp, #4]
 801b8f8:	3308      	adds	r3, #8
 801b8fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b8fc:	6013      	str	r3, [r2, #0]
 801b8fe:	9801      	ldr	r0, [sp, #4]
 801b900:	b011      	add	sp, #68	; 0x44
 801b902:	ecbd 8b02 	vpop	{d8}
 801b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b90a:	4b8a      	ldr	r3, [pc, #552]	; (801bb34 <_dtoa_r+0x2d4>)
 801b90c:	9301      	str	r3, [sp, #4]
 801b90e:	3303      	adds	r3, #3
 801b910:	e7f3      	b.n	801b8fa <_dtoa_r+0x9a>
 801b912:	ed9d 8b02 	vldr	d8, [sp, #8]
 801b916:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b91e:	d10c      	bne.n	801b93a <_dtoa_r+0xda>
 801b920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b922:	2301      	movs	r3, #1
 801b924:	6013      	str	r3, [r2, #0]
 801b926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b928:	2b00      	cmp	r3, #0
 801b92a:	f000 84d7 	beq.w	801c2dc <_dtoa_r+0xa7c>
 801b92e:	4b83      	ldr	r3, [pc, #524]	; (801bb3c <_dtoa_r+0x2dc>)
 801b930:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b932:	6013      	str	r3, [r2, #0]
 801b934:	3b01      	subs	r3, #1
 801b936:	9301      	str	r3, [sp, #4]
 801b938:	e7e1      	b.n	801b8fe <_dtoa_r+0x9e>
 801b93a:	aa0e      	add	r2, sp, #56	; 0x38
 801b93c:	a90f      	add	r1, sp, #60	; 0x3c
 801b93e:	4630      	mov	r0, r6
 801b940:	eeb0 0b48 	vmov.f64	d0, d8
 801b944:	f001 f91a 	bl	801cb7c <__d2b>
 801b948:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801b94c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b94e:	4605      	mov	r5, r0
 801b950:	2b00      	cmp	r3, #0
 801b952:	d046      	beq.n	801b9e2 <_dtoa_r+0x182>
 801b954:	eeb0 7b48 	vmov.f64	d7, d8
 801b958:	ee18 1a90 	vmov	r1, s17
 801b95c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b960:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801b964:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801b968:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b96c:	2000      	movs	r0, #0
 801b96e:	ee07 1a90 	vmov	s15, r1
 801b972:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801b976:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801bb10 <_dtoa_r+0x2b0>
 801b97a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b97e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801bb18 <_dtoa_r+0x2b8>
 801b982:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b986:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801bb20 <_dtoa_r+0x2c0>
 801b98a:	ee07 3a90 	vmov	s15, r3
 801b98e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801b992:	eeb0 7b46 	vmov.f64	d7, d6
 801b996:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b99a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b99e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9a6:	ee16 ba90 	vmov	fp, s13
 801b9aa:	9009      	str	r0, [sp, #36]	; 0x24
 801b9ac:	d508      	bpl.n	801b9c0 <_dtoa_r+0x160>
 801b9ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b9b2:	eeb4 6b47 	vcmp.f64	d6, d7
 801b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9ba:	bf18      	it	ne
 801b9bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801b9c0:	f1bb 0f16 	cmp.w	fp, #22
 801b9c4:	d82b      	bhi.n	801ba1e <_dtoa_r+0x1be>
 801b9c6:	495e      	ldr	r1, [pc, #376]	; (801bb40 <_dtoa_r+0x2e0>)
 801b9c8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801b9cc:	ed91 7b00 	vldr	d7, [r1]
 801b9d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9d8:	d501      	bpl.n	801b9de <_dtoa_r+0x17e>
 801b9da:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b9de:	2100      	movs	r1, #0
 801b9e0:	e01e      	b.n	801ba20 <_dtoa_r+0x1c0>
 801b9e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b9e4:	4413      	add	r3, r2
 801b9e6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801b9ea:	2920      	cmp	r1, #32
 801b9ec:	bfc1      	itttt	gt
 801b9ee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801b9f2:	408c      	lslgt	r4, r1
 801b9f4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801b9f8:	fa28 f101 	lsrgt.w	r1, r8, r1
 801b9fc:	bfd6      	itet	le
 801b9fe:	f1c1 0120 	rsble	r1, r1, #32
 801ba02:	4321      	orrgt	r1, r4
 801ba04:	fa08 f101 	lslle.w	r1, r8, r1
 801ba08:	ee07 1a90 	vmov	s15, r1
 801ba0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ba10:	3b01      	subs	r3, #1
 801ba12:	ee17 1a90 	vmov	r1, s15
 801ba16:	2001      	movs	r0, #1
 801ba18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801ba1c:	e7a7      	b.n	801b96e <_dtoa_r+0x10e>
 801ba1e:	2101      	movs	r1, #1
 801ba20:	1ad2      	subs	r2, r2, r3
 801ba22:	1e53      	subs	r3, r2, #1
 801ba24:	9305      	str	r3, [sp, #20]
 801ba26:	bf45      	ittet	mi
 801ba28:	f1c2 0301 	rsbmi	r3, r2, #1
 801ba2c:	9304      	strmi	r3, [sp, #16]
 801ba2e:	2300      	movpl	r3, #0
 801ba30:	2300      	movmi	r3, #0
 801ba32:	bf4c      	ite	mi
 801ba34:	9305      	strmi	r3, [sp, #20]
 801ba36:	9304      	strpl	r3, [sp, #16]
 801ba38:	f1bb 0f00 	cmp.w	fp, #0
 801ba3c:	910b      	str	r1, [sp, #44]	; 0x2c
 801ba3e:	db18      	blt.n	801ba72 <_dtoa_r+0x212>
 801ba40:	9b05      	ldr	r3, [sp, #20]
 801ba42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801ba46:	445b      	add	r3, fp
 801ba48:	9305      	str	r3, [sp, #20]
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	9a06      	ldr	r2, [sp, #24]
 801ba4e:	2a09      	cmp	r2, #9
 801ba50:	d848      	bhi.n	801bae4 <_dtoa_r+0x284>
 801ba52:	2a05      	cmp	r2, #5
 801ba54:	bfc4      	itt	gt
 801ba56:	3a04      	subgt	r2, #4
 801ba58:	9206      	strgt	r2, [sp, #24]
 801ba5a:	9a06      	ldr	r2, [sp, #24]
 801ba5c:	f1a2 0202 	sub.w	r2, r2, #2
 801ba60:	bfcc      	ite	gt
 801ba62:	2400      	movgt	r4, #0
 801ba64:	2401      	movle	r4, #1
 801ba66:	2a03      	cmp	r2, #3
 801ba68:	d847      	bhi.n	801bafa <_dtoa_r+0x29a>
 801ba6a:	e8df f002 	tbb	[pc, r2]
 801ba6e:	2d0b      	.short	0x2d0b
 801ba70:	392b      	.short	0x392b
 801ba72:	9b04      	ldr	r3, [sp, #16]
 801ba74:	2200      	movs	r2, #0
 801ba76:	eba3 030b 	sub.w	r3, r3, fp
 801ba7a:	9304      	str	r3, [sp, #16]
 801ba7c:	920a      	str	r2, [sp, #40]	; 0x28
 801ba7e:	f1cb 0300 	rsb	r3, fp, #0
 801ba82:	e7e3      	b.n	801ba4c <_dtoa_r+0x1ec>
 801ba84:	2200      	movs	r2, #0
 801ba86:	9207      	str	r2, [sp, #28]
 801ba88:	9a08      	ldr	r2, [sp, #32]
 801ba8a:	2a00      	cmp	r2, #0
 801ba8c:	dc38      	bgt.n	801bb00 <_dtoa_r+0x2a0>
 801ba8e:	f04f 0a01 	mov.w	sl, #1
 801ba92:	46d1      	mov	r9, sl
 801ba94:	4652      	mov	r2, sl
 801ba96:	f8cd a020 	str.w	sl, [sp, #32]
 801ba9a:	69f7      	ldr	r7, [r6, #28]
 801ba9c:	2100      	movs	r1, #0
 801ba9e:	2004      	movs	r0, #4
 801baa0:	f100 0c14 	add.w	ip, r0, #20
 801baa4:	4594      	cmp	ip, r2
 801baa6:	d930      	bls.n	801bb0a <_dtoa_r+0x2aa>
 801baa8:	6079      	str	r1, [r7, #4]
 801baaa:	4630      	mov	r0, r6
 801baac:	930d      	str	r3, [sp, #52]	; 0x34
 801baae:	f000 fd43 	bl	801c538 <_Balloc>
 801bab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bab4:	9001      	str	r0, [sp, #4]
 801bab6:	4602      	mov	r2, r0
 801bab8:	2800      	cmp	r0, #0
 801baba:	d145      	bne.n	801bb48 <_dtoa_r+0x2e8>
 801babc:	4b21      	ldr	r3, [pc, #132]	; (801bb44 <_dtoa_r+0x2e4>)
 801babe:	f240 11af 	movw	r1, #431	; 0x1af
 801bac2:	e6e5      	b.n	801b890 <_dtoa_r+0x30>
 801bac4:	2201      	movs	r2, #1
 801bac6:	e7de      	b.n	801ba86 <_dtoa_r+0x226>
 801bac8:	2200      	movs	r2, #0
 801baca:	9207      	str	r2, [sp, #28]
 801bacc:	9a08      	ldr	r2, [sp, #32]
 801bace:	eb0b 0a02 	add.w	sl, fp, r2
 801bad2:	f10a 0901 	add.w	r9, sl, #1
 801bad6:	464a      	mov	r2, r9
 801bad8:	2a01      	cmp	r2, #1
 801bada:	bfb8      	it	lt
 801badc:	2201      	movlt	r2, #1
 801bade:	e7dc      	b.n	801ba9a <_dtoa_r+0x23a>
 801bae0:	2201      	movs	r2, #1
 801bae2:	e7f2      	b.n	801baca <_dtoa_r+0x26a>
 801bae4:	2401      	movs	r4, #1
 801bae6:	2200      	movs	r2, #0
 801bae8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801baec:	f04f 3aff 	mov.w	sl, #4294967295
 801baf0:	2100      	movs	r1, #0
 801baf2:	46d1      	mov	r9, sl
 801baf4:	2212      	movs	r2, #18
 801baf6:	9108      	str	r1, [sp, #32]
 801baf8:	e7cf      	b.n	801ba9a <_dtoa_r+0x23a>
 801bafa:	2201      	movs	r2, #1
 801bafc:	9207      	str	r2, [sp, #28]
 801bafe:	e7f5      	b.n	801baec <_dtoa_r+0x28c>
 801bb00:	f8dd a020 	ldr.w	sl, [sp, #32]
 801bb04:	46d1      	mov	r9, sl
 801bb06:	4652      	mov	r2, sl
 801bb08:	e7c7      	b.n	801ba9a <_dtoa_r+0x23a>
 801bb0a:	3101      	adds	r1, #1
 801bb0c:	0040      	lsls	r0, r0, #1
 801bb0e:	e7c7      	b.n	801baa0 <_dtoa_r+0x240>
 801bb10:	636f4361 	.word	0x636f4361
 801bb14:	3fd287a7 	.word	0x3fd287a7
 801bb18:	8b60c8b3 	.word	0x8b60c8b3
 801bb1c:	3fc68a28 	.word	0x3fc68a28
 801bb20:	509f79fb 	.word	0x509f79fb
 801bb24:	3fd34413 	.word	0x3fd34413
 801bb28:	08020eee 	.word	0x08020eee
 801bb2c:	080210db 	.word	0x080210db
 801bb30:	7ff00000 	.word	0x7ff00000
 801bb34:	080210d7 	.word	0x080210d7
 801bb38:	080210ce 	.word	0x080210ce
 801bb3c:	0802106f 	.word	0x0802106f
 801bb40:	080211c8 	.word	0x080211c8
 801bb44:	08021133 	.word	0x08021133
 801bb48:	69f2      	ldr	r2, [r6, #28]
 801bb4a:	9901      	ldr	r1, [sp, #4]
 801bb4c:	6011      	str	r1, [r2, #0]
 801bb4e:	f1b9 0f0e 	cmp.w	r9, #14
 801bb52:	d86c      	bhi.n	801bc2e <_dtoa_r+0x3ce>
 801bb54:	2c00      	cmp	r4, #0
 801bb56:	d06a      	beq.n	801bc2e <_dtoa_r+0x3ce>
 801bb58:	f1bb 0f00 	cmp.w	fp, #0
 801bb5c:	f340 80a0 	ble.w	801bca0 <_dtoa_r+0x440>
 801bb60:	4ac1      	ldr	r2, [pc, #772]	; (801be68 <_dtoa_r+0x608>)
 801bb62:	f00b 010f 	and.w	r1, fp, #15
 801bb66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801bb6a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801bb6e:	ed92 7b00 	vldr	d7, [r2]
 801bb72:	ea4f 122b 	mov.w	r2, fp, asr #4
 801bb76:	f000 8087 	beq.w	801bc88 <_dtoa_r+0x428>
 801bb7a:	49bc      	ldr	r1, [pc, #752]	; (801be6c <_dtoa_r+0x60c>)
 801bb7c:	ed91 6b08 	vldr	d6, [r1, #32]
 801bb80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801bb84:	ed8d 6b02 	vstr	d6, [sp, #8]
 801bb88:	f002 020f 	and.w	r2, r2, #15
 801bb8c:	2103      	movs	r1, #3
 801bb8e:	48b7      	ldr	r0, [pc, #732]	; (801be6c <_dtoa_r+0x60c>)
 801bb90:	2a00      	cmp	r2, #0
 801bb92:	d17b      	bne.n	801bc8c <_dtoa_r+0x42c>
 801bb94:	ed9d 6b02 	vldr	d6, [sp, #8]
 801bb98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801bb9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bba2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bba6:	2a00      	cmp	r2, #0
 801bba8:	f000 80a0 	beq.w	801bcec <_dtoa_r+0x48c>
 801bbac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801bbb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbb8:	f140 8098 	bpl.w	801bcec <_dtoa_r+0x48c>
 801bbbc:	f1b9 0f00 	cmp.w	r9, #0
 801bbc0:	f000 8094 	beq.w	801bcec <_dtoa_r+0x48c>
 801bbc4:	f1ba 0f00 	cmp.w	sl, #0
 801bbc8:	dd2f      	ble.n	801bc2a <_dtoa_r+0x3ca>
 801bbca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801bbce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bbd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bbd6:	f10b 32ff 	add.w	r2, fp, #4294967295
 801bbda:	3101      	adds	r1, #1
 801bbdc:	4654      	mov	r4, sl
 801bbde:	ed9d 6b02 	vldr	d6, [sp, #8]
 801bbe2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801bbe6:	ee07 1a90 	vmov	s15, r1
 801bbea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bbee:	eea7 5b06 	vfma.f64	d5, d7, d6
 801bbf2:	ee15 7a90 	vmov	r7, s11
 801bbf6:	ec51 0b15 	vmov	r0, r1, d5
 801bbfa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801bbfe:	2c00      	cmp	r4, #0
 801bc00:	d177      	bne.n	801bcf2 <_dtoa_r+0x492>
 801bc02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801bc06:	ee36 6b47 	vsub.f64	d6, d6, d7
 801bc0a:	ec41 0b17 	vmov	d7, r0, r1
 801bc0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bc12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc16:	f300 826a 	bgt.w	801c0ee <_dtoa_r+0x88e>
 801bc1a:	eeb1 7b47 	vneg.f64	d7, d7
 801bc1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc26:	f100 8260 	bmi.w	801c0ea <_dtoa_r+0x88a>
 801bc2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801bc2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc30:	2a00      	cmp	r2, #0
 801bc32:	f2c0 811d 	blt.w	801be70 <_dtoa_r+0x610>
 801bc36:	f1bb 0f0e 	cmp.w	fp, #14
 801bc3a:	f300 8119 	bgt.w	801be70 <_dtoa_r+0x610>
 801bc3e:	4b8a      	ldr	r3, [pc, #552]	; (801be68 <_dtoa_r+0x608>)
 801bc40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bc44:	ed93 6b00 	vldr	d6, [r3]
 801bc48:	9b08      	ldr	r3, [sp, #32]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	f280 80b7 	bge.w	801bdbe <_dtoa_r+0x55e>
 801bc50:	f1b9 0f00 	cmp.w	r9, #0
 801bc54:	f300 80b3 	bgt.w	801bdbe <_dtoa_r+0x55e>
 801bc58:	f040 8246 	bne.w	801c0e8 <_dtoa_r+0x888>
 801bc5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801bc60:	ee26 6b07 	vmul.f64	d6, d6, d7
 801bc64:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bc68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc70:	464c      	mov	r4, r9
 801bc72:	464f      	mov	r7, r9
 801bc74:	f280 821c 	bge.w	801c0b0 <_dtoa_r+0x850>
 801bc78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bc7c:	2331      	movs	r3, #49	; 0x31
 801bc7e:	f808 3b01 	strb.w	r3, [r8], #1
 801bc82:	f10b 0b01 	add.w	fp, fp, #1
 801bc86:	e218      	b.n	801c0ba <_dtoa_r+0x85a>
 801bc88:	2102      	movs	r1, #2
 801bc8a:	e780      	b.n	801bb8e <_dtoa_r+0x32e>
 801bc8c:	07d4      	lsls	r4, r2, #31
 801bc8e:	d504      	bpl.n	801bc9a <_dtoa_r+0x43a>
 801bc90:	ed90 6b00 	vldr	d6, [r0]
 801bc94:	3101      	adds	r1, #1
 801bc96:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bc9a:	1052      	asrs	r2, r2, #1
 801bc9c:	3008      	adds	r0, #8
 801bc9e:	e777      	b.n	801bb90 <_dtoa_r+0x330>
 801bca0:	d022      	beq.n	801bce8 <_dtoa_r+0x488>
 801bca2:	f1cb 0200 	rsb	r2, fp, #0
 801bca6:	4970      	ldr	r1, [pc, #448]	; (801be68 <_dtoa_r+0x608>)
 801bca8:	f002 000f 	and.w	r0, r2, #15
 801bcac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801bcb0:	ed91 7b00 	vldr	d7, [r1]
 801bcb4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801bcb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bcbc:	486b      	ldr	r0, [pc, #428]	; (801be6c <_dtoa_r+0x60c>)
 801bcbe:	1112      	asrs	r2, r2, #4
 801bcc0:	2400      	movs	r4, #0
 801bcc2:	2102      	movs	r1, #2
 801bcc4:	b92a      	cbnz	r2, 801bcd2 <_dtoa_r+0x472>
 801bcc6:	2c00      	cmp	r4, #0
 801bcc8:	f43f af6a 	beq.w	801bba0 <_dtoa_r+0x340>
 801bccc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bcd0:	e766      	b.n	801bba0 <_dtoa_r+0x340>
 801bcd2:	07d7      	lsls	r7, r2, #31
 801bcd4:	d505      	bpl.n	801bce2 <_dtoa_r+0x482>
 801bcd6:	ed90 6b00 	vldr	d6, [r0]
 801bcda:	3101      	adds	r1, #1
 801bcdc:	2401      	movs	r4, #1
 801bcde:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bce2:	1052      	asrs	r2, r2, #1
 801bce4:	3008      	adds	r0, #8
 801bce6:	e7ed      	b.n	801bcc4 <_dtoa_r+0x464>
 801bce8:	2102      	movs	r1, #2
 801bcea:	e759      	b.n	801bba0 <_dtoa_r+0x340>
 801bcec:	465a      	mov	r2, fp
 801bcee:	464c      	mov	r4, r9
 801bcf0:	e775      	b.n	801bbde <_dtoa_r+0x37e>
 801bcf2:	ec41 0b17 	vmov	d7, r0, r1
 801bcf6:	495c      	ldr	r1, [pc, #368]	; (801be68 <_dtoa_r+0x608>)
 801bcf8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801bcfc:	ed11 4b02 	vldr	d4, [r1, #-8]
 801bd00:	9901      	ldr	r1, [sp, #4]
 801bd02:	440c      	add	r4, r1
 801bd04:	9907      	ldr	r1, [sp, #28]
 801bd06:	b351      	cbz	r1, 801bd5e <_dtoa_r+0x4fe>
 801bd08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801bd0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801bd10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bd14:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801bd18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bd1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801bd20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bd24:	ee14 1a90 	vmov	r1, s9
 801bd28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bd2c:	3130      	adds	r1, #48	; 0x30
 801bd2e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bd32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd3a:	f808 1b01 	strb.w	r1, [r8], #1
 801bd3e:	d439      	bmi.n	801bdb4 <_dtoa_r+0x554>
 801bd40:	ee32 5b46 	vsub.f64	d5, d2, d6
 801bd44:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801bd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd4c:	d472      	bmi.n	801be34 <_dtoa_r+0x5d4>
 801bd4e:	45a0      	cmp	r8, r4
 801bd50:	f43f af6b 	beq.w	801bc2a <_dtoa_r+0x3ca>
 801bd54:	ee27 7b03 	vmul.f64	d7, d7, d3
 801bd58:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bd5c:	e7e0      	b.n	801bd20 <_dtoa_r+0x4c0>
 801bd5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bd62:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bd66:	4620      	mov	r0, r4
 801bd68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bd6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bd70:	ee14 1a90 	vmov	r1, s9
 801bd74:	3130      	adds	r1, #48	; 0x30
 801bd76:	f808 1b01 	strb.w	r1, [r8], #1
 801bd7a:	45a0      	cmp	r8, r4
 801bd7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bd80:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bd84:	d118      	bne.n	801bdb8 <_dtoa_r+0x558>
 801bd86:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801bd8a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801bd8e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801bd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd96:	dc4d      	bgt.n	801be34 <_dtoa_r+0x5d4>
 801bd98:	ee35 5b47 	vsub.f64	d5, d5, d7
 801bd9c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801bda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bda4:	f57f af41 	bpl.w	801bc2a <_dtoa_r+0x3ca>
 801bda8:	4680      	mov	r8, r0
 801bdaa:	3801      	subs	r0, #1
 801bdac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801bdb0:	2b30      	cmp	r3, #48	; 0x30
 801bdb2:	d0f9      	beq.n	801bda8 <_dtoa_r+0x548>
 801bdb4:	4693      	mov	fp, r2
 801bdb6:	e02a      	b.n	801be0e <_dtoa_r+0x5ae>
 801bdb8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bdbc:	e7d6      	b.n	801bd6c <_dtoa_r+0x50c>
 801bdbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bdc2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801bdc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bdca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bdce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801bdd2:	ee15 3a10 	vmov	r3, s10
 801bdd6:	3330      	adds	r3, #48	; 0x30
 801bdd8:	f808 3b01 	strb.w	r3, [r8], #1
 801bddc:	9b01      	ldr	r3, [sp, #4]
 801bdde:	eba8 0303 	sub.w	r3, r8, r3
 801bde2:	4599      	cmp	r9, r3
 801bde4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801bde8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801bdec:	d133      	bne.n	801be56 <_dtoa_r+0x5f6>
 801bdee:	ee37 7b07 	vadd.f64	d7, d7, d7
 801bdf2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdfa:	dc1a      	bgt.n	801be32 <_dtoa_r+0x5d2>
 801bdfc:	eeb4 7b46 	vcmp.f64	d7, d6
 801be00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be04:	d103      	bne.n	801be0e <_dtoa_r+0x5ae>
 801be06:	ee15 3a10 	vmov	r3, s10
 801be0a:	07d9      	lsls	r1, r3, #31
 801be0c:	d411      	bmi.n	801be32 <_dtoa_r+0x5d2>
 801be0e:	4629      	mov	r1, r5
 801be10:	4630      	mov	r0, r6
 801be12:	f000 fbd1 	bl	801c5b8 <_Bfree>
 801be16:	2300      	movs	r3, #0
 801be18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801be1a:	f888 3000 	strb.w	r3, [r8]
 801be1e:	f10b 0301 	add.w	r3, fp, #1
 801be22:	6013      	str	r3, [r2, #0]
 801be24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801be26:	2b00      	cmp	r3, #0
 801be28:	f43f ad69 	beq.w	801b8fe <_dtoa_r+0x9e>
 801be2c:	f8c3 8000 	str.w	r8, [r3]
 801be30:	e565      	b.n	801b8fe <_dtoa_r+0x9e>
 801be32:	465a      	mov	r2, fp
 801be34:	4643      	mov	r3, r8
 801be36:	4698      	mov	r8, r3
 801be38:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801be3c:	2939      	cmp	r1, #57	; 0x39
 801be3e:	d106      	bne.n	801be4e <_dtoa_r+0x5ee>
 801be40:	9901      	ldr	r1, [sp, #4]
 801be42:	4299      	cmp	r1, r3
 801be44:	d1f7      	bne.n	801be36 <_dtoa_r+0x5d6>
 801be46:	9801      	ldr	r0, [sp, #4]
 801be48:	2130      	movs	r1, #48	; 0x30
 801be4a:	3201      	adds	r2, #1
 801be4c:	7001      	strb	r1, [r0, #0]
 801be4e:	7819      	ldrb	r1, [r3, #0]
 801be50:	3101      	adds	r1, #1
 801be52:	7019      	strb	r1, [r3, #0]
 801be54:	e7ae      	b.n	801bdb4 <_dtoa_r+0x554>
 801be56:	ee27 7b04 	vmul.f64	d7, d7, d4
 801be5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801be5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be62:	d1b2      	bne.n	801bdca <_dtoa_r+0x56a>
 801be64:	e7d3      	b.n	801be0e <_dtoa_r+0x5ae>
 801be66:	bf00      	nop
 801be68:	080211c8 	.word	0x080211c8
 801be6c:	080211a0 	.word	0x080211a0
 801be70:	9907      	ldr	r1, [sp, #28]
 801be72:	2900      	cmp	r1, #0
 801be74:	f000 80d0 	beq.w	801c018 <_dtoa_r+0x7b8>
 801be78:	9906      	ldr	r1, [sp, #24]
 801be7a:	2901      	cmp	r1, #1
 801be7c:	f300 80b4 	bgt.w	801bfe8 <_dtoa_r+0x788>
 801be80:	9909      	ldr	r1, [sp, #36]	; 0x24
 801be82:	2900      	cmp	r1, #0
 801be84:	f000 80ac 	beq.w	801bfe0 <_dtoa_r+0x780>
 801be88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801be8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801be90:	461c      	mov	r4, r3
 801be92:	9309      	str	r3, [sp, #36]	; 0x24
 801be94:	9b04      	ldr	r3, [sp, #16]
 801be96:	4413      	add	r3, r2
 801be98:	9304      	str	r3, [sp, #16]
 801be9a:	9b05      	ldr	r3, [sp, #20]
 801be9c:	2101      	movs	r1, #1
 801be9e:	4413      	add	r3, r2
 801bea0:	4630      	mov	r0, r6
 801bea2:	9305      	str	r3, [sp, #20]
 801bea4:	f000 fc3e 	bl	801c724 <__i2b>
 801bea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801beaa:	4607      	mov	r7, r0
 801beac:	f1b8 0f00 	cmp.w	r8, #0
 801beb0:	d00d      	beq.n	801bece <_dtoa_r+0x66e>
 801beb2:	9a05      	ldr	r2, [sp, #20]
 801beb4:	2a00      	cmp	r2, #0
 801beb6:	dd0a      	ble.n	801bece <_dtoa_r+0x66e>
 801beb8:	4542      	cmp	r2, r8
 801beba:	9904      	ldr	r1, [sp, #16]
 801bebc:	bfa8      	it	ge
 801bebe:	4642      	movge	r2, r8
 801bec0:	1a89      	subs	r1, r1, r2
 801bec2:	9104      	str	r1, [sp, #16]
 801bec4:	9905      	ldr	r1, [sp, #20]
 801bec6:	eba8 0802 	sub.w	r8, r8, r2
 801beca:	1a8a      	subs	r2, r1, r2
 801becc:	9205      	str	r2, [sp, #20]
 801bece:	b303      	cbz	r3, 801bf12 <_dtoa_r+0x6b2>
 801bed0:	9a07      	ldr	r2, [sp, #28]
 801bed2:	2a00      	cmp	r2, #0
 801bed4:	f000 80a5 	beq.w	801c022 <_dtoa_r+0x7c2>
 801bed8:	2c00      	cmp	r4, #0
 801beda:	dd13      	ble.n	801bf04 <_dtoa_r+0x6a4>
 801bedc:	4639      	mov	r1, r7
 801bede:	4622      	mov	r2, r4
 801bee0:	4630      	mov	r0, r6
 801bee2:	930d      	str	r3, [sp, #52]	; 0x34
 801bee4:	f000 fcde 	bl	801c8a4 <__pow5mult>
 801bee8:	462a      	mov	r2, r5
 801beea:	4601      	mov	r1, r0
 801beec:	4607      	mov	r7, r0
 801beee:	4630      	mov	r0, r6
 801bef0:	f000 fc2e 	bl	801c750 <__multiply>
 801bef4:	4629      	mov	r1, r5
 801bef6:	9009      	str	r0, [sp, #36]	; 0x24
 801bef8:	4630      	mov	r0, r6
 801befa:	f000 fb5d 	bl	801c5b8 <_Bfree>
 801befe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bf00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf02:	4615      	mov	r5, r2
 801bf04:	1b1a      	subs	r2, r3, r4
 801bf06:	d004      	beq.n	801bf12 <_dtoa_r+0x6b2>
 801bf08:	4629      	mov	r1, r5
 801bf0a:	4630      	mov	r0, r6
 801bf0c:	f000 fcca 	bl	801c8a4 <__pow5mult>
 801bf10:	4605      	mov	r5, r0
 801bf12:	2101      	movs	r1, #1
 801bf14:	4630      	mov	r0, r6
 801bf16:	f000 fc05 	bl	801c724 <__i2b>
 801bf1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	4604      	mov	r4, r0
 801bf20:	f340 8081 	ble.w	801c026 <_dtoa_r+0x7c6>
 801bf24:	461a      	mov	r2, r3
 801bf26:	4601      	mov	r1, r0
 801bf28:	4630      	mov	r0, r6
 801bf2a:	f000 fcbb 	bl	801c8a4 <__pow5mult>
 801bf2e:	9b06      	ldr	r3, [sp, #24]
 801bf30:	2b01      	cmp	r3, #1
 801bf32:	4604      	mov	r4, r0
 801bf34:	dd7a      	ble.n	801c02c <_dtoa_r+0x7cc>
 801bf36:	2300      	movs	r3, #0
 801bf38:	9309      	str	r3, [sp, #36]	; 0x24
 801bf3a:	6922      	ldr	r2, [r4, #16]
 801bf3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bf40:	6910      	ldr	r0, [r2, #16]
 801bf42:	f000 fba1 	bl	801c688 <__hi0bits>
 801bf46:	f1c0 0020 	rsb	r0, r0, #32
 801bf4a:	9b05      	ldr	r3, [sp, #20]
 801bf4c:	4418      	add	r0, r3
 801bf4e:	f010 001f 	ands.w	r0, r0, #31
 801bf52:	f000 8093 	beq.w	801c07c <_dtoa_r+0x81c>
 801bf56:	f1c0 0220 	rsb	r2, r0, #32
 801bf5a:	2a04      	cmp	r2, #4
 801bf5c:	f340 8085 	ble.w	801c06a <_dtoa_r+0x80a>
 801bf60:	9b04      	ldr	r3, [sp, #16]
 801bf62:	f1c0 001c 	rsb	r0, r0, #28
 801bf66:	4403      	add	r3, r0
 801bf68:	9304      	str	r3, [sp, #16]
 801bf6a:	9b05      	ldr	r3, [sp, #20]
 801bf6c:	4480      	add	r8, r0
 801bf6e:	4403      	add	r3, r0
 801bf70:	9305      	str	r3, [sp, #20]
 801bf72:	9b04      	ldr	r3, [sp, #16]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	dd05      	ble.n	801bf84 <_dtoa_r+0x724>
 801bf78:	4629      	mov	r1, r5
 801bf7a:	461a      	mov	r2, r3
 801bf7c:	4630      	mov	r0, r6
 801bf7e:	f000 fceb 	bl	801c958 <__lshift>
 801bf82:	4605      	mov	r5, r0
 801bf84:	9b05      	ldr	r3, [sp, #20]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	dd05      	ble.n	801bf96 <_dtoa_r+0x736>
 801bf8a:	4621      	mov	r1, r4
 801bf8c:	461a      	mov	r2, r3
 801bf8e:	4630      	mov	r0, r6
 801bf90:	f000 fce2 	bl	801c958 <__lshift>
 801bf94:	4604      	mov	r4, r0
 801bf96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d071      	beq.n	801c080 <_dtoa_r+0x820>
 801bf9c:	4621      	mov	r1, r4
 801bf9e:	4628      	mov	r0, r5
 801bfa0:	f000 fd46 	bl	801ca30 <__mcmp>
 801bfa4:	2800      	cmp	r0, #0
 801bfa6:	da6b      	bge.n	801c080 <_dtoa_r+0x820>
 801bfa8:	2300      	movs	r3, #0
 801bfaa:	4629      	mov	r1, r5
 801bfac:	220a      	movs	r2, #10
 801bfae:	4630      	mov	r0, r6
 801bfb0:	f000 fb24 	bl	801c5fc <__multadd>
 801bfb4:	9b07      	ldr	r3, [sp, #28]
 801bfb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bfba:	4605      	mov	r5, r0
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	f000 8197 	beq.w	801c2f0 <_dtoa_r+0xa90>
 801bfc2:	4639      	mov	r1, r7
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	220a      	movs	r2, #10
 801bfc8:	4630      	mov	r0, r6
 801bfca:	f000 fb17 	bl	801c5fc <__multadd>
 801bfce:	f1ba 0f00 	cmp.w	sl, #0
 801bfd2:	4607      	mov	r7, r0
 801bfd4:	f300 8093 	bgt.w	801c0fe <_dtoa_r+0x89e>
 801bfd8:	9b06      	ldr	r3, [sp, #24]
 801bfda:	2b02      	cmp	r3, #2
 801bfdc:	dc57      	bgt.n	801c08e <_dtoa_r+0x82e>
 801bfde:	e08e      	b.n	801c0fe <_dtoa_r+0x89e>
 801bfe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bfe2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bfe6:	e751      	b.n	801be8c <_dtoa_r+0x62c>
 801bfe8:	f109 34ff 	add.w	r4, r9, #4294967295
 801bfec:	42a3      	cmp	r3, r4
 801bfee:	bfbf      	itttt	lt
 801bff0:	1ae2      	sublt	r2, r4, r3
 801bff2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bff4:	189b      	addlt	r3, r3, r2
 801bff6:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bff8:	bfae      	itee	ge
 801bffa:	1b1c      	subge	r4, r3, r4
 801bffc:	4623      	movlt	r3, r4
 801bffe:	2400      	movlt	r4, #0
 801c000:	f1b9 0f00 	cmp.w	r9, #0
 801c004:	bfb5      	itete	lt
 801c006:	9a04      	ldrlt	r2, [sp, #16]
 801c008:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801c00c:	eba2 0809 	sublt.w	r8, r2, r9
 801c010:	464a      	movge	r2, r9
 801c012:	bfb8      	it	lt
 801c014:	2200      	movlt	r2, #0
 801c016:	e73c      	b.n	801be92 <_dtoa_r+0x632>
 801c018:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c01c:	9f07      	ldr	r7, [sp, #28]
 801c01e:	461c      	mov	r4, r3
 801c020:	e744      	b.n	801beac <_dtoa_r+0x64c>
 801c022:	461a      	mov	r2, r3
 801c024:	e770      	b.n	801bf08 <_dtoa_r+0x6a8>
 801c026:	9b06      	ldr	r3, [sp, #24]
 801c028:	2b01      	cmp	r3, #1
 801c02a:	dc18      	bgt.n	801c05e <_dtoa_r+0x7fe>
 801c02c:	9b02      	ldr	r3, [sp, #8]
 801c02e:	b9b3      	cbnz	r3, 801c05e <_dtoa_r+0x7fe>
 801c030:	9b03      	ldr	r3, [sp, #12]
 801c032:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801c036:	b9a2      	cbnz	r2, 801c062 <_dtoa_r+0x802>
 801c038:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c03c:	0d12      	lsrs	r2, r2, #20
 801c03e:	0512      	lsls	r2, r2, #20
 801c040:	b18a      	cbz	r2, 801c066 <_dtoa_r+0x806>
 801c042:	9b04      	ldr	r3, [sp, #16]
 801c044:	3301      	adds	r3, #1
 801c046:	9304      	str	r3, [sp, #16]
 801c048:	9b05      	ldr	r3, [sp, #20]
 801c04a:	3301      	adds	r3, #1
 801c04c:	9305      	str	r3, [sp, #20]
 801c04e:	2301      	movs	r3, #1
 801c050:	9309      	str	r3, [sp, #36]	; 0x24
 801c052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c054:	2b00      	cmp	r3, #0
 801c056:	f47f af70 	bne.w	801bf3a <_dtoa_r+0x6da>
 801c05a:	2001      	movs	r0, #1
 801c05c:	e775      	b.n	801bf4a <_dtoa_r+0x6ea>
 801c05e:	2300      	movs	r3, #0
 801c060:	e7f6      	b.n	801c050 <_dtoa_r+0x7f0>
 801c062:	9b02      	ldr	r3, [sp, #8]
 801c064:	e7f4      	b.n	801c050 <_dtoa_r+0x7f0>
 801c066:	9209      	str	r2, [sp, #36]	; 0x24
 801c068:	e7f3      	b.n	801c052 <_dtoa_r+0x7f2>
 801c06a:	d082      	beq.n	801bf72 <_dtoa_r+0x712>
 801c06c:	9b04      	ldr	r3, [sp, #16]
 801c06e:	321c      	adds	r2, #28
 801c070:	4413      	add	r3, r2
 801c072:	9304      	str	r3, [sp, #16]
 801c074:	9b05      	ldr	r3, [sp, #20]
 801c076:	4490      	add	r8, r2
 801c078:	4413      	add	r3, r2
 801c07a:	e779      	b.n	801bf70 <_dtoa_r+0x710>
 801c07c:	4602      	mov	r2, r0
 801c07e:	e7f5      	b.n	801c06c <_dtoa_r+0x80c>
 801c080:	f1b9 0f00 	cmp.w	r9, #0
 801c084:	dc36      	bgt.n	801c0f4 <_dtoa_r+0x894>
 801c086:	9b06      	ldr	r3, [sp, #24]
 801c088:	2b02      	cmp	r3, #2
 801c08a:	dd33      	ble.n	801c0f4 <_dtoa_r+0x894>
 801c08c:	46ca      	mov	sl, r9
 801c08e:	f1ba 0f00 	cmp.w	sl, #0
 801c092:	d10d      	bne.n	801c0b0 <_dtoa_r+0x850>
 801c094:	4621      	mov	r1, r4
 801c096:	4653      	mov	r3, sl
 801c098:	2205      	movs	r2, #5
 801c09a:	4630      	mov	r0, r6
 801c09c:	f000 faae 	bl	801c5fc <__multadd>
 801c0a0:	4601      	mov	r1, r0
 801c0a2:	4604      	mov	r4, r0
 801c0a4:	4628      	mov	r0, r5
 801c0a6:	f000 fcc3 	bl	801ca30 <__mcmp>
 801c0aa:	2800      	cmp	r0, #0
 801c0ac:	f73f ade4 	bgt.w	801bc78 <_dtoa_r+0x418>
 801c0b0:	9b08      	ldr	r3, [sp, #32]
 801c0b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c0b6:	ea6f 0b03 	mvn.w	fp, r3
 801c0ba:	f04f 0900 	mov.w	r9, #0
 801c0be:	4621      	mov	r1, r4
 801c0c0:	4630      	mov	r0, r6
 801c0c2:	f000 fa79 	bl	801c5b8 <_Bfree>
 801c0c6:	2f00      	cmp	r7, #0
 801c0c8:	f43f aea1 	beq.w	801be0e <_dtoa_r+0x5ae>
 801c0cc:	f1b9 0f00 	cmp.w	r9, #0
 801c0d0:	d005      	beq.n	801c0de <_dtoa_r+0x87e>
 801c0d2:	45b9      	cmp	r9, r7
 801c0d4:	d003      	beq.n	801c0de <_dtoa_r+0x87e>
 801c0d6:	4649      	mov	r1, r9
 801c0d8:	4630      	mov	r0, r6
 801c0da:	f000 fa6d 	bl	801c5b8 <_Bfree>
 801c0de:	4639      	mov	r1, r7
 801c0e0:	4630      	mov	r0, r6
 801c0e2:	f000 fa69 	bl	801c5b8 <_Bfree>
 801c0e6:	e692      	b.n	801be0e <_dtoa_r+0x5ae>
 801c0e8:	2400      	movs	r4, #0
 801c0ea:	4627      	mov	r7, r4
 801c0ec:	e7e0      	b.n	801c0b0 <_dtoa_r+0x850>
 801c0ee:	4693      	mov	fp, r2
 801c0f0:	4627      	mov	r7, r4
 801c0f2:	e5c1      	b.n	801bc78 <_dtoa_r+0x418>
 801c0f4:	9b07      	ldr	r3, [sp, #28]
 801c0f6:	46ca      	mov	sl, r9
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	f000 8100 	beq.w	801c2fe <_dtoa_r+0xa9e>
 801c0fe:	f1b8 0f00 	cmp.w	r8, #0
 801c102:	dd05      	ble.n	801c110 <_dtoa_r+0x8b0>
 801c104:	4639      	mov	r1, r7
 801c106:	4642      	mov	r2, r8
 801c108:	4630      	mov	r0, r6
 801c10a:	f000 fc25 	bl	801c958 <__lshift>
 801c10e:	4607      	mov	r7, r0
 801c110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c112:	2b00      	cmp	r3, #0
 801c114:	d05d      	beq.n	801c1d2 <_dtoa_r+0x972>
 801c116:	6879      	ldr	r1, [r7, #4]
 801c118:	4630      	mov	r0, r6
 801c11a:	f000 fa0d 	bl	801c538 <_Balloc>
 801c11e:	4680      	mov	r8, r0
 801c120:	b928      	cbnz	r0, 801c12e <_dtoa_r+0x8ce>
 801c122:	4b82      	ldr	r3, [pc, #520]	; (801c32c <_dtoa_r+0xacc>)
 801c124:	4602      	mov	r2, r0
 801c126:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c12a:	f7ff bbb1 	b.w	801b890 <_dtoa_r+0x30>
 801c12e:	693a      	ldr	r2, [r7, #16]
 801c130:	3202      	adds	r2, #2
 801c132:	0092      	lsls	r2, r2, #2
 801c134:	f107 010c 	add.w	r1, r7, #12
 801c138:	300c      	adds	r0, #12
 801c13a:	f7ff fadc 	bl	801b6f6 <memcpy>
 801c13e:	2201      	movs	r2, #1
 801c140:	4641      	mov	r1, r8
 801c142:	4630      	mov	r0, r6
 801c144:	f000 fc08 	bl	801c958 <__lshift>
 801c148:	9b01      	ldr	r3, [sp, #4]
 801c14a:	3301      	adds	r3, #1
 801c14c:	9304      	str	r3, [sp, #16]
 801c14e:	9b01      	ldr	r3, [sp, #4]
 801c150:	4453      	add	r3, sl
 801c152:	9308      	str	r3, [sp, #32]
 801c154:	9b02      	ldr	r3, [sp, #8]
 801c156:	f003 0301 	and.w	r3, r3, #1
 801c15a:	46b9      	mov	r9, r7
 801c15c:	9307      	str	r3, [sp, #28]
 801c15e:	4607      	mov	r7, r0
 801c160:	9b04      	ldr	r3, [sp, #16]
 801c162:	4621      	mov	r1, r4
 801c164:	3b01      	subs	r3, #1
 801c166:	4628      	mov	r0, r5
 801c168:	9302      	str	r3, [sp, #8]
 801c16a:	f7ff faf1 	bl	801b750 <quorem>
 801c16e:	4603      	mov	r3, r0
 801c170:	3330      	adds	r3, #48	; 0x30
 801c172:	9005      	str	r0, [sp, #20]
 801c174:	4649      	mov	r1, r9
 801c176:	4628      	mov	r0, r5
 801c178:	9309      	str	r3, [sp, #36]	; 0x24
 801c17a:	f000 fc59 	bl	801ca30 <__mcmp>
 801c17e:	463a      	mov	r2, r7
 801c180:	4682      	mov	sl, r0
 801c182:	4621      	mov	r1, r4
 801c184:	4630      	mov	r0, r6
 801c186:	f000 fc6f 	bl	801ca68 <__mdiff>
 801c18a:	68c2      	ldr	r2, [r0, #12]
 801c18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c18e:	4680      	mov	r8, r0
 801c190:	bb0a      	cbnz	r2, 801c1d6 <_dtoa_r+0x976>
 801c192:	4601      	mov	r1, r0
 801c194:	4628      	mov	r0, r5
 801c196:	f000 fc4b 	bl	801ca30 <__mcmp>
 801c19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c19c:	4602      	mov	r2, r0
 801c19e:	4641      	mov	r1, r8
 801c1a0:	4630      	mov	r0, r6
 801c1a2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801c1a6:	f000 fa07 	bl	801c5b8 <_Bfree>
 801c1aa:	9b06      	ldr	r3, [sp, #24]
 801c1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c1ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c1b2:	ea43 0102 	orr.w	r1, r3, r2
 801c1b6:	9b07      	ldr	r3, [sp, #28]
 801c1b8:	4319      	orrs	r1, r3
 801c1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1bc:	d10d      	bne.n	801c1da <_dtoa_r+0x97a>
 801c1be:	2b39      	cmp	r3, #57	; 0x39
 801c1c0:	d029      	beq.n	801c216 <_dtoa_r+0x9b6>
 801c1c2:	f1ba 0f00 	cmp.w	sl, #0
 801c1c6:	dd01      	ble.n	801c1cc <_dtoa_r+0x96c>
 801c1c8:	9b05      	ldr	r3, [sp, #20]
 801c1ca:	3331      	adds	r3, #49	; 0x31
 801c1cc:	9a02      	ldr	r2, [sp, #8]
 801c1ce:	7013      	strb	r3, [r2, #0]
 801c1d0:	e775      	b.n	801c0be <_dtoa_r+0x85e>
 801c1d2:	4638      	mov	r0, r7
 801c1d4:	e7b8      	b.n	801c148 <_dtoa_r+0x8e8>
 801c1d6:	2201      	movs	r2, #1
 801c1d8:	e7e1      	b.n	801c19e <_dtoa_r+0x93e>
 801c1da:	f1ba 0f00 	cmp.w	sl, #0
 801c1de:	db06      	blt.n	801c1ee <_dtoa_r+0x98e>
 801c1e0:	9906      	ldr	r1, [sp, #24]
 801c1e2:	ea41 0a0a 	orr.w	sl, r1, sl
 801c1e6:	9907      	ldr	r1, [sp, #28]
 801c1e8:	ea5a 0a01 	orrs.w	sl, sl, r1
 801c1ec:	d120      	bne.n	801c230 <_dtoa_r+0x9d0>
 801c1ee:	2a00      	cmp	r2, #0
 801c1f0:	ddec      	ble.n	801c1cc <_dtoa_r+0x96c>
 801c1f2:	4629      	mov	r1, r5
 801c1f4:	2201      	movs	r2, #1
 801c1f6:	4630      	mov	r0, r6
 801c1f8:	9304      	str	r3, [sp, #16]
 801c1fa:	f000 fbad 	bl	801c958 <__lshift>
 801c1fe:	4621      	mov	r1, r4
 801c200:	4605      	mov	r5, r0
 801c202:	f000 fc15 	bl	801ca30 <__mcmp>
 801c206:	2800      	cmp	r0, #0
 801c208:	9b04      	ldr	r3, [sp, #16]
 801c20a:	dc02      	bgt.n	801c212 <_dtoa_r+0x9b2>
 801c20c:	d1de      	bne.n	801c1cc <_dtoa_r+0x96c>
 801c20e:	07da      	lsls	r2, r3, #31
 801c210:	d5dc      	bpl.n	801c1cc <_dtoa_r+0x96c>
 801c212:	2b39      	cmp	r3, #57	; 0x39
 801c214:	d1d8      	bne.n	801c1c8 <_dtoa_r+0x968>
 801c216:	9a02      	ldr	r2, [sp, #8]
 801c218:	2339      	movs	r3, #57	; 0x39
 801c21a:	7013      	strb	r3, [r2, #0]
 801c21c:	4643      	mov	r3, r8
 801c21e:	4698      	mov	r8, r3
 801c220:	3b01      	subs	r3, #1
 801c222:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801c226:	2a39      	cmp	r2, #57	; 0x39
 801c228:	d051      	beq.n	801c2ce <_dtoa_r+0xa6e>
 801c22a:	3201      	adds	r2, #1
 801c22c:	701a      	strb	r2, [r3, #0]
 801c22e:	e746      	b.n	801c0be <_dtoa_r+0x85e>
 801c230:	2a00      	cmp	r2, #0
 801c232:	dd03      	ble.n	801c23c <_dtoa_r+0x9dc>
 801c234:	2b39      	cmp	r3, #57	; 0x39
 801c236:	d0ee      	beq.n	801c216 <_dtoa_r+0x9b6>
 801c238:	3301      	adds	r3, #1
 801c23a:	e7c7      	b.n	801c1cc <_dtoa_r+0x96c>
 801c23c:	9a04      	ldr	r2, [sp, #16]
 801c23e:	9908      	ldr	r1, [sp, #32]
 801c240:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c244:	428a      	cmp	r2, r1
 801c246:	d02b      	beq.n	801c2a0 <_dtoa_r+0xa40>
 801c248:	4629      	mov	r1, r5
 801c24a:	2300      	movs	r3, #0
 801c24c:	220a      	movs	r2, #10
 801c24e:	4630      	mov	r0, r6
 801c250:	f000 f9d4 	bl	801c5fc <__multadd>
 801c254:	45b9      	cmp	r9, r7
 801c256:	4605      	mov	r5, r0
 801c258:	f04f 0300 	mov.w	r3, #0
 801c25c:	f04f 020a 	mov.w	r2, #10
 801c260:	4649      	mov	r1, r9
 801c262:	4630      	mov	r0, r6
 801c264:	d107      	bne.n	801c276 <_dtoa_r+0xa16>
 801c266:	f000 f9c9 	bl	801c5fc <__multadd>
 801c26a:	4681      	mov	r9, r0
 801c26c:	4607      	mov	r7, r0
 801c26e:	9b04      	ldr	r3, [sp, #16]
 801c270:	3301      	adds	r3, #1
 801c272:	9304      	str	r3, [sp, #16]
 801c274:	e774      	b.n	801c160 <_dtoa_r+0x900>
 801c276:	f000 f9c1 	bl	801c5fc <__multadd>
 801c27a:	4639      	mov	r1, r7
 801c27c:	4681      	mov	r9, r0
 801c27e:	2300      	movs	r3, #0
 801c280:	220a      	movs	r2, #10
 801c282:	4630      	mov	r0, r6
 801c284:	f000 f9ba 	bl	801c5fc <__multadd>
 801c288:	4607      	mov	r7, r0
 801c28a:	e7f0      	b.n	801c26e <_dtoa_r+0xa0e>
 801c28c:	f1ba 0f00 	cmp.w	sl, #0
 801c290:	9a01      	ldr	r2, [sp, #4]
 801c292:	bfcc      	ite	gt
 801c294:	46d0      	movgt	r8, sl
 801c296:	f04f 0801 	movle.w	r8, #1
 801c29a:	4490      	add	r8, r2
 801c29c:	f04f 0900 	mov.w	r9, #0
 801c2a0:	4629      	mov	r1, r5
 801c2a2:	2201      	movs	r2, #1
 801c2a4:	4630      	mov	r0, r6
 801c2a6:	9302      	str	r3, [sp, #8]
 801c2a8:	f000 fb56 	bl	801c958 <__lshift>
 801c2ac:	4621      	mov	r1, r4
 801c2ae:	4605      	mov	r5, r0
 801c2b0:	f000 fbbe 	bl	801ca30 <__mcmp>
 801c2b4:	2800      	cmp	r0, #0
 801c2b6:	dcb1      	bgt.n	801c21c <_dtoa_r+0x9bc>
 801c2b8:	d102      	bne.n	801c2c0 <_dtoa_r+0xa60>
 801c2ba:	9b02      	ldr	r3, [sp, #8]
 801c2bc:	07db      	lsls	r3, r3, #31
 801c2be:	d4ad      	bmi.n	801c21c <_dtoa_r+0x9bc>
 801c2c0:	4643      	mov	r3, r8
 801c2c2:	4698      	mov	r8, r3
 801c2c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c2c8:	2a30      	cmp	r2, #48	; 0x30
 801c2ca:	d0fa      	beq.n	801c2c2 <_dtoa_r+0xa62>
 801c2cc:	e6f7      	b.n	801c0be <_dtoa_r+0x85e>
 801c2ce:	9a01      	ldr	r2, [sp, #4]
 801c2d0:	429a      	cmp	r2, r3
 801c2d2:	d1a4      	bne.n	801c21e <_dtoa_r+0x9be>
 801c2d4:	f10b 0b01 	add.w	fp, fp, #1
 801c2d8:	2331      	movs	r3, #49	; 0x31
 801c2da:	e778      	b.n	801c1ce <_dtoa_r+0x96e>
 801c2dc:	4b14      	ldr	r3, [pc, #80]	; (801c330 <_dtoa_r+0xad0>)
 801c2de:	f7ff bb2a 	b.w	801b936 <_dtoa_r+0xd6>
 801c2e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	f47f ab05 	bne.w	801b8f4 <_dtoa_r+0x94>
 801c2ea:	4b12      	ldr	r3, [pc, #72]	; (801c334 <_dtoa_r+0xad4>)
 801c2ec:	f7ff bb23 	b.w	801b936 <_dtoa_r+0xd6>
 801c2f0:	f1ba 0f00 	cmp.w	sl, #0
 801c2f4:	dc03      	bgt.n	801c2fe <_dtoa_r+0xa9e>
 801c2f6:	9b06      	ldr	r3, [sp, #24]
 801c2f8:	2b02      	cmp	r3, #2
 801c2fa:	f73f aec8 	bgt.w	801c08e <_dtoa_r+0x82e>
 801c2fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c302:	4621      	mov	r1, r4
 801c304:	4628      	mov	r0, r5
 801c306:	f7ff fa23 	bl	801b750 <quorem>
 801c30a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c30e:	f808 3b01 	strb.w	r3, [r8], #1
 801c312:	9a01      	ldr	r2, [sp, #4]
 801c314:	eba8 0202 	sub.w	r2, r8, r2
 801c318:	4592      	cmp	sl, r2
 801c31a:	ddb7      	ble.n	801c28c <_dtoa_r+0xa2c>
 801c31c:	4629      	mov	r1, r5
 801c31e:	2300      	movs	r3, #0
 801c320:	220a      	movs	r2, #10
 801c322:	4630      	mov	r0, r6
 801c324:	f000 f96a 	bl	801c5fc <__multadd>
 801c328:	4605      	mov	r5, r0
 801c32a:	e7ea      	b.n	801c302 <_dtoa_r+0xaa2>
 801c32c:	08021133 	.word	0x08021133
 801c330:	0802106e 	.word	0x0802106e
 801c334:	080210ce 	.word	0x080210ce

0801c338 <_free_r>:
 801c338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c33a:	2900      	cmp	r1, #0
 801c33c:	d044      	beq.n	801c3c8 <_free_r+0x90>
 801c33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c342:	9001      	str	r0, [sp, #4]
 801c344:	2b00      	cmp	r3, #0
 801c346:	f1a1 0404 	sub.w	r4, r1, #4
 801c34a:	bfb8      	it	lt
 801c34c:	18e4      	addlt	r4, r4, r3
 801c34e:	f000 f8e7 	bl	801c520 <__malloc_lock>
 801c352:	4a1e      	ldr	r2, [pc, #120]	; (801c3cc <_free_r+0x94>)
 801c354:	9801      	ldr	r0, [sp, #4]
 801c356:	6813      	ldr	r3, [r2, #0]
 801c358:	b933      	cbnz	r3, 801c368 <_free_r+0x30>
 801c35a:	6063      	str	r3, [r4, #4]
 801c35c:	6014      	str	r4, [r2, #0]
 801c35e:	b003      	add	sp, #12
 801c360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c364:	f000 b8e2 	b.w	801c52c <__malloc_unlock>
 801c368:	42a3      	cmp	r3, r4
 801c36a:	d908      	bls.n	801c37e <_free_r+0x46>
 801c36c:	6825      	ldr	r5, [r4, #0]
 801c36e:	1961      	adds	r1, r4, r5
 801c370:	428b      	cmp	r3, r1
 801c372:	bf01      	itttt	eq
 801c374:	6819      	ldreq	r1, [r3, #0]
 801c376:	685b      	ldreq	r3, [r3, #4]
 801c378:	1949      	addeq	r1, r1, r5
 801c37a:	6021      	streq	r1, [r4, #0]
 801c37c:	e7ed      	b.n	801c35a <_free_r+0x22>
 801c37e:	461a      	mov	r2, r3
 801c380:	685b      	ldr	r3, [r3, #4]
 801c382:	b10b      	cbz	r3, 801c388 <_free_r+0x50>
 801c384:	42a3      	cmp	r3, r4
 801c386:	d9fa      	bls.n	801c37e <_free_r+0x46>
 801c388:	6811      	ldr	r1, [r2, #0]
 801c38a:	1855      	adds	r5, r2, r1
 801c38c:	42a5      	cmp	r5, r4
 801c38e:	d10b      	bne.n	801c3a8 <_free_r+0x70>
 801c390:	6824      	ldr	r4, [r4, #0]
 801c392:	4421      	add	r1, r4
 801c394:	1854      	adds	r4, r2, r1
 801c396:	42a3      	cmp	r3, r4
 801c398:	6011      	str	r1, [r2, #0]
 801c39a:	d1e0      	bne.n	801c35e <_free_r+0x26>
 801c39c:	681c      	ldr	r4, [r3, #0]
 801c39e:	685b      	ldr	r3, [r3, #4]
 801c3a0:	6053      	str	r3, [r2, #4]
 801c3a2:	440c      	add	r4, r1
 801c3a4:	6014      	str	r4, [r2, #0]
 801c3a6:	e7da      	b.n	801c35e <_free_r+0x26>
 801c3a8:	d902      	bls.n	801c3b0 <_free_r+0x78>
 801c3aa:	230c      	movs	r3, #12
 801c3ac:	6003      	str	r3, [r0, #0]
 801c3ae:	e7d6      	b.n	801c35e <_free_r+0x26>
 801c3b0:	6825      	ldr	r5, [r4, #0]
 801c3b2:	1961      	adds	r1, r4, r5
 801c3b4:	428b      	cmp	r3, r1
 801c3b6:	bf04      	itt	eq
 801c3b8:	6819      	ldreq	r1, [r3, #0]
 801c3ba:	685b      	ldreq	r3, [r3, #4]
 801c3bc:	6063      	str	r3, [r4, #4]
 801c3be:	bf04      	itt	eq
 801c3c0:	1949      	addeq	r1, r1, r5
 801c3c2:	6021      	streq	r1, [r4, #0]
 801c3c4:	6054      	str	r4, [r2, #4]
 801c3c6:	e7ca      	b.n	801c35e <_free_r+0x26>
 801c3c8:	b003      	add	sp, #12
 801c3ca:	bd30      	pop	{r4, r5, pc}
 801c3cc:	2000745c 	.word	0x2000745c

0801c3d0 <malloc>:
 801c3d0:	4b02      	ldr	r3, [pc, #8]	; (801c3dc <malloc+0xc>)
 801c3d2:	4601      	mov	r1, r0
 801c3d4:	6818      	ldr	r0, [r3, #0]
 801c3d6:	f000 b823 	b.w	801c420 <_malloc_r>
 801c3da:	bf00      	nop
 801c3dc:	200001dc 	.word	0x200001dc

0801c3e0 <sbrk_aligned>:
 801c3e0:	b570      	push	{r4, r5, r6, lr}
 801c3e2:	4e0e      	ldr	r6, [pc, #56]	; (801c41c <sbrk_aligned+0x3c>)
 801c3e4:	460c      	mov	r4, r1
 801c3e6:	6831      	ldr	r1, [r6, #0]
 801c3e8:	4605      	mov	r5, r0
 801c3ea:	b911      	cbnz	r1, 801c3f2 <sbrk_aligned+0x12>
 801c3ec:	f001 f800 	bl	801d3f0 <_sbrk_r>
 801c3f0:	6030      	str	r0, [r6, #0]
 801c3f2:	4621      	mov	r1, r4
 801c3f4:	4628      	mov	r0, r5
 801c3f6:	f000 fffb 	bl	801d3f0 <_sbrk_r>
 801c3fa:	1c43      	adds	r3, r0, #1
 801c3fc:	d00a      	beq.n	801c414 <sbrk_aligned+0x34>
 801c3fe:	1cc4      	adds	r4, r0, #3
 801c400:	f024 0403 	bic.w	r4, r4, #3
 801c404:	42a0      	cmp	r0, r4
 801c406:	d007      	beq.n	801c418 <sbrk_aligned+0x38>
 801c408:	1a21      	subs	r1, r4, r0
 801c40a:	4628      	mov	r0, r5
 801c40c:	f000 fff0 	bl	801d3f0 <_sbrk_r>
 801c410:	3001      	adds	r0, #1
 801c412:	d101      	bne.n	801c418 <sbrk_aligned+0x38>
 801c414:	f04f 34ff 	mov.w	r4, #4294967295
 801c418:	4620      	mov	r0, r4
 801c41a:	bd70      	pop	{r4, r5, r6, pc}
 801c41c:	20007460 	.word	0x20007460

0801c420 <_malloc_r>:
 801c420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c424:	1ccd      	adds	r5, r1, #3
 801c426:	f025 0503 	bic.w	r5, r5, #3
 801c42a:	3508      	adds	r5, #8
 801c42c:	2d0c      	cmp	r5, #12
 801c42e:	bf38      	it	cc
 801c430:	250c      	movcc	r5, #12
 801c432:	2d00      	cmp	r5, #0
 801c434:	4607      	mov	r7, r0
 801c436:	db01      	blt.n	801c43c <_malloc_r+0x1c>
 801c438:	42a9      	cmp	r1, r5
 801c43a:	d905      	bls.n	801c448 <_malloc_r+0x28>
 801c43c:	230c      	movs	r3, #12
 801c43e:	603b      	str	r3, [r7, #0]
 801c440:	2600      	movs	r6, #0
 801c442:	4630      	mov	r0, r6
 801c444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c448:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c51c <_malloc_r+0xfc>
 801c44c:	f000 f868 	bl	801c520 <__malloc_lock>
 801c450:	f8d8 3000 	ldr.w	r3, [r8]
 801c454:	461c      	mov	r4, r3
 801c456:	bb5c      	cbnz	r4, 801c4b0 <_malloc_r+0x90>
 801c458:	4629      	mov	r1, r5
 801c45a:	4638      	mov	r0, r7
 801c45c:	f7ff ffc0 	bl	801c3e0 <sbrk_aligned>
 801c460:	1c43      	adds	r3, r0, #1
 801c462:	4604      	mov	r4, r0
 801c464:	d155      	bne.n	801c512 <_malloc_r+0xf2>
 801c466:	f8d8 4000 	ldr.w	r4, [r8]
 801c46a:	4626      	mov	r6, r4
 801c46c:	2e00      	cmp	r6, #0
 801c46e:	d145      	bne.n	801c4fc <_malloc_r+0xdc>
 801c470:	2c00      	cmp	r4, #0
 801c472:	d048      	beq.n	801c506 <_malloc_r+0xe6>
 801c474:	6823      	ldr	r3, [r4, #0]
 801c476:	4631      	mov	r1, r6
 801c478:	4638      	mov	r0, r7
 801c47a:	eb04 0903 	add.w	r9, r4, r3
 801c47e:	f000 ffb7 	bl	801d3f0 <_sbrk_r>
 801c482:	4581      	cmp	r9, r0
 801c484:	d13f      	bne.n	801c506 <_malloc_r+0xe6>
 801c486:	6821      	ldr	r1, [r4, #0]
 801c488:	1a6d      	subs	r5, r5, r1
 801c48a:	4629      	mov	r1, r5
 801c48c:	4638      	mov	r0, r7
 801c48e:	f7ff ffa7 	bl	801c3e0 <sbrk_aligned>
 801c492:	3001      	adds	r0, #1
 801c494:	d037      	beq.n	801c506 <_malloc_r+0xe6>
 801c496:	6823      	ldr	r3, [r4, #0]
 801c498:	442b      	add	r3, r5
 801c49a:	6023      	str	r3, [r4, #0]
 801c49c:	f8d8 3000 	ldr.w	r3, [r8]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d038      	beq.n	801c516 <_malloc_r+0xf6>
 801c4a4:	685a      	ldr	r2, [r3, #4]
 801c4a6:	42a2      	cmp	r2, r4
 801c4a8:	d12b      	bne.n	801c502 <_malloc_r+0xe2>
 801c4aa:	2200      	movs	r2, #0
 801c4ac:	605a      	str	r2, [r3, #4]
 801c4ae:	e00f      	b.n	801c4d0 <_malloc_r+0xb0>
 801c4b0:	6822      	ldr	r2, [r4, #0]
 801c4b2:	1b52      	subs	r2, r2, r5
 801c4b4:	d41f      	bmi.n	801c4f6 <_malloc_r+0xd6>
 801c4b6:	2a0b      	cmp	r2, #11
 801c4b8:	d917      	bls.n	801c4ea <_malloc_r+0xca>
 801c4ba:	1961      	adds	r1, r4, r5
 801c4bc:	42a3      	cmp	r3, r4
 801c4be:	6025      	str	r5, [r4, #0]
 801c4c0:	bf18      	it	ne
 801c4c2:	6059      	strne	r1, [r3, #4]
 801c4c4:	6863      	ldr	r3, [r4, #4]
 801c4c6:	bf08      	it	eq
 801c4c8:	f8c8 1000 	streq.w	r1, [r8]
 801c4cc:	5162      	str	r2, [r4, r5]
 801c4ce:	604b      	str	r3, [r1, #4]
 801c4d0:	4638      	mov	r0, r7
 801c4d2:	f104 060b 	add.w	r6, r4, #11
 801c4d6:	f000 f829 	bl	801c52c <__malloc_unlock>
 801c4da:	f026 0607 	bic.w	r6, r6, #7
 801c4de:	1d23      	adds	r3, r4, #4
 801c4e0:	1af2      	subs	r2, r6, r3
 801c4e2:	d0ae      	beq.n	801c442 <_malloc_r+0x22>
 801c4e4:	1b9b      	subs	r3, r3, r6
 801c4e6:	50a3      	str	r3, [r4, r2]
 801c4e8:	e7ab      	b.n	801c442 <_malloc_r+0x22>
 801c4ea:	42a3      	cmp	r3, r4
 801c4ec:	6862      	ldr	r2, [r4, #4]
 801c4ee:	d1dd      	bne.n	801c4ac <_malloc_r+0x8c>
 801c4f0:	f8c8 2000 	str.w	r2, [r8]
 801c4f4:	e7ec      	b.n	801c4d0 <_malloc_r+0xb0>
 801c4f6:	4623      	mov	r3, r4
 801c4f8:	6864      	ldr	r4, [r4, #4]
 801c4fa:	e7ac      	b.n	801c456 <_malloc_r+0x36>
 801c4fc:	4634      	mov	r4, r6
 801c4fe:	6876      	ldr	r6, [r6, #4]
 801c500:	e7b4      	b.n	801c46c <_malloc_r+0x4c>
 801c502:	4613      	mov	r3, r2
 801c504:	e7cc      	b.n	801c4a0 <_malloc_r+0x80>
 801c506:	230c      	movs	r3, #12
 801c508:	603b      	str	r3, [r7, #0]
 801c50a:	4638      	mov	r0, r7
 801c50c:	f000 f80e 	bl	801c52c <__malloc_unlock>
 801c510:	e797      	b.n	801c442 <_malloc_r+0x22>
 801c512:	6025      	str	r5, [r4, #0]
 801c514:	e7dc      	b.n	801c4d0 <_malloc_r+0xb0>
 801c516:	605b      	str	r3, [r3, #4]
 801c518:	deff      	udf	#255	; 0xff
 801c51a:	bf00      	nop
 801c51c:	2000745c 	.word	0x2000745c

0801c520 <__malloc_lock>:
 801c520:	4801      	ldr	r0, [pc, #4]	; (801c528 <__malloc_lock+0x8>)
 801c522:	f7ff b8de 	b.w	801b6e2 <__retarget_lock_acquire_recursive>
 801c526:	bf00      	nop
 801c528:	20007458 	.word	0x20007458

0801c52c <__malloc_unlock>:
 801c52c:	4801      	ldr	r0, [pc, #4]	; (801c534 <__malloc_unlock+0x8>)
 801c52e:	f7ff b8d9 	b.w	801b6e4 <__retarget_lock_release_recursive>
 801c532:	bf00      	nop
 801c534:	20007458 	.word	0x20007458

0801c538 <_Balloc>:
 801c538:	b570      	push	{r4, r5, r6, lr}
 801c53a:	69c6      	ldr	r6, [r0, #28]
 801c53c:	4604      	mov	r4, r0
 801c53e:	460d      	mov	r5, r1
 801c540:	b976      	cbnz	r6, 801c560 <_Balloc+0x28>
 801c542:	2010      	movs	r0, #16
 801c544:	f7ff ff44 	bl	801c3d0 <malloc>
 801c548:	4602      	mov	r2, r0
 801c54a:	61e0      	str	r0, [r4, #28]
 801c54c:	b920      	cbnz	r0, 801c558 <_Balloc+0x20>
 801c54e:	4b18      	ldr	r3, [pc, #96]	; (801c5b0 <_Balloc+0x78>)
 801c550:	4818      	ldr	r0, [pc, #96]	; (801c5b4 <_Balloc+0x7c>)
 801c552:	216b      	movs	r1, #107	; 0x6b
 801c554:	f7ff f8de 	bl	801b714 <__assert_func>
 801c558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c55c:	6006      	str	r6, [r0, #0]
 801c55e:	60c6      	str	r6, [r0, #12]
 801c560:	69e6      	ldr	r6, [r4, #28]
 801c562:	68f3      	ldr	r3, [r6, #12]
 801c564:	b183      	cbz	r3, 801c588 <_Balloc+0x50>
 801c566:	69e3      	ldr	r3, [r4, #28]
 801c568:	68db      	ldr	r3, [r3, #12]
 801c56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c56e:	b9b8      	cbnz	r0, 801c5a0 <_Balloc+0x68>
 801c570:	2101      	movs	r1, #1
 801c572:	fa01 f605 	lsl.w	r6, r1, r5
 801c576:	1d72      	adds	r2, r6, #5
 801c578:	0092      	lsls	r2, r2, #2
 801c57a:	4620      	mov	r0, r4
 801c57c:	f000 ff4f 	bl	801d41e <_calloc_r>
 801c580:	b160      	cbz	r0, 801c59c <_Balloc+0x64>
 801c582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c586:	e00e      	b.n	801c5a6 <_Balloc+0x6e>
 801c588:	2221      	movs	r2, #33	; 0x21
 801c58a:	2104      	movs	r1, #4
 801c58c:	4620      	mov	r0, r4
 801c58e:	f000 ff46 	bl	801d41e <_calloc_r>
 801c592:	69e3      	ldr	r3, [r4, #28]
 801c594:	60f0      	str	r0, [r6, #12]
 801c596:	68db      	ldr	r3, [r3, #12]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d1e4      	bne.n	801c566 <_Balloc+0x2e>
 801c59c:	2000      	movs	r0, #0
 801c59e:	bd70      	pop	{r4, r5, r6, pc}
 801c5a0:	6802      	ldr	r2, [r0, #0]
 801c5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c5ac:	e7f7      	b.n	801c59e <_Balloc+0x66>
 801c5ae:	bf00      	nop
 801c5b0:	08020eee 	.word	0x08020eee
 801c5b4:	08021144 	.word	0x08021144

0801c5b8 <_Bfree>:
 801c5b8:	b570      	push	{r4, r5, r6, lr}
 801c5ba:	69c6      	ldr	r6, [r0, #28]
 801c5bc:	4605      	mov	r5, r0
 801c5be:	460c      	mov	r4, r1
 801c5c0:	b976      	cbnz	r6, 801c5e0 <_Bfree+0x28>
 801c5c2:	2010      	movs	r0, #16
 801c5c4:	f7ff ff04 	bl	801c3d0 <malloc>
 801c5c8:	4602      	mov	r2, r0
 801c5ca:	61e8      	str	r0, [r5, #28]
 801c5cc:	b920      	cbnz	r0, 801c5d8 <_Bfree+0x20>
 801c5ce:	4b09      	ldr	r3, [pc, #36]	; (801c5f4 <_Bfree+0x3c>)
 801c5d0:	4809      	ldr	r0, [pc, #36]	; (801c5f8 <_Bfree+0x40>)
 801c5d2:	218f      	movs	r1, #143	; 0x8f
 801c5d4:	f7ff f89e 	bl	801b714 <__assert_func>
 801c5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c5dc:	6006      	str	r6, [r0, #0]
 801c5de:	60c6      	str	r6, [r0, #12]
 801c5e0:	b13c      	cbz	r4, 801c5f2 <_Bfree+0x3a>
 801c5e2:	69eb      	ldr	r3, [r5, #28]
 801c5e4:	6862      	ldr	r2, [r4, #4]
 801c5e6:	68db      	ldr	r3, [r3, #12]
 801c5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c5ec:	6021      	str	r1, [r4, #0]
 801c5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c5f2:	bd70      	pop	{r4, r5, r6, pc}
 801c5f4:	08020eee 	.word	0x08020eee
 801c5f8:	08021144 	.word	0x08021144

0801c5fc <__multadd>:
 801c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c600:	690d      	ldr	r5, [r1, #16]
 801c602:	4607      	mov	r7, r0
 801c604:	460c      	mov	r4, r1
 801c606:	461e      	mov	r6, r3
 801c608:	f101 0c14 	add.w	ip, r1, #20
 801c60c:	2000      	movs	r0, #0
 801c60e:	f8dc 3000 	ldr.w	r3, [ip]
 801c612:	b299      	uxth	r1, r3
 801c614:	fb02 6101 	mla	r1, r2, r1, r6
 801c618:	0c1e      	lsrs	r6, r3, #16
 801c61a:	0c0b      	lsrs	r3, r1, #16
 801c61c:	fb02 3306 	mla	r3, r2, r6, r3
 801c620:	b289      	uxth	r1, r1
 801c622:	3001      	adds	r0, #1
 801c624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c628:	4285      	cmp	r5, r0
 801c62a:	f84c 1b04 	str.w	r1, [ip], #4
 801c62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c632:	dcec      	bgt.n	801c60e <__multadd+0x12>
 801c634:	b30e      	cbz	r6, 801c67a <__multadd+0x7e>
 801c636:	68a3      	ldr	r3, [r4, #8]
 801c638:	42ab      	cmp	r3, r5
 801c63a:	dc19      	bgt.n	801c670 <__multadd+0x74>
 801c63c:	6861      	ldr	r1, [r4, #4]
 801c63e:	4638      	mov	r0, r7
 801c640:	3101      	adds	r1, #1
 801c642:	f7ff ff79 	bl	801c538 <_Balloc>
 801c646:	4680      	mov	r8, r0
 801c648:	b928      	cbnz	r0, 801c656 <__multadd+0x5a>
 801c64a:	4602      	mov	r2, r0
 801c64c:	4b0c      	ldr	r3, [pc, #48]	; (801c680 <__multadd+0x84>)
 801c64e:	480d      	ldr	r0, [pc, #52]	; (801c684 <__multadd+0x88>)
 801c650:	21ba      	movs	r1, #186	; 0xba
 801c652:	f7ff f85f 	bl	801b714 <__assert_func>
 801c656:	6922      	ldr	r2, [r4, #16]
 801c658:	3202      	adds	r2, #2
 801c65a:	f104 010c 	add.w	r1, r4, #12
 801c65e:	0092      	lsls	r2, r2, #2
 801c660:	300c      	adds	r0, #12
 801c662:	f7ff f848 	bl	801b6f6 <memcpy>
 801c666:	4621      	mov	r1, r4
 801c668:	4638      	mov	r0, r7
 801c66a:	f7ff ffa5 	bl	801c5b8 <_Bfree>
 801c66e:	4644      	mov	r4, r8
 801c670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c674:	3501      	adds	r5, #1
 801c676:	615e      	str	r6, [r3, #20]
 801c678:	6125      	str	r5, [r4, #16]
 801c67a:	4620      	mov	r0, r4
 801c67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c680:	08021133 	.word	0x08021133
 801c684:	08021144 	.word	0x08021144

0801c688 <__hi0bits>:
 801c688:	0c03      	lsrs	r3, r0, #16
 801c68a:	041b      	lsls	r3, r3, #16
 801c68c:	b9d3      	cbnz	r3, 801c6c4 <__hi0bits+0x3c>
 801c68e:	0400      	lsls	r0, r0, #16
 801c690:	2310      	movs	r3, #16
 801c692:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c696:	bf04      	itt	eq
 801c698:	0200      	lsleq	r0, r0, #8
 801c69a:	3308      	addeq	r3, #8
 801c69c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c6a0:	bf04      	itt	eq
 801c6a2:	0100      	lsleq	r0, r0, #4
 801c6a4:	3304      	addeq	r3, #4
 801c6a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c6aa:	bf04      	itt	eq
 801c6ac:	0080      	lsleq	r0, r0, #2
 801c6ae:	3302      	addeq	r3, #2
 801c6b0:	2800      	cmp	r0, #0
 801c6b2:	db05      	blt.n	801c6c0 <__hi0bits+0x38>
 801c6b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c6b8:	f103 0301 	add.w	r3, r3, #1
 801c6bc:	bf08      	it	eq
 801c6be:	2320      	moveq	r3, #32
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	4770      	bx	lr
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	e7e4      	b.n	801c692 <__hi0bits+0xa>

0801c6c8 <__lo0bits>:
 801c6c8:	6803      	ldr	r3, [r0, #0]
 801c6ca:	f013 0207 	ands.w	r2, r3, #7
 801c6ce:	d00c      	beq.n	801c6ea <__lo0bits+0x22>
 801c6d0:	07d9      	lsls	r1, r3, #31
 801c6d2:	d422      	bmi.n	801c71a <__lo0bits+0x52>
 801c6d4:	079a      	lsls	r2, r3, #30
 801c6d6:	bf49      	itett	mi
 801c6d8:	085b      	lsrmi	r3, r3, #1
 801c6da:	089b      	lsrpl	r3, r3, #2
 801c6dc:	6003      	strmi	r3, [r0, #0]
 801c6de:	2201      	movmi	r2, #1
 801c6e0:	bf5c      	itt	pl
 801c6e2:	6003      	strpl	r3, [r0, #0]
 801c6e4:	2202      	movpl	r2, #2
 801c6e6:	4610      	mov	r0, r2
 801c6e8:	4770      	bx	lr
 801c6ea:	b299      	uxth	r1, r3
 801c6ec:	b909      	cbnz	r1, 801c6f2 <__lo0bits+0x2a>
 801c6ee:	0c1b      	lsrs	r3, r3, #16
 801c6f0:	2210      	movs	r2, #16
 801c6f2:	b2d9      	uxtb	r1, r3
 801c6f4:	b909      	cbnz	r1, 801c6fa <__lo0bits+0x32>
 801c6f6:	3208      	adds	r2, #8
 801c6f8:	0a1b      	lsrs	r3, r3, #8
 801c6fa:	0719      	lsls	r1, r3, #28
 801c6fc:	bf04      	itt	eq
 801c6fe:	091b      	lsreq	r3, r3, #4
 801c700:	3204      	addeq	r2, #4
 801c702:	0799      	lsls	r1, r3, #30
 801c704:	bf04      	itt	eq
 801c706:	089b      	lsreq	r3, r3, #2
 801c708:	3202      	addeq	r2, #2
 801c70a:	07d9      	lsls	r1, r3, #31
 801c70c:	d403      	bmi.n	801c716 <__lo0bits+0x4e>
 801c70e:	085b      	lsrs	r3, r3, #1
 801c710:	f102 0201 	add.w	r2, r2, #1
 801c714:	d003      	beq.n	801c71e <__lo0bits+0x56>
 801c716:	6003      	str	r3, [r0, #0]
 801c718:	e7e5      	b.n	801c6e6 <__lo0bits+0x1e>
 801c71a:	2200      	movs	r2, #0
 801c71c:	e7e3      	b.n	801c6e6 <__lo0bits+0x1e>
 801c71e:	2220      	movs	r2, #32
 801c720:	e7e1      	b.n	801c6e6 <__lo0bits+0x1e>
	...

0801c724 <__i2b>:
 801c724:	b510      	push	{r4, lr}
 801c726:	460c      	mov	r4, r1
 801c728:	2101      	movs	r1, #1
 801c72a:	f7ff ff05 	bl	801c538 <_Balloc>
 801c72e:	4602      	mov	r2, r0
 801c730:	b928      	cbnz	r0, 801c73e <__i2b+0x1a>
 801c732:	4b05      	ldr	r3, [pc, #20]	; (801c748 <__i2b+0x24>)
 801c734:	4805      	ldr	r0, [pc, #20]	; (801c74c <__i2b+0x28>)
 801c736:	f240 1145 	movw	r1, #325	; 0x145
 801c73a:	f7fe ffeb 	bl	801b714 <__assert_func>
 801c73e:	2301      	movs	r3, #1
 801c740:	6144      	str	r4, [r0, #20]
 801c742:	6103      	str	r3, [r0, #16]
 801c744:	bd10      	pop	{r4, pc}
 801c746:	bf00      	nop
 801c748:	08021133 	.word	0x08021133
 801c74c:	08021144 	.word	0x08021144

0801c750 <__multiply>:
 801c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c754:	4691      	mov	r9, r2
 801c756:	690a      	ldr	r2, [r1, #16]
 801c758:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c75c:	429a      	cmp	r2, r3
 801c75e:	bfb8      	it	lt
 801c760:	460b      	movlt	r3, r1
 801c762:	460c      	mov	r4, r1
 801c764:	bfbc      	itt	lt
 801c766:	464c      	movlt	r4, r9
 801c768:	4699      	movlt	r9, r3
 801c76a:	6927      	ldr	r7, [r4, #16]
 801c76c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c770:	68a3      	ldr	r3, [r4, #8]
 801c772:	6861      	ldr	r1, [r4, #4]
 801c774:	eb07 060a 	add.w	r6, r7, sl
 801c778:	42b3      	cmp	r3, r6
 801c77a:	b085      	sub	sp, #20
 801c77c:	bfb8      	it	lt
 801c77e:	3101      	addlt	r1, #1
 801c780:	f7ff feda 	bl	801c538 <_Balloc>
 801c784:	b930      	cbnz	r0, 801c794 <__multiply+0x44>
 801c786:	4602      	mov	r2, r0
 801c788:	4b44      	ldr	r3, [pc, #272]	; (801c89c <__multiply+0x14c>)
 801c78a:	4845      	ldr	r0, [pc, #276]	; (801c8a0 <__multiply+0x150>)
 801c78c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801c790:	f7fe ffc0 	bl	801b714 <__assert_func>
 801c794:	f100 0514 	add.w	r5, r0, #20
 801c798:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c79c:	462b      	mov	r3, r5
 801c79e:	2200      	movs	r2, #0
 801c7a0:	4543      	cmp	r3, r8
 801c7a2:	d321      	bcc.n	801c7e8 <__multiply+0x98>
 801c7a4:	f104 0314 	add.w	r3, r4, #20
 801c7a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c7ac:	f109 0314 	add.w	r3, r9, #20
 801c7b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c7b4:	9202      	str	r2, [sp, #8]
 801c7b6:	1b3a      	subs	r2, r7, r4
 801c7b8:	3a15      	subs	r2, #21
 801c7ba:	f022 0203 	bic.w	r2, r2, #3
 801c7be:	3204      	adds	r2, #4
 801c7c0:	f104 0115 	add.w	r1, r4, #21
 801c7c4:	428f      	cmp	r7, r1
 801c7c6:	bf38      	it	cc
 801c7c8:	2204      	movcc	r2, #4
 801c7ca:	9201      	str	r2, [sp, #4]
 801c7cc:	9a02      	ldr	r2, [sp, #8]
 801c7ce:	9303      	str	r3, [sp, #12]
 801c7d0:	429a      	cmp	r2, r3
 801c7d2:	d80c      	bhi.n	801c7ee <__multiply+0x9e>
 801c7d4:	2e00      	cmp	r6, #0
 801c7d6:	dd03      	ble.n	801c7e0 <__multiply+0x90>
 801c7d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d05b      	beq.n	801c898 <__multiply+0x148>
 801c7e0:	6106      	str	r6, [r0, #16]
 801c7e2:	b005      	add	sp, #20
 801c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7e8:	f843 2b04 	str.w	r2, [r3], #4
 801c7ec:	e7d8      	b.n	801c7a0 <__multiply+0x50>
 801c7ee:	f8b3 a000 	ldrh.w	sl, [r3]
 801c7f2:	f1ba 0f00 	cmp.w	sl, #0
 801c7f6:	d024      	beq.n	801c842 <__multiply+0xf2>
 801c7f8:	f104 0e14 	add.w	lr, r4, #20
 801c7fc:	46a9      	mov	r9, r5
 801c7fe:	f04f 0c00 	mov.w	ip, #0
 801c802:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c806:	f8d9 1000 	ldr.w	r1, [r9]
 801c80a:	fa1f fb82 	uxth.w	fp, r2
 801c80e:	b289      	uxth	r1, r1
 801c810:	fb0a 110b 	mla	r1, sl, fp, r1
 801c814:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c818:	f8d9 2000 	ldr.w	r2, [r9]
 801c81c:	4461      	add	r1, ip
 801c81e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c822:	fb0a c20b 	mla	r2, sl, fp, ip
 801c826:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c82a:	b289      	uxth	r1, r1
 801c82c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c830:	4577      	cmp	r7, lr
 801c832:	f849 1b04 	str.w	r1, [r9], #4
 801c836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c83a:	d8e2      	bhi.n	801c802 <__multiply+0xb2>
 801c83c:	9a01      	ldr	r2, [sp, #4]
 801c83e:	f845 c002 	str.w	ip, [r5, r2]
 801c842:	9a03      	ldr	r2, [sp, #12]
 801c844:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c848:	3304      	adds	r3, #4
 801c84a:	f1b9 0f00 	cmp.w	r9, #0
 801c84e:	d021      	beq.n	801c894 <__multiply+0x144>
 801c850:	6829      	ldr	r1, [r5, #0]
 801c852:	f104 0c14 	add.w	ip, r4, #20
 801c856:	46ae      	mov	lr, r5
 801c858:	f04f 0a00 	mov.w	sl, #0
 801c85c:	f8bc b000 	ldrh.w	fp, [ip]
 801c860:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c864:	fb09 220b 	mla	r2, r9, fp, r2
 801c868:	4452      	add	r2, sl
 801c86a:	b289      	uxth	r1, r1
 801c86c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c870:	f84e 1b04 	str.w	r1, [lr], #4
 801c874:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c878:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c87c:	f8be 1000 	ldrh.w	r1, [lr]
 801c880:	fb09 110a 	mla	r1, r9, sl, r1
 801c884:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801c888:	4567      	cmp	r7, ip
 801c88a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c88e:	d8e5      	bhi.n	801c85c <__multiply+0x10c>
 801c890:	9a01      	ldr	r2, [sp, #4]
 801c892:	50a9      	str	r1, [r5, r2]
 801c894:	3504      	adds	r5, #4
 801c896:	e799      	b.n	801c7cc <__multiply+0x7c>
 801c898:	3e01      	subs	r6, #1
 801c89a:	e79b      	b.n	801c7d4 <__multiply+0x84>
 801c89c:	08021133 	.word	0x08021133
 801c8a0:	08021144 	.word	0x08021144

0801c8a4 <__pow5mult>:
 801c8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c8a8:	4615      	mov	r5, r2
 801c8aa:	f012 0203 	ands.w	r2, r2, #3
 801c8ae:	4606      	mov	r6, r0
 801c8b0:	460f      	mov	r7, r1
 801c8b2:	d007      	beq.n	801c8c4 <__pow5mult+0x20>
 801c8b4:	4c25      	ldr	r4, [pc, #148]	; (801c94c <__pow5mult+0xa8>)
 801c8b6:	3a01      	subs	r2, #1
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c8be:	f7ff fe9d 	bl	801c5fc <__multadd>
 801c8c2:	4607      	mov	r7, r0
 801c8c4:	10ad      	asrs	r5, r5, #2
 801c8c6:	d03d      	beq.n	801c944 <__pow5mult+0xa0>
 801c8c8:	69f4      	ldr	r4, [r6, #28]
 801c8ca:	b97c      	cbnz	r4, 801c8ec <__pow5mult+0x48>
 801c8cc:	2010      	movs	r0, #16
 801c8ce:	f7ff fd7f 	bl	801c3d0 <malloc>
 801c8d2:	4602      	mov	r2, r0
 801c8d4:	61f0      	str	r0, [r6, #28]
 801c8d6:	b928      	cbnz	r0, 801c8e4 <__pow5mult+0x40>
 801c8d8:	4b1d      	ldr	r3, [pc, #116]	; (801c950 <__pow5mult+0xac>)
 801c8da:	481e      	ldr	r0, [pc, #120]	; (801c954 <__pow5mult+0xb0>)
 801c8dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 801c8e0:	f7fe ff18 	bl	801b714 <__assert_func>
 801c8e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c8e8:	6004      	str	r4, [r0, #0]
 801c8ea:	60c4      	str	r4, [r0, #12]
 801c8ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801c8f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c8f4:	b94c      	cbnz	r4, 801c90a <__pow5mult+0x66>
 801c8f6:	f240 2171 	movw	r1, #625	; 0x271
 801c8fa:	4630      	mov	r0, r6
 801c8fc:	f7ff ff12 	bl	801c724 <__i2b>
 801c900:	2300      	movs	r3, #0
 801c902:	f8c8 0008 	str.w	r0, [r8, #8]
 801c906:	4604      	mov	r4, r0
 801c908:	6003      	str	r3, [r0, #0]
 801c90a:	f04f 0900 	mov.w	r9, #0
 801c90e:	07eb      	lsls	r3, r5, #31
 801c910:	d50a      	bpl.n	801c928 <__pow5mult+0x84>
 801c912:	4639      	mov	r1, r7
 801c914:	4622      	mov	r2, r4
 801c916:	4630      	mov	r0, r6
 801c918:	f7ff ff1a 	bl	801c750 <__multiply>
 801c91c:	4639      	mov	r1, r7
 801c91e:	4680      	mov	r8, r0
 801c920:	4630      	mov	r0, r6
 801c922:	f7ff fe49 	bl	801c5b8 <_Bfree>
 801c926:	4647      	mov	r7, r8
 801c928:	106d      	asrs	r5, r5, #1
 801c92a:	d00b      	beq.n	801c944 <__pow5mult+0xa0>
 801c92c:	6820      	ldr	r0, [r4, #0]
 801c92e:	b938      	cbnz	r0, 801c940 <__pow5mult+0x9c>
 801c930:	4622      	mov	r2, r4
 801c932:	4621      	mov	r1, r4
 801c934:	4630      	mov	r0, r6
 801c936:	f7ff ff0b 	bl	801c750 <__multiply>
 801c93a:	6020      	str	r0, [r4, #0]
 801c93c:	f8c0 9000 	str.w	r9, [r0]
 801c940:	4604      	mov	r4, r0
 801c942:	e7e4      	b.n	801c90e <__pow5mult+0x6a>
 801c944:	4638      	mov	r0, r7
 801c946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c94a:	bf00      	nop
 801c94c:	08021290 	.word	0x08021290
 801c950:	08020eee 	.word	0x08020eee
 801c954:	08021144 	.word	0x08021144

0801c958 <__lshift>:
 801c958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c95c:	460c      	mov	r4, r1
 801c95e:	6849      	ldr	r1, [r1, #4]
 801c960:	6923      	ldr	r3, [r4, #16]
 801c962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c966:	68a3      	ldr	r3, [r4, #8]
 801c968:	4607      	mov	r7, r0
 801c96a:	4691      	mov	r9, r2
 801c96c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c970:	f108 0601 	add.w	r6, r8, #1
 801c974:	42b3      	cmp	r3, r6
 801c976:	db0b      	blt.n	801c990 <__lshift+0x38>
 801c978:	4638      	mov	r0, r7
 801c97a:	f7ff fddd 	bl	801c538 <_Balloc>
 801c97e:	4605      	mov	r5, r0
 801c980:	b948      	cbnz	r0, 801c996 <__lshift+0x3e>
 801c982:	4602      	mov	r2, r0
 801c984:	4b28      	ldr	r3, [pc, #160]	; (801ca28 <__lshift+0xd0>)
 801c986:	4829      	ldr	r0, [pc, #164]	; (801ca2c <__lshift+0xd4>)
 801c988:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c98c:	f7fe fec2 	bl	801b714 <__assert_func>
 801c990:	3101      	adds	r1, #1
 801c992:	005b      	lsls	r3, r3, #1
 801c994:	e7ee      	b.n	801c974 <__lshift+0x1c>
 801c996:	2300      	movs	r3, #0
 801c998:	f100 0114 	add.w	r1, r0, #20
 801c99c:	f100 0210 	add.w	r2, r0, #16
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	4553      	cmp	r3, sl
 801c9a4:	db33      	blt.n	801ca0e <__lshift+0xb6>
 801c9a6:	6920      	ldr	r0, [r4, #16]
 801c9a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c9ac:	f104 0314 	add.w	r3, r4, #20
 801c9b0:	f019 091f 	ands.w	r9, r9, #31
 801c9b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c9b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c9bc:	d02b      	beq.n	801ca16 <__lshift+0xbe>
 801c9be:	f1c9 0e20 	rsb	lr, r9, #32
 801c9c2:	468a      	mov	sl, r1
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	6818      	ldr	r0, [r3, #0]
 801c9c8:	fa00 f009 	lsl.w	r0, r0, r9
 801c9cc:	4310      	orrs	r0, r2
 801c9ce:	f84a 0b04 	str.w	r0, [sl], #4
 801c9d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c9d6:	459c      	cmp	ip, r3
 801c9d8:	fa22 f20e 	lsr.w	r2, r2, lr
 801c9dc:	d8f3      	bhi.n	801c9c6 <__lshift+0x6e>
 801c9de:	ebac 0304 	sub.w	r3, ip, r4
 801c9e2:	3b15      	subs	r3, #21
 801c9e4:	f023 0303 	bic.w	r3, r3, #3
 801c9e8:	3304      	adds	r3, #4
 801c9ea:	f104 0015 	add.w	r0, r4, #21
 801c9ee:	4584      	cmp	ip, r0
 801c9f0:	bf38      	it	cc
 801c9f2:	2304      	movcc	r3, #4
 801c9f4:	50ca      	str	r2, [r1, r3]
 801c9f6:	b10a      	cbz	r2, 801c9fc <__lshift+0xa4>
 801c9f8:	f108 0602 	add.w	r6, r8, #2
 801c9fc:	3e01      	subs	r6, #1
 801c9fe:	4638      	mov	r0, r7
 801ca00:	612e      	str	r6, [r5, #16]
 801ca02:	4621      	mov	r1, r4
 801ca04:	f7ff fdd8 	bl	801c5b8 <_Bfree>
 801ca08:	4628      	mov	r0, r5
 801ca0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca0e:	f842 0f04 	str.w	r0, [r2, #4]!
 801ca12:	3301      	adds	r3, #1
 801ca14:	e7c5      	b.n	801c9a2 <__lshift+0x4a>
 801ca16:	3904      	subs	r1, #4
 801ca18:	f853 2b04 	ldr.w	r2, [r3], #4
 801ca1c:	f841 2f04 	str.w	r2, [r1, #4]!
 801ca20:	459c      	cmp	ip, r3
 801ca22:	d8f9      	bhi.n	801ca18 <__lshift+0xc0>
 801ca24:	e7ea      	b.n	801c9fc <__lshift+0xa4>
 801ca26:	bf00      	nop
 801ca28:	08021133 	.word	0x08021133
 801ca2c:	08021144 	.word	0x08021144

0801ca30 <__mcmp>:
 801ca30:	b530      	push	{r4, r5, lr}
 801ca32:	6902      	ldr	r2, [r0, #16]
 801ca34:	690c      	ldr	r4, [r1, #16]
 801ca36:	1b12      	subs	r2, r2, r4
 801ca38:	d10e      	bne.n	801ca58 <__mcmp+0x28>
 801ca3a:	f100 0314 	add.w	r3, r0, #20
 801ca3e:	3114      	adds	r1, #20
 801ca40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ca44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ca48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ca4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ca50:	42a5      	cmp	r5, r4
 801ca52:	d003      	beq.n	801ca5c <__mcmp+0x2c>
 801ca54:	d305      	bcc.n	801ca62 <__mcmp+0x32>
 801ca56:	2201      	movs	r2, #1
 801ca58:	4610      	mov	r0, r2
 801ca5a:	bd30      	pop	{r4, r5, pc}
 801ca5c:	4283      	cmp	r3, r0
 801ca5e:	d3f3      	bcc.n	801ca48 <__mcmp+0x18>
 801ca60:	e7fa      	b.n	801ca58 <__mcmp+0x28>
 801ca62:	f04f 32ff 	mov.w	r2, #4294967295
 801ca66:	e7f7      	b.n	801ca58 <__mcmp+0x28>

0801ca68 <__mdiff>:
 801ca68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca6c:	460c      	mov	r4, r1
 801ca6e:	4606      	mov	r6, r0
 801ca70:	4611      	mov	r1, r2
 801ca72:	4620      	mov	r0, r4
 801ca74:	4690      	mov	r8, r2
 801ca76:	f7ff ffdb 	bl	801ca30 <__mcmp>
 801ca7a:	1e05      	subs	r5, r0, #0
 801ca7c:	d110      	bne.n	801caa0 <__mdiff+0x38>
 801ca7e:	4629      	mov	r1, r5
 801ca80:	4630      	mov	r0, r6
 801ca82:	f7ff fd59 	bl	801c538 <_Balloc>
 801ca86:	b930      	cbnz	r0, 801ca96 <__mdiff+0x2e>
 801ca88:	4b3a      	ldr	r3, [pc, #232]	; (801cb74 <__mdiff+0x10c>)
 801ca8a:	4602      	mov	r2, r0
 801ca8c:	f240 2137 	movw	r1, #567	; 0x237
 801ca90:	4839      	ldr	r0, [pc, #228]	; (801cb78 <__mdiff+0x110>)
 801ca92:	f7fe fe3f 	bl	801b714 <__assert_func>
 801ca96:	2301      	movs	r3, #1
 801ca98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ca9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801caa0:	bfa4      	itt	ge
 801caa2:	4643      	movge	r3, r8
 801caa4:	46a0      	movge	r8, r4
 801caa6:	4630      	mov	r0, r6
 801caa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801caac:	bfa6      	itte	ge
 801caae:	461c      	movge	r4, r3
 801cab0:	2500      	movge	r5, #0
 801cab2:	2501      	movlt	r5, #1
 801cab4:	f7ff fd40 	bl	801c538 <_Balloc>
 801cab8:	b920      	cbnz	r0, 801cac4 <__mdiff+0x5c>
 801caba:	4b2e      	ldr	r3, [pc, #184]	; (801cb74 <__mdiff+0x10c>)
 801cabc:	4602      	mov	r2, r0
 801cabe:	f240 2145 	movw	r1, #581	; 0x245
 801cac2:	e7e5      	b.n	801ca90 <__mdiff+0x28>
 801cac4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cac8:	6926      	ldr	r6, [r4, #16]
 801caca:	60c5      	str	r5, [r0, #12]
 801cacc:	f104 0914 	add.w	r9, r4, #20
 801cad0:	f108 0514 	add.w	r5, r8, #20
 801cad4:	f100 0e14 	add.w	lr, r0, #20
 801cad8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cadc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cae0:	f108 0210 	add.w	r2, r8, #16
 801cae4:	46f2      	mov	sl, lr
 801cae6:	2100      	movs	r1, #0
 801cae8:	f859 3b04 	ldr.w	r3, [r9], #4
 801caec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801caf0:	fa11 f88b 	uxtah	r8, r1, fp
 801caf4:	b299      	uxth	r1, r3
 801caf6:	0c1b      	lsrs	r3, r3, #16
 801caf8:	eba8 0801 	sub.w	r8, r8, r1
 801cafc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cb00:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cb04:	fa1f f888 	uxth.w	r8, r8
 801cb08:	1419      	asrs	r1, r3, #16
 801cb0a:	454e      	cmp	r6, r9
 801cb0c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cb10:	f84a 3b04 	str.w	r3, [sl], #4
 801cb14:	d8e8      	bhi.n	801cae8 <__mdiff+0x80>
 801cb16:	1b33      	subs	r3, r6, r4
 801cb18:	3b15      	subs	r3, #21
 801cb1a:	f023 0303 	bic.w	r3, r3, #3
 801cb1e:	3304      	adds	r3, #4
 801cb20:	3415      	adds	r4, #21
 801cb22:	42a6      	cmp	r6, r4
 801cb24:	bf38      	it	cc
 801cb26:	2304      	movcc	r3, #4
 801cb28:	441d      	add	r5, r3
 801cb2a:	4473      	add	r3, lr
 801cb2c:	469e      	mov	lr, r3
 801cb2e:	462e      	mov	r6, r5
 801cb30:	4566      	cmp	r6, ip
 801cb32:	d30e      	bcc.n	801cb52 <__mdiff+0xea>
 801cb34:	f10c 0203 	add.w	r2, ip, #3
 801cb38:	1b52      	subs	r2, r2, r5
 801cb3a:	f022 0203 	bic.w	r2, r2, #3
 801cb3e:	3d03      	subs	r5, #3
 801cb40:	45ac      	cmp	ip, r5
 801cb42:	bf38      	it	cc
 801cb44:	2200      	movcc	r2, #0
 801cb46:	4413      	add	r3, r2
 801cb48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801cb4c:	b17a      	cbz	r2, 801cb6e <__mdiff+0x106>
 801cb4e:	6107      	str	r7, [r0, #16]
 801cb50:	e7a4      	b.n	801ca9c <__mdiff+0x34>
 801cb52:	f856 8b04 	ldr.w	r8, [r6], #4
 801cb56:	fa11 f288 	uxtah	r2, r1, r8
 801cb5a:	1414      	asrs	r4, r2, #16
 801cb5c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cb60:	b292      	uxth	r2, r2
 801cb62:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cb66:	f84e 2b04 	str.w	r2, [lr], #4
 801cb6a:	1421      	asrs	r1, r4, #16
 801cb6c:	e7e0      	b.n	801cb30 <__mdiff+0xc8>
 801cb6e:	3f01      	subs	r7, #1
 801cb70:	e7ea      	b.n	801cb48 <__mdiff+0xe0>
 801cb72:	bf00      	nop
 801cb74:	08021133 	.word	0x08021133
 801cb78:	08021144 	.word	0x08021144

0801cb7c <__d2b>:
 801cb7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cb80:	460f      	mov	r7, r1
 801cb82:	2101      	movs	r1, #1
 801cb84:	ec59 8b10 	vmov	r8, r9, d0
 801cb88:	4616      	mov	r6, r2
 801cb8a:	f7ff fcd5 	bl	801c538 <_Balloc>
 801cb8e:	4604      	mov	r4, r0
 801cb90:	b930      	cbnz	r0, 801cba0 <__d2b+0x24>
 801cb92:	4602      	mov	r2, r0
 801cb94:	4b24      	ldr	r3, [pc, #144]	; (801cc28 <__d2b+0xac>)
 801cb96:	4825      	ldr	r0, [pc, #148]	; (801cc2c <__d2b+0xb0>)
 801cb98:	f240 310f 	movw	r1, #783	; 0x30f
 801cb9c:	f7fe fdba 	bl	801b714 <__assert_func>
 801cba0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801cba4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cba8:	bb2d      	cbnz	r5, 801cbf6 <__d2b+0x7a>
 801cbaa:	9301      	str	r3, [sp, #4]
 801cbac:	f1b8 0300 	subs.w	r3, r8, #0
 801cbb0:	d026      	beq.n	801cc00 <__d2b+0x84>
 801cbb2:	4668      	mov	r0, sp
 801cbb4:	9300      	str	r3, [sp, #0]
 801cbb6:	f7ff fd87 	bl	801c6c8 <__lo0bits>
 801cbba:	e9dd 1200 	ldrd	r1, r2, [sp]
 801cbbe:	b1e8      	cbz	r0, 801cbfc <__d2b+0x80>
 801cbc0:	f1c0 0320 	rsb	r3, r0, #32
 801cbc4:	fa02 f303 	lsl.w	r3, r2, r3
 801cbc8:	430b      	orrs	r3, r1
 801cbca:	40c2      	lsrs	r2, r0
 801cbcc:	6163      	str	r3, [r4, #20]
 801cbce:	9201      	str	r2, [sp, #4]
 801cbd0:	9b01      	ldr	r3, [sp, #4]
 801cbd2:	61a3      	str	r3, [r4, #24]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	bf14      	ite	ne
 801cbd8:	2202      	movne	r2, #2
 801cbda:	2201      	moveq	r2, #1
 801cbdc:	6122      	str	r2, [r4, #16]
 801cbde:	b1bd      	cbz	r5, 801cc10 <__d2b+0x94>
 801cbe0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cbe4:	4405      	add	r5, r0
 801cbe6:	603d      	str	r5, [r7, #0]
 801cbe8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cbec:	6030      	str	r0, [r6, #0]
 801cbee:	4620      	mov	r0, r4
 801cbf0:	b003      	add	sp, #12
 801cbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cbf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cbfa:	e7d6      	b.n	801cbaa <__d2b+0x2e>
 801cbfc:	6161      	str	r1, [r4, #20]
 801cbfe:	e7e7      	b.n	801cbd0 <__d2b+0x54>
 801cc00:	a801      	add	r0, sp, #4
 801cc02:	f7ff fd61 	bl	801c6c8 <__lo0bits>
 801cc06:	9b01      	ldr	r3, [sp, #4]
 801cc08:	6163      	str	r3, [r4, #20]
 801cc0a:	3020      	adds	r0, #32
 801cc0c:	2201      	movs	r2, #1
 801cc0e:	e7e5      	b.n	801cbdc <__d2b+0x60>
 801cc10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cc14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cc18:	6038      	str	r0, [r7, #0]
 801cc1a:	6918      	ldr	r0, [r3, #16]
 801cc1c:	f7ff fd34 	bl	801c688 <__hi0bits>
 801cc20:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cc24:	e7e2      	b.n	801cbec <__d2b+0x70>
 801cc26:	bf00      	nop
 801cc28:	08021133 	.word	0x08021133
 801cc2c:	08021144 	.word	0x08021144

0801cc30 <__ssputs_r>:
 801cc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc34:	688e      	ldr	r6, [r1, #8]
 801cc36:	461f      	mov	r7, r3
 801cc38:	42be      	cmp	r6, r7
 801cc3a:	680b      	ldr	r3, [r1, #0]
 801cc3c:	4682      	mov	sl, r0
 801cc3e:	460c      	mov	r4, r1
 801cc40:	4690      	mov	r8, r2
 801cc42:	d82c      	bhi.n	801cc9e <__ssputs_r+0x6e>
 801cc44:	898a      	ldrh	r2, [r1, #12]
 801cc46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cc4a:	d026      	beq.n	801cc9a <__ssputs_r+0x6a>
 801cc4c:	6965      	ldr	r5, [r4, #20]
 801cc4e:	6909      	ldr	r1, [r1, #16]
 801cc50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc54:	eba3 0901 	sub.w	r9, r3, r1
 801cc58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cc5c:	1c7b      	adds	r3, r7, #1
 801cc5e:	444b      	add	r3, r9
 801cc60:	106d      	asrs	r5, r5, #1
 801cc62:	429d      	cmp	r5, r3
 801cc64:	bf38      	it	cc
 801cc66:	461d      	movcc	r5, r3
 801cc68:	0553      	lsls	r3, r2, #21
 801cc6a:	d527      	bpl.n	801ccbc <__ssputs_r+0x8c>
 801cc6c:	4629      	mov	r1, r5
 801cc6e:	f7ff fbd7 	bl	801c420 <_malloc_r>
 801cc72:	4606      	mov	r6, r0
 801cc74:	b360      	cbz	r0, 801ccd0 <__ssputs_r+0xa0>
 801cc76:	6921      	ldr	r1, [r4, #16]
 801cc78:	464a      	mov	r2, r9
 801cc7a:	f7fe fd3c 	bl	801b6f6 <memcpy>
 801cc7e:	89a3      	ldrh	r3, [r4, #12]
 801cc80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cc84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc88:	81a3      	strh	r3, [r4, #12]
 801cc8a:	6126      	str	r6, [r4, #16]
 801cc8c:	6165      	str	r5, [r4, #20]
 801cc8e:	444e      	add	r6, r9
 801cc90:	eba5 0509 	sub.w	r5, r5, r9
 801cc94:	6026      	str	r6, [r4, #0]
 801cc96:	60a5      	str	r5, [r4, #8]
 801cc98:	463e      	mov	r6, r7
 801cc9a:	42be      	cmp	r6, r7
 801cc9c:	d900      	bls.n	801cca0 <__ssputs_r+0x70>
 801cc9e:	463e      	mov	r6, r7
 801cca0:	6820      	ldr	r0, [r4, #0]
 801cca2:	4632      	mov	r2, r6
 801cca4:	4641      	mov	r1, r8
 801cca6:	f7fe fc79 	bl	801b59c <memmove>
 801ccaa:	68a3      	ldr	r3, [r4, #8]
 801ccac:	1b9b      	subs	r3, r3, r6
 801ccae:	60a3      	str	r3, [r4, #8]
 801ccb0:	6823      	ldr	r3, [r4, #0]
 801ccb2:	4433      	add	r3, r6
 801ccb4:	6023      	str	r3, [r4, #0]
 801ccb6:	2000      	movs	r0, #0
 801ccb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccbc:	462a      	mov	r2, r5
 801ccbe:	f000 fbd6 	bl	801d46e <_realloc_r>
 801ccc2:	4606      	mov	r6, r0
 801ccc4:	2800      	cmp	r0, #0
 801ccc6:	d1e0      	bne.n	801cc8a <__ssputs_r+0x5a>
 801ccc8:	6921      	ldr	r1, [r4, #16]
 801ccca:	4650      	mov	r0, sl
 801cccc:	f7ff fb34 	bl	801c338 <_free_r>
 801ccd0:	230c      	movs	r3, #12
 801ccd2:	f8ca 3000 	str.w	r3, [sl]
 801ccd6:	89a3      	ldrh	r3, [r4, #12]
 801ccd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccdc:	81a3      	strh	r3, [r4, #12]
 801ccde:	f04f 30ff 	mov.w	r0, #4294967295
 801cce2:	e7e9      	b.n	801ccb8 <__ssputs_r+0x88>

0801cce4 <_svfiprintf_r>:
 801cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cce8:	4698      	mov	r8, r3
 801ccea:	898b      	ldrh	r3, [r1, #12]
 801ccec:	061b      	lsls	r3, r3, #24
 801ccee:	b09d      	sub	sp, #116	; 0x74
 801ccf0:	4607      	mov	r7, r0
 801ccf2:	460d      	mov	r5, r1
 801ccf4:	4614      	mov	r4, r2
 801ccf6:	d50e      	bpl.n	801cd16 <_svfiprintf_r+0x32>
 801ccf8:	690b      	ldr	r3, [r1, #16]
 801ccfa:	b963      	cbnz	r3, 801cd16 <_svfiprintf_r+0x32>
 801ccfc:	2140      	movs	r1, #64	; 0x40
 801ccfe:	f7ff fb8f 	bl	801c420 <_malloc_r>
 801cd02:	6028      	str	r0, [r5, #0]
 801cd04:	6128      	str	r0, [r5, #16]
 801cd06:	b920      	cbnz	r0, 801cd12 <_svfiprintf_r+0x2e>
 801cd08:	230c      	movs	r3, #12
 801cd0a:	603b      	str	r3, [r7, #0]
 801cd0c:	f04f 30ff 	mov.w	r0, #4294967295
 801cd10:	e0d0      	b.n	801ceb4 <_svfiprintf_r+0x1d0>
 801cd12:	2340      	movs	r3, #64	; 0x40
 801cd14:	616b      	str	r3, [r5, #20]
 801cd16:	2300      	movs	r3, #0
 801cd18:	9309      	str	r3, [sp, #36]	; 0x24
 801cd1a:	2320      	movs	r3, #32
 801cd1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cd20:	f8cd 800c 	str.w	r8, [sp, #12]
 801cd24:	2330      	movs	r3, #48	; 0x30
 801cd26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801cecc <_svfiprintf_r+0x1e8>
 801cd2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cd2e:	f04f 0901 	mov.w	r9, #1
 801cd32:	4623      	mov	r3, r4
 801cd34:	469a      	mov	sl, r3
 801cd36:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd3a:	b10a      	cbz	r2, 801cd40 <_svfiprintf_r+0x5c>
 801cd3c:	2a25      	cmp	r2, #37	; 0x25
 801cd3e:	d1f9      	bne.n	801cd34 <_svfiprintf_r+0x50>
 801cd40:	ebba 0b04 	subs.w	fp, sl, r4
 801cd44:	d00b      	beq.n	801cd5e <_svfiprintf_r+0x7a>
 801cd46:	465b      	mov	r3, fp
 801cd48:	4622      	mov	r2, r4
 801cd4a:	4629      	mov	r1, r5
 801cd4c:	4638      	mov	r0, r7
 801cd4e:	f7ff ff6f 	bl	801cc30 <__ssputs_r>
 801cd52:	3001      	adds	r0, #1
 801cd54:	f000 80a9 	beq.w	801ceaa <_svfiprintf_r+0x1c6>
 801cd58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd5a:	445a      	add	r2, fp
 801cd5c:	9209      	str	r2, [sp, #36]	; 0x24
 801cd5e:	f89a 3000 	ldrb.w	r3, [sl]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	f000 80a1 	beq.w	801ceaa <_svfiprintf_r+0x1c6>
 801cd68:	2300      	movs	r3, #0
 801cd6a:	f04f 32ff 	mov.w	r2, #4294967295
 801cd6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd72:	f10a 0a01 	add.w	sl, sl, #1
 801cd76:	9304      	str	r3, [sp, #16]
 801cd78:	9307      	str	r3, [sp, #28]
 801cd7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cd7e:	931a      	str	r3, [sp, #104]	; 0x68
 801cd80:	4654      	mov	r4, sl
 801cd82:	2205      	movs	r2, #5
 801cd84:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd88:	4850      	ldr	r0, [pc, #320]	; (801cecc <_svfiprintf_r+0x1e8>)
 801cd8a:	f7e5 f949 	bl	8002020 <memchr>
 801cd8e:	9a04      	ldr	r2, [sp, #16]
 801cd90:	b9d8      	cbnz	r0, 801cdca <_svfiprintf_r+0xe6>
 801cd92:	06d0      	lsls	r0, r2, #27
 801cd94:	bf44      	itt	mi
 801cd96:	2320      	movmi	r3, #32
 801cd98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd9c:	0711      	lsls	r1, r2, #28
 801cd9e:	bf44      	itt	mi
 801cda0:	232b      	movmi	r3, #43	; 0x2b
 801cda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cda6:	f89a 3000 	ldrb.w	r3, [sl]
 801cdaa:	2b2a      	cmp	r3, #42	; 0x2a
 801cdac:	d015      	beq.n	801cdda <_svfiprintf_r+0xf6>
 801cdae:	9a07      	ldr	r2, [sp, #28]
 801cdb0:	4654      	mov	r4, sl
 801cdb2:	2000      	movs	r0, #0
 801cdb4:	f04f 0c0a 	mov.w	ip, #10
 801cdb8:	4621      	mov	r1, r4
 801cdba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cdbe:	3b30      	subs	r3, #48	; 0x30
 801cdc0:	2b09      	cmp	r3, #9
 801cdc2:	d94d      	bls.n	801ce60 <_svfiprintf_r+0x17c>
 801cdc4:	b1b0      	cbz	r0, 801cdf4 <_svfiprintf_r+0x110>
 801cdc6:	9207      	str	r2, [sp, #28]
 801cdc8:	e014      	b.n	801cdf4 <_svfiprintf_r+0x110>
 801cdca:	eba0 0308 	sub.w	r3, r0, r8
 801cdce:	fa09 f303 	lsl.w	r3, r9, r3
 801cdd2:	4313      	orrs	r3, r2
 801cdd4:	9304      	str	r3, [sp, #16]
 801cdd6:	46a2      	mov	sl, r4
 801cdd8:	e7d2      	b.n	801cd80 <_svfiprintf_r+0x9c>
 801cdda:	9b03      	ldr	r3, [sp, #12]
 801cddc:	1d19      	adds	r1, r3, #4
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	9103      	str	r1, [sp, #12]
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	bfbb      	ittet	lt
 801cde6:	425b      	neglt	r3, r3
 801cde8:	f042 0202 	orrlt.w	r2, r2, #2
 801cdec:	9307      	strge	r3, [sp, #28]
 801cdee:	9307      	strlt	r3, [sp, #28]
 801cdf0:	bfb8      	it	lt
 801cdf2:	9204      	strlt	r2, [sp, #16]
 801cdf4:	7823      	ldrb	r3, [r4, #0]
 801cdf6:	2b2e      	cmp	r3, #46	; 0x2e
 801cdf8:	d10c      	bne.n	801ce14 <_svfiprintf_r+0x130>
 801cdfa:	7863      	ldrb	r3, [r4, #1]
 801cdfc:	2b2a      	cmp	r3, #42	; 0x2a
 801cdfe:	d134      	bne.n	801ce6a <_svfiprintf_r+0x186>
 801ce00:	9b03      	ldr	r3, [sp, #12]
 801ce02:	1d1a      	adds	r2, r3, #4
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	9203      	str	r2, [sp, #12]
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	bfb8      	it	lt
 801ce0c:	f04f 33ff 	movlt.w	r3, #4294967295
 801ce10:	3402      	adds	r4, #2
 801ce12:	9305      	str	r3, [sp, #20]
 801ce14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801cedc <_svfiprintf_r+0x1f8>
 801ce18:	7821      	ldrb	r1, [r4, #0]
 801ce1a:	2203      	movs	r2, #3
 801ce1c:	4650      	mov	r0, sl
 801ce1e:	f7e5 f8ff 	bl	8002020 <memchr>
 801ce22:	b138      	cbz	r0, 801ce34 <_svfiprintf_r+0x150>
 801ce24:	9b04      	ldr	r3, [sp, #16]
 801ce26:	eba0 000a 	sub.w	r0, r0, sl
 801ce2a:	2240      	movs	r2, #64	; 0x40
 801ce2c:	4082      	lsls	r2, r0
 801ce2e:	4313      	orrs	r3, r2
 801ce30:	3401      	adds	r4, #1
 801ce32:	9304      	str	r3, [sp, #16]
 801ce34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce38:	4825      	ldr	r0, [pc, #148]	; (801ced0 <_svfiprintf_r+0x1ec>)
 801ce3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ce3e:	2206      	movs	r2, #6
 801ce40:	f7e5 f8ee 	bl	8002020 <memchr>
 801ce44:	2800      	cmp	r0, #0
 801ce46:	d038      	beq.n	801ceba <_svfiprintf_r+0x1d6>
 801ce48:	4b22      	ldr	r3, [pc, #136]	; (801ced4 <_svfiprintf_r+0x1f0>)
 801ce4a:	bb1b      	cbnz	r3, 801ce94 <_svfiprintf_r+0x1b0>
 801ce4c:	9b03      	ldr	r3, [sp, #12]
 801ce4e:	3307      	adds	r3, #7
 801ce50:	f023 0307 	bic.w	r3, r3, #7
 801ce54:	3308      	adds	r3, #8
 801ce56:	9303      	str	r3, [sp, #12]
 801ce58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce5a:	4433      	add	r3, r6
 801ce5c:	9309      	str	r3, [sp, #36]	; 0x24
 801ce5e:	e768      	b.n	801cd32 <_svfiprintf_r+0x4e>
 801ce60:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce64:	460c      	mov	r4, r1
 801ce66:	2001      	movs	r0, #1
 801ce68:	e7a6      	b.n	801cdb8 <_svfiprintf_r+0xd4>
 801ce6a:	2300      	movs	r3, #0
 801ce6c:	3401      	adds	r4, #1
 801ce6e:	9305      	str	r3, [sp, #20]
 801ce70:	4619      	mov	r1, r3
 801ce72:	f04f 0c0a 	mov.w	ip, #10
 801ce76:	4620      	mov	r0, r4
 801ce78:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce7c:	3a30      	subs	r2, #48	; 0x30
 801ce7e:	2a09      	cmp	r2, #9
 801ce80:	d903      	bls.n	801ce8a <_svfiprintf_r+0x1a6>
 801ce82:	2b00      	cmp	r3, #0
 801ce84:	d0c6      	beq.n	801ce14 <_svfiprintf_r+0x130>
 801ce86:	9105      	str	r1, [sp, #20]
 801ce88:	e7c4      	b.n	801ce14 <_svfiprintf_r+0x130>
 801ce8a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce8e:	4604      	mov	r4, r0
 801ce90:	2301      	movs	r3, #1
 801ce92:	e7f0      	b.n	801ce76 <_svfiprintf_r+0x192>
 801ce94:	ab03      	add	r3, sp, #12
 801ce96:	9300      	str	r3, [sp, #0]
 801ce98:	462a      	mov	r2, r5
 801ce9a:	4b0f      	ldr	r3, [pc, #60]	; (801ced8 <_svfiprintf_r+0x1f4>)
 801ce9c:	a904      	add	r1, sp, #16
 801ce9e:	4638      	mov	r0, r7
 801cea0:	f7fd fd9a 	bl	801a9d8 <_printf_float>
 801cea4:	1c42      	adds	r2, r0, #1
 801cea6:	4606      	mov	r6, r0
 801cea8:	d1d6      	bne.n	801ce58 <_svfiprintf_r+0x174>
 801ceaa:	89ab      	ldrh	r3, [r5, #12]
 801ceac:	065b      	lsls	r3, r3, #25
 801ceae:	f53f af2d 	bmi.w	801cd0c <_svfiprintf_r+0x28>
 801ceb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ceb4:	b01d      	add	sp, #116	; 0x74
 801ceb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceba:	ab03      	add	r3, sp, #12
 801cebc:	9300      	str	r3, [sp, #0]
 801cebe:	462a      	mov	r2, r5
 801cec0:	4b05      	ldr	r3, [pc, #20]	; (801ced8 <_svfiprintf_r+0x1f4>)
 801cec2:	a904      	add	r1, sp, #16
 801cec4:	4638      	mov	r0, r7
 801cec6:	f7fe f80f 	bl	801aee8 <_printf_i>
 801ceca:	e7eb      	b.n	801cea4 <_svfiprintf_r+0x1c0>
 801cecc:	0802129c 	.word	0x0802129c
 801ced0:	080212a6 	.word	0x080212a6
 801ced4:	0801a9d9 	.word	0x0801a9d9
 801ced8:	0801cc31 	.word	0x0801cc31
 801cedc:	080212a2 	.word	0x080212a2

0801cee0 <__sfputc_r>:
 801cee0:	6893      	ldr	r3, [r2, #8]
 801cee2:	3b01      	subs	r3, #1
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	b410      	push	{r4}
 801cee8:	6093      	str	r3, [r2, #8]
 801ceea:	da08      	bge.n	801cefe <__sfputc_r+0x1e>
 801ceec:	6994      	ldr	r4, [r2, #24]
 801ceee:	42a3      	cmp	r3, r4
 801cef0:	db01      	blt.n	801cef6 <__sfputc_r+0x16>
 801cef2:	290a      	cmp	r1, #10
 801cef4:	d103      	bne.n	801cefe <__sfputc_r+0x1e>
 801cef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cefa:	f7fe baaa 	b.w	801b452 <__swbuf_r>
 801cefe:	6813      	ldr	r3, [r2, #0]
 801cf00:	1c58      	adds	r0, r3, #1
 801cf02:	6010      	str	r0, [r2, #0]
 801cf04:	7019      	strb	r1, [r3, #0]
 801cf06:	4608      	mov	r0, r1
 801cf08:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf0c:	4770      	bx	lr

0801cf0e <__sfputs_r>:
 801cf0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf10:	4606      	mov	r6, r0
 801cf12:	460f      	mov	r7, r1
 801cf14:	4614      	mov	r4, r2
 801cf16:	18d5      	adds	r5, r2, r3
 801cf18:	42ac      	cmp	r4, r5
 801cf1a:	d101      	bne.n	801cf20 <__sfputs_r+0x12>
 801cf1c:	2000      	movs	r0, #0
 801cf1e:	e007      	b.n	801cf30 <__sfputs_r+0x22>
 801cf20:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf24:	463a      	mov	r2, r7
 801cf26:	4630      	mov	r0, r6
 801cf28:	f7ff ffda 	bl	801cee0 <__sfputc_r>
 801cf2c:	1c43      	adds	r3, r0, #1
 801cf2e:	d1f3      	bne.n	801cf18 <__sfputs_r+0xa>
 801cf30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cf34 <_vfiprintf_r>:
 801cf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf38:	460d      	mov	r5, r1
 801cf3a:	b09d      	sub	sp, #116	; 0x74
 801cf3c:	4614      	mov	r4, r2
 801cf3e:	4698      	mov	r8, r3
 801cf40:	4606      	mov	r6, r0
 801cf42:	b118      	cbz	r0, 801cf4c <_vfiprintf_r+0x18>
 801cf44:	6a03      	ldr	r3, [r0, #32]
 801cf46:	b90b      	cbnz	r3, 801cf4c <_vfiprintf_r+0x18>
 801cf48:	f7fe f97c 	bl	801b244 <__sinit>
 801cf4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cf4e:	07d9      	lsls	r1, r3, #31
 801cf50:	d405      	bmi.n	801cf5e <_vfiprintf_r+0x2a>
 801cf52:	89ab      	ldrh	r3, [r5, #12]
 801cf54:	059a      	lsls	r2, r3, #22
 801cf56:	d402      	bmi.n	801cf5e <_vfiprintf_r+0x2a>
 801cf58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf5a:	f7fe fbc2 	bl	801b6e2 <__retarget_lock_acquire_recursive>
 801cf5e:	89ab      	ldrh	r3, [r5, #12]
 801cf60:	071b      	lsls	r3, r3, #28
 801cf62:	d501      	bpl.n	801cf68 <_vfiprintf_r+0x34>
 801cf64:	692b      	ldr	r3, [r5, #16]
 801cf66:	b99b      	cbnz	r3, 801cf90 <_vfiprintf_r+0x5c>
 801cf68:	4629      	mov	r1, r5
 801cf6a:	4630      	mov	r0, r6
 801cf6c:	f7fe faae 	bl	801b4cc <__swsetup_r>
 801cf70:	b170      	cbz	r0, 801cf90 <_vfiprintf_r+0x5c>
 801cf72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cf74:	07dc      	lsls	r4, r3, #31
 801cf76:	d504      	bpl.n	801cf82 <_vfiprintf_r+0x4e>
 801cf78:	f04f 30ff 	mov.w	r0, #4294967295
 801cf7c:	b01d      	add	sp, #116	; 0x74
 801cf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf82:	89ab      	ldrh	r3, [r5, #12]
 801cf84:	0598      	lsls	r0, r3, #22
 801cf86:	d4f7      	bmi.n	801cf78 <_vfiprintf_r+0x44>
 801cf88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf8a:	f7fe fbab 	bl	801b6e4 <__retarget_lock_release_recursive>
 801cf8e:	e7f3      	b.n	801cf78 <_vfiprintf_r+0x44>
 801cf90:	2300      	movs	r3, #0
 801cf92:	9309      	str	r3, [sp, #36]	; 0x24
 801cf94:	2320      	movs	r3, #32
 801cf96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cf9a:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf9e:	2330      	movs	r3, #48	; 0x30
 801cfa0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d154 <_vfiprintf_r+0x220>
 801cfa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cfa8:	f04f 0901 	mov.w	r9, #1
 801cfac:	4623      	mov	r3, r4
 801cfae:	469a      	mov	sl, r3
 801cfb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cfb4:	b10a      	cbz	r2, 801cfba <_vfiprintf_r+0x86>
 801cfb6:	2a25      	cmp	r2, #37	; 0x25
 801cfb8:	d1f9      	bne.n	801cfae <_vfiprintf_r+0x7a>
 801cfba:	ebba 0b04 	subs.w	fp, sl, r4
 801cfbe:	d00b      	beq.n	801cfd8 <_vfiprintf_r+0xa4>
 801cfc0:	465b      	mov	r3, fp
 801cfc2:	4622      	mov	r2, r4
 801cfc4:	4629      	mov	r1, r5
 801cfc6:	4630      	mov	r0, r6
 801cfc8:	f7ff ffa1 	bl	801cf0e <__sfputs_r>
 801cfcc:	3001      	adds	r0, #1
 801cfce:	f000 80a9 	beq.w	801d124 <_vfiprintf_r+0x1f0>
 801cfd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cfd4:	445a      	add	r2, fp
 801cfd6:	9209      	str	r2, [sp, #36]	; 0x24
 801cfd8:	f89a 3000 	ldrb.w	r3, [sl]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	f000 80a1 	beq.w	801d124 <_vfiprintf_r+0x1f0>
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	f04f 32ff 	mov.w	r2, #4294967295
 801cfe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cfec:	f10a 0a01 	add.w	sl, sl, #1
 801cff0:	9304      	str	r3, [sp, #16]
 801cff2:	9307      	str	r3, [sp, #28]
 801cff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cff8:	931a      	str	r3, [sp, #104]	; 0x68
 801cffa:	4654      	mov	r4, sl
 801cffc:	2205      	movs	r2, #5
 801cffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d002:	4854      	ldr	r0, [pc, #336]	; (801d154 <_vfiprintf_r+0x220>)
 801d004:	f7e5 f80c 	bl	8002020 <memchr>
 801d008:	9a04      	ldr	r2, [sp, #16]
 801d00a:	b9d8      	cbnz	r0, 801d044 <_vfiprintf_r+0x110>
 801d00c:	06d1      	lsls	r1, r2, #27
 801d00e:	bf44      	itt	mi
 801d010:	2320      	movmi	r3, #32
 801d012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d016:	0713      	lsls	r3, r2, #28
 801d018:	bf44      	itt	mi
 801d01a:	232b      	movmi	r3, #43	; 0x2b
 801d01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d020:	f89a 3000 	ldrb.w	r3, [sl]
 801d024:	2b2a      	cmp	r3, #42	; 0x2a
 801d026:	d015      	beq.n	801d054 <_vfiprintf_r+0x120>
 801d028:	9a07      	ldr	r2, [sp, #28]
 801d02a:	4654      	mov	r4, sl
 801d02c:	2000      	movs	r0, #0
 801d02e:	f04f 0c0a 	mov.w	ip, #10
 801d032:	4621      	mov	r1, r4
 801d034:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d038:	3b30      	subs	r3, #48	; 0x30
 801d03a:	2b09      	cmp	r3, #9
 801d03c:	d94d      	bls.n	801d0da <_vfiprintf_r+0x1a6>
 801d03e:	b1b0      	cbz	r0, 801d06e <_vfiprintf_r+0x13a>
 801d040:	9207      	str	r2, [sp, #28]
 801d042:	e014      	b.n	801d06e <_vfiprintf_r+0x13a>
 801d044:	eba0 0308 	sub.w	r3, r0, r8
 801d048:	fa09 f303 	lsl.w	r3, r9, r3
 801d04c:	4313      	orrs	r3, r2
 801d04e:	9304      	str	r3, [sp, #16]
 801d050:	46a2      	mov	sl, r4
 801d052:	e7d2      	b.n	801cffa <_vfiprintf_r+0xc6>
 801d054:	9b03      	ldr	r3, [sp, #12]
 801d056:	1d19      	adds	r1, r3, #4
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	9103      	str	r1, [sp, #12]
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	bfbb      	ittet	lt
 801d060:	425b      	neglt	r3, r3
 801d062:	f042 0202 	orrlt.w	r2, r2, #2
 801d066:	9307      	strge	r3, [sp, #28]
 801d068:	9307      	strlt	r3, [sp, #28]
 801d06a:	bfb8      	it	lt
 801d06c:	9204      	strlt	r2, [sp, #16]
 801d06e:	7823      	ldrb	r3, [r4, #0]
 801d070:	2b2e      	cmp	r3, #46	; 0x2e
 801d072:	d10c      	bne.n	801d08e <_vfiprintf_r+0x15a>
 801d074:	7863      	ldrb	r3, [r4, #1]
 801d076:	2b2a      	cmp	r3, #42	; 0x2a
 801d078:	d134      	bne.n	801d0e4 <_vfiprintf_r+0x1b0>
 801d07a:	9b03      	ldr	r3, [sp, #12]
 801d07c:	1d1a      	adds	r2, r3, #4
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	9203      	str	r2, [sp, #12]
 801d082:	2b00      	cmp	r3, #0
 801d084:	bfb8      	it	lt
 801d086:	f04f 33ff 	movlt.w	r3, #4294967295
 801d08a:	3402      	adds	r4, #2
 801d08c:	9305      	str	r3, [sp, #20]
 801d08e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d164 <_vfiprintf_r+0x230>
 801d092:	7821      	ldrb	r1, [r4, #0]
 801d094:	2203      	movs	r2, #3
 801d096:	4650      	mov	r0, sl
 801d098:	f7e4 ffc2 	bl	8002020 <memchr>
 801d09c:	b138      	cbz	r0, 801d0ae <_vfiprintf_r+0x17a>
 801d09e:	9b04      	ldr	r3, [sp, #16]
 801d0a0:	eba0 000a 	sub.w	r0, r0, sl
 801d0a4:	2240      	movs	r2, #64	; 0x40
 801d0a6:	4082      	lsls	r2, r0
 801d0a8:	4313      	orrs	r3, r2
 801d0aa:	3401      	adds	r4, #1
 801d0ac:	9304      	str	r3, [sp, #16]
 801d0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d0b2:	4829      	ldr	r0, [pc, #164]	; (801d158 <_vfiprintf_r+0x224>)
 801d0b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d0b8:	2206      	movs	r2, #6
 801d0ba:	f7e4 ffb1 	bl	8002020 <memchr>
 801d0be:	2800      	cmp	r0, #0
 801d0c0:	d03f      	beq.n	801d142 <_vfiprintf_r+0x20e>
 801d0c2:	4b26      	ldr	r3, [pc, #152]	; (801d15c <_vfiprintf_r+0x228>)
 801d0c4:	bb1b      	cbnz	r3, 801d10e <_vfiprintf_r+0x1da>
 801d0c6:	9b03      	ldr	r3, [sp, #12]
 801d0c8:	3307      	adds	r3, #7
 801d0ca:	f023 0307 	bic.w	r3, r3, #7
 801d0ce:	3308      	adds	r3, #8
 801d0d0:	9303      	str	r3, [sp, #12]
 801d0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0d4:	443b      	add	r3, r7
 801d0d6:	9309      	str	r3, [sp, #36]	; 0x24
 801d0d8:	e768      	b.n	801cfac <_vfiprintf_r+0x78>
 801d0da:	fb0c 3202 	mla	r2, ip, r2, r3
 801d0de:	460c      	mov	r4, r1
 801d0e0:	2001      	movs	r0, #1
 801d0e2:	e7a6      	b.n	801d032 <_vfiprintf_r+0xfe>
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	3401      	adds	r4, #1
 801d0e8:	9305      	str	r3, [sp, #20]
 801d0ea:	4619      	mov	r1, r3
 801d0ec:	f04f 0c0a 	mov.w	ip, #10
 801d0f0:	4620      	mov	r0, r4
 801d0f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d0f6:	3a30      	subs	r2, #48	; 0x30
 801d0f8:	2a09      	cmp	r2, #9
 801d0fa:	d903      	bls.n	801d104 <_vfiprintf_r+0x1d0>
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	d0c6      	beq.n	801d08e <_vfiprintf_r+0x15a>
 801d100:	9105      	str	r1, [sp, #20]
 801d102:	e7c4      	b.n	801d08e <_vfiprintf_r+0x15a>
 801d104:	fb0c 2101 	mla	r1, ip, r1, r2
 801d108:	4604      	mov	r4, r0
 801d10a:	2301      	movs	r3, #1
 801d10c:	e7f0      	b.n	801d0f0 <_vfiprintf_r+0x1bc>
 801d10e:	ab03      	add	r3, sp, #12
 801d110:	9300      	str	r3, [sp, #0]
 801d112:	462a      	mov	r2, r5
 801d114:	4b12      	ldr	r3, [pc, #72]	; (801d160 <_vfiprintf_r+0x22c>)
 801d116:	a904      	add	r1, sp, #16
 801d118:	4630      	mov	r0, r6
 801d11a:	f7fd fc5d 	bl	801a9d8 <_printf_float>
 801d11e:	4607      	mov	r7, r0
 801d120:	1c78      	adds	r0, r7, #1
 801d122:	d1d6      	bne.n	801d0d2 <_vfiprintf_r+0x19e>
 801d124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d126:	07d9      	lsls	r1, r3, #31
 801d128:	d405      	bmi.n	801d136 <_vfiprintf_r+0x202>
 801d12a:	89ab      	ldrh	r3, [r5, #12]
 801d12c:	059a      	lsls	r2, r3, #22
 801d12e:	d402      	bmi.n	801d136 <_vfiprintf_r+0x202>
 801d130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d132:	f7fe fad7 	bl	801b6e4 <__retarget_lock_release_recursive>
 801d136:	89ab      	ldrh	r3, [r5, #12]
 801d138:	065b      	lsls	r3, r3, #25
 801d13a:	f53f af1d 	bmi.w	801cf78 <_vfiprintf_r+0x44>
 801d13e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d140:	e71c      	b.n	801cf7c <_vfiprintf_r+0x48>
 801d142:	ab03      	add	r3, sp, #12
 801d144:	9300      	str	r3, [sp, #0]
 801d146:	462a      	mov	r2, r5
 801d148:	4b05      	ldr	r3, [pc, #20]	; (801d160 <_vfiprintf_r+0x22c>)
 801d14a:	a904      	add	r1, sp, #16
 801d14c:	4630      	mov	r0, r6
 801d14e:	f7fd fecb 	bl	801aee8 <_printf_i>
 801d152:	e7e4      	b.n	801d11e <_vfiprintf_r+0x1ea>
 801d154:	0802129c 	.word	0x0802129c
 801d158:	080212a6 	.word	0x080212a6
 801d15c:	0801a9d9 	.word	0x0801a9d9
 801d160:	0801cf0f 	.word	0x0801cf0f
 801d164:	080212a2 	.word	0x080212a2

0801d168 <__sflush_r>:
 801d168:	898a      	ldrh	r2, [r1, #12]
 801d16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d16e:	4605      	mov	r5, r0
 801d170:	0710      	lsls	r0, r2, #28
 801d172:	460c      	mov	r4, r1
 801d174:	d458      	bmi.n	801d228 <__sflush_r+0xc0>
 801d176:	684b      	ldr	r3, [r1, #4]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	dc05      	bgt.n	801d188 <__sflush_r+0x20>
 801d17c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d17e:	2b00      	cmp	r3, #0
 801d180:	dc02      	bgt.n	801d188 <__sflush_r+0x20>
 801d182:	2000      	movs	r0, #0
 801d184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d18a:	2e00      	cmp	r6, #0
 801d18c:	d0f9      	beq.n	801d182 <__sflush_r+0x1a>
 801d18e:	2300      	movs	r3, #0
 801d190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d194:	682f      	ldr	r7, [r5, #0]
 801d196:	6a21      	ldr	r1, [r4, #32]
 801d198:	602b      	str	r3, [r5, #0]
 801d19a:	d032      	beq.n	801d202 <__sflush_r+0x9a>
 801d19c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d19e:	89a3      	ldrh	r3, [r4, #12]
 801d1a0:	075a      	lsls	r2, r3, #29
 801d1a2:	d505      	bpl.n	801d1b0 <__sflush_r+0x48>
 801d1a4:	6863      	ldr	r3, [r4, #4]
 801d1a6:	1ac0      	subs	r0, r0, r3
 801d1a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d1aa:	b10b      	cbz	r3, 801d1b0 <__sflush_r+0x48>
 801d1ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d1ae:	1ac0      	subs	r0, r0, r3
 801d1b0:	2300      	movs	r3, #0
 801d1b2:	4602      	mov	r2, r0
 801d1b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d1b6:	6a21      	ldr	r1, [r4, #32]
 801d1b8:	4628      	mov	r0, r5
 801d1ba:	47b0      	blx	r6
 801d1bc:	1c43      	adds	r3, r0, #1
 801d1be:	89a3      	ldrh	r3, [r4, #12]
 801d1c0:	d106      	bne.n	801d1d0 <__sflush_r+0x68>
 801d1c2:	6829      	ldr	r1, [r5, #0]
 801d1c4:	291d      	cmp	r1, #29
 801d1c6:	d82b      	bhi.n	801d220 <__sflush_r+0xb8>
 801d1c8:	4a29      	ldr	r2, [pc, #164]	; (801d270 <__sflush_r+0x108>)
 801d1ca:	410a      	asrs	r2, r1
 801d1cc:	07d6      	lsls	r6, r2, #31
 801d1ce:	d427      	bmi.n	801d220 <__sflush_r+0xb8>
 801d1d0:	2200      	movs	r2, #0
 801d1d2:	6062      	str	r2, [r4, #4]
 801d1d4:	04d9      	lsls	r1, r3, #19
 801d1d6:	6922      	ldr	r2, [r4, #16]
 801d1d8:	6022      	str	r2, [r4, #0]
 801d1da:	d504      	bpl.n	801d1e6 <__sflush_r+0x7e>
 801d1dc:	1c42      	adds	r2, r0, #1
 801d1de:	d101      	bne.n	801d1e4 <__sflush_r+0x7c>
 801d1e0:	682b      	ldr	r3, [r5, #0]
 801d1e2:	b903      	cbnz	r3, 801d1e6 <__sflush_r+0x7e>
 801d1e4:	6560      	str	r0, [r4, #84]	; 0x54
 801d1e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d1e8:	602f      	str	r7, [r5, #0]
 801d1ea:	2900      	cmp	r1, #0
 801d1ec:	d0c9      	beq.n	801d182 <__sflush_r+0x1a>
 801d1ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d1f2:	4299      	cmp	r1, r3
 801d1f4:	d002      	beq.n	801d1fc <__sflush_r+0x94>
 801d1f6:	4628      	mov	r0, r5
 801d1f8:	f7ff f89e 	bl	801c338 <_free_r>
 801d1fc:	2000      	movs	r0, #0
 801d1fe:	6360      	str	r0, [r4, #52]	; 0x34
 801d200:	e7c0      	b.n	801d184 <__sflush_r+0x1c>
 801d202:	2301      	movs	r3, #1
 801d204:	4628      	mov	r0, r5
 801d206:	47b0      	blx	r6
 801d208:	1c41      	adds	r1, r0, #1
 801d20a:	d1c8      	bne.n	801d19e <__sflush_r+0x36>
 801d20c:	682b      	ldr	r3, [r5, #0]
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d0c5      	beq.n	801d19e <__sflush_r+0x36>
 801d212:	2b1d      	cmp	r3, #29
 801d214:	d001      	beq.n	801d21a <__sflush_r+0xb2>
 801d216:	2b16      	cmp	r3, #22
 801d218:	d101      	bne.n	801d21e <__sflush_r+0xb6>
 801d21a:	602f      	str	r7, [r5, #0]
 801d21c:	e7b1      	b.n	801d182 <__sflush_r+0x1a>
 801d21e:	89a3      	ldrh	r3, [r4, #12]
 801d220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d224:	81a3      	strh	r3, [r4, #12]
 801d226:	e7ad      	b.n	801d184 <__sflush_r+0x1c>
 801d228:	690f      	ldr	r7, [r1, #16]
 801d22a:	2f00      	cmp	r7, #0
 801d22c:	d0a9      	beq.n	801d182 <__sflush_r+0x1a>
 801d22e:	0793      	lsls	r3, r2, #30
 801d230:	680e      	ldr	r6, [r1, #0]
 801d232:	bf08      	it	eq
 801d234:	694b      	ldreq	r3, [r1, #20]
 801d236:	600f      	str	r7, [r1, #0]
 801d238:	bf18      	it	ne
 801d23a:	2300      	movne	r3, #0
 801d23c:	eba6 0807 	sub.w	r8, r6, r7
 801d240:	608b      	str	r3, [r1, #8]
 801d242:	f1b8 0f00 	cmp.w	r8, #0
 801d246:	dd9c      	ble.n	801d182 <__sflush_r+0x1a>
 801d248:	6a21      	ldr	r1, [r4, #32]
 801d24a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d24c:	4643      	mov	r3, r8
 801d24e:	463a      	mov	r2, r7
 801d250:	4628      	mov	r0, r5
 801d252:	47b0      	blx	r6
 801d254:	2800      	cmp	r0, #0
 801d256:	dc06      	bgt.n	801d266 <__sflush_r+0xfe>
 801d258:	89a3      	ldrh	r3, [r4, #12]
 801d25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d25e:	81a3      	strh	r3, [r4, #12]
 801d260:	f04f 30ff 	mov.w	r0, #4294967295
 801d264:	e78e      	b.n	801d184 <__sflush_r+0x1c>
 801d266:	4407      	add	r7, r0
 801d268:	eba8 0800 	sub.w	r8, r8, r0
 801d26c:	e7e9      	b.n	801d242 <__sflush_r+0xda>
 801d26e:	bf00      	nop
 801d270:	dfbffffe 	.word	0xdfbffffe

0801d274 <_fflush_r>:
 801d274:	b538      	push	{r3, r4, r5, lr}
 801d276:	690b      	ldr	r3, [r1, #16]
 801d278:	4605      	mov	r5, r0
 801d27a:	460c      	mov	r4, r1
 801d27c:	b913      	cbnz	r3, 801d284 <_fflush_r+0x10>
 801d27e:	2500      	movs	r5, #0
 801d280:	4628      	mov	r0, r5
 801d282:	bd38      	pop	{r3, r4, r5, pc}
 801d284:	b118      	cbz	r0, 801d28e <_fflush_r+0x1a>
 801d286:	6a03      	ldr	r3, [r0, #32]
 801d288:	b90b      	cbnz	r3, 801d28e <_fflush_r+0x1a>
 801d28a:	f7fd ffdb 	bl	801b244 <__sinit>
 801d28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d292:	2b00      	cmp	r3, #0
 801d294:	d0f3      	beq.n	801d27e <_fflush_r+0xa>
 801d296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d298:	07d0      	lsls	r0, r2, #31
 801d29a:	d404      	bmi.n	801d2a6 <_fflush_r+0x32>
 801d29c:	0599      	lsls	r1, r3, #22
 801d29e:	d402      	bmi.n	801d2a6 <_fflush_r+0x32>
 801d2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d2a2:	f7fe fa1e 	bl	801b6e2 <__retarget_lock_acquire_recursive>
 801d2a6:	4628      	mov	r0, r5
 801d2a8:	4621      	mov	r1, r4
 801d2aa:	f7ff ff5d 	bl	801d168 <__sflush_r>
 801d2ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d2b0:	07da      	lsls	r2, r3, #31
 801d2b2:	4605      	mov	r5, r0
 801d2b4:	d4e4      	bmi.n	801d280 <_fflush_r+0xc>
 801d2b6:	89a3      	ldrh	r3, [r4, #12]
 801d2b8:	059b      	lsls	r3, r3, #22
 801d2ba:	d4e1      	bmi.n	801d280 <_fflush_r+0xc>
 801d2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d2be:	f7fe fa11 	bl	801b6e4 <__retarget_lock_release_recursive>
 801d2c2:	e7dd      	b.n	801d280 <_fflush_r+0xc>

0801d2c4 <fiprintf>:
 801d2c4:	b40e      	push	{r1, r2, r3}
 801d2c6:	b503      	push	{r0, r1, lr}
 801d2c8:	4601      	mov	r1, r0
 801d2ca:	ab03      	add	r3, sp, #12
 801d2cc:	4805      	ldr	r0, [pc, #20]	; (801d2e4 <fiprintf+0x20>)
 801d2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2d2:	6800      	ldr	r0, [r0, #0]
 801d2d4:	9301      	str	r3, [sp, #4]
 801d2d6:	f7ff fe2d 	bl	801cf34 <_vfiprintf_r>
 801d2da:	b002      	add	sp, #8
 801d2dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801d2e0:	b003      	add	sp, #12
 801d2e2:	4770      	bx	lr
 801d2e4:	200001dc 	.word	0x200001dc

0801d2e8 <__swhatbuf_r>:
 801d2e8:	b570      	push	{r4, r5, r6, lr}
 801d2ea:	460c      	mov	r4, r1
 801d2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2f0:	2900      	cmp	r1, #0
 801d2f2:	b096      	sub	sp, #88	; 0x58
 801d2f4:	4615      	mov	r5, r2
 801d2f6:	461e      	mov	r6, r3
 801d2f8:	da0d      	bge.n	801d316 <__swhatbuf_r+0x2e>
 801d2fa:	89a3      	ldrh	r3, [r4, #12]
 801d2fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d300:	f04f 0100 	mov.w	r1, #0
 801d304:	bf0c      	ite	eq
 801d306:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d30a:	2340      	movne	r3, #64	; 0x40
 801d30c:	2000      	movs	r0, #0
 801d30e:	6031      	str	r1, [r6, #0]
 801d310:	602b      	str	r3, [r5, #0]
 801d312:	b016      	add	sp, #88	; 0x58
 801d314:	bd70      	pop	{r4, r5, r6, pc}
 801d316:	466a      	mov	r2, sp
 801d318:	f000 f848 	bl	801d3ac <_fstat_r>
 801d31c:	2800      	cmp	r0, #0
 801d31e:	dbec      	blt.n	801d2fa <__swhatbuf_r+0x12>
 801d320:	9901      	ldr	r1, [sp, #4]
 801d322:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d326:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d32a:	4259      	negs	r1, r3
 801d32c:	4159      	adcs	r1, r3
 801d32e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d332:	e7eb      	b.n	801d30c <__swhatbuf_r+0x24>

0801d334 <__smakebuf_r>:
 801d334:	898b      	ldrh	r3, [r1, #12]
 801d336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d338:	079d      	lsls	r5, r3, #30
 801d33a:	4606      	mov	r6, r0
 801d33c:	460c      	mov	r4, r1
 801d33e:	d507      	bpl.n	801d350 <__smakebuf_r+0x1c>
 801d340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d344:	6023      	str	r3, [r4, #0]
 801d346:	6123      	str	r3, [r4, #16]
 801d348:	2301      	movs	r3, #1
 801d34a:	6163      	str	r3, [r4, #20]
 801d34c:	b002      	add	sp, #8
 801d34e:	bd70      	pop	{r4, r5, r6, pc}
 801d350:	ab01      	add	r3, sp, #4
 801d352:	466a      	mov	r2, sp
 801d354:	f7ff ffc8 	bl	801d2e8 <__swhatbuf_r>
 801d358:	9900      	ldr	r1, [sp, #0]
 801d35a:	4605      	mov	r5, r0
 801d35c:	4630      	mov	r0, r6
 801d35e:	f7ff f85f 	bl	801c420 <_malloc_r>
 801d362:	b948      	cbnz	r0, 801d378 <__smakebuf_r+0x44>
 801d364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d368:	059a      	lsls	r2, r3, #22
 801d36a:	d4ef      	bmi.n	801d34c <__smakebuf_r+0x18>
 801d36c:	f023 0303 	bic.w	r3, r3, #3
 801d370:	f043 0302 	orr.w	r3, r3, #2
 801d374:	81a3      	strh	r3, [r4, #12]
 801d376:	e7e3      	b.n	801d340 <__smakebuf_r+0xc>
 801d378:	89a3      	ldrh	r3, [r4, #12]
 801d37a:	6020      	str	r0, [r4, #0]
 801d37c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d380:	81a3      	strh	r3, [r4, #12]
 801d382:	9b00      	ldr	r3, [sp, #0]
 801d384:	6163      	str	r3, [r4, #20]
 801d386:	9b01      	ldr	r3, [sp, #4]
 801d388:	6120      	str	r0, [r4, #16]
 801d38a:	b15b      	cbz	r3, 801d3a4 <__smakebuf_r+0x70>
 801d38c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d390:	4630      	mov	r0, r6
 801d392:	f000 f81d 	bl	801d3d0 <_isatty_r>
 801d396:	b128      	cbz	r0, 801d3a4 <__smakebuf_r+0x70>
 801d398:	89a3      	ldrh	r3, [r4, #12]
 801d39a:	f023 0303 	bic.w	r3, r3, #3
 801d39e:	f043 0301 	orr.w	r3, r3, #1
 801d3a2:	81a3      	strh	r3, [r4, #12]
 801d3a4:	89a3      	ldrh	r3, [r4, #12]
 801d3a6:	431d      	orrs	r5, r3
 801d3a8:	81a5      	strh	r5, [r4, #12]
 801d3aa:	e7cf      	b.n	801d34c <__smakebuf_r+0x18>

0801d3ac <_fstat_r>:
 801d3ac:	b538      	push	{r3, r4, r5, lr}
 801d3ae:	4d07      	ldr	r5, [pc, #28]	; (801d3cc <_fstat_r+0x20>)
 801d3b0:	2300      	movs	r3, #0
 801d3b2:	4604      	mov	r4, r0
 801d3b4:	4608      	mov	r0, r1
 801d3b6:	4611      	mov	r1, r2
 801d3b8:	602b      	str	r3, [r5, #0]
 801d3ba:	f7e6 fc34 	bl	8003c26 <_fstat>
 801d3be:	1c43      	adds	r3, r0, #1
 801d3c0:	d102      	bne.n	801d3c8 <_fstat_r+0x1c>
 801d3c2:	682b      	ldr	r3, [r5, #0]
 801d3c4:	b103      	cbz	r3, 801d3c8 <_fstat_r+0x1c>
 801d3c6:	6023      	str	r3, [r4, #0]
 801d3c8:	bd38      	pop	{r3, r4, r5, pc}
 801d3ca:	bf00      	nop
 801d3cc:	20007454 	.word	0x20007454

0801d3d0 <_isatty_r>:
 801d3d0:	b538      	push	{r3, r4, r5, lr}
 801d3d2:	4d06      	ldr	r5, [pc, #24]	; (801d3ec <_isatty_r+0x1c>)
 801d3d4:	2300      	movs	r3, #0
 801d3d6:	4604      	mov	r4, r0
 801d3d8:	4608      	mov	r0, r1
 801d3da:	602b      	str	r3, [r5, #0]
 801d3dc:	f7e6 fc33 	bl	8003c46 <_isatty>
 801d3e0:	1c43      	adds	r3, r0, #1
 801d3e2:	d102      	bne.n	801d3ea <_isatty_r+0x1a>
 801d3e4:	682b      	ldr	r3, [r5, #0]
 801d3e6:	b103      	cbz	r3, 801d3ea <_isatty_r+0x1a>
 801d3e8:	6023      	str	r3, [r4, #0]
 801d3ea:	bd38      	pop	{r3, r4, r5, pc}
 801d3ec:	20007454 	.word	0x20007454

0801d3f0 <_sbrk_r>:
 801d3f0:	b538      	push	{r3, r4, r5, lr}
 801d3f2:	4d06      	ldr	r5, [pc, #24]	; (801d40c <_sbrk_r+0x1c>)
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	4604      	mov	r4, r0
 801d3f8:	4608      	mov	r0, r1
 801d3fa:	602b      	str	r3, [r5, #0]
 801d3fc:	f7e6 fc3c 	bl	8003c78 <_sbrk>
 801d400:	1c43      	adds	r3, r0, #1
 801d402:	d102      	bne.n	801d40a <_sbrk_r+0x1a>
 801d404:	682b      	ldr	r3, [r5, #0]
 801d406:	b103      	cbz	r3, 801d40a <_sbrk_r+0x1a>
 801d408:	6023      	str	r3, [r4, #0]
 801d40a:	bd38      	pop	{r3, r4, r5, pc}
 801d40c:	20007454 	.word	0x20007454

0801d410 <abort>:
 801d410:	b508      	push	{r3, lr}
 801d412:	2006      	movs	r0, #6
 801d414:	f000 f890 	bl	801d538 <raise>
 801d418:	2001      	movs	r0, #1
 801d41a:	f7e6 fbb5 	bl	8003b88 <_exit>

0801d41e <_calloc_r>:
 801d41e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d420:	fba1 2402 	umull	r2, r4, r1, r2
 801d424:	b94c      	cbnz	r4, 801d43a <_calloc_r+0x1c>
 801d426:	4611      	mov	r1, r2
 801d428:	9201      	str	r2, [sp, #4]
 801d42a:	f7fe fff9 	bl	801c420 <_malloc_r>
 801d42e:	9a01      	ldr	r2, [sp, #4]
 801d430:	4605      	mov	r5, r0
 801d432:	b930      	cbnz	r0, 801d442 <_calloc_r+0x24>
 801d434:	4628      	mov	r0, r5
 801d436:	b003      	add	sp, #12
 801d438:	bd30      	pop	{r4, r5, pc}
 801d43a:	220c      	movs	r2, #12
 801d43c:	6002      	str	r2, [r0, #0]
 801d43e:	2500      	movs	r5, #0
 801d440:	e7f8      	b.n	801d434 <_calloc_r+0x16>
 801d442:	4621      	mov	r1, r4
 801d444:	f7fe f8c4 	bl	801b5d0 <memset>
 801d448:	e7f4      	b.n	801d434 <_calloc_r+0x16>

0801d44a <__ascii_mbtowc>:
 801d44a:	b082      	sub	sp, #8
 801d44c:	b901      	cbnz	r1, 801d450 <__ascii_mbtowc+0x6>
 801d44e:	a901      	add	r1, sp, #4
 801d450:	b142      	cbz	r2, 801d464 <__ascii_mbtowc+0x1a>
 801d452:	b14b      	cbz	r3, 801d468 <__ascii_mbtowc+0x1e>
 801d454:	7813      	ldrb	r3, [r2, #0]
 801d456:	600b      	str	r3, [r1, #0]
 801d458:	7812      	ldrb	r2, [r2, #0]
 801d45a:	1e10      	subs	r0, r2, #0
 801d45c:	bf18      	it	ne
 801d45e:	2001      	movne	r0, #1
 801d460:	b002      	add	sp, #8
 801d462:	4770      	bx	lr
 801d464:	4610      	mov	r0, r2
 801d466:	e7fb      	b.n	801d460 <__ascii_mbtowc+0x16>
 801d468:	f06f 0001 	mvn.w	r0, #1
 801d46c:	e7f8      	b.n	801d460 <__ascii_mbtowc+0x16>

0801d46e <_realloc_r>:
 801d46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d472:	4680      	mov	r8, r0
 801d474:	4614      	mov	r4, r2
 801d476:	460e      	mov	r6, r1
 801d478:	b921      	cbnz	r1, 801d484 <_realloc_r+0x16>
 801d47a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d47e:	4611      	mov	r1, r2
 801d480:	f7fe bfce 	b.w	801c420 <_malloc_r>
 801d484:	b92a      	cbnz	r2, 801d492 <_realloc_r+0x24>
 801d486:	f7fe ff57 	bl	801c338 <_free_r>
 801d48a:	4625      	mov	r5, r4
 801d48c:	4628      	mov	r0, r5
 801d48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d492:	f000 f86d 	bl	801d570 <_malloc_usable_size_r>
 801d496:	4284      	cmp	r4, r0
 801d498:	4607      	mov	r7, r0
 801d49a:	d802      	bhi.n	801d4a2 <_realloc_r+0x34>
 801d49c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d4a0:	d812      	bhi.n	801d4c8 <_realloc_r+0x5a>
 801d4a2:	4621      	mov	r1, r4
 801d4a4:	4640      	mov	r0, r8
 801d4a6:	f7fe ffbb 	bl	801c420 <_malloc_r>
 801d4aa:	4605      	mov	r5, r0
 801d4ac:	2800      	cmp	r0, #0
 801d4ae:	d0ed      	beq.n	801d48c <_realloc_r+0x1e>
 801d4b0:	42bc      	cmp	r4, r7
 801d4b2:	4622      	mov	r2, r4
 801d4b4:	4631      	mov	r1, r6
 801d4b6:	bf28      	it	cs
 801d4b8:	463a      	movcs	r2, r7
 801d4ba:	f7fe f91c 	bl	801b6f6 <memcpy>
 801d4be:	4631      	mov	r1, r6
 801d4c0:	4640      	mov	r0, r8
 801d4c2:	f7fe ff39 	bl	801c338 <_free_r>
 801d4c6:	e7e1      	b.n	801d48c <_realloc_r+0x1e>
 801d4c8:	4635      	mov	r5, r6
 801d4ca:	e7df      	b.n	801d48c <_realloc_r+0x1e>

0801d4cc <__ascii_wctomb>:
 801d4cc:	b149      	cbz	r1, 801d4e2 <__ascii_wctomb+0x16>
 801d4ce:	2aff      	cmp	r2, #255	; 0xff
 801d4d0:	bf85      	ittet	hi
 801d4d2:	238a      	movhi	r3, #138	; 0x8a
 801d4d4:	6003      	strhi	r3, [r0, #0]
 801d4d6:	700a      	strbls	r2, [r1, #0]
 801d4d8:	f04f 30ff 	movhi.w	r0, #4294967295
 801d4dc:	bf98      	it	ls
 801d4de:	2001      	movls	r0, #1
 801d4e0:	4770      	bx	lr
 801d4e2:	4608      	mov	r0, r1
 801d4e4:	4770      	bx	lr

0801d4e6 <_raise_r>:
 801d4e6:	291f      	cmp	r1, #31
 801d4e8:	b538      	push	{r3, r4, r5, lr}
 801d4ea:	4604      	mov	r4, r0
 801d4ec:	460d      	mov	r5, r1
 801d4ee:	d904      	bls.n	801d4fa <_raise_r+0x14>
 801d4f0:	2316      	movs	r3, #22
 801d4f2:	6003      	str	r3, [r0, #0]
 801d4f4:	f04f 30ff 	mov.w	r0, #4294967295
 801d4f8:	bd38      	pop	{r3, r4, r5, pc}
 801d4fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d4fc:	b112      	cbz	r2, 801d504 <_raise_r+0x1e>
 801d4fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d502:	b94b      	cbnz	r3, 801d518 <_raise_r+0x32>
 801d504:	4620      	mov	r0, r4
 801d506:	f000 f831 	bl	801d56c <_getpid_r>
 801d50a:	462a      	mov	r2, r5
 801d50c:	4601      	mov	r1, r0
 801d50e:	4620      	mov	r0, r4
 801d510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d514:	f000 b818 	b.w	801d548 <_kill_r>
 801d518:	2b01      	cmp	r3, #1
 801d51a:	d00a      	beq.n	801d532 <_raise_r+0x4c>
 801d51c:	1c59      	adds	r1, r3, #1
 801d51e:	d103      	bne.n	801d528 <_raise_r+0x42>
 801d520:	2316      	movs	r3, #22
 801d522:	6003      	str	r3, [r0, #0]
 801d524:	2001      	movs	r0, #1
 801d526:	e7e7      	b.n	801d4f8 <_raise_r+0x12>
 801d528:	2400      	movs	r4, #0
 801d52a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d52e:	4628      	mov	r0, r5
 801d530:	4798      	blx	r3
 801d532:	2000      	movs	r0, #0
 801d534:	e7e0      	b.n	801d4f8 <_raise_r+0x12>
	...

0801d538 <raise>:
 801d538:	4b02      	ldr	r3, [pc, #8]	; (801d544 <raise+0xc>)
 801d53a:	4601      	mov	r1, r0
 801d53c:	6818      	ldr	r0, [r3, #0]
 801d53e:	f7ff bfd2 	b.w	801d4e6 <_raise_r>
 801d542:	bf00      	nop
 801d544:	200001dc 	.word	0x200001dc

0801d548 <_kill_r>:
 801d548:	b538      	push	{r3, r4, r5, lr}
 801d54a:	4d07      	ldr	r5, [pc, #28]	; (801d568 <_kill_r+0x20>)
 801d54c:	2300      	movs	r3, #0
 801d54e:	4604      	mov	r4, r0
 801d550:	4608      	mov	r0, r1
 801d552:	4611      	mov	r1, r2
 801d554:	602b      	str	r3, [r5, #0]
 801d556:	f7e6 fb05 	bl	8003b64 <_kill>
 801d55a:	1c43      	adds	r3, r0, #1
 801d55c:	d102      	bne.n	801d564 <_kill_r+0x1c>
 801d55e:	682b      	ldr	r3, [r5, #0]
 801d560:	b103      	cbz	r3, 801d564 <_kill_r+0x1c>
 801d562:	6023      	str	r3, [r4, #0]
 801d564:	bd38      	pop	{r3, r4, r5, pc}
 801d566:	bf00      	nop
 801d568:	20007454 	.word	0x20007454

0801d56c <_getpid_r>:
 801d56c:	f7e6 baf2 	b.w	8003b54 <_getpid>

0801d570 <_malloc_usable_size_r>:
 801d570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d574:	1f18      	subs	r0, r3, #4
 801d576:	2b00      	cmp	r3, #0
 801d578:	bfbc      	itt	lt
 801d57a:	580b      	ldrlt	r3, [r1, r0]
 801d57c:	18c0      	addlt	r0, r0, r3
 801d57e:	4770      	bx	lr

0801d580 <_init>:
 801d580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d582:	bf00      	nop
 801d584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d586:	bc08      	pop	{r3}
 801d588:	469e      	mov	lr, r3
 801d58a:	4770      	bx	lr

0801d58c <_fini>:
 801d58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d58e:	bf00      	nop
 801d590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d592:	bc08      	pop	{r3}
 801d594:	469e      	mov	lr, r3
 801d596:	4770      	bx	lr

0801d598 <__start_POP_calibration_veneer>:
 801d598:	f85f f000 	ldr.w	pc, [pc]	; 801d59c <__start_POP_calibration_veneer+0x4>
 801d59c:	00001429 	.word	0x00001429

0801d5a0 <__set_laser_current_veneer>:
 801d5a0:	f85f f000 	ldr.w	pc, [pc]	; 801d5a4 <__set_laser_current_veneer+0x4>
 801d5a4:	0000020d 	.word	0x0000020d

0801d5a8 <__set_laser_state_veneer>:
 801d5a8:	f85f f000 	ldr.w	pc, [pc]	; 801d5ac <__set_laser_state_veneer+0x4>
 801d5ac:	0000023d 	.word	0x0000023d

0801d5b0 <__calc_fixed_time_MW_sweep_veneer>:
 801d5b0:	f85f f000 	ldr.w	pc, [pc]	; 801d5b4 <__calc_fixed_time_MW_sweep_veneer+0x4>
 801d5b4:	00000fb1 	.word	0x00000fb1

0801d5b8 <__check_timer_veneer>:
 801d5b8:	f85f f000 	ldr.w	pc, [pc]	; 801d5bc <__check_timer_veneer+0x4>
 801d5bc:	00001a4d 	.word	0x00001a4d

0801d5c0 <__telnet_client_init_veneer>:
 801d5c0:	f85f f000 	ldr.w	pc, [pc]	; 801d5c4 <__telnet_client_init_veneer+0x4>
 801d5c4:	00000001 	.word	0x00000001

0801d5c8 <__start_pop_veneer>:
 801d5c8:	f85f f000 	ldr.w	pc, [pc]	; 801d5cc <__start_pop_veneer+0x4>
 801d5cc:	00001b55 	.word	0x00001b55

0801d5d0 <__init_ldc_tec_veneer>:
 801d5d0:	f85f f000 	ldr.w	pc, [pc]	; 801d5d4 <__init_ldc_tec_veneer+0x4>
 801d5d4:	00000109 	.word	0x00000109

0801d5d8 <__start_timer_veneer>:
 801d5d8:	f85f f000 	ldr.w	pc, [pc]	; 801d5dc <__start_timer_veneer+0x4>
 801d5dc:	000019ed 	.word	0x000019ed

0801d5e0 <__timer_delay_veneer>:
 801d5e0:	f85f f000 	ldr.w	pc, [pc]	; 801d5e4 <__timer_delay_veneer+0x4>
 801d5e4:	00001a65 	.word	0x00001a65

0801d5e8 <__stop_pop_veneer>:
 801d5e8:	f85f f000 	ldr.w	pc, [pc]	; 801d5ec <__stop_pop_veneer+0x4>
 801d5ec:	00001bb1 	.word	0x00001bb1

0801d5f0 <__init_ldc_comms_veneer>:
 801d5f0:	f85f f000 	ldr.w	pc, [pc]	; 801d5f4 <__init_ldc_comms_veneer+0x4>
 801d5f4:	000000b5 	.word	0x000000b5

0801d5f8 <__MW_update_veneer>:
 801d5f8:	f85f f000 	ldr.w	pc, [pc]	; 801d5fc <__MW_update_veneer+0x4>
 801d5fc:	00001545 	.word	0x00001545

0801d600 <__stop_timer_veneer>:
 801d600:	f85f f000 	ldr.w	pc, [pc]	; 801d604 <__stop_timer_veneer+0x4>
 801d604:	00001a29 	.word	0x00001a29
