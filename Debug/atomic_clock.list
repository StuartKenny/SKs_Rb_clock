
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         000019c8  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019de8  08001c60  08001c60  00021c60  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0004022c  2**0
                  CONTENTS
  4 .rodata       000038a8  0801ba48  0801ba48  0003ba48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801f2f0  0801f2f0  0003f2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801f2f8  0801f2f8  0003f2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f2fc  0801f2fc  0003f2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801f300  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007148  20000230  0801f52c  00040230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007378  0801f52c  00047378  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00038d4c  00000000  00000000  0004029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000752d  00000000  00000000  00078fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000029d0  00000000  00000000  00080518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000215a  00000000  00000000  00082ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011f05  00000000  00000000  00085042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004153e  00000000  00000000  00096f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a97a4  00000000  00000000  000d8485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c01c  00000000  00000000  00281c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0028dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_laser_tuning>:
/**
  * @brief  Function x.
  * @retval None
  */

void start_laser_tuning(void) {
       0:	b580      	push	{r7, lr}
       2:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
       4:	f001 f9fe 	bl	1404 <stop_MW_operation>
	laser_state = LASER_STEPPED_UP;
       8:	4b17      	ldr	r3, [pc, #92]	; (68 <start_laser_tuning+0x68>)
       a:	2202      	movs	r2, #2
       c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
       e:	2201      	movs	r2, #1
      10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      14:	4815      	ldr	r0, [pc, #84]	; (6c <start_laser_tuning+0x6c>)
      16:	f001 fcc3 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	if (laser_mod_value > (LASER_MAX_MOD - LASER_STEP)) {
      1a:	4b15      	ldr	r3, [pc, #84]	; (70 <start_laser_tuning+0x70>)
      1c:	881b      	ldrh	r3, [r3, #0]
      1e:	461a      	mov	r2, r3
      20:	2303      	movs	r3, #3
      22:	4619      	mov	r1, r3
      24:	f640 53ac 	movw	r3, #3500	; 0xdac
      28:	1a5b      	subs	r3, r3, r1
      2a:	429a      	cmp	r2, r3
      2c:	dd0a      	ble.n	44 <start_laser_tuning+0x44>
	    printf("LOSS OF LASER LOCK\r\n");
      2e:	4811      	ldr	r0, [pc, #68]	; (74 <start_laser_tuning+0x74>)
      30:	f001 fcba 	bl	19a8 <__puts_veneer>
	    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
      34:	4b0e      	ldr	r3, [pc, #56]	; (70 <start_laser_tuning+0x70>)
      36:	881b      	ldrh	r3, [r3, #0]
      38:	4619      	mov	r1, r3
      3a:	480f      	ldr	r0, [pc, #60]	; (78 <start_laser_tuning+0x78>)
      3c:	f001 fcac 	bl	1998 <__printf_veneer>
		Error_Handler();
      40:	f001 fcb6 	bl	19b0 <__Error_Handler_veneer>
	}
	laser_mod_value += LASER_STEP;
      44:	4b0a      	ldr	r3, [pc, #40]	; (70 <start_laser_tuning+0x70>)
      46:	881b      	ldrh	r3, [r3, #0]
      48:	2203      	movs	r2, #3
      4a:	4413      	add	r3, r2
      4c:	b29a      	uxth	r2, r3
      4e:	4b08      	ldr	r3, [pc, #32]	; (70 <start_laser_tuning+0x70>)
      50:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      52:	4b07      	ldr	r3, [pc, #28]	; (70 <start_laser_tuning+0x70>)
      54:	881b      	ldrh	r3, [r3, #0]
      56:	2200      	movs	r2, #0
      58:	2110      	movs	r1, #16
      5a:	4808      	ldr	r0, [pc, #32]	; (7c <start_laser_tuning+0x7c>)
      5c:	f001 fc94 	bl	1988 <__HAL_DAC_SetValue_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
      60:	f000 fb2e 	bl	6c0 <reset_adc_samples>
	#ifdef LASER_VERBOSE
	printf("Started laser tuning\r\n");
	#endif //LASER_VERBOSE
}
      64:	bf00      	nop
      66:	bd80      	pop	{r7, pc}
      68:	2000024c 	.word	0x2000024c
      6c:	58020400 	.word	0x58020400
      70:	20000000 	.word	0x20000000
      74:	0801ba48 	.word	0x0801ba48
      78:	0801ba5c 	.word	0x0801ba5c
      7c:	200002c4 	.word	0x200002c4

00000080 <start_laser_ramp>:
  * @brief  Starts a laser scan
  * @retval None
  * This function initiates a laser frequency scan using an n-point moving average
  * ADC value where n = ADC_SAMPLES
  */
void start_laser_ramp(void) {
      80:	b580      	push	{r7, lr}
      82:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
      84:	f001 f9be 	bl	1404 <stop_MW_operation>
	laser_state = LASER_RAMP_PHASE_ONE;
      88:	4b15      	ldr	r3, [pc, #84]	; (e0 <start_laser_ramp+0x60>)
      8a:	2204      	movs	r2, #4
      8c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
      8e:	2201      	movs	r2, #1
      90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      94:	4813      	ldr	r0, [pc, #76]	; (e4 <start_laser_ramp+0x64>)
      96:	f001 fc83 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
      9a:	2201      	movs	r2, #1
      9c:	2101      	movs	r1, #1
      9e:	4812      	ldr	r0, [pc, #72]	; (e8 <start_laser_ramp+0x68>)
      a0:	f001 fc7e 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	adc_averaged_max = 0;
      a4:	4b11      	ldr	r3, [pc, #68]	; (ec <start_laser_ramp+0x6c>)
      a6:	2200      	movs	r2, #0
      a8:	601a      	str	r2, [r3, #0]
	adc_averaged_min = 0xFFFF;
      aa:	4b11      	ldr	r3, [pc, #68]	; (f0 <start_laser_ramp+0x70>)
      ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
      b0:	601a      	str	r2, [r3, #0]
	laser_mod_value = LASER_MIN_MOD;
      b2:	4b10      	ldr	r3, [pc, #64]	; (f4 <start_laser_ramp+0x74>)
      b4:	220a      	movs	r2, #10
      b6:	801a      	strh	r2, [r3, #0]
	if (ADC_SAMPLES > 1) moving_average_offset = ADC_SAMPLES / 2;
      b8:	4b0f      	ldr	r3, [pc, #60]	; (f8 <start_laser_ramp+0x78>)
      ba:	2204      	movs	r2, #4
      bc:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      be:	4b0d      	ldr	r3, [pc, #52]	; (f4 <start_laser_ramp+0x74>)
      c0:	881b      	ldrh	r3, [r3, #0]
      c2:	2200      	movs	r2, #0
      c4:	2110      	movs	r1, #16
      c6:	480d      	ldr	r0, [pc, #52]	; (fc <start_laser_ramp+0x7c>)
      c8:	f001 fc5e 	bl	1988 <__HAL_DAC_SetValue_veneer>
	start_timer(MW_TIMER); //using MW for 1s delay
      cc:	4b0c      	ldr	r3, [pc, #48]	; (100 <start_laser_ramp+0x80>)
      ce:	681b      	ldr	r3, [r3, #0]
      d0:	4618      	mov	r0, r3
      d2:	f001 fc07 	bl	18e4 <start_timer>
    printf("1s delay to allow LD temperature to equalise.\r\n");
      d6:	480b      	ldr	r0, [pc, #44]	; (104 <start_laser_ramp+0x84>)
      d8:	f001 fc66 	bl	19a8 <__puts_veneer>
}
      dc:	bf00      	nop
      de:	bd80      	pop	{r7, pc}
      e0:	2000024c 	.word	0x2000024c
      e4:	58020400 	.word	0x58020400
      e8:	58021800 	.word	0x58021800
      ec:	20000638 	.word	0x20000638
      f0:	2000063c 	.word	0x2000063c
      f4:	20000000 	.word	0x20000000
      f8:	20000250 	.word	0x20000250
      fc:	200002c4 	.word	0x200002c4
     100:	2000001c 	.word	0x2000001c
     104:	0801ba84 	.word	0x0801ba84

00000108 <stop_laser_tuning>:

/**
  * @brief  Stops laser tuning ready to return to POP
  * @retval None
  */
void stop_laser_tuning(void) {
     108:	b580      	push	{r7, lr}
     10a:	af00      	add	r7, sp, #0
	laser_state = LASER_ON_FREQ;
     10c:	4b0b      	ldr	r3, [pc, #44]	; (13c <stop_laser_tuning+0x34>)
     10e:	2200      	movs	r2, #0
     110:	701a      	strb	r2, [r3, #0]
	stop_timer(MW_TIMER); //release MW_timer
     112:	4b0b      	ldr	r3, [pc, #44]	; (140 <stop_laser_tuning+0x38>)
     114:	681b      	ldr	r3, [r3, #0]
     116:	4618      	mov	r0, r3
     118:	f001 fc02 	bl	1920 <stop_timer>
	stop_timer(SWEEP_TIMER); //release SWEEP_timer
     11c:	4b09      	ldr	r3, [pc, #36]	; (144 <stop_laser_tuning+0x3c>)
     11e:	681b      	ldr	r3, [r3, #0]
     120:	4618      	mov	r0, r3
     122:	f001 fbfd 	bl	1920 <stop_timer>
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning output low
     126:	2200      	movs	r2, #0
     128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     12c:	4806      	ldr	r0, [pc, #24]	; (148 <stop_laser_tuning+0x40>)
     12e:	f001 fc37 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     132:	f000 fac5 	bl	6c0 <reset_adc_samples>
}
     136:	bf00      	nop
     138:	bd80      	pop	{r7, pc}
     13a:	bf00      	nop
     13c:	2000024c 	.word	0x2000024c
     140:	2000001c 	.word	0x2000001c
     144:	20000020 	.word	0x20000020
     148:	58020400 	.word	0x58020400

0000014c <laser_update>:

/**
  * @brief  Checks laser locking status to see if an action is needed.
  * @retval True if an action was taken
  */
const bool laser_update(void) {
     14c:	b580      	push	{r7, lr}
     14e:	b086      	sub	sp, #24
     150:	af00      	add	r7, sp, #0
	bool action_taken = false;
     152:	2300      	movs	r3, #0
     154:	75fb      	strb	r3, [r7, #23]
	double sweep_time_s = 0;
     156:	f04f 0200 	mov.w	r2, #0
     15a:	f04f 0300 	mov.w	r3, #0
     15e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t local_copy_of_laser_state = laser_state; //hack to make switch statement behave
     162:	4b95      	ldr	r3, [pc, #596]	; (3b8 <_Min_Heap_Size+0x1b8>)
     164:	781b      	ldrb	r3, [r3, #0]
     166:	71fb      	strb	r3, [r7, #7]
	switch (local_copy_of_laser_state)
     168:	79fb      	ldrb	r3, [r7, #7]
     16a:	2b08      	cmp	r3, #8
     16c:	f200 8212 	bhi.w	594 <_Min_Stack_Size+0x194>
     170:	a201      	add	r2, pc, #4	; (adr r2, 178 <laser_update+0x2c>)
     172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     176:	bf00      	nop
     178:	000005ad 	.word	0x000005ad
     17c:	0000019d 	.word	0x0000019d
     180:	000001cb 	.word	0x000001cb
     184:	00000233 	.word	0x00000233
     188:	000002a7 	.word	0x000002a7
     18c:	000002ef 	.word	0x000002ef
     190:	0000040d 	.word	0x0000040d
     194:	000004c5 	.word	0x000004c5
     198:	00000561 	.word	0x00000561
	{
		case LASER_ON_FREQ:
			break; //no action to take
		case LASER_TEMP_STABILISING:
			if (check_timer(MW_TIMER) < LASER_STAB_US) return(false); //Still waiting, no action taken
     19c:	4b87      	ldr	r3, [pc, #540]	; (3bc <_Min_Heap_Size+0x1bc>)
     19e:	681b      	ldr	r3, [r3, #0]
     1a0:	4618      	mov	r0, r3
     1a2:	f001 fbcf 	bl	1944 <check_timer>
     1a6:	4603      	mov	r3, r0
     1a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     1ac:	d201      	bcs.n	1b2 <laser_update+0x66>
     1ae:	2300      	movs	r3, #0
     1b0:	e208      	b.n	5c4 <_Min_Stack_Size+0x1c4>
			action_taken = true;
     1b2:	2301      	movs	r3, #1
     1b4:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release timer
     1b6:	4b81      	ldr	r3, [pc, #516]	; (3bc <_Min_Heap_Size+0x1bc>)
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	4618      	mov	r0, r3
     1bc:	f001 fbb0 	bl	1920 <stop_timer>
			laser_state = LASER_ON_FREQ;
     1c0:	4b7d      	ldr	r3, [pc, #500]	; (3b8 <_Min_Heap_Size+0x1b8>)
     1c2:	2200      	movs	r2, #0
     1c4:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     1c6:	f000 fa7b 	bl	6c0 <reset_adc_samples>
		case LASER_STEPPED_UP:
			if(adc_average_updated) {
     1ca:	4b7d      	ldr	r3, [pc, #500]	; (3c0 <_Min_Heap_Size+0x1c0>)
     1cc:	781b      	ldrb	r3, [r3, #0]
     1ce:	2b00      	cmp	r3, #0
     1d0:	f000 81ee 	beq.w	5b0 <_Min_Stack_Size+0x1b0>
				adc_polled_above = adc_averaged_val;
     1d4:	4b7b      	ldr	r3, [pc, #492]	; (3c4 <_Min_Heap_Size+0x1c4>)
     1d6:	681b      	ldr	r3, [r3, #0]
     1d8:	4a7b      	ldr	r2, [pc, #492]	; (3c8 <_Min_Heap_Size+0x1c8>)
     1da:	6013      	str	r3, [r2, #0]
				laser_state = LASER_STEPPED_DOWN;
     1dc:	4b76      	ldr	r3, [pc, #472]	; (3b8 <_Min_Heap_Size+0x1b8>)
     1de:	2203      	movs	r2, #3
     1e0:	701a      	strb	r2, [r3, #0]
				if (laser_mod_value < LASER_MIN_MOD + (2 * LASER_STEP)) {
     1e2:	4b7a      	ldr	r3, [pc, #488]	; (3cc <_Min_Heap_Size+0x1cc>)
     1e4:	881b      	ldrh	r3, [r3, #0]
     1e6:	461a      	mov	r2, r3
     1e8:	2303      	movs	r3, #3
     1ea:	3305      	adds	r3, #5
     1ec:	005b      	lsls	r3, r3, #1
     1ee:	429a      	cmp	r2, r3
     1f0:	da0a      	bge.n	208 <_Min_Heap_Size+0x8>
				    printf("LOSS OF LASER LOCK\r\n");
     1f2:	4877      	ldr	r0, [pc, #476]	; (3d0 <_Min_Heap_Size+0x1d0>)
     1f4:	f001 fbd8 	bl	19a8 <__puts_veneer>
				    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
     1f8:	4b74      	ldr	r3, [pc, #464]	; (3cc <_Min_Heap_Size+0x1cc>)
     1fa:	881b      	ldrh	r3, [r3, #0]
     1fc:	4619      	mov	r1, r3
     1fe:	4875      	ldr	r0, [pc, #468]	; (3d4 <_Min_Heap_Size+0x1d4>)
     200:	f001 fbca 	bl	1998 <__printf_veneer>
					Error_Handler();
     204:	f001 fbd4 	bl	19b0 <__Error_Handler_veneer>
				}
				laser_mod_value = laser_mod_value - (2 * LASER_STEP);
     208:	4b70      	ldr	r3, [pc, #448]	; (3cc <_Min_Heap_Size+0x1cc>)
     20a:	881a      	ldrh	r2, [r3, #0]
     20c:	2303      	movs	r3, #3
     20e:	005b      	lsls	r3, r3, #1
     210:	b29b      	uxth	r3, r3
     212:	1ad3      	subs	r3, r2, r3
     214:	b29a      	uxth	r2, r3
     216:	4b6d      	ldr	r3, [pc, #436]	; (3cc <_Min_Heap_Size+0x1cc>)
     218:	801a      	strh	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
     21a:	4b6c      	ldr	r3, [pc, #432]	; (3cc <_Min_Heap_Size+0x1cc>)
     21c:	881b      	ldrh	r3, [r3, #0]
     21e:	2200      	movs	r2, #0
     220:	2110      	movs	r1, #16
     222:	486d      	ldr	r0, [pc, #436]	; (3d8 <_Min_Heap_Size+0x1d8>)
     224:	f001 fbb0 	bl	1988 <__HAL_DAC_SetValue_veneer>
				reset_adc_samples(); //reset ADC samples including sample count
     228:	f000 fa4a 	bl	6c0 <reset_adc_samples>
				action_taken = true;
     22c:	2301      	movs	r3, #1
     22e:	75fb      	strb	r3, [r7, #23]
			}
			break;
     230:	e1be      	b.n	5b0 <_Min_Stack_Size+0x1b0>
		case LASER_STEPPED_DOWN:
			if(adc_average_updated) {
     232:	4b63      	ldr	r3, [pc, #396]	; (3c0 <_Min_Heap_Size+0x1c0>)
     234:	781b      	ldrb	r3, [r3, #0]
     236:	2b00      	cmp	r3, #0
     238:	f000 81bc 	beq.w	5b4 <_Min_Stack_Size+0x1b4>
				adc_polled_below = adc_averaged_val;
     23c:	4b61      	ldr	r3, [pc, #388]	; (3c4 <_Min_Heap_Size+0x1c4>)
     23e:	681b      	ldr	r3, [r3, #0]
     240:	4a66      	ldr	r2, [pc, #408]	; (3dc <_Min_Heap_Size+0x1dc>)
     242:	6013      	str	r3, [r2, #0]
				laser_mod_value += LASER_STEP; //return laser modulation value to pre-tuned value
     244:	4b61      	ldr	r3, [pc, #388]	; (3cc <_Min_Heap_Size+0x1cc>)
     246:	881b      	ldrh	r3, [r3, #0]
     248:	2203      	movs	r2, #3
     24a:	4413      	add	r3, r2
     24c:	b29a      	uxth	r2, r3
     24e:	4b5f      	ldr	r3, [pc, #380]	; (3cc <_Min_Heap_Size+0x1cc>)
     250:	801a      	strh	r2, [r3, #0]
				action_taken = true;
     252:	2301      	movs	r3, #1
     254:	75fb      	strb	r3, [r7, #23]
				if (adc_polled_below > adc_polled_above) {
     256:	4b61      	ldr	r3, [pc, #388]	; (3dc <_Min_Heap_Size+0x1dc>)
     258:	681a      	ldr	r2, [r3, #0]
     25a:	4b5b      	ldr	r3, [pc, #364]	; (3c8 <_Min_Heap_Size+0x1c8>)
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	429a      	cmp	r2, r3
     260:	d905      	bls.n	26e <_Min_Heap_Size+0x6e>
					laser_mod_value++; //increase current by incrementing laser modulation value
     262:	4b5a      	ldr	r3, [pc, #360]	; (3cc <_Min_Heap_Size+0x1cc>)
     264:	881b      	ldrh	r3, [r3, #0]
     266:	3301      	adds	r3, #1
     268:	b29a      	uxth	r2, r3
     26a:	4b58      	ldr	r3, [pc, #352]	; (3cc <_Min_Heap_Size+0x1cc>)
     26c:	801a      	strh	r2, [r3, #0]
				}
				if (adc_polled_above > adc_polled_below) {
     26e:	4b56      	ldr	r3, [pc, #344]	; (3c8 <_Min_Heap_Size+0x1c8>)
     270:	681a      	ldr	r2, [r3, #0]
     272:	4b5a      	ldr	r3, [pc, #360]	; (3dc <_Min_Heap_Size+0x1dc>)
     274:	681b      	ldr	r3, [r3, #0]
     276:	429a      	cmp	r2, r3
     278:	d905      	bls.n	286 <_Min_Heap_Size+0x86>
					laser_mod_value--; //decrease current by decrementing laser modulation value
     27a:	4b54      	ldr	r3, [pc, #336]	; (3cc <_Min_Heap_Size+0x1cc>)
     27c:	881b      	ldrh	r3, [r3, #0]
     27e:	3b01      	subs	r3, #1
     280:	b29a      	uxth	r2, r3
     282:	4b52      	ldr	r3, [pc, #328]	; (3cc <_Min_Heap_Size+0x1cc>)
     284:	801a      	strh	r2, [r3, #0]
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value);
     286:	4b51      	ldr	r3, [pc, #324]	; (3cc <_Min_Heap_Size+0x1cc>)
     288:	881b      	ldrh	r3, [r3, #0]
     28a:	2200      	movs	r2, #0
     28c:	2110      	movs	r1, #16
     28e:	4852      	ldr	r0, [pc, #328]	; (3d8 <_Min_Heap_Size+0x1d8>)
     290:	f001 fb7a 	bl	1988 <__HAL_DAC_SetValue_veneer>
				/* If adding a short delay for LD to stabilise after polling */
				laser_state = LASER_TEMP_STABILISING;
     294:	4b48      	ldr	r3, [pc, #288]	; (3b8 <_Min_Heap_Size+0x1b8>)
     296:	2201      	movs	r2, #1
     298:	701a      	strb	r2, [r3, #0]
				start_timer(MW_TIMER); //using MW for short delay
     29a:	4b48      	ldr	r3, [pc, #288]	; (3bc <_Min_Heap_Size+0x1bc>)
     29c:	681b      	ldr	r3, [r3, #0]
     29e:	4618      	mov	r0, r3
     2a0:	f001 fb20 	bl	18e4 <start_timer>
				/* Substituted with this if no stabilising time is required after polling
				 * laser_state = LASER_ON_FREQ;
				 * reset_adc_samples(); //reset ADC samples including sample count
				 */
			}
			break;
     2a4:	e186      	b.n	5b4 <_Min_Stack_Size+0x1b4>
		case LASER_RAMP_PHASE_ONE: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     2a6:	4b45      	ldr	r3, [pc, #276]	; (3bc <_Min_Heap_Size+0x1bc>)
     2a8:	681b      	ldr	r3, [r3, #0]
     2aa:	4618      	mov	r0, r3
     2ac:	f001 fb4a 	bl	1944 <check_timer>
     2b0:	4603      	mov	r3, r0
     2b2:	4a4b      	ldr	r2, [pc, #300]	; (3e0 <_Min_Heap_Size+0x1e0>)
     2b4:	4293      	cmp	r3, r2
     2b6:	d801      	bhi.n	2bc <_Min_Heap_Size+0xbc>
     2b8:	2300      	movs	r3, #0
     2ba:	e183      	b.n	5c4 <_Min_Stack_Size+0x1c4>
			action_taken = true;
     2bc:	2301      	movs	r3, #1
     2be:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release MW_timer
     2c0:	4b3e      	ldr	r3, [pc, #248]	; (3bc <_Min_Heap_Size+0x1bc>)
     2c2:	681b      	ldr	r3, [r3, #0]
     2c4:	4618      	mov	r0, r3
     2c6:	f001 fb2b 	bl	1920 <stop_timer>
			laser_state = LASER_RAMP_PHASE_TWO;
     2ca:	4b3b      	ldr	r3, [pc, #236]	; (3b8 <_Min_Heap_Size+0x1b8>)
     2cc:	2205      	movs	r2, #5
     2ce:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     2d0:	2200      	movs	r2, #0
     2d2:	2101      	movs	r1, #1
     2d4:	4843      	ldr	r0, [pc, #268]	; (3e4 <_Min_Heap_Size+0x1e4>)
     2d6:	f001 fb63 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
			reset_adc_samples(); //reset ADC samples including sample count
     2da:	f000 f9f1 	bl	6c0 <reset_adc_samples>
			start_timer(SWEEP_TIMER); //
     2de:	4b42      	ldr	r3, [pc, #264]	; (3e8 <_Min_Heap_Size+0x1e8>)
     2e0:	681b      	ldr	r3, [r3, #0]
     2e2:	4618      	mov	r0, r3
     2e4:	f001 fafe 	bl	18e4 <start_timer>
		    printf("Starting laser frequency scan.\r\n");
     2e8:	4840      	ldr	r0, [pc, #256]	; (3ec <_Min_Heap_Size+0x1ec>)
     2ea:	f001 fb5d 	bl	19a8 <__puts_veneer>
		    //break statement not required here

		case LASER_RAMP_PHASE_TWO: //finding F=2 dip
			if(adc_average_updated) {
     2ee:	4b34      	ldr	r3, [pc, #208]	; (3c0 <_Min_Heap_Size+0x1c0>)
     2f0:	781b      	ldrb	r3, [r3, #0]
     2f2:	2b00      	cmp	r3, #0
     2f4:	f000 8160 	beq.w	5b8 <_Min_Stack_Size+0x1b8>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     2f8:	4b32      	ldr	r3, [pc, #200]	; (3c4 <_Min_Heap_Size+0x1c4>)
     2fa:	681a      	ldr	r2, [r3, #0]
     2fc:	4b3c      	ldr	r3, [pc, #240]	; (3f0 <_Min_Heap_Size+0x1f0>)
     2fe:	681b      	ldr	r3, [r3, #0]
     300:	429a      	cmp	r2, r3
     302:	d207      	bcs.n	314 <_Min_Heap_Size+0x114>
					adc_averaged_min = adc_averaged_val; //record new mininum
     304:	4b2f      	ldr	r3, [pc, #188]	; (3c4 <_Min_Heap_Size+0x1c4>)
     306:	681b      	ldr	r3, [r3, #0]
     308:	4a39      	ldr	r2, [pc, #228]	; (3f0 <_Min_Heap_Size+0x1f0>)
     30a:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     30c:	4b2f      	ldr	r3, [pc, #188]	; (3cc <_Min_Heap_Size+0x1cc>)
     30e:	881a      	ldrh	r2, [r3, #0]
     310:	4b38      	ldr	r3, [pc, #224]	; (3f4 <_Min_Heap_Size+0x1f4>)
     312:	801a      	strh	r2, [r3, #0]
				}
				/* Detect when we've passed F=2 dip
				 * If the latest reading is significantly higher than the minimum
				 * then record F=2 and look for F=3
				 */
				if ((adc_averaged_val - adc_averaged_min) >= DIP_THRESHOLD ) {//if the latest reading is significantly above the minimum
     314:	4b2b      	ldr	r3, [pc, #172]	; (3c4 <_Min_Heap_Size+0x1c4>)
     316:	681a      	ldr	r2, [r3, #0]
     318:	4b35      	ldr	r3, [pc, #212]	; (3f0 <_Min_Heap_Size+0x1f0>)
     31a:	681b      	ldr	r3, [r3, #0]
     31c:	1ad3      	subs	r3, r2, r3
     31e:	2bf7      	cmp	r3, #247	; 0xf7
     320:	d90e      	bls.n	340 <_Min_Heap_Size+0x140>
					F2_mod_value = saved_mod_value - moving_average_offset; //record the modulation value for the F=2 dip
     322:	4b34      	ldr	r3, [pc, #208]	; (3f4 <_Min_Heap_Size+0x1f4>)
     324:	881a      	ldrh	r2, [r3, #0]
     326:	4b34      	ldr	r3, [pc, #208]	; (3f8 <_Min_Heap_Size+0x1f8>)
     328:	881b      	ldrh	r3, [r3, #0]
     32a:	1ad3      	subs	r3, r2, r3
     32c:	b29a      	uxth	r2, r3
     32e:	4b33      	ldr	r3, [pc, #204]	; (3fc <_Min_Heap_Size+0x1fc>)
     330:	801a      	strh	r2, [r3, #0]
					adc_averaged_min = 0xFFFF; //reset the saved minimum
     332:	4b2f      	ldr	r3, [pc, #188]	; (3f0 <_Min_Heap_Size+0x1f0>)
     334:	f64f 72ff 	movw	r2, #65535	; 0xffff
     338:	601a      	str	r2, [r3, #0]
					laser_state = LASER_RAMP_PHASE_THREE;
     33a:	4b1f      	ldr	r3, [pc, #124]	; (3b8 <_Min_Heap_Size+0x1b8>)
     33c:	2206      	movs	r2, #6
     33e:	701a      	strb	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     340:	4b22      	ldr	r3, [pc, #136]	; (3cc <_Min_Heap_Size+0x1cc>)
     342:	881b      	ldrh	r3, [r3, #0]
     344:	2203      	movs	r2, #3
     346:	4413      	add	r3, r2
     348:	b29a      	uxth	r2, r3
     34a:	4b20      	ldr	r3, [pc, #128]	; (3cc <_Min_Heap_Size+0x1cc>)
     34c:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     34e:	4b1f      	ldr	r3, [pc, #124]	; (3cc <_Min_Heap_Size+0x1cc>)
     350:	881b      	ldrh	r3, [r3, #0]
     352:	f640 52ab 	movw	r2, #3499	; 0xdab
     356:	4293      	cmp	r3, r2
     358:	d91c      	bls.n	394 <_Min_Heap_Size+0x194>
				    printf("Have completed absorption scan without detecting any dips.\r\n");
     35a:	4829      	ldr	r0, [pc, #164]	; (400 <_Min_Stack_Size>)
     35c:	f001 fb24 	bl	19a8 <__puts_veneer>
				    printf("DIP_THRESHOLD: %u\r\n", DIP_THRESHOLD);
     360:	21f8      	movs	r1, #248	; 0xf8
     362:	4828      	ldr	r0, [pc, #160]	; (404 <_Min_Stack_Size+0x4>)
     364:	f001 fb18 	bl	1998 <__printf_veneer>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     368:	4b1f      	ldr	r3, [pc, #124]	; (3e8 <_Min_Heap_Size+0x1e8>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	4618      	mov	r0, r3
     36e:	f001 fad7 	bl	1920 <stop_timer>
     372:	ee07 0a90 	vmov	s15, r0
     376:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     37a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 3b0 <_Min_Heap_Size+0x1b0>
     37e:	ee86 7b05 	vdiv.f64	d7, d6, d5
     382:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Sweep complete in %.3g s.\r\n", sweep_time_s);
     386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     38a:	481f      	ldr	r0, [pc, #124]	; (408 <_Min_Stack_Size+0x8>)
     38c:	f001 fb04 	bl	1998 <__printf_veneer>
					Error_Handler();
     390:	f001 fb0e 	bl	19b0 <__Error_Handler_veneer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     394:	4b0d      	ldr	r3, [pc, #52]	; (3cc <_Min_Heap_Size+0x1cc>)
     396:	881b      	ldrh	r3, [r3, #0]
     398:	2200      	movs	r2, #0
     39a:	2110      	movs	r1, #16
     39c:	480e      	ldr	r0, [pc, #56]	; (3d8 <_Min_Heap_Size+0x1d8>)
     39e:	f001 faf3 	bl	1988 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     3a2:	4b07      	ldr	r3, [pc, #28]	; (3c0 <_Min_Heap_Size+0x1c0>)
     3a4:	2200      	movs	r2, #0
     3a6:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     3a8:	2301      	movs	r3, #1
     3aa:	75fb      	strb	r3, [r7, #23]
			}
			break;
     3ac:	e104      	b.n	5b8 <_Min_Stack_Size+0x1b8>
     3ae:	bf00      	nop
     3b0:	00000000 	.word	0x00000000
     3b4:	412e8480 	.word	0x412e8480
     3b8:	2000024c 	.word	0x2000024c
     3bc:	2000001c 	.word	0x2000001c
     3c0:	20000634 	.word	0x20000634
     3c4:	20000608 	.word	0x20000608
     3c8:	20000258 	.word	0x20000258
     3cc:	20000000 	.word	0x20000000
     3d0:	0801ba48 	.word	0x0801ba48
     3d4:	0801ba5c 	.word	0x0801ba5c
     3d8:	200002c4 	.word	0x200002c4
     3dc:	2000025c 	.word	0x2000025c
     3e0:	000f423f 	.word	0x000f423f
     3e4:	58021800 	.word	0x58021800
     3e8:	20000020 	.word	0x20000020
     3ec:	0801bab4 	.word	0x0801bab4
     3f0:	2000063c 	.word	0x2000063c
     3f4:	2000024e 	.word	0x2000024e
     3f8:	20000250 	.word	0x20000250
     3fc:	20000252 	.word	0x20000252
     400:	0801bad4 	.word	0x0801bad4
     404:	0801bb10 	.word	0x0801bb10
     408:	0801bb24 	.word	0x0801bb24
		case LASER_RAMP_PHASE_THREE: //finding F=3 dip
			if(adc_average_updated) {
     40c:	4b72      	ldr	r3, [pc, #456]	; (5d8 <_Min_Stack_Size+0x1d8>)
     40e:	781b      	ldrb	r3, [r3, #0]
     410:	2b00      	cmp	r3, #0
     412:	f000 80d3 	beq.w	5bc <_Min_Stack_Size+0x1bc>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     416:	4b71      	ldr	r3, [pc, #452]	; (5dc <_Min_Stack_Size+0x1dc>)
     418:	681a      	ldr	r2, [r3, #0]
     41a:	4b71      	ldr	r3, [pc, #452]	; (5e0 <_Min_Stack_Size+0x1e0>)
     41c:	681b      	ldr	r3, [r3, #0]
     41e:	429a      	cmp	r2, r3
     420:	d207      	bcs.n	432 <_Min_Stack_Size+0x32>
					adc_averaged_min = adc_averaged_val; //record new mininum
     422:	4b6e      	ldr	r3, [pc, #440]	; (5dc <_Min_Stack_Size+0x1dc>)
     424:	681b      	ldr	r3, [r3, #0]
     426:	4a6e      	ldr	r2, [pc, #440]	; (5e0 <_Min_Stack_Size+0x1e0>)
     428:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     42a:	4b6e      	ldr	r3, [pc, #440]	; (5e4 <_Min_Stack_Size+0x1e4>)
     42c:	881a      	ldrh	r2, [r3, #0]
     42e:	4b6e      	ldr	r3, [pc, #440]	; (5e8 <_Min_Stack_Size+0x1e8>)
     430:	801a      	strh	r2, [r3, #0]
				}
				/* Detect when we've passed F=3 dip
				 * If the latest reading is significantly higher than the minimum
				 * then record F=3
				 */
				if ((adc_averaged_val - adc_averaged_min) >= DIP_THRESHOLD) {//if the latest reading is significant above the minimum
     432:	4b6a      	ldr	r3, [pc, #424]	; (5dc <_Min_Stack_Size+0x1dc>)
     434:	681a      	ldr	r2, [r3, #0]
     436:	4b6a      	ldr	r3, [pc, #424]	; (5e0 <_Min_Stack_Size+0x1e0>)
     438:	681b      	ldr	r3, [r3, #0]
     43a:	1ad3      	subs	r3, r2, r3
     43c:	2bf7      	cmp	r3, #247	; 0xf7
     43e:	d90a      	bls.n	456 <_Min_Stack_Size+0x56>
					F3_mod_value = saved_mod_value - moving_average_offset; //record the modulation value for the F=3 dip
     440:	4b69      	ldr	r3, [pc, #420]	; (5e8 <_Min_Stack_Size+0x1e8>)
     442:	881a      	ldrh	r2, [r3, #0]
     444:	4b69      	ldr	r3, [pc, #420]	; (5ec <_Min_Stack_Size+0x1ec>)
     446:	881b      	ldrh	r3, [r3, #0]
     448:	1ad3      	subs	r3, r2, r3
     44a:	b29a      	uxth	r2, r3
     44c:	4b68      	ldr	r3, [pc, #416]	; (5f0 <_Min_Stack_Size+0x1f0>)
     44e:	801a      	strh	r2, [r3, #0]
					laser_state = LASER_RAMP_PHASE_FOUR;
     450:	4b68      	ldr	r3, [pc, #416]	; (5f4 <_Min_Stack_Size+0x1f4>)
     452:	2207      	movs	r2, #7
     454:	701a      	strb	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     456:	4b63      	ldr	r3, [pc, #396]	; (5e4 <_Min_Stack_Size+0x1e4>)
     458:	881b      	ldrh	r3, [r3, #0]
     45a:	2203      	movs	r2, #3
     45c:	4413      	add	r3, r2
     45e:	b29a      	uxth	r2, r3
     460:	4b60      	ldr	r3, [pc, #384]	; (5e4 <_Min_Stack_Size+0x1e4>)
     462:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     464:	4b5f      	ldr	r3, [pc, #380]	; (5e4 <_Min_Stack_Size+0x1e4>)
     466:	881b      	ldrh	r3, [r3, #0]
     468:	f640 52ab 	movw	r2, #3499	; 0xdab
     46c:	4293      	cmp	r3, r2
     46e:	d91c      	bls.n	4aa <_Min_Stack_Size+0xaa>
					printf("Have completed absorption scan without detecting F=3 DIP.\r\n");
     470:	4861      	ldr	r0, [pc, #388]	; (5f8 <_Min_Stack_Size+0x1f8>)
     472:	f001 fa99 	bl	19a8 <__puts_veneer>
					printf("DIP_THRESHOLD: %u\r\n", DIP_THRESHOLD);
     476:	21f8      	movs	r1, #248	; 0xf8
     478:	4860      	ldr	r0, [pc, #384]	; (5fc <_Min_Stack_Size+0x1fc>)
     47a:	f001 fa8d 	bl	1998 <__printf_veneer>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     47e:	4b60      	ldr	r3, [pc, #384]	; (600 <_Min_Stack_Size+0x200>)
     480:	681b      	ldr	r3, [r3, #0]
     482:	4618      	mov	r0, r3
     484:	f001 fa4c 	bl	1920 <stop_timer>
     488:	ee07 0a90 	vmov	s15, r0
     48c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     490:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 5d0 <_Min_Stack_Size+0x1d0>
     494:	ee86 7b05 	vdiv.f64	d7, d6, d5
     498:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Sweep complete in %.3g s.\r\n", sweep_time_s);
     49c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     4a0:	4858      	ldr	r0, [pc, #352]	; (604 <_Min_Stack_Size+0x204>)
     4a2:	f001 fa79 	bl	1998 <__printf_veneer>
					Error_Handler();
     4a6:	f001 fa83 	bl	19b0 <__Error_Handler_veneer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     4aa:	4b4e      	ldr	r3, [pc, #312]	; (5e4 <_Min_Stack_Size+0x1e4>)
     4ac:	881b      	ldrh	r3, [r3, #0]
     4ae:	2200      	movs	r2, #0
     4b0:	2110      	movs	r1, #16
     4b2:	4855      	ldr	r0, [pc, #340]	; (608 <_Min_Stack_Size+0x208>)
     4b4:	f001 fa68 	bl	1988 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     4b8:	4b47      	ldr	r3, [pc, #284]	; (5d8 <_Min_Stack_Size+0x1d8>)
     4ba:	2200      	movs	r2, #0
     4bc:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     4be:	2301      	movs	r3, #1
     4c0:	75fb      	strb	r3, [r7, #23]
			}
			break;
     4c2:	e07b      	b.n	5bc <_Min_Stack_Size+0x1bc>
		case LASER_RAMP_PHASE_FOUR: //finishing the current sweep
			if(adc_average_updated) {
     4c4:	4b44      	ldr	r3, [pc, #272]	; (5d8 <_Min_Stack_Size+0x1d8>)
     4c6:	781b      	ldrb	r3, [r3, #0]
     4c8:	2b00      	cmp	r3, #0
     4ca:	d079      	beq.n	5c0 <_Min_Stack_Size+0x1c0>
				laser_mod_value += LASER_STEP; //next laser step
     4cc:	4b45      	ldr	r3, [pc, #276]	; (5e4 <_Min_Stack_Size+0x1e4>)
     4ce:	881b      	ldrh	r3, [r3, #0]
     4d0:	2203      	movs	r2, #3
     4d2:	4413      	add	r3, r2
     4d4:	b29a      	uxth	r2, r3
     4d6:	4b43      	ldr	r3, [pc, #268]	; (5e4 <_Min_Stack_Size+0x1e4>)
     4d8:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     4da:	4b42      	ldr	r3, [pc, #264]	; (5e4 <_Min_Stack_Size+0x1e4>)
     4dc:	881b      	ldrh	r3, [r3, #0]
     4de:	f640 52ab 	movw	r2, #3499	; 0xdab
     4e2:	4293      	cmp	r3, r2
     4e4:	d92f      	bls.n	546 <_Min_Stack_Size+0x146>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     4e6:	4b46      	ldr	r3, [pc, #280]	; (600 <_Min_Stack_Size+0x200>)
     4e8:	681b      	ldr	r3, [r3, #0]
     4ea:	4618      	mov	r0, r3
     4ec:	f001 fa18 	bl	1920 <stop_timer>
     4f0:	ee07 0a90 	vmov	s15, r0
     4f4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     4f8:	ed9f 5b35 	vldr	d5, [pc, #212]	; 5d0 <_Min_Stack_Size+0x1d0>
     4fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
     500:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Absorption spectroscopy complete in %.3g s.\r\n", sweep_time_s);
     504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     508:	4840      	ldr	r0, [pc, #256]	; (60c <_Min_Stack_Size+0x20c>)
     50a:	f001 fa45 	bl	1998 <__printf_veneer>
					printf("F=2 dip detected at step %u.\r\n", F2_mod_value);
     50e:	4b40      	ldr	r3, [pc, #256]	; (610 <_Min_Stack_Size+0x210>)
     510:	881b      	ldrh	r3, [r3, #0]
     512:	4619      	mov	r1, r3
     514:	483f      	ldr	r0, [pc, #252]	; (614 <_Min_Stack_Size+0x214>)
     516:	f001 fa3f 	bl	1998 <__printf_veneer>
					printf("F=3 dip detected at step %u.\r\n", F3_mod_value);
     51a:	4b35      	ldr	r3, [pc, #212]	; (5f0 <_Min_Stack_Size+0x1f0>)
     51c:	881b      	ldrh	r3, [r3, #0]
     51e:	4619      	mov	r1, r3
     520:	483d      	ldr	r0, [pc, #244]	; (618 <_Min_Stack_Size+0x218>)
     522:	f001 fa39 	bl	1998 <__printf_veneer>
					HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Resets trigger output
     526:	2201      	movs	r2, #1
     528:	2101      	movs	r1, #1
     52a:	483c      	ldr	r0, [pc, #240]	; (61c <_Min_Stack_Size+0x21c>)
     52c:	f001 fa38 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
					if (LOCK_TO_DIP == 2) {
						laser_mod_value = F2_mod_value;
     530:	4b37      	ldr	r3, [pc, #220]	; (610 <_Min_Stack_Size+0x210>)
     532:	881a      	ldrh	r2, [r3, #0]
     534:	4b2b      	ldr	r3, [pc, #172]	; (5e4 <_Min_Stack_Size+0x1e4>)
     536:	801a      	strh	r2, [r3, #0]
						laser_mod_value = F3_mod_value;
					} else {
						printf("Illegal DIP specified. LOCK_TO_DIP = %u.\r\n", LOCK_TO_DIP);
						Error_Handler();
					}
					printf("F=%u dip selected.\r\n", LOCK_TO_DIP);
     538:	2102      	movs	r1, #2
     53a:	4839      	ldr	r0, [pc, #228]	; (620 <_Min_Stack_Size+0x220>)
     53c:	f001 fa2c 	bl	1998 <__printf_veneer>
					laser_state = LASER_TEMP_STABILISING;
     540:	4b2c      	ldr	r3, [pc, #176]	; (5f4 <_Min_Stack_Size+0x1f4>)
     542:	2201      	movs	r2, #1
     544:	701a      	strb	r2, [r3, #0]
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     546:	4b27      	ldr	r3, [pc, #156]	; (5e4 <_Min_Stack_Size+0x1e4>)
     548:	881b      	ldrh	r3, [r3, #0]
     54a:	2200      	movs	r2, #0
     54c:	2110      	movs	r1, #16
     54e:	482e      	ldr	r0, [pc, #184]	; (608 <_Min_Stack_Size+0x208>)
     550:	f001 fa1a 	bl	1988 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     554:	4b20      	ldr	r3, [pc, #128]	; (5d8 <_Min_Stack_Size+0x1d8>)
     556:	2200      	movs	r2, #0
     558:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     55a:	2301      	movs	r3, #1
     55c:	75fb      	strb	r3, [r7, #23]
			}
			break;
     55e:	e02f      	b.n	5c0 <_Min_Stack_Size+0x1c0>
		case LASER_RAMP_PHASE_FIVE: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     560:	4b30      	ldr	r3, [pc, #192]	; (624 <_Min_Stack_Size+0x224>)
     562:	681b      	ldr	r3, [r3, #0]
     564:	4618      	mov	r0, r3
     566:	f001 f9ed 	bl	1944 <check_timer>
     56a:	4603      	mov	r3, r0
     56c:	4a2e      	ldr	r2, [pc, #184]	; (628 <_Min_Stack_Size+0x228>)
     56e:	4293      	cmp	r3, r2
     570:	d801      	bhi.n	576 <_Min_Stack_Size+0x176>
     572:	2300      	movs	r3, #0
     574:	e026      	b.n	5c4 <_Min_Stack_Size+0x1c4>
			action_taken = true;
     576:	2301      	movs	r3, #1
     578:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release MW_timer
     57a:	4b2a      	ldr	r3, [pc, #168]	; (624 <_Min_Stack_Size+0x224>)
     57c:	681b      	ldr	r3, [r3, #0]
     57e:	4618      	mov	r0, r3
     580:	f001 f9ce 	bl	1920 <stop_timer>
			laser_state = LASER_ON_FREQ;
     584:	4b1b      	ldr	r3, [pc, #108]	; (5f4 <_Min_Stack_Size+0x1f4>)
     586:	2200      	movs	r2, #0
     588:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     58a:	f000 f899 	bl	6c0 <reset_adc_samples>
		    printf("LD temperature stabilised.\r\n");
     58e:	4827      	ldr	r0, [pc, #156]	; (62c <_Min_Stack_Size+0x22c>)
     590:	f001 fa0a 	bl	19a8 <__puts_veneer>

		default: // Other state
	       printf("laser_update has detected illegal state: %u \r\n", laser_state);
     594:	4b17      	ldr	r3, [pc, #92]	; (5f4 <_Min_Stack_Size+0x1f4>)
     596:	781b      	ldrb	r3, [r3, #0]
     598:	4619      	mov	r1, r3
     59a:	4825      	ldr	r0, [pc, #148]	; (630 <_Min_Stack_Size+0x230>)
     59c:	f001 f9fc 	bl	1998 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_laser_state);
     5a0:	79fb      	ldrb	r3, [r7, #7]
     5a2:	4619      	mov	r1, r3
     5a4:	4823      	ldr	r0, [pc, #140]	; (634 <_Min_Stack_Size+0x234>)
     5a6:	f001 f9f7 	bl	1998 <__printf_veneer>
     5aa:	e00a      	b.n	5c2 <_Min_Stack_Size+0x1c2>
			break; //no action to take
     5ac:	bf00      	nop
     5ae:	e008      	b.n	5c2 <_Min_Stack_Size+0x1c2>
			break;
     5b0:	bf00      	nop
     5b2:	e006      	b.n	5c2 <_Min_Stack_Size+0x1c2>
			break;
     5b4:	bf00      	nop
     5b6:	e004      	b.n	5c2 <_Min_Stack_Size+0x1c2>
			break;
     5b8:	bf00      	nop
     5ba:	e002      	b.n	5c2 <_Min_Stack_Size+0x1c2>
			break;
     5bc:	bf00      	nop
     5be:	e000      	b.n	5c2 <_Min_Stack_Size+0x1c2>
			break;
     5c0:	bf00      	nop
	}
    return(action_taken);
     5c2:	7dfb      	ldrb	r3, [r7, #23]
}
     5c4:	4618      	mov	r0, r3
     5c6:	3718      	adds	r7, #24
     5c8:	46bd      	mov	sp, r7
     5ca:	bd80      	pop	{r7, pc}
     5cc:	f3af 8000 	nop.w
     5d0:	00000000 	.word	0x00000000
     5d4:	412e8480 	.word	0x412e8480
     5d8:	20000634 	.word	0x20000634
     5dc:	20000608 	.word	0x20000608
     5e0:	2000063c 	.word	0x2000063c
     5e4:	20000000 	.word	0x20000000
     5e8:	2000024e 	.word	0x2000024e
     5ec:	20000250 	.word	0x20000250
     5f0:	20000254 	.word	0x20000254
     5f4:	2000024c 	.word	0x2000024c
     5f8:	0801bb40 	.word	0x0801bb40
     5fc:	0801bb10 	.word	0x0801bb10
     600:	20000020 	.word	0x20000020
     604:	0801bb24 	.word	0x0801bb24
     608:	200002c4 	.word	0x200002c4
     60c:	0801bb7c 	.word	0x0801bb7c
     610:	20000252 	.word	0x20000252
     614:	0801bbac 	.word	0x0801bbac
     618:	0801bbcc 	.word	0x0801bbcc
     61c:	58021800 	.word	0x58021800
     620:	0801bbec 	.word	0x0801bbec
     624:	2000001c 	.word	0x2000001c
     628:	000f423f 	.word	0x000f423f
     62c:	0801bc04 	.word	0x0801bc04
     630:	0801bc20 	.word	0x0801bc20
     634:	0801bc50 	.word	0x0801bc50

00000638 <measure_POP_cycle_time>:
  * @brief  Measure POP cycle time
  * @param  None
  * @retval None
  */
void measure_POP_cycle_time (void)
{
     638:	b580      	push	{r7, lr}
     63a:	af00      	add	r7, sp, #0
	/* Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Should be performed before calculating sweep settings
	 */
	stop_laser_tuning(); //ensure MW_timer not being used and laser tuning pin high
     63c:	f7ff fd64 	bl	108 <stop_laser_tuning>
	start_timer(SWEEP_TIMER); //Using sweep timer for 3s timeout
     640:	4b13      	ldr	r3, [pc, #76]	; (690 <measure_POP_cycle_time+0x58>)
     642:	681b      	ldr	r3, [r3, #0]
     644:	4618      	mov	r0, r3
     646:	f001 f94d 	bl	18e4 <start_timer>
	start_POP_calibration(true);
     64a:	2001      	movs	r0, #1
     64c:	f000 fe4c 	bl	12e8 <start_POP_calibration>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     650:	e001      	b.n	656 <measure_POP_cycle_time+0x1e>
		MW_update();
     652:	f000 feef 	bl	1434 <MW_update>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     656:	4b0f      	ldr	r3, [pc, #60]	; (694 <measure_POP_cycle_time+0x5c>)
     658:	681b      	ldr	r3, [r3, #0]
     65a:	2b00      	cmp	r3, #0
     65c:	d108      	bne.n	670 <measure_POP_cycle_time+0x38>
     65e:	4b0c      	ldr	r3, [pc, #48]	; (690 <measure_POP_cycle_time+0x58>)
     660:	681b      	ldr	r3, [r3, #0]
     662:	4618      	mov	r0, r3
     664:	f001 f96e 	bl	1944 <check_timer>
     668:	4603      	mov	r3, r0
     66a:	4a0b      	ldr	r2, [pc, #44]	; (698 <measure_POP_cycle_time+0x60>)
     66c:	4293      	cmp	r3, r2
     66e:	d9f0      	bls.n	652 <measure_POP_cycle_time+0x1a>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
     670:	4b07      	ldr	r3, [pc, #28]	; (690 <measure_POP_cycle_time+0x58>)
     672:	681b      	ldr	r3, [r3, #0]
     674:	4618      	mov	r0, r3
     676:	f001 f953 	bl	1920 <stop_timer>
	if (!POP_period_us) {//if the calibration loop timed out
     67a:	4b06      	ldr	r3, [pc, #24]	; (694 <measure_POP_cycle_time+0x5c>)
     67c:	681b      	ldr	r3, [r3, #0]
     67e:	2b00      	cmp	r3, #0
     680:	d102      	bne.n	688 <measure_POP_cycle_time+0x50>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
     682:	4806      	ldr	r0, [pc, #24]	; (69c <measure_POP_cycle_time+0x64>)
     684:	f001 f990 	bl	19a8 <__puts_veneer>
	}
	stop_MW_operation(); //release MW_SWEEP timer and ensure MW_INVALID is cleared
     688:	f000 febc 	bl	1404 <stop_MW_operation>
}
     68c:	bf00      	nop
     68e:	bd80      	pop	{r7, pc}
     690:	20000020 	.word	0x20000020
     694:	20000600 	.word	0x20000600
     698:	002dc6bf 	.word	0x002dc6bf
     69c:	0801bc68 	.word	0x0801bc68

000006a0 <system_mode_laser_tuning>:
{
     6a0:	b580      	push	{r7, lr}
     6a2:	af00      	add	r7, sp, #0
	stop_MW_operation(); //resets MW timers, sets MW_invalid pin low (to ensure ADC sample pulse) and sets correct MW state
     6a4:	f000 feae 	bl	1404 <stop_MW_operation>
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
     6a8:	2201      	movs	r2, #1
     6aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     6ae:	4803      	ldr	r0, [pc, #12]	; (6bc <system_mode_laser_tuning+0x1c>)
     6b0:	f001 f976 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     6b4:	f000 f804 	bl	6c0 <reset_adc_samples>
}
     6b8:	bf00      	nop
     6ba:	bd80      	pop	{r7, pc}
     6bc:	58020400 	.word	0x58020400

000006c0 <reset_adc_samples>:
{
     6c0:	b480      	push	{r7}
     6c2:	af00      	add	r7, sp, #0
	adc_average_updated = false; //signals to other functions that adc_averaged_val shouldn't be read
     6c4:	4b08      	ldr	r3, [pc, #32]	; (6e8 <reset_adc_samples+0x28>)
     6c6:	2200      	movs	r2, #0
     6c8:	701a      	strb	r2, [r3, #0]
	adc_sample_no = 0; //reset cyclical sample counter
     6ca:	4b08      	ldr	r3, [pc, #32]	; (6ec <reset_adc_samples+0x2c>)
     6cc:	2200      	movs	r2, #0
     6ce:	801a      	strh	r2, [r3, #0]
	adc_readings_total = 0; //zeroes the total counter
     6d0:	4b07      	ldr	r3, [pc, #28]	; (6f0 <reset_adc_samples+0x30>)
     6d2:	2200      	movs	r2, #0
     6d4:	601a      	str	r2, [r3, #0]
	sample_count=0; //reset the main ADC sample counter
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <reset_adc_samples+0x34>)
     6d8:	2200      	movs	r2, #0
     6da:	801a      	strh	r2, [r3, #0]
}
     6dc:	bf00      	nop
     6de:	46bd      	mov	sp, r7
     6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6e4:	4770      	bx	lr
     6e6:	bf00      	nop
     6e8:	20000634 	.word	0x20000634
     6ec:	2000062c 	.word	0x2000062c
     6f0:	20000630 	.word	0x20000630
     6f4:	200005fe 	.word	0x200005fe

000006f8 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
     6f8:	b580      	push	{r7, lr}
     6fa:	b08a      	sub	sp, #40	; 0x28
     6fc:	af00      	add	r7, sp, #0
     6fe:	60f8      	str	r0, [r7, #12]
     700:	60b9      	str	r1, [r7, #8]
     702:	607a      	str	r2, [r7, #4]
     704:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
     706:	2300      	movs	r3, #0
     708:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
     70a:	68fb      	ldr	r3, [r7, #12]
     70c:	021a      	lsls	r2, r3, #8
     70e:	68bb      	ldr	r3, [r7, #8]
     710:	00db      	lsls	r3, r3, #3
     712:	4313      	orrs	r3, r2
     714:	687a      	ldr	r2, [r7, #4]
     716:	4313      	orrs	r3, r2
     718:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     71a:	2200      	movs	r2, #0
     71c:	f44f 7180 	mov.w	r1, #256	; 0x100
     720:	4830      	ldr	r0, [pc, #192]	; (7e4 <synth_writereg+0xec>)
     722:	f001 f93d 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
     726:	2200      	movs	r2, #0
     728:	f44f 6100 	mov.w	r1, #2048	; 0x800
     72c:	482d      	ldr	r0, [pc, #180]	; (7e4 <synth_writereg+0xec>)
     72e:	f001 f937 	bl	19a0 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     732:	2300      	movs	r3, #0
     734:	623b      	str	r3, [r7, #32]
     736:	e036      	b.n	7a6 <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
     738:	2220      	movs	r2, #32
     73a:	6a3b      	ldr	r3, [r7, #32]
     73c:	1ad3      	subs	r3, r2, r3
     73e:	3b01      	subs	r3, #1
     740:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
     742:	2201      	movs	r2, #1
     744:	697b      	ldr	r3, [r7, #20]
     746:	fa02 f303 	lsl.w	r3, r2, r3
     74a:	461a      	mov	r2, r3
     74c:	69fb      	ldr	r3, [r7, #28]
     74e:	4013      	ands	r3, r2
     750:	2b00      	cmp	r3, #0
     752:	bf14      	ite	ne
     754:	2301      	movne	r3, #1
     756:	2300      	moveq	r3, #0
     758:	b2db      	uxtb	r3, r3
     75a:	461a      	mov	r2, r3
     75c:	f44f 7100 	mov.w	r1, #512	; 0x200
     760:	4820      	ldr	r0, [pc, #128]	; (7e4 <synth_writereg+0xec>)
     762:	f001 f91d 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
     766:	2201      	movs	r2, #1
     768:	f44f 7180 	mov.w	r1, #256	; 0x100
     76c:	481d      	ldr	r0, [pc, #116]	; (7e4 <synth_writereg+0xec>)
     76e:	f001 f917 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     772:	2200      	movs	r2, #0
     774:	f44f 7180 	mov.w	r1, #256	; 0x100
     778:	481a      	ldr	r0, [pc, #104]	; (7e4 <synth_writereg+0xec>)
     77a:	f001 f911 	bl	19a0 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
     77e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     782:	4818      	ldr	r0, [pc, #96]	; (7e4 <synth_writereg+0xec>)
     784:	f001 f91c 	bl	19c0 <__HAL_GPIO_ReadPin_veneer>
     788:	4603      	mov	r3, r0
     78a:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
     78c:	2220      	movs	r2, #32
     78e:	6a3b      	ldr	r3, [r7, #32]
     790:	1ad3      	subs	r3, r2, r3
     792:	3b01      	subs	r3, #1
     794:	fa01 f303 	lsl.w	r3, r1, r3
     798:	461a      	mov	r2, r3
		read_data = read_data
     79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     79c:	4313      	orrs	r3, r2
     79e:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     7a0:	6a3b      	ldr	r3, [r7, #32]
     7a2:	3301      	adds	r3, #1
     7a4:	623b      	str	r3, [r7, #32]
     7a6:	2220      	movs	r2, #32
     7a8:	6a3b      	ldr	r3, [r7, #32]
     7aa:	4293      	cmp	r3, r2
     7ac:	d3c4      	bcc.n	738 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
     7ae:	2201      	movs	r2, #1
     7b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7b4:	480b      	ldr	r0, [pc, #44]	; (7e4 <synth_writereg+0xec>)
     7b6:	f001 f8f3 	bl	19a0 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
     7ba:	78fb      	ldrb	r3, [r7, #3]
     7bc:	2b00      	cmp	r3, #0
     7be:	d00c      	beq.n	7da <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
     7c0:	68b8      	ldr	r0, [r7, #8]
     7c2:	f000 f813 	bl	7ec <synth_readreg>
     7c6:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
     7c8:	69ba      	ldr	r2, [r7, #24]
     7ca:	68fb      	ldr	r3, [r7, #12]
     7cc:	429a      	cmp	r2, r3
     7ce:	d004      	beq.n	7da <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
     7d0:	4805      	ldr	r0, [pc, #20]	; (7e8 <synth_writereg+0xf0>)
     7d2:	f001 f8e9 	bl	19a8 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
     7d6:	f001 f8eb 	bl	19b0 <__Error_Handler_veneer>
		}
	}

	return read_data;
     7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     7dc:	4618      	mov	r0, r3
     7de:	3728      	adds	r7, #40	; 0x28
     7e0:	46bd      	mov	sp, r7
     7e2:	bd80      	pop	{r7, pc}
     7e4:	58020800 	.word	0x58020800
     7e8:	0801bf3c 	.word	0x0801bf3c

000007ec <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
     7ec:	b580      	push	{r7, lr}
     7ee:	b084      	sub	sp, #16
     7f0:	af00      	add	r7, sp, #0
     7f2:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
     7f4:	2300      	movs	r3, #0
     7f6:	2200      	movs	r2, #0
     7f8:	2100      	movs	r1, #0
     7fa:	6878      	ldr	r0, [r7, #4]
     7fc:	f7ff ff7c 	bl	6f8 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     800:	2300      	movs	r3, #0
     802:	2200      	movs	r2, #0
     804:	2100      	movs	r1, #0
     806:	6878      	ldr	r0, [r7, #4]
     808:	f7ff ff76 	bl	6f8 <synth_writereg>
     80c:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     80e:	68fb      	ldr	r3, [r7, #12]
     810:	0a1b      	lsrs	r3, r3, #8

}
     812:	4618      	mov	r0, r3
     814:	3710      	adds	r7, #16
     816:	46bd      	mov	sp, r7
     818:	bd80      	pop	{r7, pc}

0000081a <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     81a:	b580      	push	{r7, lr}
     81c:	b084      	sub	sp, #16
     81e:	af00      	add	r7, sp, #0
     820:	4603      	mov	r3, r0
     822:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     824:	79fb      	ldrb	r3, [r7, #7]
     826:	2b03      	cmp	r3, #3
     828:	d904      	bls.n	834 <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     82a:	4811      	ldr	r0, [pc, #68]	; (870 <set_MW_power+0x56>)
     82c:	f001 f8bc 	bl	19a8 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     830:	f001 f8be 	bl	19b0 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     834:	2016      	movs	r0, #22
     836:	f7ff ffd9 	bl	7ec <synth_readreg>
     83a:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     83c:	68fb      	ldr	r3, [r7, #12]
     83e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     842:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     844:	79fb      	ldrb	r3, [r7, #7]
     846:	021b      	lsls	r3, r3, #8
     848:	461a      	mov	r2, r3
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	4313      	orrs	r3, r2
     84e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     850:	2301      	movs	r3, #1
     852:	2200      	movs	r2, #0
     854:	2116      	movs	r1, #22
     856:	68f8      	ldr	r0, [r7, #12]
     858:	f7ff ff4e 	bl	6f8 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     85c:	79fb      	ldrb	r3, [r7, #7]
     85e:	4619      	mov	r1, r3
     860:	4804      	ldr	r0, [pc, #16]	; (874 <set_MW_power+0x5a>)
     862:	f001 f899 	bl	1998 <__printf_veneer>
	return SUCCESS;
     866:	2300      	movs	r3, #0
}
     868:	4618      	mov	r0, r3
     86a:	3710      	adds	r7, #16
     86c:	46bd      	mov	sp, r7
     86e:	bd80      	pop	{r7, pc}
     870:	0801bf54 	.word	0x0801bf54
     874:	0801bf88 	.word	0x0801bf88

00000878 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     878:	b580      	push	{r7, lr}
     87a:	b084      	sub	sp, #16
     87c:	af00      	add	r7, sp, #0
     87e:	4603      	mov	r3, r0
     880:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     882:	2200      	movs	r2, #0
     884:	2102      	movs	r1, #2
     886:	4858      	ldr	r0, [pc, #352]	; (9e8 <init_synthesiser+0x170>)
     888:	f001 f88a 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     88c:	2201      	movs	r2, #1
     88e:	2101      	movs	r1, #1
     890:	4856      	ldr	r0, [pc, #344]	; (9ec <init_synthesiser+0x174>)
     892:	f001 f885 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     896:	2200      	movs	r2, #0
     898:	f44f 7180 	mov.w	r1, #256	; 0x100
     89c:	4854      	ldr	r0, [pc, #336]	; (9f0 <init_synthesiser+0x178>)
     89e:	f001 f87f 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     8a2:	2201      	movs	r2, #1
     8a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
     8a8:	4851      	ldr	r0, [pc, #324]	; (9f0 <init_synthesiser+0x178>)
     8aa:	f001 f879 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     8ae:	2201      	movs	r2, #1
     8b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     8b4:	484e      	ldr	r0, [pc, #312]	; (9f0 <init_synthesiser+0x178>)
     8b6:	f001 f873 	bl	19a0 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     8ba:	2064      	movs	r0, #100	; 0x64
     8bc:	f001 f868 	bl	1990 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     8c0:	2300      	movs	r3, #0
     8c2:	2200      	movs	r2, #0
     8c4:	2100      	movs	r1, #0
     8c6:	2020      	movs	r0, #32
     8c8:	f7ff ff16 	bl	6f8 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     8cc:	2301      	movs	r3, #1
     8ce:	2200      	movs	r2, #0
     8d0:	2108      	movs	r1, #8
     8d2:	4848      	ldr	r0, [pc, #288]	; (9f4 <init_synthesiser+0x17c>)
     8d4:	f7ff ff10 	bl	6f8 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     8d8:	2000      	movs	r0, #0
     8da:	f7ff ff87 	bl	7ec <synth_readreg>
     8de:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     8e0:	4a45      	ldr	r2, [pc, #276]	; (9f8 <init_synthesiser+0x180>)
     8e2:	68fb      	ldr	r3, [r7, #12]
     8e4:	4293      	cmp	r3, r2
     8e6:	d00a      	beq.n	8fe <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     8e8:	2200      	movs	r2, #0
     8ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     8ee:	4840      	ldr	r0, [pc, #256]	; (9f0 <init_synthesiser+0x178>)
     8f0:	f001 f856 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     8f4:	4841      	ldr	r0, [pc, #260]	; (9fc <init_synthesiser+0x184>)
     8f6:	f001 f857 	bl	19a8 <__puts_veneer>
		return ERROR;
     8fa:	2301      	movs	r3, #1
     8fc:	e069      	b.n	9d2 <init_synthesiser+0x15a>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     8fe:	4840      	ldr	r0, [pc, #256]	; (a00 <init_synthesiser+0x188>)
     900:	f001 f852 	bl	19a8 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     904:	2017      	movs	r0, #23
     906:	f7ff ff71 	bl	7ec <synth_readreg>
     90a:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     90c:	68fb      	ldr	r3, [r7, #12]
     90e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     912:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     914:	2301      	movs	r3, #1
     916:	f083 0301 	eor.w	r3, r3, #1
     91a:	b2db      	uxtb	r3, r3
     91c:	01db      	lsls	r3, r3, #7
     91e:	43db      	mvns	r3, r3
     920:	461a      	mov	r2, r3
     922:	68fb      	ldr	r3, [r7, #12]
     924:	4013      	ands	r3, r2
     926:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     928:	2301      	movs	r3, #1
     92a:	2200      	movs	r2, #0
     92c:	2117      	movs	r1, #23
     92e:	68f8      	ldr	r0, [r7, #12]
     930:	f7ff fee2 	bl	6f8 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     934:	2301      	movs	r3, #1
     936:	2200      	movs	r2, #0
     938:	2102      	movs	r1, #2
     93a:	2001      	movs	r0, #1
     93c:	f7ff fedc 	bl	6f8 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     940:	2007      	movs	r0, #7
     942:	f7ff ff53 	bl	7ec <synth_readreg>
     946:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     948:	68fb      	ldr	r3, [r7, #12]
     94a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     94e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     950:	68fb      	ldr	r3, [r7, #12]
     952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     956:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     958:	68fb      	ldr	r3, [r7, #12]
     95a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     95e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     960:	2301      	movs	r3, #1
     962:	2200      	movs	r2, #0
     964:	2107      	movs	r1, #7
     966:	68f8      	ldr	r0, [r7, #12]
     968:	f7ff fec6 	bl	6f8 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     96c:	200a      	movs	r0, #10
     96e:	f001 f80f 	bl	1990 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     972:	79fb      	ldrb	r3, [r7, #7]
     974:	2b03      	cmp	r3, #3
     976:	d904      	bls.n	982 <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     978:	4822      	ldr	r0, [pc, #136]	; (a04 <init_synthesiser+0x18c>)
     97a:	f001 f815 	bl	19a8 <__puts_veneer>
		Error_Handler();
     97e:	f001 f817 	bl	19b0 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     982:	2016      	movs	r0, #22
     984:	f7ff ff32 	bl	7ec <synth_readreg>
     988:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     98a:	68fb      	ldr	r3, [r7, #12]
     98c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     990:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     992:	79fb      	ldrb	r3, [r7, #7]
     994:	021b      	lsls	r3, r3, #8
     996:	461a      	mov	r2, r3
     998:	68fb      	ldr	r3, [r7, #12]
     99a:	4313      	orrs	r3, r2
     99c:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     99e:	2301      	movs	r3, #1
     9a0:	2200      	movs	r2, #0
     9a2:	2116      	movs	r1, #22
     9a4:	68f8      	ldr	r0, [r7, #12]
     9a6:	f7ff fea7 	bl	6f8 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE + MW_DELTA);
     9aa:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 9e0 <init_synthesiser+0x168>
     9ae:	f000 f842 	bl	a36 <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", (double)(HYPERFINE + MW_DELTA));
     9b2:	a30b      	add	r3, pc, #44	; (adr r3, 9e0 <init_synthesiser+0x168>)
     9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
     9b8:	4813      	ldr	r0, [pc, #76]	; (a08 <init_synthesiser+0x190>)
     9ba:	f000 ffed 	bl	1998 <__printf_veneer>
	mw_sweep_settings.state = MW_STABILISING;
     9be:	4b13      	ldr	r3, [pc, #76]	; (a0c <init_synthesiser+0x194>)
     9c0:	2202      	movs	r2, #2
     9c2:	705a      	strb	r2, [r3, #1]
	mw_sweep_settings.next_state = MW_FIXED_FREQ;
     9c4:	4b11      	ldr	r3, [pc, #68]	; (a0c <init_synthesiser+0x194>)
     9c6:	2201      	movs	r2, #1
     9c8:	709a      	strb	r2, [r3, #2]
	mw_sweep_settings.valid = true; //
     9ca:	4b10      	ldr	r3, [pc, #64]	; (a0c <init_synthesiser+0x194>)
     9cc:	2201      	movs	r2, #1
     9ce:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
	return SUCCESS;
     9d0:	2300      	movs	r3, #0
}
     9d2:	4618      	mov	r0, r3
     9d4:	3710      	adds	r7, #16
     9d6:	46bd      	mov	sp, r7
     9d8:	bd80      	pop	{r7, pc}
     9da:	bf00      	nop
     9dc:	f3af 8000 	nop.w
     9e0:	ea600000 	.word	0xea600000
     9e4:	41e69e35 	.word	0x41e69e35
     9e8:	58021000 	.word	0x58021000
     9ec:	58021800 	.word	0x58021800
     9f0:	58020800 	.word	0x58020800
     9f4:	0041bfff 	.word	0x0041bfff
     9f8:	00c7701a 	.word	0x00c7701a
     9fc:	0801bfa0 	.word	0x0801bfa0
     a00:	0801bfbc 	.word	0x0801bfbc
     a04:	0801bf54 	.word	0x0801bf54
     a08:	0801bfd0 	.word	0x0801bfd0
     a0c:	20000648 	.word	0x20000648

00000a10 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     a10:	b580      	push	{r7, lr}
     a12:	b082      	sub	sp, #8
     a14:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     a16:	2012      	movs	r0, #18
     a18:	f7ff fee8 	bl	7ec <synth_readreg>
     a1c:	4603      	mov	r3, r0
     a1e:	f003 0302 	and.w	r3, r3, #2
     a22:	2b00      	cmp	r3, #0
     a24:	bf14      	ite	ne
     a26:	2301      	movne	r3, #1
     a28:	2300      	moveq	r3, #0
     a2a:	71fb      	strb	r3, [r7, #7]
	return locked;
     a2c:	79fb      	ldrb	r3, [r7, #7]

}
     a2e:	4618      	mov	r0, r3
     a30:	3708      	adds	r7, #8
     a32:	46bd      	mov	sp, r7
     a34:	bd80      	pop	{r7, pc}

00000a36 <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     a36:	b580      	push	{r7, lr}
     a38:	b088      	sub	sp, #32
     a3a:	af00      	add	r7, sp, #0
     a3c:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     a40:	2301      	movs	r3, #1
     a42:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     a44:	69fb      	ldr	r3, [r7, #28]
     a46:	ee07 3a90 	vmov	s15, r3
     a4a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a4e:	ed97 7b00 	vldr	d7, [r7]
     a52:	ee26 6b07 	vmul.f64	d6, d6, d7
     a56:	ed9f 5b2a 	vldr	d5, [pc, #168]	; b00 <set_frequency_hz+0xca>
     a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a5e:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     a62:	ed97 7b04 	vldr	d7, [r7, #16]
     a66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a6a:	ee17 3a90 	vmov	r3, s15
     a6e:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     a70:	68fb      	ldr	r3, [r7, #12]
     a72:	ee07 3a90 	vmov	s15, r3
     a76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a7a:	ed97 6b04 	vldr	d6, [r7, #16]
     a7e:	ee36 7b47 	vsub.f64	d7, d6, d7
     a82:	ed9f 6b21 	vldr	d6, [pc, #132]	; b08 <set_frequency_hz+0xd2>
     a86:	ee27 7b06 	vmul.f64	d7, d7, d6
     a8a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     a8e:	ee37 7b06 	vadd.f64	d7, d7, d6
     a92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a96:	ee17 3a90 	vmov	r3, s15
     a9a:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     a9c:	2201      	movs	r2, #1
     a9e:	2102      	movs	r1, #2
     aa0:	481b      	ldr	r0, [pc, #108]	; (b10 <set_frequency_hz+0xda>)
     aa2:	f000 ff7d 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     aa6:	69fa      	ldr	r2, [r7, #28]
     aa8:	68b9      	ldr	r1, [r7, #8]
     aaa:	68f8      	ldr	r0, [r7, #12]
     aac:	f000 f838 	bl	b20 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     ab0:	4b18      	ldr	r3, [pc, #96]	; (b14 <set_frequency_hz+0xde>)
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	f241 7270 	movw	r2, #6000	; 0x1770
     ab8:	4611      	mov	r1, r2
     aba:	4618      	mov	r0, r3
     abc:	f000 ff4e 	bl	195c <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     ac0:	f7ff ffa6 	bl	a10 <lock_status>
     ac4:	4603      	mov	r3, r0
     ac6:	f083 0301 	eor.w	r3, r3, #1
     aca:	b2db      	uxtb	r3, r3
     acc:	2b00      	cmp	r3, #0
     ace:	d011      	beq.n	af4 <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     ad0:	2200      	movs	r2, #0
     ad2:	2102      	movs	r1, #2
     ad4:	4810      	ldr	r0, [pc, #64]	; (b18 <set_frequency_hz+0xe2>)
     ad6:	f000 ff63 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     ada:	f241 7370 	movw	r3, #6000	; 0x1770
     ade:	4619      	mov	r1, r3
     ae0:	480e      	ldr	r0, [pc, #56]	; (b1c <set_frequency_hz+0xe6>)
     ae2:	f000 ff59 	bl	1998 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     ae6:	f000 ff63 	bl	19b0 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     aea:	2200      	movs	r2, #0
     aec:	2102      	movs	r1, #2
     aee:	4808      	ldr	r0, [pc, #32]	; (b10 <set_frequency_hz+0xda>)
     af0:	f000 ff56 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	}

}
     af4:	bf00      	nop
     af6:	3720      	adds	r7, #32
     af8:	46bd      	mov	sp, r7
     afa:	bd80      	pop	{r7, pc}
     afc:	f3af 8000 	nop.w
     b00:	00000000 	.word	0x00000000
     b04:	4187d784 	.word	0x4187d784
     b08:	00000000 	.word	0x00000000
     b0c:	41700000 	.word	0x41700000
     b10:	58020400 	.word	0x58020400
     b14:	2000001c 	.word	0x2000001c
     b18:	58021000 	.word	0x58021000
     b1c:	0801bff8 	.word	0x0801bff8

00000b20 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     b20:	b580      	push	{r7, lr}
     b22:	b086      	sub	sp, #24
     b24:	af00      	add	r7, sp, #0
     b26:	60f8      	str	r0, [r7, #12]
     b28:	60b9      	str	r1, [r7, #8]
     b2a:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     b2c:	2300      	movs	r3, #0
     b2e:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     b30:	4b25      	ldr	r3, [pc, #148]	; (bc8 <set_freq_regs+0xa8>)
     b32:	681b      	ldr	r3, [r3, #0]
     b34:	f1b3 3fff 	cmp.w	r3, #4294967295
     b38:	d004      	beq.n	b44 <set_freq_regs+0x24>
     b3a:	4b23      	ldr	r3, [pc, #140]	; (bc8 <set_freq_regs+0xa8>)
     b3c:	681b      	ldr	r3, [r3, #0]
     b3e:	687a      	ldr	r2, [r7, #4]
     b40:	429a      	cmp	r2, r3
     b42:	d014      	beq.n	b6e <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     b44:	2016      	movs	r0, #22
     b46:	f7ff fe51 	bl	7ec <synth_readreg>
     b4a:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     b4c:	697b      	ldr	r3, [r7, #20]
     b4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     b52:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     b54:	697a      	ldr	r2, [r7, #20]
     b56:	687b      	ldr	r3, [r7, #4]
     b58:	4313      	orrs	r3, r2
     b5a:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     b5c:	2301      	movs	r3, #1
     b5e:	2200      	movs	r2, #0
     b60:	2116      	movs	r1, #22
     b62:	6978      	ldr	r0, [r7, #20]
     b64:	f7ff fdc8 	bl	6f8 <synth_writereg>
		last_vcodiv = vco_divider;
     b68:	4a17      	ldr	r2, [pc, #92]	; (bc8 <set_freq_regs+0xa8>)
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     b6e:	4b17      	ldr	r3, [pc, #92]	; (bcc <set_freq_regs+0xac>)
     b70:	681b      	ldr	r3, [r3, #0]
     b72:	f1b3 3fff 	cmp.w	r3, #4294967295
     b76:	d004      	beq.n	b82 <set_freq_regs+0x62>
     b78:	4b14      	ldr	r3, [pc, #80]	; (bcc <set_freq_regs+0xac>)
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	68fa      	ldr	r2, [r7, #12]
     b7e:	429a      	cmp	r2, r3
     b80:	d008      	beq.n	b94 <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     b82:	2301      	movs	r3, #1
     b84:	2200      	movs	r2, #0
     b86:	2103      	movs	r1, #3
     b88:	68f8      	ldr	r0, [r7, #12]
     b8a:	f7ff fdb5 	bl	6f8 <synth_writereg>
		last_integer = integer;
     b8e:	4a0f      	ldr	r2, [pc, #60]	; (bcc <set_freq_regs+0xac>)
     b90:	68fb      	ldr	r3, [r7, #12]
     b92:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     b94:	4b0e      	ldr	r3, [pc, #56]	; (bd0 <set_freq_regs+0xb0>)
     b96:	681b      	ldr	r3, [r3, #0]
     b98:	f1b3 3fff 	cmp.w	r3, #4294967295
     b9c:	d004      	beq.n	ba8 <set_freq_regs+0x88>
     b9e:	4b0c      	ldr	r3, [pc, #48]	; (bd0 <set_freq_regs+0xb0>)
     ba0:	681b      	ldr	r3, [r3, #0]
     ba2:	68ba      	ldr	r2, [r7, #8]
     ba4:	429a      	cmp	r2, r3
     ba6:	d00b      	beq.n	bc0 <set_freq_regs+0xa0>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     ba8:	2301      	movs	r3, #1
     baa:	2200      	movs	r2, #0
     bac:	2104      	movs	r1, #4
     bae:	68b8      	ldr	r0, [r7, #8]
     bb0:	f7ff fda2 	bl	6f8 <synth_writereg>
		last_fraction = fraction;
     bb4:	4a06      	ldr	r2, [pc, #24]	; (bd0 <set_freq_regs+0xb0>)
     bb6:	68bb      	ldr	r3, [r7, #8]
     bb8:	6013      	str	r3, [r2, #0]
		mw_sweep_settings.valid = false;
     bba:	4b06      	ldr	r3, [pc, #24]	; (bd4 <set_freq_regs+0xb4>)
     bbc:	2200      	movs	r2, #0
     bbe:	701a      	strb	r2, [r3, #0]
}
     bc0:	bf00      	nop
     bc2:	3718      	adds	r7, #24
     bc4:	46bd      	mov	sp, r7
     bc6:	bd80      	pop	{r7, pc}
     bc8:	20000004 	.word	0x20000004
     bcc:	20000008 	.word	0x20000008
     bd0:	2000000c 	.word	0x2000000c
     bd4:	20000648 	.word	0x20000648

00000bd8 <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     bd8:	b580      	push	{r7, lr}
     bda:	b094      	sub	sp, #80	; 0x50
     bdc:	af02      	add	r7, sp, #8
     bde:	ed87 0b04 	vstr	d0, [r7, #16]
     be2:	ed87 1b02 	vstr	d1, [r7, #8]
     be6:	6078      	str	r0, [r7, #4]
     be8:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     bea:	ed97 7b04 	vldr	d7, [r7, #16]
     bee:	ed9f 6b8e 	vldr	d6, [pc, #568]	; e28 <calc_defined_step_MW_sweep+0x250>
     bf2:	ee87 5b06 	vdiv.f64	d5, d7, d6
     bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     bfa:	e9cd 2300 	strd	r2, r3, [sp]
     bfe:	ec53 2b15 	vmov	r2, r3, d5
     c02:	4893      	ldr	r0, [pc, #588]	; (e50 <calc_defined_step_MW_sweep+0x278>)
     c04:	f000 fec8 	bl	1998 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     c08:	6879      	ldr	r1, [r7, #4]
     c0a:	4892      	ldr	r0, [pc, #584]	; (e54 <calc_defined_step_MW_sweep+0x27c>)
     c0c:	f000 fec4 	bl	1998 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     c10:	4b91      	ldr	r3, [pc, #580]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     c12:	2200      	movs	r2, #0
     c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     c18:	4a8f      	ldr	r2, [pc, #572]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     c1a:	687b      	ldr	r3, [r7, #4]
     c1c:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     c1e:	498e      	ldr	r1, [pc, #568]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     c24:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     c28:	498b      	ldr	r1, [pc, #556]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c2e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     c32:	ed97 7b02 	vldr	d7, [r7, #8]
     c36:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     c3a:	ee27 7b06 	vmul.f64	d7, d7, d6
     c3e:	ed97 6b04 	vldr	d6, [r7, #16]
     c42:	ee36 7b47 	vsub.f64	d7, d6, d7
     c46:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     c4a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     c4e:	f000 fb21 	bl	1294 <calculate_k>
     c52:	4603      	mov	r3, r0
     c54:	b2da      	uxtb	r2, r3
     c56:	4b80      	ldr	r3, [pc, #512]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     c58:	70da      	strb	r2, [r3, #3]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     c5a:	683b      	ldr	r3, [r7, #0]
     c5c:	3b01      	subs	r3, #1
     c5e:	ee07 3a90 	vmov	s15, r3
     c62:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     c66:	ed97 5b02 	vldr	d5, [r7, #8]
     c6a:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c6e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     c72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     c76:	6839      	ldr	r1, [r7, #0]
     c78:	4878      	ldr	r0, [pc, #480]	; (e5c <calc_defined_step_MW_sweep+0x284>)
     c7a:	f000 fe8d 	bl	1998 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     c7e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; e30 <calc_defined_step_MW_sweep+0x258>
     c82:	4b75      	ldr	r3, [pc, #468]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     c84:	78db      	ldrb	r3, [r3, #3]
     c86:	061b      	lsls	r3, r3, #24
     c88:	ee07 3a90 	vmov	s15, r3
     c8c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     c90:	ee85 7b06 	vdiv.f64	d7, d5, d6
     c94:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     c98:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     c9c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     ca0:	ee85 7b06 	vdiv.f64	d7, d5, d6
     ca4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     ca8:	ee37 7b06 	vadd.f64	d7, d7, d6
     cac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     cb0:	ee17 2a90 	vmov	r2, s15
     cb4:	4b68      	ldr	r3, [pc, #416]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     cb6:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     cb8:	4b67      	ldr	r3, [pc, #412]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     cba:	691b      	ldr	r3, [r3, #16]
     cbc:	2b00      	cmp	r3, #0
     cbe:	d104      	bne.n	cca <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     cc0:	4b65      	ldr	r3, [pc, #404]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     cc2:	691b      	ldr	r3, [r3, #16]
     cc4:	3301      	adds	r3, #1
     cc6:	4a64      	ldr	r2, [pc, #400]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     cc8:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     cca:	4b63      	ldr	r3, [pc, #396]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     ccc:	691b      	ldr	r3, [r3, #16]
     cce:	ee07 3a90 	vmov	s15, r3
     cd2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     cd6:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     cda:	ee26 7b07 	vmul.f64	d7, d6, d7
     cde:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     ce6:	485e      	ldr	r0, [pc, #376]	; (e60 <calc_defined_step_MW_sweep+0x288>)
     ce8:	f000 fe56 	bl	1998 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     cec:	ed97 5b02 	vldr	d5, [r7, #8]
     cf0:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     cf4:	ee85 7b06 	vdiv.f64	d7, d5, d6
     cf8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     cfc:	ee17 2a90 	vmov	r2, s15
     d00:	4b55      	ldr	r3, [pc, #340]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     d02:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     d04:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     d08:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d10:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     d14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     d18:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d1c:	ee26 7b07 	vmul.f64	d7, d6, d7
     d20:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     d24:	4b4c      	ldr	r3, [pc, #304]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     d26:	78db      	ldrb	r3, [r3, #3]
     d28:	ee07 3a90 	vmov	s15, r3
     d2c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     d30:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     d34:	ee26 6b07 	vmul.f64	d6, d6, d7
     d38:	ed9f 5b3d 	vldr	d5, [pc, #244]	; e30 <calc_defined_step_MW_sweep+0x258>
     d3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
     d40:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     d44:	ed97 7b08 	vldr	d7, [r7, #32]
     d48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d4c:	ee17 2a90 	vmov	r2, s15
     d50:	4b41      	ldr	r3, [pc, #260]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     d52:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     d54:	4b40      	ldr	r3, [pc, #256]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     d56:	685b      	ldr	r3, [r3, #4]
     d58:	ee07 3a90 	vmov	s15, r3
     d5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     d60:	ed97 6b08 	vldr	d6, [r7, #32]
     d64:	ee36 7b47 	vsub.f64	d7, d6, d7
     d68:	ed9f 6b33 	vldr	d6, [pc, #204]	; e38 <calc_defined_step_MW_sweep+0x260>
     d6c:	ee27 7b06 	vmul.f64	d7, d7, d6
     d70:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     d74:	ee37 7b06 	vadd.f64	d7, d7, d6
     d78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d7c:	ee17 2a90 	vmov	r2, s15
     d80:	4b35      	ldr	r3, [pc, #212]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     d82:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     d84:	f241 7270 	movw	r2, #6000	; 0x1770
     d88:	4b33      	ldr	r3, [pc, #204]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     d8a:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     d8c:	4b35      	ldr	r3, [pc, #212]	; (e64 <calc_defined_step_MW_sweep+0x28c>)
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	687a      	ldr	r2, [r7, #4]
     d92:	fb02 f303 	mul.w	r3, r2, r3
     d96:	2264      	movs	r2, #100	; 0x64
     d98:	4413      	add	r3, r2
     d9a:	4a2f      	ldr	r2, [pc, #188]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     d9c:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     d9e:	f241 7270 	movw	r2, #6000	; 0x1770
     da2:	2301      	movs	r3, #1
     da4:	441a      	add	r2, r3
     da6:	4b2c      	ldr	r3, [pc, #176]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     da8:	69db      	ldr	r3, [r3, #28]
     daa:	4413      	add	r3, r2
     dac:	ee07 3a90 	vmov	s15, r3
     db0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     db4:	4b28      	ldr	r3, [pc, #160]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     db6:	68db      	ldr	r3, [r3, #12]
     db8:	3301      	adds	r3, #1
     dba:	ee07 3a90 	vmov	s15, r3
     dbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     dc2:	ee26 6b07 	vmul.f64	d6, d6, d7
     dc6:	ed9f 5b1e 	vldr	d5, [pc, #120]	; e40 <calc_defined_step_MW_sweep+0x268>
     dca:	ee86 7b05 	vdiv.f64	d7, d6, d5
     dce:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     dd6:	4824      	ldr	r0, [pc, #144]	; (e68 <calc_defined_step_MW_sweep+0x290>)
     dd8:	f000 fdde 	bl	1998 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     ddc:	4b1e      	ldr	r3, [pc, #120]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     dde:	68d9      	ldr	r1, [r3, #12]
     de0:	ed97 7b06 	vldr	d7, [r7, #24]
     de4:	ed9f 6b18 	vldr	d6, [pc, #96]	; e48 <calc_defined_step_MW_sweep+0x270>
     de8:	ee27 6b06 	vmul.f64	d6, d7, d6
     dec:	4b1a      	ldr	r3, [pc, #104]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     dee:	68db      	ldr	r3, [r3, #12]
     df0:	3301      	adds	r3, #1
     df2:	ee07 3a90 	vmov	s15, r3
     df6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     dfa:	ee86 5b07 	vdiv.f64	d5, d6, d7
     dfe:	ec53 2b15 	vmov	r2, r3, d5
     e02:	481a      	ldr	r0, [pc, #104]	; (e6c <calc_defined_step_MW_sweep+0x294>)
     e04:	f000 fdc8 	bl	1998 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     e08:	4b13      	ldr	r3, [pc, #76]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     e0a:	2200      	movs	r2, #0
     e0c:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     e0e:	4912      	ldr	r1, [pc, #72]	; (e58 <calc_defined_step_MW_sweep+0x280>)
     e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     e14:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     e18:	2301      	movs	r3, #1
}
     e1a:	4618      	mov	r0, r3
     e1c:	3748      	adds	r7, #72	; 0x48
     e1e:	46bd      	mov	sp, r7
     e20:	bd80      	pop	{r7, pc}
     e22:	bf00      	nop
     e24:	f3af 8000 	nop.w
     e28:	00000000 	.word	0x00000000
     e2c:	41cdcd65 	.word	0x41cdcd65
     e30:	00000000 	.word	0x00000000
     e34:	4187d784 	.word	0x4187d784
     e38:	00000000 	.word	0x00000000
     e3c:	41700000 	.word	0x41700000
     e40:	00000000 	.word	0x00000000
     e44:	412e8480 	.word	0x412e8480
     e48:	00000000 	.word	0x00000000
     e4c:	408f4000 	.word	0x408f4000
     e50:	0801c03c 	.word	0x0801c03c
     e54:	0801c080 	.word	0x0801c080
     e58:	20000648 	.word	0x20000648
     e5c:	0801c0a0 	.word	0x0801c0a0
     e60:	0801c0d8 	.word	0x0801c0d8
     e64:	20000600 	.word	0x20000600
     e68:	0801c0f8 	.word	0x0801c0f8
     e6c:	0801c110 	.word	0x0801c110

00000e70 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     e70:	b580      	push	{r7, lr}
     e72:	b09e      	sub	sp, #120	; 0x78
     e74:	af04      	add	r7, sp, #16
     e76:	ed87 0b06 	vstr	d0, [r7, #24]
     e7a:	ed87 1b04 	vstr	d1, [r7, #16]
     e7e:	ed87 2b02 	vstr	d2, [r7, #8]
     e82:	4603      	mov	r3, r0
     e84:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     e86:	ed97 7b06 	vldr	d7, [r7, #24]
     e8a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 10e8 <calc_fixed_time_MW_sweep+0x278>
     e8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
     e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     e96:	e9cd 2302 	strd	r2, r3, [sp, #8]
     e9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     e9e:	e9cd 2300 	strd	r2, r3, [sp]
     ea2:	ec53 2b15 	vmov	r2, r3, d5
     ea6:	4898      	ldr	r0, [pc, #608]	; (1108 <calc_fixed_time_MW_sweep+0x298>)
     ea8:	f000 fd76 	bl	1998 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     eac:	4b97      	ldr	r3, [pc, #604]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     eae:	2201      	movs	r2, #1
     eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     eb4:	4995      	ldr	r1, [pc, #596]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     eba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     ebe:	4993      	ldr	r1, [pc, #588]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     ec0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     ec4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     ec8:	4b91      	ldr	r3, [pc, #580]	; (1110 <calc_fixed_time_MW_sweep+0x2a0>)
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	2264      	movs	r2, #100	; 0x64
     ece:	4413      	add	r3, r2
     ed0:	4a8e      	ldr	r2, [pc, #568]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     ed2:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     ed4:	f241 7270 	movw	r2, #6000	; 0x1770
     ed8:	2301      	movs	r3, #1
     eda:	441a      	add	r2, r3
     edc:	4b8b      	ldr	r3, [pc, #556]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     ede:	69db      	ldr	r3, [r3, #28]
     ee0:	4413      	add	r3, r2
     ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     ee4:	4a8b      	ldr	r2, [pc, #556]	; (1114 <calc_fixed_time_MW_sweep+0x2a4>)
     ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     ee8:	fbb2 f3f3 	udiv	r3, r2, r3
     eec:	ee07 3a90 	vmov	s15, r3
     ef0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     ef4:	ed97 7b02 	vldr	d7, [r7, #8]
     ef8:	ee26 7b07 	vmul.f64	d7, d6, d7
     efc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     f00:	ee17 3a90 	vmov	r3, s15
     f04:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     f06:	ed97 7b04 	vldr	d7, [r7, #16]
     f0a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     f0e:	ee27 7b06 	vmul.f64	d7, d7, d6
     f12:	ed97 6b06 	vldr	d6, [r7, #24]
     f16:	ee36 7b47 	vsub.f64	d7, d6, d7
     f1a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
     f1e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
     f22:	f000 f9b7 	bl	1294 <calculate_k>
     f26:	4603      	mov	r3, r0
     f28:	b2da      	uxtb	r2, r3
     f2a:	4b78      	ldr	r3, [pc, #480]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     f2c:	70da      	strb	r2, [r3, #3]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     f2e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 10f0 <calc_fixed_time_MW_sweep+0x280>
     f32:	4b76      	ldr	r3, [pc, #472]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     f34:	78db      	ldrb	r3, [r3, #3]
     f36:	061b      	lsls	r3, r3, #24
     f38:	ee07 3a90 	vmov	s15, r3
     f3c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     f40:	ee85 7b06 	vdiv.f64	d7, d5, d6
     f44:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     f48:	4b70      	ldr	r3, [pc, #448]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     f4a:	2201      	movs	r2, #1
     f4c:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     f4e:	e004      	b.n	f5a <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
     f50:	4b6e      	ldr	r3, [pc, #440]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     f52:	691b      	ldr	r3, [r3, #16]
     f54:	3301      	adds	r3, #1
     f56:	4a6d      	ldr	r2, [pc, #436]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     f58:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     f5a:	4b6c      	ldr	r3, [pc, #432]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     f5c:	691b      	ldr	r3, [r3, #16]
     f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
     f60:	fb02 f303 	mul.w	r3, r2, r3
     f64:	ee07 3a90 	vmov	s15, r3
     f68:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     f6c:	ed97 4b04 	vldr	d4, [r7, #16]
     f70:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
     f74:	ee84 7b05 	vdiv.f64	d7, d4, d5
     f78:	eeb4 6bc7 	vcmpe.f64	d6, d7
     f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f80:	d4e6      	bmi.n	f50 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     f82:	4b62      	ldr	r3, [pc, #392]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     f84:	691b      	ldr	r3, [r3, #16]
     f86:	ee07 3a90 	vmov	s15, r3
     f8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     f8e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
     f92:	ee26 7b07 	vmul.f64	d7, d6, d7
     f96:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
     f9a:	4b5c      	ldr	r3, [pc, #368]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     f9c:	6919      	ldr	r1, [r3, #16]
     f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     fa2:	485d      	ldr	r0, [pc, #372]	; (1118 <calc_fixed_time_MW_sweep+0x2a8>)
     fa4:	f000 fcf8 	bl	1998 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
     fa8:	ed97 5b04 	vldr	d5, [r7, #16]
     fac:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
     fb0:	ee85 7b06 	vdiv.f64	d7, d5, d6
     fb4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     fb8:	ee17 2a90 	vmov	r2, s15
     fbc:	4b53      	ldr	r3, [pc, #332]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     fbe:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
     fc0:	ed97 7b02 	vldr	d7, [r7, #8]
     fc4:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 10f8 <calc_fixed_time_MW_sweep+0x288>
     fc8:	ee27 5b06 	vmul.f64	d5, d7, d6
     fcc:	4b4f      	ldr	r3, [pc, #316]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
     fce:	68db      	ldr	r3, [r3, #12]
     fd0:	3301      	adds	r3, #1
     fd2:	ee07 3a90 	vmov	s15, r3
     fd6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     fda:	ee85 7b06 	vdiv.f64	d7, d5, d6
     fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     fe2:	ee17 3a90 	vmov	r3, s15
     fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
     fe8:	f241 7270 	movw	r2, #6000	; 0x1770
     fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     fee:	1a9b      	subs	r3, r3, r2
     ff0:	2264      	movs	r2, #100	; 0x64
     ff2:	1a9b      	subs	r3, r3, r2
     ff4:	2201      	movs	r2, #1
     ff6:	1a9a      	subs	r2, r3, r2
     ff8:	4b45      	ldr	r3, [pc, #276]	; (1110 <calc_fixed_time_MW_sweep+0x2a0>)
     ffa:	681b      	ldr	r3, [r3, #0]
     ffc:	fbb2 f3f3 	udiv	r3, r2, r3
    1000:	4a42      	ldr	r2, [pc, #264]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    1002:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
    1004:	4b41      	ldr	r3, [pc, #260]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    1006:	68db      	ldr	r3, [r3, #12]
    1008:	1c59      	adds	r1, r3, #1
    100a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    100c:	4a43      	ldr	r2, [pc, #268]	; (111c <calc_fixed_time_MW_sweep+0x2ac>)
    100e:	fba2 2303 	umull	r2, r3, r2, r3
    1012:	099a      	lsrs	r2, r3, #6
    1014:	4b3d      	ldr	r3, [pc, #244]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    1016:	695b      	ldr	r3, [r3, #20]
    1018:	4841      	ldr	r0, [pc, #260]	; (1120 <calc_fixed_time_MW_sweep+0x2b0>)
    101a:	f000 fcbd 	bl	1998 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
    101e:	4b3b      	ldr	r3, [pc, #236]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    1020:	695b      	ldr	r3, [r3, #20]
    1022:	4a3b      	ldr	r2, [pc, #236]	; (1110 <calc_fixed_time_MW_sweep+0x2a0>)
    1024:	6812      	ldr	r2, [r2, #0]
    1026:	fb02 f303 	mul.w	r3, r2, r3
    102a:	2264      	movs	r2, #100	; 0x64
    102c:	4413      	add	r3, r2
    102e:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
    1030:	f241 7270 	movw	r2, #6000	; 0x1770
    1034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1036:	1a9b      	subs	r3, r3, r2
    1038:	2201      	movs	r2, #1
    103a:	1a9b      	subs	r3, r3, r2
    103c:	4a33      	ldr	r2, [pc, #204]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    103e:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
    1040:	4b32      	ldr	r3, [pc, #200]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    1042:	69db      	ldr	r3, [r3, #28]
    1044:	6bba      	ldr	r2, [r7, #56]	; 0x38
    1046:	429a      	cmp	r2, r3
    1048:	d902      	bls.n	1050 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
    104a:	4a30      	ldr	r2, [pc, #192]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    104e:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
    1050:	f241 7270 	movw	r2, #6000	; 0x1770
    1054:	2301      	movs	r3, #1
    1056:	441a      	add	r2, r3
    1058:	4b2c      	ldr	r3, [pc, #176]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    105a:	69db      	ldr	r3, [r3, #28]
    105c:	4413      	add	r3, r2
    105e:	ee07 3a90 	vmov	s15, r3
    1062:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1066:	ed9f 5b24 	vldr	d5, [pc, #144]	; 10f8 <calc_fixed_time_MW_sweep+0x288>
    106a:	ee86 7b05 	vdiv.f64	d7, d6, d5
    106e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    1072:	4b26      	ldr	r3, [pc, #152]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    1074:	68db      	ldr	r3, [r3, #12]
    1076:	3301      	adds	r3, #1
    1078:	ee07 3a90 	vmov	s15, r3
    107c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1080:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    1084:	ee26 7b07 	vmul.f64	d7, d6, d7
    1088:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
    108c:	f241 7270 	movw	r2, #6000	; 0x1770
    1090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1092:	4413      	add	r3, r2
    1094:	2201      	movs	r2, #1
    1096:	4413      	add	r3, r2
    1098:	4a1c      	ldr	r2, [pc, #112]	; (110c <calc_fixed_time_MW_sweep+0x29c>)
    109a:	68d2      	ldr	r2, [r2, #12]
    109c:	3201      	adds	r2, #1
    109e:	fb02 f303 	mul.w	r3, r2, r3
    10a2:	ee07 3a90 	vmov	s15, r3
    10a6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10aa:	ed9f 5b13 	vldr	d5, [pc, #76]	; 10f8 <calc_fixed_time_MW_sweep+0x288>
    10ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
    10b2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    10b6:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    10ba:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    10be:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10c2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 1100 <calc_fixed_time_MW_sweep+0x290>
    10c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
    10ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10ce:	dd2b      	ble.n	1128 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    10d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    10d4:	e9cd 2300 	strd	r2, r3, [sp]
    10d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    10dc:	4811      	ldr	r0, [pc, #68]	; (1124 <calc_fixed_time_MW_sweep+0x2b4>)
    10de:	f000 fc5b 	bl	1998 <__printf_veneer>
    10e2:	e029      	b.n	1138 <calc_fixed_time_MW_sweep+0x2c8>
    10e4:	f3af 8000 	nop.w
    10e8:	00000000 	.word	0x00000000
    10ec:	41cdcd65 	.word	0x41cdcd65
    10f0:	00000000 	.word	0x00000000
    10f4:	4187d784 	.word	0x4187d784
    10f8:	00000000 	.word	0x00000000
    10fc:	412e8480 	.word	0x412e8480
    1100:	851eb852 	.word	0x851eb852
    1104:	3ff051eb 	.word	0x3ff051eb
    1108:	0801c12c 	.word	0x0801c12c
    110c:	20000648 	.word	0x20000648
    1110:	20000600 	.word	0x20000600
    1114:	000f4240 	.word	0x000f4240
    1118:	0801c17c 	.word	0x0801c17c
    111c:	10624dd3 	.word	0x10624dd3
    1120:	0801c1a8 	.word	0x0801c1a8
    1124:	0801c1e0 	.word	0x0801c1e0
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    1128:	4b57      	ldr	r3, [pc, #348]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    112a:	695b      	ldr	r3, [r3, #20]
    112c:	9300      	str	r3, [sp, #0]
    112e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1132:	4856      	ldr	r0, [pc, #344]	; (128c <calc_fixed_time_MW_sweep+0x41c>)
    1134:	f000 fc30 	bl	1998 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    1138:	79fb      	ldrb	r3, [r7, #7]
    113a:	2b00      	cmp	r3, #0
    113c:	d044      	beq.n	11c8 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    113e:	4b52      	ldr	r3, [pc, #328]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    1140:	68db      	ldr	r3, [r3, #12]
    1142:	ee07 3a90 	vmov	s15, r3
    1146:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    114a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 1270 <calc_fixed_time_MW_sweep+0x400>
    114e:	ee27 7b06 	vmul.f64	d7, d7, d6
    1152:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1156:	ee37 7b06 	vadd.f64	d7, d7, d6
    115a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    115e:	ee17 2a90 	vmov	r2, s15
    1162:	4b49      	ldr	r3, [pc, #292]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    1164:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    1166:	4b48      	ldr	r3, [pc, #288]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    1168:	68db      	ldr	r3, [r3, #12]
    116a:	3301      	adds	r3, #1
    116c:	ee07 3a90 	vmov	s15, r3
    1170:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1174:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    1178:	ee26 7b07 	vmul.f64	d7, d6, d7
    117c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    1180:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    1184:	ed97 7b02 	vldr	d7, [r7, #8]
    1188:	ee36 7b47 	vsub.f64	d7, d6, d7
    118c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    1190:	eeb4 7bc6 	vcmpe.f64	d7, d6
    1194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1198:	dd11      	ble.n	11be <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    119a:	4b3b      	ldr	r3, [pc, #236]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    119c:	68db      	ldr	r3, [r3, #12]
    119e:	3b01      	subs	r3, #1
    11a0:	4a39      	ldr	r2, [pc, #228]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    11a2:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    11a4:	4b38      	ldr	r3, [pc, #224]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    11a6:	68db      	ldr	r3, [r3, #12]
    11a8:	3301      	adds	r3, #1
    11aa:	ee07 3a90 	vmov	s15, r3
    11ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11b2:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    11b6:	ee26 7b07 	vmul.f64	d7, d6, d7
    11ba:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    11be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    11c2:	4833      	ldr	r0, [pc, #204]	; (1290 <calc_fixed_time_MW_sweep+0x420>)
    11c4:	f000 fbe8 	bl	1998 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    11c8:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    11cc:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    11d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
    11d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    11d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    11dc:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    11e0:	ee26 7b07 	vmul.f64	d7, d6, d7
    11e4:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    11e8:	4b27      	ldr	r3, [pc, #156]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    11ea:	78db      	ldrb	r3, [r3, #3]
    11ec:	ee07 3a90 	vmov	s15, r3
    11f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    11f4:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    11f8:	ee26 6b07 	vmul.f64	d6, d6, d7
    11fc:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 1278 <calc_fixed_time_MW_sweep+0x408>
    1200:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1204:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    1208:	ed97 7b08 	vldr	d7, [r7, #32]
    120c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1210:	ee17 2a90 	vmov	r2, s15
    1214:	4b1c      	ldr	r3, [pc, #112]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    1216:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1218:	4b1b      	ldr	r3, [pc, #108]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    121a:	685b      	ldr	r3, [r3, #4]
    121c:	ee07 3a90 	vmov	s15, r3
    1220:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1224:	ed97 6b08 	vldr	d6, [r7, #32]
    1228:	ee36 7b47 	vsub.f64	d7, d6, d7
    122c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 1280 <calc_fixed_time_MW_sweep+0x410>
    1230:	ee27 7b06 	vmul.f64	d7, d7, d6
    1234:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1238:	ee37 7b06 	vadd.f64	d7, d7, d6
    123c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1240:	ee17 2a90 	vmov	r2, s15
    1244:	4b10      	ldr	r3, [pc, #64]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    1246:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
    1248:	4b0f      	ldr	r3, [pc, #60]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    124a:	2200      	movs	r2, #0
    124c:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
    124e:	490e      	ldr	r1, [pc, #56]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    1250:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1254:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    1258:	f241 7270 	movw	r2, #6000	; 0x1770
    125c:	4b0a      	ldr	r3, [pc, #40]	; (1288 <calc_fixed_time_MW_sweep+0x418>)
    125e:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
    1260:	2301      	movs	r3, #1
}
    1262:	4618      	mov	r0, r3
    1264:	3768      	adds	r7, #104	; 0x68
    1266:	46bd      	mov	sp, r7
    1268:	bd80      	pop	{r7, pc}
    126a:	bf00      	nop
    126c:	f3af 8000 	nop.w
    1270:	9999999a 	.word	0x9999999a
    1274:	3ff19999 	.word	0x3ff19999
    1278:	00000000 	.word	0x00000000
    127c:	4187d784 	.word	0x4187d784
    1280:	00000000 	.word	0x00000000
    1284:	41700000 	.word	0x41700000
    1288:	20000648 	.word	0x20000648
    128c:	0801c218 	.word	0x0801c218
    1290:	0801c264 	.word	0x0801c264

00001294 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    1294:	b480      	push	{r7}
    1296:	b085      	sub	sp, #20
    1298:	af00      	add	r7, sp, #0
    129a:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
    129e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 12e0 <calculate_k+0x4c>
    12a2:	ed97 6b00 	vldr	d6, [r7]
    12a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    12aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    12ae:	ee17 3a90 	vmov	r3, s15
    12b2:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    12b4:	68fb      	ldr	r3, [r7, #12]
    12b6:	2b01      	cmp	r3, #1
    12b8:	d00b      	beq.n	12d2 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    12ba:	e002      	b.n	12c2 <calculate_k+0x2e>
			k --;
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	3b01      	subs	r3, #1
    12c0:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	2b3e      	cmp	r3, #62	; 0x3e
    12c6:	d8f9      	bhi.n	12bc <calculate_k+0x28>
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	f003 0301 	and.w	r3, r3, #1
    12ce:	2b00      	cmp	r3, #0
    12d0:	d1f4      	bne.n	12bc <calculate_k+0x28>
		}
	}
	return (k);
    12d2:	68fb      	ldr	r3, [r7, #12]
}
    12d4:	4618      	mov	r0, r3
    12d6:	3714      	adds	r7, #20
    12d8:	46bd      	mov	sp, r7
    12da:	f85d 7b04 	ldr.w	r7, [sp], #4
    12de:	4770      	bx	lr
    12e0:	20000000 	.word	0x20000000
    12e4:	41ee8c21 	.word	0x41ee8c21

000012e8 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
    12e8:	b580      	push	{r7, lr}
    12ea:	b082      	sub	sp, #8
    12ec:	af00      	add	r7, sp, #0
    12ee:	4603      	mov	r3, r0
    12f0:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    12f2:	79fb      	ldrb	r3, [r7, #7]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d003      	beq.n	1300 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    12f8:	4b0f      	ldr	r3, [pc, #60]	; (1338 <start_POP_calibration+0x50>)
    12fa:	2201      	movs	r2, #1
    12fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1300:	2201      	movs	r2, #1
    1302:	2102      	movs	r1, #2
    1304:	480d      	ldr	r0, [pc, #52]	; (133c <start_POP_calibration+0x54>)
    1306:	f000 fb4b 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    130a:	200a      	movs	r0, #10
    130c:	f000 fb40 	bl	1990 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1310:	4b0b      	ldr	r3, [pc, #44]	; (1340 <start_POP_calibration+0x58>)
    1312:	2200      	movs	r2, #0
    1314:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    1316:	4b08      	ldr	r3, [pc, #32]	; (1338 <start_POP_calibration+0x50>)
    1318:	2204      	movs	r2, #4
    131a:	705a      	strb	r2, [r3, #1]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    131c:	4b09      	ldr	r3, [pc, #36]	; (1344 <start_POP_calibration+0x5c>)
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	4618      	mov	r0, r3
    1322:	f000 fadf 	bl	18e4 <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    1326:	2200      	movs	r2, #0
    1328:	2102      	movs	r1, #2
    132a:	4804      	ldr	r0, [pc, #16]	; (133c <start_POP_calibration+0x54>)
    132c:	f000 fb38 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    1330:	bf00      	nop
    1332:	3708      	adds	r7, #8
    1334:	46bd      	mov	sp, r7
    1336:	bd80      	pop	{r7, pc}
    1338:	20000648 	.word	0x20000648
    133c:	58020400 	.word	0x58020400
    1340:	200005fe 	.word	0x200005fe
    1344:	2000001c 	.word	0x2000001c

00001348 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    1348:	b580      	push	{r7, lr}
    134a:	b082      	sub	sp, #8
    134c:	af00      	add	r7, sp, #0
    134e:	4603      	mov	r3, r0
    1350:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    1352:	79fb      	ldrb	r3, [r7, #7]
    1354:	2b00      	cmp	r3, #0
    1356:	d003      	beq.n	1360 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    1358:	4b1c      	ldr	r3, [pc, #112]	; (13cc <start_MW_sweep+0x84>)
    135a:	2202      	movs	r2, #2
    135c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    1360:	2201      	movs	r2, #1
    1362:	2102      	movs	r1, #2
    1364:	481a      	ldr	r0, [pc, #104]	; (13d0 <start_MW_sweep+0x88>)
    1366:	f000 fb1b 	bl	19a0 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    136a:	2201      	movs	r2, #1
    136c:	2102      	movs	r1, #2
    136e:	4819      	ldr	r0, [pc, #100]	; (13d4 <start_MW_sweep+0x8c>)
    1370:	f000 fb16 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
    1374:	4b15      	ldr	r3, [pc, #84]	; (13cc <start_MW_sweep+0x84>)
    1376:	685b      	ldr	r3, [r3, #4]
    1378:	4a14      	ldr	r2, [pc, #80]	; (13cc <start_MW_sweep+0x84>)
    137a:	6891      	ldr	r1, [r2, #8]
    137c:	4a13      	ldr	r2, [pc, #76]	; (13cc <start_MW_sweep+0x84>)
    137e:	78d2      	ldrb	r2, [r2, #3]
    1380:	4618      	mov	r0, r3
    1382:	f7ff fbcd 	bl	b20 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    1386:	4b11      	ldr	r3, [pc, #68]	; (13cc <start_MW_sweep+0x84>)
    1388:	2202      	movs	r2, #2
    138a:	705a      	strb	r2, [r3, #1]
	mw_sweep_settings.next_state = MW_RAMP_DWELL;
    138c:	4b0f      	ldr	r3, [pc, #60]	; (13cc <start_MW_sweep+0x84>)
    138e:	2203      	movs	r2, #3
    1390:	709a      	strb	r2, [r3, #2]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    1392:	4b0e      	ldr	r3, [pc, #56]	; (13cc <start_MW_sweep+0x84>)
    1394:	2200      	movs	r2, #0
    1396:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    1398:	200a      	movs	r0, #10
    139a:	f000 faf9 	bl	1990 <__HAL_Delay_veneer>
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    139e:	2200      	movs	r2, #0
    13a0:	2101      	movs	r1, #1
    13a2:	480d      	ldr	r0, [pc, #52]	; (13d8 <start_MW_sweep+0x90>)
    13a4:	f000 fafc 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    13a8:	4b0c      	ldr	r3, [pc, #48]	; (13dc <start_MW_sweep+0x94>)
    13aa:	681b      	ldr	r3, [r3, #0]
    13ac:	4618      	mov	r0, r3
    13ae:	f000 fa99 	bl	18e4 <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    13b2:	4b0b      	ldr	r3, [pc, #44]	; (13e0 <start_MW_sweep+0x98>)
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	4618      	mov	r0, r3
    13b8:	f000 fa94 	bl	18e4 <start_timer>
	sample_count = 0; //reset sample count
    13bc:	4b09      	ldr	r3, [pc, #36]	; (13e4 <start_MW_sweep+0x9c>)
    13be:	2200      	movs	r2, #0
    13c0:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered then HAL_ADC_ConvCpltCallback will increment sample_count by 1
	//workround is to introduce a small delay after setting MW_invalid high
	return(true);
    13c2:	2301      	movs	r3, #1
}
    13c4:	4618      	mov	r0, r3
    13c6:	3708      	adds	r7, #8
    13c8:	46bd      	mov	sp, r7
    13ca:	bd80      	pop	{r7, pc}
    13cc:	20000648 	.word	0x20000648
    13d0:	58021000 	.word	0x58021000
    13d4:	58020400 	.word	0x58020400
    13d8:	58021800 	.word	0x58021800
    13dc:	2000001c 	.word	0x2000001c
    13e0:	20000020 	.word	0x20000020
    13e4:	200005fe 	.word	0x200005fe

000013e8 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval None
  */
void start_continuous_MW_sweep(void) {
    13e8:	b580      	push	{r7, lr}
    13ea:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    13ec:	4b04      	ldr	r3, [pc, #16]	; (1400 <start_continuous_MW_sweep+0x18>)
    13ee:	2200      	movs	r2, #0
    13f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
    13f4:	2000      	movs	r0, #0
    13f6:	f7ff ff77 	bl	12e8 <start_POP_calibration>
}
    13fa:	bf00      	nop
    13fc:	bd80      	pop	{r7, pc}
    13fe:	bf00      	nop
    1400:	20000648 	.word	0x20000648

00001404 <stop_MW_operation>:

/**
  * @brief  Stops MW operation e.g. for laser tuning
  * @retval None
  */
void stop_MW_operation(void) {
    1404:	b580      	push	{r7, lr}
    1406:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = MW_STOPPED;
    1408:	4b07      	ldr	r3, [pc, #28]	; (1428 <stop_MW_operation+0x24>)
    140a:	2200      	movs	r2, #0
    140c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	stop_timer(MW_TIMER);
    1410:	4b06      	ldr	r3, [pc, #24]	; (142c <stop_MW_operation+0x28>)
    1412:	681b      	ldr	r3, [r3, #0]
    1414:	4618      	mov	r0, r3
    1416:	f000 fa83 	bl	1920 <stop_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Ensures the ADC sample pulse is being generated
    141a:	2200      	movs	r2, #0
    141c:	2102      	movs	r1, #2
    141e:	4804      	ldr	r0, [pc, #16]	; (1430 <stop_MW_operation+0x2c>)
    1420:	f000 fabe 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
}
    1424:	bf00      	nop
    1426:	bd80      	pop	{r7, pc}
    1428:	20000648 	.word	0x20000648
    142c:	2000001c 	.word	0x2000001c
    1430:	58020400 	.word	0x58020400

00001434 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    1434:	b580      	push	{r7, lr}
    1436:	b08a      	sub	sp, #40	; 0x28
    1438:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    143a:	4b97      	ldr	r3, [pc, #604]	; (1698 <MW_update+0x264>)
    143c:	785b      	ldrb	r3, [r3, #1]
    143e:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    1440:	2300      	movs	r3, #0
    1442:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    1444:	7dbb      	ldrb	r3, [r7, #22]
    1446:	2b04      	cmp	r3, #4
    1448:	f200 810b 	bhi.w	1662 <MW_update+0x22e>
    144c:	a201      	add	r2, pc, #4	; (adr r2, 1454 <MW_update+0x20>)
    144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1452:	bf00      	nop
    1454:	0000167b 	.word	0x0000167b
    1458:	0000167b 	.word	0x0000167b
    145c:	00001469 	.word	0x00001469
    1460:	000014af 	.word	0x000014af
    1464:	000015ef 	.word	0x000015ef
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    1468:	4b8c      	ldr	r3, [pc, #560]	; (169c <MW_update+0x268>)
    146a:	681b      	ldr	r3, [r3, #0]
    146c:	4618      	mov	r0, r3
    146e:	f000 fa69 	bl	1944 <check_timer>
    1472:	4603      	mov	r3, r0
    1474:	f241 7270 	movw	r2, #6000	; 0x1770
    1478:	4293      	cmp	r3, r2
    147a:	d201      	bcs.n	1480 <MW_update+0x4c>
    147c:	2300      	movs	r3, #0
    147e:	e100      	b.n	1682 <MW_update+0x24e>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    1480:	4b86      	ldr	r3, [pc, #536]	; (169c <MW_update+0x268>)
    1482:	681b      	ldr	r3, [r3, #0]
    1484:	4618      	mov	r0, r3
    1486:	f000 fa4b 	bl	1920 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    148a:	2200      	movs	r2, #0
    148c:	2102      	movs	r1, #2
    148e:	4884      	ldr	r0, [pc, #528]	; (16a0 <MW_update+0x26c>)
    1490:	f000 fa86 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
			reset_adc_samples(); //clear any data in the adc sample buffer
    1494:	f7ff f914 	bl	6c0 <reset_adc_samples>
			mw_sweep_settings.state = MW_RAMP_DWELL;
    1498:	4b7f      	ldr	r3, [pc, #508]	; (1698 <MW_update+0x264>)
    149a:	2203      	movs	r2, #3
    149c:	705a      	strb	r2, [r3, #1]
			start_timer(MW_TIMER); //Restart timer for DWELL time
    149e:	4b7f      	ldr	r3, [pc, #508]	; (169c <MW_update+0x268>)
    14a0:	681b      	ldr	r3, [r3, #0]
    14a2:	4618      	mov	r0, r3
    14a4:	f000 fa1e 	bl	18e4 <start_timer>
			action_taken = true;
    14a8:	2301      	movs	r3, #1
    14aa:	75fb      	strb	r3, [r7, #23]
			break;
    14ac:	e0e8      	b.n	1680 <MW_update+0x24c>

		case MW_RAMP_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    14ae:	4b7b      	ldr	r3, [pc, #492]	; (169c <MW_update+0x268>)
    14b0:	681b      	ldr	r3, [r3, #0]
    14b2:	4618      	mov	r0, r3
    14b4:	f000 fa46 	bl	1944 <check_timer>
    14b8:	4602      	mov	r2, r0
    14ba:	4b77      	ldr	r3, [pc, #476]	; (1698 <MW_update+0x264>)
    14bc:	69db      	ldr	r3, [r3, #28]
    14be:	429a      	cmp	r2, r3
    14c0:	d201      	bcs.n	14c6 <MW_update+0x92>
    14c2:	2300      	movs	r3, #0
    14c4:	e0dd      	b.n	1682 <MW_update+0x24e>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    14c6:	2301      	movs	r3, #1
    14c8:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    14ca:	4b74      	ldr	r3, [pc, #464]	; (169c <MW_update+0x268>)
    14cc:	681b      	ldr	r3, [r3, #0]
    14ce:	4618      	mov	r0, r3
    14d0:	f000 fa26 	bl	1920 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    14d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    14d8:	4871      	ldr	r0, [pc, #452]	; (16a0 <MW_update+0x26c>)
    14da:	f000 fa6d 	bl	19b8 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    14de:	2201      	movs	r2, #1
    14e0:	2102      	movs	r1, #2
    14e2:	486f      	ldr	r0, [pc, #444]	; (16a0 <MW_update+0x26c>)
    14e4:	f000 fa5c 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    14e8:	4b6b      	ldr	r3, [pc, #428]	; (1698 <MW_update+0x264>)
    14ea:	2202      	movs	r2, #2
    14ec:	705a      	strb	r2, [r3, #1]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    14ee:	4b6a      	ldr	r3, [pc, #424]	; (1698 <MW_update+0x264>)
    14f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    14f2:	4b69      	ldr	r3, [pc, #420]	; (1698 <MW_update+0x264>)
    14f4:	68db      	ldr	r3, [r3, #12]
    14f6:	429a      	cmp	r2, r3
    14f8:	d15c      	bne.n	15b4 <MW_update+0x180>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    14fa:	2201      	movs	r2, #1
    14fc:	2101      	movs	r1, #1
    14fe:	4869      	ldr	r0, [pc, #420]	; (16a4 <MW_update+0x270>)
    1500:	f000 fa4e 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    1504:	4b68      	ldr	r3, [pc, #416]	; (16a8 <MW_update+0x274>)
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	4618      	mov	r0, r3
    150a:	f000 fa1b 	bl	1944 <check_timer>
    150e:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    1510:	4b65      	ldr	r3, [pc, #404]	; (16a8 <MW_update+0x274>)
    1512:	681b      	ldr	r3, [r3, #0]
    1514:	4618      	mov	r0, r3
    1516:	f000 fa03 	bl	1920 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    151a:	68bb      	ldr	r3, [r7, #8]
    151c:	ee07 3a90 	vmov	s15, r3
    1520:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1524:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 1690 <MW_update+0x25c>
    1528:	ee87 5b06 	vdiv.f64	d5, d7, d6
    152c:	4b5a      	ldr	r3, [pc, #360]	; (1698 <MW_update+0x264>)
    152e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    1532:	495e      	ldr	r1, [pc, #376]	; (16ac <MW_update+0x278>)
    1534:	8809      	ldrh	r1, [r1, #0]
    1536:	b289      	uxth	r1, r1
    1538:	9102      	str	r1, [sp, #8]
    153a:	e9cd 2300 	strd	r2, r3, [sp]
    153e:	ec53 2b15 	vmov	r2, r3, d5
    1542:	485b      	ldr	r0, [pc, #364]	; (16b0 <MW_update+0x27c>)
    1544:	f000 fa28 	bl	1998 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    1548:	4b53      	ldr	r3, [pc, #332]	; (1698 <MW_update+0x264>)
    154a:	695b      	ldr	r3, [r3, #20]
    154c:	b29a      	uxth	r2, r3
    154e:	4b52      	ldr	r3, [pc, #328]	; (1698 <MW_update+0x264>)
    1550:	68db      	ldr	r3, [r3, #12]
    1552:	3301      	adds	r3, #1
    1554:	b29b      	uxth	r3, r3
    1556:	fb12 f303 	smulbb	r3, r2, r3
    155a:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    155c:	4b4e      	ldr	r3, [pc, #312]	; (1698 <MW_update+0x264>)
    155e:	68db      	ldr	r3, [r3, #12]
    1560:	b29a      	uxth	r2, r3
    1562:	88fb      	ldrh	r3, [r7, #6]
    1564:	4413      	add	r3, r2
    1566:	b29b      	uxth	r3, r3
    1568:	3301      	adds	r3, #1
    156a:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    156c:	4b4f      	ldr	r3, [pc, #316]	; (16ac <MW_update+0x278>)
    156e:	881b      	ldrh	r3, [r3, #0]
    1570:	b29b      	uxth	r3, r3
    1572:	88fa      	ldrh	r2, [r7, #6]
    1574:	429a      	cmp	r2, r3
    1576:	d010      	beq.n	159a <MW_update+0x166>
    1578:	4b4c      	ldr	r3, [pc, #304]	; (16ac <MW_update+0x278>)
    157a:	881b      	ldrh	r3, [r3, #0]
    157c:	b29b      	uxth	r3, r3
    157e:	88ba      	ldrh	r2, [r7, #4]
    1580:	429a      	cmp	r2, r3
    1582:	d00a      	beq.n	159a <MW_update+0x166>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    1584:	88fb      	ldrh	r3, [r7, #6]
    1586:	4a49      	ldr	r2, [pc, #292]	; (16ac <MW_update+0x278>)
    1588:	8812      	ldrh	r2, [r2, #0]
    158a:	b292      	uxth	r2, r2
    158c:	4619      	mov	r1, r3
    158e:	4849      	ldr	r0, [pc, #292]	; (16b4 <MW_update+0x280>)
    1590:	f000 fa02 	bl	1998 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    1594:	4848      	ldr	r0, [pc, #288]	; (16b8 <MW_update+0x284>)
    1596:	f000 fa07 	bl	19a8 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    159a:	4b3f      	ldr	r3, [pc, #252]	; (1698 <MW_update+0x264>)
    159c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    15a0:	2b02      	cmp	r3, #2
    15a2:	d103      	bne.n	15ac <MW_update+0x178>
					mw_sweep_settings.state = MW_STOPPED;
    15a4:	4b3c      	ldr	r3, [pc, #240]	; (1698 <MW_update+0x264>)
    15a6:	2200      	movs	r2, #0
    15a8:	705a      	strb	r2, [r3, #1]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    15aa:	e069      	b.n	1680 <MW_update+0x24c>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    15ac:	2000      	movs	r0, #0
    15ae:	f7ff fecb 	bl	1348 <start_MW_sweep>
			break;
    15b2:	e065      	b.n	1680 <MW_update+0x24c>
				mw_sweep_settings.current_point++; //increment point counter
    15b4:	4b38      	ldr	r3, [pc, #224]	; (1698 <MW_update+0x264>)
    15b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    15b8:	3301      	adds	r3, #1
    15ba:	4a37      	ldr	r2, [pc, #220]	; (1698 <MW_update+0x264>)
    15bc:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    15be:	4b36      	ldr	r3, [pc, #216]	; (1698 <MW_update+0x264>)
    15c0:	689a      	ldr	r2, [r3, #8]
    15c2:	4b35      	ldr	r3, [pc, #212]	; (1698 <MW_update+0x264>)
    15c4:	691b      	ldr	r3, [r3, #16]
    15c6:	4934      	ldr	r1, [pc, #208]	; (1698 <MW_update+0x264>)
    15c8:	6a49      	ldr	r1, [r1, #36]	; 0x24
    15ca:	fb01 f303 	mul.w	r3, r1, r3
    15ce:	4413      	add	r3, r2
    15d0:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    15d2:	4b31      	ldr	r3, [pc, #196]	; (1698 <MW_update+0x264>)
    15d4:	685b      	ldr	r3, [r3, #4]
    15d6:	4a30      	ldr	r2, [pc, #192]	; (1698 <MW_update+0x264>)
    15d8:	78d2      	ldrb	r2, [r2, #3]
    15da:	68f9      	ldr	r1, [r7, #12]
    15dc:	4618      	mov	r0, r3
    15de:	f7ff fa9f 	bl	b20 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    15e2:	4b2e      	ldr	r3, [pc, #184]	; (169c <MW_update+0x268>)
    15e4:	681b      	ldr	r3, [r3, #0]
    15e6:	4618      	mov	r0, r3
    15e8:	f000 f97c 	bl	18e4 <start_timer>
			break;
    15ec:	e048      	b.n	1680 <MW_update+0x24c>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    15ee:	4b2f      	ldr	r3, [pc, #188]	; (16ac <MW_update+0x278>)
    15f0:	881b      	ldrh	r3, [r3, #0]
    15f2:	b29b      	uxth	r3, r3
    15f4:	2b63      	cmp	r3, #99	; 0x63
    15f6:	d942      	bls.n	167e <MW_update+0x24a>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    15f8:	4b28      	ldr	r3, [pc, #160]	; (169c <MW_update+0x268>)
    15fa:	681b      	ldr	r3, [r3, #0]
    15fc:	4618      	mov	r0, r3
    15fe:	f000 f9a1 	bl	1944 <check_timer>
    1602:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    1604:	693b      	ldr	r3, [r7, #16]
    1606:	ee07 3a90 	vmov	s15, r3
    160a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    160e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 16bc <MW_update+0x288>
    1612:	eec7 7a26 	vdiv.f32	s15, s14, s13
    1616:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    161a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    161e:	ee37 7b06 	vadd.f64	d7, d7, d6
    1622:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1626:	ee17 2a90 	vmov	r2, s15
    162a:	4b25      	ldr	r3, [pc, #148]	; (16c0 <MW_update+0x28c>)
    162c:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    162e:	4b1b      	ldr	r3, [pc, #108]	; (169c <MW_update+0x268>)
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	4618      	mov	r0, r3
    1634:	f000 f974 	bl	1920 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    1638:	4b21      	ldr	r3, [pc, #132]	; (16c0 <MW_update+0x28c>)
    163a:	681b      	ldr	r3, [r3, #0]
    163c:	4619      	mov	r1, r3
    163e:	4821      	ldr	r0, [pc, #132]	; (16c4 <MW_update+0x290>)
    1640:	f000 f9aa 	bl	1998 <__printf_veneer>
				action_taken = true;
    1644:	2301      	movs	r3, #1
    1646:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    1648:	4b13      	ldr	r3, [pc, #76]	; (1698 <MW_update+0x264>)
    164a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    164e:	2b01      	cmp	r3, #1
    1650:	d103      	bne.n	165a <MW_update+0x226>
					mw_sweep_settings.state = MW_STOPPED;
    1652:	4b11      	ldr	r3, [pc, #68]	; (1698 <MW_update+0x264>)
    1654:	2200      	movs	r2, #0
    1656:	705a      	strb	r2, [r3, #1]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    1658:	e011      	b.n	167e <MW_update+0x24a>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    165a:	2000      	movs	r0, #0
    165c:	f7ff fe74 	bl	1348 <start_MW_sweep>
			break;
    1660:	e00d      	b.n	167e <MW_update+0x24a>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    1662:	4b0d      	ldr	r3, [pc, #52]	; (1698 <MW_update+0x264>)
    1664:	785b      	ldrb	r3, [r3, #1]
    1666:	4619      	mov	r1, r3
    1668:	4817      	ldr	r0, [pc, #92]	; (16c8 <MW_update+0x294>)
    166a:	f000 f995 	bl	1998 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    166e:	7dbb      	ldrb	r3, [r7, #22]
    1670:	4619      	mov	r1, r3
    1672:	4816      	ldr	r0, [pc, #88]	; (16cc <MW_update+0x298>)
    1674:	f000 f990 	bl	1998 <__printf_veneer>
    1678:	e002      	b.n	1680 <MW_update+0x24c>
			break; //no action to take
    167a:	bf00      	nop
    167c:	e000      	b.n	1680 <MW_update+0x24c>
			break;
    167e:	bf00      	nop
	}
    return(action_taken);
    1680:	7dfb      	ldrb	r3, [r7, #23]
}
    1682:	4618      	mov	r0, r3
    1684:	3718      	adds	r7, #24
    1686:	46bd      	mov	sp, r7
    1688:	bd80      	pop	{r7, pc}
    168a:	bf00      	nop
    168c:	f3af 8000 	nop.w
    1690:	00000000 	.word	0x00000000
    1694:	412e8480 	.word	0x412e8480
    1698:	20000648 	.word	0x20000648
    169c:	2000001c 	.word	0x2000001c
    16a0:	58020400 	.word	0x58020400
    16a4:	58021800 	.word	0x58021800
    16a8:	20000020 	.word	0x20000020
    16ac:	200005fe 	.word	0x200005fe
    16b0:	0801c2a4 	.word	0x0801c2a4
    16b4:	0801c2dc 	.word	0x0801c2dc
    16b8:	0801c318 	.word	0x0801c318
    16bc:	42c80000 	.word	0x42c80000
    16c0:	20000600 	.word	0x20000600
    16c4:	0801c33c 	.word	0x0801c33c
    16c8:	0801c36c 	.word	0x0801c36c
    16cc:	0801c398 	.word	0x0801c398

000016d0 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    16d0:	b580      	push	{r7, lr}
    16d2:	b090      	sub	sp, #64	; 0x40
    16d4:	af02      	add	r7, sp, #8
    16d6:	ed87 0b02 	vstr	d0, [r7, #8]
    16da:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    16de:	486a      	ldr	r0, [pc, #424]	; (1888 <MW_frequency_toggle+0x1b8>)
    16e0:	f000 f962 	bl	19a8 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    16e4:	ed97 7b02 	vldr	d7, [r7, #8]
    16e8:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 1868 <MW_frequency_toggle+0x198>
    16ec:	ee87 4b06 	vdiv.f64	d4, d7, d6
    16f0:	ed97 6b00 	vldr	d6, [r7]
    16f4:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 1868 <MW_frequency_toggle+0x198>
    16f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
    16fc:	ed8d 7b00 	vstr	d7, [sp]
    1700:	ec53 2b14 	vmov	r2, r3, d4
    1704:	4861      	ldr	r0, [pc, #388]	; (188c <MW_frequency_toggle+0x1bc>)
    1706:	f000 f947 	bl	1998 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    170a:	ed9f 5b59 	vldr	d5, [pc, #356]	; 1870 <MW_frequency_toggle+0x1a0>
    170e:	ed97 6b02 	vldr	d6, [r7, #8]
    1712:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1716:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    171a:	ee17 3a90 	vmov	r3, s15
    171e:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1722:	2b01      	cmp	r3, #1
    1724:	d00b      	beq.n	173e <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    1726:	e002      	b.n	172e <MW_frequency_toggle+0x5e>
			k_one--;
    1728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    172a:	3b01      	subs	r3, #1
    172c:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    172e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1730:	2b3e      	cmp	r3, #62	; 0x3e
    1732:	d8f9      	bhi.n	1728 <MW_frequency_toggle+0x58>
    1734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1736:	f003 0301 	and.w	r3, r3, #1
    173a:	2b00      	cmp	r3, #0
    173c:	d1f4      	bne.n	1728 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    173e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 1870 <MW_frequency_toggle+0x1a0>
    1742:	ed97 6b00 	vldr	d6, [r7]
    1746:	ee85 7b06 	vdiv.f64	d7, d5, d6
    174a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    174e:	ee17 3a90 	vmov	r3, s15
    1752:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    1754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1756:	2b01      	cmp	r3, #1
    1758:	d00b      	beq.n	1772 <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    175a:	e002      	b.n	1762 <MW_frequency_toggle+0x92>
			k_two--;
    175c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    175e:	3b01      	subs	r3, #1
    1760:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    1762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1764:	2b3e      	cmp	r3, #62	; 0x3e
    1766:	d8f9      	bhi.n	175c <MW_frequency_toggle+0x8c>
    1768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    176a:	f003 0301 	and.w	r3, r3, #1
    176e:	2b00      	cmp	r3, #0
    1770:	d1f4      	bne.n	175c <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    1772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1774:	ee07 3a90 	vmov	s15, r3
    1778:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    177c:	ed97 7b02 	vldr	d7, [r7, #8]
    1780:	ee26 6b07 	vmul.f64	d6, d6, d7
    1784:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 1878 <MW_frequency_toggle+0x1a8>
    1788:	ee86 7b05 	vdiv.f64	d7, d6, d5
    178c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    1790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1792:	ee07 3a90 	vmov	s15, r3
    1796:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    179a:	ed97 7b00 	vldr	d7, [r7]
    179e:	ee26 6b07 	vmul.f64	d6, d6, d7
    17a2:	ed9f 5b35 	vldr	d5, [pc, #212]	; 1878 <MW_frequency_toggle+0x1a8>
    17a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
    17aa:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    17ae:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    17b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    17b6:	ee17 3a90 	vmov	r3, s15
    17ba:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    17bc:	69fb      	ldr	r3, [r7, #28]
    17be:	ee07 3a90 	vmov	s15, r3
    17c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    17c6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    17ca:	ee36 7b47 	vsub.f64	d7, d6, d7
    17ce:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 1880 <MW_frequency_toggle+0x1b0>
    17d2:	ee27 7b06 	vmul.f64	d7, d7, d6
    17d6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    17da:	ee37 7b06 	vadd.f64	d7, d7, d6
    17de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    17e2:	ee17 3a90 	vmov	r3, s15
    17e6:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    17e8:	ed97 7b08 	vldr	d7, [r7, #32]
    17ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    17f0:	ee17 3a90 	vmov	r3, s15
    17f4:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    17f6:	697b      	ldr	r3, [r7, #20]
    17f8:	ee07 3a90 	vmov	s15, r3
    17fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1800:	ed97 6b08 	vldr	d6, [r7, #32]
    1804:	ee36 7b47 	vsub.f64	d7, d6, d7
    1808:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 1880 <MW_frequency_toggle+0x1b0>
    180c:	ee27 7b06 	vmul.f64	d7, d7, d6
    1810:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1814:	ee37 7b06 	vadd.f64	d7, d7, d6
    1818:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    181c:	ee17 3a90 	vmov	r3, s15
    1820:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    1822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1824:	69b9      	ldr	r1, [r7, #24]
    1826:	69f8      	ldr	r0, [r7, #28]
    1828:	f7ff f97a 	bl	b20 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    182c:	2200      	movs	r2, #0
    182e:	2101      	movs	r1, #1
    1830:	4817      	ldr	r0, [pc, #92]	; (1890 <MW_frequency_toggle+0x1c0>)
    1832:	f000 f8b5 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    1836:	4b17      	ldr	r3, [pc, #92]	; (1894 <MW_frequency_toggle+0x1c4>)
    1838:	681b      	ldr	r3, [r3, #0]
    183a:	2164      	movs	r1, #100	; 0x64
    183c:	4618      	mov	r0, r3
    183e:	f000 f88d 	bl	195c <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    1842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1844:	6939      	ldr	r1, [r7, #16]
    1846:	6978      	ldr	r0, [r7, #20]
    1848:	f7ff f96a 	bl	b20 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    184c:	2201      	movs	r2, #1
    184e:	2101      	movs	r1, #1
    1850:	480f      	ldr	r0, [pc, #60]	; (1890 <MW_frequency_toggle+0x1c0>)
    1852:	f000 f8a5 	bl	19a0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    1856:	4b0f      	ldr	r3, [pc, #60]	; (1894 <MW_frequency_toggle+0x1c4>)
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	2164      	movs	r1, #100	; 0x64
    185c:	4618      	mov	r0, r3
    185e:	f000 f87d 	bl	195c <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    1862:	e7de      	b.n	1822 <MW_frequency_toggle+0x152>
    1864:	f3af 8000 	nop.w
    1868:	00000000 	.word	0x00000000
    186c:	41cdcd65 	.word	0x41cdcd65
    1870:	20000000 	.word	0x20000000
    1874:	41ee8c21 	.word	0x41ee8c21
    1878:	00000000 	.word	0x00000000
    187c:	4187d784 	.word	0x4187d784
    1880:	00000000 	.word	0x00000000
    1884:	41700000 	.word	0x41700000
    1888:	0801c3b0 	.word	0x0801c3b0
    188c:	0801c3d4 	.word	0x0801c3d4
    1890:	58021800 	.word	0x58021800
    1894:	20000018 	.word	0x20000018

00001898 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    1898:	b580      	push	{r7, lr}
    189a:	b084      	sub	sp, #16
    189c:	af00      	add	r7, sp, #0
    189e:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    18a0:	2300      	movs	r3, #0
    18a2:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	2b1f      	cmp	r3, #31
    18a8:	d904      	bls.n	18b4 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    18aa:	480d      	ldr	r0, [pc, #52]	; (18e0 <set_SDO_output+0x48>)
    18ac:	f000 f87c 	bl	19a8 <__puts_veneer>
		Error_Handler();
    18b0:	f000 f87e 	bl	19b0 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    18b4:	200f      	movs	r0, #15
    18b6:	f7fe ff99 	bl	7ec <synth_readreg>
    18ba:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    18bc:	68fb      	ldr	r3, [r7, #12]
    18be:	f023 031f 	bic.w	r3, r3, #31
    18c2:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    18c4:	68fa      	ldr	r2, [r7, #12]
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	4313      	orrs	r3, r2
    18ca:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    18cc:	2301      	movs	r3, #1
    18ce:	2200      	movs	r2, #0
    18d0:	210f      	movs	r1, #15
    18d2:	68f8      	ldr	r0, [r7, #12]
    18d4:	f7fe ff10 	bl	6f8 <synth_writereg>
}
    18d8:	bf00      	nop
    18da:	3710      	adds	r7, #16
    18dc:	46bd      	mov	sp, r7
    18de:	bd80      	pop	{r7, pc}
    18e0:	0801c3fc 	.word	0x0801c3fc

000018e4 <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    18e4:	b480      	push	{r7}
    18e6:	b083      	sub	sp, #12
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	681b      	ldr	r3, [r3, #0]
    18f0:	f023 0201 	bic.w	r2, r3, #1
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	695b      	ldr	r3, [r3, #20]
    18fc:	f043 0201 	orr.w	r2, r3, #1
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	f043 0201 	orr.w	r2, r3, #1
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1914:	4618      	mov	r0, r3
    1916:	370c      	adds	r7, #12
    1918:	46bd      	mov	sp, r7
    191a:	f85d 7b04 	ldr.w	r7, [sp], #4
    191e:	4770      	bx	lr

00001920 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1920:	b480      	push	{r7}
    1922:	b083      	sub	sp, #12
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	681b      	ldr	r3, [r3, #0]
    192c:	f023 0201 	bic.w	r2, r3, #1
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1938:	4618      	mov	r0, r3
    193a:	370c      	adds	r7, #12
    193c:	46bd      	mov	sp, r7
    193e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1942:	4770      	bx	lr

00001944 <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    1944:	b480      	push	{r7}
    1946:	b083      	sub	sp, #12
    1948:	af00      	add	r7, sp, #0
    194a:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1950:	4618      	mov	r0, r3
    1952:	370c      	adds	r7, #12
    1954:	46bd      	mov	sp, r7
    1956:	f85d 7b04 	ldr.w	r7, [sp], #4
    195a:	4770      	bx	lr

0000195c <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    195c:	b580      	push	{r7, lr}
    195e:	b084      	sub	sp, #16
    1960:	af00      	add	r7, sp, #0
    1962:	6078      	str	r0, [r7, #4]
    1964:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    1966:	6878      	ldr	r0, [r7, #4]
    1968:	f7ff ffbc 	bl	18e4 <start_timer>
    196c:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    196e:	bf00      	nop
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1974:	683a      	ldr	r2, [r7, #0]
    1976:	429a      	cmp	r2, r3
    1978:	d8fa      	bhi.n	1970 <timer_delay+0x14>

	stop_timer(timer);
    197a:	6878      	ldr	r0, [r7, #4]
    197c:	f7ff ffd0 	bl	1920 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    1980:	bf00      	nop
    1982:	3710      	adds	r7, #16
    1984:	46bd      	mov	sp, r7
    1986:	bd80      	pop	{r7, pc}

00001988 <__HAL_DAC_SetValue_veneer>:
    1988:	f85f f000 	ldr.w	pc, [pc]	; 198c <__HAL_DAC_SetValue_veneer+0x4>
    198c:	08005e35 	.word	0x08005e35

00001990 <__HAL_Delay_veneer>:
    1990:	f85f f000 	ldr.w	pc, [pc]	; 1994 <__HAL_Delay_veneer+0x4>
    1994:	08003eb5 	.word	0x08003eb5

00001998 <__printf_veneer>:
    1998:	f85f f000 	ldr.w	pc, [pc]	; 199c <__printf_veneer+0x4>
    199c:	08019af1 	.word	0x08019af1

000019a0 <__HAL_GPIO_WritePin_veneer>:
    19a0:	f85f f000 	ldr.w	pc, [pc]	; 19a4 <__HAL_GPIO_WritePin_veneer+0x4>
    19a4:	08007a8d 	.word	0x08007a8d

000019a8 <__puts_veneer>:
    19a8:	f85f f000 	ldr.w	pc, [pc]	; 19ac <__puts_veneer+0x4>
    19ac:	08019bbd 	.word	0x08019bbd

000019b0 <__Error_Handler_veneer>:
    19b0:	f85f f000 	ldr.w	pc, [pc]	; 19b4 <__Error_Handler_veneer+0x4>
    19b4:	08003139 	.word	0x08003139

000019b8 <__HAL_GPIO_TogglePin_veneer>:
    19b8:	f85f f000 	ldr.w	pc, [pc]	; 19bc <__HAL_GPIO_TogglePin_veneer+0x4>
    19bc:	08007abf 	.word	0x08007abf

000019c0 <__HAL_GPIO_ReadPin_veneer>:
    19c0:	f85f f000 	ldr.w	pc, [pc]	; 19c4 <__HAL_GPIO_ReadPin_veneer+0x4>
    19c4:	08007a5d 	.word	0x08007a5d

Disassembly of section .text:

08001c60 <__do_global_dtors_aux>:
 8001c60:	b510      	push	{r4, lr}
 8001c62:	4c05      	ldr	r4, [pc, #20]	; (8001c78 <__do_global_dtors_aux+0x18>)
 8001c64:	7823      	ldrb	r3, [r4, #0]
 8001c66:	b933      	cbnz	r3, 8001c76 <__do_global_dtors_aux+0x16>
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <__do_global_dtors_aux+0x1c>)
 8001c6a:	b113      	cbz	r3, 8001c72 <__do_global_dtors_aux+0x12>
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <__do_global_dtors_aux+0x20>)
 8001c6e:	f3af 8000 	nop.w
 8001c72:	2301      	movs	r3, #1
 8001c74:	7023      	strb	r3, [r4, #0]
 8001c76:	bd10      	pop	{r4, pc}
 8001c78:	20000230 	.word	0x20000230
 8001c7c:	00000000 	.word	0x00000000
 8001c80:	0801b9f8 	.word	0x0801b9f8

08001c84 <frame_dummy>:
 8001c84:	b508      	push	{r3, lr}
 8001c86:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <frame_dummy+0x10>)
 8001c88:	b11b      	cbz	r3, 8001c92 <frame_dummy+0xe>
 8001c8a:	4903      	ldr	r1, [pc, #12]	; (8001c98 <frame_dummy+0x14>)
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <frame_dummy+0x18>)
 8001c8e:	f3af 8000 	nop.w
 8001c92:	bd08      	pop	{r3, pc}
 8001c94:	00000000 	.word	0x00000000
 8001c98:	20000234 	.word	0x20000234
 8001c9c:	0801b9f8 	.word	0x0801b9f8

08001ca0 <memchr>:
 8001ca0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001ca4:	2a10      	cmp	r2, #16
 8001ca6:	db2b      	blt.n	8001d00 <memchr+0x60>
 8001ca8:	f010 0f07 	tst.w	r0, #7
 8001cac:	d008      	beq.n	8001cc0 <memchr+0x20>
 8001cae:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001cb2:	3a01      	subs	r2, #1
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d02d      	beq.n	8001d14 <memchr+0x74>
 8001cb8:	f010 0f07 	tst.w	r0, #7
 8001cbc:	b342      	cbz	r2, 8001d10 <memchr+0x70>
 8001cbe:	d1f6      	bne.n	8001cae <memchr+0xe>
 8001cc0:	b4f0      	push	{r4, r5, r6, r7}
 8001cc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001cc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001cca:	f022 0407 	bic.w	r4, r2, #7
 8001cce:	f07f 0700 	mvns.w	r7, #0
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001cd8:	3c08      	subs	r4, #8
 8001cda:	ea85 0501 	eor.w	r5, r5, r1
 8001cde:	ea86 0601 	eor.w	r6, r6, r1
 8001ce2:	fa85 f547 	uadd8	r5, r5, r7
 8001ce6:	faa3 f587 	sel	r5, r3, r7
 8001cea:	fa86 f647 	uadd8	r6, r6, r7
 8001cee:	faa5 f687 	sel	r6, r5, r7
 8001cf2:	b98e      	cbnz	r6, 8001d18 <memchr+0x78>
 8001cf4:	d1ee      	bne.n	8001cd4 <memchr+0x34>
 8001cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001cfc:	f002 0207 	and.w	r2, r2, #7
 8001d00:	b132      	cbz	r2, 8001d10 <memchr+0x70>
 8001d02:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001d06:	3a01      	subs	r2, #1
 8001d08:	ea83 0301 	eor.w	r3, r3, r1
 8001d0c:	b113      	cbz	r3, 8001d14 <memchr+0x74>
 8001d0e:	d1f8      	bne.n	8001d02 <memchr+0x62>
 8001d10:	2000      	movs	r0, #0
 8001d12:	4770      	bx	lr
 8001d14:	3801      	subs	r0, #1
 8001d16:	4770      	bx	lr
 8001d18:	2d00      	cmp	r5, #0
 8001d1a:	bf06      	itte	eq
 8001d1c:	4635      	moveq	r5, r6
 8001d1e:	3803      	subeq	r0, #3
 8001d20:	3807      	subne	r0, #7
 8001d22:	f015 0f01 	tst.w	r5, #1
 8001d26:	d107      	bne.n	8001d38 <memchr+0x98>
 8001d28:	3001      	adds	r0, #1
 8001d2a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001d2e:	bf02      	ittt	eq
 8001d30:	3001      	addeq	r0, #1
 8001d32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001d36:	3001      	addeq	r0, #1
 8001d38:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3a:	3801      	subs	r0, #1
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <strlen>:
 8001d40:	4603      	mov	r3, r0
 8001d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d1fb      	bne.n	8001d42 <strlen+0x2>
 8001d4a:	1a18      	subs	r0, r3, r0
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4770      	bx	lr

08001d50 <__aeabi_uldivmod>:
 8001d50:	b953      	cbnz	r3, 8001d68 <__aeabi_uldivmod+0x18>
 8001d52:	b94a      	cbnz	r2, 8001d68 <__aeabi_uldivmod+0x18>
 8001d54:	2900      	cmp	r1, #0
 8001d56:	bf08      	it	eq
 8001d58:	2800      	cmpeq	r0, #0
 8001d5a:	bf1c      	itt	ne
 8001d5c:	f04f 31ff 	movne.w	r1, #4294967295
 8001d60:	f04f 30ff 	movne.w	r0, #4294967295
 8001d64:	f000 b970 	b.w	8002048 <__aeabi_idiv0>
 8001d68:	f1ad 0c08 	sub.w	ip, sp, #8
 8001d6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001d70:	f000 f806 	bl	8001d80 <__udivmoddi4>
 8001d74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001d7c:	b004      	add	sp, #16
 8001d7e:	4770      	bx	lr

08001d80 <__udivmoddi4>:
 8001d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d84:	9e08      	ldr	r6, [sp, #32]
 8001d86:	460d      	mov	r5, r1
 8001d88:	4604      	mov	r4, r0
 8001d8a:	460f      	mov	r7, r1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d14a      	bne.n	8001e26 <__udivmoddi4+0xa6>
 8001d90:	428a      	cmp	r2, r1
 8001d92:	4694      	mov	ip, r2
 8001d94:	d965      	bls.n	8001e62 <__udivmoddi4+0xe2>
 8001d96:	fab2 f382 	clz	r3, r2
 8001d9a:	b143      	cbz	r3, 8001dae <__udivmoddi4+0x2e>
 8001d9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001da0:	f1c3 0220 	rsb	r2, r3, #32
 8001da4:	409f      	lsls	r7, r3
 8001da6:	fa20 f202 	lsr.w	r2, r0, r2
 8001daa:	4317      	orrs	r7, r2
 8001dac:	409c      	lsls	r4, r3
 8001dae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001db2:	fa1f f58c 	uxth.w	r5, ip
 8001db6:	fbb7 f1fe 	udiv	r1, r7, lr
 8001dba:	0c22      	lsrs	r2, r4, #16
 8001dbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8001dc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001dc4:	fb01 f005 	mul.w	r0, r1, r5
 8001dc8:	4290      	cmp	r0, r2
 8001dca:	d90a      	bls.n	8001de2 <__udivmoddi4+0x62>
 8001dcc:	eb1c 0202 	adds.w	r2, ip, r2
 8001dd0:	f101 37ff 	add.w	r7, r1, #4294967295
 8001dd4:	f080 811c 	bcs.w	8002010 <__udivmoddi4+0x290>
 8001dd8:	4290      	cmp	r0, r2
 8001dda:	f240 8119 	bls.w	8002010 <__udivmoddi4+0x290>
 8001dde:	3902      	subs	r1, #2
 8001de0:	4462      	add	r2, ip
 8001de2:	1a12      	subs	r2, r2, r0
 8001de4:	b2a4      	uxth	r4, r4
 8001de6:	fbb2 f0fe 	udiv	r0, r2, lr
 8001dea:	fb0e 2210 	mls	r2, lr, r0, r2
 8001dee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001df2:	fb00 f505 	mul.w	r5, r0, r5
 8001df6:	42a5      	cmp	r5, r4
 8001df8:	d90a      	bls.n	8001e10 <__udivmoddi4+0x90>
 8001dfa:	eb1c 0404 	adds.w	r4, ip, r4
 8001dfe:	f100 32ff 	add.w	r2, r0, #4294967295
 8001e02:	f080 8107 	bcs.w	8002014 <__udivmoddi4+0x294>
 8001e06:	42a5      	cmp	r5, r4
 8001e08:	f240 8104 	bls.w	8002014 <__udivmoddi4+0x294>
 8001e0c:	4464      	add	r4, ip
 8001e0e:	3802      	subs	r0, #2
 8001e10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001e14:	1b64      	subs	r4, r4, r5
 8001e16:	2100      	movs	r1, #0
 8001e18:	b11e      	cbz	r6, 8001e22 <__udivmoddi4+0xa2>
 8001e1a:	40dc      	lsrs	r4, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e9c6 4300 	strd	r4, r3, [r6]
 8001e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e26:	428b      	cmp	r3, r1
 8001e28:	d908      	bls.n	8001e3c <__udivmoddi4+0xbc>
 8001e2a:	2e00      	cmp	r6, #0
 8001e2c:	f000 80ed 	beq.w	800200a <__udivmoddi4+0x28a>
 8001e30:	2100      	movs	r1, #0
 8001e32:	e9c6 0500 	strd	r0, r5, [r6]
 8001e36:	4608      	mov	r0, r1
 8001e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3c:	fab3 f183 	clz	r1, r3
 8001e40:	2900      	cmp	r1, #0
 8001e42:	d149      	bne.n	8001ed8 <__udivmoddi4+0x158>
 8001e44:	42ab      	cmp	r3, r5
 8001e46:	d302      	bcc.n	8001e4e <__udivmoddi4+0xce>
 8001e48:	4282      	cmp	r2, r0
 8001e4a:	f200 80f8 	bhi.w	800203e <__udivmoddi4+0x2be>
 8001e4e:	1a84      	subs	r4, r0, r2
 8001e50:	eb65 0203 	sbc.w	r2, r5, r3
 8001e54:	2001      	movs	r0, #1
 8001e56:	4617      	mov	r7, r2
 8001e58:	2e00      	cmp	r6, #0
 8001e5a:	d0e2      	beq.n	8001e22 <__udivmoddi4+0xa2>
 8001e5c:	e9c6 4700 	strd	r4, r7, [r6]
 8001e60:	e7df      	b.n	8001e22 <__udivmoddi4+0xa2>
 8001e62:	b902      	cbnz	r2, 8001e66 <__udivmoddi4+0xe6>
 8001e64:	deff      	udf	#255	; 0xff
 8001e66:	fab2 f382 	clz	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8090 	bne.w	8001f90 <__udivmoddi4+0x210>
 8001e70:	1a8a      	subs	r2, r1, r2
 8001e72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001e76:	fa1f fe8c 	uxth.w	lr, ip
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001e80:	fb07 2015 	mls	r0, r7, r5, r2
 8001e84:	0c22      	lsrs	r2, r4, #16
 8001e86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001e8a:	fb0e f005 	mul.w	r0, lr, r5
 8001e8e:	4290      	cmp	r0, r2
 8001e90:	d908      	bls.n	8001ea4 <__udivmoddi4+0x124>
 8001e92:	eb1c 0202 	adds.w	r2, ip, r2
 8001e96:	f105 38ff 	add.w	r8, r5, #4294967295
 8001e9a:	d202      	bcs.n	8001ea2 <__udivmoddi4+0x122>
 8001e9c:	4290      	cmp	r0, r2
 8001e9e:	f200 80cb 	bhi.w	8002038 <__udivmoddi4+0x2b8>
 8001ea2:	4645      	mov	r5, r8
 8001ea4:	1a12      	subs	r2, r2, r0
 8001ea6:	b2a4      	uxth	r4, r4
 8001ea8:	fbb2 f0f7 	udiv	r0, r2, r7
 8001eac:	fb07 2210 	mls	r2, r7, r0, r2
 8001eb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001eb4:	fb0e fe00 	mul.w	lr, lr, r0
 8001eb8:	45a6      	cmp	lr, r4
 8001eba:	d908      	bls.n	8001ece <__udivmoddi4+0x14e>
 8001ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8001ec0:	f100 32ff 	add.w	r2, r0, #4294967295
 8001ec4:	d202      	bcs.n	8001ecc <__udivmoddi4+0x14c>
 8001ec6:	45a6      	cmp	lr, r4
 8001ec8:	f200 80bb 	bhi.w	8002042 <__udivmoddi4+0x2c2>
 8001ecc:	4610      	mov	r0, r2
 8001ece:	eba4 040e 	sub.w	r4, r4, lr
 8001ed2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001ed6:	e79f      	b.n	8001e18 <__udivmoddi4+0x98>
 8001ed8:	f1c1 0720 	rsb	r7, r1, #32
 8001edc:	408b      	lsls	r3, r1
 8001ede:	fa22 fc07 	lsr.w	ip, r2, r7
 8001ee2:	ea4c 0c03 	orr.w	ip, ip, r3
 8001ee6:	fa05 f401 	lsl.w	r4, r5, r1
 8001eea:	fa20 f307 	lsr.w	r3, r0, r7
 8001eee:	40fd      	lsrs	r5, r7
 8001ef0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001ef4:	4323      	orrs	r3, r4
 8001ef6:	fbb5 f8f9 	udiv	r8, r5, r9
 8001efa:	fa1f fe8c 	uxth.w	lr, ip
 8001efe:	fb09 5518 	mls	r5, r9, r8, r5
 8001f02:	0c1c      	lsrs	r4, r3, #16
 8001f04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001f08:	fb08 f50e 	mul.w	r5, r8, lr
 8001f0c:	42a5      	cmp	r5, r4
 8001f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8001f12:	fa00 f001 	lsl.w	r0, r0, r1
 8001f16:	d90b      	bls.n	8001f30 <__udivmoddi4+0x1b0>
 8001f18:	eb1c 0404 	adds.w	r4, ip, r4
 8001f1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001f20:	f080 8088 	bcs.w	8002034 <__udivmoddi4+0x2b4>
 8001f24:	42a5      	cmp	r5, r4
 8001f26:	f240 8085 	bls.w	8002034 <__udivmoddi4+0x2b4>
 8001f2a:	f1a8 0802 	sub.w	r8, r8, #2
 8001f2e:	4464      	add	r4, ip
 8001f30:	1b64      	subs	r4, r4, r5
 8001f32:	b29d      	uxth	r5, r3
 8001f34:	fbb4 f3f9 	udiv	r3, r4, r9
 8001f38:	fb09 4413 	mls	r4, r9, r3, r4
 8001f3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001f40:	fb03 fe0e 	mul.w	lr, r3, lr
 8001f44:	45a6      	cmp	lr, r4
 8001f46:	d908      	bls.n	8001f5a <__udivmoddi4+0x1da>
 8001f48:	eb1c 0404 	adds.w	r4, ip, r4
 8001f4c:	f103 35ff 	add.w	r5, r3, #4294967295
 8001f50:	d26c      	bcs.n	800202c <__udivmoddi4+0x2ac>
 8001f52:	45a6      	cmp	lr, r4
 8001f54:	d96a      	bls.n	800202c <__udivmoddi4+0x2ac>
 8001f56:	3b02      	subs	r3, #2
 8001f58:	4464      	add	r4, ip
 8001f5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001f5e:	fba3 9502 	umull	r9, r5, r3, r2
 8001f62:	eba4 040e 	sub.w	r4, r4, lr
 8001f66:	42ac      	cmp	r4, r5
 8001f68:	46c8      	mov	r8, r9
 8001f6a:	46ae      	mov	lr, r5
 8001f6c:	d356      	bcc.n	800201c <__udivmoddi4+0x29c>
 8001f6e:	d053      	beq.n	8002018 <__udivmoddi4+0x298>
 8001f70:	b156      	cbz	r6, 8001f88 <__udivmoddi4+0x208>
 8001f72:	ebb0 0208 	subs.w	r2, r0, r8
 8001f76:	eb64 040e 	sbc.w	r4, r4, lr
 8001f7a:	fa04 f707 	lsl.w	r7, r4, r7
 8001f7e:	40ca      	lsrs	r2, r1
 8001f80:	40cc      	lsrs	r4, r1
 8001f82:	4317      	orrs	r7, r2
 8001f84:	e9c6 7400 	strd	r7, r4, [r6]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f90:	f1c3 0120 	rsb	r1, r3, #32
 8001f94:	fa02 fc03 	lsl.w	ip, r2, r3
 8001f98:	fa20 f201 	lsr.w	r2, r0, r1
 8001f9c:	fa25 f101 	lsr.w	r1, r5, r1
 8001fa0:	409d      	lsls	r5, r3
 8001fa2:	432a      	orrs	r2, r5
 8001fa4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001fa8:	fa1f fe8c 	uxth.w	lr, ip
 8001fac:	fbb1 f0f7 	udiv	r0, r1, r7
 8001fb0:	fb07 1510 	mls	r5, r7, r0, r1
 8001fb4:	0c11      	lsrs	r1, r2, #16
 8001fb6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001fba:	fb00 f50e 	mul.w	r5, r0, lr
 8001fbe:	428d      	cmp	r5, r1
 8001fc0:	fa04 f403 	lsl.w	r4, r4, r3
 8001fc4:	d908      	bls.n	8001fd8 <__udivmoddi4+0x258>
 8001fc6:	eb1c 0101 	adds.w	r1, ip, r1
 8001fca:	f100 38ff 	add.w	r8, r0, #4294967295
 8001fce:	d22f      	bcs.n	8002030 <__udivmoddi4+0x2b0>
 8001fd0:	428d      	cmp	r5, r1
 8001fd2:	d92d      	bls.n	8002030 <__udivmoddi4+0x2b0>
 8001fd4:	3802      	subs	r0, #2
 8001fd6:	4461      	add	r1, ip
 8001fd8:	1b49      	subs	r1, r1, r5
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	fbb1 f5f7 	udiv	r5, r1, r7
 8001fe0:	fb07 1115 	mls	r1, r7, r5, r1
 8001fe4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fe8:	fb05 f10e 	mul.w	r1, r5, lr
 8001fec:	4291      	cmp	r1, r2
 8001fee:	d908      	bls.n	8002002 <__udivmoddi4+0x282>
 8001ff0:	eb1c 0202 	adds.w	r2, ip, r2
 8001ff4:	f105 38ff 	add.w	r8, r5, #4294967295
 8001ff8:	d216      	bcs.n	8002028 <__udivmoddi4+0x2a8>
 8001ffa:	4291      	cmp	r1, r2
 8001ffc:	d914      	bls.n	8002028 <__udivmoddi4+0x2a8>
 8001ffe:	3d02      	subs	r5, #2
 8002000:	4462      	add	r2, ip
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8002008:	e738      	b.n	8001e7c <__udivmoddi4+0xfc>
 800200a:	4631      	mov	r1, r6
 800200c:	4630      	mov	r0, r6
 800200e:	e708      	b.n	8001e22 <__udivmoddi4+0xa2>
 8002010:	4639      	mov	r1, r7
 8002012:	e6e6      	b.n	8001de2 <__udivmoddi4+0x62>
 8002014:	4610      	mov	r0, r2
 8002016:	e6fb      	b.n	8001e10 <__udivmoddi4+0x90>
 8002018:	4548      	cmp	r0, r9
 800201a:	d2a9      	bcs.n	8001f70 <__udivmoddi4+0x1f0>
 800201c:	ebb9 0802 	subs.w	r8, r9, r2
 8002020:	eb65 0e0c 	sbc.w	lr, r5, ip
 8002024:	3b01      	subs	r3, #1
 8002026:	e7a3      	b.n	8001f70 <__udivmoddi4+0x1f0>
 8002028:	4645      	mov	r5, r8
 800202a:	e7ea      	b.n	8002002 <__udivmoddi4+0x282>
 800202c:	462b      	mov	r3, r5
 800202e:	e794      	b.n	8001f5a <__udivmoddi4+0x1da>
 8002030:	4640      	mov	r0, r8
 8002032:	e7d1      	b.n	8001fd8 <__udivmoddi4+0x258>
 8002034:	46d0      	mov	r8, sl
 8002036:	e77b      	b.n	8001f30 <__udivmoddi4+0x1b0>
 8002038:	3d02      	subs	r5, #2
 800203a:	4462      	add	r2, ip
 800203c:	e732      	b.n	8001ea4 <__udivmoddi4+0x124>
 800203e:	4608      	mov	r0, r1
 8002040:	e70a      	b.n	8001e58 <__udivmoddi4+0xd8>
 8002042:	4464      	add	r4, ip
 8002044:	3802      	subs	r0, #2
 8002046:	e742      	b.n	8001ece <__udivmoddi4+0x14e>

08002048 <__aeabi_idiv0>:
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop

0800204c <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8002054:	1d39      	adds	r1, r7, #4
 8002056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800205a:	2201      	movs	r2, #1
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <__io_putchar+0x20>)
 800205e:	f00b fd07 	bl	800da70 <HAL_UART_Transmit>
	return ch;
 8002062:	687b      	ldr	r3, [r7, #4]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000568 	.word	0x20000568

08002070 <main>:
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8002076:	4aaa      	ldr	r2, [pc, #680]	; (8002320 <main+0x2b0>)
 8002078:	4baa      	ldr	r3, [pc, #680]	; (8002324 <main+0x2b4>)
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	461a      	mov	r2, r3
 800207e:	49aa      	ldr	r1, [pc, #680]	; (8002328 <main+0x2b8>)
 8002080:	48a8      	ldr	r0, [pc, #672]	; (8002324 <main+0x2b4>)
 8002082:	f017 ff04 	bl	8019e8e <memcpy>
  MPU_Config();
 8002086:	f001 f805 	bl	8003094 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800208a:	4ba8      	ldr	r3, [pc, #672]	; (800232c <main+0x2bc>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11b      	bne.n	80020ce <main+0x5e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002096:	f3bf 8f4f 	dsb	sy
}
 800209a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800209c:	f3bf 8f6f 	isb	sy
}
 80020a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80020a2:	4ba2      	ldr	r3, [pc, #648]	; (800232c <main+0x2bc>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80020aa:	f3bf 8f4f 	dsb	sy
}
 80020ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020b0:	f3bf 8f6f 	isb	sy
}
 80020b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80020b6:	4b9d      	ldr	r3, [pc, #628]	; (800232c <main+0x2bc>)
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4a9c      	ldr	r2, [pc, #624]	; (800232c <main+0x2bc>)
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80020c2:	f3bf 8f4f 	dsb	sy
}
 80020c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020c8:	f3bf 8f6f 	isb	sy
}
 80020cc:	e000      	b.n	80020d0 <main+0x60>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80020ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80020d0:	4b96      	ldr	r3, [pc, #600]	; (800232c <main+0x2bc>)
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d138      	bne.n	800214e <main+0xde>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80020dc:	4b93      	ldr	r3, [pc, #588]	; (800232c <main+0x2bc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80020e4:	f3bf 8f4f 	dsb	sy
}
 80020e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80020ea:	4b90      	ldr	r3, [pc, #576]	; (800232c <main+0x2bc>)
 80020ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	0b5b      	lsrs	r3, r3, #13
 80020f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	08db      	lsrs	r3, r3, #3
 8002100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002104:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800210e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002114:	4985      	ldr	r1, [pc, #532]	; (800232c <main+0x2bc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	1e5a      	subs	r2, r3, #1
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ef      	bne.n	8002106 <main+0x96>
    } while(sets-- != 0U);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1e5a      	subs	r2, r3, #1
 800212a:	60ba      	str	r2, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e5      	bne.n	80020fc <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002130:	f3bf 8f4f 	dsb	sy
}
 8002134:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002136:	4b7d      	ldr	r3, [pc, #500]	; (800232c <main+0x2bc>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	4a7c      	ldr	r2, [pc, #496]	; (800232c <main+0x2bc>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002142:	f3bf 8f4f 	dsb	sy
}
 8002146:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002148:	f3bf 8f6f 	isb	sy
}
 800214c:	e000      	b.n	8002150 <main+0xe0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800214e:	bf00      	nop
  HAL_Init();
 8002150:	f001 fe1e 	bl	8003d90 <HAL_Init>
  SystemClock_Config();
 8002154:	f000 f91c 	bl	8002390 <SystemClock_Config>
  MX_GPIO_Init();
 8002158:	f000 fdd2 	bl	8002d00 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800215c:	f000 fbc6 	bl	80028ec <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8002160:	f000 fa36 	bl	80025d0 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8002164:	f000 fd7e 	bl	8002c64 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002168:	f000 fc90 	bl	8002a8c <MX_TIM3_Init>
  MX_TIM1_Init();
 800216c:	f000 fbec 	bl	8002948 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8002170:	f000 fa6a 	bl	8002648 <MX_HRTIM_Init>
  MX_ADC3_Init();
 8002174:	f000 f9ca 	bl	800250c <MX_ADC3_Init>
  MX_LWIP_Init();
 8002178:	f00c fd8e 	bl	800ec98 <MX_LWIP_Init>
  MX_TIM2_Init();
 800217c:	f000 fc38 	bl	80029f0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002180:	f000 fd22 	bl	8002bc8 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002184:	f000 fcd0 	bl	8002b28 <MX_TIM4_Init>
  printf("\033c"); //clears screen
 8002188:	4869      	ldr	r0, [pc, #420]	; (8002330 <main+0x2c0>)
 800218a:	f017 fcb1 	bl	8019af0 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 800218e:	4969      	ldr	r1, [pc, #420]	; (8002334 <main+0x2c4>)
 8002190:	4869      	ldr	r0, [pc, #420]	; (8002338 <main+0x2c8>)
 8002192:	f017 fcad 	bl	8019af0 <iprintf>
		if (init_synthesiser(MW_power) != SUCCESS) {
 8002196:	4b69      	ldr	r3, [pc, #420]	; (800233c <main+0x2cc>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f019 fc44 	bl	801ba28 <__init_synthesiser_veneer>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <main+0x140>
			printf("Synthesiser initialisation failed!\r\n");
 80021a6:	4866      	ldr	r0, [pc, #408]	; (8002340 <main+0x2d0>)
 80021a8:	f017 fd08 	bl	8019bbc <puts>
			Error_Handler();
 80021ac:	f000 ffc4 	bl	8003138 <Error_Handler>
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
 80021b0:	4b62      	ldr	r3, [pc, #392]	; (800233c <main+0x2cc>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4863      	ldr	r0, [pc, #396]	; (8002344 <main+0x2d4>)
 80021b8:	f017 fc9a 	bl	8019af0 <iprintf>
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 80021bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c0:	4861      	ldr	r0, [pc, #388]	; (8002348 <main+0x2d8>)
 80021c2:	f006 fff1 	bl	80091a8 <HAL_LPTIM_Counter_Start_IT>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <main+0x166>
		printf("Failed to start slow flashing LED!\r\n");
 80021cc:	485f      	ldr	r0, [pc, #380]	; (800234c <main+0x2dc>)
 80021ce:	f017 fcf5 	bl	8019bbc <puts>
		Error_Handler();
 80021d2:	f000 ffb1 	bl	8003138 <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 80021d6:	2100      	movs	r1, #0
 80021d8:	485d      	ldr	r0, [pc, #372]	; (8002350 <main+0x2e0>)
 80021da:	f003 fdd9 	bl	8005d90 <HAL_DAC_Start>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <main+0x17e>
		printf("Failure to initialise DAC channel 1 \r\n");
 80021e4:	485b      	ldr	r0, [pc, #364]	; (8002354 <main+0x2e4>)
 80021e6:	f017 fce9 	bl	8019bbc <puts>
		Error_Handler();
 80021ea:	f000 ffa5 	bl	8003138 <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_2) != HAL_OK) {
 80021ee:	2110      	movs	r1, #16
 80021f0:	4857      	ldr	r0, [pc, #348]	; (8002350 <main+0x2e0>)
 80021f2:	f003 fdcd 	bl	8005d90 <HAL_DAC_Start>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <main+0x196>
		printf("Failure to initialise DAC channel 2 \r\n");
 80021fc:	4856      	ldr	r0, [pc, #344]	; (8002358 <main+0x2e8>)
 80021fe:	f017 fcdd 	bl	8019bbc <puts>
		Error_Handler();
 8002202:	f000 ff99 	bl	8003138 <Error_Handler>
	printf("Setting DAC output 1 (OCXO control) to 0V \r\n");
 8002206:	4855      	ldr	r0, [pc, #340]	; (800235c <main+0x2ec>)
 8002208:	f017 fcd8 	bl	8019bbc <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0) != HAL_OK){
 800220c:	2300      	movs	r3, #0
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	484f      	ldr	r0, [pc, #316]	; (8002350 <main+0x2e0>)
 8002214:	f003 fe0e 	bl	8005e34 <HAL_DAC_SetValue>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <main+0x1b8>
			printf("DAC setup failed for channel 1!\r\n");
 800221e:	4850      	ldr	r0, [pc, #320]	; (8002360 <main+0x2f0>)
 8002220:	f017 fccc 	bl	8019bbc <puts>
		Error_Handler();
 8002224:	f000 ff88 	bl	8003138 <Error_Handler>
	printf("Setting DAC output 2 (laser control) to 0V \r\n");
 8002228:	484e      	ldr	r0, [pc, #312]	; (8002364 <main+0x2f4>)
 800222a:	f017 fcc7 	bl	8019bbc <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0) != HAL_OK){
 800222e:	2300      	movs	r3, #0
 8002230:	2200      	movs	r2, #0
 8002232:	2110      	movs	r1, #16
 8002234:	4846      	ldr	r0, [pc, #280]	; (8002350 <main+0x2e0>)
 8002236:	f003 fdfd 	bl	8005e34 <HAL_DAC_SetValue>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d004      	beq.n	800224a <main+0x1da>
			printf("DAC setup failed for channel 2!\r\n");
 8002240:	4849      	ldr	r0, [pc, #292]	; (8002368 <main+0x2f8>)
 8002242:	f017 fcbb 	bl	8019bbc <puts>
		Error_Handler();
 8002246:	f000 ff77 	bl	8003138 <Error_Handler>
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 800224a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800224e:	2100      	movs	r1, #0
 8002250:	4846      	ldr	r0, [pc, #280]	; (800236c <main+0x2fc>)
 8002252:	f003 fb59 	bl	8005908 <HAL_ADCEx_Calibration_Start>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <main+0x1f6>
		printf("ADC calibration failure \r\n");
 800225c:	4844      	ldr	r0, [pc, #272]	; (8002370 <main+0x300>)
 800225e:	f017 fcad 	bl	8019bbc <puts>
		Error_Handler();
 8002262:	f000 ff69 	bl	8003138 <Error_Handler>
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 8002266:	4841      	ldr	r0, [pc, #260]	; (800236c <main+0x2fc>)
 8002268:	f002 fa3c 	bl	80046e4 <HAL_ADC_Start_IT>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <main+0x20c>
		printf("Failed to start ADC with interrupt capability \r\n");
 8002272:	4840      	ldr	r0, [pc, #256]	; (8002374 <main+0x304>)
 8002274:	f017 fca2 	bl	8019bbc <puts>
	                Error_Handler();
 8002278:	f000 ff5e 	bl	8003138 <Error_Handler>
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 800227c:	483e      	ldr	r0, [pc, #248]	; (8002378 <main+0x308>)
 800227e:	f017 fc9d 	bl	8019bbc <puts>
	measure_POP_cycle_time();
 8002282:	f019 fbd5 	bl	801ba30 <__measure_POP_cycle_time_veneer>
	calc_fixed_time_MW_sweep((double)(HYPERFINE + MW_DELTA), 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 8002286:	2000      	movs	r0, #0
 8002288:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8002308 <main+0x298>
 800228c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8002310 <main+0x2a0>
 8002290:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8002318 <main+0x2a8>
 8002294:	f019 fbd4 	bl	801ba40 <__calc_fixed_time_MW_sweep_veneer>
	printf("Entering main while loop\r\n");
 8002298:	4838      	ldr	r0, [pc, #224]	; (800237c <main+0x30c>)
 800229a:	f017 fc8f 	bl	8019bbc <puts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800229e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022a2:	4837      	ldr	r0, [pc, #220]	; (8002380 <main+0x310>)
 80022a4:	f005 fbda 	bl	8007a5c <HAL_GPIO_ReadPin>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <main+0x314>)
 80022b6:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <main+0x314>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01d      	beq.n	80022fe <main+0x28e>
			printf("Blue button pressed....\r\n");
 80022c2:	4831      	ldr	r0, [pc, #196]	; (8002388 <main+0x318>)
 80022c4:	f017 fc7a 	bl	8019bbc <puts>
			start_laser_ramp();
 80022c8:	f019 fba2 	bl	801ba10 <__start_laser_ramp_veneer>
			while(blue_button_status) {//remain here polling button until it is released
 80022cc:	e012      	b.n	80022f4 <main+0x284>
				timer_delay(SLOW_TIMER, 100); //1ms delay
 80022ce:	4b2f      	ldr	r3, [pc, #188]	; (800238c <main+0x31c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2164      	movs	r1, #100	; 0x64
 80022d4:	4618      	mov	r0, r3
 80022d6:	f019 fbaf 	bl	801ba38 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80022da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022de:	4828      	ldr	r0, [pc, #160]	; (8002380 <main+0x310>)
 80022e0:	f005 fbbc 	bl	8007a5c <HAL_GPIO_ReadPin>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <main+0x314>)
 80022f2:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <main+0x314>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e7      	bne.n	80022ce <main+0x25e>
		MW_update();
 80022fe:	f019 fb8b 	bl	801ba18 <__MW_update_veneer>
		laser_update();
 8002302:	f019 fb8d 	bl	801ba20 <__laser_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002306:	e7ca      	b.n	800229e <main+0x22e>
 8002308:	00000000 	.word	0x00000000
 800230c:	40490000 	.word	0x40490000
 8002310:	00000000 	.word	0x00000000
 8002314:	40c38800 	.word	0x40c38800
 8002318:	ea600000 	.word	0xea600000
 800231c:	41e69e35 	.word	0x41e69e35
 8002320:	000019c8 	.word	0x000019c8
 8002324:	00000000 	.word	0x00000000
 8002328:	08000298 	.word	0x08000298
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	0801bcac 	.word	0x0801bcac
 8002334:	0801bcb0 	.word	0x0801bcb0
 8002338:	0801bccc 	.word	0x0801bccc
 800233c:	20000002 	.word	0x20000002
 8002340:	0801bcf8 	.word	0x0801bcf8
 8002344:	0801bd1c 	.word	0x0801bd1c
 8002348:	200003b4 	.word	0x200003b4
 800234c:	0801bd40 	.word	0x0801bd40
 8002350:	200002c4 	.word	0x200002c4
 8002354:	0801bd64 	.word	0x0801bd64
 8002358:	0801bd8c 	.word	0x0801bd8c
 800235c:	0801bdb4 	.word	0x0801bdb4
 8002360:	0801bde0 	.word	0x0801bde0
 8002364:	0801be04 	.word	0x0801be04
 8002368:	0801be34 	.word	0x0801be34
 800236c:	20000260 	.word	0x20000260
 8002370:	0801be58 	.word	0x0801be58
 8002374:	0801be74 	.word	0x0801be74
 8002378:	0801bea4 	.word	0x0801bea4
 800237c:	0801bee4 	.word	0x0801bee4
 8002380:	58020800 	.word	0x58020800
 8002384:	200005fc 	.word	0x200005fc
 8002388:	0801bf00 	.word	0x0801bf00
 800238c:	20000018 	.word	0x20000018

08002390 <SystemClock_Config>:
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0a4      	sub	sp, #144	; 0x90
 8002394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002396:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800239a:	224c      	movs	r2, #76	; 0x4c
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f017 fcfc 	bl	8019d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a8:	2220      	movs	r2, #32
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f017 fcf5 	bl	8019d9c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	611a      	str	r2, [r3, #16]
 80023c2:	615a      	str	r2, [r3, #20]
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80023c4:	2002      	movs	r0, #2
 80023c6:	f007 fa4d 	bl	8009864 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <SystemClock_Config+0x170>)
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <SystemClock_Config+0x170>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80023da:	4b49      	ldr	r3, [pc, #292]	; (8002500 <SystemClock_Config+0x170>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	4b47      	ldr	r3, [pc, #284]	; (8002504 <SystemClock_Config+0x174>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a46      	ldr	r2, [pc, #280]	; (8002504 <SystemClock_Config+0x174>)
 80023ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b44      	ldr	r3, [pc, #272]	; (8002504 <SystemClock_Config+0x174>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023fc:	bf00      	nop
 80023fe:	4b41      	ldr	r3, [pc, #260]	; (8002504 <SystemClock_Config+0x174>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240a:	d1f8      	bne.n	80023fe <SystemClock_Config+0x6e>
  HAL_PWR_EnableBkUpAccess();
 800240c:	f007 fa1a 	bl	8009844 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002410:	f001 fd74 	bl	8003efc <HAL_GetREVID>
 8002414:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <SystemClock_Config+0x178>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a3b      	ldr	r2, [pc, #236]	; (8002508 <SystemClock_Config+0x178>)
 800241a:	f023 0318 	bic.w	r3, r3, #24
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8002420:	2325      	movs	r3, #37	; 0x25
 8002422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002424:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800242a:	2301      	movs	r3, #1
 800242c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800242e:	2301      	movs	r3, #1
 8002430:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002432:	2302      	movs	r3, #2
 8002434:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002436:	2302      	movs	r3, #2
 8002438:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800243a:	2301      	movs	r3, #1
 800243c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 800243e:	2350      	movs	r3, #80	; 0x50
 8002440:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002442:	2302      	movs	r3, #2
 8002444:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002446:	2304      	movs	r3, #4
 8002448:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002450:	230c      	movs	r3, #12
 8002452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002462:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002466:	4618      	mov	r0, r3
 8002468:	f007 fa36 	bl	80098d8 <HAL_RCC_OscConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <SystemClock_Config+0xe6>
    Error_Handler();
 8002472:	f000 fe61 	bl	8003138 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002476:	233f      	movs	r3, #63	; 0x3f
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800247a:	2303      	movs	r3, #3
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800247e:	2300      	movs	r3, #0
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8002482:	2309      	movs	r3, #9
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002486:	2300      	movs	r3, #0
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800248e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002494:	2300      	movs	r3, #0
 8002496:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249c:	2101      	movs	r1, #1
 800249e:	4618      	mov	r0, r3
 80024a0:	f007 fe74 	bl	800a18c <HAL_RCC_ClockConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <SystemClock_Config+0x11e>
    Error_Handler();
 80024aa:	f000 fe45 	bl	8003138 <Error_Handler>
  HAL_RCC_EnableCSS();
 80024ae:	f008 f823 	bl	800a4f8 <HAL_RCC_EnableCSS>
  __HAL_RCC_CRS_CLK_ENABLE();
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <SystemClock_Config+0x178>)
 80024b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80024b8:	4a13      	ldr	r2, [pc, #76]	; (8002508 <SystemClock_Config+0x178>)
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <SystemClock_Config+0x178>)
 80024c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80024d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80024d8:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80024de:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80024e2:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80024e4:	2322      	movs	r3, #34	; 0x22
 80024e6:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80024e8:	2320      	movs	r3, #32
 80024ea:	623b      	str	r3, [r7, #32]
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	4618      	mov	r0, r3
 80024f2:	f00a fd9d 	bl	800d030 <HAL_RCCEx_CRSConfig>
}
 80024f6:	bf00      	nop
 80024f8:	3790      	adds	r7, #144	; 0x90
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	58000400 	.word	0x58000400
 8002504:	58024800 	.word	0x58024800
 8002508:	58024400 	.word	0x58024400

0800250c <MX_ADC3_Init>:
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
 8002520:	615a      	str	r2, [r3, #20]
 8002522:	619a      	str	r2, [r3, #24]
  hadc3.Instance = ADC3;
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002526:	4a29      	ldr	r2, [pc, #164]	; (80025cc <MX_ADC3_Init+0xc0>)
 8002528:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800252a:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <MX_ADC3_Init+0xbc>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002538:	2204      	movs	r2, #4
 800253a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <MX_ADC3_Init+0xbc>)
 800253e:	2200      	movs	r2, #0
 8002540:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002544:	2200      	movs	r2, #0
 8002546:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <MX_ADC3_Init+0xbc>)
 800254a:	2201      	movs	r2, #1
 800254c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 8002554:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002556:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800255a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <MX_ADC3_Init+0xbc>)
 800255e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002566:	2200      	movs	r2, #0
 8002568:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <MX_ADC3_Init+0xbc>)
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002572:	2200      	movs	r2, #0
 8002574:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800257e:	4812      	ldr	r0, [pc, #72]	; (80025c8 <MX_ADC3_Init+0xbc>)
 8002580:	f001 ff0e 	bl	80043a0 <HAL_ADC_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_ADC3_Init+0x82>
    Error_Handler();
 800258a:	f000 fdd5 	bl	8003138 <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_0;
 800258e:	2301      	movs	r3, #1
 8002590:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002592:	2306      	movs	r3, #6
 8002594:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800259a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800259e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025a0:	2304      	movs	r3, #4
 80025a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4805      	ldr	r0, [pc, #20]	; (80025c8 <MX_ADC3_Init+0xbc>)
 80025b2:	f002 fc31 	bl	8004e18 <HAL_ADC_ConfigChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_ADC3_Init+0xb4>
    Error_Handler();
 80025bc:	f000 fdbc 	bl	8003138 <Error_Handler>
}
 80025c0:	bf00      	nop
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000260 	.word	0x20000260
 80025cc:	58026000 	.word	0x58026000

080025d0 <MX_DAC1_Init>:
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2224      	movs	r2, #36	; 0x24
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f017 fbdd 	bl	8019d9c <memset>
  hdac1.Instance = DAC1;
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <MX_DAC1_Init+0x70>)
 80025e4:	4a17      	ldr	r2, [pc, #92]	; (8002644 <MX_DAC1_Init+0x74>)
 80025e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80025e8:	4815      	ldr	r0, [pc, #84]	; (8002640 <MX_DAC1_Init+0x70>)
 80025ea:	f003 fbaf 	bl	8005d4c <HAL_DAC_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_DAC1_Init+0x28>
    Error_Handler();
 80025f4:	f000 fda0 	bl	8003138 <Error_Handler>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002604:	2301      	movs	r3, #1
 8002606:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2200      	movs	r2, #0
 8002610:	4619      	mov	r1, r3
 8002612:	480b      	ldr	r0, [pc, #44]	; (8002640 <MX_DAC1_Init+0x70>)
 8002614:	f003 fc34 	bl	8005e80 <HAL_DAC_ConfigChannel>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_DAC1_Init+0x52>
    Error_Handler();
 800261e:	f000 fd8b 	bl	8003138 <Error_Handler>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2210      	movs	r2, #16
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_DAC1_Init+0x70>)
 800262a:	f003 fc29 	bl	8005e80 <HAL_DAC_ConfigChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_DAC1_Init+0x68>
    Error_Handler();
 8002634:	f000 fd80 	bl	8003138 <Error_Handler>
}
 8002638:	bf00      	nop
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200002c4 	.word	0x200002c4
 8002644:	40007400 	.word	0x40007400

08002648 <MX_HRTIM_Init>:
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0a4      	sub	sp, #144	; 0x90
 800264c:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800264e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800265c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002660:	2254      	movs	r2, #84	; 0x54
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f017 fb99 	bl	8019d9c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800266a:	f107 0320 	add.w	r3, r7, #32
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002676:	463b      	mov	r3, r7
 8002678:	2220      	movs	r2, #32
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f017 fb8d 	bl	8019d9c <memset>
  hhrtim.Instance = HRTIM1;
 8002682:	4b98      	ldr	r3, [pc, #608]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 8002684:	4a98      	ldr	r2, [pc, #608]	; (80028e8 <MX_HRTIM_Init+0x2a0>)
 8002686:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002688:	4b96      	ldr	r3, [pc, #600]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 800268a:	2200      	movs	r2, #0
 800268c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800268e:	4b95      	ldr	r3, [pc, #596]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8002694:	4893      	ldr	r0, [pc, #588]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 8002696:	f005 fa51 	bl	8007b3c <HAL_HRTIM_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_HRTIM_Init+0x5c>
    Error_Handler();
 80026a0:	f000 fd4a 	bl	8003138 <Error_Handler>
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 80026a4:	f24c 2318 	movw	r3, #49688	; 0xc218
 80026a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80026b2:	2307      	movs	r3, #7
 80026b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80026b8:	2308      	movs	r3, #8
 80026ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80026be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80026c2:	461a      	mov	r2, r3
 80026c4:	2100      	movs	r1, #0
 80026c6:	4887      	ldr	r0, [pc, #540]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 80026c8:	f005 fb08 	bl	8007cdc <HAL_HRTIM_TimeBaseConfig>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_HRTIM_Init+0x8e>
    Error_Handler();
 80026d2:	f000 fd31 	bl	8003138 <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80026d6:	2314      	movs	r3, #20
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80026da:	2300      	movs	r3, #0
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80026e2:	2300      	movs	r3, #0
 80026e4:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80026ea:	2300      	movs	r3, #0
 80026ec:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80026ee:	2300      	movs	r3, #0
 80026f0:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80026f2:	2300      	movs	r3, #0
 80026f4:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80026fa:	2300      	movs	r3, #0
 80026fc:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80026fe:	2300      	movs	r3, #0
 8002700:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002702:	2300      	movs	r3, #0
 8002704:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002706:	2300      	movs	r3, #0
 8002708:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800270a:	2300      	movs	r3, #0
 800270c:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800270e:	2300      	movs	r3, #0
 8002710:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002712:	2300      	movs	r3, #0
 8002714:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002716:	2300      	movs	r3, #0
 8002718:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800271a:	2300      	movs	r3, #0
 800271c:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800271e:	2300      	movs	r3, #0
 8002720:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002722:	2300      	movs	r3, #0
 8002724:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002726:	2300      	movs	r3, #0
 8002728:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800272a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800272e:	461a      	mov	r2, r3
 8002730:	2100      	movs	r1, #0
 8002732:	486c      	ldr	r0, [pc, #432]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 8002734:	f005 fafa 	bl	8007d2c <HAL_HRTIM_WaveformTimerConfig>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_HRTIM_Init+0xfa>
    Error_Handler();
 800273e:	f000 fcfb 	bl	8003138 <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8002742:	2306      	movs	r3, #6
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8002746:	2300      	movs	r3, #0
 8002748:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 800274a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800274e:	461a      	mov	r2, r3
 8002750:	2104      	movs	r1, #4
 8002752:	4864      	ldr	r0, [pc, #400]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 8002754:	f005 faea 	bl	8007d2c <HAL_HRTIM_WaveformTimerConfig>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_HRTIM_Init+0x11a>
    Error_Handler();
 800275e:	f000 fceb 	bl	8003138 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8002762:	f240 631b 	movw	r3, #1563	; 0x61b
 8002766:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002768:	f107 0320 	add.w	r3, r7, #32
 800276c:	2201      	movs	r2, #1
 800276e:	2100      	movs	r1, #0
 8002770:	485c      	ldr	r0, [pc, #368]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 8002772:	f005 fb4d 	bl	8007e10 <HAL_HRTIM_WaveformCompareConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_HRTIM_Init+0x138>
    Error_Handler();
 800277c:	f000 fcdc 	bl	8003138 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002780:	f244 5395 	movw	r3, #17813	; 0x4595
 8002784:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 800278a:	2300      	movs	r3, #0
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800278e:	f107 0320 	add.w	r3, r7, #32
 8002792:	2202      	movs	r2, #2
 8002794:	2100      	movs	r1, #0
 8002796:	4853      	ldr	r0, [pc, #332]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 8002798:	f005 fb3a 	bl	8007e10 <HAL_HRTIM_WaveformCompareConfig>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_HRTIM_Init+0x15e>
    Error_Handler();
 80027a2:	f000 fcc9 	bl	8003138 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 80027a6:	f640 536e 	movw	r3, #3438	; 0xd6e
 80027aa:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80027ac:	f107 0320 	add.w	r3, r7, #32
 80027b0:	2202      	movs	r2, #2
 80027b2:	2104      	movs	r1, #4
 80027b4:	484b      	ldr	r0, [pc, #300]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 80027b6:	f005 fb2b 	bl	8007e10 <HAL_HRTIM_WaveformCompareConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_HRTIM_Init+0x17c>
    Error_Handler();
 80027c0:	f000 fcba 	bl	8003138 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80027c4:	f644 0306 	movw	r3, #18438	; 0x4806
 80027c8:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80027ca:	f107 0320 	add.w	r3, r7, #32
 80027ce:	2204      	movs	r2, #4
 80027d0:	2100      	movs	r1, #0
 80027d2:	4844      	ldr	r0, [pc, #272]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 80027d4:	f005 fb1c 	bl	8007e10 <HAL_HRTIM_WaveformCompareConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_HRTIM_Init+0x19a>
    Error_Handler();
 80027de:	f000 fcab 	bl	8003138 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80027e2:	f244 435d 	movw	r3, #17501	; 0x445d
 80027e6:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	2208      	movs	r2, #8
 80027ee:	2104      	movs	r1, #4
 80027f0:	483c      	ldr	r0, [pc, #240]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 80027f2:	f005 fb0d 	bl	8007e10 <HAL_HRTIM_WaveformCompareConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_HRTIM_Init+0x1b8>
    Error_Handler();
 80027fc:	f000 fc9c 	bl	8003138 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002800:	2302      	movs	r3, #2
 8002802:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002804:	2328      	movs	r3, #40	; 0x28
 8002806:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002808:	2314      	movs	r3, #20
 800280a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002810:	2308      	movs	r3, #8
 8002812:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002820:	463b      	mov	r3, r7
 8002822:	2201      	movs	r2, #1
 8002824:	2100      	movs	r1, #0
 8002826:	482f      	ldr	r0, [pc, #188]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 8002828:	f005 fc60 	bl	80080ec <HAL_HRTIM_WaveformOutputConfig>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_HRTIM_Init+0x1ee>
    Error_Handler();
 8002832:	f000 fc81 	bl	8003138 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 800283a:	2350      	movs	r3, #80	; 0x50
 800283c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002842:	463b      	mov	r3, r7
 8002844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002848:	2104      	movs	r1, #4
 800284a:	4826      	ldr	r0, [pc, #152]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 800284c:	f005 fc4e 	bl	80080ec <HAL_HRTIM_WaveformOutputConfig>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_HRTIM_Init+0x212>
    Error_Handler();
 8002856:	f000 fc6f 	bl	8003138 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800285a:	2302      	movs	r3, #2
 800285c:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 800285e:	2320      	movs	r3, #32
 8002860:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002862:	2310      	movs	r3, #16
 8002864:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002866:	2308      	movs	r3, #8
 8002868:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800286a:	463b      	mov	r3, r7
 800286c:	2202      	movs	r2, #2
 800286e:	2100      	movs	r1, #0
 8002870:	481c      	ldr	r0, [pc, #112]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 8002872:	f005 fc3b 	bl	80080ec <HAL_HRTIM_WaveformOutputConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_HRTIM_Init+0x238>
    Error_Handler();
 800287c:	f000 fc5c 	bl	8003138 <Error_Handler>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002880:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002884:	461a      	mov	r2, r3
 8002886:	2104      	movs	r1, #4
 8002888:	4816      	ldr	r0, [pc, #88]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 800288a:	f005 fa27 	bl	8007cdc <HAL_HRTIM_TimeBaseConfig>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_HRTIM_Init+0x250>
    Error_Handler();
 8002894:	f000 fc50 	bl	8003138 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8002898:	f240 7353 	movw	r3, #1875	; 0x753
 800289c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800289e:	f107 0320 	add.w	r3, r7, #32
 80028a2:	2201      	movs	r2, #1
 80028a4:	2104      	movs	r1, #4
 80028a6:	480f      	ldr	r0, [pc, #60]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 80028a8:	f005 fab2 	bl	8007e10 <HAL_HRTIM_WaveformCompareConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_HRTIM_Init+0x26e>
    Error_Handler();
 80028b2:	f000 fc41 	bl	8003138 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 80028b6:	f643 6342 	movw	r3, #15938	; 0x3e42
 80028ba:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80028bc:	f107 0320 	add.w	r3, r7, #32
 80028c0:	2204      	movs	r2, #4
 80028c2:	2104      	movs	r1, #4
 80028c4:	4807      	ldr	r0, [pc, #28]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 80028c6:	f005 faa3 	bl	8007e10 <HAL_HRTIM_WaveformCompareConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_HRTIM_Init+0x28c>
    Error_Handler();
 80028d0:	f000 fc32 	bl	8003138 <Error_Handler>
  HAL_HRTIM_MspPostInit(&hhrtim);
 80028d4:	4803      	ldr	r0, [pc, #12]	; (80028e4 <MX_HRTIM_Init+0x29c>)
 80028d6:	f000 fd71 	bl	80033bc <HAL_HRTIM_MspPostInit>
}
 80028da:	bf00      	nop
 80028dc:	3790      	adds	r7, #144	; 0x90
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200002d8 	.word	0x200002d8
 80028e8:	40017400 	.word	0x40017400

080028ec <MX_LPTIM1_Init>:
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  hlptim1.Instance = LPTIM1;
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <MX_LPTIM1_Init+0x54>)
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <MX_LPTIM1_Init+0x58>)
 80028f4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <MX_LPTIM1_Init+0x54>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <MX_LPTIM1_Init+0x54>)
 80028fe:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002902:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <MX_LPTIM1_Init+0x54>)
 8002906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800290a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <MX_LPTIM1_Init+0x54>)
 800290e:	2200      	movs	r2, #0
 8002910:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <MX_LPTIM1_Init+0x54>)
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <MX_LPTIM1_Init+0x54>)
 800291a:	2200      	movs	r2, #0
 800291c:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <MX_LPTIM1_Init+0x54>)
 8002920:	2200      	movs	r2, #0
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <MX_LPTIM1_Init+0x54>)
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_LPTIM1_Init+0x54>)
 800292c:	f006 fb8c 	bl	8009048 <HAL_LPTIM_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_LPTIM1_Init+0x4e>
    Error_Handler();
 8002936:	f000 fbff 	bl	8003138 <Error_Handler>
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200003b4 	.word	0x200003b4
 8002944:	40002400 	.word	0x40002400

08002948 <MX_TIM1_Init>:
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294e:	f107 0310 	add.w	r3, r7, #16
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
  htim1.Instance = TIM1;
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <MX_TIM1_Init+0xa0>)
 8002968:	4a20      	ldr	r2, [pc, #128]	; (80029ec <MX_TIM1_Init+0xa4>)
 800296a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <MX_TIM1_Init+0xa0>)
 800296e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <MX_TIM1_Init+0xa0>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <MX_TIM1_Init+0xa0>)
 800297c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <MX_TIM1_Init+0xa0>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <MX_TIM1_Init+0xa0>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <MX_TIM1_Init+0xa0>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002994:	4814      	ldr	r0, [pc, #80]	; (80029e8 <MX_TIM1_Init+0xa0>)
 8002996:	f00a fd05 	bl	800d3a4 <HAL_TIM_Base_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM1_Init+0x5c>
    Error_Handler();
 80029a0:	f000 fbca 	bl	8003138 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	4619      	mov	r1, r3
 80029b0:	480d      	ldr	r0, [pc, #52]	; (80029e8 <MX_TIM1_Init+0xa0>)
 80029b2:	f00a fd4f 	bl	800d454 <HAL_TIM_ConfigClockSource>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM1_Init+0x78>
    Error_Handler();
 80029bc:	f000 fbbc 	bl	8003138 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_TIM1_Init+0xa0>)
 80029d2:	f00a ff6f 	bl	800d8b4 <HAL_TIMEx_MasterConfigSynchronization>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM1_Init+0x98>
    Error_Handler();
 80029dc:	f000 fbac 	bl	8003138 <Error_Handler>
}
 80029e0:	bf00      	nop
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200003ec 	.word	0x200003ec
 80029ec:	40010000 	.word	0x40010000

080029f0 <MX_TIM2_Init>:
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f6:	f107 0310 	add.w	r3, r7, #16
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
  htim2.Instance = TIM2;
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	; (8002a88 <MX_TIM2_Init+0x98>)
 8002a10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <MX_TIM2_Init+0x98>)
 8002a18:	227c      	movs	r2, #124	; 0x7c
 8002a1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <MX_TIM2_Init+0x98>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a22:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <MX_TIM2_Init+0x98>)
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <MX_TIM2_Init+0x98>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <MX_TIM2_Init+0x98>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a36:	4814      	ldr	r0, [pc, #80]	; (8002a88 <MX_TIM2_Init+0x98>)
 8002a38:	f00a fcb4 	bl	800d3a4 <HAL_TIM_Base_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM2_Init+0x56>
    Error_Handler();
 8002a42:	f000 fb79 	bl	8003138 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a4c:	f107 0310 	add.w	r3, r7, #16
 8002a50:	4619      	mov	r1, r3
 8002a52:	480d      	ldr	r0, [pc, #52]	; (8002a88 <MX_TIM2_Init+0x98>)
 8002a54:	f00a fcfe 	bl	800d454 <HAL_TIM_ConfigClockSource>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM2_Init+0x72>
    Error_Handler();
 8002a5e:	f000 fb6b 	bl	8003138 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4806      	ldr	r0, [pc, #24]	; (8002a88 <MX_TIM2_Init+0x98>)
 8002a70:	f00a ff20 	bl	800d8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM2_Init+0x8e>
    Error_Handler();
 8002a7a:	f000 fb5d 	bl	8003138 <Error_Handler>
}
 8002a7e:	bf00      	nop
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000438 	.word	0x20000438

08002a8c <MX_TIM3_Init>:
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a92:	f107 0310 	add.w	r3, r7, #16
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	609a      	str	r2, [r3, #8]
  htim3.Instance = TIM3;
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002aac:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <MX_TIM3_Init+0x98>)
 8002aae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002ab2:	227c      	movs	r2, #124	; 0x7c
 8002ab4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ad0:	4813      	ldr	r0, [pc, #76]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002ad2:	f00a fc67 	bl	800d3a4 <HAL_TIM_Base_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM3_Init+0x54>
    Error_Handler();
 8002adc:	f000 fb2c 	bl	8003138 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ae6:	f107 0310 	add.w	r3, r7, #16
 8002aea:	4619      	mov	r1, r3
 8002aec:	480c      	ldr	r0, [pc, #48]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002aee:	f00a fcb1 	bl	800d454 <HAL_TIM_ConfigClockSource>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM3_Init+0x70>
    Error_Handler();
 8002af8:	f000 fb1e 	bl	8003138 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4805      	ldr	r0, [pc, #20]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002b0a:	f00a fed3 	bl	800d8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_TIM3_Init+0x8c>
    Error_Handler();
 8002b14:	f000 fb10 	bl	8003138 <Error_Handler>
}
 8002b18:	bf00      	nop
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000484 	.word	0x20000484
 8002b24:	40000400 	.word	0x40000400

08002b28 <MX_TIM4_Init>:
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2e:	f107 0310 	add.w	r3, r7, #16
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
  htim4.Instance = TIM4;
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <MX_TIM4_Init+0x98>)
 8002b48:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <MX_TIM4_Init+0x9c>)
 8002b4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 62499;
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <MX_TIM4_Init+0x98>)
 8002b4e:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002b52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <MX_TIM4_Init+0x98>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <MX_TIM4_Init+0x98>)
 8002b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <MX_TIM4_Init+0x98>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <MX_TIM4_Init+0x98>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b6e:	4814      	ldr	r0, [pc, #80]	; (8002bc0 <MX_TIM4_Init+0x98>)
 8002b70:	f00a fc18 	bl	800d3a4 <HAL_TIM_Base_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM4_Init+0x56>
    Error_Handler();
 8002b7a:	f000 fadd 	bl	8003138 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	4619      	mov	r1, r3
 8002b8a:	480d      	ldr	r0, [pc, #52]	; (8002bc0 <MX_TIM4_Init+0x98>)
 8002b8c:	f00a fc62 	bl	800d454 <HAL_TIM_ConfigClockSource>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM4_Init+0x72>
    Error_Handler();
 8002b96:	f000 facf 	bl	8003138 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4806      	ldr	r0, [pc, #24]	; (8002bc0 <MX_TIM4_Init+0x98>)
 8002ba8:	f00a fe84 	bl	800d8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM4_Init+0x8e>
    Error_Handler();
 8002bb2:	f000 fac1 	bl	8003138 <Error_Handler>
}
 8002bb6:	bf00      	nop
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200004d0 	.word	0x200004d0
 8002bc4:	40000800 	.word	0x40000800

08002bc8 <MX_TIM5_Init>:
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
  htim5.Instance = TIM5;
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <MX_TIM5_Init+0x98>)
 8002bea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002bee:	227c      	movs	r2, #124	; 0x7c
 8002bf0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c0c:	4813      	ldr	r0, [pc, #76]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c0e:	f00a fbc9 	bl	800d3a4 <HAL_TIM_Base_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM5_Init+0x54>
    Error_Handler();
 8002c18:	f000 fa8e 	bl	8003138 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c22:	f107 0310 	add.w	r3, r7, #16
 8002c26:	4619      	mov	r1, r3
 8002c28:	480c      	ldr	r0, [pc, #48]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c2a:	f00a fc13 	bl	800d454 <HAL_TIM_ConfigClockSource>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM5_Init+0x70>
    Error_Handler();
 8002c34:	f000 fa80 	bl	8003138 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	4619      	mov	r1, r3
 8002c44:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_TIM5_Init+0x94>)
 8002c46:	f00a fe35 	bl	800d8b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM5_Init+0x8c>
    Error_Handler();
 8002c50:	f000 fa72 	bl	8003138 <Error_Handler>
}
 8002c54:	bf00      	nop
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	2000051c 	.word	0x2000051c
 8002c60:	40000c00 	.word	0x40000c00

08002c64 <MX_USART3_UART_Init>:
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002c68:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002c6a:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <MX_USART3_UART_Init+0x94>)
 8002c6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002c6e:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002c70:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <MX_USART3_UART_Init+0x98>)
 8002c72:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c74:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c80:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c86:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002c88:	220c      	movs	r2, #12
 8002c8a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002caa:	4812      	ldr	r0, [pc, #72]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002cac:	f00a fe90 	bl	800d9d0 <HAL_UART_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_USART3_UART_Init+0x56>
    Error_Handler();
 8002cb6:	f000 fa3f 	bl	8003138 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cba:	2100      	movs	r1, #0
 8002cbc:	480d      	ldr	r0, [pc, #52]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002cbe:	f00b ff20 	bl	800eb02 <HAL_UARTEx_SetTxFifoThreshold>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_USART3_UART_Init+0x68>
    Error_Handler();
 8002cc8:	f000 fa36 	bl	8003138 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002cd0:	f00b ff55 	bl	800eb7e <HAL_UARTEx_SetRxFifoThreshold>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART3_UART_Init+0x7a>
    Error_Handler();
 8002cda:	f000 fa2d 	bl	8003138 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002cde:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <MX_USART3_UART_Init+0x90>)
 8002ce0:	f00b fed6 	bl	800ea90 <HAL_UARTEx_DisableFifoMode>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_USART3_UART_Init+0x8a>
    Error_Handler();
 8002cea:	f000 fa25 	bl	8003138 <Error_Handler>
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000568 	.word	0x20000568
 8002cf8:	40004800 	.word	0x40004800
 8002cfc:	000f4240 	.word	0x000f4240

08002d00 <MX_GPIO_Init>:
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08e      	sub	sp, #56	; 0x38
 8002d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d16:	4ba0      	ldr	r3, [pc, #640]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1c:	4a9e      	ldr	r2, [pc, #632]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d1e:	f043 0310 	orr.w	r3, r3, #16
 8002d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d26:	4b9c      	ldr	r3, [pc, #624]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d34:	4b98      	ldr	r3, [pc, #608]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3a:	4a97      	ldr	r2, [pc, #604]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d44:	4b94      	ldr	r3, [pc, #592]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d52:	4b91      	ldr	r3, [pc, #580]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d58:	4a8f      	ldr	r2, [pc, #572]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d62:	4b8d      	ldr	r3, [pc, #564]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d70:	4b89      	ldr	r3, [pc, #548]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d76:	4a88      	ldr	r2, [pc, #544]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d80:	4b85      	ldr	r3, [pc, #532]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	4b82      	ldr	r3, [pc, #520]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d94:	4a80      	ldr	r2, [pc, #512]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d9e:	4b7e      	ldr	r3, [pc, #504]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dac:	4b7a      	ldr	r3, [pc, #488]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db2:	4a79      	ldr	r2, [pc, #484]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002db4:	f043 0320 	orr.w	r3, r3, #32
 8002db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dbc:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dca:	4b73      	ldr	r3, [pc, #460]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd0:	4a71      	ldr	r2, [pc, #452]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dda:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de8:	4b6b      	ldr	r3, [pc, #428]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dee:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002df0:	f043 0308 	orr.w	r3, r3, #8
 8002df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002df8:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <MX_GPIO_Init+0x298>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8002e06:	2201      	movs	r2, #1
 8002e08:	2134      	movs	r1, #52	; 0x34
 8002e0a:	4864      	ldr	r0, [pc, #400]	; (8002f9c <MX_GPIO_Init+0x29c>)
 8002e0c:	f004 fe3e 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002e10:	2200      	movs	r2, #0
 8002e12:	f245 1103 	movw	r1, #20739	; 0x5103
 8002e16:	4862      	ldr	r0, [pc, #392]	; (8002fa0 <MX_GPIO_Init+0x2a0>)
 8002e18:	f004 fe38 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4860      	ldr	r0, [pc, #384]	; (8002fa4 <MX_GPIO_Init+0x2a4>)
 8002e22:	f004 fe33 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002e26:	2200      	movs	r2, #0
 8002e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e2c:	485e      	ldr	r0, [pc, #376]	; (8002fa8 <MX_GPIO_Init+0x2a8>)
 8002e2e:	f004 fe2d 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8002e32:	2200      	movs	r2, #0
 8002e34:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002e38:	485c      	ldr	r0, [pc, #368]	; (8002fac <MX_GPIO_Init+0x2ac>)
 8002e3a:	f004 fe27 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e44:	4859      	ldr	r0, [pc, #356]	; (8002fac <MX_GPIO_Init+0x2ac>)
 8002e46:	f004 fe21 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	21f8      	movs	r1, #248	; 0xf8
 8002e4e:	4856      	ldr	r0, [pc, #344]	; (8002fa8 <MX_GPIO_Init+0x2a8>)
 8002e50:	f004 fe1c 	bl	8007a8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2102      	movs	r1, #2
 8002e58:	4850      	ldr	r0, [pc, #320]	; (8002f9c <MX_GPIO_Init+0x29c>)
 8002e5a:	f004 fe17 	bl	8007a8c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8002e5e:	2336      	movs	r3, #54	; 0x36
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e62:	2301      	movs	r3, #1
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e72:	4619      	mov	r1, r3
 8002e74:	4849      	ldr	r0, [pc, #292]	; (8002f9c <MX_GPIO_Init+0x29c>)
 8002e76:	f004 fc41 	bl	80076fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4846      	ldr	r0, [pc, #280]	; (8002fac <MX_GPIO_Init+0x2ac>)
 8002e92:	f004 fc33 	bl	80076fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002e96:	f245 1303 	movw	r3, #20739	; 0x5103
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eac:	4619      	mov	r1, r3
 8002eae:	483c      	ldr	r0, [pc, #240]	; (8002fa0 <MX_GPIO_Init+0x2a0>)
 8002eb0:	f004 fc24 	bl	80076fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4839      	ldr	r0, [pc, #228]	; (8002fb0 <MX_GPIO_Init+0x2b0>)
 8002ecc:	f004 fc16 	bl	80076fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	482f      	ldr	r0, [pc, #188]	; (8002fa4 <MX_GPIO_Init+0x2a4>)
 8002ee8:	f004 fc08 	bl	80076fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8002eec:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efa:	2300      	movs	r3, #0
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	4828      	ldr	r0, [pc, #160]	; (8002fa8 <MX_GPIO_Init+0x2a8>)
 8002f06:	f004 fbf9 	bl	80076fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4821      	ldr	r0, [pc, #132]	; (8002fa4 <MX_GPIO_Init+0x2a4>)
 8002f20:	f004 fbec 	bl	80076fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8002f24:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	481b      	ldr	r0, [pc, #108]	; (8002fac <MX_GPIO_Init+0x2ac>)
 8002f3e:	f004 fbdd 	bl	80076fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002f42:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002f54:	230a      	movs	r3, #10
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4815      	ldr	r0, [pc, #84]	; (8002fb4 <MX_GPIO_Init+0x2b4>)
 8002f60:	f004 fbcc 	bl	80076fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MISO_Pin;
 8002f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f76:	4619      	mov	r1, r3
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <MX_GPIO_Init+0x2ac>)
 8002f7a:	f004 fbbf 	bl	80076fc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	2028      	movs	r0, #40	; 0x28
 8002f84:	f002 fe31 	bl	8005bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f88:	2028      	movs	r0, #40	; 0x28
 8002f8a:	f002 fe48 	bl	8005c1e <HAL_NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3738      	adds	r7, #56	; 0x38
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	58021000 	.word	0x58021000
 8002fa0:	58020400 	.word	0x58020400
 8002fa4:	58021800 	.word	0x58021800
 8002fa8:	58020c00 	.word	0x58020c00
 8002fac:	58020800 	.word	0x58020800
 8002fb0:	58021400 	.word	0x58021400
 8002fb4:	58020000 	.word	0x58020000

08002fb8 <HAL_ADC_ConvCpltCallback>:
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  adc_val = 0x0000FFFF & HAL_ADC_GetValue(&hadc3); //ensure that only 16 bits are recorded
 8002fc0:	482a      	ldr	r0, [pc, #168]	; (800306c <HAL_ADC_ConvCpltCallback+0xb4>)
 8002fc2:	f001 fccd 	bl	8004960 <HAL_ADC_GetValue>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	4a29      	ldr	r2, [pc, #164]	; (8003070 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002fcc:	6013      	str	r3, [r2, #0]
  sample_count++;
 8002fce:	4b29      	ldr	r3, [pc, #164]	; (8003074 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	4b26      	ldr	r3, [pc, #152]	; (8003074 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002fda:	801a      	strh	r2, [r3, #0]
		adc_readings_total = adc_readings_total + adc_val;
 8002fdc:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b23      	ldr	r3, [pc, #140]	; (8003070 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4a24      	ldr	r2, [pc, #144]	; (8003078 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002fe8:	6013      	str	r3, [r2, #0]
		if (sample_count >= ADC_SAMPLES) {//if the sample buffer is full
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b07      	cmp	r3, #7
 8002ff2:	d912      	bls.n	800301a <HAL_ADC_ConvCpltCallback+0x62>
			adc_readings_total = adc_readings_total - adc_readings[adc_sample_no]; //subtract the expired value from the total
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_ADC_ConvCpltCallback+0xc4>)
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_ADC_ConvCpltCallback+0xc8>)
 8003000:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003008:	6013      	str	r3, [r2, #0]
			adc_averaged_val = adc_readings_total >> ADC_SAMPLE_POWER; //truncate as a cycle-efficient division
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_ADC_ConvCpltCallback+0xc0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	08db      	lsrs	r3, r3, #3
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_ADC_ConvCpltCallback+0xcc>)
 8003012:	6013      	str	r3, [r2, #0]
			adc_average_updated = true;
 8003014:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_ADC_ConvCpltCallback+0xd0>)
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
		adc_readings[adc_sample_no] = adc_val;
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_ADC_ConvCpltCallback+0xc4>)
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	4619      	mov	r1, r3
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a16      	ldr	r2, [pc, #88]	; (8003080 <HAL_ADC_ConvCpltCallback+0xc8>)
 8003026:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		adc_sample_no++;
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <HAL_ADC_ConvCpltCallback+0xc4>)
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_ADC_ConvCpltCallback+0xc4>)
 8003034:	801a      	strh	r2, [r3, #0]
		if (adc_sample_no >= ADC_SAMPLES) adc_sample_no = 0; //set back to zero if loop complete
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_ADC_ConvCpltCallback+0xc4>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	2b07      	cmp	r3, #7
 800303c:	d902      	bls.n	8003044 <HAL_ADC_ConvCpltCallback+0x8c>
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <HAL_ADC_ConvCpltCallback+0xc4>)
 8003040:	2200      	movs	r2, #0
 8003042:	801a      	strh	r2, [r3, #0]
	if(adc_average_updated) {
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_ADC_ConvCpltCallback+0xd0>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_ADC_ConvCpltCallback+0xac>
		dac_val = adc_averaged_val >> 4;
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <HAL_ADC_ConvCpltCallback+0xcc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_ADC_ConvCpltCallback+0xd4>)
 8003054:	6013      	str	r3, [r2, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HAL_ADC_ConvCpltCallback+0xd4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	480c      	ldr	r0, [pc, #48]	; (8003090 <HAL_ADC_ConvCpltCallback+0xd8>)
 8003060:	f002 fee8 	bl	8005e34 <HAL_DAC_SetValue>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000260 	.word	0x20000260
 8003070:	20000604 	.word	0x20000604
 8003074:	200005fe 	.word	0x200005fe
 8003078:	20000630 	.word	0x20000630
 800307c:	2000062c 	.word	0x2000062c
 8003080:	2000060c 	.word	0x2000060c
 8003084:	20000608 	.word	0x20000608
 8003088:	20000634 	.word	0x20000634
 800308c:	20000640 	.word	0x20000640
 8003090:	200002c4 	.word	0x200002c4

08003094 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800309a:	463b      	mov	r3, r7
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80030a6:	f002 fdd5 	bl	8005c54 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80030b6:	231f      	movs	r3, #31
 80030b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80030ba:	2387      	movs	r3, #135	; 0x87
 80030bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80030be:	2300      	movs	r3, #0
 80030c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80030c2:	2300      	movs	r3, #0
 80030c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80030ca:	2301      	movs	r3, #1
 80030cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80030d6:	463b      	mov	r3, r7
 80030d8:	4618      	mov	r0, r3
 80030da:	f002 fdf3 	bl	8005cc4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80030de:	2301      	movs	r3, #1
 80030e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <MPU_Config+0x9c>)
 80030e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80030e6:	2310      	movs	r3, #16
 80030e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80030ee:	2301      	movs	r3, #1
 80030f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80030f2:	2303      	movs	r3, #3
 80030f4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80030fa:	463b      	mov	r3, r7
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fde1 	bl	8005cc4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003102:	2302      	movs	r3, #2
 8003104:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <MPU_Config+0xa0>)
 8003108:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800310a:	2308      	movs	r3, #8
 800310c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800310e:	2300      	movs	r3, #0
 8003110:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003112:	2301      	movs	r3, #1
 8003114:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800311a:	463b      	mov	r3, r7
 800311c:	4618      	mov	r0, r3
 800311e:	f002 fdd1 	bl	8005cc4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003122:	2004      	movs	r0, #4
 8003124:	f002 fdae 	bl	8005c84 <HAL_MPU_Enable>

}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	30020000 	.word	0x30020000
 8003134:	30040000 	.word	0x30040000

08003138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800313c:	b672      	cpsid	i
}
 800313e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8003140:	4810      	ldr	r0, [pc, #64]	; (8003184 <Error_Handler+0x4c>)
 8003142:	f016 fd3b 	bl	8019bbc <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8003146:	f240 1103 	movw	r1, #259	; 0x103
 800314a:	480f      	ldr	r0, [pc, #60]	; (8003188 <Error_Handler+0x50>)
 800314c:	f004 ffff 	bl	800814e <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8003150:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8003154:	480c      	ldr	r0, [pc, #48]	; (8003188 <Error_Handler+0x50>)
 8003156:	f005 f827 	bl	80081a8 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003160:	480a      	ldr	r0, [pc, #40]	; (800318c <Error_Handler+0x54>)
 8003162:	f004 fc93 	bl	8007a8c <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800316a:	4809      	ldr	r0, [pc, #36]	; (8003190 <Error_Handler+0x58>)
 800316c:	f004 fca7 	bl	8007abe <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <Error_Handler+0x5c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f018 fc5c 	bl	801ba38 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003180:	e7f1      	b.n	8003166 <Error_Handler+0x2e>
 8003182:	bf00      	nop
 8003184:	0801bf1c 	.word	0x0801bf1c
 8003188:	200002d8 	.word	0x200002d8
 800318c:	58020800 	.word	0x58020800
 8003190:	58020400 	.word	0x58020400
 8003194:	20000018 	.word	0x20000018

08003198 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <HAL_MspInit+0x30>)
 80031a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031a4:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <HAL_MspInit+0x30>)
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_MspInit+0x30>)
 80031b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	58024400 	.word	0x58024400

080031cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b0b4      	sub	sp, #208	; 0xd0
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	22c0      	movs	r2, #192	; 0xc0
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f016 fddd 	bl	8019d9c <memset>
  if(hadc->Instance==ADC3)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2b      	ldr	r2, [pc, #172]	; (8003294 <HAL_ADC_MspInit+0xc8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d14e      	bne.n	800328a <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 80031fc:	2313      	movs	r3, #19
 80031fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8003200:	234f      	movs	r3, #79	; 0x4f
 8003202:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003204:	2302      	movs	r3, #2
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003208:	2302      	movs	r3, #2
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800320c:	23c0      	movs	r3, #192	; 0xc0
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003210:	2320      	movs	r3, #32
 8003212:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	4618      	mov	r0, r3
 8003224:	f007 fb6a 	bl	800a8fc <HAL_RCCEx_PeriphCLKConfig>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800322e:	f7ff ff83 	bl	8003138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_ADC_MspInit+0xcc>)
 8003234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003238:	4a17      	ldr	r2, [pc, #92]	; (8003298 <HAL_ADC_MspInit+0xcc>)
 800323a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_ADC_MspInit+0xcc>)
 8003244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_ADC_MspInit+0xcc>)
 8003252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_ADC_MspInit+0xcc>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_ADC_MspInit+0xcc>)
 8003262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800326e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003272:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003276:	f000 fe61 	bl	8003f3c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	2100      	movs	r1, #0
 800327e:	207f      	movs	r0, #127	; 0x7f
 8003280:	f002 fcb3 	bl	8005bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003284:	207f      	movs	r0, #127	; 0x7f
 8003286:	f002 fcca 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800328a:	bf00      	nop
 800328c:	37d0      	adds	r7, #208	; 0xd0
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	58026000 	.word	0x58026000
 8003298:	58024400 	.word	0x58024400

0800329c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a18      	ldr	r2, [pc, #96]	; (800331c <HAL_DAC_MspInit+0x80>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d129      	bne.n	8003312 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_DAC_MspInit+0x84>)
 80032c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032c4:	4a16      	ldr	r2, [pc, #88]	; (8003320 <HAL_DAC_MspInit+0x84>)
 80032c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_DAC_MspInit+0x84>)
 80032d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_DAC_MspInit+0x84>)
 80032de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e2:	4a0f      	ldr	r2, [pc, #60]	; (8003320 <HAL_DAC_MspInit+0x84>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <HAL_DAC_MspInit+0x84>)
 80032ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032fa:	2330      	movs	r3, #48	; 0x30
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032fe:	2303      	movs	r3, #3
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003306:	f107 0314 	add.w	r3, r7, #20
 800330a:	4619      	mov	r1, r3
 800330c:	4805      	ldr	r0, [pc, #20]	; (8003324 <HAL_DAC_MspInit+0x88>)
 800330e:	f004 f9f5 	bl	80076fc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40007400 	.word	0x40007400
 8003320:	58024400 	.word	0x58024400
 8003324:	58020000 	.word	0x58020000

08003328 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b0b4      	sub	sp, #208	; 0xd0
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003330:	f107 0310 	add.w	r3, r7, #16
 8003334:	22c0      	movs	r2, #192	; 0xc0
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f016 fd2f 	bl	8019d9c <memset>
  if(hhrtim->Instance==HRTIM1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_HRTIM_MspInit+0x8c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d131      	bne.n	80033ac <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8003348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800335a:	f107 0310 	add.w	r3, r7, #16
 800335e:	4618      	mov	r0, r3
 8003360:	f007 facc 	bl	800a8fc <HAL_RCCEx_PeriphCLKConfig>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 800336a:	f7ff fee5 	bl	8003138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_HRTIM_MspInit+0x90>)
 8003370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003374:	4a10      	ldr	r2, [pc, #64]	; (80033b8 <HAL_HRTIM_MspInit+0x90>)
 8003376:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800337a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800337e:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <HAL_HRTIM_MspInit+0x90>)
 8003380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	2068      	movs	r0, #104	; 0x68
 8003392:	f002 fc2a 	bl	8005bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8003396:	2068      	movs	r0, #104	; 0x68
 8003398:	f002 fc41 	bl	8005c1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	206c      	movs	r0, #108	; 0x6c
 80033a2:	f002 fc22 	bl	8005bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 80033a6:	206c      	movs	r0, #108	; 0x6c
 80033a8:	f002 fc39 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80033ac:	bf00      	nop
 80033ae:	37d0      	adds	r7, #208	; 0xd0
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40017400 	.word	0x40017400
 80033b8:	58024400 	.word	0x58024400

080033bc <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a22      	ldr	r2, [pc, #136]	; (8003464 <HAL_HRTIM_MspPostInit+0xa8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d13d      	bne.n	800345a <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_HRTIM_MspPostInit+0xac>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e4:	4a20      	ldr	r2, [pc, #128]	; (8003468 <HAL_HRTIM_MspPostInit+0xac>)
 80033e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_HRTIM_MspPostInit+0xac>)
 80033f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_HRTIM_MspPostInit+0xac>)
 80033fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_HRTIM_MspPostInit+0xac>)
 8003404:	f043 0304 	orr.w	r3, r3, #4
 8003408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <HAL_HRTIM_MspPostInit+0xac>)
 800340e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800341a:	2340      	movs	r3, #64	; 0x40
 800341c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800342a:	2302      	movs	r3, #2
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4619      	mov	r1, r3
 8003434:	480d      	ldr	r0, [pc, #52]	; (800346c <HAL_HRTIM_MspPostInit+0xb0>)
 8003436:	f004 f961 	bl	80076fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800343a:	23c0      	movs	r3, #192	; 0xc0
 800343c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003446:	2303      	movs	r3, #3
 8003448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 800344a:	2301      	movs	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	4619      	mov	r1, r3
 8003454:	4806      	ldr	r0, [pc, #24]	; (8003470 <HAL_HRTIM_MspPostInit+0xb4>)
 8003456:	f004 f951 	bl	80076fc <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800345a:	bf00      	nop
 800345c:	3728      	adds	r7, #40	; 0x28
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40017400 	.word	0x40017400
 8003468:	58024400 	.word	0x58024400
 800346c:	58021800 	.word	0x58021800
 8003470:	58020800 	.word	0x58020800

08003474 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b0b4      	sub	sp, #208	; 0xd0
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800347c:	f107 0310 	add.w	r3, r7, #16
 8003480:	22c0      	movs	r2, #192	; 0xc0
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f016 fc89 	bl	8019d9c <memset>
  if(hlptim->Instance==LPTIM1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <HAL_LPTIM_MspInit+0x80>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d12a      	bne.n	80034ea <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003494:	f04f 0220 	mov.w	r2, #32
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80034a0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80034a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	4618      	mov	r0, r3
 80034ae:	f007 fa25 	bl	800a8fc <HAL_RCCEx_PeriphCLKConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80034b8:	f7ff fe3e 	bl	8003138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_LPTIM_MspInit+0x84>)
 80034be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034c2:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <HAL_LPTIM_MspInit+0x84>)
 80034c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_LPTIM_MspInit+0x84>)
 80034ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	205d      	movs	r0, #93	; 0x5d
 80034e0:	f002 fb83 	bl	8005bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80034e4:	205d      	movs	r0, #93	; 0x5d
 80034e6:	f002 fb9a 	bl	8005c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80034ea:	bf00      	nop
 80034ec:	37d0      	adds	r7, #208	; 0xd0
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40002400 	.word	0x40002400
 80034f8:	58024400 	.word	0x58024400

080034fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a35      	ldr	r2, [pc, #212]	; (80035e0 <HAL_TIM_Base_MspInit+0xe4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10f      	bne.n	800352e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800350e:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 8003510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003514:	4a33      	ldr	r2, [pc, #204]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800351e:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 8003520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800352c:	e052      	b.n	80035d4 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003536:	d10f      	bne.n	8003558 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 800353a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 800354a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	69bb      	ldr	r3, [r7, #24]
}
 8003556:	e03d      	b.n	80035d4 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <HAL_TIM_Base_MspInit+0xec>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10f      	bne.n	8003582 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 8003564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003568:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 800356a:	f043 0302 	orr.w	r3, r3, #2
 800356e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 8003574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	697b      	ldr	r3, [r7, #20]
}
 8003580:	e028      	b.n	80035d4 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a19      	ldr	r2, [pc, #100]	; (80035ec <HAL_TIM_Base_MspInit+0xf0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d10f      	bne.n	80035ac <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 800358e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003592:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 800359e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]
}
 80035aa:	e013      	b.n	80035d4 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <HAL_TIM_Base_MspInit+0xf4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10e      	bne.n	80035d4 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 80035b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035bc:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 80035be:	f043 0308 	orr.w	r3, r3, #8
 80035c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_TIM_Base_MspInit+0xe8>)
 80035c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3724      	adds	r7, #36	; 0x24
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40010000 	.word	0x40010000
 80035e4:	58024400 	.word	0x58024400
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00

080035f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0ba      	sub	sp, #232	; 0xe8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800360c:	f107 0310 	add.w	r3, r7, #16
 8003610:	22c0      	movs	r2, #192	; 0xc0
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f016 fbc1 	bl	8019d9c <memset>
  if(huart->Instance==USART3)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a27      	ldr	r2, [pc, #156]	; (80036bc <HAL_UART_MspInit+0xc8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d146      	bne.n	80036b2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003624:	f04f 0202 	mov.w	r2, #2
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	4618      	mov	r0, r3
 800363c:	f007 f95e 	bl	800a8fc <HAL_RCCEx_PeriphCLKConfig>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003646:	f7ff fd77 	bl	8003138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_UART_MspInit+0xcc>)
 800364c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <HAL_UART_MspInit+0xcc>)
 8003652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003656:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_UART_MspInit+0xcc>)
 800365c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <HAL_UART_MspInit+0xcc>)
 800366a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800366e:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <HAL_UART_MspInit+0xcc>)
 8003670:	f043 0308 	orr.w	r3, r3, #8
 8003674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_UART_MspInit+0xcc>)
 800367a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800368a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036a0:	2307      	movs	r3, #7
 80036a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4805      	ldr	r0, [pc, #20]	; (80036c4 <HAL_UART_MspInit+0xd0>)
 80036ae:	f004 f825 	bl	80076fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036b2:	bf00      	nop
 80036b4:	37e8      	adds	r7, #232	; 0xe8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40004800 	.word	0x40004800
 80036c0:	58024400 	.word	0x58024400
 80036c4:	58020c00 	.word	0x58020c00

080036c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80036cc:	f007 f8fa 	bl	800a8c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 80036d0:	f7ff fd32 	bl	8003138 <Error_Handler>
 80036d4:	e7fc      	b.n	80036d0 <NMI_Handler+0x8>

080036d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80036da:	f7ff fd2d 	bl	8003138 <Error_Handler>
 80036de:	e7fc      	b.n	80036da <HardFault_Handler+0x4>

080036e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80036e4:	f7ff fd28 	bl	8003138 <Error_Handler>
 80036e8:	e7fc      	b.n	80036e4 <MemManage_Handler+0x4>

080036ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80036ee:	f7ff fd23 	bl	8003138 <Error_Handler>
 80036f2:	e7fc      	b.n	80036ee <BusFault_Handler+0x4>

080036f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80036f8:	f7ff fd1e 	bl	8003138 <Error_Handler>
 80036fc:	e7fc      	b.n	80036f8 <UsageFault_Handler+0x4>

080036fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800372c:	f000 fba2 	bl	8003e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}

08003734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003738:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800373c:	f004 f9d9 	bl	8007af2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8003740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003744:	f004 f9d5 	bl	8007af2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	bd80      	pop	{r7, pc}

0800374c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003750:	4802      	ldr	r0, [pc, #8]	; (800375c <LPTIM1_IRQHandler+0x10>)
 8003752:	f005 fd90 	bl	8009276 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200003b4 	.word	0x200003b4

08003760 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8003764:	2100      	movs	r1, #0
 8003766:	4802      	ldr	r0, [pc, #8]	; (8003770 <HRTIM1_TIMA_IRQHandler+0x10>)
 8003768:	f004 fd9c 	bl	80082a4 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}
 8003770:	200002d8 	.word	0x200002d8

08003774 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8003778:	2104      	movs	r1, #4
 800377a:	4802      	ldr	r0, [pc, #8]	; (8003784 <HRTIM1_TIME_IRQHandler+0x10>)
 800377c:	f004 fd92 	bl	80082a4 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}
 8003784:	200002d8 	.word	0x200002d8

08003788 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800378c:	4802      	ldr	r0, [pc, #8]	; (8003798 <ADC3_IRQHandler+0x10>)
 800378e:	f001 f8f5 	bl	800497c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000260 	.word	0x20000260

0800379c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
	return 1;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <_kill>:

int _kill(int pid, int sig)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <_kill+0x20>)
 80037b8:	2216      	movs	r2, #22
 80037ba:	601a      	str	r2, [r3, #0]
	return -1;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20007368 	.word	0x20007368

080037d0 <_exit>:

void _exit (int status)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037d8:	f04f 31ff 	mov.w	r1, #4294967295
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ffe5 	bl	80037ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80037e2:	e7fe      	b.n	80037e2 <_exit+0x12>

080037e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e00a      	b.n	800380c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037f6:	f3af 8000 	nop.w
 80037fa:	4601      	mov	r1, r0
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	60ba      	str	r2, [r7, #8]
 8003802:	b2ca      	uxtb	r2, r1
 8003804:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3301      	adds	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	dbf0      	blt.n	80037f6 <_read+0x12>
	}

return len;
 8003814:	687b      	ldr	r3, [r7, #4]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e009      	b.n	8003844 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	60ba      	str	r2, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe fc07 	bl	800204c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	3301      	adds	r3, #1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	dbf1      	blt.n	8003830 <_write+0x12>
	}
	return len;
 800384c:	687b      	ldr	r3, [r7, #4]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <_close>:

int _close(int file)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
	return -1;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800387e:	605a      	str	r2, [r3, #4]
	return 0;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <_isatty>:

int _isatty(int file)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
	return 1;
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
	return 0;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <_sbrk+0x5c>)
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <_sbrk+0x60>)
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <_sbrk+0x64>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <_sbrk+0x64>)
 80038de:	4a12      	ldr	r2, [pc, #72]	; (8003928 <_sbrk+0x68>)
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <_sbrk+0x64>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d205      	bcs.n	80038fc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <_sbrk+0x6c>)
 80038f2:	220c      	movs	r2, #12
 80038f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038f6:	f04f 33ff 	mov.w	r3, #4294967295
 80038fa:	e009      	b.n	8003910 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <_sbrk+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <_sbrk+0x64>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	4a06      	ldr	r2, [pc, #24]	; (8003924 <_sbrk+0x64>)
 800390c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800390e:	68fb      	ldr	r3, [r7, #12]
}
 8003910:	4618      	mov	r0, r3
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	20020000 	.word	0x20020000
 8003920:	00000400 	.word	0x00000400
 8003924:	20000690 	.word	0x20000690
 8003928:	20007378 	.word	0x20007378
 800392c:	20007368 	.word	0x20007368

08003930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003936:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <SystemInit+0x104>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	4a3d      	ldr	r2, [pc, #244]	; (8003a34 <SystemInit+0x104>)
 800393e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003942:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003946:	4b3c      	ldr	r3, [pc, #240]	; (8003a38 <SystemInit+0x108>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	2b06      	cmp	r3, #6
 8003950:	d807      	bhi.n	8003962 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003952:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <SystemInit+0x108>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 030f 	bic.w	r3, r3, #15
 800395a:	4a37      	ldr	r2, [pc, #220]	; (8003a38 <SystemInit+0x108>)
 800395c:	f043 0307 	orr.w	r3, r3, #7
 8003960:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <SystemInit+0x10c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a35      	ldr	r2, [pc, #212]	; (8003a3c <SystemInit+0x10c>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800396e:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <SystemInit+0x10c>)
 8003970:	2200      	movs	r2, #0
 8003972:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <SystemInit+0x10c>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4930      	ldr	r1, [pc, #192]	; (8003a3c <SystemInit+0x10c>)
 800397a:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <SystemInit+0x110>)
 800397c:	4013      	ands	r3, r2
 800397e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003980:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <SystemInit+0x108>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800398c:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <SystemInit+0x108>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 030f 	bic.w	r3, r3, #15
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <SystemInit+0x108>)
 8003996:	f043 0307 	orr.w	r3, r3, #7
 800399a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800399c:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <SystemInit+0x10c>)
 800399e:	2200      	movs	r2, #0
 80039a0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <SystemInit+0x10c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80039a8:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <SystemInit+0x10c>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80039ae:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <SystemInit+0x10c>)
 80039b0:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <SystemInit+0x114>)
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <SystemInit+0x10c>)
 80039b6:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <SystemInit+0x118>)
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039ba:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <SystemInit+0x10c>)
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <SystemInit+0x11c>)
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039c0:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <SystemInit+0x10c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <SystemInit+0x10c>)
 80039c8:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <SystemInit+0x11c>)
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <SystemInit+0x10c>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <SystemInit+0x10c>)
 80039d4:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <SystemInit+0x11c>)
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039d8:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <SystemInit+0x10c>)
 80039da:	2200      	movs	r2, #0
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <SystemInit+0x10c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <SystemInit+0x10c>)
 80039e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <SystemInit+0x10c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <SystemInit+0x120>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <SystemInit+0x124>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fc:	d202      	bcs.n	8003a04 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80039fe:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <SystemInit+0x128>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <SystemInit+0x10c>)
 8003a06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <SystemInit+0x10c>)
 8003a0c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003a10:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <SystemInit+0x10c>)
 8003a16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003a1a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003a1c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <SystemInit+0x12c>)
 8003a20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003a24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000ed00 	.word	0xe000ed00
 8003a38:	52002000 	.word	0x52002000
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a44:	02020200 	.word	0x02020200
 8003a48:	01ff0000 	.word	0x01ff0000
 8003a4c:	01010280 	.word	0x01010280
 8003a50:	5c001000 	.word	0x5c001000
 8003a54:	ffff0000 	.word	0xffff0000
 8003a58:	51008108 	.word	0x51008108
 8003a5c:	52004000 	.word	0x52004000

08003a60 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4803      	ldr	r0, [pc, #12]	; (8003a78 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003a6c:	f004 f827 	bl	8007abe <HAL_GPIO_TogglePin>
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58020400 	.word	0x58020400

08003a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ab4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a80:	f7ff ff56 	bl	8003930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a84:	480c      	ldr	r0, [pc, #48]	; (8003ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a86:	490d      	ldr	r1, [pc, #52]	; (8003abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a88:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a8c:	e002      	b.n	8003a94 <LoopCopyDataInit>

08003a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a92:	3304      	adds	r3, #4

08003a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a98:	d3f9      	bcc.n	8003a8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a9c:	4c0a      	ldr	r4, [pc, #40]	; (8003ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aa0:	e001      	b.n	8003aa6 <LoopFillZerobss>

08003aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aa4:	3204      	adds	r2, #4

08003aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa8:	d3fb      	bcc.n	8003aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aaa:	f016 f9c9 	bl	8019e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aae:	f7fe fadf 	bl	8002070 <main>
  bx  lr
 8003ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003abc:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003ac0:	0801f300 	.word	0x0801f300
  ldr r2, =_sbss
 8003ac4:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003ac8:	20007378 	.word	0x20007378

08003acc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003acc:	e7fe      	b.n	8003acc <ADC_IRQHandler>

08003ace <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <LAN8742_RegisterBusIO+0x28>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <LAN8742_RegisterBusIO+0x28>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <LAN8742_RegisterBusIO+0x28>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
 8003afa:	e014      	b.n	8003b26 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d17c      	bne.n	8003c4c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e01c      	b.n	8003ba6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f107 0208 	add.w	r2, r7, #8
 8003b74:	2112      	movs	r1, #18
 8003b76:	6978      	ldr	r0, [r7, #20]
 8003b78:	4798      	blx	r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da03      	bge.n	8003b88 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003b80:	f06f 0304 	mvn.w	r3, #4
 8003b84:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003b86:	e00b      	b.n	8003ba0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d105      	bne.n	8003ba0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
         break;
 8003b9e:	e005      	b.n	8003bac <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b1f      	cmp	r3, #31
 8003baa:	d9df      	bls.n	8003b6c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b1f      	cmp	r3, #31
 8003bb2:	d902      	bls.n	8003bba <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003bb4:	f06f 0302 	mvn.w	r3, #2
 8003bb8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d145      	bne.n	8003c4c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6810      	ldr	r0, [r2, #0]
 8003bc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4798      	blx	r3
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db37      	blt.n	8003c46 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6810      	ldr	r0, [r2, #0]
 8003bde:	f107 0208 	add.w	r2, r7, #8
 8003be2:	2100      	movs	r1, #0
 8003be4:	4798      	blx	r3
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	db28      	blt.n	8003c3e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	4798      	blx	r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003bf6:	e01c      	b.n	8003c32 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	4798      	blx	r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c0a:	d80e      	bhi.n	8003c2a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6810      	ldr	r0, [r2, #0]
 8003c14:	f107 0208 	add.w	r2, r7, #8
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4798      	blx	r3
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da07      	bge.n	8003c32 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003c22:	f06f 0304 	mvn.w	r3, #4
 8003c26:	613b      	str	r3, [r7, #16]
                 break;
 8003c28:	e010      	b.n	8003c4c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003c2a:	f06f 0301 	mvn.w	r3, #1
 8003c2e:	613b      	str	r3, [r7, #16]
               break;
 8003c30:	e00c      	b.n	8003c4c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1dd      	bne.n	8003bf8 <LAN8742_Init+0xc6>
 8003c3c:	e006      	b.n	8003c4c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003c3e:	f06f 0304 	mvn.w	r3, #4
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e002      	b.n	8003c4c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003c46:	f06f 0303 	mvn.w	r3, #3
 8003c4a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d112      	bne.n	8003c78 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	4798      	blx	r3
 8003c58:	4603      	mov	r3, r0
 8003c5a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003c5c:	bf00      	nop
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	4798      	blx	r3
 8003c64:	4603      	mov	r3, r0
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c70:	d9f5      	bls.n	8003c5e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003c78:	693b      	ldr	r3, [r7, #16]
 }
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6810      	ldr	r0, [r2, #0]
 8003c96:	f107 020c 	add.w	r2, r7, #12
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	4798      	blx	r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da02      	bge.n	8003caa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003ca4:	f06f 0304 	mvn.w	r3, #4
 8003ca8:	e06e      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6810      	ldr	r0, [r2, #0]
 8003cb2:	f107 020c 	add.w	r2, r7, #12
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4798      	blx	r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	da02      	bge.n	8003cc6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003cc0:	f06f 0304 	mvn.w	r3, #4
 8003cc4:	e060      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e059      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6810      	ldr	r0, [r2, #0]
 8003cdc:	f107 020c 	add.w	r2, r7, #12
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4798      	blx	r3
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da02      	bge.n	8003cf0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003cea:	f06f 0304 	mvn.w	r3, #4
 8003cee:	e04b      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11b      	bne.n	8003d32 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d006      	beq.n	8003d12 <LAN8742_GetLinkState+0x90>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e03a      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e033      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d2a:	2304      	movs	r3, #4
 8003d2c:	e02c      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d2e:	2305      	movs	r3, #5
 8003d30:	e02a      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6810      	ldr	r0, [r2, #0]
 8003d3a:	f107 020c 	add.w	r2, r7, #12
 8003d3e:	211f      	movs	r1, #31
 8003d40:	4798      	blx	r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	da02      	bge.n	8003d4e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003d48:	f06f 0304 	mvn.w	r3, #4
 8003d4c:	e01c      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003d58:	2306      	movs	r3, #6
 8003d5a:	e015      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 031c 	and.w	r3, r3, #28
 8003d62:	2b18      	cmp	r3, #24
 8003d64:	d101      	bne.n	8003d6a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003d66:	2302      	movs	r3, #2
 8003d68:	e00e      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f003 031c 	and.w	r3, r3, #28
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d101      	bne.n	8003d78 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e007      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 031c 	and.w	r3, r3, #28
 8003d7e:	2b14      	cmp	r3, #20
 8003d80:	d101      	bne.n	8003d86 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d82:	2304      	movs	r3, #4
 8003d84:	e000      	b.n	8003d88 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d86:	2305      	movs	r3, #5
    }				
  }
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d96:	2003      	movs	r0, #3
 8003d98:	f001 ff1c 	bl	8005bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d9c:	f006 fbbc 	bl	800a518 <HAL_RCC_GetSysClockFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_Init+0x68>)
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	4913      	ldr	r1, [pc, #76]	; (8003dfc <HAL_Init+0x6c>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_Init+0x68>)
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <HAL_Init+0x6c>)
 8003dc4:	5cd3      	ldrb	r3, [r2, r3]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	4a0b      	ldr	r2, [pc, #44]	; (8003e00 <HAL_Init+0x70>)
 8003dd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <HAL_Init+0x74>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f000 f814 	bl	8003e08 <HAL_InitTick>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e002      	b.n	8003df0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003dea:	f7ff f9d5 	bl	8003198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	0801ee00 	.word	0x0801ee00
 8003e00:	20000014 	.word	0x20000014
 8003e04:	20000010 	.word	0x20000010

08003e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e10:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_InitTick+0x60>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e021      	b.n	8003e60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e1c:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <HAL_InitTick+0x64>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_InitTick+0x60>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	4619      	mov	r1, r3
 8003e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	4618      	mov	r0, r3
 8003e34:	f001 ff01 	bl	8005c3a <HAL_SYSTICK_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e00e      	b.n	8003e60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0f      	cmp	r3, #15
 8003e46:	d80a      	bhi.n	8003e5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	f001 fecb 	bl	8005bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e54:	4a06      	ldr	r2, [pc, #24]	; (8003e70 <HAL_InitTick+0x68>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e000      	b.n	8003e60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000028 	.word	0x20000028
 8003e6c:	20000010 	.word	0x20000010
 8003e70:	20000024 	.word	0x20000024

08003e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_IncTick+0x20>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_IncTick+0x24>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4413      	add	r3, r2
 8003e84:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <HAL_IncTick+0x24>)
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000028 	.word	0x20000028
 8003e98:	20000694 	.word	0x20000694

08003e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_GetTick+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000694 	.word	0x20000694

08003eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7ff ffee 	bl	8003e9c <HAL_GetTick>
 8003ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d005      	beq.n	8003eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <HAL_Delay+0x44>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eda:	bf00      	nop
 8003edc:	f7ff ffde 	bl	8003e9c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d8f7      	bhi.n	8003edc <HAL_Delay+0x28>
  {
  }
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000028 	.word	0x20000028

08003efc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_GetREVID+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0c1b      	lsrs	r3, r3, #16
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	5c001000 	.word	0x5c001000

08003f14 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f24:	4904      	ldr	r1, [pc, #16]	; (8003f38 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	58000400 	.word	0x58000400

08003f3c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003f46:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	4904      	ldr	r1, [pc, #16]	; (8003f64 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	58000400 	.word	0x58000400

08003f68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	609a      	str	r2, [r3, #8]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3360      	adds	r3, #96	; 0x60
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	431a      	orrs	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	611a      	str	r2, [r3, #16]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3360      	adds	r3, #96	; 0x60
 8004052:	461a      	mov	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	431a      	orrs	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	601a      	str	r2, [r3, #0]
  }
}
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800409e:	b480      	push	{r7}
 80040a0:	b087      	sub	sp, #28
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3330      	adds	r3, #48	; 0x30
 80040ae:	461a      	mov	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	4413      	add	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	211f      	movs	r1, #31
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	401a      	ands	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	0e9b      	lsrs	r3, r3, #26
 80040d6:	f003 011f 	and.w	r1, r3, #31
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	431a      	orrs	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3314      	adds	r3, #20
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	0e5b      	lsrs	r3, r3, #25
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	4413      	add	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	0d1b      	lsrs	r3, r3, #20
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	2107      	movs	r1, #7
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	401a      	ands	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	0d1b      	lsrs	r3, r3, #20
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	431a      	orrs	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800418c:	43db      	mvns	r3, r3
 800418e:	401a      	ands	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0318 	and.w	r3, r3, #24
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004198:	40d9      	lsrs	r1, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	400b      	ands	r3, r1
 800419e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a2:	431a      	orrs	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	000fffff 	.word	0x000fffff

080041bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 031f 	and.w	r3, r3, #31
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004202:	4013      	ands	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6093      	str	r3, [r2, #8]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	5fffffc0 	.word	0x5fffffc0

08004218 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800422c:	d101      	bne.n	8004232 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <LL_ADC_EnableInternalRegulator+0x24>)
 800424e:	4013      	ands	r3, r2
 8004250:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	6fffffc0 	.word	0x6fffffc0

08004268 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800427c:	d101      	bne.n	8004282 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <LL_ADC_Enable+0x24>)
 800429e:	4013      	ands	r3, r2
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	7fffffc0 	.word	0x7fffffc0

080042b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <LL_ADC_Disable+0x24>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	f043 0202 	orr.w	r2, r3, #2
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	7fffffc0 	.word	0x7fffffc0

080042e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <LL_ADC_IsEnabled+0x18>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <LL_ADC_IsEnabled+0x1a>
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b02      	cmp	r3, #2
 8004318:	d101      	bne.n	800431e <LL_ADC_IsDisableOngoing+0x18>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <LL_ADC_IsDisableOngoing+0x1a>
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <LL_ADC_REG_StartConversion+0x24>)
 800433a:	4013      	ands	r3, r2
 800433c:	f043 0204 	orr.w	r2, r3, #4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	7fffffc0 	.word	0x7fffffc0

08004354 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d101      	bne.n	800436c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b08      	cmp	r3, #8
 800438c:	d101      	bne.n	8004392 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b089      	sub	sp, #36	; 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e18f      	b.n	80046da <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fe feff 	bl	80031cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff19 	bl	8004218 <LL_ADC_IsDeepPowerDownEnabled>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff feff 	bl	80041f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff ff34 	bl	8004268 <LL_ADC_IsInternalRegulatorEnabled>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d114      	bne.n	8004430 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ff18 	bl	8004240 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004410:	4b87      	ldr	r3, [pc, #540]	; (8004630 <HAL_ADC_Init+0x290>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	4a87      	ldr	r2, [pc, #540]	; (8004634 <HAL_ADC_Init+0x294>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	3301      	adds	r3, #1
 8004420:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004422:	e002      	b.n	800442a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	3b01      	subs	r3, #1
 8004428:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f9      	bne.n	8004424 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff ff17 	bl	8004268 <LL_ADC_IsInternalRegulatorEnabled>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10d      	bne.n	800445c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	f043 0210 	orr.w	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff77 	bl	8004354 <LL_ADC_REG_IsConversionOngoing>
 8004466:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 8129 	bne.w	80046c8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 8125 	bne.w	80046c8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004486:	f043 0202 	orr.w	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff ff24 	bl	80042e0 <LL_ADC_IsEnabled>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d136      	bne.n	800450c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a65      	ldr	r2, [pc, #404]	; (8004638 <HAL_ADC_Init+0x298>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_ADC_Init+0x112>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a63      	ldr	r2, [pc, #396]	; (800463c <HAL_ADC_Init+0x29c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10e      	bne.n	80044d0 <HAL_ADC_Init+0x130>
 80044b2:	4861      	ldr	r0, [pc, #388]	; (8004638 <HAL_ADC_Init+0x298>)
 80044b4:	f7ff ff14 	bl	80042e0 <LL_ADC_IsEnabled>
 80044b8:	4604      	mov	r4, r0
 80044ba:	4860      	ldr	r0, [pc, #384]	; (800463c <HAL_ADC_Init+0x29c>)
 80044bc:	f7ff ff10 	bl	80042e0 <LL_ADC_IsEnabled>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4323      	orrs	r3, r4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e008      	b.n	80044e2 <HAL_ADC_Init+0x142>
 80044d0:	485b      	ldr	r0, [pc, #364]	; (8004640 <HAL_ADC_Init+0x2a0>)
 80044d2:	f7ff ff05 	bl	80042e0 <LL_ADC_IsEnabled>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d012      	beq.n	800450c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a53      	ldr	r2, [pc, #332]	; (8004638 <HAL_ADC_Init+0x298>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d004      	beq.n	80044fa <HAL_ADC_Init+0x15a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a51      	ldr	r2, [pc, #324]	; (800463c <HAL_ADC_Init+0x29c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_Init+0x15e>
 80044fa:	4a52      	ldr	r2, [pc, #328]	; (8004644 <HAL_ADC_Init+0x2a4>)
 80044fc:	e000      	b.n	8004500 <HAL_ADC_Init+0x160>
 80044fe:	4a52      	ldr	r2, [pc, #328]	; (8004648 <HAL_ADC_Init+0x2a8>)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f7ff fd2e 	bl	8003f68 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800450c:	f7ff fcf6 	bl	8003efc <HAL_GetREVID>
 8004510:	4603      	mov	r3, r0
 8004512:	f241 0203 	movw	r2, #4099	; 0x1003
 8004516:	4293      	cmp	r3, r2
 8004518:	d914      	bls.n	8004544 <HAL_ADC_Init+0x1a4>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b10      	cmp	r3, #16
 8004520:	d110      	bne.n	8004544 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	7d5b      	ldrb	r3, [r3, #21]
 8004526:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800452c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004532:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7f1b      	ldrb	r3, [r3, #28]
 8004538:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800453a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800453c:	f043 030c 	orr.w	r3, r3, #12
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e00d      	b.n	8004560 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	7d5b      	ldrb	r3, [r3, #21]
 8004548:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800454e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004554:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	7f1b      	ldrb	r3, [r3, #28]
 800455a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7f1b      	ldrb	r3, [r3, #28]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	3b01      	subs	r3, #1
 800456e:	045b      	lsls	r3, r3, #17
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	4b2c      	ldr	r3, [pc, #176]	; (800464c <HAL_ADC_Init+0x2ac>)
 800459a:	4013      	ands	r3, r2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	69b9      	ldr	r1, [r7, #24]
 80045a2:	430b      	orrs	r3, r1
 80045a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fed2 	bl	8004354 <LL_ADC_REG_IsConversionOngoing>
 80045b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fedf 	bl	800437a <LL_ADC_INJ_IsConversionOngoing>
 80045bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d15f      	bne.n	8004684 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d15c      	bne.n	8004684 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7d1b      	ldrb	r3, [r3, #20]
 80045ce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <HAL_ADC_Init+0x2b0>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	69b9      	ldr	r1, [r7, #24]
 80045e8:	430b      	orrs	r3, r1
 80045ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d130      	bne.n	8004658 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	4b14      	ldr	r3, [pc, #80]	; (8004654 <HAL_ADC_Init+0x2b4>)
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800460a:	3a01      	subs	r2, #1
 800460c:	0411      	lsls	r1, r2, #16
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004612:	4311      	orrs	r1, r2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800461e:	430a      	orrs	r2, r1
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	611a      	str	r2, [r3, #16]
 800462c:	e01c      	b.n	8004668 <HAL_ADC_Init+0x2c8>
 800462e:	bf00      	nop
 8004630:	20000010 	.word	0x20000010
 8004634:	053e2d63 	.word	0x053e2d63
 8004638:	40022000 	.word	0x40022000
 800463c:	40022100 	.word	0x40022100
 8004640:	58026000 	.word	0x58026000
 8004644:	40022300 	.word	0x40022300
 8004648:	58026300 	.word	0x58026300
 800464c:	fff0c003 	.word	0xfff0c003
 8004650:	ffffbffc 	.word	0xffffbffc
 8004654:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f001 f804 	bl	800568c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d10c      	bne.n	80046a6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	f023 010f 	bic.w	r1, r3, #15
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	1e5a      	subs	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
 80046a4:	e007      	b.n	80046b6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 020f 	bic.w	r2, r2, #15
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	f043 0201 	orr.w	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
 80046c6:	e007      	b.n	80046d8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	f043 0210 	orr.w	r2, r3, #16
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3724      	adds	r7, #36	; 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	bf00      	nop

080046e4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a92      	ldr	r2, [pc, #584]	; (800493c <HAL_ADC_Start_IT+0x258>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_ADC_Start_IT+0x1c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a91      	ldr	r2, [pc, #580]	; (8004940 <HAL_ADC_Start_IT+0x25c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_ADC_Start_IT+0x20>
 8004700:	4b90      	ldr	r3, [pc, #576]	; (8004944 <HAL_ADC_Start_IT+0x260>)
 8004702:	e000      	b.n	8004706 <HAL_ADC_Start_IT+0x22>
 8004704:	4b90      	ldr	r3, [pc, #576]	; (8004948 <HAL_ADC_Start_IT+0x264>)
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fd58 	bl	80041bc <LL_ADC_GetMultimode>
 800470c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fe1e 	bl	8004354 <LL_ADC_REG_IsConversionOngoing>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	f040 8118 	bne.w	8004950 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_ADC_Start_IT+0x4a>
 800472a:	2302      	movs	r3, #2
 800472c:	e113      	b.n	8004956 <HAL_ADC_Start_IT+0x272>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 febe 	bl	80054b8 <ADC_Enable>
 800473c:	4603      	mov	r3, r0
 800473e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 80f5 	bne.w	8004932 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800474c:	4b7f      	ldr	r3, [pc, #508]	; (800494c <HAL_ADC_Start_IT+0x268>)
 800474e:	4013      	ands	r3, r2
 8004750:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a78      	ldr	r2, [pc, #480]	; (8004940 <HAL_ADC_Start_IT+0x25c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d002      	beq.n	8004768 <HAL_ADC_Start_IT+0x84>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	e000      	b.n	800476a <HAL_ADC_Start_IT+0x86>
 8004768:	4b74      	ldr	r3, [pc, #464]	; (800493c <HAL_ADC_Start_IT+0x258>)
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	4293      	cmp	r3, r2
 8004770:	d002      	beq.n	8004778 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d006      	beq.n	800479e <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	f023 0206 	bic.w	r2, r3, #6
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	659a      	str	r2, [r3, #88]	; 0x58
 800479c:	e002      	b.n	80047a4 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	221c      	movs	r2, #28
 80047aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 021c 	bic.w	r2, r2, #28
 80047c2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d108      	bne.n	80047de <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	605a      	str	r2, [r3, #4]
          break;
 80047dc:	e008      	b.n	80047f0 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0204 	orr.w	r2, r2, #4
 80047ec:	605a      	str	r2, [r3, #4]
          break;
 80047ee:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d107      	bne.n	8004808 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0210 	orr.w	r2, r2, #16
 8004806:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a4c      	ldr	r2, [pc, #304]	; (8004940 <HAL_ADC_Start_IT+0x25c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d002      	beq.n	8004818 <HAL_ADC_Start_IT+0x134>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	e000      	b.n	800481a <HAL_ADC_Start_IT+0x136>
 8004818:	4b48      	ldr	r3, [pc, #288]	; (800493c <HAL_ADC_Start_IT+0x258>)
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	4293      	cmp	r3, r2
 8004820:	d008      	beq.n	8004834 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b05      	cmp	r3, #5
 800482c:	d002      	beq.n	8004834 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b09      	cmp	r3, #9
 8004832:	d13a      	bne.n	80048aa <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02d      	beq.n	800489e <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800484a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b08      	cmp	r3, #8
 8004858:	d110      	bne.n	800487c <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0220 	bic.w	r2, r2, #32
 8004868:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004878:	605a      	str	r2, [r3, #4]
              break;
 800487a:	e010      	b.n	800489e <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0220 	orr.w	r2, r2, #32
 800489a:	605a      	str	r2, [r3, #4]
              break;
 800489c:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff fd42 	bl	800432c <LL_ADC_REG_StartConversion>
 80048a8:	e054      	b.n	8004954 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a21      	ldr	r2, [pc, #132]	; (8004940 <HAL_ADC_Start_IT+0x25c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d002      	beq.n	80048c6 <HAL_ADC_Start_IT+0x1e2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	e000      	b.n	80048c8 <HAL_ADC_Start_IT+0x1e4>
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <HAL_ADC_Start_IT+0x258>)
 80048c8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d03e      	beq.n	8004954 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d110      	bne.n	8004910 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0220 	bic.w	r2, r2, #32
 80048fc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800490c:	605a      	str	r2, [r3, #4]
              break;
 800490e:	e021      	b.n	8004954 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0220 	orr.w	r2, r2, #32
 800492e:	605a      	str	r2, [r3, #4]
              break;
 8004930:	e010      	b.n	8004954 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800493a:	e00b      	b.n	8004954 <HAL_ADC_Start_IT+0x270>
 800493c:	40022000 	.word	0x40022000
 8004940:	40022100 	.word	0x40022100
 8004944:	40022300 	.word	0x40022300
 8004948:	58026300 	.word	0x58026300
 800494c:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004950:	2302      	movs	r3, #2
 8004952:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004954:	7dfb      	ldrb	r3, [r7, #23]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop

08004960 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004984:	2300      	movs	r3, #0
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a87      	ldr	r2, [pc, #540]	; (8004bbc <HAL_ADC_IRQHandler+0x240>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_ADC_IRQHandler+0x30>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a86      	ldr	r2, [pc, #536]	; (8004bc0 <HAL_ADC_IRQHandler+0x244>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_IRQHandler+0x34>
 80049ac:	4b85      	ldr	r3, [pc, #532]	; (8004bc4 <HAL_ADC_IRQHandler+0x248>)
 80049ae:	e000      	b.n	80049b2 <HAL_ADC_IRQHandler+0x36>
 80049b0:	4b85      	ldr	r3, [pc, #532]	; (8004bc8 <HAL_ADC_IRQHandler+0x24c>)
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fc02 	bl	80041bc <LL_ADC_GetMultimode>
 80049b8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d017      	beq.n	80049f4 <HAL_ADC_IRQHandler+0x78>
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d012      	beq.n	80049f4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d105      	bne.n	80049e6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f001 f81a 	bl	8005a20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2202      	movs	r2, #2
 80049f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <HAL_ADC_IRQHandler+0x8c>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 8083 	beq.w	8004b1a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d07d      	beq.n	8004b1a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fb1c 	bl	8004078 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d062      	beq.n	8004b0c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a5d      	ldr	r2, [pc, #372]	; (8004bc0 <HAL_ADC_IRQHandler+0x244>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d002      	beq.n	8004a56 <HAL_ADC_IRQHandler+0xda>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	e000      	b.n	8004a58 <HAL_ADC_IRQHandler+0xdc>
 8004a56:	4b59      	ldr	r3, [pc, #356]	; (8004bbc <HAL_ADC_IRQHandler+0x240>)
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d008      	beq.n	8004a72 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b05      	cmp	r3, #5
 8004a6a:	d002      	beq.n	8004a72 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b09      	cmp	r3, #9
 8004a70:	d104      	bne.n	8004a7c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	e00c      	b.n	8004a96 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a4f      	ldr	r2, [pc, #316]	; (8004bc0 <HAL_ADC_IRQHandler+0x244>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d002      	beq.n	8004a8c <HAL_ADC_IRQHandler+0x110>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	e000      	b.n	8004a8e <HAL_ADC_IRQHandler+0x112>
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <HAL_ADC_IRQHandler+0x240>)
 8004a8e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d135      	bne.n	8004b0c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d12e      	bne.n	8004b0c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fc4e 	bl	8004354 <LL_ADC_REG_IsConversionOngoing>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11a      	bne.n	8004af4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 020c 	bic.w	r2, r2, #12
 8004acc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d112      	bne.n	8004b0c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
 8004af2:	e00b      	b.n	8004b0c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af8:	f043 0210 	orr.w	r2, r3, #16
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b04:	f043 0201 	orr.w	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fe fa53 	bl	8002fb8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	220c      	movs	r2, #12
 8004b18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_ADC_IRQHandler+0x1b2>
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80a0 	beq.w	8004c7a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 809a 	beq.w	8004c7a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fac7 	bl	80040f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004b68:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fa82 	bl	8004078 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b74:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a11      	ldr	r2, [pc, #68]	; (8004bc0 <HAL_ADC_IRQHandler+0x244>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d002      	beq.n	8004b86 <HAL_ADC_IRQHandler+0x20a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	e000      	b.n	8004b88 <HAL_ADC_IRQHandler+0x20c>
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <HAL_ADC_IRQHandler+0x240>)
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d008      	beq.n	8004ba2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b06      	cmp	r3, #6
 8004b9a:	d002      	beq.n	8004ba2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b07      	cmp	r3, #7
 8004ba0:	d104      	bne.n	8004bac <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	e014      	b.n	8004bd6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <HAL_ADC_IRQHandler+0x244>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00a      	beq.n	8004bcc <HAL_ADC_IRQHandler+0x250>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	e008      	b.n	8004bce <HAL_ADC_IRQHandler+0x252>
 8004bbc:	40022000 	.word	0x40022000
 8004bc0:	40022100 	.word	0x40022100
 8004bc4:	40022300 	.word	0x40022300
 8004bc8:	58026300 	.word	0x58026300
 8004bcc:	4b84      	ldr	r3, [pc, #528]	; (8004de0 <HAL_ADC_IRQHandler+0x464>)
 8004bce:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d047      	beq.n	8004c6c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <HAL_ADC_IRQHandler+0x27a>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d03f      	beq.n	8004c6c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d13a      	bne.n	8004c6c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d133      	bne.n	8004c6c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d12e      	bne.n	8004c6c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fbb1 	bl	800437a <LL_ADC_INJ_IsConversionOngoing>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11a      	bne.n	8004c54 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c2c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d112      	bne.n	8004c6c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	f043 0201 	orr.w	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	655a      	str	r2, [r3, #84]	; 0x54
 8004c52:	e00b      	b.n	8004c6c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f043 0210 	orr.w	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 feaf 	bl	80059d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2260      	movs	r2, #96	; 0x60
 8004c78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d011      	beq.n	8004ca8 <HAL_ADC_IRQHandler+0x32c>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8a8 	bl	8004df0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2280      	movs	r2, #128	; 0x80
 8004ca6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d012      	beq.n	8004cd8 <HAL_ADC_IRQHandler+0x35c>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00d      	beq.n	8004cd8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fe95 	bl	80059f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d012      	beq.n	8004d08 <HAL_ADC_IRQHandler+0x38c>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00d      	beq.n	8004d08 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fe87 	bl	8005a0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d043      	beq.n	8004d9a <HAL_ADC_IRQHandler+0x41e>
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03e      	beq.n	8004d9a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d102      	bne.n	8004d2a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004d24:	2301      	movs	r3, #1
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	e021      	b.n	8004d6e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d015      	beq.n	8004d5c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2a      	ldr	r2, [pc, #168]	; (8004de0 <HAL_ADC_IRQHandler+0x464>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <HAL_ADC_IRQHandler+0x3c8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a29      	ldr	r2, [pc, #164]	; (8004de4 <HAL_ADC_IRQHandler+0x468>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d101      	bne.n	8004d48 <HAL_ADC_IRQHandler+0x3cc>
 8004d44:	4b28      	ldr	r3, [pc, #160]	; (8004de8 <HAL_ADC_IRQHandler+0x46c>)
 8004d46:	e000      	b.n	8004d4a <HAL_ADC_IRQHandler+0x3ce>
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_ADC_IRQHandler+0x470>)
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fa44 	bl	80041d8 <LL_ADC_GetMultiDMATransfer>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004d56:	2301      	movs	r3, #1
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5a:	e008      	b.n	8004d6e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10e      	bne.n	8004d92 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d84:	f043 0202 	orr.w	r2, r3, #2
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f839 	bl	8004e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2210      	movs	r2, #16
 8004d98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d018      	beq.n	8004dd6 <HAL_ADC_IRQHandler+0x45a>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d013      	beq.n	8004dd6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbe:	f043 0208 	orr.w	r2, r3, #8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dce:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fe07 	bl	80059e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004dd6:	bf00      	nop
 8004dd8:	3728      	adds	r7, #40	; 0x28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40022000 	.word	0x40022000
 8004de4:	40022100 	.word	0x40022100
 8004de8:	40022300 	.word	0x40022300
 8004dec:	58026300 	.word	0x58026300

08004df0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b0a1      	sub	sp, #132	; 0x84
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4a9d      	ldr	r2, [pc, #628]	; (80050a8 <HAL_ADC_ConfigChannel+0x290>)
 8004e32:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x2a>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e321      	b.n	8005486 <HAL_ADC_ConfigChannel+0x66e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fa80 	bl	8004354 <LL_ADC_REG_IsConversionOngoing>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f040 8306 	bne.w	8005468 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d108      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x62>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	0e9b      	lsrs	r3, r3, #26
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2201      	movs	r2, #1
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	e016      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0x90>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e82:	fa93 f3a3 	rbit	r3, r3
 8004e86:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e8a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004e92:	2320      	movs	r3, #32
 8004e94:	e003      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004e96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e98:	fab3 f383 	clz	r3, r3
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	69d1      	ldr	r1, [r2, #28]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f7ff f8eb 	bl	800409e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fa41 	bl	8004354 <LL_ADC_REG_IsConversionOngoing>
 8004ed2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fa4e 	bl	800437a <LL_ADC_INJ_IsConversionOngoing>
 8004ede:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 80b3 	bne.w	800504e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f040 80af 	bne.w	800504e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6819      	ldr	r1, [r3, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f7ff f90d 	bl	800411c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f02:	4b6a      	ldr	r3, [pc, #424]	; (80050ac <HAL_ADC_ConfigChannel+0x294>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f0e:	d10b      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x110>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	089b      	lsrs	r3, r3, #2
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	e01d      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x14c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 0310 	and.w	r3, r3, #16
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10b      	bne.n	8004f4e <HAL_ADC_ConfigChannel+0x136>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	e00a      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x14c>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	089b      	lsrs	r3, r3, #2
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d027      	beq.n	8004fbe <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6919      	ldr	r1, [r3, #16]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7c:	f7ff f828 	bl	8003fd0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	6919      	ldr	r1, [r3, #16]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	7e5b      	ldrb	r3, [r3, #25]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d102      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x17e>
 8004f90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f94:	e000      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x180>
 8004f96:	2300      	movs	r3, #0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f7ff f852 	bl	8004042 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6919      	ldr	r1, [r3, #16]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	7e1b      	ldrb	r3, [r3, #24]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d102      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x19c>
 8004fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fb2:	e000      	b.n	8004fb6 <HAL_ADC_ConfigChannel+0x19e>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7ff f82a 	bl	8004010 <LL_ADC_SetDataRightShift>
 8004fbc:	e047      	b.n	800504e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	069b      	lsls	r3, r3, #26
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d107      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fe0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	069b      	lsls	r3, r3, #26
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d107      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005004:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800500c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	069b      	lsls	r3, r3, #26
 8005016:	429a      	cmp	r2, r3
 8005018:	d107      	bne.n	800502a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005028:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005030:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	069b      	lsls	r3, r3, #26
 800503a:	429a      	cmp	r2, r3
 800503c:	d107      	bne.n	800504e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800504c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff f944 	bl	80042e0 <LL_ADC_IsEnabled>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 820d 	bne.w	800547a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6819      	ldr	r1, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	461a      	mov	r2, r3
 800506e:	f7ff f881 	bl	8004174 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4a0c      	ldr	r2, [pc, #48]	; (80050a8 <HAL_ADC_ConfigChannel+0x290>)
 8005078:	4293      	cmp	r3, r2
 800507a:	f040 8133 	bne.w	80052e4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800508a:	2b00      	cmp	r3, #0
 800508c:	d110      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x298>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	0e9b      	lsrs	r3, r3, #26
 8005094:	3301      	adds	r3, #1
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2b09      	cmp	r3, #9
 800509c:	bf94      	ite	ls
 800509e:	2301      	movls	r3, #1
 80050a0:	2300      	movhi	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e01e      	b.n	80050e4 <HAL_ADC_ConfigChannel+0x2cc>
 80050a6:	bf00      	nop
 80050a8:	47ff0000 	.word	0x47ff0000
 80050ac:	5c001000 	.word	0x5c001000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050b8:	fa93 f3a3 	rbit	r3, r3
 80050bc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80050be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80050c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80050c8:	2320      	movs	r3, #32
 80050ca:	e003      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80050cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ce:	fab3 f383 	clz	r3, r3
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	3301      	adds	r3, #1
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2b09      	cmp	r3, #9
 80050dc:	bf94      	ite	ls
 80050de:	2301      	movls	r3, #1
 80050e0:	2300      	movhi	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d079      	beq.n	80051dc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d107      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x2ec>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	0e9b      	lsrs	r3, r3, #26
 80050fa:	3301      	adds	r3, #1
 80050fc:	069b      	lsls	r3, r3, #26
 80050fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005102:	e015      	b.n	8005130 <HAL_ADC_ConfigChannel+0x318>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005114:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800511c:	2320      	movs	r3, #32
 800511e:	e003      	b.n	8005128 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005122:	fab3 f383 	clz	r3, r3
 8005126:	b2db      	uxtb	r3, r3
 8005128:	3301      	adds	r3, #1
 800512a:	069b      	lsls	r3, r3, #26
 800512c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <HAL_ADC_ConfigChannel+0x338>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	0e9b      	lsrs	r3, r3, #26
 8005142:	3301      	adds	r3, #1
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	2101      	movs	r1, #1
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	e017      	b.n	8005180 <HAL_ADC_ConfigChannel+0x368>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005158:	fa93 f3a3 	rbit	r3, r3
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800515e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005160:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005168:	2320      	movs	r3, #32
 800516a:	e003      	b.n	8005174 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800516c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516e:	fab3 f383 	clz	r3, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	3301      	adds	r3, #1
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	ea42 0103 	orr.w	r1, r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x38e>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	0e9b      	lsrs	r3, r3, #26
 8005196:	3301      	adds	r3, #1
 8005198:	f003 021f 	and.w	r2, r3, #31
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	051b      	lsls	r3, r3, #20
 80051a4:	e018      	b.n	80051d8 <HAL_ADC_ConfigChannel+0x3c0>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	fa93 f3a3 	rbit	r3, r3
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80051b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80051be:	2320      	movs	r3, #32
 80051c0:	e003      	b.n	80051ca <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	fab3 f383 	clz	r3, r3
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	f003 021f 	and.w	r2, r3, #31
 80051d0:	4613      	mov	r3, r2
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	4413      	add	r3, r2
 80051d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051d8:	430b      	orrs	r3, r1
 80051da:	e07e      	b.n	80052da <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d107      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0x3e0>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	0e9b      	lsrs	r3, r3, #26
 80051ee:	3301      	adds	r3, #1
 80051f0:	069b      	lsls	r3, r3, #26
 80051f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051f6:	e015      	b.n	8005224 <HAL_ADC_ConfigChannel+0x40c>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	fa93 f3a3 	rbit	r3, r3
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005210:	2320      	movs	r3, #32
 8005212:	e003      	b.n	800521c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	fab3 f383 	clz	r3, r3
 800521a:	b2db      	uxtb	r3, r3
 800521c:	3301      	adds	r3, #1
 800521e:	069b      	lsls	r3, r3, #26
 8005220:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800522c:	2b00      	cmp	r3, #0
 800522e:	d109      	bne.n	8005244 <HAL_ADC_ConfigChannel+0x42c>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	0e9b      	lsrs	r3, r3, #26
 8005236:	3301      	adds	r3, #1
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	2101      	movs	r1, #1
 800523e:	fa01 f303 	lsl.w	r3, r1, r3
 8005242:	e017      	b.n	8005274 <HAL_ADC_ConfigChannel+0x45c>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	fa93 f3a3 	rbit	r3, r3
 8005250:	61bb      	str	r3, [r7, #24]
  return result;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800525c:	2320      	movs	r3, #32
 800525e:	e003      	b.n	8005268 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	fab3 f383 	clz	r3, r3
 8005266:	b2db      	uxtb	r3, r3
 8005268:	3301      	adds	r3, #1
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	2101      	movs	r1, #1
 8005270:	fa01 f303 	lsl.w	r3, r1, r3
 8005274:	ea42 0103 	orr.w	r1, r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x488>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	0e9b      	lsrs	r3, r3, #26
 800528a:	3301      	adds	r3, #1
 800528c:	f003 021f 	and.w	r2, r3, #31
 8005290:	4613      	mov	r3, r2
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	3b1e      	subs	r3, #30
 8005298:	051b      	lsls	r3, r3, #20
 800529a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800529e:	e01b      	b.n	80052d8 <HAL_ADC_ConfigChannel+0x4c0>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	fa93 f3a3 	rbit	r3, r3
 80052ac:	60fb      	str	r3, [r7, #12]
  return result;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80052b8:	2320      	movs	r3, #32
 80052ba:	e003      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	fab3 f383 	clz	r3, r3
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	3301      	adds	r3, #1
 80052c6:	f003 021f 	and.w	r2, r3, #31
 80052ca:	4613      	mov	r3, r2
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	4413      	add	r3, r2
 80052d0:	3b1e      	subs	r3, #30
 80052d2:	051b      	lsls	r3, r3, #20
 80052d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052d8:	430b      	orrs	r3, r1
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	6892      	ldr	r2, [r2, #8]
 80052de:	4619      	mov	r1, r3
 80052e0:	f7fe ff1c 	bl	800411c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f280 80c6 	bge.w	800547a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a67      	ldr	r2, [pc, #412]	; (8005490 <HAL_ADC_ConfigChannel+0x678>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d004      	beq.n	8005302 <HAL_ADC_ConfigChannel+0x4ea>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a65      	ldr	r2, [pc, #404]	; (8005494 <HAL_ADC_ConfigChannel+0x67c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d101      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x4ee>
 8005302:	4b65      	ldr	r3, [pc, #404]	; (8005498 <HAL_ADC_ConfigChannel+0x680>)
 8005304:	e000      	b.n	8005308 <HAL_ADC_ConfigChannel+0x4f0>
 8005306:	4b65      	ldr	r3, [pc, #404]	; (800549c <HAL_ADC_ConfigChannel+0x684>)
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe fe53 	bl	8003fb4 <LL_ADC_GetCommonPathInternalCh>
 800530e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5e      	ldr	r2, [pc, #376]	; (8005490 <HAL_ADC_ConfigChannel+0x678>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_ADC_ConfigChannel+0x50c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a5d      	ldr	r2, [pc, #372]	; (8005494 <HAL_ADC_ConfigChannel+0x67c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10e      	bne.n	8005342 <HAL_ADC_ConfigChannel+0x52a>
 8005324:	485a      	ldr	r0, [pc, #360]	; (8005490 <HAL_ADC_ConfigChannel+0x678>)
 8005326:	f7fe ffdb 	bl	80042e0 <LL_ADC_IsEnabled>
 800532a:	4604      	mov	r4, r0
 800532c:	4859      	ldr	r0, [pc, #356]	; (8005494 <HAL_ADC_ConfigChannel+0x67c>)
 800532e:	f7fe ffd7 	bl	80042e0 <LL_ADC_IsEnabled>
 8005332:	4603      	mov	r3, r0
 8005334:	4323      	orrs	r3, r4
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf0c      	ite	eq
 800533a:	2301      	moveq	r3, #1
 800533c:	2300      	movne	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	e008      	b.n	8005354 <HAL_ADC_ConfigChannel+0x53c>
 8005342:	4857      	ldr	r0, [pc, #348]	; (80054a0 <HAL_ADC_ConfigChannel+0x688>)
 8005344:	f7fe ffcc 	bl	80042e0 <LL_ADC_IsEnabled>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	bf0c      	ite	eq
 800534e:	2301      	moveq	r3, #1
 8005350:	2300      	movne	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d07d      	beq.n	8005454 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a51      	ldr	r2, [pc, #324]	; (80054a4 <HAL_ADC_ConfigChannel+0x68c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d130      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x5ac>
 8005362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d12b      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a4b      	ldr	r2, [pc, #300]	; (80054a0 <HAL_ADC_ConfigChannel+0x688>)
 8005372:	4293      	cmp	r3, r2
 8005374:	f040 8081 	bne.w	800547a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a44      	ldr	r2, [pc, #272]	; (8005490 <HAL_ADC_ConfigChannel+0x678>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_ADC_ConfigChannel+0x574>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a43      	ldr	r2, [pc, #268]	; (8005494 <HAL_ADC_ConfigChannel+0x67c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d101      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x578>
 800538c:	4a42      	ldr	r2, [pc, #264]	; (8005498 <HAL_ADC_ConfigChannel+0x680>)
 800538e:	e000      	b.n	8005392 <HAL_ADC_ConfigChannel+0x57a>
 8005390:	4a42      	ldr	r2, [pc, #264]	; (800549c <HAL_ADC_ConfigChannel+0x684>)
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f7fe fdf7 	bl	8003f8e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053a0:	4b41      	ldr	r3, [pc, #260]	; (80054a8 <HAL_ADC_ConfigChannel+0x690>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	099b      	lsrs	r3, r3, #6
 80053a6:	4a41      	ldr	r2, [pc, #260]	; (80054ac <HAL_ADC_ConfigChannel+0x694>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	099b      	lsrs	r3, r3, #6
 80053ae:	3301      	adds	r3, #1
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80053b4:	e002      	b.n	80053bc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f9      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053c2:	e05a      	b.n	800547a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a39      	ldr	r2, [pc, #228]	; (80054b0 <HAL_ADC_ConfigChannel+0x698>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d11e      	bne.n	800540c <HAL_ADC_ConfigChannel+0x5f4>
 80053ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d119      	bne.n	800540c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a30      	ldr	r2, [pc, #192]	; (80054a0 <HAL_ADC_ConfigChannel+0x688>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d14b      	bne.n	800547a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2a      	ldr	r2, [pc, #168]	; (8005490 <HAL_ADC_ConfigChannel+0x678>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_ADC_ConfigChannel+0x5de>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a28      	ldr	r2, [pc, #160]	; (8005494 <HAL_ADC_ConfigChannel+0x67c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d101      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x5e2>
 80053f6:	4a28      	ldr	r2, [pc, #160]	; (8005498 <HAL_ADC_ConfigChannel+0x680>)
 80053f8:	e000      	b.n	80053fc <HAL_ADC_ConfigChannel+0x5e4>
 80053fa:	4a28      	ldr	r2, [pc, #160]	; (800549c <HAL_ADC_ConfigChannel+0x684>)
 80053fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f7fe fdc2 	bl	8003f8e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800540a:	e036      	b.n	800547a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <HAL_ADC_ConfigChannel+0x69c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d131      	bne.n	800547a <HAL_ADC_ConfigChannel+0x662>
 8005416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d12c      	bne.n	800547a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <HAL_ADC_ConfigChannel+0x688>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d127      	bne.n	800547a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a18      	ldr	r2, [pc, #96]	; (8005490 <HAL_ADC_ConfigChannel+0x678>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_ADC_ConfigChannel+0x626>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a16      	ldr	r2, [pc, #88]	; (8005494 <HAL_ADC_ConfigChannel+0x67c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d101      	bne.n	8005442 <HAL_ADC_ConfigChannel+0x62a>
 800543e:	4a16      	ldr	r2, [pc, #88]	; (8005498 <HAL_ADC_ConfigChannel+0x680>)
 8005440:	e000      	b.n	8005444 <HAL_ADC_ConfigChannel+0x62c>
 8005442:	4a16      	ldr	r2, [pc, #88]	; (800549c <HAL_ADC_ConfigChannel+0x684>)
 8005444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f7fe fd9e 	bl	8003f8e <LL_ADC_SetCommonPathInternalCh>
 8005452:	e012      	b.n	800547a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005466:	e008      	b.n	800547a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005482:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005486:	4618      	mov	r0, r3
 8005488:	3784      	adds	r7, #132	; 0x84
 800548a:	46bd      	mov	sp, r7
 800548c:	bd90      	pop	{r4, r7, pc}
 800548e:	bf00      	nop
 8005490:	40022000 	.word	0x40022000
 8005494:	40022100 	.word	0x40022100
 8005498:	40022300 	.word	0x40022300
 800549c:	58026300 	.word	0x58026300
 80054a0:	58026000 	.word	0x58026000
 80054a4:	cb840000 	.word	0xcb840000
 80054a8:	20000010 	.word	0x20000010
 80054ac:	053e2d63 	.word	0x053e2d63
 80054b0:	c7520000 	.word	0xc7520000
 80054b4:	cfb80000 	.word	0xcfb80000

080054b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe ff0b 	bl	80042e0 <LL_ADC_IsEnabled>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d16e      	bne.n	80055ae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	4b38      	ldr	r3, [pc, #224]	; (80055b8 <ADC_Enable+0x100>)
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	f043 0210 	orr.w	r2, r3, #16
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ee:	f043 0201 	orr.w	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e05a      	b.n	80055b0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fec6 	bl	8004290 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005504:	f7fe fcca 	bl	8003e9c <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2b      	ldr	r2, [pc, #172]	; (80055bc <ADC_Enable+0x104>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <ADC_Enable+0x66>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <ADC_Enable+0x108>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d101      	bne.n	8005522 <ADC_Enable+0x6a>
 800551e:	4b29      	ldr	r3, [pc, #164]	; (80055c4 <ADC_Enable+0x10c>)
 8005520:	e000      	b.n	8005524 <ADC_Enable+0x6c>
 8005522:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <ADC_Enable+0x110>)
 8005524:	4618      	mov	r0, r3
 8005526:	f7fe fe49 	bl	80041bc <LL_ADC_GetMultimode>
 800552a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a23      	ldr	r2, [pc, #140]	; (80055c0 <ADC_Enable+0x108>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d002      	beq.n	800553c <ADC_Enable+0x84>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	e000      	b.n	800553e <ADC_Enable+0x86>
 800553c:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <ADC_Enable+0x104>)
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	4293      	cmp	r3, r2
 8005544:	d02c      	beq.n	80055a0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d130      	bne.n	80055ae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800554c:	e028      	b.n	80055a0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe fec4 	bl	80042e0 <LL_ADC_IsEnabled>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fe94 	bl	8004290 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005568:	f7fe fc98 	bl	8003e9c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d914      	bls.n	80055a0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b01      	cmp	r3, #1
 8005582:	d00d      	beq.n	80055a0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005588:	f043 0210 	orr.w	r2, r3, #16
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005594:	f043 0201 	orr.w	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e007      	b.n	80055b0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d1cf      	bne.n	800554e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	8000003f 	.word	0x8000003f
 80055bc:	40022000 	.word	0x40022000
 80055c0:	40022100 	.word	0x40022100
 80055c4:	40022300 	.word	0x40022300
 80055c8:	58026300 	.word	0x58026300

080055cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe fe94 	bl	8004306 <LL_ADC_IsDisableOngoing>
 80055de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fe fe7b 	bl	80042e0 <LL_ADC_IsEnabled>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d047      	beq.n	8005680 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d144      	bne.n	8005680 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 030d 	and.w	r3, r3, #13
 8005600:	2b01      	cmp	r3, #1
 8005602:	d10c      	bne.n	800561e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7fe fe55 	bl	80042b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2203      	movs	r2, #3
 8005614:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005616:	f7fe fc41 	bl	8003e9c <HAL_GetTick>
 800561a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800561c:	e029      	b.n	8005672 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005622:	f043 0210 	orr.w	r2, r3, #16
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	f043 0201 	orr.w	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e023      	b.n	8005682 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800563a:	f7fe fc2f 	bl	8003e9c <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d914      	bls.n	8005672 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00d      	beq.n	8005672 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	f043 0210 	orr.w	r2, r3, #16
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005666:	f043 0201 	orr.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e007      	b.n	8005682 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1dc      	bne.n	800563a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a7a      	ldr	r2, [pc, #488]	; (8005884 <ADC_ConfigureBoostMode+0x1f8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <ADC_ConfigureBoostMode+0x1c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a79      	ldr	r2, [pc, #484]	; (8005888 <ADC_ConfigureBoostMode+0x1fc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d109      	bne.n	80056bc <ADC_ConfigureBoostMode+0x30>
 80056a8:	4b78      	ldr	r3, [pc, #480]	; (800588c <ADC_ConfigureBoostMode+0x200>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf14      	ite	ne
 80056b4:	2301      	movne	r3, #1
 80056b6:	2300      	moveq	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	e008      	b.n	80056ce <ADC_ConfigureBoostMode+0x42>
 80056bc:	4b74      	ldr	r3, [pc, #464]	; (8005890 <ADC_ConfigureBoostMode+0x204>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf14      	ite	ne
 80056c8:	2301      	movne	r3, #1
 80056ca:	2300      	moveq	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01c      	beq.n	800570c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80056d2:	f005 f89b 	bl	800a80c <HAL_RCC_GetHCLKFreq>
 80056d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056e0:	d010      	beq.n	8005704 <ADC_ConfigureBoostMode+0x78>
 80056e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056e6:	d873      	bhi.n	80057d0 <ADC_ConfigureBoostMode+0x144>
 80056e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ec:	d002      	beq.n	80056f4 <ADC_ConfigureBoostMode+0x68>
 80056ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056f2:	d16d      	bne.n	80057d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	0c1b      	lsrs	r3, r3, #16
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	60fb      	str	r3, [r7, #12]
        break;
 8005702:	e068      	b.n	80057d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	089b      	lsrs	r3, r3, #2
 8005708:	60fb      	str	r3, [r7, #12]
        break;
 800570a:	e064      	b.n	80057d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800570c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005710:	f04f 0100 	mov.w	r1, #0
 8005714:	f006 fafc 	bl	800bd10 <HAL_RCCEx_GetPeriphCLKFreq>
 8005718:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005722:	d051      	beq.n	80057c8 <ADC_ConfigureBoostMode+0x13c>
 8005724:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005728:	d854      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x148>
 800572a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800572e:	d047      	beq.n	80057c0 <ADC_ConfigureBoostMode+0x134>
 8005730:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005734:	d84e      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x148>
 8005736:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800573a:	d03d      	beq.n	80057b8 <ADC_ConfigureBoostMode+0x12c>
 800573c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005740:	d848      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x148>
 8005742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005746:	d033      	beq.n	80057b0 <ADC_ConfigureBoostMode+0x124>
 8005748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800574c:	d842      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x148>
 800574e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005752:	d029      	beq.n	80057a8 <ADC_ConfigureBoostMode+0x11c>
 8005754:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005758:	d83c      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x148>
 800575a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800575e:	d01a      	beq.n	8005796 <ADC_ConfigureBoostMode+0x10a>
 8005760:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005764:	d836      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x148>
 8005766:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800576a:	d014      	beq.n	8005796 <ADC_ConfigureBoostMode+0x10a>
 800576c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005770:	d830      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x148>
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005776:	d00e      	beq.n	8005796 <ADC_ConfigureBoostMode+0x10a>
 8005778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577c:	d82a      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x148>
 800577e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005782:	d008      	beq.n	8005796 <ADC_ConfigureBoostMode+0x10a>
 8005784:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005788:	d824      	bhi.n	80057d4 <ADC_ConfigureBoostMode+0x148>
 800578a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800578e:	d002      	beq.n	8005796 <ADC_ConfigureBoostMode+0x10a>
 8005790:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005794:	d11e      	bne.n	80057d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	0c9b      	lsrs	r3, r3, #18
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	60fb      	str	r3, [r7, #12]
        break;
 80057a6:	e016      	b.n	80057d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	091b      	lsrs	r3, r3, #4
 80057ac:	60fb      	str	r3, [r7, #12]
        break;
 80057ae:	e012      	b.n	80057d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	60fb      	str	r3, [r7, #12]
        break;
 80057b6:	e00e      	b.n	80057d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	099b      	lsrs	r3, r3, #6
 80057bc:	60fb      	str	r3, [r7, #12]
        break;
 80057be:	e00a      	b.n	80057d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	09db      	lsrs	r3, r3, #7
 80057c4:	60fb      	str	r3, [r7, #12]
        break;
 80057c6:	e006      	b.n	80057d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	60fb      	str	r3, [r7, #12]
        break;
 80057ce:	e002      	b.n	80057d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80057d0:	bf00      	nop
 80057d2:	e000      	b.n	80057d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80057d4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80057d6:	f7fe fb91 	bl	8003efc <HAL_GetREVID>
 80057da:	4603      	mov	r3, r0
 80057dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d815      	bhi.n	8005810 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a2b      	ldr	r2, [pc, #172]	; (8005894 <ADC_ConfigureBoostMode+0x208>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d908      	bls.n	80057fe <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80057fc:	e03e      	b.n	800587c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800580c:	609a      	str	r2, [r3, #8]
}
 800580e:	e035      	b.n	800587c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <ADC_ConfigureBoostMode+0x20c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d808      	bhi.n	8005830 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800582c:	609a      	str	r2, [r3, #8]
}
 800582e:	e025      	b.n	800587c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a1a      	ldr	r2, [pc, #104]	; (800589c <ADC_ConfigureBoostMode+0x210>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d80a      	bhi.n	800584e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	e016      	b.n	800587c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <ADC_ConfigureBoostMode+0x214>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d80a      	bhi.n	800586c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005868:	609a      	str	r2, [r3, #8]
}
 800586a:	e007      	b.n	800587c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800587a:	609a      	str	r2, [r3, #8]
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40022000 	.word	0x40022000
 8005888:	40022100 	.word	0x40022100
 800588c:	40022300 	.word	0x40022300
 8005890:	58026300 	.word	0x58026300
 8005894:	01312d00 	.word	0x01312d00
 8005898:	005f5e10 	.word	0x005f5e10
 800589c:	00bebc20 	.word	0x00bebc20
 80058a0:	017d7840 	.word	0x017d7840

080058a4 <LL_ADC_StartCalibration>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	4b09      	ldr	r3, [pc, #36]	; (80058dc <LL_ADC_StartCalibration+0x38>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80058c4:	430a      	orrs	r2, r1
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	3ffeffc0 	.word	0x3ffeffc0

080058e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f4:	d101      	bne.n	80058fa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_ADCEx_Calibration_Start+0x1e>
 8005922:	2302      	movs	r3, #2
 8005924:	e04c      	b.n	80059c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fe4c 	bl	80055cc <ADC_Disable>
 8005934:	4603      	mov	r3, r0
 8005936:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d135      	bne.n	80059aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005942:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005944:	4013      	ands	r3, r2
 8005946:	f043 0202 	orr.w	r2, r3, #2
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff ffa4 	bl	80058a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800595c:	e014      	b.n	8005988 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3301      	adds	r3, #1
 8005962:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4a19      	ldr	r2, [pc, #100]	; (80059cc <HAL_ADCEx_Calibration_Start+0xc4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d30d      	bcc.n	8005988 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005970:	f023 0312 	bic.w	r3, r3, #18
 8005974:	f043 0210 	orr.w	r2, r3, #16
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e01b      	b.n	80059c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff ffa7 	bl	80058e0 <LL_ADC_IsCalibrationOnGoing>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e2      	bne.n	800595e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599c:	f023 0303 	bic.w	r3, r3, #3
 80059a0:	f043 0201 	orr.w	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
 80059a8:	e005      	b.n	80059b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ae:	f043 0210 	orr.w	r2, r3, #16
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80059be:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	ffffeefd 	.word	0xffffeefd
 80059cc:	25c3f800 	.word	0x25c3f800

080059d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <__NVIC_SetPriorityGrouping>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a44:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <__NVIC_SetPriorityGrouping+0x40>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a50:	4013      	ands	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <__NVIC_SetPriorityGrouping+0x44>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a62:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <__NVIC_SetPriorityGrouping+0x40>)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	60d3      	str	r3, [r2, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	e000ed00 	.word	0xe000ed00
 8005a78:	05fa0000 	.word	0x05fa0000

08005a7c <__NVIC_GetPriorityGrouping>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <__NVIC_GetPriorityGrouping+0x18>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	f003 0307 	and.w	r3, r3, #7
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	e000ed00 	.word	0xe000ed00

08005a98 <__NVIC_EnableIRQ>:
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	db0b      	blt.n	8005ac2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	f003 021f 	and.w	r2, r3, #31
 8005ab0:	4907      	ldr	r1, [pc, #28]	; (8005ad0 <__NVIC_EnableIRQ+0x38>)
 8005ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2001      	movs	r0, #1
 8005aba:	fa00 f202 	lsl.w	r2, r0, r2
 8005abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e100 	.word	0xe000e100

08005ad4 <__NVIC_SetPriority>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	db0a      	blt.n	8005afe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	490c      	ldr	r1, [pc, #48]	; (8005b20 <__NVIC_SetPriority+0x4c>)
 8005aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005af2:	0112      	lsls	r2, r2, #4
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	440b      	add	r3, r1
 8005af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005afc:	e00a      	b.n	8005b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	4908      	ldr	r1, [pc, #32]	; (8005b24 <__NVIC_SetPriority+0x50>)
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	3b04      	subs	r3, #4
 8005b0c:	0112      	lsls	r2, r2, #4
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	440b      	add	r3, r1
 8005b12:	761a      	strb	r2, [r3, #24]
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	e000e100 	.word	0xe000e100
 8005b24:	e000ed00 	.word	0xe000ed00

08005b28 <NVIC_EncodePriority>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b089      	sub	sp, #36	; 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f1c3 0307 	rsb	r3, r3, #7
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	bf28      	it	cs
 8005b46:	2304      	movcs	r3, #4
 8005b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	2b06      	cmp	r3, #6
 8005b50:	d902      	bls.n	8005b58 <NVIC_EncodePriority+0x30>
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	3b03      	subs	r3, #3
 8005b56:	e000      	b.n	8005b5a <NVIC_EncodePriority+0x32>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	43da      	mvns	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b70:	f04f 31ff 	mov.w	r1, #4294967295
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	43d9      	mvns	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b80:	4313      	orrs	r3, r2
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3724      	adds	r7, #36	; 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ba0:	d301      	bcc.n	8005ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e00f      	b.n	8005bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <SysTick_Config+0x40>)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bae:	210f      	movs	r1, #15
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	f7ff ff8e 	bl	8005ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <SysTick_Config+0x40>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bbe:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <SysTick_Config+0x40>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	e000e010 	.word	0xe000e010

08005bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff ff29 	bl	8005a34 <__NVIC_SetPriorityGrouping>
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b086      	sub	sp, #24
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
 8005bf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bf8:	f7ff ff40 	bl	8005a7c <__NVIC_GetPriorityGrouping>
 8005bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	f7ff ff90 	bl	8005b28 <NVIC_EncodePriority>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff ff5f 	bl	8005ad4 <__NVIC_SetPriority>
}
 8005c16:	bf00      	nop
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	4603      	mov	r3, r0
 8005c26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff ff33 	bl	8005a98 <__NVIC_EnableIRQ>
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff ffa4 	bl	8005b90 <SysTick_Config>
 8005c48:	4603      	mov	r3, r0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005c58:	f3bf 8f5f 	dmb	sy
}
 8005c5c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <HAL_MPU_Disable+0x28>)
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	4a06      	ldr	r2, [pc, #24]	; (8005c7c <HAL_MPU_Disable+0x28>)
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c68:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_MPU_Disable+0x2c>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	605a      	str	r2, [r3, #4]
}
 8005c70:	bf00      	nop
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	e000ed00 	.word	0xe000ed00
 8005c80:	e000ed90 	.word	0xe000ed90

08005c84 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005c8c:	4a0b      	ldr	r2, [pc, #44]	; (8005cbc <HAL_MPU_Enable+0x38>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f043 0301 	orr.w	r3, r3, #1
 8005c94:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <HAL_MPU_Enable+0x3c>)
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <HAL_MPU_Enable+0x3c>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005ca2:	f3bf 8f4f 	dsb	sy
}
 8005ca6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ca8:	f3bf 8f6f 	isb	sy
}
 8005cac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	e000ed90 	.word	0xe000ed90
 8005cc0:	e000ed00 	.word	0xe000ed00

08005cc4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	785a      	ldrb	r2, [r3, #1]
 8005cd0:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <HAL_MPU_ConfigRegion+0x84>)
 8005cd2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d029      	beq.n	8005d30 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005cdc:	4a1a      	ldr	r2, [pc, #104]	; (8005d48 <HAL_MPU_ConfigRegion+0x84>)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7b1b      	ldrb	r3, [r3, #12]
 8005ce8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	7adb      	ldrb	r3, [r3, #11]
 8005cee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005cf0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7a9b      	ldrb	r3, [r3, #10]
 8005cf6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005cf8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	7b5b      	ldrb	r3, [r3, #13]
 8005cfe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	7b9b      	ldrb	r3, [r3, #14]
 8005d06:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	7bdb      	ldrb	r3, [r3, #15]
 8005d0e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7a5b      	ldrb	r3, [r3, #9]
 8005d16:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7a1b      	ldrb	r3, [r3, #8]
 8005d1e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d20:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d28:	4a07      	ldr	r2, [pc, #28]	; (8005d48 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d2a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d2c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005d2e:	e005      	b.n	8005d3c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <HAL_MPU_ConfigRegion+0x84>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005d36:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <HAL_MPU_ConfigRegion+0x84>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	611a      	str	r2, [r3, #16]
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	e000ed90 	.word	0xe000ed90

08005d4c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e014      	b.n	8005d88 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	791b      	ldrb	r3, [r3, #4]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fd fa94 	bl	800329c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	795b      	ldrb	r3, [r3, #5]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_DAC_Start+0x16>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e040      	b.n	8005e28 <HAL_DAC_Start+0x98>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6819      	ldr	r1, [r3, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	409a      	lsls	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10f      	bne.n	8005df0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d11d      	bne.n	8005e1a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	e014      	b.n	8005e1a <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f003 0310 	and.w	r3, r3, #16
 8005e00:	2102      	movs	r1, #2
 8005e02:	fa01 f303 	lsl.w	r3, r1, r3
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d107      	bne.n	8005e1a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0202 	orr.w	r2, r2, #2
 8005e18:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d105      	bne.n	8005e5e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4413      	add	r3, r2
 8005e58:	3308      	adds	r3, #8
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e004      	b.n	8005e68 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4413      	add	r3, r2
 8005e64:	3314      	adds	r3, #20
 8005e66:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	795b      	ldrb	r3, [r3, #5]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_DAC_ConfigChannel+0x18>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e12a      	b.n	80060ee <HAL_DAC_ConfigChannel+0x26e>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	f040 8081 	bne.w	8005fb0 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005eae:	f7fd fff5 	bl	8003e9c <HAL_GetTick>
 8005eb2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d140      	bne.n	8005f3c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005eba:	e018      	b.n	8005eee <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ebc:	f7fd ffee 	bl	8003e9c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d911      	bls.n	8005eee <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ed0:	4b89      	ldr	r3, [pc, #548]	; (80060f8 <HAL_DAC_ConfigChannel+0x278>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f043 0208 	orr.w	r2, r3, #8
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e0ff      	b.n	80060ee <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef4:	4b80      	ldr	r3, [pc, #512]	; (80060f8 <HAL_DAC_ConfigChannel+0x278>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1df      	bne.n	8005ebc <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005efc:	2001      	movs	r0, #1
 8005efe:	f7fd ffd9 	bl	8003eb4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	6992      	ldr	r2, [r2, #24]
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8005f0c:	e023      	b.n	8005f56 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f0e:	f7fd ffc5 	bl	8003e9c <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d90f      	bls.n	8005f3c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	da0a      	bge.n	8005f3c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f043 0208 	orr.w	r2, r3, #8
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2203      	movs	r2, #3
 8005f36:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e0d8      	b.n	80060ee <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dbe3      	blt.n	8005f0e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005f46:	2001      	movs	r0, #1
 8005f48:	f7fd ffb4 	bl	8003eb4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	6992      	ldr	r2, [r2, #24]
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005f66:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	ea02 0103 	and.w	r1, r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	409a      	lsls	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	21ff      	movs	r1, #255	; 0xff
 8005f92:	fa01 f303 	lsl.w	r3, r1, r3
 8005f96:	43db      	mvns	r3, r3
 8005f98:	ea02 0103 	and.w	r1, r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	6a1a      	ldr	r2, [r3, #32]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	409a      	lsls	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d11d      	bne.n	8005ff4 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	221f      	movs	r2, #31
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2207      	movs	r2, #7
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	43db      	mvns	r3, r3
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4013      	ands	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d102      	bne.n	800601e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	e00f      	b.n	800603e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d102      	bne.n	800602c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006026:	2301      	movs	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	e008      	b.n	800603e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006034:	2301      	movs	r3, #1
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	e001      	b.n	800603e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6819      	ldr	r1, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	43da      	mvns	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	400a      	ands	r2, r1
 8006084:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4013      	ands	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	22c0      	movs	r2, #192	; 0xc0
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	43da      	mvns	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	400a      	ands	r2, r1
 80060de:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20008000 	.word	0x20008000

080060fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e0cf      	b.n	80062ae <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2223      	movs	r2, #35	; 0x23
 800611c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f009 f851 	bl	800f1c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006126:	4b64      	ldr	r3, [pc, #400]	; (80062b8 <HAL_ETH_Init+0x1bc>)
 8006128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800612c:	4a62      	ldr	r2, [pc, #392]	; (80062b8 <HAL_ETH_Init+0x1bc>)
 800612e:	f043 0302 	orr.w	r3, r3, #2
 8006132:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006136:	4b60      	ldr	r3, [pc, #384]	; (80062b8 <HAL_ETH_Init+0x1bc>)
 8006138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	7a1b      	ldrb	r3, [r3, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d103      	bne.n	8006154 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800614c:	2000      	movs	r0, #0
 800614e:	f7fd fee1 	bl	8003f14 <HAL_SYSCFG_ETHInterfaceSelect>
 8006152:	e003      	b.n	800615c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006154:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006158:	f7fd fedc 	bl	8003f14 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800615c:	4b57      	ldr	r3, [pc, #348]	; (80062bc <HAL_ETH_Init+0x1c0>)
 800615e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006176:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006178:	f7fd fe90 	bl	8003e9c <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800617e:	e011      	b.n	80061a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006180:	f7fd fe8c 	bl	8003e9c <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800618e:	d909      	bls.n	80061a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2204      	movs	r2, #4
 8006194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	22e0      	movs	r2, #224	; 0xe0
 800619c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e084      	b.n	80062ae <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e4      	bne.n	8006180 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fcd4 	bl	8006b64 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80061bc:	f004 fb26 	bl	800a80c <HAL_RCC_GetHCLKFreq>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4a3f      	ldr	r2, [pc, #252]	; (80062c0 <HAL_ETH_Init+0x1c4>)
 80061c4:	fba2 2303 	umull	r2, r3, r2, r3
 80061c8:	0c9a      	lsrs	r2, r3, #18
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3a01      	subs	r2, #1
 80061d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 febf 	bl	8006f58 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80061e6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061f6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	22e0      	movs	r2, #224	; 0xe0
 8006212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e049      	b.n	80062ae <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006222:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006226:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <HAL_ETH_Init+0x1c8>)
 8006228:	4013      	ands	r3, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6952      	ldr	r2, [r2, #20]
 800622e:	0051      	lsls	r1, r2, #1
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	430b      	orrs	r3, r1
 8006236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800623a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 ff27 	bl	8007092 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 ff6d 	bl	8007124 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	3305      	adds	r3, #5
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	021a      	lsls	r2, r3, #8
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	3304      	adds	r3, #4
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	4619      	mov	r1, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	3303      	adds	r3, #3
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	061a      	lsls	r2, r3, #24
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	3302      	adds	r3, #2
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	3301      	adds	r3, #1
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006288:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006296:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006298:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2210      	movs	r2, #16
 80062a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	58024400 	.word	0x58024400
 80062bc:	58000400 	.word	0x58000400
 80062c0:	431bde83 	.word	0x431bde83
 80062c4:	ffff8001 	.word	0xffff8001

080062c8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d153      	bne.n	8006382 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2223      	movs	r2, #35	; 0x23
 80062de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2204      	movs	r2, #4
 80062e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f936 	bl	800655a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0202 	orr.w	r2, r2, #2
 80062fc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800632a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800633a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006346:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006356:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006362:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800636e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006372:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2223      	movs	r2, #35	; 0x23
 800637a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	e000      	b.n	8006384 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
  }
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800639a:	2b23      	cmp	r3, #35	; 0x23
 800639c:	d13f      	bne.n	800641e <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2223      	movs	r2, #35	; 0x23
 80063a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	f023 0301 	bic.w	r3, r3, #1
 80063ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063be:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	f023 0301 	bic.w	r3, r3, #1
 80063d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063da:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0202 	bic.w	r2, r2, #2
 8006410:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2210      	movs	r2, #16
 8006416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e000      	b.n	8006420 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
  }
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006444:	f043 0201 	orr.w	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e07f      	b.n	8006552 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006458:	2b23      	cmp	r3, #35	; 0x23
 800645a:	d179      	bne.n	8006550 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800645c:	2200      	movs	r2, #0
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 febd 	bl	80071e0 <ETH_Prepare_Tx_Descriptors>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d009      	beq.n	8006480 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006472:	f043 0202 	orr.w	r2, r3, #2
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e068      	b.n	8006552 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8006480:	f3bf 8f4f 	dsb	sy
}
 8006484:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3206      	adds	r2, #6
 800648e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006492:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	629a      	str	r2, [r3, #40]	; 0x28
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d904      	bls.n	80064b0 <HAL_ETH_Transmit+0x84>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	1f1a      	subs	r2, r3, #4
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3106      	adds	r1, #6
 80064bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80064c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064c4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80064c8:	f7fd fce8 	bl	8003e9c <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80064ce:	e039      	b.n	8006544 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80064dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d012      	beq.n	800650a <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ea:	f043 0208 	orr.w	r2, r3, #8
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fc:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e023      	b.n	8006552 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d018      	beq.n	8006544 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fd fcc3 	bl	8003e9c <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <HAL_ETH_Transmit+0xfc>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10d      	bne.n	8006544 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652e:	f043 0204 	orr.w	r2, r3, #4
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800653e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e006      	b.n	8006552 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	dbc1      	blt.n	80064d0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e000      	b.n	8006552 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
  }
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b088      	sub	sp, #32
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8006566:	2301      	movs	r3, #1
 8006568:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800656e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	3212      	adds	r2, #18
 8006576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006580:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8006582:	e03b      	b.n	80065fc <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d112      	bne.n	80065b2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800658c:	f107 030c 	add.w	r3, r7, #12
 8006590:	4618      	mov	r0, r3
 8006592:	f008 ffc1 	bl	800f518 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	74fb      	strb	r3, [r7, #19]
 80065a0:	e007      	b.n	80065b2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	461a      	mov	r2, r3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	461a      	mov	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80065b2:	7cfb      	ldrb	r3, [r7, #19]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d021      	beq.n	80065fc <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80065b8:	f3bf 8f5f 	dmb	sy
}
 80065bc:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80065cc:	60da      	str	r2, [r3, #12]
 80065ce:	e003      	b.n	80065d8 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80065d6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	3301      	adds	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d902      	bls.n	80065ea <ETH_UpdateDescriptor+0x90>
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	3b04      	subs	r3, #4
 80065e8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	3212      	adds	r2, #18
 80065f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f4:	617b      	str	r3, [r7, #20]
      desccount--;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <ETH_UpdateDescriptor+0xae>
 8006602:	7cfb      	ldrb	r3, [r7, #19]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1bd      	bne.n	8006584 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	429a      	cmp	r2, r3
 8006610:	d00d      	beq.n	800662e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661a:	461a      	mov	r2, r3
 800661c:	2300      	movs	r3, #0
 800661e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800662e:	bf00      	nop
 8006630:	3720      	adds	r7, #32
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e03e      	b.n	80066d6 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006660:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	055b      	lsls	r3, r3, #21
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f043 030c 	orr.w	r3, r3, #12
 8006684:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006698:	f7fd fc00 	bl	8003e9c <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800669e:	e009      	b.n	80066b4 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80066a0:	f7fd fbfc 	bl	8003e9c <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ae:	d901      	bls.n	80066b4 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e010      	b.n	80066d6 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1ed      	bne.n	80066a0 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e03c      	b.n	800677c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800670a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	055b      	lsls	r3, r3, #21
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	041b      	lsls	r3, r3, #16
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 030c 	bic.w	r3, r3, #12
 800672e:	f043 0304 	orr.w	r3, r3, #4
 8006732:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	b29a      	uxth	r2, r3
 8006740:	4b10      	ldr	r3, [pc, #64]	; (8006784 <HAL_ETH_WritePHYRegister+0xa4>)
 8006742:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006746:	4a0f      	ldr	r2, [pc, #60]	; (8006784 <HAL_ETH_WritePHYRegister+0xa4>)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800674e:	f7fd fba5 	bl	8003e9c <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006754:	e009      	b.n	800676a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006756:	f7fd fba1 	bl	8003e9c <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006764:	d901      	bls.n	800676a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e008      	b.n	800677c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1ed      	bne.n	8006756 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40028000 	.word	0x40028000

08006788 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e1c3      	b.n	8006b24 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 020c 	and.w	r2, r3, #12
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf0c      	ite	eq
 80067e2:	2301      	moveq	r3, #1
 80067e4:	2300      	movne	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bf14      	ite	ne
 80067fe:	2301      	movne	r3, #1
 8006800:	2300      	moveq	r3, #0
 8006802:	b2db      	uxtb	r3, r3
 8006804:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006814:	2b00      	cmp	r3, #0
 8006816:	bf0c      	ite	eq
 8006818:	2301      	moveq	r3, #1
 800681a:	2300      	movne	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800682a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800682e:	2b00      	cmp	r3, #0
 8006830:	bf14      	ite	ne
 8006832:	2301      	movne	r3, #1
 8006834:	2300      	moveq	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf14      	ite	ne
 800684c:	2301      	movne	r3, #1
 800684e:	2300      	moveq	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800687e:	2b00      	cmp	r3, #0
 8006880:	bf14      	ite	ne
 8006882:	2301      	movne	r3, #1
 8006884:	2300      	moveq	r3, #0
 8006886:	b2db      	uxtb	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006898:	2b00      	cmp	r3, #0
 800689a:	bf0c      	ite	eq
 800689c:	2301      	moveq	r3, #1
 800689e:	2300      	movne	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf0c      	ite	eq
 80068b6:	2301      	moveq	r3, #1
 80068b8:	2300      	movne	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bf14      	ite	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	2300      	moveq	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	461a      	mov	r2, r3
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bf14      	ite	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	2300      	moveq	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006900:	2b00      	cmp	r3, #0
 8006902:	bf14      	ite	ne
 8006904:	2301      	movne	r3, #1
 8006906:	2300      	moveq	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	461a      	mov	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800691a:	2b00      	cmp	r3, #0
 800691c:	bf14      	ite	ne
 800691e:	2301      	movne	r3, #1
 8006920:	2300      	moveq	r3, #0
 8006922:	b2db      	uxtb	r3, r3
 8006924:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	bf14      	ite	ne
 8006946:	2301      	movne	r3, #1
 8006948:	2300      	moveq	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006978:	2b00      	cmp	r3, #0
 800697a:	bf0c      	ite	eq
 800697c:	2301      	moveq	r3, #1
 800697e:	2300      	movne	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf14      	ite	ne
 8006998:	2301      	movne	r3, #1
 800699a:	2300      	moveq	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80069ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf14      	ite	ne
 80069b4:	2301      	movne	r3, #1
 80069b6:	2300      	moveq	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	0e5b      	lsrs	r3, r3, #25
 80069e6:	f003 021f 	and.w	r2, r3, #31
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf14      	ite	ne
 8006a26:	2301      	movne	r3, #1
 8006a28:	2300      	moveq	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bf0c      	ite	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	2300      	movne	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bf14      	ite	ne
 8006a7c:	2301      	movne	r3, #1
 8006a7e:	2300      	moveq	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a92:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bf14      	ite	ne
 8006a9a:	2301      	movne	r3, #1
 8006a9c:	2300      	moveq	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006ab0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006ac0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bf14      	ite	ne
 8006ad8:	2301      	movne	r3, #1
 8006ada:	2300      	moveq	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bf14      	ite	ne
 8006af6:	2301      	movne	r3, #1
 8006af8:	2300      	moveq	r3, #0
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8006b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf0c      	ite	eq
 8006b14:	2301      	moveq	r3, #1
 8006b16:	2300      	movne	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e00b      	b.n	8006b5c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d105      	bne.n	8006b5a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f85f 	bl	8006c14 <ETH_SetMACConfig>

    return HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	e000      	b.n	8006b5c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
  }
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006b7e:	f003 fe45 	bl	800a80c <HAL_RCC_GetHCLKFreq>
 8006b82:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4a1e      	ldr	r2, [pc, #120]	; (8006c00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d908      	bls.n	8006b9e <HAL_ETH_SetMDIOClockRange+0x3a>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d804      	bhi.n	8006b9e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	e027      	b.n	8006bee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d908      	bls.n	8006bb8 <HAL_ETH_SetMDIOClockRange+0x54>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d204      	bcs.n	8006bb8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	e01a      	b.n	8006bee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4a13      	ldr	r2, [pc, #76]	; (8006c08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d303      	bcc.n	8006bc8 <HAL_ETH_SetMDIOClockRange+0x64>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4a12      	ldr	r2, [pc, #72]	; (8006c0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d911      	bls.n	8006bec <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4a10      	ldr	r2, [pc, #64]	; (8006c0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d908      	bls.n	8006be2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d804      	bhi.n	8006be2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	e005      	b.n	8006bee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e000      	b.n	8006bee <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006bec:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006bf8:	bf00      	nop
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	01312cff 	.word	0x01312cff
 8006c04:	02160ebf 	.word	0x02160ebf
 8006c08:	03938700 	.word	0x03938700
 8006c0c:	05f5e0ff 	.word	0x05f5e0ff
 8006c10:	08f0d17f 	.word	0x08f0d17f

08006c14 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006c26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	791b      	ldrb	r3, [r3, #4]
 8006c2c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006c2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	7b1b      	ldrb	r3, [r3, #12]
 8006c34:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006c36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	7b5b      	ldrb	r3, [r3, #13]
 8006c3c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006c3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	7b9b      	ldrb	r3, [r3, #14]
 8006c44:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006c46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	7bdb      	ldrb	r3, [r3, #15]
 8006c4c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006c4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	7c12      	ldrb	r2, [r2, #16]
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	d102      	bne.n	8006c5e <ETH_SetMACConfig+0x4a>
 8006c58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006c5c:	e000      	b.n	8006c60 <ETH_SetMACConfig+0x4c>
 8006c5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006c60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	7c52      	ldrb	r2, [r2, #17]
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	d102      	bne.n	8006c70 <ETH_SetMACConfig+0x5c>
 8006c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c6e:	e000      	b.n	8006c72 <ETH_SetMACConfig+0x5e>
 8006c70:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006c72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	7c9b      	ldrb	r3, [r3, #18]
 8006c78:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006c7a:	431a      	orrs	r2, r3
               macconf->Speed |
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006c80:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006c86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	7f1b      	ldrb	r3, [r3, #28]
 8006c8c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006c8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	7f5b      	ldrb	r3, [r3, #29]
 8006c94:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006c96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	7f92      	ldrb	r2, [r2, #30]
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	d102      	bne.n	8006ca6 <ETH_SetMACConfig+0x92>
 8006ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ca4:	e000      	b.n	8006ca8 <ETH_SetMACConfig+0x94>
 8006ca6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006ca8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	7fdb      	ldrb	r3, [r3, #31]
 8006cae:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006cb0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006cb8:	2a00      	cmp	r2, #0
 8006cba:	d102      	bne.n	8006cc2 <ETH_SetMACConfig+0xae>
 8006cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cc0:	e000      	b.n	8006cc4 <ETH_SetMACConfig+0xb0>
 8006cc2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006cc4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006cca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cd2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006cd4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4b56      	ldr	r3, [pc, #344]	; (8006e40 <ETH_SetMACConfig+0x22c>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	68f9      	ldr	r1, [r7, #12]
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cfe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006d00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d08:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d12:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006d14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	d102      	bne.n	8006d26 <ETH_SetMACConfig+0x112>
 8006d20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d24:	e000      	b.n	8006d28 <ETH_SetMACConfig+0x114>
 8006d26:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006d28:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	4b42      	ldr	r3, [pc, #264]	; (8006e44 <ETH_SetMACConfig+0x230>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	68f9      	ldr	r1, [r7, #12]
 8006d42:	430b      	orrs	r3, r1
 8006d44:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d4c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	4b3a      	ldr	r3, [pc, #232]	; (8006e48 <ETH_SetMACConfig+0x234>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	68f9      	ldr	r1, [r7, #12]
 8006d66:	430b      	orrs	r3, r1
 8006d68:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006d70:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006d76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	d101      	bne.n	8006d86 <ETH_SetMACConfig+0x172>
 8006d82:	2280      	movs	r2, #128	; 0x80
 8006d84:	e000      	b.n	8006d88 <ETH_SetMACConfig+0x174>
 8006d86:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006d88:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d8e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006d90:	4313      	orrs	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d9a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006d9e:	4013      	ands	r3, r2
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6812      	ldr	r2, [r2, #0]
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	430b      	orrs	r3, r1
 8006da8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006db0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006db8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc6:	f023 0103 	bic.w	r1, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006dde:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006dfa:	2a00      	cmp	r2, #0
 8006dfc:	d101      	bne.n	8006e02 <ETH_SetMACConfig+0x1ee>
 8006dfe:	2240      	movs	r2, #64	; 0x40
 8006e00:	e000      	b.n	8006e04 <ETH_SetMACConfig+0x1f0>
 8006e02:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006e04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006e0c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006e0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006e16:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006e24:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	00048083 	.word	0x00048083
 8006e44:	c0f88000 	.word	0xc0f88000
 8006e48:	fffffef0 	.word	0xfffffef0

08006e4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	4b38      	ldr	r3, [pc, #224]	; (8006f44 <ETH_SetDMAConfig+0xf8>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	6811      	ldr	r1, [r2, #0]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e72:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	791b      	ldrb	r3, [r3, #4]
 8006e78:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006e7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	7b1b      	ldrb	r3, [r3, #12]
 8006e84:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	4b2c      	ldr	r3, [pc, #176]	; (8006f48 <ETH_SetDMAConfig+0xfc>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6812      	ldr	r2, [r2, #0]
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ea4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	7b5b      	ldrb	r3, [r3, #13]
 8006eaa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006ec0:	4b22      	ldr	r3, [pc, #136]	; (8006f4c <ETH_SetDMAConfig+0x100>)
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	68f9      	ldr	r1, [r7, #12]
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ed0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	7d1b      	ldrb	r3, [r3, #20]
 8006edc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006ede:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	7f5b      	ldrb	r3, [r3, #29]
 8006ee4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006ef6:	4b16      	ldr	r3, [pc, #88]	; (8006f50 <ETH_SetDMAConfig+0x104>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	430b      	orrs	r3, r1
 8006f02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f06:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	7f1b      	ldrb	r3, [r3, #28]
 8006f0e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006f24:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <ETH_SetDMAConfig+0x108>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	68f9      	ldr	r1, [r7, #12]
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f34:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006f38:	bf00      	nop
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	ffff87fd 	.word	0xffff87fd
 8006f48:	ffff2ffe 	.word	0xffff2ffe
 8006f4c:	fffec000 	.word	0xfffec000
 8006f50:	ffc0efef 	.word	0xffc0efef
 8006f54:	7fc0ffff 	.word	0x7fc0ffff

08006f58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b0a4      	sub	sp, #144	; 0x90
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006f66:	2300      	movs	r3, #0
 8006f68:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f98:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006fb0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006fb4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006ff0:	2320      	movs	r3, #32
 8006ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007002:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800700c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007014:	2302      	movs	r3, #2
 8007016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800701a:	2300      	movs	r3, #0
 800701c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007020:	2300      	movs	r3, #0
 8007022:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8007032:	2300      	movs	r3, #0
 8007034:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800703c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fde6 	bl	8006c14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007048:	2301      	movs	r3, #1
 800704a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800704c:	2301      	movs	r3, #1
 800704e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007050:	2300      	movs	r3, #0
 8007052:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007054:	2300      	movs	r3, #0
 8007056:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800705a:	2300      	movs	r3, #0
 800705c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800705e:	2300      	movs	r3, #0
 8007060:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007062:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007066:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007068:	2300      	movs	r3, #0
 800706a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800706c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007070:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007072:	2300      	movs	r3, #0
 8007074:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007078:	f44f 7306 	mov.w	r3, #536	; 0x218
 800707c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800707e:	f107 0308 	add.w	r3, r7, #8
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff fee1 	bl	8006e4c <ETH_SetDMAConfig>
}
 800708a:	bf00      	nop
 800708c:	3790      	adds	r7, #144	; 0x90
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007092:	b480      	push	{r7}
 8007094:	b085      	sub	sp, #20
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e01d      	b.n	80070dc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68d9      	ldr	r1, [r3, #12]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4613      	mov	r3, r2
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4413      	add	r3, r2
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	440b      	add	r3, r1
 80070b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2200      	movs	r2, #0
 80070bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	3206      	adds	r2, #6
 80070d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d9de      	bls.n	80070a0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f0:	461a      	mov	r2, r3
 80070f2:	2303      	movs	r3, #3
 80070f4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007104:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007114:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007118:	bf00      	nop
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800712c:	2300      	movs	r3, #0
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	e023      	b.n	800717a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6919      	ldr	r1, [r3, #16]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4613      	mov	r3, r2
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	4413      	add	r3, r2
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	440b      	add	r3, r1
 8007142:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2200      	movs	r2, #0
 800714e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2200      	movs	r2, #0
 800715a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2200      	movs	r2, #0
 8007160:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2200      	movs	r2, #0
 8007166:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	3212      	adds	r2, #18
 8007170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d9d8      	bls.n	8007132 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a6:	461a      	mov	r2, r3
 80071a8:	2303      	movs	r3, #3
 80071aa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80071d2:	bf00      	nop
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
	...

080071e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b08d      	sub	sp, #52	; 0x34
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3318      	adds	r3, #24
 80071f0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800721e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007222:	d007      	beq.n	8007234 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	3304      	adds	r3, #4
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8007234:	2302      	movs	r3, #2
 8007236:	e259      	b.n	80076ec <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d044      	beq.n	80072ce <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	4b75      	ldr	r3, [pc, #468]	; (8007420 <ETH_Prepare_Tx_Descriptors+0x240>)
 800724a:	4013      	ands	r3, r2
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007250:	431a      	orrs	r2, r3
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007270:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d027      	beq.n	80072ce <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	b29a      	uxth	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	041b      	lsls	r3, r3, #16
 800728a:	431a      	orrs	r2, r3
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	431a      	orrs	r2, r3
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072bc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80072cc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	4b51      	ldr	r3, [pc, #324]	; (8007424 <ETH_Prepare_Tx_Descriptors+0x244>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	6992      	ldr	r2, [r2, #24]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0310 	and.w	r3, r3, #16
 800730c:	2b00      	cmp	r3, #0
 800730e:	d036      	beq.n	800737e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800731c:	f3bf 8f5f 	dmb	sy
}
 8007320:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	3301      	adds	r3, #1
 8007332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	2b03      	cmp	r3, #3
 8007338:	d902      	bls.n	8007340 <ETH_Prepare_Tx_Descriptors+0x160>
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	3b04      	subs	r3, #4
 800733e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	3301      	adds	r3, #1
 800734e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800735c:	d10f      	bne.n	800737e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007366:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8007368:	f3bf 8f5f 	dmb	sy
}
 800736c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800737a:	2302      	movs	r3, #2
 800737c:	e1b6      	b.n	80076ec <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	3301      	adds	r3, #1
 8007382:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	4b24      	ldr	r3, [pc, #144]	; (8007424 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007394:	4013      	ands	r3, r2
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	6852      	ldr	r2, [r2, #4]
 800739a:	431a      	orrs	r2, r3
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d012      	beq.n	80073ce <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <ETH_Prepare_Tx_Descriptors+0x248>)
 80073be:	4013      	ands	r3, r2
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	6852      	ldr	r2, [r2, #4]
 80073c4:	0412      	lsls	r2, r2, #16
 80073c6:	431a      	orrs	r2, r3
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	609a      	str	r2, [r3, #8]
 80073cc:	e008      	b.n	80073e0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	2200      	movs	r2, #0
 80073d2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	4b13      	ldr	r3, [pc, #76]	; (8007428 <ETH_Prepare_Tx_Descriptors+0x248>)
 80073da:	4013      	ands	r3, r2
 80073dc:	6a3a      	ldr	r2, [r7, #32]
 80073de:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d021      	beq.n	8007430 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	04db      	lsls	r3, r3, #19
 80073fa:	431a      	orrs	r2, r3
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	4b09      	ldr	r3, [pc, #36]	; (800742c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8007406:	4013      	ands	r3, r2
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	69d2      	ldr	r2, [r2, #28]
 800740c:	431a      	orrs	r2, r3
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	60da      	str	r2, [r3, #12]
 800741e:	e02e      	b.n	800747e <ETH_Prepare_Tx_Descriptors+0x29e>
 8007420:	ffff0000 	.word	0xffff0000
 8007424:	ffffc000 	.word	0xffffc000
 8007428:	c000ffff 	.word	0xc000ffff
 800742c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	4b7b      	ldr	r3, [pc, #492]	; (8007624 <ETH_Prepare_Tx_Descriptors+0x444>)
 8007436:	4013      	ands	r3, r2
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	6852      	ldr	r2, [r2, #4]
 800743c:	431a      	orrs	r2, r3
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d008      	beq.n	8007460 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	431a      	orrs	r2, r3
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	431a      	orrs	r2, r3
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0304 	and.w	r3, r3, #4
 8007486:	2b00      	cmp	r3, #0
 8007488:	d008      	beq.n	800749c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	431a      	orrs	r2, r3
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80074b4:	f3bf 8f5f 	dmb	sy
}
 80074b8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80da 	beq.w	8007688 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	431a      	orrs	r2, r3
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80074e6:	e0cf      	b.n	8007688 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	3301      	adds	r3, #1
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d902      	bls.n	8007506 <ETH_Prepare_Tx_Descriptors+0x326>
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	3b04      	subs	r3, #4
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800750a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007528:	d007      	beq.n	800753a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	3304      	adds	r3, #4
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d029      	beq.n	800758e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007546:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8007548:	2300      	movs	r3, #0
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28
 800754c:	e019      	b.n	8007582 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800754e:	f3bf 8f5f 	dmb	sy
}
 8007552:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	3301      	adds	r3, #1
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	2b03      	cmp	r3, #3
 800756a:	d902      	bls.n	8007572 <ETH_Prepare_Tx_Descriptors+0x392>
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	3b04      	subs	r3, #4
 8007570:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	3301      	adds	r3, #1
 8007580:	62bb      	str	r3, [r7, #40]	; 0x28
 8007582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	429a      	cmp	r2, r3
 8007588:	d3e1      	bcc.n	800754e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800758a:	2302      	movs	r3, #2
 800758c:	e0ae      	b.n	80076ec <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	3301      	adds	r3, #1
 8007592:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	4b1f      	ldr	r3, [pc, #124]	; (8007628 <ETH_Prepare_Tx_Descriptors+0x448>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	6852      	ldr	r2, [r2, #4]
 80075b0:	431a      	orrs	r2, r3
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d012      	beq.n	80075e4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	4b16      	ldr	r3, [pc, #88]	; (800762c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	6852      	ldr	r2, [r2, #4]
 80075da:	0412      	lsls	r2, r2, #16
 80075dc:	431a      	orrs	r2, r3
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	609a      	str	r2, [r3, #8]
 80075e2:	e008      	b.n	80075f6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	2200      	movs	r2, #0
 80075e8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	4b0f      	ldr	r3, [pc, #60]	; (800762c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	6a3a      	ldr	r2, [r7, #32]
 80075f4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d018      	beq.n	8007634 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <ETH_Prepare_Tx_Descriptors+0x450>)
 8007608:	4013      	ands	r3, r2
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	69d2      	ldr	r2, [r2, #28]
 800760e:	431a      	orrs	r2, r3
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	60da      	str	r2, [r3, #12]
 8007620:	e020      	b.n	8007664 <ETH_Prepare_Tx_Descriptors+0x484>
 8007622:	bf00      	nop
 8007624:	ffff8000 	.word	0xffff8000
 8007628:	ffffc000 	.word	0xffffc000
 800762c:	c000ffff 	.word	0xc000ffff
 8007630:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	4b2f      	ldr	r3, [pc, #188]	; (80076f8 <ETH_Prepare_Tx_Descriptors+0x518>)
 800763a:	4013      	ands	r3, r2
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	6852      	ldr	r2, [r2, #4]
 8007640:	431a      	orrs	r2, r3
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d008      	beq.n	8007664 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	431a      	orrs	r2, r3
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	3301      	adds	r3, #1
 8007668:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800766a:	f3bf 8f5f 	dmb	sy
}
 800766e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f47f af2b 	bne.w	80074e8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d006      	beq.n	80076a6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	609a      	str	r2, [r3, #8]
 80076a4:	e005      	b.n	80076b2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c2:	6979      	ldr	r1, [r7, #20]
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	3304      	adds	r3, #4
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	440b      	add	r3, r1
 80076cc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80076d4:	b672      	cpsid	i
}
 80076d6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	4413      	add	r3, r2
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80076e6:	b662      	cpsie	i
}
 80076e8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3734      	adds	r7, #52	; 0x34
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	ffff8000 	.word	0xffff8000

080076fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b089      	sub	sp, #36	; 0x24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800770a:	4b89      	ldr	r3, [pc, #548]	; (8007930 <HAL_GPIO_Init+0x234>)
 800770c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800770e:	e194      	b.n	8007a3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	2101      	movs	r1, #1
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	fa01 f303 	lsl.w	r3, r1, r3
 800771c:	4013      	ands	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8186 	beq.w	8007a34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d005      	beq.n	8007740 <HAL_GPIO_Init+0x44>
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d130      	bne.n	80077a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	2203      	movs	r2, #3
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	43db      	mvns	r3, r3
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	4013      	ands	r3, r2
 8007756:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	4313      	orrs	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007776:	2201      	movs	r2, #1
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	4013      	ands	r3, r2
 8007784:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	091b      	lsrs	r3, r3, #4
 800778c:	f003 0201 	and.w	r2, r3, #1
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	4313      	orrs	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d017      	beq.n	80077de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	2203      	movs	r2, #3
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	4013      	ands	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d123      	bne.n	8007832 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	08da      	lsrs	r2, r3, #3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3208      	adds	r2, #8
 80077f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	220f      	movs	r2, #15
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	43db      	mvns	r3, r3
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	4013      	ands	r3, r2
 800780c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	4313      	orrs	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	08da      	lsrs	r2, r3, #3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3208      	adds	r2, #8
 800782c:	69b9      	ldr	r1, [r7, #24]
 800782e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	2203      	movs	r2, #3
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	43db      	mvns	r3, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	4013      	ands	r3, r2
 8007848:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f003 0203 	and.w	r2, r3, #3
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4313      	orrs	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80e0 	beq.w	8007a34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007874:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <HAL_GPIO_Init+0x238>)
 8007876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800787a:	4a2e      	ldr	r2, [pc, #184]	; (8007934 <HAL_GPIO_Init+0x238>)
 800787c:	f043 0302 	orr.w	r3, r3, #2
 8007880:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007884:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <HAL_GPIO_Init+0x238>)
 8007886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007892:	4a29      	ldr	r2, [pc, #164]	; (8007938 <HAL_GPIO_Init+0x23c>)
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	089b      	lsrs	r3, r3, #2
 8007898:	3302      	adds	r3, #2
 800789a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800789e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	220f      	movs	r2, #15
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	43db      	mvns	r3, r3
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	4013      	ands	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a20      	ldr	r2, [pc, #128]	; (800793c <HAL_GPIO_Init+0x240>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d052      	beq.n	8007964 <HAL_GPIO_Init+0x268>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a1f      	ldr	r2, [pc, #124]	; (8007940 <HAL_GPIO_Init+0x244>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d031      	beq.n	800792a <HAL_GPIO_Init+0x22e>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a1e      	ldr	r2, [pc, #120]	; (8007944 <HAL_GPIO_Init+0x248>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d02b      	beq.n	8007926 <HAL_GPIO_Init+0x22a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a1d      	ldr	r2, [pc, #116]	; (8007948 <HAL_GPIO_Init+0x24c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d025      	beq.n	8007922 <HAL_GPIO_Init+0x226>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a1c      	ldr	r2, [pc, #112]	; (800794c <HAL_GPIO_Init+0x250>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d01f      	beq.n	800791e <HAL_GPIO_Init+0x222>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a1b      	ldr	r2, [pc, #108]	; (8007950 <HAL_GPIO_Init+0x254>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d019      	beq.n	800791a <HAL_GPIO_Init+0x21e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <HAL_GPIO_Init+0x258>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d013      	beq.n	8007916 <HAL_GPIO_Init+0x21a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a19      	ldr	r2, [pc, #100]	; (8007958 <HAL_GPIO_Init+0x25c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00d      	beq.n	8007912 <HAL_GPIO_Init+0x216>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a18      	ldr	r2, [pc, #96]	; (800795c <HAL_GPIO_Init+0x260>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d007      	beq.n	800790e <HAL_GPIO_Init+0x212>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a17      	ldr	r2, [pc, #92]	; (8007960 <HAL_GPIO_Init+0x264>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d101      	bne.n	800790a <HAL_GPIO_Init+0x20e>
 8007906:	2309      	movs	r3, #9
 8007908:	e02d      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800790a:	230a      	movs	r3, #10
 800790c:	e02b      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800790e:	2308      	movs	r3, #8
 8007910:	e029      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 8007912:	2307      	movs	r3, #7
 8007914:	e027      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 8007916:	2306      	movs	r3, #6
 8007918:	e025      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800791a:	2305      	movs	r3, #5
 800791c:	e023      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800791e:	2304      	movs	r3, #4
 8007920:	e021      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 8007922:	2303      	movs	r3, #3
 8007924:	e01f      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 8007926:	2302      	movs	r3, #2
 8007928:	e01d      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800792a:	2301      	movs	r3, #1
 800792c:	e01b      	b.n	8007966 <HAL_GPIO_Init+0x26a>
 800792e:	bf00      	nop
 8007930:	58000080 	.word	0x58000080
 8007934:	58024400 	.word	0x58024400
 8007938:	58000400 	.word	0x58000400
 800793c:	58020000 	.word	0x58020000
 8007940:	58020400 	.word	0x58020400
 8007944:	58020800 	.word	0x58020800
 8007948:	58020c00 	.word	0x58020c00
 800794c:	58021000 	.word	0x58021000
 8007950:	58021400 	.word	0x58021400
 8007954:	58021800 	.word	0x58021800
 8007958:	58021c00 	.word	0x58021c00
 800795c:	58022000 	.word	0x58022000
 8007960:	58022400 	.word	0x58022400
 8007964:	2300      	movs	r3, #0
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	f002 0203 	and.w	r2, r2, #3
 800796c:	0092      	lsls	r2, r2, #2
 800796e:	4093      	lsls	r3, r2
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4313      	orrs	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007976:	4938      	ldr	r1, [pc, #224]	; (8007a58 <HAL_GPIO_Init+0x35c>)
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	089b      	lsrs	r3, r3, #2
 800797c:	3302      	adds	r3, #2
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	43db      	mvns	r3, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4013      	ands	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80079aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80079b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	43db      	mvns	r3, r3
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4013      	ands	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80079d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	43db      	mvns	r3, r3
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	4013      	ands	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	43db      	mvns	r3, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4013      	ands	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	3301      	adds	r3, #1
 8007a38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f47f ae63 	bne.w	8007710 <HAL_GPIO_Init+0x14>
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	bf00      	nop
 8007a4e:	3724      	adds	r7, #36	; 0x24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	58000400 	.word	0x58000400

08007a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	887b      	ldrh	r3, [r7, #2]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	e001      	b.n	8007a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	807b      	strh	r3, [r7, #2]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a9c:	787b      	ldrb	r3, [r7, #1]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aa2:	887a      	ldrh	r2, [r7, #2]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007aa8:	e003      	b.n	8007ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007aaa:	887b      	ldrh	r3, [r7, #2]
 8007aac:	041a      	lsls	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	619a      	str	r2, [r3, #24]
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b085      	sub	sp, #20
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ad0:	887a      	ldrh	r2, [r7, #2]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	041a      	lsls	r2, r3, #16
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	43d9      	mvns	r1, r3
 8007adc:	887b      	ldrh	r3, [r7, #2]
 8007ade:	400b      	ands	r3, r1
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	619a      	str	r2, [r3, #24]
}
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	4603      	mov	r3, r0
 8007afa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b04:	88fb      	ldrh	r3, [r7, #6]
 8007b06:	4013      	ands	r3, r2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f804 	bl	8007b26 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e0bd      	b.n	8007cca <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d031      	beq.n	8007bf6 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a4f      	ldr	r2, [pc, #316]	; (8007cd4 <HAL_HRTIM_Init+0x198>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d10e      	bne.n	8007bba <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007b9c:	4b4e      	ldr	r3, [pc, #312]	; (8007cd8 <HAL_HRTIM_Init+0x19c>)
 8007b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ba2:	4a4d      	ldr	r2, [pc, #308]	; (8007cd8 <HAL_HRTIM_Init+0x19c>)
 8007ba4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ba8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007bac:	4b4a      	ldr	r3, [pc, #296]	; (8007cd8 <HAL_HRTIM_Init+0x19c>)
 8007bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007bc8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007bde:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fb fb96 	bl	8003328 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d012      	beq.n	8007c2e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c16:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	75fb      	strb	r3, [r7, #23]
 8007c42:	e03e      	b.n	8007cc2 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007c44:	7dfa      	ldrb	r2, [r7, #23]
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	3318      	adds	r3, #24
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007c58:	7dfa      	ldrb	r2, [r7, #23]
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	331c      	adds	r3, #28
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007c6c:	7dfa      	ldrb	r2, [r7, #23]
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	4613      	mov	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	3320      	adds	r3, #32
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007c80:	7dfa      	ldrb	r2, [r7, #23]
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	3324      	adds	r3, #36	; 0x24
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007c94:	7dfa      	ldrb	r2, [r7, #23]
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	3328      	adds	r3, #40	; 0x28
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007ca8:	7dfa      	ldrb	r2, [r7, #23]
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	4613      	mov	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	3330      	adds	r3, #48	; 0x30
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	2b05      	cmp	r3, #5
 8007cc6:	d9bd      	bls.n	8007c44 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	40017400 	.word	0x40017400
 8007cd8:	58024400 	.word	0x58024400

08007cdc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d101      	bne.n	8007cf8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e015      	b.n	8007d24 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b05      	cmp	r3, #5
 8007d04:	d104      	bne.n	8007d10 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fbd0 	bl	80084ae <HRTIM_MasterBase_Config>
 8007d0e:	e004      	b.n	8007d1a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fbf9 	bl	800850c <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d101      	bne.n	8007d48 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8007d44:	2302      	movs	r3, #2
 8007d46:	e05f      	b.n	8007e08 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e058      	b.n	8007e08 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2202      	movs	r2, #2
 8007d62:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b05      	cmp	r3, #5
 8007d6a:	d104      	bne.n	8007d76 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 fc0c 	bl	800858c <HRTIM_MasterWaveform_Config>
 8007d74:	e004      	b.n	8007d80 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fc6c 	bl	8008658 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4403      	add	r3, r0
 8007d92:	3320      	adds	r3, #32
 8007d94:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6859      	ldr	r1, [r3, #4]
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4403      	add	r3, r0
 8007da8:	3324      	adds	r3, #36	; 0x24
 8007daa:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6899      	ldr	r1, [r3, #8]
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	4613      	mov	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4403      	add	r3, r0
 8007dbe:	3328      	adds	r3, #40	; 0x28
 8007dc0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68d9      	ldr	r1, [r3, #12]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	1a9b      	subs	r3, r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4403      	add	r3, r0
 8007dd4:	332c      	adds	r3, #44	; 0x2c
 8007dd6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6919      	ldr	r1, [r3, #16]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	4613      	mov	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4403      	add	r3, r0
 8007dea:	3330      	adds	r3, #48	; 0x30
 8007dec:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8007dee:	68b9      	ldr	r1, [r7, #8]
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fe49 	bl	8008a88 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d101      	bne.n	8007e2e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e157      	b.n	80080de <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e150      	b.n	80080de <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b05      	cmp	r3, #5
 8007e50:	d140      	bne.n	8007ed4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	2b07      	cmp	r3, #7
 8007e58:	d82a      	bhi.n	8007eb0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8007e5a:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8007e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e60:	08007e81 	.word	0x08007e81
 8007e64:	08007e8d 	.word	0x08007e8d
 8007e68:	08007eb1 	.word	0x08007eb1
 8007e6c:	08007e99 	.word	0x08007e99
 8007e70:	08007eb1 	.word	0x08007eb1
 8007e74:	08007eb1 	.word	0x08007eb1
 8007e78:	08007eb1 	.word	0x08007eb1
 8007e7c:	08007ea5 	.word	0x08007ea5
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	61da      	str	r2, [r3, #28]
        break;
 8007e8a:	e01a      	b.n	8007ec2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8007e96:	e014      	b.n	8007ec2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8007ea2:	e00e      	b.n	8007ec2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8007eae:	e008      	b.n	8007ec2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2207      	movs	r2, #7
 8007eb4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8007ec0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b07      	cmp	r3, #7
 8007ecc:	f040 80fe 	bne.w	80080cc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e104      	b.n	80080de <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	2b07      	cmp	r3, #7
 8007eda:	f200 80e3 	bhi.w	80080a4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8007ede:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007f05 	.word	0x08007f05
 8007ee8:	08007f19 	.word	0x08007f19
 8007eec:	080080a5 	.word	0x080080a5
 8007ef0:	08007fd5 	.word	0x08007fd5
 8007ef4:	080080a5 	.word	0x080080a5
 8007ef8:	080080a5 	.word	0x080080a5
 8007efc:	080080a5 	.word	0x080080a5
 8007f00:	08007fe9 	.word	0x08007fe9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6819      	ldr	r1, [r3, #0]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	01db      	lsls	r3, r3, #7
 8007f10:	440b      	add	r3, r1
 8007f12:	339c      	adds	r3, #156	; 0x9c
 8007f14:	601a      	str	r2, [r3, #0]
        break;
 8007f16:	e0d1      	b.n	80080bc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6819      	ldr	r1, [r3, #0]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	01db      	lsls	r3, r3, #7
 8007f24:	440b      	add	r3, r1
 8007f26:	33a4      	adds	r3, #164	; 0xa4
 8007f28:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d03f      	beq.n	8007fb2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	01db      	lsls	r3, r3, #7
 8007f3c:	4413      	add	r3, r2
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	6811      	ldr	r1, [r2, #0]
 8007f44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	01db      	lsls	r3, r3, #7
 8007f4e:	440b      	add	r3, r1
 8007f50:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	01db      	lsls	r3, r3, #7
 8007f5c:	4413      	add	r3, r2
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68f9      	ldr	r1, [r7, #12]
 8007f66:	6809      	ldr	r1, [r1, #0]
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	01db      	lsls	r3, r3, #7
 8007f70:	440b      	add	r3, r1
 8007f72:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f7c:	d109      	bne.n	8007f92 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6819      	ldr	r1, [r3, #0]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	01db      	lsls	r3, r3, #7
 8007f8a:	440b      	add	r3, r1
 8007f8c:	339c      	adds	r3, #156	; 0x9c
 8007f8e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8007f90:	e091      	b.n	80080b6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f9a:	f040 808c 	bne.w	80080b6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6819      	ldr	r1, [r3, #0]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	01db      	lsls	r3, r3, #7
 8007faa:	440b      	add	r3, r1
 8007fac:	33a8      	adds	r3, #168	; 0xa8
 8007fae:	601a      	str	r2, [r3, #0]
         break;
 8007fb0:	e081      	b.n	80080b6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	01db      	lsls	r3, r3, #7
 8007fbc:	4413      	add	r3, r2
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	6811      	ldr	r1, [r2, #0]
 8007fc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	01db      	lsls	r3, r3, #7
 8007fce:	440b      	add	r3, r1
 8007fd0:	601a      	str	r2, [r3, #0]
         break;
 8007fd2:	e070      	b.n	80080b6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6819      	ldr	r1, [r3, #0]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	01db      	lsls	r3, r3, #7
 8007fe0:	440b      	add	r3, r1
 8007fe2:	33a8      	adds	r3, #168	; 0xa8
 8007fe4:	601a      	str	r2, [r3, #0]
        break;
 8007fe6:	e069      	b.n	80080bc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6819      	ldr	r1, [r3, #0]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	01db      	lsls	r3, r3, #7
 8007ff4:	440b      	add	r3, r1
 8007ff6:	33ac      	adds	r3, #172	; 0xac
 8007ff8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d03f      	beq.n	8008082 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	3301      	adds	r3, #1
 800800a:	01db      	lsls	r3, r3, #7
 800800c:	4413      	add	r3, r2
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	6811      	ldr	r1, [r2, #0]
 8008014:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	3301      	adds	r3, #1
 800801c:	01db      	lsls	r3, r3, #7
 800801e:	440b      	add	r3, r1
 8008020:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	3301      	adds	r3, #1
 800802a:	01db      	lsls	r3, r3, #7
 800802c:	4413      	add	r3, r2
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	68f9      	ldr	r1, [r7, #12]
 8008038:	6809      	ldr	r1, [r1, #0]
 800803a:	431a      	orrs	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	3301      	adds	r3, #1
 8008040:	01db      	lsls	r3, r3, #7
 8008042:	440b      	add	r3, r1
 8008044:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800804e:	d109      	bne.n	8008064 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	01db      	lsls	r3, r3, #7
 800805c:	440b      	add	r3, r1
 800805e:	339c      	adds	r3, #156	; 0x9c
 8008060:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8008062:	e02a      	b.n	80080ba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800806c:	d125      	bne.n	80080ba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6819      	ldr	r1, [r3, #0]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	01db      	lsls	r3, r3, #7
 800807a:	440b      	add	r3, r1
 800807c:	33a8      	adds	r3, #168	; 0xa8
 800807e:	601a      	str	r2, [r3, #0]
         break;
 8008080:	e01b      	b.n	80080ba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	3301      	adds	r3, #1
 800808a:	01db      	lsls	r3, r3, #7
 800808c:	4413      	add	r3, r2
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	6811      	ldr	r1, [r2, #0]
 8008094:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	3301      	adds	r3, #1
 800809c:	01db      	lsls	r3, r3, #7
 800809e:	440b      	add	r3, r1
 80080a0:	601a      	str	r2, [r3, #0]
         break;
 80080a2:	e00a      	b.n	80080ba <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2207      	movs	r2, #7
 80080a8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80080b4:	e002      	b.n	80080bc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80080ba:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b07      	cmp	r3, #7
 80080c6:	d101      	bne.n	80080cc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e008      	b.n	80080de <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop

080080ec <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d101      	bne.n	800810a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8008106:	2302      	movs	r3, #2
 8008108:	e01d      	b.n	8008146 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008114:	2302      	movs	r3, #2
 8008116:	e016      	b.n	8008146 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 fbd2 	bl	80088d8 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <HAL_HRTIM_WaveformOutputStop+0x18>
 8008162:	2302      	movs	r3, #2
 8008164:	e01a      	b.n	800819c <HAL_HRTIM_WaveformOutputStop+0x4e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2202      	movs	r2, #2
 8008172:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 80081b2:	f240 137f 	movw	r3, #383	; 0x17f
 80081b6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d101      	bne.n	80081c6 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 80081c2:	2302      	movs	r3, #2
 80081c4:	e065      	b.n	8008292 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2202      	movs	r2, #2
 80081d2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	43da      	mvns	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	400a      	ands	r2, r1
 80081ea:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00a      	beq.n	800820e <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68d9      	ldr	r1, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008204:	43da      	mvns	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	400a      	ands	r2, r1
 800820c:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
 8008212:	e023      	b.n	800825c <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8008218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	4013      	ands	r3, r2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d018      	beq.n	8008256 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	01db      	lsls	r3, r3, #7
 800822c:	4413      	add	r3, r2
 800822e:	338c      	adds	r3, #140	; 0x8c
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	7bfa      	ldrb	r2, [r7, #15]
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	3320      	adds	r3, #32
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	43da      	mvns	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6819      	ldr	r1, [r3, #0]
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	4002      	ands	r2, r0
 800824e:	01db      	lsls	r3, r3, #7
 8008250:	440b      	add	r3, r1
 8008252:	338c      	adds	r3, #140	; 0x8c
 8008254:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	3301      	adds	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	2b04      	cmp	r3, #4
 8008260:	d9d8      	bls.n	8008214 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	3b01      	subs	r3, #1
 8008266:	60bb      	str	r3, [r7, #8]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f9      	bne.n	8008262 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6819      	ldr	r1, [r3, #0]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	43da      	mvns	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	400a      	ands	r2, r1
 800827e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	2000002c 	.word	0x2000002c

080082a4 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2bff      	cmp	r3, #255	; 0xff
 80082b2:	d103      	bne.n	80082bc <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc49 	bl	8008b4c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 80082ba:	e00a      	b.n	80082d2 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d103      	bne.n	80082ca <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fcc0 	bl	8008c48 <HRTIM_Master_ISR>
}
 80082c8:	e003      	b.n	80082d2 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fd65 	bl	8008d9c <HRTIM_Timer_ISR>
}
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 80082e2:	bf00      	nop
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_D for timer D
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008476:	bf00      	nop
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80084a2:	bf00      	nop
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0307 	bic.w	r3, r3, #7
 80084c6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f023 0318 	bic.w	r3, r3, #24
 80084d8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	6852      	ldr	r2, [r2, #4]
 80084fe:	619a      	str	r2, [r3, #24]
}
 8008500:	bf00      	nop
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	3301      	adds	r3, #1
 8008520:	01db      	lsls	r3, r3, #7
 8008522:	4413      	add	r3, r2
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f023 0307 	bic.w	r3, r3, #7
 800852e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	4313      	orrs	r3, r2
 8008538:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f023 0318 	bic.w	r3, r3, #24
 8008540:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	3301      	adds	r3, #1
 8008554:	01db      	lsls	r3, r3, #7
 8008556:	4413      	add	r3, r2
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6819      	ldr	r1, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	01db      	lsls	r3, r3, #7
 8008568:	440b      	add	r3, r1
 800856a:	3394      	adds	r3, #148	; 0x94
 800856c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6819      	ldr	r1, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	01db      	lsls	r3, r3, #7
 800857a:	440b      	add	r3, r1
 800857c:	3398      	adds	r3, #152	; 0x98
 800857e:	601a      	str	r2, [r3, #0]
}
 8008580:	bf00      	nop
 8008582:	371c      	adds	r7, #28
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80085a6:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0320 	bic.w	r3, r3, #32
 80085ae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085c0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085d2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	4313      	orrs	r3, r2
 80085dc:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80085e4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80085f6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008608:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800861c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800862e:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	4313      	orrs	r3, r2
 8008638:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800864c:	bf00      	nop
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008658:	b480      	push	{r7}
 800865a:	b08b      	sub	sp, #44	; 0x2c
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	3301      	adds	r3, #1
 800866c:	01db      	lsls	r3, r3, #7
 800866e:	4413      	add	r3, r2
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	6811      	ldr	r1, [r2, #0]
 8008676:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	3301      	adds	r3, #1
 800867e:	01db      	lsls	r3, r3, #7
 8008680:	440b      	add	r3, r1
 8008682:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	3301      	adds	r3, #1
 800868c:	01db      	lsls	r3, r3, #7
 800868e:	4413      	add	r3, r2
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	01db      	lsls	r3, r3, #7
 800869c:	4413      	add	r3, r2
 800869e:	33e8      	adds	r3, #232	; 0xe8
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	01db      	lsls	r3, r3, #7
 80086ac:	4413      	add	r3, r2
 80086ae:	33e4      	adds	r3, #228	; 0xe4
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80086bc:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	f023 0320 	bic.w	r3, r3, #32
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086cc:	4313      	orrs	r3, r2
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086de:	4313      	orrs	r3, r2
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f0:	4313      	orrs	r3, r2
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008702:	4313      	orrs	r3, r2
 8008704:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008714:	4313      	orrs	r3, r2
 8008716:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800871e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008726:	4313      	orrs	r3, r2
 8008728:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008730:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800873a:	d103      	bne.n	8008744 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008752:	4313      	orrs	r3, r2
 8008754:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008764:	4313      	orrs	r3, r2
 8008766:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 800876e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008776:	4313      	orrs	r3, r2
 8008778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	f023 031f 	bic.w	r3, r3, #31
 8008780:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	f003 031f 	and.w	r3, r3, #31
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	4313      	orrs	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008796:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	4313      	orrs	r3, r2
 80087a0:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d108      	bne.n	80087bc <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	6a3a      	ldr	r2, [r7, #32]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c0:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80087c4:	d004      	beq.n	80087d0 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ca:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80087ce:	d103      	bne.n	80087d8 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d4:	2b40      	cmp	r3, #64	; 0x40
 80087d6:	d108      	bne.n	80087ea <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80087de:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e4:	6a3a      	ldr	r2, [r7, #32]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ee:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d843      	bhi.n	800887e <HRTIM_TimingUnitWaveform_Config+0x226>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008811 	.word	0x08008811
 8008800:	08008827 	.word	0x08008827
 8008804:	0800883d 	.word	0x0800883d
 8008808:	08008853 	.word	0x08008853
 800880c:	08008869 	.word	0x08008869
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008816:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	4313      	orrs	r3, r2
 8008822:	61fb      	str	r3, [r7, #28]
      break;
 8008824:	e02c      	b.n	8008880 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800882c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	4313      	orrs	r3, r2
 8008838:	61fb      	str	r3, [r7, #28]
      break;
 800883a:	e021      	b.n	8008880 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008842:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	4313      	orrs	r3, r2
 800884e:	61fb      	str	r3, [r7, #28]
      break;
 8008850:	e016      	b.n	8008880 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008858:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885e:	011b      	lsls	r3, r3, #4
 8008860:	69fa      	ldr	r2, [r7, #28]
 8008862:	4313      	orrs	r3, r2
 8008864:	61fb      	str	r3, [r7, #28]
      break;
 8008866:	e00b      	b.n	8008880 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800886e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	015b      	lsls	r3, r3, #5
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	4313      	orrs	r3, r2
 800887a:	61fb      	str	r3, [r7, #28]
      break;
 800887c:	e000      	b.n	8008880 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 800887e:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	3301      	adds	r3, #1
 8008888:	01db      	lsls	r3, r3, #7
 800888a:	4413      	add	r3, r2
 800888c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	01db      	lsls	r3, r3, #7
 8008898:	4413      	add	r3, r2
 800889a:	33e8      	adds	r3, #232	; 0xe8
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	01db      	lsls	r3, r3, #7
 80088a8:	4413      	add	r3, r2
 80088aa:	33e4      	adds	r3, #228	; 0xe4
 80088ac:	6a3a      	ldr	r2, [r7, #32]
 80088ae:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	01db      	lsls	r3, r3, #7
 80088b8:	4413      	add	r3, r2
 80088ba:	33d4      	adds	r3, #212	; 0xd4
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69fa      	ldr	r2, [r7, #28]
 80088c6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80088ca:	bf00      	nop
 80088cc:	372c      	adds	r7, #44	; 0x2c
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop

080088d8 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80088d8:	b480      	push	{r7}
 80088da:	b089      	sub	sp, #36	; 0x24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	01db      	lsls	r3, r3, #7
 80088f2:	4413      	add	r3, r2
 80088f4:	33e4      	adds	r3, #228	; 0xe4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	01db      	lsls	r3, r3, #7
 8008902:	4413      	add	r3, r2
 8008904:	33b8      	adds	r3, #184	; 0xb8
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	617b      	str	r3, [r7, #20]

  switch (Output)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008910:	d04d      	beq.n	80089ae <HRTIM_OutputConfig+0xd6>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008918:	d85e      	bhi.n	80089d8 <HRTIM_OutputConfig+0x100>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008920:	d032      	beq.n	8008988 <HRTIM_OutputConfig+0xb0>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008928:	d856      	bhi.n	80089d8 <HRTIM_OutputConfig+0x100>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b80      	cmp	r3, #128	; 0x80
 800892e:	d03e      	beq.n	80089ae <HRTIM_OutputConfig+0xd6>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b80      	cmp	r3, #128	; 0x80
 8008934:	d850      	bhi.n	80089d8 <HRTIM_OutputConfig+0x100>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b40      	cmp	r3, #64	; 0x40
 800893a:	d025      	beq.n	8008988 <HRTIM_OutputConfig+0xb0>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b40      	cmp	r3, #64	; 0x40
 8008940:	d84a      	bhi.n	80089d8 <HRTIM_OutputConfig+0x100>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d01f      	beq.n	8008988 <HRTIM_OutputConfig+0xb0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d044      	beq.n	80089d8 <HRTIM_OutputConfig+0x100>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b20      	cmp	r3, #32
 8008952:	d841      	bhi.n	80089d8 <HRTIM_OutputConfig+0x100>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d33e      	bcc.n	80089d8 <HRTIM_OutputConfig+0x100>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3b02      	subs	r3, #2
 800895e:	2201      	movs	r2, #1
 8008960:	409a      	lsls	r2, r3
 8008962:	4b48      	ldr	r3, [pc, #288]	; (8008a84 <HRTIM_OutputConfig+0x1ac>)
 8008964:	4013      	ands	r3, r2
 8008966:	2b00      	cmp	r3, #0
 8008968:	bf14      	ite	ne
 800896a:	2301      	movne	r3, #1
 800896c:	2300      	moveq	r3, #0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d11c      	bne.n	80089ae <HRTIM_OutputConfig+0xd6>
 8008974:	f244 0304 	movw	r3, #16388	; 0x4004
 8008978:	4013      	ands	r3, r2
 800897a:	2b00      	cmp	r3, #0
 800897c:	bf14      	ite	ne
 800897e:	2301      	movne	r3, #1
 8008980:	2300      	moveq	r3, #0
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	d027      	beq.n	80089d8 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6819      	ldr	r1, [r3, #0]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	01db      	lsls	r3, r3, #7
 8008994:	440b      	add	r3, r1
 8008996:	33bc      	adds	r3, #188	; 0xbc
 8008998:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6819      	ldr	r1, [r3, #0]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	689a      	ldr	r2, [r3, #8]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	01db      	lsls	r3, r3, #7
 80089a6:	440b      	add	r3, r1
 80089a8:	33c0      	adds	r3, #192	; 0xc0
 80089aa:	601a      	str	r2, [r3, #0]
      break;
 80089ac:	e015      	b.n	80089da <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6819      	ldr	r1, [r3, #0]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	01db      	lsls	r3, r3, #7
 80089ba:	440b      	add	r3, r1
 80089bc:	33c4      	adds	r3, #196	; 0xc4
 80089be:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	01db      	lsls	r3, r3, #7
 80089cc:	440b      	add	r3, r1
 80089ce:	33c8      	adds	r3, #200	; 0xc8
 80089d0:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80089d2:	2310      	movs	r3, #16
 80089d4:	61bb      	str	r3, [r7, #24]
      break;
 80089d6:	e000      	b.n	80089da <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 80089d8:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80089da:	22fe      	movs	r2, #254	; 0xfe
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80089e2:	43db      	mvns	r3, r3
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	4013      	ands	r3, r2
 80089e8:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	fa02 f303 	lsl.w	r3, r2, r3
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	fa02 f303 	lsl.w	r3, r2, r3
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	fa02 f303 	lsl.w	r3, r2, r3
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	695a      	ldr	r2, [r3, #20]
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	fa02 f303 	lsl.w	r3, r2, r3
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	fa02 f303 	lsl.w	r3, r2, r3
 8008a34:	69fa      	ldr	r2, [r7, #28]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d111      	bne.n	8008a66 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10c      	bne.n	8008a66 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d107      	bne.n	8008a66 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	69da      	ldr	r2, [r3, #28]
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	01db      	lsls	r3, r3, #7
 8008a6e:	4413      	add	r3, r2
 8008a70:	33e4      	adds	r3, #228	; 0xe4
 8008a72:	69fa      	ldr	r2, [r7, #28]
 8008a74:	601a      	str	r2, [r3, #0]
}
 8008a76:	bf00      	nop
 8008a78:	3724      	adds	r7, #36	; 0x24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40000041 	.word	0x40000041

08008a88 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	d851      	bhi.n	8008b3c <HRTIM_ForceRegistersUpdate+0xb4>
 8008a98:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <HRTIM_ForceRegistersUpdate+0x18>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008acf 	.word	0x08008acf
 8008aa4:	08008ae5 	.word	0x08008ae5
 8008aa8:	08008afb 	.word	0x08008afb
 8008aac:	08008b11 	.word	0x08008b11
 8008ab0:	08008b27 	.word	0x08008b27
 8008ab4:	08008ab9 	.word	0x08008ab9
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f042 0201 	orr.w	r2, r2, #1
 8008ac8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008acc:	e037      	b.n	8008b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f042 0202 	orr.w	r2, r2, #2
 8008ade:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008ae2:	e02c      	b.n	8008b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0204 	orr.w	r2, r2, #4
 8008af4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008af8:	e021      	b.n	8008b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0208 	orr.w	r2, r2, #8
 8008b0a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008b0e:	e016      	b.n	8008b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0210 	orr.w	r2, r2, #16
 8008b20:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008b24:	e00b      	b.n	8008b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0220 	orr.w	r2, r2, #32
 8008b36:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008b3a:	e000      	b.n	8008b3e <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8008b3c:	bf00      	nop
  }
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop

08008b4c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008b5c:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008b66:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00c      	beq.n	8008b8c <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d007      	beq.n	8008b8c <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff fba7 	bl	80082da <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00c      	beq.n	8008bb0 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7ff fb9f 	bl	80082ee <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00c      	beq.n	8008bd4 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f003 0304 	and.w	r3, r3, #4
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2204      	movs	r2, #4
 8008bca:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7ff fb97 	bl	8008302 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f003 0308 	and.w	r3, r3, #8
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00c      	beq.n	8008bf8 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d007      	beq.n	8008bf8 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2208      	movs	r2, #8
 8008bee:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fb8f 	bl	8008316 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f003 0310 	and.w	r3, r3, #16
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00c      	beq.n	8008c1c <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f003 0310 	and.w	r3, r3, #16
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d007      	beq.n	8008c1c <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2210      	movs	r2, #16
 8008c12:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff fb87 	bl	800832a <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00c      	beq.n	8008c40 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f003 0320 	and.w	r3, r3, #32
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d007      	beq.n	8008c40 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff fb7f 	bl	800833e <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c40:	bf00      	nop
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008c58:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008c62:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00d      	beq.n	8008c9a <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d008      	beq.n	8008c9a <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008c90:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff fb5c 	bl	8008352 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00c      	beq.n	8008cbe <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d007      	beq.n	8008cbe <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008cb6:	2105      	movs	r1, #5
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff fb74 	bl	80083a6 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00c      	beq.n	8008ce2 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008cda:	2105      	movs	r1, #5
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff fb6d 	bl	80083bc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00c      	beq.n	8008d06 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f003 0304 	and.w	r3, r3, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2204      	movs	r2, #4
 8008cfc:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008cfe:	2105      	movs	r1, #5
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fb66 	bl	80083d2 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f003 0308 	and.w	r3, r3, #8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00c      	beq.n	8008d2a <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f003 0308 	and.w	r3, r3, #8
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2208      	movs	r2, #8
 8008d20:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008d22:	2105      	movs	r1, #5
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff fb5f 	bl	80083e8 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f003 0310 	and.w	r3, r3, #16
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00c      	beq.n	8008d4e <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f003 0310 	and.w	r3, r3, #16
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2210      	movs	r2, #16
 8008d44:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008d46:	2105      	movs	r1, #5
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff fb21 	bl	8008390 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f003 0320 	and.w	r3, r3, #32
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f003 0320 	and.w	r3, r3, #32
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d006      	beq.n	8008d70 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2220      	movs	r2, #32
 8008d68:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff fafb 	bl	8008366 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d007      	beq.n	8008d94 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2240      	movs	r2, #64	; 0x40
 8008d8a:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8008d8c:	2105      	movs	r1, #5
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff faf3 	bl	800837a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d94:	bf00      	nop
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	3301      	adds	r3, #1
 8008dae:	01db      	lsls	r3, r3, #7
 8008db0:	4413      	add	r3, r2
 8008db2:	3304      	adds	r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	01db      	lsls	r3, r3, #7
 8008dc0:	4413      	add	r3, r2
 8008dc2:	338c      	adds	r3, #140	; 0x8c
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d010      	beq.n	8008df4 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	01db      	lsls	r3, r3, #7
 8008de4:	4413      	add	r3, r2
 8008de6:	3388      	adds	r3, #136	; 0x88
 8008de8:	2201      	movs	r2, #1
 8008dea:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff fad9 	bl	80083a6 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d010      	beq.n	8008e20 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00b      	beq.n	8008e20 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	01db      	lsls	r3, r3, #7
 8008e10:	4413      	add	r3, r2
 8008e12:	3388      	adds	r3, #136	; 0x88
 8008e14:	2202      	movs	r2, #2
 8008e16:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff face 	bl	80083bc <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f003 0304 	and.w	r3, r3, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d010      	beq.n	8008e4c <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	01db      	lsls	r3, r3, #7
 8008e3c:	4413      	add	r3, r2
 8008e3e:	3388      	adds	r3, #136	; 0x88
 8008e40:	2204      	movs	r2, #4
 8008e42:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff fac3 	bl	80083d2 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d010      	beq.n	8008e78 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00b      	beq.n	8008e78 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	01db      	lsls	r3, r3, #7
 8008e68:	4413      	add	r3, r2
 8008e6a:	3388      	adds	r3, #136	; 0x88
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff fab8 	bl	80083e8 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d010      	beq.n	8008ea4 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	f003 0310 	and.w	r3, r3, #16
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	01db      	lsls	r3, r3, #7
 8008e94:	4413      	add	r3, r2
 8008e96:	3388      	adds	r3, #136	; 0x88
 8008e98:	2210      	movs	r2, #16
 8008e9a:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff fa76 	bl	8008390 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d010      	beq.n	8008ed0 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00b      	beq.n	8008ed0 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	01db      	lsls	r3, r3, #7
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3388      	adds	r3, #136	; 0x88
 8008ec4:	2240      	movs	r2, #64	; 0x40
 8008ec6:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff fa55 	bl	800837a <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d010      	beq.n	8008efc <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00b      	beq.n	8008efc <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	01db      	lsls	r3, r3, #7
 8008eec:	4413      	add	r3, r2
 8008eee:	3388      	adds	r3, #136	; 0x88
 8008ef0:	2280      	movs	r2, #128	; 0x80
 8008ef2:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff fa81 	bl	80083fe <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d011      	beq.n	8008f2a <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00c      	beq.n	8008f2a <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	01db      	lsls	r3, r3, #7
 8008f18:	4413      	add	r3, r2
 8008f1a:	3388      	adds	r3, #136	; 0x88
 8008f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f20:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff fa75 	bl	8008414 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d011      	beq.n	8008f58 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00c      	beq.n	8008f58 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	01db      	lsls	r3, r3, #7
 8008f46:	4413      	add	r3, r2
 8008f48:	3388      	adds	r3, #136	; 0x88
 8008f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f4e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff fa7f 	bl	8008456 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d011      	beq.n	8008f86 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00c      	beq.n	8008f86 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	01db      	lsls	r3, r3, #7
 8008f74:	4413      	add	r3, r2
 8008f76:	3388      	adds	r3, #136	; 0x88
 8008f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f7c:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fa73 	bl	800846c <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d011      	beq.n	8008fb4 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	01db      	lsls	r3, r3, #7
 8008fa2:	4413      	add	r3, r2
 8008fa4:	3388      	adds	r3, #136	; 0x88
 8008fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008faa:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff fa67 	bl	8008482 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d011      	beq.n	8008fe2 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00c      	beq.n	8008fe2 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	01db      	lsls	r3, r3, #7
 8008fd0:	4413      	add	r3, r2
 8008fd2:	3388      	adds	r3, #136	; 0x88
 8008fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fd8:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff fa5b 	bl	8008498 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d011      	beq.n	8009010 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00c      	beq.n	8009010 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	01db      	lsls	r3, r3, #7
 8008ffe:	4413      	add	r3, r2
 8009000:	3388      	adds	r3, #136	; 0x88
 8009002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009006:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff fa18 	bl	8008440 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d011      	beq.n	800903e <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00c      	beq.n	800903e <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	01db      	lsls	r3, r3, #7
 800902c:	4413      	add	r3, r2
 800902e:	3388      	adds	r3, #136	; 0x88
 8009030:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009034:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff f9f6 	bl	800842a <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800903e:	bf00      	nop
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e097      	b.n	800918a <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d106      	bne.n	800907a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7fa f9fd 	bl	8003474 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2202      	movs	r2, #2
 800907e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d004      	beq.n	800909c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800909a:	d103      	bne.n	80090a4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 031e 	bic.w	r3, r3, #30
 80090a2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d003      	beq.n	80090b8 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4b38      	ldr	r3, [pc, #224]	; (8009194 <HAL_LPTIM_Init+0x14c>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4b37      	ldr	r3, [pc, #220]	; (8009198 <HAL_LPTIM_Init+0x150>)
 80090bc:	4013      	ands	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80090c8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80090ce:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80090d4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80090da:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d107      	bne.n	80090fa <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80090f2:	4313      	orrs	r3, r2
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d004      	beq.n	800910c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800910a:	d107      	bne.n	800911c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009114:	4313      	orrs	r3, r2
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009124:	4293      	cmp	r3, r2
 8009126:	d00a      	beq.n	800913e <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009130:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8009136:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	4313      	orrs	r3, r2
 800913c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a14      	ldr	r2, [pc, #80]	; (800919c <HAL_LPTIM_Init+0x154>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d004      	beq.n	800915a <HAL_LPTIM_Init+0x112>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a12      	ldr	r2, [pc, #72]	; (80091a0 <HAL_LPTIM_Init+0x158>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d108      	bne.n	800916c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	625a      	str	r2, [r3, #36]	; 0x24
 800916a:	e009      	b.n	8009180 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a0c      	ldr	r2, [pc, #48]	; (80091a4 <HAL_LPTIM_Init+0x15c>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d104      	bne.n	8009180 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800917e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	ffff1f3f 	.word	0xffff1f3f
 8009198:	ff19f1fe 	.word	0xff19f1fe
 800919c:	40002400 	.word	0x40002400
 80091a0:	58002400 	.word	0x58002400
 80091a4:	58002800 	.word	0x58002800

080091a8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2202      	movs	r2, #2
 80091b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d00c      	beq.n	80091dc <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091ca:	d107      	bne.n	80091dc <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80091da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	691a      	ldr	r2, [r3, #16]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2210      	movs	r2, #16
 80091f2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80091fc:	2110      	movs	r1, #16
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f91e 	bl	8009440 <LPTIM_WaitForFlag>
 8009204:	4603      	mov	r3, r0
 8009206:	2b03      	cmp	r3, #3
 8009208:	d101      	bne.n	800920e <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e02f      	b.n	800926e <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f946 	bl	80094a0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f905 	bl	8009424 <HAL_LPTIM_GetState>
 800921a:	4603      	mov	r3, r0
 800921c:	2b03      	cmp	r3, #3
 800921e:	d101      	bne.n	8009224 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e024      	b.n	800926e <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f042 0210 	orr.w	r2, r2, #16
 8009232:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0202 	orr.w	r2, r2, #2
 8009242:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691a      	ldr	r2, [r3, #16]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f042 0204 	orr.w	r2, r2, #4
 8009262:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b01      	cmp	r3, #1
 800928a:	d10d      	bne.n	80092a8 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	2b01      	cmp	r3, #1
 8009298:	d106      	bne.n	80092a8 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2201      	movs	r2, #1
 80092a0:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f882 	bl	80093ac <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d10d      	bne.n	80092d2 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d106      	bne.n	80092d2 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2202      	movs	r2, #2
 80092ca:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7fa fbc7 	bl	8003a60 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b04      	cmp	r3, #4
 80092de:	d10d      	bne.n	80092fc <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f003 0304 	and.w	r3, r3, #4
 80092ea:	2b04      	cmp	r3, #4
 80092ec:	d106      	bne.n	80092fc <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2204      	movs	r2, #4
 80092f4:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f862 	bl	80093c0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0308 	and.w	r3, r3, #8
 8009306:	2b08      	cmp	r3, #8
 8009308:	d10d      	bne.n	8009326 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b08      	cmp	r3, #8
 8009316:	d106      	bne.n	8009326 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2208      	movs	r2, #8
 800931e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f857 	bl	80093d4 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	2b10      	cmp	r3, #16
 8009332:	d10d      	bne.n	8009350 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f003 0310 	and.w	r3, r3, #16
 800933e:	2b10      	cmp	r3, #16
 8009340:	d106      	bne.n	8009350 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2210      	movs	r2, #16
 8009348:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f84c 	bl	80093e8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0320 	and.w	r3, r3, #32
 800935a:	2b20      	cmp	r3, #32
 800935c:	d10d      	bne.n	800937a <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b20      	cmp	r3, #32
 800936a:	d106      	bne.n	800937a <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2220      	movs	r2, #32
 8009372:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f841 	bl	80093fc <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009384:	2b40      	cmp	r3, #64	; 0x40
 8009386:	d10d      	bne.n	80093a4 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009392:	2b40      	cmp	r3, #64	; 0x40
 8009394:	d106      	bne.n	80093a4 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2240      	movs	r2, #64	; 0x40
 800939c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f836 	bl	8009410 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009432:	b2db      	uxtb	r3, r3
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <LPTIM_WaitForFlag+0x58>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a12      	ldr	r2, [pc, #72]	; (800949c <LPTIM_WaitForFlag+0x5c>)
 8009454:	fba2 2303 	umull	r2, r3, r2, r3
 8009458:	0b9b      	lsrs	r3, r3, #14
 800945a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800945e:	fb02 f303 	mul.w	r3, r2, r3
 8009462:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	3b01      	subs	r3, #1
 8009468:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	4013      	ands	r3, r2
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d002      	beq.n	800948a <LPTIM_WaitForFlag+0x4a>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1ec      	bne.n	8009464 <LPTIM_WaitForFlag+0x24>

  return result;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	20000010 	.word	0x20000010
 800949c:	d1b71759 	.word	0xd1b71759

080094a0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08c      	sub	sp, #48	; 0x30
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ac:	f3ef 8310 	mrs	r3, PRIMASK
 80094b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80094b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80094b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80094b6:	2301      	movs	r3, #1
 80094b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f383 8810 	msr	PRIMASK, r3
}
 80094c0:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a81      	ldr	r2, [pc, #516]	; (80096cc <LPTIM_Disable+0x22c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d02d      	beq.n	8009528 <LPTIM_Disable+0x88>
 80094cc:	4a7f      	ldr	r2, [pc, #508]	; (80096cc <LPTIM_Disable+0x22c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d830      	bhi.n	8009534 <LPTIM_Disable+0x94>
 80094d2:	4a7f      	ldr	r2, [pc, #508]	; (80096d0 <LPTIM_Disable+0x230>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d021      	beq.n	800951c <LPTIM_Disable+0x7c>
 80094d8:	4a7d      	ldr	r2, [pc, #500]	; (80096d0 <LPTIM_Disable+0x230>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d82a      	bhi.n	8009534 <LPTIM_Disable+0x94>
 80094de:	4a7d      	ldr	r2, [pc, #500]	; (80096d4 <LPTIM_Disable+0x234>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d015      	beq.n	8009510 <LPTIM_Disable+0x70>
 80094e4:	4a7b      	ldr	r2, [pc, #492]	; (80096d4 <LPTIM_Disable+0x234>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d824      	bhi.n	8009534 <LPTIM_Disable+0x94>
 80094ea:	4a7b      	ldr	r2, [pc, #492]	; (80096d8 <LPTIM_Disable+0x238>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d003      	beq.n	80094f8 <LPTIM_Disable+0x58>
 80094f0:	4a7a      	ldr	r2, [pc, #488]	; (80096dc <LPTIM_Disable+0x23c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d006      	beq.n	8009504 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80094f6:	e01d      	b.n	8009534 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80094f8:	4b79      	ldr	r3, [pc, #484]	; (80096e0 <LPTIM_Disable+0x240>)
 80094fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009500:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009502:	e018      	b.n	8009536 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009504:	4b76      	ldr	r3, [pc, #472]	; (80096e0 <LPTIM_Disable+0x240>)
 8009506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009508:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800950c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800950e:	e012      	b.n	8009536 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009510:	4b73      	ldr	r3, [pc, #460]	; (80096e0 <LPTIM_Disable+0x240>)
 8009512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009514:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009518:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800951a:	e00c      	b.n	8009536 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 800951c:	4b70      	ldr	r3, [pc, #448]	; (80096e0 <LPTIM_Disable+0x240>)
 800951e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009520:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009524:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009526:	e006      	b.n	8009536 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009528:	4b6d      	ldr	r3, [pc, #436]	; (80096e0 <LPTIM_Disable+0x240>)
 800952a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009530:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009532:	e000      	b.n	8009536 <LPTIM_Disable+0x96>
      break;
 8009534:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a5a      	ldr	r2, [pc, #360]	; (80096cc <LPTIM_Disable+0x22c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d059      	beq.n	800961c <LPTIM_Disable+0x17c>
 8009568:	4a58      	ldr	r2, [pc, #352]	; (80096cc <LPTIM_Disable+0x22c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d867      	bhi.n	800963e <LPTIM_Disable+0x19e>
 800956e:	4a58      	ldr	r2, [pc, #352]	; (80096d0 <LPTIM_Disable+0x230>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d042      	beq.n	80095fa <LPTIM_Disable+0x15a>
 8009574:	4a56      	ldr	r2, [pc, #344]	; (80096d0 <LPTIM_Disable+0x230>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d861      	bhi.n	800963e <LPTIM_Disable+0x19e>
 800957a:	4a56      	ldr	r2, [pc, #344]	; (80096d4 <LPTIM_Disable+0x234>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d02b      	beq.n	80095d8 <LPTIM_Disable+0x138>
 8009580:	4a54      	ldr	r2, [pc, #336]	; (80096d4 <LPTIM_Disable+0x234>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d85b      	bhi.n	800963e <LPTIM_Disable+0x19e>
 8009586:	4a54      	ldr	r2, [pc, #336]	; (80096d8 <LPTIM_Disable+0x238>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d003      	beq.n	8009594 <LPTIM_Disable+0xf4>
 800958c:	4a53      	ldr	r2, [pc, #332]	; (80096dc <LPTIM_Disable+0x23c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d011      	beq.n	80095b6 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009592:	e054      	b.n	800963e <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009594:	4b52      	ldr	r3, [pc, #328]	; (80096e0 <LPTIM_Disable+0x240>)
 8009596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800959a:	4a51      	ldr	r2, [pc, #324]	; (80096e0 <LPTIM_Disable+0x240>)
 800959c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80095a4:	4b4e      	ldr	r3, [pc, #312]	; (80096e0 <LPTIM_Disable+0x240>)
 80095a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095aa:	4a4d      	ldr	r2, [pc, #308]	; (80096e0 <LPTIM_Disable+0x240>)
 80095ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 80095b4:	e044      	b.n	8009640 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80095b6:	4b4a      	ldr	r3, [pc, #296]	; (80096e0 <LPTIM_Disable+0x240>)
 80095b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095bc:	4a48      	ldr	r2, [pc, #288]	; (80096e0 <LPTIM_Disable+0x240>)
 80095be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80095c6:	4b46      	ldr	r3, [pc, #280]	; (80096e0 <LPTIM_Disable+0x240>)
 80095c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095cc:	4a44      	ldr	r2, [pc, #272]	; (80096e0 <LPTIM_Disable+0x240>)
 80095ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80095d6:	e033      	b.n	8009640 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80095d8:	4b41      	ldr	r3, [pc, #260]	; (80096e0 <LPTIM_Disable+0x240>)
 80095da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095de:	4a40      	ldr	r2, [pc, #256]	; (80096e0 <LPTIM_Disable+0x240>)
 80095e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 80095e8:	4b3d      	ldr	r3, [pc, #244]	; (80096e0 <LPTIM_Disable+0x240>)
 80095ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095ee:	4a3c      	ldr	r2, [pc, #240]	; (80096e0 <LPTIM_Disable+0x240>)
 80095f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095f4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80095f8:	e022      	b.n	8009640 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 80095fa:	4b39      	ldr	r3, [pc, #228]	; (80096e0 <LPTIM_Disable+0x240>)
 80095fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009600:	4a37      	ldr	r2, [pc, #220]	; (80096e0 <LPTIM_Disable+0x240>)
 8009602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009606:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800960a:	4b35      	ldr	r3, [pc, #212]	; (80096e0 <LPTIM_Disable+0x240>)
 800960c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009610:	4a33      	ldr	r2, [pc, #204]	; (80096e0 <LPTIM_Disable+0x240>)
 8009612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009616:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800961a:	e011      	b.n	8009640 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 800961c:	4b30      	ldr	r3, [pc, #192]	; (80096e0 <LPTIM_Disable+0x240>)
 800961e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009622:	4a2f      	ldr	r2, [pc, #188]	; (80096e0 <LPTIM_Disable+0x240>)
 8009624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009628:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 800962c:	4b2c      	ldr	r3, [pc, #176]	; (80096e0 <LPTIM_Disable+0x240>)
 800962e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009632:	4a2b      	ldr	r2, [pc, #172]	; (80096e0 <LPTIM_Disable+0x240>)
 8009634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009638:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800963c:	e000      	b.n	8009640 <LPTIM_Disable+0x1a0>
      break;
 800963e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d103      	bne.n	800964e <LPTIM_Disable+0x1ae>
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 80d1 	beq.w	80097f0 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a1e      	ldr	r2, [pc, #120]	; (80096cc <LPTIM_Disable+0x22c>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d031      	beq.n	80096bc <LPTIM_Disable+0x21c>
 8009658:	4a1c      	ldr	r2, [pc, #112]	; (80096cc <LPTIM_Disable+0x22c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d842      	bhi.n	80096e4 <LPTIM_Disable+0x244>
 800965e:	4a1c      	ldr	r2, [pc, #112]	; (80096d0 <LPTIM_Disable+0x230>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d024      	beq.n	80096ae <LPTIM_Disable+0x20e>
 8009664:	4a1a      	ldr	r2, [pc, #104]	; (80096d0 <LPTIM_Disable+0x230>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d83c      	bhi.n	80096e4 <LPTIM_Disable+0x244>
 800966a:	4a1a      	ldr	r2, [pc, #104]	; (80096d4 <LPTIM_Disable+0x234>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d017      	beq.n	80096a0 <LPTIM_Disable+0x200>
 8009670:	4a18      	ldr	r2, [pc, #96]	; (80096d4 <LPTIM_Disable+0x234>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d836      	bhi.n	80096e4 <LPTIM_Disable+0x244>
 8009676:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <LPTIM_Disable+0x238>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d003      	beq.n	8009684 <LPTIM_Disable+0x1e4>
 800967c:	4a17      	ldr	r2, [pc, #92]	; (80096dc <LPTIM_Disable+0x23c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d007      	beq.n	8009692 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009682:	e02f      	b.n	80096e4 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009684:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <LPTIM_Disable+0x240>)
 8009686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009688:	4a15      	ldr	r2, [pc, #84]	; (80096e0 <LPTIM_Disable+0x240>)
 800968a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800968e:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009690:	e029      	b.n	80096e6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009692:	4b13      	ldr	r3, [pc, #76]	; (80096e0 <LPTIM_Disable+0x240>)
 8009694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009696:	4a12      	ldr	r2, [pc, #72]	; (80096e0 <LPTIM_Disable+0x240>)
 8009698:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800969c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800969e:	e022      	b.n	80096e6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <LPTIM_Disable+0x240>)
 80096a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a4:	4a0e      	ldr	r2, [pc, #56]	; (80096e0 <LPTIM_Disable+0x240>)
 80096a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80096aa:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80096ac:	e01b      	b.n	80096e6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80096ae:	4b0c      	ldr	r3, [pc, #48]	; (80096e0 <LPTIM_Disable+0x240>)
 80096b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b2:	4a0b      	ldr	r2, [pc, #44]	; (80096e0 <LPTIM_Disable+0x240>)
 80096b4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80096b8:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80096ba:	e014      	b.n	80096e6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 80096bc:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <LPTIM_Disable+0x240>)
 80096be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c0:	4a07      	ldr	r2, [pc, #28]	; (80096e0 <LPTIM_Disable+0x240>)
 80096c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80096c6:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80096c8:	e00d      	b.n	80096e6 <LPTIM_Disable+0x246>
 80096ca:	bf00      	nop
 80096cc:	58003000 	.word	0x58003000
 80096d0:	58002c00 	.word	0x58002c00
 80096d4:	58002800 	.word	0x58002800
 80096d8:	40002400 	.word	0x40002400
 80096dc:	58002400 	.word	0x58002400
 80096e0:	58024400 	.word	0x58024400
        break;
 80096e4:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01a      	beq.n	8009722 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	691a      	ldr	r2, [r3, #16]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0201 	orr.w	r2, r2, #1
 80096fa:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	69fa      	ldr	r2, [r7, #28]
 8009702:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009704:	2108      	movs	r1, #8
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff fe9a 	bl	8009440 <LPTIM_WaitForFlag>
 800970c:	4603      	mov	r3, r0
 800970e:	2b03      	cmp	r3, #3
 8009710:	d103      	bne.n	800971a <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2203      	movs	r2, #3
 8009716:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2208      	movs	r2, #8
 8009720:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01a      	beq.n	800975e <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	691a      	ldr	r2, [r3, #16]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 0201 	orr.w	r2, r2, #1
 8009736:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009740:	2110      	movs	r1, #16
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fe7c 	bl	8009440 <LPTIM_WaitForFlag>
 8009748:	4603      	mov	r3, r0
 800974a:	2b03      	cmp	r3, #3
 800974c:	d103      	bne.n	8009756 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2203      	movs	r2, #3
 8009752:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2210      	movs	r2, #16
 800975c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a32      	ldr	r2, [pc, #200]	; (800982c <LPTIM_Disable+0x38c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d039      	beq.n	80097dc <LPTIM_Disable+0x33c>
 8009768:	4a30      	ldr	r2, [pc, #192]	; (800982c <LPTIM_Disable+0x38c>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d83f      	bhi.n	80097ee <LPTIM_Disable+0x34e>
 800976e:	4a30      	ldr	r2, [pc, #192]	; (8009830 <LPTIM_Disable+0x390>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d02a      	beq.n	80097ca <LPTIM_Disable+0x32a>
 8009774:	4a2e      	ldr	r2, [pc, #184]	; (8009830 <LPTIM_Disable+0x390>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d839      	bhi.n	80097ee <LPTIM_Disable+0x34e>
 800977a:	4a2e      	ldr	r2, [pc, #184]	; (8009834 <LPTIM_Disable+0x394>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d01b      	beq.n	80097b8 <LPTIM_Disable+0x318>
 8009780:	4a2c      	ldr	r2, [pc, #176]	; (8009834 <LPTIM_Disable+0x394>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d833      	bhi.n	80097ee <LPTIM_Disable+0x34e>
 8009786:	4a2c      	ldr	r2, [pc, #176]	; (8009838 <LPTIM_Disable+0x398>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d003      	beq.n	8009794 <LPTIM_Disable+0x2f4>
 800978c:	4a2b      	ldr	r2, [pc, #172]	; (800983c <LPTIM_Disable+0x39c>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d009      	beq.n	80097a6 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009792:	e02c      	b.n	80097ee <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009794:	4b2a      	ldr	r3, [pc, #168]	; (8009840 <LPTIM_Disable+0x3a0>)
 8009796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009798:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800979c:	4928      	ldr	r1, [pc, #160]	; (8009840 <LPTIM_Disable+0x3a0>)
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	4313      	orrs	r3, r2
 80097a2:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 80097a4:	e024      	b.n	80097f0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80097a6:	4b26      	ldr	r3, [pc, #152]	; (8009840 <LPTIM_Disable+0x3a0>)
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097ae:	4924      	ldr	r1, [pc, #144]	; (8009840 <LPTIM_Disable+0x3a0>)
 80097b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b2:	4313      	orrs	r3, r2
 80097b4:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80097b6:	e01b      	b.n	80097f0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80097b8:	4b21      	ldr	r3, [pc, #132]	; (8009840 <LPTIM_Disable+0x3a0>)
 80097ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097c0:	491f      	ldr	r1, [pc, #124]	; (8009840 <LPTIM_Disable+0x3a0>)
 80097c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c4:	4313      	orrs	r3, r2
 80097c6:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80097c8:	e012      	b.n	80097f0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 80097ca:	4b1d      	ldr	r3, [pc, #116]	; (8009840 <LPTIM_Disable+0x3a0>)
 80097cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097d2:	491b      	ldr	r1, [pc, #108]	; (8009840 <LPTIM_Disable+0x3a0>)
 80097d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d6:	4313      	orrs	r3, r2
 80097d8:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80097da:	e009      	b.n	80097f0 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 80097dc:	4b18      	ldr	r3, [pc, #96]	; (8009840 <LPTIM_Disable+0x3a0>)
 80097de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097e4:	4916      	ldr	r1, [pc, #88]	; (8009840 <LPTIM_Disable+0x3a0>)
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	4313      	orrs	r3, r2
 80097ea:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80097ec:	e000      	b.n	80097f0 <LPTIM_Disable+0x350>
        break;
 80097ee:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	691a      	ldr	r2, [r3, #16]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 0201 	bic.w	r2, r2, #1
 80097fe:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009806:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6a3a      	ldr	r2, [r7, #32]
 800980e:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	625a      	str	r2, [r3, #36]	; 0x24
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f383 8810 	msr	PRIMASK, r3
}
 8009822:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009824:	bf00      	nop
 8009826:	3730      	adds	r7, #48	; 0x30
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	58003000 	.word	0x58003000
 8009830:	58002c00 	.word	0x58002c00
 8009834:	58002800 	.word	0x58002800
 8009838:	40002400 	.word	0x40002400
 800983c:	58002400 	.word	0x58002400
 8009840:	58024400 	.word	0x58024400

08009844 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a04      	ldr	r2, [pc, #16]	; (8009860 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800984e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009852:	6013      	str	r3, [r2, #0]
}
 8009854:	bf00      	nop
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	58024800 	.word	0x58024800

08009864 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800986c:	4b19      	ldr	r3, [pc, #100]	; (80098d4 <HAL_PWREx_ConfigSupply+0x70>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b04      	cmp	r3, #4
 8009876:	d00a      	beq.n	800988e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009878:	4b16      	ldr	r3, [pc, #88]	; (80098d4 <HAL_PWREx_ConfigSupply+0x70>)
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	429a      	cmp	r2, r3
 8009884:	d001      	beq.n	800988a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e01f      	b.n	80098ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	e01d      	b.n	80098ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800988e:	4b11      	ldr	r3, [pc, #68]	; (80098d4 <HAL_PWREx_ConfigSupply+0x70>)
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f023 0207 	bic.w	r2, r3, #7
 8009896:	490f      	ldr	r1, [pc, #60]	; (80098d4 <HAL_PWREx_ConfigSupply+0x70>)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4313      	orrs	r3, r2
 800989c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800989e:	f7fa fafd 	bl	8003e9c <HAL_GetTick>
 80098a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80098a4:	e009      	b.n	80098ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80098a6:	f7fa faf9 	bl	8003e9c <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098b4:	d901      	bls.n	80098ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e007      	b.n	80098ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80098ba:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <HAL_PWREx_ConfigSupply+0x70>)
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098c6:	d1ee      	bne.n	80098a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	58024800 	.word	0x58024800

080098d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08c      	sub	sp, #48	; 0x30
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d102      	bne.n	80098ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	f000 bc48 	b.w	800a17c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 8088 	beq.w	8009a0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098fa:	4b99      	ldr	r3, [pc, #612]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009902:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009904:	4b96      	ldr	r3, [pc, #600]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009908:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	2b10      	cmp	r3, #16
 800990e:	d007      	beq.n	8009920 <HAL_RCC_OscConfig+0x48>
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	2b18      	cmp	r3, #24
 8009914:	d111      	bne.n	800993a <HAL_RCC_OscConfig+0x62>
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	2b02      	cmp	r3, #2
 800991e:	d10c      	bne.n	800993a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009920:	4b8f      	ldr	r3, [pc, #572]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d06d      	beq.n	8009a08 <HAL_RCC_OscConfig+0x130>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d169      	bne.n	8009a08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	f000 bc21 	b.w	800a17c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009942:	d106      	bne.n	8009952 <HAL_RCC_OscConfig+0x7a>
 8009944:	4b86      	ldr	r3, [pc, #536]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a85      	ldr	r2, [pc, #532]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 800994a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	e02e      	b.n	80099b0 <HAL_RCC_OscConfig+0xd8>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10c      	bne.n	8009974 <HAL_RCC_OscConfig+0x9c>
 800995a:	4b81      	ldr	r3, [pc, #516]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a80      	ldr	r2, [pc, #512]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009964:	6013      	str	r3, [r2, #0]
 8009966:	4b7e      	ldr	r3, [pc, #504]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a7d      	ldr	r2, [pc, #500]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 800996c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	e01d      	b.n	80099b0 <HAL_RCC_OscConfig+0xd8>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800997c:	d10c      	bne.n	8009998 <HAL_RCC_OscConfig+0xc0>
 800997e:	4b78      	ldr	r3, [pc, #480]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a77      	ldr	r2, [pc, #476]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	4b75      	ldr	r3, [pc, #468]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a74      	ldr	r2, [pc, #464]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	e00b      	b.n	80099b0 <HAL_RCC_OscConfig+0xd8>
 8009998:	4b71      	ldr	r3, [pc, #452]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a70      	ldr	r2, [pc, #448]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 800999e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	4b6e      	ldr	r3, [pc, #440]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a6d      	ldr	r2, [pc, #436]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 80099aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d013      	beq.n	80099e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b8:	f7fa fa70 	bl	8003e9c <HAL_GetTick>
 80099bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099be:	e008      	b.n	80099d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099c0:	f7fa fa6c 	bl	8003e9c <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2b64      	cmp	r3, #100	; 0x64
 80099cc:	d901      	bls.n	80099d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e3d4      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099d2:	4b63      	ldr	r3, [pc, #396]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0f0      	beq.n	80099c0 <HAL_RCC_OscConfig+0xe8>
 80099de:	e014      	b.n	8009a0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e0:	f7fa fa5c 	bl	8003e9c <HAL_GetTick>
 80099e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099e6:	e008      	b.n	80099fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099e8:	f7fa fa58 	bl	8003e9c <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	2b64      	cmp	r3, #100	; 0x64
 80099f4:	d901      	bls.n	80099fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e3c0      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099fa:	4b59      	ldr	r3, [pc, #356]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1f0      	bne.n	80099e8 <HAL_RCC_OscConfig+0x110>
 8009a06:	e000      	b.n	8009a0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f000 80ca 	beq.w	8009bac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a18:	4b51      	ldr	r3, [pc, #324]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a22:	4b4f      	ldr	r3, [pc, #316]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <HAL_RCC_OscConfig+0x166>
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	2b18      	cmp	r3, #24
 8009a32:	d156      	bne.n	8009ae2 <HAL_RCC_OscConfig+0x20a>
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	f003 0303 	and.w	r3, r3, #3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d151      	bne.n	8009ae2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a3e:	4b48      	ldr	r3, [pc, #288]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0304 	and.w	r3, r3, #4
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d005      	beq.n	8009a56 <HAL_RCC_OscConfig+0x17e>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e392      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a56:	4b42      	ldr	r3, [pc, #264]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f023 0219 	bic.w	r2, r3, #25
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	493f      	ldr	r1, [pc, #252]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a68:	f7fa fa18 	bl	8003e9c <HAL_GetTick>
 8009a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a6e:	e008      	b.n	8009a82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a70:	f7fa fa14 	bl	8003e9c <HAL_GetTick>
 8009a74:	4602      	mov	r2, r0
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d901      	bls.n	8009a82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e37c      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a82:	4b37      	ldr	r3, [pc, #220]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0f0      	beq.n	8009a70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a8e:	f7fa fa35 	bl	8003efc <HAL_GetREVID>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d817      	bhi.n	8009acc <HAL_RCC_OscConfig+0x1f4>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	2b40      	cmp	r3, #64	; 0x40
 8009aa2:	d108      	bne.n	8009ab6 <HAL_RCC_OscConfig+0x1de>
 8009aa4:	4b2e      	ldr	r3, [pc, #184]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009aac:	4a2c      	ldr	r2, [pc, #176]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ab2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ab4:	e07a      	b.n	8009bac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ab6:	4b2a      	ldr	r3, [pc, #168]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	031b      	lsls	r3, r3, #12
 8009ac4:	4926      	ldr	r1, [pc, #152]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009aca:	e06f      	b.n	8009bac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009acc:	4b24      	ldr	r3, [pc, #144]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	061b      	lsls	r3, r3, #24
 8009ada:	4921      	ldr	r1, [pc, #132]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ae0:	e064      	b.n	8009bac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d047      	beq.n	8009b7a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009aea:	4b1d      	ldr	r3, [pc, #116]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f023 0219 	bic.w	r2, r3, #25
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	491a      	ldr	r1, [pc, #104]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afc:	f7fa f9ce 	bl	8003e9c <HAL_GetTick>
 8009b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b02:	e008      	b.n	8009b16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b04:	f7fa f9ca 	bl	8003e9c <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d901      	bls.n	8009b16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e332      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b16:	4b12      	ldr	r3, [pc, #72]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0304 	and.w	r3, r3, #4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0f0      	beq.n	8009b04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b22:	f7fa f9eb 	bl	8003efc <HAL_GetREVID>
 8009b26:	4603      	mov	r3, r0
 8009b28:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d819      	bhi.n	8009b64 <HAL_RCC_OscConfig+0x28c>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	2b40      	cmp	r3, #64	; 0x40
 8009b36:	d108      	bne.n	8009b4a <HAL_RCC_OscConfig+0x272>
 8009b38:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009b40:	4a07      	ldr	r2, [pc, #28]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b46:	6053      	str	r3, [r2, #4]
 8009b48:	e030      	b.n	8009bac <HAL_RCC_OscConfig+0x2d4>
 8009b4a:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	031b      	lsls	r3, r3, #12
 8009b58:	4901      	ldr	r1, [pc, #4]	; (8009b60 <HAL_RCC_OscConfig+0x288>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	604b      	str	r3, [r1, #4]
 8009b5e:	e025      	b.n	8009bac <HAL_RCC_OscConfig+0x2d4>
 8009b60:	58024400 	.word	0x58024400
 8009b64:	4b9a      	ldr	r3, [pc, #616]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	061b      	lsls	r3, r3, #24
 8009b72:	4997      	ldr	r1, [pc, #604]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	604b      	str	r3, [r1, #4]
 8009b78:	e018      	b.n	8009bac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b7a:	4b95      	ldr	r3, [pc, #596]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a94      	ldr	r2, [pc, #592]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009b80:	f023 0301 	bic.w	r3, r3, #1
 8009b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b86:	f7fa f989 	bl	8003e9c <HAL_GetTick>
 8009b8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b8c:	e008      	b.n	8009ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b8e:	f7fa f985 	bl	8003e9c <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d901      	bls.n	8009ba0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e2ed      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ba0:	4b8b      	ldr	r3, [pc, #556]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0304 	and.w	r3, r3, #4
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1f0      	bne.n	8009b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0310 	and.w	r3, r3, #16
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 80a9 	beq.w	8009d0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bba:	4b85      	ldr	r3, [pc, #532]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bc2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bc4:	4b82      	ldr	r3, [pc, #520]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d007      	beq.n	8009be0 <HAL_RCC_OscConfig+0x308>
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	2b18      	cmp	r3, #24
 8009bd4:	d13a      	bne.n	8009c4c <HAL_RCC_OscConfig+0x374>
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f003 0303 	and.w	r3, r3, #3
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d135      	bne.n	8009c4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009be0:	4b7b      	ldr	r3, [pc, #492]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d005      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x320>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	2b80      	cmp	r3, #128	; 0x80
 8009bf2:	d001      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e2c1      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bf8:	f7fa f980 	bl	8003efc <HAL_GetREVID>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d817      	bhi.n	8009c36 <HAL_RCC_OscConfig+0x35e>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	2b20      	cmp	r3, #32
 8009c0c:	d108      	bne.n	8009c20 <HAL_RCC_OscConfig+0x348>
 8009c0e:	4b70      	ldr	r3, [pc, #448]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c16:	4a6e      	ldr	r2, [pc, #440]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c1c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c1e:	e075      	b.n	8009d0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c20:	4b6b      	ldr	r3, [pc, #428]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a1b      	ldr	r3, [r3, #32]
 8009c2c:	069b      	lsls	r3, r3, #26
 8009c2e:	4968      	ldr	r1, [pc, #416]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c34:	e06a      	b.n	8009d0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c36:	4b66      	ldr	r3, [pc, #408]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	061b      	lsls	r3, r3, #24
 8009c44:	4962      	ldr	r1, [pc, #392]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c4a:	e05f      	b.n	8009d0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d042      	beq.n	8009cda <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009c54:	4b5e      	ldr	r3, [pc, #376]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a5d      	ldr	r2, [pc, #372]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c60:	f7fa f91c 	bl	8003e9c <HAL_GetTick>
 8009c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c66:	e008      	b.n	8009c7a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c68:	f7fa f918 	bl	8003e9c <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d901      	bls.n	8009c7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e280      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c7a:	4b55      	ldr	r3, [pc, #340]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0f0      	beq.n	8009c68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c86:	f7fa f939 	bl	8003efc <HAL_GetREVID>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d817      	bhi.n	8009cc4 <HAL_RCC_OscConfig+0x3ec>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	2b20      	cmp	r3, #32
 8009c9a:	d108      	bne.n	8009cae <HAL_RCC_OscConfig+0x3d6>
 8009c9c:	4b4c      	ldr	r3, [pc, #304]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009ca4:	4a4a      	ldr	r2, [pc, #296]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009ca6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009caa:	6053      	str	r3, [r2, #4]
 8009cac:	e02e      	b.n	8009d0c <HAL_RCC_OscConfig+0x434>
 8009cae:	4b48      	ldr	r3, [pc, #288]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	069b      	lsls	r3, r3, #26
 8009cbc:	4944      	ldr	r1, [pc, #272]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	604b      	str	r3, [r1, #4]
 8009cc2:	e023      	b.n	8009d0c <HAL_RCC_OscConfig+0x434>
 8009cc4:	4b42      	ldr	r3, [pc, #264]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	061b      	lsls	r3, r3, #24
 8009cd2:	493f      	ldr	r1, [pc, #252]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60cb      	str	r3, [r1, #12]
 8009cd8:	e018      	b.n	8009d0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009cda:	4b3d      	ldr	r3, [pc, #244]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a3c      	ldr	r2, [pc, #240]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ce6:	f7fa f8d9 	bl	8003e9c <HAL_GetTick>
 8009cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009cec:	e008      	b.n	8009d00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cee:	f7fa f8d5 	bl	8003e9c <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d901      	bls.n	8009d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e23d      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d00:	4b33      	ldr	r3, [pc, #204]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1f0      	bne.n	8009cee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0308 	and.w	r3, r3, #8
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d036      	beq.n	8009d86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d019      	beq.n	8009d54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d20:	4b2b      	ldr	r3, [pc, #172]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d24:	4a2a      	ldr	r2, [pc, #168]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009d26:	f043 0301 	orr.w	r3, r3, #1
 8009d2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d2c:	f7fa f8b6 	bl	8003e9c <HAL_GetTick>
 8009d30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d32:	e008      	b.n	8009d46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d34:	f7fa f8b2 	bl	8003e9c <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d901      	bls.n	8009d46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e21a      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d46:	4b22      	ldr	r3, [pc, #136]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f0      	beq.n	8009d34 <HAL_RCC_OscConfig+0x45c>
 8009d52:	e018      	b.n	8009d86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d54:	4b1e      	ldr	r3, [pc, #120]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d58:	4a1d      	ldr	r2, [pc, #116]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009d5a:	f023 0301 	bic.w	r3, r3, #1
 8009d5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d60:	f7fa f89c 	bl	8003e9c <HAL_GetTick>
 8009d64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d66:	e008      	b.n	8009d7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d68:	f7fa f898 	bl	8003e9c <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d901      	bls.n	8009d7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e200      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d7a:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1f0      	bne.n	8009d68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0320 	and.w	r3, r3, #32
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d039      	beq.n	8009e06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01c      	beq.n	8009dd4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d9a:	4b0d      	ldr	r3, [pc, #52]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a0c      	ldr	r2, [pc, #48]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009da4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009da6:	f7fa f879 	bl	8003e9c <HAL_GetTick>
 8009daa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009dac:	e008      	b.n	8009dc0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009dae:	f7fa f875 	bl	8003e9c <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d901      	bls.n	8009dc0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e1dd      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009dc0:	4b03      	ldr	r3, [pc, #12]	; (8009dd0 <HAL_RCC_OscConfig+0x4f8>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0f0      	beq.n	8009dae <HAL_RCC_OscConfig+0x4d6>
 8009dcc:	e01b      	b.n	8009e06 <HAL_RCC_OscConfig+0x52e>
 8009dce:	bf00      	nop
 8009dd0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009dd4:	4b9b      	ldr	r3, [pc, #620]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a9a      	ldr	r2, [pc, #616]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009de0:	f7fa f85c 	bl	8003e9c <HAL_GetTick>
 8009de4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009de6:	e008      	b.n	8009dfa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009de8:	f7fa f858 	bl	8003e9c <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e1c0      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009dfa:	4b92      	ldr	r3, [pc, #584]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1f0      	bne.n	8009de8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0304 	and.w	r3, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 8081 	beq.w	8009f16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e14:	4b8c      	ldr	r3, [pc, #560]	; (800a048 <HAL_RCC_OscConfig+0x770>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a8b      	ldr	r2, [pc, #556]	; (800a048 <HAL_RCC_OscConfig+0x770>)
 8009e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e20:	f7fa f83c 	bl	8003e9c <HAL_GetTick>
 8009e24:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e26:	e008      	b.n	8009e3a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e28:	f7fa f838 	bl	8003e9c <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	2b64      	cmp	r3, #100	; 0x64
 8009e34:	d901      	bls.n	8009e3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e1a0      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e3a:	4b83      	ldr	r3, [pc, #524]	; (800a048 <HAL_RCC_OscConfig+0x770>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0f0      	beq.n	8009e28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d106      	bne.n	8009e5c <HAL_RCC_OscConfig+0x584>
 8009e4e:	4b7d      	ldr	r3, [pc, #500]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e52:	4a7c      	ldr	r2, [pc, #496]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e54:	f043 0301 	orr.w	r3, r3, #1
 8009e58:	6713      	str	r3, [r2, #112]	; 0x70
 8009e5a:	e02d      	b.n	8009eb8 <HAL_RCC_OscConfig+0x5e0>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10c      	bne.n	8009e7e <HAL_RCC_OscConfig+0x5a6>
 8009e64:	4b77      	ldr	r3, [pc, #476]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e68:	4a76      	ldr	r2, [pc, #472]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e6a:	f023 0301 	bic.w	r3, r3, #1
 8009e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e70:	4b74      	ldr	r3, [pc, #464]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e74:	4a73      	ldr	r2, [pc, #460]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e76:	f023 0304 	bic.w	r3, r3, #4
 8009e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8009e7c:	e01c      	b.n	8009eb8 <HAL_RCC_OscConfig+0x5e0>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	2b05      	cmp	r3, #5
 8009e84:	d10c      	bne.n	8009ea0 <HAL_RCC_OscConfig+0x5c8>
 8009e86:	4b6f      	ldr	r3, [pc, #444]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e8a:	4a6e      	ldr	r2, [pc, #440]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e8c:	f043 0304 	orr.w	r3, r3, #4
 8009e90:	6713      	str	r3, [r2, #112]	; 0x70
 8009e92:	4b6c      	ldr	r3, [pc, #432]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e96:	4a6b      	ldr	r2, [pc, #428]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009e98:	f043 0301 	orr.w	r3, r3, #1
 8009e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e9e:	e00b      	b.n	8009eb8 <HAL_RCC_OscConfig+0x5e0>
 8009ea0:	4b68      	ldr	r3, [pc, #416]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea4:	4a67      	ldr	r2, [pc, #412]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8009eac:	4b65      	ldr	r3, [pc, #404]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb0:	4a64      	ldr	r2, [pc, #400]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009eb2:	f023 0304 	bic.w	r3, r3, #4
 8009eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d015      	beq.n	8009eec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ec0:	f7f9 ffec 	bl	8003e9c <HAL_GetTick>
 8009ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ec6:	e00a      	b.n	8009ede <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ec8:	f7f9 ffe8 	bl	8003e9c <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d901      	bls.n	8009ede <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e14e      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ede:	4b59      	ldr	r3, [pc, #356]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0ee      	beq.n	8009ec8 <HAL_RCC_OscConfig+0x5f0>
 8009eea:	e014      	b.n	8009f16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009eec:	f7f9 ffd6 	bl	8003e9c <HAL_GetTick>
 8009ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ef2:	e00a      	b.n	8009f0a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ef4:	f7f9 ffd2 	bl	8003e9c <HAL_GetTick>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d901      	bls.n	8009f0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e138      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f0a:	4b4e      	ldr	r3, [pc, #312]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1ee      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 812d 	beq.w	800a17a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009f20:	4b48      	ldr	r3, [pc, #288]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f28:	2b18      	cmp	r3, #24
 8009f2a:	f000 80bd 	beq.w	800a0a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	f040 809e 	bne.w	800a074 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f38:	4b42      	ldr	r3, [pc, #264]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a41      	ldr	r2, [pc, #260]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f44:	f7f9 ffaa 	bl	8003e9c <HAL_GetTick>
 8009f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f4a:	e008      	b.n	8009f5e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f4c:	f7f9 ffa6 	bl	8003e9c <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d901      	bls.n	8009f5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e10e      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f5e:	4b39      	ldr	r3, [pc, #228]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1f0      	bne.n	8009f4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f6a:	4b36      	ldr	r3, [pc, #216]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f6e:	4b37      	ldr	r3, [pc, #220]	; (800a04c <HAL_RCC_OscConfig+0x774>)
 8009f70:	4013      	ands	r3, r2
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f7a:	0112      	lsls	r2, r2, #4
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	4931      	ldr	r1, [pc, #196]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009f80:	4313      	orrs	r3, r2
 8009f82:	628b      	str	r3, [r1, #40]	; 0x28
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f92:	3b01      	subs	r3, #1
 8009f94:	025b      	lsls	r3, r3, #9
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	041b      	lsls	r3, r3, #16
 8009fa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fac:	3b01      	subs	r3, #1
 8009fae:	061b      	lsls	r3, r3, #24
 8009fb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fb4:	4923      	ldr	r1, [pc, #140]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009fba:	4b22      	ldr	r3, [pc, #136]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbe:	4a21      	ldr	r2, [pc, #132]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009fc6:	4b1f      	ldr	r3, [pc, #124]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fca:	4b21      	ldr	r3, [pc, #132]	; (800a050 <HAL_RCC_OscConfig+0x778>)
 8009fcc:	4013      	ands	r3, r2
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009fd2:	00d2      	lsls	r2, r2, #3
 8009fd4:	491b      	ldr	r1, [pc, #108]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009fda:	4b1a      	ldr	r3, [pc, #104]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fde:	f023 020c 	bic.w	r2, r3, #12
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	4917      	ldr	r1, [pc, #92]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009fec:	4b15      	ldr	r3, [pc, #84]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff0:	f023 0202 	bic.w	r2, r3, #2
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff8:	4912      	ldr	r1, [pc, #72]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ffe:	4b11      	ldr	r3, [pc, #68]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	4a10      	ldr	r2, [pc, #64]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a00a:	4b0e      	ldr	r3, [pc, #56]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00e:	4a0d      	ldr	r2, [pc, #52]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a016:	4b0b      	ldr	r3, [pc, #44]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01a:	4a0a      	ldr	r2, [pc, #40]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a01c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a022:	4b08      	ldr	r3, [pc, #32]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4a07      	ldr	r2, [pc, #28]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a028:	f043 0301 	orr.w	r3, r3, #1
 800a02c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a02e:	4b05      	ldr	r3, [pc, #20]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a04      	ldr	r2, [pc, #16]	; (800a044 <HAL_RCC_OscConfig+0x76c>)
 800a034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a03a:	f7f9 ff2f 	bl	8003e9c <HAL_GetTick>
 800a03e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a040:	e011      	b.n	800a066 <HAL_RCC_OscConfig+0x78e>
 800a042:	bf00      	nop
 800a044:	58024400 	.word	0x58024400
 800a048:	58024800 	.word	0x58024800
 800a04c:	fffffc0c 	.word	0xfffffc0c
 800a050:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a054:	f7f9 ff22 	bl	8003e9c <HAL_GetTick>
 800a058:	4602      	mov	r2, r0
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d901      	bls.n	800a066 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e08a      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a066:	4b47      	ldr	r3, [pc, #284]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0f0      	beq.n	800a054 <HAL_RCC_OscConfig+0x77c>
 800a072:	e082      	b.n	800a17a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a074:	4b43      	ldr	r3, [pc, #268]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a42      	ldr	r2, [pc, #264]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a07a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a07e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a080:	f7f9 ff0c 	bl	8003e9c <HAL_GetTick>
 800a084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a086:	e008      	b.n	800a09a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a088:	f7f9 ff08 	bl	8003e9c <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e070      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a09a:	4b3a      	ldr	r3, [pc, #232]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1f0      	bne.n	800a088 <HAL_RCC_OscConfig+0x7b0>
 800a0a6:	e068      	b.n	800a17a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a0a8:	4b36      	ldr	r3, [pc, #216]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a0ae:	4b35      	ldr	r3, [pc, #212]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d031      	beq.n	800a120 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	f003 0203 	and.w	r2, r3, #3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d12a      	bne.n	800a120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	091b      	lsrs	r3, r3, #4
 800a0ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d122      	bne.n	800a120 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d11a      	bne.n	800a120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	0a5b      	lsrs	r3, r3, #9
 800a0ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d111      	bne.n	800a120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	0c1b      	lsrs	r3, r3, #16
 800a100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a108:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d108      	bne.n	800a120 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	0e1b      	lsrs	r3, r3, #24
 800a112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d001      	beq.n	800a124 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e02b      	b.n	800a17c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a124:	4b17      	ldr	r3, [pc, #92]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a128:	08db      	lsrs	r3, r3, #3
 800a12a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a12e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	429a      	cmp	r2, r3
 800a138:	d01f      	beq.n	800a17a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a13a:	4b12      	ldr	r3, [pc, #72]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	4a11      	ldr	r2, [pc, #68]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a140:	f023 0301 	bic.w	r3, r3, #1
 800a144:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a146:	f7f9 fea9 	bl	8003e9c <HAL_GetTick>
 800a14a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a14c:	bf00      	nop
 800a14e:	f7f9 fea5 	bl	8003e9c <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	4293      	cmp	r3, r2
 800a158:	d0f9      	beq.n	800a14e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a15a:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a15c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a15e:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <HAL_RCC_OscConfig+0x8b0>)
 800a160:	4013      	ands	r3, r2
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a166:	00d2      	lsls	r2, r2, #3
 800a168:	4906      	ldr	r1, [pc, #24]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a172:	4a04      	ldr	r2, [pc, #16]	; (800a184 <HAL_RCC_OscConfig+0x8ac>)
 800a174:	f043 0301 	orr.w	r3, r3, #1
 800a178:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3730      	adds	r7, #48	; 0x30
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	58024400 	.word	0x58024400
 800a188:	ffff0007 	.word	0xffff0007

0800a18c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e19c      	b.n	800a4da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a1a0:	4b8a      	ldr	r3, [pc, #552]	; (800a3cc <HAL_RCC_ClockConfig+0x240>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d910      	bls.n	800a1d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1ae:	4b87      	ldr	r3, [pc, #540]	; (800a3cc <HAL_RCC_ClockConfig+0x240>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f023 020f 	bic.w	r2, r3, #15
 800a1b6:	4985      	ldr	r1, [pc, #532]	; (800a3cc <HAL_RCC_ClockConfig+0x240>)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1be:	4b83      	ldr	r3, [pc, #524]	; (800a3cc <HAL_RCC_ClockConfig+0x240>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 030f 	and.w	r3, r3, #15
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d001      	beq.n	800a1d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e184      	b.n	800a4da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d010      	beq.n	800a1fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691a      	ldr	r2, [r3, #16]
 800a1e0:	4b7b      	ldr	r3, [pc, #492]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d908      	bls.n	800a1fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1ec:	4b78      	ldr	r3, [pc, #480]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	4975      	ldr	r1, [pc, #468]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	2b00      	cmp	r3, #0
 800a208:	d010      	beq.n	800a22c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	695a      	ldr	r2, [r3, #20]
 800a20e:	4b70      	ldr	r3, [pc, #448]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a216:	429a      	cmp	r2, r3
 800a218:	d908      	bls.n	800a22c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a21a:	4b6d      	ldr	r3, [pc, #436]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	496a      	ldr	r1, [pc, #424]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0310 	and.w	r3, r3, #16
 800a234:	2b00      	cmp	r3, #0
 800a236:	d010      	beq.n	800a25a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699a      	ldr	r2, [r3, #24]
 800a23c:	4b64      	ldr	r3, [pc, #400]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a244:	429a      	cmp	r2, r3
 800a246:	d908      	bls.n	800a25a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a248:	4b61      	ldr	r3, [pc, #388]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	495e      	ldr	r1, [pc, #376]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a256:	4313      	orrs	r3, r2
 800a258:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 0320 	and.w	r3, r3, #32
 800a262:	2b00      	cmp	r3, #0
 800a264:	d010      	beq.n	800a288 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	69da      	ldr	r2, [r3, #28]
 800a26a:	4b59      	ldr	r3, [pc, #356]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a272:	429a      	cmp	r2, r3
 800a274:	d908      	bls.n	800a288 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a276:	4b56      	ldr	r3, [pc, #344]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	4953      	ldr	r1, [pc, #332]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a284:	4313      	orrs	r3, r2
 800a286:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b00      	cmp	r3, #0
 800a292:	d010      	beq.n	800a2b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	68da      	ldr	r2, [r3, #12]
 800a298:	4b4d      	ldr	r3, [pc, #308]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	f003 030f 	and.w	r3, r3, #15
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d908      	bls.n	800a2b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2a4:	4b4a      	ldr	r3, [pc, #296]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	f023 020f 	bic.w	r2, r3, #15
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	4947      	ldr	r1, [pc, #284]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d055      	beq.n	800a36e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a2c2:	4b43      	ldr	r3, [pc, #268]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	4940      	ldr	r1, [pc, #256]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d107      	bne.n	800a2ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a2dc:	4b3c      	ldr	r3, [pc, #240]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d121      	bne.n	800a32c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e0f6      	b.n	800a4da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d107      	bne.n	800a304 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a2f4:	4b36      	ldr	r3, [pc, #216]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d115      	bne.n	800a32c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e0ea      	b.n	800a4da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d107      	bne.n	800a31c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a30c:	4b30      	ldr	r3, [pc, #192]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a314:	2b00      	cmp	r3, #0
 800a316:	d109      	bne.n	800a32c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e0de      	b.n	800a4da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a31c:	4b2c      	ldr	r3, [pc, #176]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0304 	and.w	r3, r3, #4
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e0d6      	b.n	800a4da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a32c:	4b28      	ldr	r3, [pc, #160]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	f023 0207 	bic.w	r2, r3, #7
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	4925      	ldr	r1, [pc, #148]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a33e:	f7f9 fdad 	bl	8003e9c <HAL_GetTick>
 800a342:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a344:	e00a      	b.n	800a35c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a346:	f7f9 fda9 	bl	8003e9c <HAL_GetTick>
 800a34a:	4602      	mov	r2, r0
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	f241 3288 	movw	r2, #5000	; 0x1388
 800a354:	4293      	cmp	r3, r2
 800a356:	d901      	bls.n	800a35c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e0be      	b.n	800a4da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a35c:	4b1c      	ldr	r3, [pc, #112]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d1eb      	bne.n	800a346 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0302 	and.w	r3, r3, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d010      	beq.n	800a39c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68da      	ldr	r2, [r3, #12]
 800a37e:	4b14      	ldr	r3, [pc, #80]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	f003 030f 	and.w	r3, r3, #15
 800a386:	429a      	cmp	r2, r3
 800a388:	d208      	bcs.n	800a39c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a38a:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	f023 020f 	bic.w	r2, r3, #15
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	490e      	ldr	r1, [pc, #56]	; (800a3d0 <HAL_RCC_ClockConfig+0x244>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a39c:	4b0b      	ldr	r3, [pc, #44]	; (800a3cc <HAL_RCC_ClockConfig+0x240>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 030f 	and.w	r3, r3, #15
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d214      	bcs.n	800a3d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3aa:	4b08      	ldr	r3, [pc, #32]	; (800a3cc <HAL_RCC_ClockConfig+0x240>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f023 020f 	bic.w	r2, r3, #15
 800a3b2:	4906      	ldr	r1, [pc, #24]	; (800a3cc <HAL_RCC_ClockConfig+0x240>)
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3ba:	4b04      	ldr	r3, [pc, #16]	; (800a3cc <HAL_RCC_ClockConfig+0x240>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 030f 	and.w	r3, r3, #15
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d005      	beq.n	800a3d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e086      	b.n	800a4da <HAL_RCC_ClockConfig+0x34e>
 800a3cc:	52002000 	.word	0x52002000
 800a3d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d010      	beq.n	800a402 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	691a      	ldr	r2, [r3, #16]
 800a3e4:	4b3f      	ldr	r3, [pc, #252]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d208      	bcs.n	800a402 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3f0:	4b3c      	ldr	r3, [pc, #240]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a3f2:	699b      	ldr	r3, [r3, #24]
 800a3f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	4939      	ldr	r1, [pc, #228]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0308 	and.w	r3, r3, #8
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d010      	beq.n	800a430 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	695a      	ldr	r2, [r3, #20]
 800a412:	4b34      	ldr	r3, [pc, #208]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d208      	bcs.n	800a430 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a41e:	4b31      	ldr	r3, [pc, #196]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	492e      	ldr	r1, [pc, #184]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a42c:	4313      	orrs	r3, r2
 800a42e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0310 	and.w	r3, r3, #16
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d010      	beq.n	800a45e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	699a      	ldr	r2, [r3, #24]
 800a440:	4b28      	ldr	r3, [pc, #160]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a448:	429a      	cmp	r2, r3
 800a44a:	d208      	bcs.n	800a45e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a44c:	4b25      	ldr	r3, [pc, #148]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a44e:	69db      	ldr	r3, [r3, #28]
 800a450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	4922      	ldr	r1, [pc, #136]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a45a:	4313      	orrs	r3, r2
 800a45c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b00      	cmp	r3, #0
 800a468:	d010      	beq.n	800a48c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	69da      	ldr	r2, [r3, #28]
 800a46e:	4b1d      	ldr	r3, [pc, #116]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a470:	6a1b      	ldr	r3, [r3, #32]
 800a472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a476:	429a      	cmp	r2, r3
 800a478:	d208      	bcs.n	800a48c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a47a:	4b1a      	ldr	r3, [pc, #104]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a47c:	6a1b      	ldr	r3, [r3, #32]
 800a47e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	4917      	ldr	r1, [pc, #92]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a488:	4313      	orrs	r3, r2
 800a48a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a48c:	f000 f844 	bl	800a518 <HAL_RCC_GetSysClockFreq>
 800a490:	4602      	mov	r2, r0
 800a492:	4b14      	ldr	r3, [pc, #80]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	0a1b      	lsrs	r3, r3, #8
 800a498:	f003 030f 	and.w	r3, r3, #15
 800a49c:	4912      	ldr	r1, [pc, #72]	; (800a4e8 <HAL_RCC_ClockConfig+0x35c>)
 800a49e:	5ccb      	ldrb	r3, [r1, r3]
 800a4a0:	f003 031f 	and.w	r3, r3, #31
 800a4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4aa:	4b0e      	ldr	r3, [pc, #56]	; (800a4e4 <HAL_RCC_ClockConfig+0x358>)
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	f003 030f 	and.w	r3, r3, #15
 800a4b2:	4a0d      	ldr	r2, [pc, #52]	; (800a4e8 <HAL_RCC_ClockConfig+0x35c>)
 800a4b4:	5cd3      	ldrb	r3, [r2, r3]
 800a4b6:	f003 031f 	and.w	r3, r3, #31
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c0:	4a0a      	ldr	r2, [pc, #40]	; (800a4ec <HAL_RCC_ClockConfig+0x360>)
 800a4c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a4c4:	4a0a      	ldr	r2, [pc, #40]	; (800a4f0 <HAL_RCC_ClockConfig+0x364>)
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a4ca:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <HAL_RCC_ClockConfig+0x368>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7f9 fc9a 	bl	8003e08 <HAL_InitTick>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	58024400 	.word	0x58024400
 800a4e8:	0801ee00 	.word	0x0801ee00
 800a4ec:	20000014 	.word	0x20000014
 800a4f0:	20000010 	.word	0x20000010
 800a4f4:	20000024 	.word	0x20000024

0800a4f8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a4fc:	4b05      	ldr	r3, [pc, #20]	; (800a514 <HAL_RCC_EnableCSS+0x1c>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a04      	ldr	r2, [pc, #16]	; (800a514 <HAL_RCC_EnableCSS+0x1c>)
 800a502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a506:	6013      	str	r3, [r2, #0]
}
 800a508:	bf00      	nop
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	58024400 	.word	0x58024400

0800a518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a518:	b480      	push	{r7}
 800a51a:	b089      	sub	sp, #36	; 0x24
 800a51c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a51e:	4bb3      	ldr	r3, [pc, #716]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a526:	2b18      	cmp	r3, #24
 800a528:	f200 8155 	bhi.w	800a7d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800a52c:	a201      	add	r2, pc, #4	; (adr r2, 800a534 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a532:	bf00      	nop
 800a534:	0800a599 	.word	0x0800a599
 800a538:	0800a7d7 	.word	0x0800a7d7
 800a53c:	0800a7d7 	.word	0x0800a7d7
 800a540:	0800a7d7 	.word	0x0800a7d7
 800a544:	0800a7d7 	.word	0x0800a7d7
 800a548:	0800a7d7 	.word	0x0800a7d7
 800a54c:	0800a7d7 	.word	0x0800a7d7
 800a550:	0800a7d7 	.word	0x0800a7d7
 800a554:	0800a5bf 	.word	0x0800a5bf
 800a558:	0800a7d7 	.word	0x0800a7d7
 800a55c:	0800a7d7 	.word	0x0800a7d7
 800a560:	0800a7d7 	.word	0x0800a7d7
 800a564:	0800a7d7 	.word	0x0800a7d7
 800a568:	0800a7d7 	.word	0x0800a7d7
 800a56c:	0800a7d7 	.word	0x0800a7d7
 800a570:	0800a7d7 	.word	0x0800a7d7
 800a574:	0800a5c5 	.word	0x0800a5c5
 800a578:	0800a7d7 	.word	0x0800a7d7
 800a57c:	0800a7d7 	.word	0x0800a7d7
 800a580:	0800a7d7 	.word	0x0800a7d7
 800a584:	0800a7d7 	.word	0x0800a7d7
 800a588:	0800a7d7 	.word	0x0800a7d7
 800a58c:	0800a7d7 	.word	0x0800a7d7
 800a590:	0800a7d7 	.word	0x0800a7d7
 800a594:	0800a5cb 	.word	0x0800a5cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a598:	4b94      	ldr	r3, [pc, #592]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0320 	and.w	r3, r3, #32
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d009      	beq.n	800a5b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5a4:	4b91      	ldr	r3, [pc, #580]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	08db      	lsrs	r3, r3, #3
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	4a90      	ldr	r2, [pc, #576]	; (800a7f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a5b6:	e111      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a5b8:	4b8d      	ldr	r3, [pc, #564]	; (800a7f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5ba:	61bb      	str	r3, [r7, #24]
      break;
 800a5bc:	e10e      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a5be:	4b8d      	ldr	r3, [pc, #564]	; (800a7f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a5c0:	61bb      	str	r3, [r7, #24]
      break;
 800a5c2:	e10b      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a5c4:	4b8c      	ldr	r3, [pc, #560]	; (800a7f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a5c6:	61bb      	str	r3, [r7, #24]
      break;
 800a5c8:	e108      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5ca:	4b88      	ldr	r3, [pc, #544]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a5d4:	4b85      	ldr	r3, [pc, #532]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d8:	091b      	lsrs	r3, r3, #4
 800a5da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a5e0:	4b82      	ldr	r3, [pc, #520]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a5ea:	4b80      	ldr	r3, [pc, #512]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ee:	08db      	lsrs	r3, r3, #3
 800a5f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	fb02 f303 	mul.w	r3, r2, r3
 800a5fa:	ee07 3a90 	vmov	s15, r3
 800a5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a602:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80e1 	beq.w	800a7d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b02      	cmp	r3, #2
 800a612:	f000 8083 	beq.w	800a71c <HAL_RCC_GetSysClockFreq+0x204>
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2b02      	cmp	r3, #2
 800a61a:	f200 80a1 	bhi.w	800a760 <HAL_RCC_GetSysClockFreq+0x248>
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <HAL_RCC_GetSysClockFreq+0x114>
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d056      	beq.n	800a6d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a62a:	e099      	b.n	800a760 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a62c:	4b6f      	ldr	r3, [pc, #444]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b00      	cmp	r3, #0
 800a636:	d02d      	beq.n	800a694 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a638:	4b6c      	ldr	r3, [pc, #432]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	08db      	lsrs	r3, r3, #3
 800a63e:	f003 0303 	and.w	r3, r3, #3
 800a642:	4a6b      	ldr	r2, [pc, #428]	; (800a7f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a644:	fa22 f303 	lsr.w	r3, r2, r3
 800a648:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	ee07 3a90 	vmov	s15, r3
 800a650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a662:	4b62      	ldr	r3, [pc, #392]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a66a:	ee07 3a90 	vmov	s15, r3
 800a66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a672:	ed97 6a02 	vldr	s12, [r7, #8]
 800a676:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a7fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a68e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a692:	e087      	b.n	800a7a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	ee07 3a90 	vmov	s15, r3
 800a69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a69e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a800 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a6a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6a6:	4b51      	ldr	r3, [pc, #324]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ae:	ee07 3a90 	vmov	s15, r3
 800a6b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a7fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6d6:	e065      	b.n	800a7a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	ee07 3a90 	vmov	s15, r3
 800a6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a804 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ea:	4b40      	ldr	r3, [pc, #256]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f2:	ee07 3a90 	vmov	s15, r3
 800a6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a7fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a70a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a716:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a71a:	e043      	b.n	800a7a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a726:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a808 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a72e:	4b2f      	ldr	r3, [pc, #188]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a73e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a742:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a7fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a74e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a75e:	e021      	b.n	800a7a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	ee07 3a90 	vmov	s15, r3
 800a766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a804 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a772:	4b1e      	ldr	r3, [pc, #120]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77a:	ee07 3a90 	vmov	s15, r3
 800a77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a782:	ed97 6a02 	vldr	s12, [r7, #8]
 800a786:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a7fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800a78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a79e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a7a4:	4b11      	ldr	r3, [pc, #68]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a8:	0a5b      	lsrs	r3, r3, #9
 800a7aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	ee07 3a90 	vmov	s15, r3
 800a7b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a7bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7c8:	ee17 3a90 	vmov	r3, s15
 800a7cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a7ce:	e005      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	61bb      	str	r3, [r7, #24]
      break;
 800a7d4:	e002      	b.n	800a7dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a7d6:	4b07      	ldr	r3, [pc, #28]	; (800a7f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a7d8:	61bb      	str	r3, [r7, #24]
      break;
 800a7da:	bf00      	nop
  }

  return sysclockfreq;
 800a7dc:	69bb      	ldr	r3, [r7, #24]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3724      	adds	r7, #36	; 0x24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	58024400 	.word	0x58024400
 800a7f0:	03d09000 	.word	0x03d09000
 800a7f4:	003d0900 	.word	0x003d0900
 800a7f8:	00989680 	.word	0x00989680
 800a7fc:	46000000 	.word	0x46000000
 800a800:	4c742400 	.word	0x4c742400
 800a804:	4a742400 	.word	0x4a742400
 800a808:	4b189680 	.word	0x4b189680

0800a80c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a812:	f7ff fe81 	bl	800a518 <HAL_RCC_GetSysClockFreq>
 800a816:	4602      	mov	r2, r0
 800a818:	4b10      	ldr	r3, [pc, #64]	; (800a85c <HAL_RCC_GetHCLKFreq+0x50>)
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	0a1b      	lsrs	r3, r3, #8
 800a81e:	f003 030f 	and.w	r3, r3, #15
 800a822:	490f      	ldr	r1, [pc, #60]	; (800a860 <HAL_RCC_GetHCLKFreq+0x54>)
 800a824:	5ccb      	ldrb	r3, [r1, r3]
 800a826:	f003 031f 	and.w	r3, r3, #31
 800a82a:	fa22 f303 	lsr.w	r3, r2, r3
 800a82e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a830:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <HAL_RCC_GetHCLKFreq+0x50>)
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	f003 030f 	and.w	r3, r3, #15
 800a838:	4a09      	ldr	r2, [pc, #36]	; (800a860 <HAL_RCC_GetHCLKFreq+0x54>)
 800a83a:	5cd3      	ldrb	r3, [r2, r3]
 800a83c:	f003 031f 	and.w	r3, r3, #31
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	fa22 f303 	lsr.w	r3, r2, r3
 800a846:	4a07      	ldr	r2, [pc, #28]	; (800a864 <HAL_RCC_GetHCLKFreq+0x58>)
 800a848:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a84a:	4a07      	ldr	r2, [pc, #28]	; (800a868 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a850:	4b04      	ldr	r3, [pc, #16]	; (800a864 <HAL_RCC_GetHCLKFreq+0x58>)
 800a852:	681b      	ldr	r3, [r3, #0]
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	58024400 	.word	0x58024400
 800a860:	0801ee00 	.word	0x0801ee00
 800a864:	20000014 	.word	0x20000014
 800a868:	20000010 	.word	0x20000010

0800a86c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a870:	f7ff ffcc 	bl	800a80c <HAL_RCC_GetHCLKFreq>
 800a874:	4602      	mov	r2, r0
 800a876:	4b06      	ldr	r3, [pc, #24]	; (800a890 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	091b      	lsrs	r3, r3, #4
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	4904      	ldr	r1, [pc, #16]	; (800a894 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a882:	5ccb      	ldrb	r3, [r1, r3]
 800a884:	f003 031f 	and.w	r3, r3, #31
 800a888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	58024400 	.word	0x58024400
 800a894:	0801ee00 	.word	0x0801ee00

0800a898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a89c:	f7ff ffb6 	bl	800a80c <HAL_RCC_GetHCLKFreq>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	0a1b      	lsrs	r3, r3, #8
 800a8a8:	f003 0307 	and.w	r3, r3, #7
 800a8ac:	4904      	ldr	r1, [pc, #16]	; (800a8c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8ae:	5ccb      	ldrb	r3, [r1, r3]
 800a8b0:	f003 031f 	and.w	r3, r3, #31
 800a8b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	58024400 	.word	0x58024400
 800a8c0:	0801ee00 	.word	0x0801ee00

0800a8c4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a8c8:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d4:	d105      	bne.n	800a8e2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a8d6:	f000 f809 	bl	800a8ec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a8da:	4b03      	ldr	r3, [pc, #12]	; (800a8e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a8dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a8e0:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	58024400 	.word	0x58024400

0800a8ec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
	...

0800a8fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a900:	b0ca      	sub	sp, #296	; 0x128
 800a902:	af00      	add	r7, sp, #0
 800a904:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a908:	2300      	movs	r3, #0
 800a90a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a90e:	2300      	movs	r3, #0
 800a910:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a920:	2500      	movs	r5, #0
 800a922:	ea54 0305 	orrs.w	r3, r4, r5
 800a926:	d049      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a92c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a92e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a932:	d02f      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a934:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a938:	d828      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a93a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a93e:	d01a      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a944:	d822      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a94a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a94e:	d007      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a950:	e01c      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a952:	4bb8      	ldr	r3, [pc, #736]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a956:	4ab7      	ldr	r2, [pc, #732]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a95c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a95e:	e01a      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a964:	3308      	adds	r3, #8
 800a966:	2102      	movs	r1, #2
 800a968:	4618      	mov	r0, r3
 800a96a:	f002 fbb7 	bl	800d0dc <RCCEx_PLL2_Config>
 800a96e:	4603      	mov	r3, r0
 800a970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a974:	e00f      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a97a:	3328      	adds	r3, #40	; 0x28
 800a97c:	2102      	movs	r1, #2
 800a97e:	4618      	mov	r0, r3
 800a980:	f002 fc5e 	bl	800d240 <RCCEx_PLL3_Config>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a98a:	e004      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a992:	e000      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a994:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a99e:	4ba5      	ldr	r3, [pc, #660]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9ac:	4aa1      	ldr	r2, [pc, #644]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9ae:	430b      	orrs	r3, r1
 800a9b0:	6513      	str	r3, [r2, #80]	; 0x50
 800a9b2:	e003      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a9c8:	f04f 0900 	mov.w	r9, #0
 800a9cc:	ea58 0309 	orrs.w	r3, r8, r9
 800a9d0:	d047      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d82a      	bhi.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a9dc:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e2:	bf00      	nop
 800a9e4:	0800a9f9 	.word	0x0800a9f9
 800a9e8:	0800aa07 	.word	0x0800aa07
 800a9ec:	0800aa1d 	.word	0x0800aa1d
 800a9f0:	0800aa3b 	.word	0x0800aa3b
 800a9f4:	0800aa3b 	.word	0x0800aa3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f8:	4b8e      	ldr	r3, [pc, #568]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	4a8d      	ldr	r2, [pc, #564]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa04:	e01a      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f002 fb64 	bl	800d0dc <RCCEx_PLL2_Config>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa1a:	e00f      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa20:	3328      	adds	r3, #40	; 0x28
 800aa22:	2100      	movs	r1, #0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f002 fc0b 	bl	800d240 <RCCEx_PLL3_Config>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa30:	e004      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa38:	e000      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aa3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10a      	bne.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa44:	4b7b      	ldr	r3, [pc, #492]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa48:	f023 0107 	bic.w	r1, r3, #7
 800aa4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa52:	4a78      	ldr	r2, [pc, #480]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa54:	430b      	orrs	r3, r1
 800aa56:	6513      	str	r3, [r2, #80]	; 0x50
 800aa58:	e003      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aa62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800aa6e:	f04f 0b00 	mov.w	fp, #0
 800aa72:	ea5a 030b 	orrs.w	r3, sl, fp
 800aa76:	d04c      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800aa78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa82:	d030      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800aa84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa88:	d829      	bhi.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aa8a:	2bc0      	cmp	r3, #192	; 0xc0
 800aa8c:	d02d      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aa8e:	2bc0      	cmp	r3, #192	; 0xc0
 800aa90:	d825      	bhi.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aa92:	2b80      	cmp	r3, #128	; 0x80
 800aa94:	d018      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800aa96:	2b80      	cmp	r3, #128	; 0x80
 800aa98:	d821      	bhi.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800aa9e:	2b40      	cmp	r3, #64	; 0x40
 800aaa0:	d007      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800aaa2:	e01c      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa4:	4b63      	ldr	r3, [pc, #396]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa8:	4a62      	ldr	r2, [pc, #392]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aab0:	e01c      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab6:	3308      	adds	r3, #8
 800aab8:	2100      	movs	r1, #0
 800aaba:	4618      	mov	r0, r3
 800aabc:	f002 fb0e 	bl	800d0dc <RCCEx_PLL2_Config>
 800aac0:	4603      	mov	r3, r0
 800aac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aac6:	e011      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aacc:	3328      	adds	r3, #40	; 0x28
 800aace:	2100      	movs	r1, #0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f002 fbb5 	bl	800d240 <RCCEx_PLL3_Config>
 800aad6:	4603      	mov	r3, r0
 800aad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aadc:	e006      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aae4:	e002      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aae6:	bf00      	nop
 800aae8:	e000      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aaea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aaf4:	4b4f      	ldr	r3, [pc, #316]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800aafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab02:	4a4c      	ldr	r2, [pc, #304]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab04:	430b      	orrs	r3, r1
 800ab06:	6513      	str	r3, [r2, #80]	; 0x50
 800ab08:	e003      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ab12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ab1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ab22:	2300      	movs	r3, #0
 800ab24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ab28:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	d053      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ab32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab3e:	d035      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ab40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab44:	d82e      	bhi.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab46:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab4a:	d031      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ab4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab50:	d828      	bhi.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab56:	d01a      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ab58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab5c:	d822      	bhi.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ab62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab66:	d007      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ab68:	e01c      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab6a:	4b32      	ldr	r3, [pc, #200]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	4a31      	ldr	r2, [pc, #196]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab76:	e01c      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7c:	3308      	adds	r3, #8
 800ab7e:	2100      	movs	r1, #0
 800ab80:	4618      	mov	r0, r3
 800ab82:	f002 faab 	bl	800d0dc <RCCEx_PLL2_Config>
 800ab86:	4603      	mov	r3, r0
 800ab88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab8c:	e011      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab92:	3328      	adds	r3, #40	; 0x28
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f002 fb52 	bl	800d240 <RCCEx_PLL3_Config>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aba2:	e006      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abaa:	e002      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800abac:	bf00      	nop
 800abae:	e000      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800abb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10b      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800abba:	4b1e      	ldr	r3, [pc, #120]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abbe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800abc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abca:	4a1a      	ldr	r2, [pc, #104]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abcc:	430b      	orrs	r3, r1
 800abce:	6593      	str	r3, [r2, #88]	; 0x58
 800abd0:	e003      	b.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800abda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800abe6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800abea:	2300      	movs	r3, #0
 800abec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800abf0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800abf4:	460b      	mov	r3, r1
 800abf6:	4313      	orrs	r3, r2
 800abf8:	d056      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800abfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac06:	d038      	beq.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ac08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac0c:	d831      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac12:	d034      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ac14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac18:	d82b      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac1e:	d01d      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ac20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac24:	d825      	bhi.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d006      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ac2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac2e:	d00a      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ac30:	e01f      	b.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ac32:	bf00      	nop
 800ac34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac38:	4ba2      	ldr	r3, [pc, #648]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3c:	4aa1      	ldr	r2, [pc, #644]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac44:	e01c      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f002 fa44 	bl	800d0dc <RCCEx_PLL2_Config>
 800ac54:	4603      	mov	r3, r0
 800ac56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac5a:	e011      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac60:	3328      	adds	r3, #40	; 0x28
 800ac62:	2100      	movs	r1, #0
 800ac64:	4618      	mov	r0, r3
 800ac66:	f002 faeb 	bl	800d240 <RCCEx_PLL3_Config>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac70:	e006      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac78:	e002      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ac7a:	bf00      	nop
 800ac7c:	e000      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ac7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10b      	bne.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ac88:	4b8e      	ldr	r3, [pc, #568]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ac90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac98:	4a8a      	ldr	r2, [pc, #552]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac9a:	430b      	orrs	r3, r1
 800ac9c:	6593      	str	r3, [r2, #88]	; 0x58
 800ac9e:	e003      	b.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800acb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800acb8:	2300      	movs	r3, #0
 800acba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800acbe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800acc2:	460b      	mov	r3, r1
 800acc4:	4313      	orrs	r3, r2
 800acc6:	d03a      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800acc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800accc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acce:	2b30      	cmp	r3, #48	; 0x30
 800acd0:	d01f      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800acd2:	2b30      	cmp	r3, #48	; 0x30
 800acd4:	d819      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800acd6:	2b20      	cmp	r3, #32
 800acd8:	d00c      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800acda:	2b20      	cmp	r3, #32
 800acdc:	d815      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d019      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ace2:	2b10      	cmp	r3, #16
 800ace4:	d111      	bne.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ace6:	4b77      	ldr	r3, [pc, #476]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	4a76      	ldr	r2, [pc, #472]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800acf2:	e011      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf8:	3308      	adds	r3, #8
 800acfa:	2102      	movs	r1, #2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f002 f9ed 	bl	800d0dc <RCCEx_PLL2_Config>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ad08:	e006      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad10:	e002      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ad12:	bf00      	nop
 800ad14:	e000      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ad16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10a      	bne.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ad20:	4b68      	ldr	r3, [pc, #416]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad24:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ad28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad2e:	4a65      	ldr	r2, [pc, #404]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad30:	430b      	orrs	r3, r1
 800ad32:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad34:	e003      	b.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ad3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ad4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	d051      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ad5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad68:	d035      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ad6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad6e:	d82e      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ad70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad74:	d031      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ad76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad7a:	d828      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ad7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad80:	d01a      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ad82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad86:	d822      	bhi.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ad8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad90:	d007      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ad92:	e01c      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad94:	4b4b      	ldr	r3, [pc, #300]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	4a4a      	ldr	r2, [pc, #296]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ada0:	e01c      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ada2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada6:	3308      	adds	r3, #8
 800ada8:	2100      	movs	r1, #0
 800adaa:	4618      	mov	r0, r3
 800adac:	f002 f996 	bl	800d0dc <RCCEx_PLL2_Config>
 800adb0:	4603      	mov	r3, r0
 800adb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800adb6:	e011      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adbc:	3328      	adds	r3, #40	; 0x28
 800adbe:	2100      	movs	r1, #0
 800adc0:	4618      	mov	r0, r3
 800adc2:	f002 fa3d 	bl	800d240 <RCCEx_PLL3_Config>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800adcc:	e006      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800add4:	e002      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800add6:	bf00      	nop
 800add8:	e000      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800adda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800addc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ade4:	4b37      	ldr	r3, [pc, #220]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ade6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800adec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adf2:	4a34      	ldr	r2, [pc, #208]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adf4:	430b      	orrs	r3, r1
 800adf6:	6513      	str	r3, [r2, #80]	; 0x50
 800adf8:	e003      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ae02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ae0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae12:	2300      	movs	r3, #0
 800ae14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ae18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	d056      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ae22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae2c:	d033      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ae2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae32:	d82c      	bhi.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae38:	d02f      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ae3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ae3e:	d826      	bhi.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae44:	d02b      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ae46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ae4a:	d820      	bhi.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae50:	d012      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ae52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae56:	d81a      	bhi.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d022      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ae5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae60:	d115      	bne.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae66:	3308      	adds	r3, #8
 800ae68:	2101      	movs	r1, #1
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f002 f936 	bl	800d0dc <RCCEx_PLL2_Config>
 800ae70:	4603      	mov	r3, r0
 800ae72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae76:	e015      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae7c:	3328      	adds	r3, #40	; 0x28
 800ae7e:	2101      	movs	r1, #1
 800ae80:	4618      	mov	r0, r3
 800ae82:	f002 f9dd 	bl	800d240 <RCCEx_PLL3_Config>
 800ae86:	4603      	mov	r3, r0
 800ae88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae8c:	e00a      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae94:	e006      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae96:	bf00      	nop
 800ae98:	e004      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae9a:	bf00      	nop
 800ae9c:	e002      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae9e:	bf00      	nop
 800aea0:	e000      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800aea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10d      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aeac:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aeae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800aeb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aeba:	4a02      	ldr	r2, [pc, #8]	; (800aec4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aebc:	430b      	orrs	r3, r1
 800aebe:	6513      	str	r3, [r2, #80]	; 0x50
 800aec0:	e006      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aec2:	bf00      	nop
 800aec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800aedc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aee0:	2300      	movs	r3, #0
 800aee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aee6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800aeea:	460b      	mov	r3, r1
 800aeec:	4313      	orrs	r3, r2
 800aeee:	d055      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aefc:	d033      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800aefe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af02:	d82c      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af08:	d02f      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800af0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af0e:	d826      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af14:	d02b      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800af16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af1a:	d820      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af20:	d012      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800af22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af26:	d81a      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d022      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800af2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af30:	d115      	bne.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af36:	3308      	adds	r3, #8
 800af38:	2101      	movs	r1, #1
 800af3a:	4618      	mov	r0, r3
 800af3c:	f002 f8ce 	bl	800d0dc <RCCEx_PLL2_Config>
 800af40:	4603      	mov	r3, r0
 800af42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800af46:	e015      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4c:	3328      	adds	r3, #40	; 0x28
 800af4e:	2101      	movs	r1, #1
 800af50:	4618      	mov	r0, r3
 800af52:	f002 f975 	bl	800d240 <RCCEx_PLL3_Config>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800af5c:	e00a      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af64:	e006      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af66:	bf00      	nop
 800af68:	e004      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af6a:	bf00      	nop
 800af6c:	e002      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af6e:	bf00      	nop
 800af70:	e000      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10b      	bne.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800af7c:	4ba3      	ldr	r3, [pc, #652]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af80:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800af84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af8c:	4a9f      	ldr	r2, [pc, #636]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af8e:	430b      	orrs	r3, r1
 800af90:	6593      	str	r3, [r2, #88]	; 0x58
 800af92:	e003      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800afa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800afac:	2300      	movs	r3, #0
 800afae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800afb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800afb6:	460b      	mov	r3, r1
 800afb8:	4313      	orrs	r3, r2
 800afba:	d037      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800afbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afc6:	d00e      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800afc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afcc:	d816      	bhi.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d018      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800afd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afd6:	d111      	bne.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afd8:	4b8c      	ldr	r3, [pc, #560]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	4a8b      	ldr	r2, [pc, #556]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800afe4:	e00f      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afea:	3308      	adds	r3, #8
 800afec:	2101      	movs	r1, #1
 800afee:	4618      	mov	r0, r3
 800aff0:	f002 f874 	bl	800d0dc <RCCEx_PLL2_Config>
 800aff4:	4603      	mov	r3, r0
 800aff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800affa:	e004      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b002:	e000      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10a      	bne.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b00e:	4b7f      	ldr	r3, [pc, #508]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b012:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01c:	4a7b      	ldr	r2, [pc, #492]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b01e:	430b      	orrs	r3, r1
 800b020:	6513      	str	r3, [r2, #80]	; 0x50
 800b022:	e003      	b.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b03c:	2300      	movs	r3, #0
 800b03e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b042:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b046:	460b      	mov	r3, r1
 800b048:	4313      	orrs	r3, r2
 800b04a:	d039      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b052:	2b03      	cmp	r3, #3
 800b054:	d81c      	bhi.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b056:	a201      	add	r2, pc, #4	; (adr r2, 800b05c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05c:	0800b099 	.word	0x0800b099
 800b060:	0800b06d 	.word	0x0800b06d
 800b064:	0800b07b 	.word	0x0800b07b
 800b068:	0800b099 	.word	0x0800b099
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b06c:	4b67      	ldr	r3, [pc, #412]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	4a66      	ldr	r2, [pc, #408]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b078:	e00f      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b07e:	3308      	adds	r3, #8
 800b080:	2102      	movs	r1, #2
 800b082:	4618      	mov	r0, r3
 800b084:	f002 f82a 	bl	800d0dc <RCCEx_PLL2_Config>
 800b088:	4603      	mov	r3, r0
 800b08a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b08e:	e004      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b096:	e000      	b.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b09a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10a      	bne.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b0a2:	4b5a      	ldr	r3, [pc, #360]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a6:	f023 0103 	bic.w	r1, r3, #3
 800b0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0b0:	4a56      	ldr	r2, [pc, #344]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0b2:	430b      	orrs	r3, r1
 800b0b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0b6:	e003      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b0cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	f000 809f 	beq.w	800b220 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b0e2:	4b4b      	ldr	r3, [pc, #300]	; (800b210 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a4a      	ldr	r2, [pc, #296]	; (800b210 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b0e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b0ee:	f7f8 fed5 	bl	8003e9c <HAL_GetTick>
 800b0f2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0f6:	e00b      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0f8:	f7f8 fed0 	bl	8003e9c <HAL_GetTick>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	2b64      	cmp	r3, #100	; 0x64
 800b106:	d903      	bls.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b10e:	e005      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b110:	4b3f      	ldr	r3, [pc, #252]	; (800b210 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d0ed      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b11c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b120:	2b00      	cmp	r3, #0
 800b122:	d179      	bne.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b124:	4b39      	ldr	r3, [pc, #228]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b126:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b130:	4053      	eors	r3, r2
 800b132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b136:	2b00      	cmp	r3, #0
 800b138:	d015      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b13a:	4b34      	ldr	r3, [pc, #208]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b13c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b13e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b142:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b146:	4b31      	ldr	r3, [pc, #196]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b14a:	4a30      	ldr	r2, [pc, #192]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b14c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b150:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b152:	4b2e      	ldr	r3, [pc, #184]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b156:	4a2d      	ldr	r2, [pc, #180]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b15c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b15e:	4a2b      	ldr	r2, [pc, #172]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b160:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b164:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b172:	d118      	bne.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b174:	f7f8 fe92 	bl	8003e9c <HAL_GetTick>
 800b178:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b17c:	e00d      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b17e:	f7f8 fe8d 	bl	8003e9c <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b188:	1ad2      	subs	r2, r2, r3
 800b18a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b18e:	429a      	cmp	r2, r3
 800b190:	d903      	bls.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b198:	e005      	b.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b19a:	4b1c      	ldr	r3, [pc, #112]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b19e:	f003 0302 	and.w	r3, r3, #2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0eb      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d129      	bne.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1be:	d10e      	bne.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b1c0:	4b12      	ldr	r3, [pc, #72]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1d0:	091a      	lsrs	r2, r3, #4
 800b1d2:	4b10      	ldr	r3, [pc, #64]	; (800b214 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	4a0d      	ldr	r2, [pc, #52]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	6113      	str	r3, [r2, #16]
 800b1dc:	e005      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b1de:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b1e8:	6113      	str	r3, [r2, #16]
 800b1ea:	4b08      	ldr	r3, [pc, #32]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1fa:	4a04      	ldr	r2, [pc, #16]	; (800b20c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	6713      	str	r3, [r2, #112]	; 0x70
 800b200:	e00e      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b20a:	e009      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b20c:	58024400 	.word	0x58024400
 800b210:	58024800 	.word	0x58024800
 800b214:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b21c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f002 0301 	and.w	r3, r2, #1
 800b22c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b230:	2300      	movs	r3, #0
 800b232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b236:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b23a:	460b      	mov	r3, r1
 800b23c:	4313      	orrs	r3, r2
 800b23e:	f000 8089 	beq.w	800b354 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b248:	2b28      	cmp	r3, #40	; 0x28
 800b24a:	d86b      	bhi.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b24c:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b252:	bf00      	nop
 800b254:	0800b32d 	.word	0x0800b32d
 800b258:	0800b325 	.word	0x0800b325
 800b25c:	0800b325 	.word	0x0800b325
 800b260:	0800b325 	.word	0x0800b325
 800b264:	0800b325 	.word	0x0800b325
 800b268:	0800b325 	.word	0x0800b325
 800b26c:	0800b325 	.word	0x0800b325
 800b270:	0800b325 	.word	0x0800b325
 800b274:	0800b2f9 	.word	0x0800b2f9
 800b278:	0800b325 	.word	0x0800b325
 800b27c:	0800b325 	.word	0x0800b325
 800b280:	0800b325 	.word	0x0800b325
 800b284:	0800b325 	.word	0x0800b325
 800b288:	0800b325 	.word	0x0800b325
 800b28c:	0800b325 	.word	0x0800b325
 800b290:	0800b325 	.word	0x0800b325
 800b294:	0800b30f 	.word	0x0800b30f
 800b298:	0800b325 	.word	0x0800b325
 800b29c:	0800b325 	.word	0x0800b325
 800b2a0:	0800b325 	.word	0x0800b325
 800b2a4:	0800b325 	.word	0x0800b325
 800b2a8:	0800b325 	.word	0x0800b325
 800b2ac:	0800b325 	.word	0x0800b325
 800b2b0:	0800b325 	.word	0x0800b325
 800b2b4:	0800b32d 	.word	0x0800b32d
 800b2b8:	0800b325 	.word	0x0800b325
 800b2bc:	0800b325 	.word	0x0800b325
 800b2c0:	0800b325 	.word	0x0800b325
 800b2c4:	0800b325 	.word	0x0800b325
 800b2c8:	0800b325 	.word	0x0800b325
 800b2cc:	0800b325 	.word	0x0800b325
 800b2d0:	0800b325 	.word	0x0800b325
 800b2d4:	0800b32d 	.word	0x0800b32d
 800b2d8:	0800b325 	.word	0x0800b325
 800b2dc:	0800b325 	.word	0x0800b325
 800b2e0:	0800b325 	.word	0x0800b325
 800b2e4:	0800b325 	.word	0x0800b325
 800b2e8:	0800b325 	.word	0x0800b325
 800b2ec:	0800b325 	.word	0x0800b325
 800b2f0:	0800b325 	.word	0x0800b325
 800b2f4:	0800b32d 	.word	0x0800b32d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2fc:	3308      	adds	r3, #8
 800b2fe:	2101      	movs	r1, #1
 800b300:	4618      	mov	r0, r3
 800b302:	f001 feeb 	bl	800d0dc <RCCEx_PLL2_Config>
 800b306:	4603      	mov	r3, r0
 800b308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b30c:	e00f      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b30e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b312:	3328      	adds	r3, #40	; 0x28
 800b314:	2101      	movs	r1, #1
 800b316:	4618      	mov	r0, r3
 800b318:	f001 ff92 	bl	800d240 <RCCEx_PLL3_Config>
 800b31c:	4603      	mov	r3, r0
 800b31e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b322:	e004      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b32a:	e000      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b32c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b32e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10a      	bne.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b336:	4bbf      	ldr	r3, [pc, #764]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b344:	4abb      	ldr	r2, [pc, #748]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b346:	430b      	orrs	r3, r1
 800b348:	6553      	str	r3, [r2, #84]	; 0x54
 800b34a:	e003      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b34c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	f002 0302 	and.w	r3, r2, #2
 800b360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b364:	2300      	movs	r3, #0
 800b366:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b36a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b36e:	460b      	mov	r3, r1
 800b370:	4313      	orrs	r3, r2
 800b372:	d041      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b37a:	2b05      	cmp	r3, #5
 800b37c:	d824      	bhi.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b37e:	a201      	add	r2, pc, #4	; (adr r2, 800b384 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b384:	0800b3d1 	.word	0x0800b3d1
 800b388:	0800b39d 	.word	0x0800b39d
 800b38c:	0800b3b3 	.word	0x0800b3b3
 800b390:	0800b3d1 	.word	0x0800b3d1
 800b394:	0800b3d1 	.word	0x0800b3d1
 800b398:	0800b3d1 	.word	0x0800b3d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f001 fe99 	bl	800d0dc <RCCEx_PLL2_Config>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b3b0:	e00f      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b6:	3328      	adds	r3, #40	; 0x28
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f001 ff40 	bl	800d240 <RCCEx_PLL3_Config>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b3c6:	e004      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3ce:	e000      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b3d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10a      	bne.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b3da:	4b96      	ldr	r3, [pc, #600]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3de:	f023 0107 	bic.w	r1, r3, #7
 800b3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3e8:	4a92      	ldr	r2, [pc, #584]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3ea:	430b      	orrs	r3, r1
 800b3ec:	6553      	str	r3, [r2, #84]	; 0x54
 800b3ee:	e003      	b.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f002 0304 	and.w	r3, r2, #4
 800b404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b408:	2300      	movs	r3, #0
 800b40a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b40e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b412:	460b      	mov	r3, r1
 800b414:	4313      	orrs	r3, r2
 800b416:	d044      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b41c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b420:	2b05      	cmp	r3, #5
 800b422:	d825      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b424:	a201      	add	r2, pc, #4	; (adr r2, 800b42c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42a:	bf00      	nop
 800b42c:	0800b479 	.word	0x0800b479
 800b430:	0800b445 	.word	0x0800b445
 800b434:	0800b45b 	.word	0x0800b45b
 800b438:	0800b479 	.word	0x0800b479
 800b43c:	0800b479 	.word	0x0800b479
 800b440:	0800b479 	.word	0x0800b479
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b448:	3308      	adds	r3, #8
 800b44a:	2101      	movs	r1, #1
 800b44c:	4618      	mov	r0, r3
 800b44e:	f001 fe45 	bl	800d0dc <RCCEx_PLL2_Config>
 800b452:	4603      	mov	r3, r0
 800b454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b458:	e00f      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b45e:	3328      	adds	r3, #40	; 0x28
 800b460:	2101      	movs	r1, #1
 800b462:	4618      	mov	r0, r3
 800b464:	f001 feec 	bl	800d240 <RCCEx_PLL3_Config>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b46e:	e004      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b476:	e000      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10b      	bne.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b482:	4b6c      	ldr	r3, [pc, #432]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b486:	f023 0107 	bic.w	r1, r3, #7
 800b48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b492:	4a68      	ldr	r2, [pc, #416]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b494:	430b      	orrs	r3, r1
 800b496:	6593      	str	r3, [r2, #88]	; 0x58
 800b498:	e003      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b49e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4aa:	f002 0320 	and.w	r3, r2, #32
 800b4ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	d055      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4ce:	d033      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b4d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4d4:	d82c      	bhi.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4da:	d02f      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4e0:	d826      	bhi.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4e6:	d02b      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b4e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4ec:	d820      	bhi.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f2:	d012      	beq.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b4f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f8:	d81a      	bhi.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d022      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b4fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b502:	d115      	bne.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b508:	3308      	adds	r3, #8
 800b50a:	2100      	movs	r1, #0
 800b50c:	4618      	mov	r0, r3
 800b50e:	f001 fde5 	bl	800d0dc <RCCEx_PLL2_Config>
 800b512:	4603      	mov	r3, r0
 800b514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b518:	e015      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51e:	3328      	adds	r3, #40	; 0x28
 800b520:	2102      	movs	r1, #2
 800b522:	4618      	mov	r0, r3
 800b524:	f001 fe8c 	bl	800d240 <RCCEx_PLL3_Config>
 800b528:	4603      	mov	r3, r0
 800b52a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b52e:	e00a      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b536:	e006      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b538:	bf00      	nop
 800b53a:	e004      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b53c:	bf00      	nop
 800b53e:	e002      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b540:	bf00      	nop
 800b542:	e000      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10b      	bne.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b54e:	4b39      	ldr	r3, [pc, #228]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b552:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b55e:	4a35      	ldr	r2, [pc, #212]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b560:	430b      	orrs	r3, r1
 800b562:	6553      	str	r3, [r2, #84]	; 0x54
 800b564:	e003      	b.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b56a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b57a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b57e:	2300      	movs	r3, #0
 800b580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b584:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b588:	460b      	mov	r3, r1
 800b58a:	4313      	orrs	r3, r2
 800b58c:	d058      	beq.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b596:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b59a:	d033      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b59c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b5a0:	d82c      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5a6:	d02f      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b5a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ac:	d826      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5b2:	d02b      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b5b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5b8:	d820      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5be:	d012      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b5c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5c4:	d81a      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d022      	beq.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5ce:	d115      	bne.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 fd7f 	bl	800d0dc <RCCEx_PLL2_Config>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b5e4:	e015      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ea:	3328      	adds	r3, #40	; 0x28
 800b5ec:	2102      	movs	r1, #2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f001 fe26 	bl	800d240 <RCCEx_PLL3_Config>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b5fa:	e00a      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b602:	e006      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b604:	bf00      	nop
 800b606:	e004      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b608:	bf00      	nop
 800b60a:	e002      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b60c:	bf00      	nop
 800b60e:	e000      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b610:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10e      	bne.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b61a:	4b06      	ldr	r3, [pc, #24]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b61e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b62a:	4a02      	ldr	r2, [pc, #8]	; (800b634 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b62c:	430b      	orrs	r3, r1
 800b62e:	6593      	str	r3, [r2, #88]	; 0x58
 800b630:	e006      	b.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b632:	bf00      	nop
 800b634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b63c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b648:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b64c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b650:	2300      	movs	r3, #0
 800b652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b656:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b65a:	460b      	mov	r3, r1
 800b65c:	4313      	orrs	r3, r2
 800b65e:	d055      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b664:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b668:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b66c:	d033      	beq.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b66e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b672:	d82c      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b678:	d02f      	beq.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b67a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b67e:	d826      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b680:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b684:	d02b      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b686:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b68a:	d820      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b68c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b690:	d012      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b696:	d81a      	bhi.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d022      	beq.n	800b6e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b69c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6a0:	d115      	bne.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f001 fd16 	bl	800d0dc <RCCEx_PLL2_Config>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b6b6:	e015      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6bc:	3328      	adds	r3, #40	; 0x28
 800b6be:	2102      	movs	r1, #2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f001 fdbd 	bl	800d240 <RCCEx_PLL3_Config>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b6cc:	e00a      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6d4:	e006      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b6d6:	bf00      	nop
 800b6d8:	e004      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b6da:	bf00      	nop
 800b6dc:	e002      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b6de:	bf00      	nop
 800b6e0:	e000      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b6e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10b      	bne.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b6ec:	4ba1      	ldr	r3, [pc, #644]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6fc:	4a9d      	ldr	r2, [pc, #628]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6fe:	430b      	orrs	r3, r1
 800b700:	6593      	str	r3, [r2, #88]	; 0x58
 800b702:	e003      	b.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f002 0308 	and.w	r3, r2, #8
 800b718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b71c:	2300      	movs	r3, #0
 800b71e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b722:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b726:	460b      	mov	r3, r1
 800b728:	4313      	orrs	r3, r2
 800b72a:	d01e      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b738:	d10c      	bne.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b73e:	3328      	adds	r3, #40	; 0x28
 800b740:	2102      	movs	r1, #2
 800b742:	4618      	mov	r0, r3
 800b744:	f001 fd7c 	bl	800d240 <RCCEx_PLL3_Config>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d002      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b754:	4b87      	ldr	r3, [pc, #540]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b758:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b764:	4a83      	ldr	r2, [pc, #524]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b766:	430b      	orrs	r3, r1
 800b768:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f002 0310 	and.w	r3, r2, #16
 800b776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b77a:	2300      	movs	r3, #0
 800b77c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b780:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b784:	460b      	mov	r3, r1
 800b786:	4313      	orrs	r3, r2
 800b788:	d01e      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b78a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b78e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b796:	d10c      	bne.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b79c:	3328      	adds	r3, #40	; 0x28
 800b79e:	2102      	movs	r1, #2
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f001 fd4d 	bl	800d240 <RCCEx_PLL3_Config>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b7b2:	4b70      	ldr	r3, [pc, #448]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7c2:	4a6c      	ldr	r2, [pc, #432]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7c4:	430b      	orrs	r3, r1
 800b7c6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b7d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b7de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	d03e      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b7f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7f4:	d022      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b7f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7fa:	d81b      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d003      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b804:	d00b      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b806:	e015      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80c:	3308      	adds	r3, #8
 800b80e:	2100      	movs	r1, #0
 800b810:	4618      	mov	r0, r3
 800b812:	f001 fc63 	bl	800d0dc <RCCEx_PLL2_Config>
 800b816:	4603      	mov	r3, r0
 800b818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b81c:	e00f      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b822:	3328      	adds	r3, #40	; 0x28
 800b824:	2102      	movs	r1, #2
 800b826:	4618      	mov	r0, r3
 800b828:	f001 fd0a 	bl	800d240 <RCCEx_PLL3_Config>
 800b82c:	4603      	mov	r3, r0
 800b82e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b832:	e004      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b83a:	e000      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b83c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b83e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10b      	bne.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b846:	4b4b      	ldr	r3, [pc, #300]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b84a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b852:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b856:	4a47      	ldr	r2, [pc, #284]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b858:	430b      	orrs	r3, r1
 800b85a:	6593      	str	r3, [r2, #88]	; 0x58
 800b85c:	e003      	b.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b85e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b872:	67bb      	str	r3, [r7, #120]	; 0x78
 800b874:	2300      	movs	r3, #0
 800b876:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b878:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b87c:	460b      	mov	r3, r1
 800b87e:	4313      	orrs	r3, r2
 800b880:	d03b      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b88a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b88e:	d01f      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b890:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b894:	d818      	bhi.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b89a:	d003      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b89c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8a0:	d007      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b8a2:	e011      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8a4:	4b33      	ldr	r3, [pc, #204]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a8:	4a32      	ldr	r2, [pc, #200]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b8b0:	e00f      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b6:	3328      	adds	r3, #40	; 0x28
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f001 fcc0 	bl	800d240 <RCCEx_PLL3_Config>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b8c6:	e004      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8ce:	e000      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b8d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10b      	bne.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b8da:	4b26      	ldr	r3, [pc, #152]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ea:	4a22      	ldr	r2, [pc, #136]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8ec:	430b      	orrs	r3, r1
 800b8ee:	6553      	str	r3, [r2, #84]	; 0x54
 800b8f0:	e003      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b902:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b906:	673b      	str	r3, [r7, #112]	; 0x70
 800b908:	2300      	movs	r3, #0
 800b90a:	677b      	str	r3, [r7, #116]	; 0x74
 800b90c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b910:	460b      	mov	r3, r1
 800b912:	4313      	orrs	r3, r2
 800b914:	d034      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d003      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b924:	d007      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b926:	e011      	b.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b928:	4b12      	ldr	r3, [pc, #72]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92c:	4a11      	ldr	r2, [pc, #68]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b92e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b934:	e00e      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93a:	3308      	adds	r3, #8
 800b93c:	2102      	movs	r1, #2
 800b93e:	4618      	mov	r0, r3
 800b940:	f001 fbcc 	bl	800d0dc <RCCEx_PLL2_Config>
 800b944:	4603      	mov	r3, r0
 800b946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b94a:	e003      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b952:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10d      	bne.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b95c:	4b05      	ldr	r3, [pc, #20]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b95e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b96a:	4a02      	ldr	r2, [pc, #8]	; (800b974 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b96c:	430b      	orrs	r3, r1
 800b96e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b970:	e006      	b.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b972:	bf00      	nop
 800b974:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b97c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b98c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b98e:	2300      	movs	r3, #0
 800b990:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b992:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b996:	460b      	mov	r3, r1
 800b998:	4313      	orrs	r3, r2
 800b99a:	d00c      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a0:	3328      	adds	r3, #40	; 0x28
 800b9a2:	2102      	movs	r1, #2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f001 fc4b 	bl	800d240 <RCCEx_PLL3_Config>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b9c2:	663b      	str	r3, [r7, #96]	; 0x60
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	667b      	str	r3, [r7, #100]	; 0x64
 800b9c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	d038      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9de:	d018      	beq.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b9e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9e4:	d811      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b9e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9ea:	d014      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b9ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f0:	d80b      	bhi.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d011      	beq.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9fa:	d106      	bne.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9fc:	4bc3      	ldr	r3, [pc, #780]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba00:	4ac2      	ldr	r2, [pc, #776]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ba08:	e008      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba10:	e004      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ba12:	bf00      	nop
 800ba14:	e002      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ba16:	bf00      	nop
 800ba18:	e000      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ba1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10b      	bne.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba24:	4bb9      	ldr	r3, [pc, #740]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ba2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba34:	4ab5      	ldr	r2, [pc, #724]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba36:	430b      	orrs	r3, r1
 800ba38:	6553      	str	r3, [r2, #84]	; 0x54
 800ba3a:	e003      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ba44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ba50:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba52:	2300      	movs	r3, #0
 800ba54:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	d009      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba60:	4baa      	ldr	r3, [pc, #680]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba6e:	4aa7      	ldr	r2, [pc, #668]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba70:	430b      	orrs	r3, r1
 800ba72:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ba74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ba80:	653b      	str	r3, [r7, #80]	; 0x50
 800ba82:	2300      	movs	r3, #0
 800ba84:	657b      	str	r3, [r7, #84]	; 0x54
 800ba86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	d00a      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ba90:	4b9e      	ldr	r3, [pc, #632]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ba98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800baa0:	4a9a      	ldr	r2, [pc, #616]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baa2:	430b      	orrs	r3, r1
 800baa4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800baa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bab2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bab4:	2300      	movs	r3, #0
 800bab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bab8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800babc:	460b      	mov	r3, r1
 800babe:	4313      	orrs	r3, r2
 800bac0:	d009      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bac2:	4b92      	ldr	r3, [pc, #584]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800baca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bad0:	4a8e      	ldr	r2, [pc, #568]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bad2:	430b      	orrs	r3, r1
 800bad4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bae2:	643b      	str	r3, [r7, #64]	; 0x40
 800bae4:	2300      	movs	r3, #0
 800bae6:	647b      	str	r3, [r7, #68]	; 0x44
 800bae8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800baec:	460b      	mov	r3, r1
 800baee:	4313      	orrs	r3, r2
 800baf0:	d00e      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800baf2:	4b86      	ldr	r3, [pc, #536]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	4a85      	ldr	r2, [pc, #532]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bafc:	6113      	str	r3, [r2, #16]
 800bafe:	4b83      	ldr	r3, [pc, #524]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb00:	6919      	ldr	r1, [r3, #16]
 800bb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bb0a:	4a80      	ldr	r2, [pc, #512]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb0c:	430b      	orrs	r3, r1
 800bb0e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bb1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb1e:	2300      	movs	r3, #0
 800bb20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bb26:	460b      	mov	r3, r1
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	d009      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bb2c:	4b77      	ldr	r3, [pc, #476]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb30:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb3a:	4a74      	ldr	r2, [pc, #464]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bb40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bb4c:	633b      	str	r3, [r7, #48]	; 0x30
 800bb4e:	2300      	movs	r3, #0
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
 800bb52:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bb56:	460b      	mov	r3, r1
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	d00a      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb5c:	4b6b      	ldr	r3, [pc, #428]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb60:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bb64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb6c:	4a67      	ldr	r2, [pc, #412]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb6e:	430b      	orrs	r3, r1
 800bb70:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	62b9      	str	r1, [r7, #40]	; 0x28
 800bb7e:	f003 0301 	and.w	r3, r3, #1
 800bb82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	d011      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb92:	3308      	adds	r3, #8
 800bb94:	2100      	movs	r1, #0
 800bb96:	4618      	mov	r0, r3
 800bb98:	f001 faa0 	bl	800d0dc <RCCEx_PLL2_Config>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	2100      	movs	r1, #0
 800bbbc:	6239      	str	r1, [r7, #32]
 800bbbe:	f003 0302 	and.w	r3, r3, #2
 800bbc2:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	d011      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd2:	3308      	adds	r3, #8
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f001 fa80 	bl	800d0dc <RCCEx_PLL2_Config>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bbe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	61b9      	str	r1, [r7, #24]
 800bbfe:	f003 0304 	and.w	r3, r3, #4
 800bc02:	61fb      	str	r3, [r7, #28]
 800bc04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	d011      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc12:	3308      	adds	r3, #8
 800bc14:	2102      	movs	r1, #2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f001 fa60 	bl	800d0dc <RCCEx_PLL2_Config>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	6139      	str	r1, [r7, #16]
 800bc3e:	f003 0308 	and.w	r3, r3, #8
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	d011      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc52:	3328      	adds	r3, #40	; 0x28
 800bc54:	2100      	movs	r1, #0
 800bc56:	4618      	mov	r0, r3
 800bc58:	f001 faf2 	bl	800d240 <RCCEx_PLL3_Config>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bc62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	f003 0310 	and.w	r3, r3, #16
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	d011      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc92:	3328      	adds	r3, #40	; 0x28
 800bc94:	2101      	movs	r1, #1
 800bc96:	4618      	mov	r0, r3
 800bc98:	f001 fad2 	bl	800d240 <RCCEx_PLL3_Config>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	2100      	movs	r1, #0
 800bcbc:	6039      	str	r1, [r7, #0]
 800bcbe:	f003 0320 	and.w	r3, r3, #32
 800bcc2:	607b      	str	r3, [r7, #4]
 800bcc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4313      	orrs	r3, r2
 800bccc:	d011      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd2:	3328      	adds	r3, #40	; 0x28
 800bcd4:	2102      	movs	r1, #2
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 fab2 	bl	800d240 <RCCEx_PLL3_Config>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bcf2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d101      	bne.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e000      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bd06:	46bd      	mov	sp, r7
 800bd08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd0c:	58024400 	.word	0x58024400

0800bd10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b090      	sub	sp, #64	; 0x40
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bd1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd1e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bd22:	430b      	orrs	r3, r1
 800bd24:	f040 8094 	bne.w	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bd28:	4b9e      	ldr	r3, [pc, #632]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd2c:	f003 0307 	and.w	r3, r3, #7
 800bd30:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	2b04      	cmp	r3, #4
 800bd36:	f200 8087 	bhi.w	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bd3a:	a201      	add	r2, pc, #4	; (adr r2, 800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd40:	0800bd55 	.word	0x0800bd55
 800bd44:	0800bd7d 	.word	0x0800bd7d
 800bd48:	0800bda5 	.word	0x0800bda5
 800bd4c:	0800be41 	.word	0x0800be41
 800bd50:	0800bdcd 	.word	0x0800bdcd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd54:	4b93      	ldr	r3, [pc, #588]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd60:	d108      	bne.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd66:	4618      	mov	r0, r3
 800bd68:	f001 f810 	bl	800cd8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd70:	f000 bd45 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd78:	f000 bd41 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd7c:	4b89      	ldr	r3, [pc, #548]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd88:	d108      	bne.n	800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd8a:	f107 0318 	add.w	r3, r7, #24
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 fd54 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd98:	f000 bd31 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bda0:	f000 bd2d 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bda4:	4b7f      	ldr	r3, [pc, #508]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdb0:	d108      	bne.n	800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdb2:	f107 030c 	add.w	r3, r7, #12
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 fe94 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdc0:	f000 bd1d 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdc8:	f000 bd19 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdcc:	4b75      	ldr	r3, [pc, #468]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdd4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdd6:	4b73      	ldr	r3, [pc, #460]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 0304 	and.w	r3, r3, #4
 800bdde:	2b04      	cmp	r3, #4
 800bde0:	d10c      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d109      	bne.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bde8:	4b6e      	ldr	r3, [pc, #440]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	08db      	lsrs	r3, r3, #3
 800bdee:	f003 0303 	and.w	r3, r3, #3
 800bdf2:	4a6d      	ldr	r2, [pc, #436]	; (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bdf4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdfa:	e01f      	b.n	800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdfc:	4b69      	ldr	r3, [pc, #420]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be08:	d106      	bne.n	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800be0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be10:	d102      	bne.n	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be12:	4b66      	ldr	r3, [pc, #408]	; (800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800be14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be16:	e011      	b.n	800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be18:	4b62      	ldr	r3, [pc, #392]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be24:	d106      	bne.n	800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800be26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be2c:	d102      	bne.n	800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be2e:	4b60      	ldr	r3, [pc, #384]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800be30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be32:	e003      	b.n	800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be34:	2300      	movs	r3, #0
 800be36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be38:	f000 bce1 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be3c:	f000 bcdf 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be40:	4b5c      	ldr	r3, [pc, #368]	; (800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be44:	f000 bcdb 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be4c:	f000 bcd7 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800be50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be54:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800be58:	430b      	orrs	r3, r1
 800be5a:	f040 80ad 	bne.w	800bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800be5e:	4b51      	ldr	r3, [pc, #324]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be62:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800be66:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be6e:	d056      	beq.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be76:	f200 8090 	bhi.w	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	2bc0      	cmp	r3, #192	; 0xc0
 800be7e:	f000 8088 	beq.w	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	2bc0      	cmp	r3, #192	; 0xc0
 800be86:	f200 8088 	bhi.w	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	2b80      	cmp	r3, #128	; 0x80
 800be8e:	d032      	beq.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	2b80      	cmp	r3, #128	; 0x80
 800be94:	f200 8081 	bhi.w	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d003      	beq.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800be9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea0:	2b40      	cmp	r3, #64	; 0x40
 800bea2:	d014      	beq.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bea4:	e079      	b.n	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bea6:	4b3f      	ldr	r3, [pc, #252]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800beb2:	d108      	bne.n	800bec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800beb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 ff67 	bl	800cd8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bec2:	f000 bc9c 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beca:	f000 bc98 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bece:	4b35      	ldr	r3, [pc, #212]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bed6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beda:	d108      	bne.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bedc:	f107 0318 	add.w	r3, r7, #24
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 fcab 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beea:	f000 bc88 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800beee:	2300      	movs	r3, #0
 800bef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef2:	f000 bc84 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bef6:	4b2b      	ldr	r3, [pc, #172]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800befe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf02:	d108      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf04:	f107 030c 	add.w	r3, r7, #12
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 fdeb 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf12:	f000 bc74 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf1a:	f000 bc70 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf1e:	4b21      	ldr	r3, [pc, #132]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf28:	4b1e      	ldr	r3, [pc, #120]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f003 0304 	and.w	r3, r3, #4
 800bf30:	2b04      	cmp	r3, #4
 800bf32:	d10c      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d109      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf3a:	4b1a      	ldr	r3, [pc, #104]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	08db      	lsrs	r3, r3, #3
 800bf40:	f003 0303 	and.w	r3, r3, #3
 800bf44:	4a18      	ldr	r2, [pc, #96]	; (800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf46:	fa22 f303 	lsr.w	r3, r2, r3
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf4c:	e01f      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf4e:	4b15      	ldr	r3, [pc, #84]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf5a:	d106      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf62:	d102      	bne.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf64:	4b11      	ldr	r3, [pc, #68]	; (800bfac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf68:	e011      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf6a:	4b0e      	ldr	r3, [pc, #56]	; (800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf76:	d106      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf7e:	d102      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf80:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf84:	e003      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf8a:	f000 bc38 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf8e:	f000 bc36 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf92:	4b08      	ldr	r3, [pc, #32]	; (800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bf94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf96:	f000 bc32 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf9e:	f000 bc2e 	b.w	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bfa2:	bf00      	nop
 800bfa4:	58024400 	.word	0x58024400
 800bfa8:	03d09000 	.word	0x03d09000
 800bfac:	003d0900 	.word	0x003d0900
 800bfb0:	00989680 	.word	0x00989680
 800bfb4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bfb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfbc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bfc0:	430b      	orrs	r3, r1
 800bfc2:	f040 809c 	bne.w	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bfc6:	4b9e      	ldr	r3, [pc, #632]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bfce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfd6:	d054      	beq.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfde:	f200 808b 	bhi.w	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bfe8:	f000 8083 	beq.w	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bff2:	f200 8081 	bhi.w	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bffc:	d02f      	beq.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c004:	d878      	bhi.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d004      	beq.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c012:	d012      	beq.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c014:	e070      	b.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c016:	4b8a      	ldr	r3, [pc, #552]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c01e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c022:	d107      	bne.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 feaf 	bl	800cd8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c032:	e3e4      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c034:	2300      	movs	r3, #0
 800c036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c038:	e3e1      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c03a:	4b81      	ldr	r3, [pc, #516]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c046:	d107      	bne.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c048:	f107 0318 	add.w	r3, r7, #24
 800c04c:	4618      	mov	r0, r3
 800c04e:	f000 fbf5 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c056:	e3d2      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c05c:	e3cf      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c05e:	4b78      	ldr	r3, [pc, #480]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c06a:	d107      	bne.n	800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c06c:	f107 030c 	add.w	r3, r7, #12
 800c070:	4618      	mov	r0, r3
 800c072:	f000 fd37 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c07a:	e3c0      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c07c:	2300      	movs	r3, #0
 800c07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c080:	e3bd      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c082:	4b6f      	ldr	r3, [pc, #444]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c086:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c08a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c08c:	4b6c      	ldr	r3, [pc, #432]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b04      	cmp	r3, #4
 800c096:	d10c      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d109      	bne.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c09e:	4b68      	ldr	r3, [pc, #416]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	08db      	lsrs	r3, r3, #3
 800c0a4:	f003 0303 	and.w	r3, r3, #3
 800c0a8:	4a66      	ldr	r2, [pc, #408]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b0:	e01e      	b.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0b2:	4b63      	ldr	r3, [pc, #396]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0be:	d106      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0c6:	d102      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0c8:	4b5f      	ldr	r3, [pc, #380]	; (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0cc:	e010      	b.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0ce:	4b5c      	ldr	r3, [pc, #368]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0da:	d106      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0e2:	d102      	bne.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0e4:	4b59      	ldr	r3, [pc, #356]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e8:	e002      	b.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0ee:	e386      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0f0:	e385      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0f2:	4b57      	ldr	r3, [pc, #348]	; (800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f6:	e382      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0fc:	e37f      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c0fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c102:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c106:	430b      	orrs	r3, r1
 800c108:	f040 80a7 	bne.w	800c25a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c10c:	4b4c      	ldr	r3, [pc, #304]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c10e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c110:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c114:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c11c:	d055      	beq.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c124:	f200 8096 	bhi.w	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c12e:	f000 8084 	beq.w	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c138:	f200 808c 	bhi.w	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c142:	d030      	beq.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c14a:	f200 8083 	bhi.w	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c150:	2b00      	cmp	r3, #0
 800c152:	d004      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c15a:	d012      	beq.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c15c:	e07a      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c15e:	4b38      	ldr	r3, [pc, #224]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c16a:	d107      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c16c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c170:	4618      	mov	r0, r3
 800c172:	f000 fe0b 	bl	800cd8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c178:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17a:	e340      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c180:	e33d      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c182:	4b2f      	ldr	r3, [pc, #188]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c18a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c18e:	d107      	bne.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c190:	f107 0318 	add.w	r3, r7, #24
 800c194:	4618      	mov	r0, r3
 800c196:	f000 fb51 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c19e:	e32e      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a4:	e32b      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1a6:	4b26      	ldr	r3, [pc, #152]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1b2:	d107      	bne.n	800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1b4:	f107 030c 	add.w	r3, r7, #12
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 fc93 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1c2:	e31c      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c8:	e319      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1ca:	4b1d      	ldr	r3, [pc, #116]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1d4:	4b1a      	ldr	r3, [pc, #104]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 0304 	and.w	r3, r3, #4
 800c1dc:	2b04      	cmp	r3, #4
 800c1de:	d10c      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d109      	bne.n	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1e6:	4b16      	ldr	r3, [pc, #88]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	08db      	lsrs	r3, r3, #3
 800c1ec:	f003 0303 	and.w	r3, r3, #3
 800c1f0:	4a14      	ldr	r2, [pc, #80]	; (800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c1f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1f8:	e01e      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1fa:	4b11      	ldr	r3, [pc, #68]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c206:	d106      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c20e:	d102      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c210:	4b0d      	ldr	r3, [pc, #52]	; (800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c214:	e010      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c216:	4b0a      	ldr	r3, [pc, #40]	; (800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c21e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c222:	d106      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c22a:	d102      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c22c:	4b07      	ldr	r3, [pc, #28]	; (800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c230:	e002      	b.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c236:	e2e2      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c238:	e2e1      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c23a:	4b05      	ldr	r3, [pc, #20]	; (800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c23e:	e2de      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c240:	58024400 	.word	0x58024400
 800c244:	03d09000 	.word	0x03d09000
 800c248:	003d0900 	.word	0x003d0900
 800c24c:	00989680 	.word	0x00989680
 800c250:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c254:	2300      	movs	r3, #0
 800c256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c258:	e2d1      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c25a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c25e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c262:	430b      	orrs	r3, r1
 800c264:	f040 809c 	bne.w	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c268:	4b93      	ldr	r3, [pc, #588]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c26c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c270:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c278:	d054      	beq.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c280:	f200 808b 	bhi.w	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c286:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c28a:	f000 8083 	beq.w	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c290:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c294:	f200 8081 	bhi.w	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c29e:	d02f      	beq.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2a6:	d878      	bhi.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d004      	beq.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2b4:	d012      	beq.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c2b6:	e070      	b.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2b8:	4b7f      	ldr	r3, [pc, #508]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2c4:	d107      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fd5e 	bl	800cd8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d4:	e293      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2da:	e290      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2dc:	4b76      	ldr	r3, [pc, #472]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2e8:	d107      	bne.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ea:	f107 0318 	add.w	r3, r7, #24
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 faa4 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f8:	e281      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2fe:	e27e      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c300:	4b6d      	ldr	r3, [pc, #436]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c30c:	d107      	bne.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c30e:	f107 030c 	add.w	r3, r7, #12
 800c312:	4618      	mov	r0, r3
 800c314:	f000 fbe6 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c31c:	e26f      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c322:	e26c      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c324:	4b64      	ldr	r3, [pc, #400]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c32c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c32e:	4b62      	ldr	r3, [pc, #392]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 0304 	and.w	r3, r3, #4
 800c336:	2b04      	cmp	r3, #4
 800c338:	d10c      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d109      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c340:	4b5d      	ldr	r3, [pc, #372]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	08db      	lsrs	r3, r3, #3
 800c346:	f003 0303 	and.w	r3, r3, #3
 800c34a:	4a5c      	ldr	r2, [pc, #368]	; (800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c34c:	fa22 f303 	lsr.w	r3, r2, r3
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c352:	e01e      	b.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c354:	4b58      	ldr	r3, [pc, #352]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c35c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c360:	d106      	bne.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c368:	d102      	bne.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c36a:	4b55      	ldr	r3, [pc, #340]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c36c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c36e:	e010      	b.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c370:	4b51      	ldr	r3, [pc, #324]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c37c:	d106      	bne.n	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c384:	d102      	bne.n	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c386:	4b4f      	ldr	r3, [pc, #316]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c38a:	e002      	b.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c390:	e235      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c392:	e234      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c394:	4b4c      	ldr	r3, [pc, #304]	; (800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c398:	e231      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c39e:	e22e      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3a4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c3a8:	430b      	orrs	r3, r1
 800c3aa:	f040 808f 	bne.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c3ae:	4b42      	ldr	r3, [pc, #264]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c3b6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3be:	d06b      	beq.n	800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3c6:	d874      	bhi.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c3ce:	d056      	beq.n	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c3d6:	d86c      	bhi.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c3de:	d03b      	beq.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c3e6:	d864      	bhi.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3ee:	d021      	beq.n	800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3f6:	d85c      	bhi.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d004      	beq.n	800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c404:	d004      	beq.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c406:	e054      	b.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c408:	f7fe fa30 	bl	800a86c <HAL_RCC_GetPCLK1Freq>
 800c40c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c40e:	e1f6      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c410:	4b29      	ldr	r3, [pc, #164]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c41c:	d107      	bne.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c41e:	f107 0318 	add.w	r3, r7, #24
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fa0a 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c42c:	e1e7      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c432:	e1e4      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c434:	4b20      	ldr	r3, [pc, #128]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c43c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c440:	d107      	bne.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c442:	f107 030c 	add.w	r3, r7, #12
 800c446:	4618      	mov	r0, r3
 800c448:	f000 fb4c 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c450:	e1d5      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c456:	e1d2      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c458:	4b17      	ldr	r3, [pc, #92]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f003 0304 	and.w	r3, r3, #4
 800c460:	2b04      	cmp	r3, #4
 800c462:	d109      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c464:	4b14      	ldr	r3, [pc, #80]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	08db      	lsrs	r3, r3, #3
 800c46a:	f003 0303 	and.w	r3, r3, #3
 800c46e:	4a13      	ldr	r2, [pc, #76]	; (800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c470:	fa22 f303 	lsr.w	r3, r2, r3
 800c474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c476:	e1c2      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47c:	e1bf      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c47e:	4b0e      	ldr	r3, [pc, #56]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c48a:	d102      	bne.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c48c:	4b0c      	ldr	r3, [pc, #48]	; (800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c490:	e1b5      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c496:	e1b2      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c498:	4b07      	ldr	r3, [pc, #28]	; (800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a4:	d102      	bne.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c4a6:	4b07      	ldr	r3, [pc, #28]	; (800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4aa:	e1a8      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b0:	e1a5      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b6:	e1a2      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4b8:	58024400 	.word	0x58024400
 800c4bc:	03d09000 	.word	0x03d09000
 800c4c0:	003d0900 	.word	0x003d0900
 800c4c4:	00989680 	.word	0x00989680
 800c4c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c4cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4d0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c4d4:	430b      	orrs	r3, r1
 800c4d6:	d173      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c4d8:	4b9c      	ldr	r3, [pc, #624]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c4e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4e8:	d02f      	beq.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4f0:	d863      	bhi.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4fe:	d012      	beq.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c500:	e05b      	b.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c502:	4b92      	ldr	r3, [pc, #584]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c50a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c50e:	d107      	bne.n	800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c510:	f107 0318 	add.w	r3, r7, #24
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f991 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c51e:	e16e      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c524:	e16b      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c526:	4b89      	ldr	r3, [pc, #548]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c52e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c532:	d107      	bne.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c534:	f107 030c 	add.w	r3, r7, #12
 800c538:	4618      	mov	r0, r3
 800c53a:	f000 fad3 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c542:	e15c      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c548:	e159      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c54a:	4b80      	ldr	r3, [pc, #512]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c54c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c54e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c552:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c554:	4b7d      	ldr	r3, [pc, #500]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 0304 	and.w	r3, r3, #4
 800c55c:	2b04      	cmp	r3, #4
 800c55e:	d10c      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c562:	2b00      	cmp	r3, #0
 800c564:	d109      	bne.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c566:	4b79      	ldr	r3, [pc, #484]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	08db      	lsrs	r3, r3, #3
 800c56c:	f003 0303 	and.w	r3, r3, #3
 800c570:	4a77      	ldr	r2, [pc, #476]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c572:	fa22 f303 	lsr.w	r3, r2, r3
 800c576:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c578:	e01e      	b.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c57a:	4b74      	ldr	r3, [pc, #464]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c586:	d106      	bne.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c58e:	d102      	bne.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c590:	4b70      	ldr	r3, [pc, #448]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c592:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c594:	e010      	b.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c596:	4b6d      	ldr	r3, [pc, #436]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c59e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5a2:	d106      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5aa:	d102      	bne.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5ac:	4b6a      	ldr	r3, [pc, #424]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5b0:	e002      	b.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5b6:	e122      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5b8:	e121      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5be:	e11e      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5c4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c5c8:	430b      	orrs	r3, r1
 800c5ca:	d133      	bne.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c5cc:	4b5f      	ldr	r3, [pc, #380]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d004      	beq.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e2:	d012      	beq.n	800c60a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c5e4:	e023      	b.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5e6:	4b59      	ldr	r3, [pc, #356]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5f2:	d107      	bne.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f000 fbc7 	bl	800cd8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c600:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c602:	e0fc      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c608:	e0f9      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c60a:	4b50      	ldr	r3, [pc, #320]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c616:	d107      	bne.n	800c628 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c618:	f107 0318 	add.w	r3, r7, #24
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 f90d 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c622:	6a3b      	ldr	r3, [r7, #32]
 800c624:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c626:	e0ea      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c628:	2300      	movs	r3, #0
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c62c:	e0e7      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c632:	e0e4      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c634:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c638:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c63c:	430b      	orrs	r3, r1
 800c63e:	f040 808d 	bne.w	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c642:	4b42      	ldr	r3, [pc, #264]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c646:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c64a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c652:	d06b      	beq.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c65a:	d874      	bhi.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c662:	d056      	beq.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c66a:	d86c      	bhi.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c672:	d03b      	beq.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c676:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c67a:	d864      	bhi.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c682:	d021      	beq.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c68a:	d85c      	bhi.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d004      	beq.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c698:	d004      	beq.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c69a:	e054      	b.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c69c:	f000 f8b8 	bl	800c810 <HAL_RCCEx_GetD3PCLK1Freq>
 800c6a0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6a2:	e0ac      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6a4:	4b29      	ldr	r3, [pc, #164]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6b0:	d107      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6b2:	f107 0318 	add.w	r3, r7, #24
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f8c0 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6c0:	e09d      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c6:	e09a      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6c8:	4b20      	ldr	r3, [pc, #128]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6d4:	d107      	bne.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6d6:	f107 030c 	add.w	r3, r7, #12
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fa02 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6e4:	e08b      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ea:	e088      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6ec:	4b17      	ldr	r3, [pc, #92]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f003 0304 	and.w	r3, r3, #4
 800c6f4:	2b04      	cmp	r3, #4
 800c6f6:	d109      	bne.n	800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6f8:	4b14      	ldr	r3, [pc, #80]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	08db      	lsrs	r3, r3, #3
 800c6fe:	f003 0303 	and.w	r3, r3, #3
 800c702:	4a13      	ldr	r2, [pc, #76]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c704:	fa22 f303 	lsr.w	r3, r2, r3
 800c708:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c70a:	e078      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c70c:	2300      	movs	r3, #0
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c710:	e075      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c712:	4b0e      	ldr	r3, [pc, #56]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c71a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c71e:	d102      	bne.n	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c720:	4b0c      	ldr	r3, [pc, #48]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c724:	e06b      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c72a:	e068      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c72c:	4b07      	ldr	r3, [pc, #28]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c738:	d102      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c73a:	4b07      	ldr	r3, [pc, #28]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c73e:	e05e      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c744:	e05b      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c74a:	e058      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c74c:	58024400 	.word	0x58024400
 800c750:	03d09000 	.word	0x03d09000
 800c754:	003d0900 	.word	0x003d0900
 800c758:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c75c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c760:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c764:	430b      	orrs	r3, r1
 800c766:	d148      	bne.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c768:	4b27      	ldr	r3, [pc, #156]	; (800c808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c76a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c76c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c770:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c778:	d02a      	beq.n	800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c780:	d838      	bhi.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c784:	2b00      	cmp	r3, #0
 800c786:	d004      	beq.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c78e:	d00d      	beq.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c790:	e030      	b.n	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c792:	4b1d      	ldr	r3, [pc, #116]	; (800c808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c79a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c79e:	d102      	bne.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c7a0:	4b1a      	ldr	r3, [pc, #104]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7a4:	e02b      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7aa:	e028      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7ac:	4b16      	ldr	r3, [pc, #88]	; (800c808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7b8:	d107      	bne.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 fae4 	bl	800cd8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7c8:	e019      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ce:	e016      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7d0:	4b0d      	ldr	r3, [pc, #52]	; (800c808 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7dc:	d107      	bne.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7de:	f107 0318 	add.w	r3, r7, #24
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 f82a 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ec:	e007      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f2:	e004      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f8:	e001      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c800:	4618      	mov	r0, r3
 800c802:	3740      	adds	r7, #64	; 0x40
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	58024400 	.word	0x58024400
 800c80c:	00989680 	.word	0x00989680

0800c810 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c814:	f7fd fffa 	bl	800a80c <HAL_RCC_GetHCLKFreq>
 800c818:	4602      	mov	r2, r0
 800c81a:	4b06      	ldr	r3, [pc, #24]	; (800c834 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	091b      	lsrs	r3, r3, #4
 800c820:	f003 0307 	and.w	r3, r3, #7
 800c824:	4904      	ldr	r1, [pc, #16]	; (800c838 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c826:	5ccb      	ldrb	r3, [r1, r3]
 800c828:	f003 031f 	and.w	r3, r3, #31
 800c82c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c830:	4618      	mov	r0, r3
 800c832:	bd80      	pop	{r7, pc}
 800c834:	58024400 	.word	0x58024400
 800c838:	0801ee00 	.word	0x0801ee00

0800c83c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b089      	sub	sp, #36	; 0x24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c844:	4ba1      	ldr	r3, [pc, #644]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c848:	f003 0303 	and.w	r3, r3, #3
 800c84c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c84e:	4b9f      	ldr	r3, [pc, #636]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c852:	0b1b      	lsrs	r3, r3, #12
 800c854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c858:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c85a:	4b9c      	ldr	r3, [pc, #624]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85e:	091b      	lsrs	r3, r3, #4
 800c860:	f003 0301 	and.w	r3, r3, #1
 800c864:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c866:	4b99      	ldr	r3, [pc, #612]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86a:	08db      	lsrs	r3, r3, #3
 800c86c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c870:	693a      	ldr	r2, [r7, #16]
 800c872:	fb02 f303 	mul.w	r3, r2, r3
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 8111 	beq.w	800caac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	f000 8083 	beq.w	800c998 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	2b02      	cmp	r3, #2
 800c896:	f200 80a1 	bhi.w	800c9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d056      	beq.n	800c954 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c8a6:	e099      	b.n	800c9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8a8:	4b88      	ldr	r3, [pc, #544]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0320 	and.w	r3, r3, #32
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d02d      	beq.n	800c910 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8b4:	4b85      	ldr	r3, [pc, #532]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	08db      	lsrs	r3, r3, #3
 800c8ba:	f003 0303 	and.w	r3, r3, #3
 800c8be:	4a84      	ldr	r2, [pc, #528]	; (800cad0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c8c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	ee07 3a90 	vmov	s15, r3
 800c8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	ee07 3a90 	vmov	s15, r3
 800c8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8de:	4b7b      	ldr	r3, [pc, #492]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e6:	ee07 3a90 	vmov	s15, r3
 800c8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c90a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c90e:	e087      	b.n	800ca20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	ee07 3a90 	vmov	s15, r3
 800c916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c91a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cad8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c922:	4b6a      	ldr	r3, [pc, #424]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c92a:	ee07 3a90 	vmov	s15, r3
 800c92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c932:	ed97 6a03 	vldr	s12, [r7, #12]
 800c936:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c94e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c952:	e065      	b.n	800ca20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	ee07 3a90 	vmov	s15, r3
 800c95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c95e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c966:	4b59      	ldr	r3, [pc, #356]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c96e:	ee07 3a90 	vmov	s15, r3
 800c972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c976:	ed97 6a03 	vldr	s12, [r7, #12]
 800c97a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c996:	e043      	b.n	800ca20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	ee07 3a90 	vmov	s15, r3
 800c99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9aa:	4b48      	ldr	r3, [pc, #288]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b2:	ee07 3a90 	vmov	s15, r3
 800c9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9da:	e021      	b.n	800ca20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	ee07 3a90 	vmov	s15, r3
 800c9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ee:	4b37      	ldr	r3, [pc, #220]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca02:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ca20:	4b2a      	ldr	r3, [pc, #168]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca24:	0a5b      	lsrs	r3, r3, #9
 800ca26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca2a:	ee07 3a90 	vmov	s15, r3
 800ca2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca46:	ee17 2a90 	vmov	r2, s15
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca4e:	4b1f      	ldr	r3, [pc, #124]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca52:	0c1b      	lsrs	r3, r3, #16
 800ca54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca58:	ee07 3a90 	vmov	s15, r3
 800ca5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca74:	ee17 2a90 	vmov	r2, s15
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ca7c:	4b13      	ldr	r3, [pc, #76]	; (800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca80:	0e1b      	lsrs	r3, r3, #24
 800ca82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca96:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caa2:	ee17 2a90 	vmov	r2, s15
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800caaa:	e008      	b.n	800cabe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	609a      	str	r2, [r3, #8]
}
 800cabe:	bf00      	nop
 800cac0:	3724      	adds	r7, #36	; 0x24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	58024400 	.word	0x58024400
 800cad0:	03d09000 	.word	0x03d09000
 800cad4:	46000000 	.word	0x46000000
 800cad8:	4c742400 	.word	0x4c742400
 800cadc:	4a742400 	.word	0x4a742400
 800cae0:	4b189680 	.word	0x4b189680

0800cae4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b089      	sub	sp, #36	; 0x24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800caec:	4ba1      	ldr	r3, [pc, #644]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf0:	f003 0303 	and.w	r3, r3, #3
 800caf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800caf6:	4b9f      	ldr	r3, [pc, #636]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafa:	0d1b      	lsrs	r3, r3, #20
 800cafc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cb02:	4b9c      	ldr	r3, [pc, #624]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb06:	0a1b      	lsrs	r3, r3, #8
 800cb08:	f003 0301 	and.w	r3, r3, #1
 800cb0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cb0e:	4b99      	ldr	r3, [pc, #612]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb12:	08db      	lsrs	r3, r3, #3
 800cb14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	fb02 f303 	mul.w	r3, r2, r3
 800cb1e:	ee07 3a90 	vmov	s15, r3
 800cb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 8111 	beq.w	800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	f000 8083 	beq.w	800cc40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	f200 80a1 	bhi.w	800cc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d003      	beq.n	800cb50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d056      	beq.n	800cbfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb4e:	e099      	b.n	800cc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb50:	4b88      	ldr	r3, [pc, #544]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f003 0320 	and.w	r3, r3, #32
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d02d      	beq.n	800cbb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb5c:	4b85      	ldr	r3, [pc, #532]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	08db      	lsrs	r3, r3, #3
 800cb62:	f003 0303 	and.w	r3, r3, #3
 800cb66:	4a84      	ldr	r2, [pc, #528]	; (800cd78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb68:	fa22 f303 	lsr.w	r3, r2, r3
 800cb6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	ee07 3a90 	vmov	s15, r3
 800cb74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	ee07 3a90 	vmov	s15, r3
 800cb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb86:	4b7b      	ldr	r3, [pc, #492]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb8e:	ee07 3a90 	vmov	s15, r3
 800cb92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb96:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cbb6:	e087      	b.n	800ccc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	ee07 3a90 	vmov	s15, r3
 800cbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cbc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbca:	4b6a      	ldr	r3, [pc, #424]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd2:	ee07 3a90 	vmov	s15, r3
 800cbd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbda:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbfa:	e065      	b.n	800ccc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	ee07 3a90 	vmov	s15, r3
 800cc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc0e:	4b59      	ldr	r3, [pc, #356]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc16:	ee07 3a90 	vmov	s15, r3
 800cc1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc3e:	e043      	b.n	800ccc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	ee07 3a90 	vmov	s15, r3
 800cc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc52:	4b48      	ldr	r3, [pc, #288]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc5a:	ee07 3a90 	vmov	s15, r3
 800cc5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc62:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc82:	e021      	b.n	800ccc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	ee07 3a90 	vmov	s15, r3
 800cc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc96:	4b37      	ldr	r3, [pc, #220]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc9e:	ee07 3a90 	vmov	s15, r3
 800cca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cca6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ccc8:	4b2a      	ldr	r3, [pc, #168]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cccc:	0a5b      	lsrs	r3, r3, #9
 800ccce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd2:	ee07 3a90 	vmov	s15, r3
 800ccd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cce2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccee:	ee17 2a90 	vmov	r2, s15
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ccf6:	4b1f      	ldr	r3, [pc, #124]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	0c1b      	lsrs	r3, r3, #16
 800ccfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd00:	ee07 3a90 	vmov	s15, r3
 800cd04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd10:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd1c:	ee17 2a90 	vmov	r2, s15
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cd24:	4b13      	ldr	r3, [pc, #76]	; (800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd28:	0e1b      	lsrs	r3, r3, #24
 800cd2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd2e:	ee07 3a90 	vmov	s15, r3
 800cd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd4a:	ee17 2a90 	vmov	r2, s15
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd52:	e008      	b.n	800cd66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	609a      	str	r2, [r3, #8]
}
 800cd66:	bf00      	nop
 800cd68:	3724      	adds	r7, #36	; 0x24
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	58024400 	.word	0x58024400
 800cd78:	03d09000 	.word	0x03d09000
 800cd7c:	46000000 	.word	0x46000000
 800cd80:	4c742400 	.word	0x4c742400
 800cd84:	4a742400 	.word	0x4a742400
 800cd88:	4b189680 	.word	0x4b189680

0800cd8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b089      	sub	sp, #36	; 0x24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd94:	4ba0      	ldr	r3, [pc, #640]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd98:	f003 0303 	and.w	r3, r3, #3
 800cd9c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cd9e:	4b9e      	ldr	r3, [pc, #632]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda2:	091b      	lsrs	r3, r3, #4
 800cda4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cda8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cdaa:	4b9b      	ldr	r3, [pc, #620]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdae:	f003 0301 	and.w	r3, r3, #1
 800cdb2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cdb4:	4b98      	ldr	r3, [pc, #608]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdb8:	08db      	lsrs	r3, r3, #3
 800cdba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cdbe:	693a      	ldr	r2, [r7, #16]
 800cdc0:	fb02 f303 	mul.w	r3, r2, r3
 800cdc4:	ee07 3a90 	vmov	s15, r3
 800cdc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdcc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f000 8111 	beq.w	800cffa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	f000 8083 	beq.w	800cee6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	f200 80a1 	bhi.w	800cf2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d003      	beq.n	800cdf6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d056      	beq.n	800cea2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cdf4:	e099      	b.n	800cf2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdf6:	4b88      	ldr	r3, [pc, #544]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f003 0320 	and.w	r3, r3, #32
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d02d      	beq.n	800ce5e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce02:	4b85      	ldr	r3, [pc, #532]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	08db      	lsrs	r3, r3, #3
 800ce08:	f003 0303 	and.w	r3, r3, #3
 800ce0c:	4a83      	ldr	r2, [pc, #524]	; (800d01c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ce0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce12:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	ee07 3a90 	vmov	s15, r3
 800ce1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	ee07 3a90 	vmov	s15, r3
 800ce24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce2c:	4b7a      	ldr	r3, [pc, #488]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce34:	ee07 3a90 	vmov	s15, r3
 800ce38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce40:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce58:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce5c:	e087      	b.n	800cf6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	ee07 3a90 	vmov	s15, r3
 800ce64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce68:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d024 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ce6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce70:	4b69      	ldr	r3, [pc, #420]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce78:	ee07 3a90 	vmov	s15, r3
 800ce7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce80:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce84:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cea0:	e065      	b.n	800cf6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	ee07 3a90 	vmov	s15, r3
 800cea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d028 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ceb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceb4:	4b58      	ldr	r3, [pc, #352]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cebc:	ee07 3a90 	vmov	s15, r3
 800cec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cec4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cec8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ced0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ced4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cedc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cee0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cee4:	e043      	b.n	800cf6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	ee07 3a90 	vmov	s15, r3
 800ceec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d02c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef8:	4b47      	ldr	r3, [pc, #284]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf00:	ee07 3a90 	vmov	s15, r3
 800cf04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf08:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf0c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf28:	e021      	b.n	800cf6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	ee07 3a90 	vmov	s15, r3
 800cf30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf34:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d024 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf3c:	4b36      	ldr	r3, [pc, #216]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf44:	ee07 3a90 	vmov	s15, r3
 800cf48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf50:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d020 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf6c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cf6e:	4b2a      	ldr	r3, [pc, #168]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf72:	0a5b      	lsrs	r3, r3, #9
 800cf74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf78:	ee07 3a90 	vmov	s15, r3
 800cf7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf88:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf94:	ee17 2a90 	vmov	r2, s15
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cf9c:	4b1e      	ldr	r3, [pc, #120]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa0:	0c1b      	lsrs	r3, r3, #16
 800cfa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfa6:	ee07 3a90 	vmov	s15, r3
 800cfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfc2:	ee17 2a90 	vmov	r2, s15
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cfca:	4b13      	ldr	r3, [pc, #76]	; (800d018 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfce:	0e1b      	lsrs	r3, r3, #24
 800cfd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfd4:	ee07 3a90 	vmov	s15, r3
 800cfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cff0:	ee17 2a90 	vmov	r2, s15
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cff8:	e008      	b.n	800d00c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	609a      	str	r2, [r3, #8]
}
 800d00c:	bf00      	nop
 800d00e:	3724      	adds	r7, #36	; 0x24
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	58024400 	.word	0x58024400
 800d01c:	03d09000 	.word	0x03d09000
 800d020:	46000000 	.word	0x46000000
 800d024:	4c742400 	.word	0x4c742400
 800d028:	4a742400 	.word	0x4a742400
 800d02c:	4b189680 	.word	0x4b189680

0800d030 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d038:	4b26      	ldr	r3, [pc, #152]	; (800d0d4 <HAL_RCCEx_CRSConfig+0xa4>)
 800d03a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d03e:	4a25      	ldr	r2, [pc, #148]	; (800d0d4 <HAL_RCCEx_CRSConfig+0xa4>)
 800d040:	f043 0302 	orr.w	r3, r3, #2
 800d044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d048:	4b22      	ldr	r3, [pc, #136]	; (800d0d4 <HAL_RCCEx_CRSConfig+0xa4>)
 800d04a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d04e:	4a21      	ldr	r2, [pc, #132]	; (800d0d4 <HAL_RCCEx_CRSConfig+0xa4>)
 800d050:	f023 0302 	bic.w	r3, r3, #2
 800d054:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d058:	f7f6 ff50 	bl	8003efc <HAL_GetREVID>
 800d05c:	4603      	mov	r3, r0
 800d05e:	f241 0203 	movw	r2, #4099	; 0x1003
 800d062:	4293      	cmp	r3, r2
 800d064:	d80b      	bhi.n	800d07e <HAL_RCCEx_CRSConfig+0x4e>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d06e:	d106      	bne.n	800d07e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	4313      	orrs	r3, r2
 800d07a:	60fb      	str	r3, [r7, #12]
 800d07c:	e008      	b.n	800d090 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	431a      	orrs	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	4313      	orrs	r3, r2
 800d098:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	041b      	lsls	r3, r3, #16
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d0a6:	4a0c      	ldr	r2, [pc, #48]	; (800d0d8 <HAL_RCCEx_CRSConfig+0xa8>)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d0ac:	4b0a      	ldr	r3, [pc, #40]	; (800d0d8 <HAL_RCCEx_CRSConfig+0xa8>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	695b      	ldr	r3, [r3, #20]
 800d0b8:	021b      	lsls	r3, r3, #8
 800d0ba:	4907      	ldr	r1, [pc, #28]	; (800d0d8 <HAL_RCCEx_CRSConfig+0xa8>)
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d0c0:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <HAL_RCCEx_CRSConfig+0xa8>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a04      	ldr	r2, [pc, #16]	; (800d0d8 <HAL_RCCEx_CRSConfig+0xa8>)
 800d0c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d0ca:	6013      	str	r3, [r2, #0]
}
 800d0cc:	bf00      	nop
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	58024400 	.word	0x58024400
 800d0d8:	40008400 	.word	0x40008400

0800d0dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d0ea:	4b53      	ldr	r3, [pc, #332]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ee:	f003 0303 	and.w	r3, r3, #3
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	d101      	bne.n	800d0fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e099      	b.n	800d22e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d0fa:	4b4f      	ldr	r3, [pc, #316]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a4e      	ldr	r2, [pc, #312]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d100:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d106:	f7f6 fec9 	bl	8003e9c <HAL_GetTick>
 800d10a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d10c:	e008      	b.n	800d120 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d10e:	f7f6 fec5 	bl	8003e9c <HAL_GetTick>
 800d112:	4602      	mov	r2, r0
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	1ad3      	subs	r3, r2, r3
 800d118:	2b02      	cmp	r3, #2
 800d11a:	d901      	bls.n	800d120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d11c:	2303      	movs	r3, #3
 800d11e:	e086      	b.n	800d22e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d120:	4b45      	ldr	r3, [pc, #276]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1f0      	bne.n	800d10e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d12c:	4b42      	ldr	r3, [pc, #264]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d130:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	031b      	lsls	r3, r3, #12
 800d13a:	493f      	ldr	r1, [pc, #252]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d13c:	4313      	orrs	r3, r2
 800d13e:	628b      	str	r3, [r1, #40]	; 0x28
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	3b01      	subs	r3, #1
 800d146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	3b01      	subs	r3, #1
 800d150:	025b      	lsls	r3, r3, #9
 800d152:	b29b      	uxth	r3, r3
 800d154:	431a      	orrs	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	3b01      	subs	r3, #1
 800d15c:	041b      	lsls	r3, r3, #16
 800d15e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d162:	431a      	orrs	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	3b01      	subs	r3, #1
 800d16a:	061b      	lsls	r3, r3, #24
 800d16c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d170:	4931      	ldr	r1, [pc, #196]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d172:	4313      	orrs	r3, r2
 800d174:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d176:	4b30      	ldr	r3, [pc, #192]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	695b      	ldr	r3, [r3, #20]
 800d182:	492d      	ldr	r1, [pc, #180]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d184:	4313      	orrs	r3, r2
 800d186:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d188:	4b2b      	ldr	r3, [pc, #172]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18c:	f023 0220 	bic.w	r2, r3, #32
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	699b      	ldr	r3, [r3, #24]
 800d194:	4928      	ldr	r1, [pc, #160]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d196:	4313      	orrs	r3, r2
 800d198:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d19a:	4b27      	ldr	r3, [pc, #156]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19e:	4a26      	ldr	r2, [pc, #152]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1a0:	f023 0310 	bic.w	r3, r3, #16
 800d1a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d1a6:	4b24      	ldr	r3, [pc, #144]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1aa:	4b24      	ldr	r3, [pc, #144]	; (800d23c <RCCEx_PLL2_Config+0x160>)
 800d1ac:	4013      	ands	r3, r2
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	69d2      	ldr	r2, [r2, #28]
 800d1b2:	00d2      	lsls	r2, r2, #3
 800d1b4:	4920      	ldr	r1, [pc, #128]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d1ba:	4b1f      	ldr	r3, [pc, #124]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1be:	4a1e      	ldr	r2, [pc, #120]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1c0:	f043 0310 	orr.w	r3, r3, #16
 800d1c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d106      	bne.n	800d1da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d1cc:	4b1a      	ldr	r3, [pc, #104]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	4a19      	ldr	r2, [pc, #100]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1d8:	e00f      	b.n	800d1fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d106      	bne.n	800d1ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d1e0:	4b15      	ldr	r3, [pc, #84]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e4:	4a14      	ldr	r2, [pc, #80]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1ec:	e005      	b.n	800d1fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d1ee:	4b12      	ldr	r3, [pc, #72]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f2:	4a11      	ldr	r2, [pc, #68]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d1fa:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4a0e      	ldr	r2, [pc, #56]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d206:	f7f6 fe49 	bl	8003e9c <HAL_GetTick>
 800d20a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d20c:	e008      	b.n	800d220 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d20e:	f7f6 fe45 	bl	8003e9c <HAL_GetTick>
 800d212:	4602      	mov	r2, r0
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d901      	bls.n	800d220 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d21c:	2303      	movs	r3, #3
 800d21e:	e006      	b.n	800d22e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d220:	4b05      	ldr	r3, [pc, #20]	; (800d238 <RCCEx_PLL2_Config+0x15c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d0f0      	beq.n	800d20e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	58024400 	.word	0x58024400
 800d23c:	ffff0007 	.word	0xffff0007

0800d240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d24e:	4b53      	ldr	r3, [pc, #332]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d252:	f003 0303 	and.w	r3, r3, #3
 800d256:	2b03      	cmp	r3, #3
 800d258:	d101      	bne.n	800d25e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e099      	b.n	800d392 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d25e:	4b4f      	ldr	r3, [pc, #316]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a4e      	ldr	r2, [pc, #312]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d26a:	f7f6 fe17 	bl	8003e9c <HAL_GetTick>
 800d26e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d270:	e008      	b.n	800d284 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d272:	f7f6 fe13 	bl	8003e9c <HAL_GetTick>
 800d276:	4602      	mov	r2, r0
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d901      	bls.n	800d284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d280:	2303      	movs	r3, #3
 800d282:	e086      	b.n	800d392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d284:	4b45      	ldr	r3, [pc, #276]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1f0      	bne.n	800d272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d290:	4b42      	ldr	r3, [pc, #264]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d294:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	051b      	lsls	r3, r3, #20
 800d29e:	493f      	ldr	r1, [pc, #252]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	628b      	str	r3, [r1, #40]	; 0x28
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	025b      	lsls	r3, r3, #9
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	431a      	orrs	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	041b      	lsls	r3, r3, #16
 800d2c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d2c6:	431a      	orrs	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	061b      	lsls	r3, r3, #24
 800d2d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d2d4:	4931      	ldr	r1, [pc, #196]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d2da:	4b30      	ldr	r3, [pc, #192]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	695b      	ldr	r3, [r3, #20]
 800d2e6:	492d      	ldr	r1, [pc, #180]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d2ec:	4b2b      	ldr	r3, [pc, #172]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	699b      	ldr	r3, [r3, #24]
 800d2f8:	4928      	ldr	r1, [pc, #160]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d2fe:	4b27      	ldr	r3, [pc, #156]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d302:	4a26      	ldr	r2, [pc, #152]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d30a:	4b24      	ldr	r3, [pc, #144]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d30c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d30e:	4b24      	ldr	r3, [pc, #144]	; (800d3a0 <RCCEx_PLL3_Config+0x160>)
 800d310:	4013      	ands	r3, r2
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	69d2      	ldr	r2, [r2, #28]
 800d316:	00d2      	lsls	r2, r2, #3
 800d318:	4920      	ldr	r1, [pc, #128]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d31a:	4313      	orrs	r3, r2
 800d31c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d31e:	4b1f      	ldr	r3, [pc, #124]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d322:	4a1e      	ldr	r2, [pc, #120]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d106      	bne.n	800d33e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d330:	4b1a      	ldr	r3, [pc, #104]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d334:	4a19      	ldr	r2, [pc, #100]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d336:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d33a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d33c:	e00f      	b.n	800d35e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d106      	bne.n	800d352 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d344:	4b15      	ldr	r3, [pc, #84]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d348:	4a14      	ldr	r2, [pc, #80]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d34a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d34e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d350:	e005      	b.n	800d35e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d352:	4b12      	ldr	r3, [pc, #72]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d356:	4a11      	ldr	r2, [pc, #68]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d35c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d35e:	4b0f      	ldr	r3, [pc, #60]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a0e      	ldr	r2, [pc, #56]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d36a:	f7f6 fd97 	bl	8003e9c <HAL_GetTick>
 800d36e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d370:	e008      	b.n	800d384 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d372:	f7f6 fd93 	bl	8003e9c <HAL_GetTick>
 800d376:	4602      	mov	r2, r0
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d901      	bls.n	800d384 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e006      	b.n	800d392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d384:	4b05      	ldr	r3, [pc, #20]	; (800d39c <RCCEx_PLL3_Config+0x15c>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d0f0      	beq.n	800d372 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d390:	7bfb      	ldrb	r3, [r7, #15]
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	58024400 	.word	0x58024400
 800d3a0:	ffff0007 	.word	0xffff0007

0800d3a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d101      	bne.n	800d3b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e049      	b.n	800d44a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3bc:	b2db      	uxtb	r3, r3
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d106      	bne.n	800d3d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7f6 f896 	bl	80034fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2202      	movs	r2, #2
 800d3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	3304      	adds	r3, #4
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	4610      	mov	r0, r2
 800d3e4:	f000 f92e 	bl	800d644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2201      	movs	r2, #1
 800d41c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2201      	movs	r2, #1
 800d43c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
	...

0800d454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d101      	bne.n	800d470 <HAL_TIM_ConfigClockSource+0x1c>
 800d46c:	2302      	movs	r3, #2
 800d46e:	e0dc      	b.n	800d62a <HAL_TIM_ConfigClockSource+0x1d6>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2202      	movs	r2, #2
 800d47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d488:	68ba      	ldr	r2, [r7, #8]
 800d48a:	4b6a      	ldr	r3, [pc, #424]	; (800d634 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d48c:	4013      	ands	r3, r2
 800d48e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a64      	ldr	r2, [pc, #400]	; (800d638 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	f000 80a9 	beq.w	800d5fe <HAL_TIM_ConfigClockSource+0x1aa>
 800d4ac:	4a62      	ldr	r2, [pc, #392]	; (800d638 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	f200 80ae 	bhi.w	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4b4:	4a61      	ldr	r2, [pc, #388]	; (800d63c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	f000 80a1 	beq.w	800d5fe <HAL_TIM_ConfigClockSource+0x1aa>
 800d4bc:	4a5f      	ldr	r2, [pc, #380]	; (800d63c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	f200 80a6 	bhi.w	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4c4:	4a5e      	ldr	r2, [pc, #376]	; (800d640 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	f000 8099 	beq.w	800d5fe <HAL_TIM_ConfigClockSource+0x1aa>
 800d4cc:	4a5c      	ldr	r2, [pc, #368]	; (800d640 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	f200 809e 	bhi.w	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d4d8:	f000 8091 	beq.w	800d5fe <HAL_TIM_ConfigClockSource+0x1aa>
 800d4dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d4e0:	f200 8096 	bhi.w	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4e8:	f000 8089 	beq.w	800d5fe <HAL_TIM_ConfigClockSource+0x1aa>
 800d4ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4f0:	f200 808e 	bhi.w	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4f8:	d03e      	beq.n	800d578 <HAL_TIM_ConfigClockSource+0x124>
 800d4fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4fe:	f200 8087 	bhi.w	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d506:	f000 8086 	beq.w	800d616 <HAL_TIM_ConfigClockSource+0x1c2>
 800d50a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d50e:	d87f      	bhi.n	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d510:	2b70      	cmp	r3, #112	; 0x70
 800d512:	d01a      	beq.n	800d54a <HAL_TIM_ConfigClockSource+0xf6>
 800d514:	2b70      	cmp	r3, #112	; 0x70
 800d516:	d87b      	bhi.n	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d518:	2b60      	cmp	r3, #96	; 0x60
 800d51a:	d050      	beq.n	800d5be <HAL_TIM_ConfigClockSource+0x16a>
 800d51c:	2b60      	cmp	r3, #96	; 0x60
 800d51e:	d877      	bhi.n	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d520:	2b50      	cmp	r3, #80	; 0x50
 800d522:	d03c      	beq.n	800d59e <HAL_TIM_ConfigClockSource+0x14a>
 800d524:	2b50      	cmp	r3, #80	; 0x50
 800d526:	d873      	bhi.n	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d528:	2b40      	cmp	r3, #64	; 0x40
 800d52a:	d058      	beq.n	800d5de <HAL_TIM_ConfigClockSource+0x18a>
 800d52c:	2b40      	cmp	r3, #64	; 0x40
 800d52e:	d86f      	bhi.n	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d530:	2b30      	cmp	r3, #48	; 0x30
 800d532:	d064      	beq.n	800d5fe <HAL_TIM_ConfigClockSource+0x1aa>
 800d534:	2b30      	cmp	r3, #48	; 0x30
 800d536:	d86b      	bhi.n	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d538:	2b20      	cmp	r3, #32
 800d53a:	d060      	beq.n	800d5fe <HAL_TIM_ConfigClockSource+0x1aa>
 800d53c:	2b20      	cmp	r3, #32
 800d53e:	d867      	bhi.n	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
 800d540:	2b00      	cmp	r3, #0
 800d542:	d05c      	beq.n	800d5fe <HAL_TIM_ConfigClockSource+0x1aa>
 800d544:	2b10      	cmp	r3, #16
 800d546:	d05a      	beq.n	800d5fe <HAL_TIM_ConfigClockSource+0x1aa>
 800d548:	e062      	b.n	800d610 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d55a:	f000 f98b 	bl	800d874 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d56c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	609a      	str	r2, [r3, #8]
      break;
 800d576:	e04f      	b.n	800d618 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d588:	f000 f974 	bl	800d874 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	689a      	ldr	r2, [r3, #8]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d59a:	609a      	str	r2, [r3, #8]
      break;
 800d59c:	e03c      	b.n	800d618 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	f000 f8e4 	bl	800d778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2150      	movs	r1, #80	; 0x50
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 f93e 	bl	800d838 <TIM_ITRx_SetConfig>
      break;
 800d5bc:	e02c      	b.n	800d618 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f000 f903 	bl	800d7d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2160      	movs	r1, #96	; 0x60
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f000 f92e 	bl	800d838 <TIM_ITRx_SetConfig>
      break;
 800d5dc:	e01c      	b.n	800d618 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	f000 f8c4 	bl	800d778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2140      	movs	r1, #64	; 0x40
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 f91e 	bl	800d838 <TIM_ITRx_SetConfig>
      break;
 800d5fc:	e00c      	b.n	800d618 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4619      	mov	r1, r3
 800d608:	4610      	mov	r0, r2
 800d60a:	f000 f915 	bl	800d838 <TIM_ITRx_SetConfig>
      break;
 800d60e:	e003      	b.n	800d618 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	73fb      	strb	r3, [r7, #15]
      break;
 800d614:	e000      	b.n	800d618 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d628:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	ffceff88 	.word	0xffceff88
 800d638:	00100040 	.word	0x00100040
 800d63c:	00100030 	.word	0x00100030
 800d640:	00100020 	.word	0x00100020

0800d644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4a40      	ldr	r2, [pc, #256]	; (800d758 <TIM_Base_SetConfig+0x114>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d013      	beq.n	800d684 <TIM_Base_SetConfig+0x40>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d662:	d00f      	beq.n	800d684 <TIM_Base_SetConfig+0x40>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4a3d      	ldr	r2, [pc, #244]	; (800d75c <TIM_Base_SetConfig+0x118>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d00b      	beq.n	800d684 <TIM_Base_SetConfig+0x40>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	4a3c      	ldr	r2, [pc, #240]	; (800d760 <TIM_Base_SetConfig+0x11c>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d007      	beq.n	800d684 <TIM_Base_SetConfig+0x40>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	4a3b      	ldr	r2, [pc, #236]	; (800d764 <TIM_Base_SetConfig+0x120>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d003      	beq.n	800d684 <TIM_Base_SetConfig+0x40>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	4a3a      	ldr	r2, [pc, #232]	; (800d768 <TIM_Base_SetConfig+0x124>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d108      	bne.n	800d696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d68a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	4313      	orrs	r3, r2
 800d694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4a2f      	ldr	r2, [pc, #188]	; (800d758 <TIM_Base_SetConfig+0x114>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d01f      	beq.n	800d6de <TIM_Base_SetConfig+0x9a>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6a4:	d01b      	beq.n	800d6de <TIM_Base_SetConfig+0x9a>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a2c      	ldr	r2, [pc, #176]	; (800d75c <TIM_Base_SetConfig+0x118>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d017      	beq.n	800d6de <TIM_Base_SetConfig+0x9a>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4a2b      	ldr	r2, [pc, #172]	; (800d760 <TIM_Base_SetConfig+0x11c>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d013      	beq.n	800d6de <TIM_Base_SetConfig+0x9a>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a2a      	ldr	r2, [pc, #168]	; (800d764 <TIM_Base_SetConfig+0x120>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d00f      	beq.n	800d6de <TIM_Base_SetConfig+0x9a>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	4a29      	ldr	r2, [pc, #164]	; (800d768 <TIM_Base_SetConfig+0x124>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d00b      	beq.n	800d6de <TIM_Base_SetConfig+0x9a>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a28      	ldr	r2, [pc, #160]	; (800d76c <TIM_Base_SetConfig+0x128>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d007      	beq.n	800d6de <TIM_Base_SetConfig+0x9a>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	4a27      	ldr	r2, [pc, #156]	; (800d770 <TIM_Base_SetConfig+0x12c>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d003      	beq.n	800d6de <TIM_Base_SetConfig+0x9a>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4a26      	ldr	r2, [pc, #152]	; (800d774 <TIM_Base_SetConfig+0x130>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d108      	bne.n	800d6f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	695b      	ldr	r3, [r3, #20]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	689a      	ldr	r2, [r3, #8]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a10      	ldr	r2, [pc, #64]	; (800d758 <TIM_Base_SetConfig+0x114>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d00f      	beq.n	800d73c <TIM_Base_SetConfig+0xf8>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4a12      	ldr	r2, [pc, #72]	; (800d768 <TIM_Base_SetConfig+0x124>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d00b      	beq.n	800d73c <TIM_Base_SetConfig+0xf8>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a11      	ldr	r2, [pc, #68]	; (800d76c <TIM_Base_SetConfig+0x128>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d007      	beq.n	800d73c <TIM_Base_SetConfig+0xf8>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a10      	ldr	r2, [pc, #64]	; (800d770 <TIM_Base_SetConfig+0x12c>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d003      	beq.n	800d73c <TIM_Base_SetConfig+0xf8>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4a0f      	ldr	r2, [pc, #60]	; (800d774 <TIM_Base_SetConfig+0x130>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d103      	bne.n	800d744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	691a      	ldr	r2, [r3, #16]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	615a      	str	r2, [r3, #20]
}
 800d74a:	bf00      	nop
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	40010000 	.word	0x40010000
 800d75c:	40000400 	.word	0x40000400
 800d760:	40000800 	.word	0x40000800
 800d764:	40000c00 	.word	0x40000c00
 800d768:	40010400 	.word	0x40010400
 800d76c:	40014000 	.word	0x40014000
 800d770:	40014400 	.word	0x40014400
 800d774:	40014800 	.word	0x40014800

0800d778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6a1b      	ldr	r3, [r3, #32]
 800d788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6a1b      	ldr	r3, [r3, #32]
 800d78e:	f023 0201 	bic.w	r2, r3, #1
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	011b      	lsls	r3, r3, #4
 800d7a8:	693a      	ldr	r2, [r7, #16]
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f023 030a 	bic.w	r3, r3, #10
 800d7b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	697a      	ldr	r2, [r7, #20]
 800d7c8:	621a      	str	r2, [r3, #32]
}
 800d7ca:	bf00      	nop
 800d7cc:	371c      	adds	r7, #28
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr

0800d7d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7d6:	b480      	push	{r7}
 800d7d8:	b087      	sub	sp, #28
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	60b9      	str	r1, [r7, #8]
 800d7e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6a1b      	ldr	r3, [r3, #32]
 800d7e6:	f023 0210 	bic.w	r2, r3, #16
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6a1b      	ldr	r3, [r3, #32]
 800d7f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	031b      	lsls	r3, r3, #12
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	4313      	orrs	r3, r2
 800d80a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	011b      	lsls	r3, r3, #4
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	693a      	ldr	r2, [r7, #16]
 800d828:	621a      	str	r2, [r3, #32]
}
 800d82a:	bf00      	nop
 800d82c:	371c      	adds	r7, #28
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
	...

0800d838 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	4b09      	ldr	r3, [pc, #36]	; (800d870 <TIM_ITRx_SetConfig+0x38>)
 800d84c:	4013      	ands	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	4313      	orrs	r3, r2
 800d856:	f043 0307 	orr.w	r3, r3, #7
 800d85a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	609a      	str	r2, [r3, #8]
}
 800d862:	bf00      	nop
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	ffcfff8f 	.word	0xffcfff8f

0800d874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d874:	b480      	push	{r7}
 800d876:	b087      	sub	sp, #28
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d88e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	021a      	lsls	r2, r3, #8
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	431a      	orrs	r2, r3
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	697a      	ldr	r2, [r7, #20]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	609a      	str	r2, [r3, #8]
}
 800d8a8:	bf00      	nop
 800d8aa:	371c      	adds	r7, #28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d101      	bne.n	800d8cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	e06d      	b.n	800d9a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2202      	movs	r2, #2
 800d8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a30      	ldr	r2, [pc, #192]	; (800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d004      	beq.n	800d900 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a2f      	ldr	r2, [pc, #188]	; (800d9b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d108      	bne.n	800d912 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d906:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	4313      	orrs	r3, r2
 800d910:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d918:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	4313      	orrs	r3, r2
 800d922:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a20      	ldr	r2, [pc, #128]	; (800d9b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d022      	beq.n	800d97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d93e:	d01d      	beq.n	800d97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a1d      	ldr	r2, [pc, #116]	; (800d9bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d018      	beq.n	800d97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a1c      	ldr	r2, [pc, #112]	; (800d9c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d013      	beq.n	800d97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a1a      	ldr	r2, [pc, #104]	; (800d9c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d00e      	beq.n	800d97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a15      	ldr	r2, [pc, #84]	; (800d9b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d009      	beq.n	800d97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a16      	ldr	r2, [pc, #88]	; (800d9c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d004      	beq.n	800d97c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a15      	ldr	r2, [pc, #84]	; (800d9cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d10c      	bne.n	800d996 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d982:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2201      	movs	r2, #1
 800d99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	40010000 	.word	0x40010000
 800d9b8:	40010400 	.word	0x40010400
 800d9bc:	40000400 	.word	0x40000400
 800d9c0:	40000800 	.word	0x40000800
 800d9c4:	40000c00 	.word	0x40000c00
 800d9c8:	40001800 	.word	0x40001800
 800d9cc:	40014000 	.word	0x40014000

0800d9d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e042      	b.n	800da68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d106      	bne.n	800d9fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7f5 fdfd 	bl	80035f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2224      	movs	r2, #36	; 0x24
 800d9fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f022 0201 	bic.w	r2, r2, #1
 800da10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 f8ba 	bl	800db8c <UART_SetConfig>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d101      	bne.n	800da22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
 800da20:	e022      	b.n	800da68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da26:	2b00      	cmp	r3, #0
 800da28:	d002      	beq.n	800da30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 fe16 	bl	800e65c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	685a      	ldr	r2, [r3, #4]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	689a      	ldr	r2, [r3, #8]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f042 0201 	orr.w	r2, r2, #1
 800da5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fe9d 	bl	800e7a0 <UART_CheckIdleState>
 800da66:	4603      	mov	r3, r0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b08a      	sub	sp, #40	; 0x28
 800da74:	af02      	add	r7, sp, #8
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	603b      	str	r3, [r7, #0]
 800da7c:	4613      	mov	r3, r2
 800da7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da86:	2b20      	cmp	r3, #32
 800da88:	d17b      	bne.n	800db82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <HAL_UART_Transmit+0x26>
 800da90:	88fb      	ldrh	r3, [r7, #6]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d101      	bne.n	800da9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800da96:	2301      	movs	r3, #1
 800da98:	e074      	b.n	800db84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2221      	movs	r2, #33	; 0x21
 800daa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800daaa:	f7f6 f9f7 	bl	8003e9c <HAL_GetTick>
 800daae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	88fa      	ldrh	r2, [r7, #6]
 800dab4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	88fa      	ldrh	r2, [r7, #6]
 800dabc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dac8:	d108      	bne.n	800dadc <HAL_UART_Transmit+0x6c>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d104      	bne.n	800dadc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dad2:	2300      	movs	r3, #0
 800dad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	61bb      	str	r3, [r7, #24]
 800dada:	e003      	b.n	800dae4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dae0:	2300      	movs	r3, #0
 800dae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dae4:	e030      	b.n	800db48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	2200      	movs	r2, #0
 800daee:	2180      	movs	r1, #128	; 0x80
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	f000 feff 	bl	800e8f4 <UART_WaitOnFlagUntilTimeout>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d005      	beq.n	800db08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2220      	movs	r2, #32
 800db00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800db04:	2303      	movs	r3, #3
 800db06:	e03d      	b.n	800db84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10b      	bne.n	800db26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	881b      	ldrh	r3, [r3, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	3302      	adds	r3, #2
 800db22:	61bb      	str	r3, [r7, #24]
 800db24:	e007      	b.n	800db36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	781a      	ldrb	r2, [r3, #0]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	3301      	adds	r3, #1
 800db34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	3b01      	subs	r3, #1
 800db40:	b29a      	uxth	r2, r3
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800db4e:	b29b      	uxth	r3, r3
 800db50:	2b00      	cmp	r3, #0
 800db52:	d1c8      	bne.n	800dae6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	9300      	str	r3, [sp, #0]
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	2200      	movs	r2, #0
 800db5c:	2140      	movs	r1, #64	; 0x40
 800db5e:	68f8      	ldr	r0, [r7, #12]
 800db60:	f000 fec8 	bl	800e8f4 <UART_WaitOnFlagUntilTimeout>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d005      	beq.n	800db76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2220      	movs	r2, #32
 800db6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800db72:	2303      	movs	r3, #3
 800db74:	e006      	b.n	800db84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2220      	movs	r2, #32
 800db7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800db7e:	2300      	movs	r3, #0
 800db80:	e000      	b.n	800db84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800db82:	2302      	movs	r3, #2
  }
}
 800db84:	4618      	mov	r0, r3
 800db86:	3720      	adds	r7, #32
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db90:	b092      	sub	sp, #72	; 0x48
 800db92:	af00      	add	r7, sp, #0
 800db94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	689a      	ldr	r2, [r3, #8]
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	691b      	ldr	r3, [r3, #16]
 800dba4:	431a      	orrs	r2, r3
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	695b      	ldr	r3, [r3, #20]
 800dbaa:	431a      	orrs	r2, r3
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	69db      	ldr	r3, [r3, #28]
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	4bbe      	ldr	r3, [pc, #760]	; (800deb4 <UART_SetConfig+0x328>)
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	697a      	ldr	r2, [r7, #20]
 800dbc0:	6812      	ldr	r2, [r2, #0]
 800dbc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbc4:	430b      	orrs	r3, r1
 800dbc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	68da      	ldr	r2, [r3, #12]
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	430a      	orrs	r2, r1
 800dbdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4ab3      	ldr	r2, [pc, #716]	; (800deb8 <UART_SetConfig+0x32c>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d004      	beq.n	800dbf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	689a      	ldr	r2, [r3, #8]
 800dbfe:	4baf      	ldr	r3, [pc, #700]	; (800debc <UART_SetConfig+0x330>)
 800dc00:	4013      	ands	r3, r2
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	6812      	ldr	r2, [r2, #0]
 800dc06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc08:	430b      	orrs	r3, r1
 800dc0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc12:	f023 010f 	bic.w	r1, r3, #15
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	430a      	orrs	r2, r1
 800dc20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4aa6      	ldr	r2, [pc, #664]	; (800dec0 <UART_SetConfig+0x334>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d177      	bne.n	800dd1c <UART_SetConfig+0x190>
 800dc2c:	4ba5      	ldr	r3, [pc, #660]	; (800dec4 <UART_SetConfig+0x338>)
 800dc2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc34:	2b28      	cmp	r3, #40	; 0x28
 800dc36:	d86d      	bhi.n	800dd14 <UART_SetConfig+0x188>
 800dc38:	a201      	add	r2, pc, #4	; (adr r2, 800dc40 <UART_SetConfig+0xb4>)
 800dc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3e:	bf00      	nop
 800dc40:	0800dce5 	.word	0x0800dce5
 800dc44:	0800dd15 	.word	0x0800dd15
 800dc48:	0800dd15 	.word	0x0800dd15
 800dc4c:	0800dd15 	.word	0x0800dd15
 800dc50:	0800dd15 	.word	0x0800dd15
 800dc54:	0800dd15 	.word	0x0800dd15
 800dc58:	0800dd15 	.word	0x0800dd15
 800dc5c:	0800dd15 	.word	0x0800dd15
 800dc60:	0800dced 	.word	0x0800dced
 800dc64:	0800dd15 	.word	0x0800dd15
 800dc68:	0800dd15 	.word	0x0800dd15
 800dc6c:	0800dd15 	.word	0x0800dd15
 800dc70:	0800dd15 	.word	0x0800dd15
 800dc74:	0800dd15 	.word	0x0800dd15
 800dc78:	0800dd15 	.word	0x0800dd15
 800dc7c:	0800dd15 	.word	0x0800dd15
 800dc80:	0800dcf5 	.word	0x0800dcf5
 800dc84:	0800dd15 	.word	0x0800dd15
 800dc88:	0800dd15 	.word	0x0800dd15
 800dc8c:	0800dd15 	.word	0x0800dd15
 800dc90:	0800dd15 	.word	0x0800dd15
 800dc94:	0800dd15 	.word	0x0800dd15
 800dc98:	0800dd15 	.word	0x0800dd15
 800dc9c:	0800dd15 	.word	0x0800dd15
 800dca0:	0800dcfd 	.word	0x0800dcfd
 800dca4:	0800dd15 	.word	0x0800dd15
 800dca8:	0800dd15 	.word	0x0800dd15
 800dcac:	0800dd15 	.word	0x0800dd15
 800dcb0:	0800dd15 	.word	0x0800dd15
 800dcb4:	0800dd15 	.word	0x0800dd15
 800dcb8:	0800dd15 	.word	0x0800dd15
 800dcbc:	0800dd15 	.word	0x0800dd15
 800dcc0:	0800dd05 	.word	0x0800dd05
 800dcc4:	0800dd15 	.word	0x0800dd15
 800dcc8:	0800dd15 	.word	0x0800dd15
 800dccc:	0800dd15 	.word	0x0800dd15
 800dcd0:	0800dd15 	.word	0x0800dd15
 800dcd4:	0800dd15 	.word	0x0800dd15
 800dcd8:	0800dd15 	.word	0x0800dd15
 800dcdc:	0800dd15 	.word	0x0800dd15
 800dce0:	0800dd0d 	.word	0x0800dd0d
 800dce4:	2301      	movs	r3, #1
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcea:	e222      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dcec:	2304      	movs	r3, #4
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e21e      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dcf4:	2308      	movs	r3, #8
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e21a      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dcfc:	2310      	movs	r3, #16
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e216      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd04:	2320      	movs	r3, #32
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0a:	e212      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd0c:	2340      	movs	r3, #64	; 0x40
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd12:	e20e      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd14:	2380      	movs	r3, #128	; 0x80
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e20a      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a69      	ldr	r2, [pc, #420]	; (800dec8 <UART_SetConfig+0x33c>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d130      	bne.n	800dd88 <UART_SetConfig+0x1fc>
 800dd26:	4b67      	ldr	r3, [pc, #412]	; (800dec4 <UART_SetConfig+0x338>)
 800dd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd2a:	f003 0307 	and.w	r3, r3, #7
 800dd2e:	2b05      	cmp	r3, #5
 800dd30:	d826      	bhi.n	800dd80 <UART_SetConfig+0x1f4>
 800dd32:	a201      	add	r2, pc, #4	; (adr r2, 800dd38 <UART_SetConfig+0x1ac>)
 800dd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd38:	0800dd51 	.word	0x0800dd51
 800dd3c:	0800dd59 	.word	0x0800dd59
 800dd40:	0800dd61 	.word	0x0800dd61
 800dd44:	0800dd69 	.word	0x0800dd69
 800dd48:	0800dd71 	.word	0x0800dd71
 800dd4c:	0800dd79 	.word	0x0800dd79
 800dd50:	2300      	movs	r3, #0
 800dd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd56:	e1ec      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd58:	2304      	movs	r3, #4
 800dd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5e:	e1e8      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd60:	2308      	movs	r3, #8
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd66:	e1e4      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd68:	2310      	movs	r3, #16
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6e:	e1e0      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd70:	2320      	movs	r3, #32
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd76:	e1dc      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd78:	2340      	movs	r3, #64	; 0x40
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7e:	e1d8      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd80:	2380      	movs	r3, #128	; 0x80
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd86:	e1d4      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a4f      	ldr	r2, [pc, #316]	; (800decc <UART_SetConfig+0x340>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d130      	bne.n	800ddf4 <UART_SetConfig+0x268>
 800dd92:	4b4c      	ldr	r3, [pc, #304]	; (800dec4 <UART_SetConfig+0x338>)
 800dd94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd96:	f003 0307 	and.w	r3, r3, #7
 800dd9a:	2b05      	cmp	r3, #5
 800dd9c:	d826      	bhi.n	800ddec <UART_SetConfig+0x260>
 800dd9e:	a201      	add	r2, pc, #4	; (adr r2, 800dda4 <UART_SetConfig+0x218>)
 800dda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda4:	0800ddbd 	.word	0x0800ddbd
 800dda8:	0800ddc5 	.word	0x0800ddc5
 800ddac:	0800ddcd 	.word	0x0800ddcd
 800ddb0:	0800ddd5 	.word	0x0800ddd5
 800ddb4:	0800dddd 	.word	0x0800dddd
 800ddb8:	0800dde5 	.word	0x0800dde5
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc2:	e1b6      	b.n	800e132 <UART_SetConfig+0x5a6>
 800ddc4:	2304      	movs	r3, #4
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddca:	e1b2      	b.n	800e132 <UART_SetConfig+0x5a6>
 800ddcc:	2308      	movs	r3, #8
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd2:	e1ae      	b.n	800e132 <UART_SetConfig+0x5a6>
 800ddd4:	2310      	movs	r3, #16
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddda:	e1aa      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dddc:	2320      	movs	r3, #32
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e1a6      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dde4:	2340      	movs	r3, #64	; 0x40
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e1a2      	b.n	800e132 <UART_SetConfig+0x5a6>
 800ddec:	2380      	movs	r3, #128	; 0x80
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf2:	e19e      	b.n	800e132 <UART_SetConfig+0x5a6>
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a35      	ldr	r2, [pc, #212]	; (800ded0 <UART_SetConfig+0x344>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d130      	bne.n	800de60 <UART_SetConfig+0x2d4>
 800ddfe:	4b31      	ldr	r3, [pc, #196]	; (800dec4 <UART_SetConfig+0x338>)
 800de00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de02:	f003 0307 	and.w	r3, r3, #7
 800de06:	2b05      	cmp	r3, #5
 800de08:	d826      	bhi.n	800de58 <UART_SetConfig+0x2cc>
 800de0a:	a201      	add	r2, pc, #4	; (adr r2, 800de10 <UART_SetConfig+0x284>)
 800de0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de10:	0800de29 	.word	0x0800de29
 800de14:	0800de31 	.word	0x0800de31
 800de18:	0800de39 	.word	0x0800de39
 800de1c:	0800de41 	.word	0x0800de41
 800de20:	0800de49 	.word	0x0800de49
 800de24:	0800de51 	.word	0x0800de51
 800de28:	2300      	movs	r3, #0
 800de2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2e:	e180      	b.n	800e132 <UART_SetConfig+0x5a6>
 800de30:	2304      	movs	r3, #4
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de36:	e17c      	b.n	800e132 <UART_SetConfig+0x5a6>
 800de38:	2308      	movs	r3, #8
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3e:	e178      	b.n	800e132 <UART_SetConfig+0x5a6>
 800de40:	2310      	movs	r3, #16
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de46:	e174      	b.n	800e132 <UART_SetConfig+0x5a6>
 800de48:	2320      	movs	r3, #32
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e170      	b.n	800e132 <UART_SetConfig+0x5a6>
 800de50:	2340      	movs	r3, #64	; 0x40
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e16c      	b.n	800e132 <UART_SetConfig+0x5a6>
 800de58:	2380      	movs	r3, #128	; 0x80
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e168      	b.n	800e132 <UART_SetConfig+0x5a6>
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a1b      	ldr	r2, [pc, #108]	; (800ded4 <UART_SetConfig+0x348>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d142      	bne.n	800def0 <UART_SetConfig+0x364>
 800de6a:	4b16      	ldr	r3, [pc, #88]	; (800dec4 <UART_SetConfig+0x338>)
 800de6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de6e:	f003 0307 	and.w	r3, r3, #7
 800de72:	2b05      	cmp	r3, #5
 800de74:	d838      	bhi.n	800dee8 <UART_SetConfig+0x35c>
 800de76:	a201      	add	r2, pc, #4	; (adr r2, 800de7c <UART_SetConfig+0x2f0>)
 800de78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7c:	0800de95 	.word	0x0800de95
 800de80:	0800de9d 	.word	0x0800de9d
 800de84:	0800dea5 	.word	0x0800dea5
 800de88:	0800dead 	.word	0x0800dead
 800de8c:	0800ded9 	.word	0x0800ded9
 800de90:	0800dee1 	.word	0x0800dee1
 800de94:	2300      	movs	r3, #0
 800de96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9a:	e14a      	b.n	800e132 <UART_SetConfig+0x5a6>
 800de9c:	2304      	movs	r3, #4
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea2:	e146      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dea4:	2308      	movs	r3, #8
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e142      	b.n	800e132 <UART_SetConfig+0x5a6>
 800deac:	2310      	movs	r3, #16
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e13e      	b.n	800e132 <UART_SetConfig+0x5a6>
 800deb4:	cfff69f3 	.word	0xcfff69f3
 800deb8:	58000c00 	.word	0x58000c00
 800debc:	11fff4ff 	.word	0x11fff4ff
 800dec0:	40011000 	.word	0x40011000
 800dec4:	58024400 	.word	0x58024400
 800dec8:	40004400 	.word	0x40004400
 800decc:	40004800 	.word	0x40004800
 800ded0:	40004c00 	.word	0x40004c00
 800ded4:	40005000 	.word	0x40005000
 800ded8:	2320      	movs	r3, #32
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dede:	e128      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dee0:	2340      	movs	r3, #64	; 0x40
 800dee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee6:	e124      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dee8:	2380      	movs	r3, #128	; 0x80
 800deea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deee:	e120      	b.n	800e132 <UART_SetConfig+0x5a6>
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4acb      	ldr	r2, [pc, #812]	; (800e224 <UART_SetConfig+0x698>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d176      	bne.n	800dfe8 <UART_SetConfig+0x45c>
 800defa:	4bcb      	ldr	r3, [pc, #812]	; (800e228 <UART_SetConfig+0x69c>)
 800defc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800defe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df02:	2b28      	cmp	r3, #40	; 0x28
 800df04:	d86c      	bhi.n	800dfe0 <UART_SetConfig+0x454>
 800df06:	a201      	add	r2, pc, #4	; (adr r2, 800df0c <UART_SetConfig+0x380>)
 800df08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0c:	0800dfb1 	.word	0x0800dfb1
 800df10:	0800dfe1 	.word	0x0800dfe1
 800df14:	0800dfe1 	.word	0x0800dfe1
 800df18:	0800dfe1 	.word	0x0800dfe1
 800df1c:	0800dfe1 	.word	0x0800dfe1
 800df20:	0800dfe1 	.word	0x0800dfe1
 800df24:	0800dfe1 	.word	0x0800dfe1
 800df28:	0800dfe1 	.word	0x0800dfe1
 800df2c:	0800dfb9 	.word	0x0800dfb9
 800df30:	0800dfe1 	.word	0x0800dfe1
 800df34:	0800dfe1 	.word	0x0800dfe1
 800df38:	0800dfe1 	.word	0x0800dfe1
 800df3c:	0800dfe1 	.word	0x0800dfe1
 800df40:	0800dfe1 	.word	0x0800dfe1
 800df44:	0800dfe1 	.word	0x0800dfe1
 800df48:	0800dfe1 	.word	0x0800dfe1
 800df4c:	0800dfc1 	.word	0x0800dfc1
 800df50:	0800dfe1 	.word	0x0800dfe1
 800df54:	0800dfe1 	.word	0x0800dfe1
 800df58:	0800dfe1 	.word	0x0800dfe1
 800df5c:	0800dfe1 	.word	0x0800dfe1
 800df60:	0800dfe1 	.word	0x0800dfe1
 800df64:	0800dfe1 	.word	0x0800dfe1
 800df68:	0800dfe1 	.word	0x0800dfe1
 800df6c:	0800dfc9 	.word	0x0800dfc9
 800df70:	0800dfe1 	.word	0x0800dfe1
 800df74:	0800dfe1 	.word	0x0800dfe1
 800df78:	0800dfe1 	.word	0x0800dfe1
 800df7c:	0800dfe1 	.word	0x0800dfe1
 800df80:	0800dfe1 	.word	0x0800dfe1
 800df84:	0800dfe1 	.word	0x0800dfe1
 800df88:	0800dfe1 	.word	0x0800dfe1
 800df8c:	0800dfd1 	.word	0x0800dfd1
 800df90:	0800dfe1 	.word	0x0800dfe1
 800df94:	0800dfe1 	.word	0x0800dfe1
 800df98:	0800dfe1 	.word	0x0800dfe1
 800df9c:	0800dfe1 	.word	0x0800dfe1
 800dfa0:	0800dfe1 	.word	0x0800dfe1
 800dfa4:	0800dfe1 	.word	0x0800dfe1
 800dfa8:	0800dfe1 	.word	0x0800dfe1
 800dfac:	0800dfd9 	.word	0x0800dfd9
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb6:	e0bc      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dfb8:	2304      	movs	r3, #4
 800dfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfbe:	e0b8      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dfc0:	2308      	movs	r3, #8
 800dfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfc6:	e0b4      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dfc8:	2310      	movs	r3, #16
 800dfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfce:	e0b0      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dfd0:	2320      	movs	r3, #32
 800dfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfd6:	e0ac      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dfd8:	2340      	movs	r3, #64	; 0x40
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfde:	e0a8      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dfe0:	2380      	movs	r3, #128	; 0x80
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfe6:	e0a4      	b.n	800e132 <UART_SetConfig+0x5a6>
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a8f      	ldr	r2, [pc, #572]	; (800e22c <UART_SetConfig+0x6a0>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d130      	bne.n	800e054 <UART_SetConfig+0x4c8>
 800dff2:	4b8d      	ldr	r3, [pc, #564]	; (800e228 <UART_SetConfig+0x69c>)
 800dff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dff6:	f003 0307 	and.w	r3, r3, #7
 800dffa:	2b05      	cmp	r3, #5
 800dffc:	d826      	bhi.n	800e04c <UART_SetConfig+0x4c0>
 800dffe:	a201      	add	r2, pc, #4	; (adr r2, 800e004 <UART_SetConfig+0x478>)
 800e000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e004:	0800e01d 	.word	0x0800e01d
 800e008:	0800e025 	.word	0x0800e025
 800e00c:	0800e02d 	.word	0x0800e02d
 800e010:	0800e035 	.word	0x0800e035
 800e014:	0800e03d 	.word	0x0800e03d
 800e018:	0800e045 	.word	0x0800e045
 800e01c:	2300      	movs	r3, #0
 800e01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e022:	e086      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e024:	2304      	movs	r3, #4
 800e026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02a:	e082      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e02c:	2308      	movs	r3, #8
 800e02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e032:	e07e      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e034:	2310      	movs	r3, #16
 800e036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03a:	e07a      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e03c:	2320      	movs	r3, #32
 800e03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e042:	e076      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e044:	2340      	movs	r3, #64	; 0x40
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04a:	e072      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e04c:	2380      	movs	r3, #128	; 0x80
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e052:	e06e      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a75      	ldr	r2, [pc, #468]	; (800e230 <UART_SetConfig+0x6a4>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d130      	bne.n	800e0c0 <UART_SetConfig+0x534>
 800e05e:	4b72      	ldr	r3, [pc, #456]	; (800e228 <UART_SetConfig+0x69c>)
 800e060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e062:	f003 0307 	and.w	r3, r3, #7
 800e066:	2b05      	cmp	r3, #5
 800e068:	d826      	bhi.n	800e0b8 <UART_SetConfig+0x52c>
 800e06a:	a201      	add	r2, pc, #4	; (adr r2, 800e070 <UART_SetConfig+0x4e4>)
 800e06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e070:	0800e089 	.word	0x0800e089
 800e074:	0800e091 	.word	0x0800e091
 800e078:	0800e099 	.word	0x0800e099
 800e07c:	0800e0a1 	.word	0x0800e0a1
 800e080:	0800e0a9 	.word	0x0800e0a9
 800e084:	0800e0b1 	.word	0x0800e0b1
 800e088:	2300      	movs	r3, #0
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08e:	e050      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e090:	2304      	movs	r3, #4
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e096:	e04c      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e098:	2308      	movs	r3, #8
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09e:	e048      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e0a0:	2310      	movs	r3, #16
 800e0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a6:	e044      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e0a8:	2320      	movs	r3, #32
 800e0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ae:	e040      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e0b0:	2340      	movs	r3, #64	; 0x40
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b6:	e03c      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e0b8:	2380      	movs	r3, #128	; 0x80
 800e0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0be:	e038      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a5b      	ldr	r2, [pc, #364]	; (800e234 <UART_SetConfig+0x6a8>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d130      	bne.n	800e12c <UART_SetConfig+0x5a0>
 800e0ca:	4b57      	ldr	r3, [pc, #348]	; (800e228 <UART_SetConfig+0x69c>)
 800e0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0ce:	f003 0307 	and.w	r3, r3, #7
 800e0d2:	2b05      	cmp	r3, #5
 800e0d4:	d826      	bhi.n	800e124 <UART_SetConfig+0x598>
 800e0d6:	a201      	add	r2, pc, #4	; (adr r2, 800e0dc <UART_SetConfig+0x550>)
 800e0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0dc:	0800e0f5 	.word	0x0800e0f5
 800e0e0:	0800e0fd 	.word	0x0800e0fd
 800e0e4:	0800e105 	.word	0x0800e105
 800e0e8:	0800e10d 	.word	0x0800e10d
 800e0ec:	0800e115 	.word	0x0800e115
 800e0f0:	0800e11d 	.word	0x0800e11d
 800e0f4:	2302      	movs	r3, #2
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fa:	e01a      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e0fc:	2304      	movs	r3, #4
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e016      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e104:	2308      	movs	r3, #8
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10a:	e012      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e10c:	2310      	movs	r3, #16
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e112:	e00e      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e114:	2320      	movs	r3, #32
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11a:	e00a      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e11c:	2340      	movs	r3, #64	; 0x40
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e006      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e124:	2380      	movs	r3, #128	; 0x80
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12a:	e002      	b.n	800e132 <UART_SetConfig+0x5a6>
 800e12c:	2380      	movs	r3, #128	; 0x80
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4a3f      	ldr	r2, [pc, #252]	; (800e234 <UART_SetConfig+0x6a8>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	f040 80f8 	bne.w	800e32e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e13e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e142:	2b20      	cmp	r3, #32
 800e144:	dc46      	bgt.n	800e1d4 <UART_SetConfig+0x648>
 800e146:	2b02      	cmp	r3, #2
 800e148:	f2c0 8082 	blt.w	800e250 <UART_SetConfig+0x6c4>
 800e14c:	3b02      	subs	r3, #2
 800e14e:	2b1e      	cmp	r3, #30
 800e150:	d87e      	bhi.n	800e250 <UART_SetConfig+0x6c4>
 800e152:	a201      	add	r2, pc, #4	; (adr r2, 800e158 <UART_SetConfig+0x5cc>)
 800e154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e158:	0800e1db 	.word	0x0800e1db
 800e15c:	0800e251 	.word	0x0800e251
 800e160:	0800e1e3 	.word	0x0800e1e3
 800e164:	0800e251 	.word	0x0800e251
 800e168:	0800e251 	.word	0x0800e251
 800e16c:	0800e251 	.word	0x0800e251
 800e170:	0800e1f3 	.word	0x0800e1f3
 800e174:	0800e251 	.word	0x0800e251
 800e178:	0800e251 	.word	0x0800e251
 800e17c:	0800e251 	.word	0x0800e251
 800e180:	0800e251 	.word	0x0800e251
 800e184:	0800e251 	.word	0x0800e251
 800e188:	0800e251 	.word	0x0800e251
 800e18c:	0800e251 	.word	0x0800e251
 800e190:	0800e203 	.word	0x0800e203
 800e194:	0800e251 	.word	0x0800e251
 800e198:	0800e251 	.word	0x0800e251
 800e19c:	0800e251 	.word	0x0800e251
 800e1a0:	0800e251 	.word	0x0800e251
 800e1a4:	0800e251 	.word	0x0800e251
 800e1a8:	0800e251 	.word	0x0800e251
 800e1ac:	0800e251 	.word	0x0800e251
 800e1b0:	0800e251 	.word	0x0800e251
 800e1b4:	0800e251 	.word	0x0800e251
 800e1b8:	0800e251 	.word	0x0800e251
 800e1bc:	0800e251 	.word	0x0800e251
 800e1c0:	0800e251 	.word	0x0800e251
 800e1c4:	0800e251 	.word	0x0800e251
 800e1c8:	0800e251 	.word	0x0800e251
 800e1cc:	0800e251 	.word	0x0800e251
 800e1d0:	0800e243 	.word	0x0800e243
 800e1d4:	2b40      	cmp	r3, #64	; 0x40
 800e1d6:	d037      	beq.n	800e248 <UART_SetConfig+0x6bc>
 800e1d8:	e03a      	b.n	800e250 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e1da:	f7fe fb19 	bl	800c810 <HAL_RCCEx_GetD3PCLK1Freq>
 800e1de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1e0:	e03c      	b.n	800e25c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7fe fb28 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f0:	e034      	b.n	800e25c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1f2:	f107 0318 	add.w	r3, r7, #24
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fe fc74 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e200:	e02c      	b.n	800e25c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e202:	4b09      	ldr	r3, [pc, #36]	; (800e228 <UART_SetConfig+0x69c>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f003 0320 	and.w	r3, r3, #32
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d016      	beq.n	800e23c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e20e:	4b06      	ldr	r3, [pc, #24]	; (800e228 <UART_SetConfig+0x69c>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	08db      	lsrs	r3, r3, #3
 800e214:	f003 0303 	and.w	r3, r3, #3
 800e218:	4a07      	ldr	r2, [pc, #28]	; (800e238 <UART_SetConfig+0x6ac>)
 800e21a:	fa22 f303 	lsr.w	r3, r2, r3
 800e21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e220:	e01c      	b.n	800e25c <UART_SetConfig+0x6d0>
 800e222:	bf00      	nop
 800e224:	40011400 	.word	0x40011400
 800e228:	58024400 	.word	0x58024400
 800e22c:	40007800 	.word	0x40007800
 800e230:	40007c00 	.word	0x40007c00
 800e234:	58000c00 	.word	0x58000c00
 800e238:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e23c:	4b9d      	ldr	r3, [pc, #628]	; (800e4b4 <UART_SetConfig+0x928>)
 800e23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e240:	e00c      	b.n	800e25c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e242:	4b9d      	ldr	r3, [pc, #628]	; (800e4b8 <UART_SetConfig+0x92c>)
 800e244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e246:	e009      	b.n	800e25c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e24e:	e005      	b.n	800e25c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e250:	2300      	movs	r3, #0
 800e252:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e25a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f000 81de 	beq.w	800e620 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e268:	4a94      	ldr	r2, [pc, #592]	; (800e4bc <UART_SetConfig+0x930>)
 800e26a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e26e:	461a      	mov	r2, r3
 800e270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e272:	fbb3 f3f2 	udiv	r3, r3, r2
 800e276:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	4613      	mov	r3, r2
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	4413      	add	r3, r2
 800e282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e284:	429a      	cmp	r2, r3
 800e286:	d305      	bcc.n	800e294 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e28e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e290:	429a      	cmp	r2, r3
 800e292:	d903      	bls.n	800e29c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e294:	2301      	movs	r3, #1
 800e296:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e29a:	e1c1      	b.n	800e620 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e29e:	2200      	movs	r2, #0
 800e2a0:	60bb      	str	r3, [r7, #8]
 800e2a2:	60fa      	str	r2, [r7, #12]
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a8:	4a84      	ldr	r2, [pc, #528]	; (800e4bc <UART_SetConfig+0x930>)
 800e2aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	603b      	str	r3, [r7, #0]
 800e2b4:	607a      	str	r2, [r7, #4]
 800e2b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e2be:	f7f3 fd47 	bl	8001d50 <__aeabi_uldivmod>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	f04f 0200 	mov.w	r2, #0
 800e2ce:	f04f 0300 	mov.w	r3, #0
 800e2d2:	020b      	lsls	r3, r1, #8
 800e2d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e2d8:	0202      	lsls	r2, r0, #8
 800e2da:	6979      	ldr	r1, [r7, #20]
 800e2dc:	6849      	ldr	r1, [r1, #4]
 800e2de:	0849      	lsrs	r1, r1, #1
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	eb12 0804 	adds.w	r8, r2, r4
 800e2ea:	eb43 0905 	adc.w	r9, r3, r5
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	469a      	mov	sl, r3
 800e2f6:	4693      	mov	fp, r2
 800e2f8:	4652      	mov	r2, sl
 800e2fa:	465b      	mov	r3, fp
 800e2fc:	4640      	mov	r0, r8
 800e2fe:	4649      	mov	r1, r9
 800e300:	f7f3 fd26 	bl	8001d50 <__aeabi_uldivmod>
 800e304:	4602      	mov	r2, r0
 800e306:	460b      	mov	r3, r1
 800e308:	4613      	mov	r3, r2
 800e30a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e312:	d308      	bcc.n	800e326 <UART_SetConfig+0x79a>
 800e314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e31a:	d204      	bcs.n	800e326 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e322:	60da      	str	r2, [r3, #12]
 800e324:	e17c      	b.n	800e620 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e32c:	e178      	b.n	800e620 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	69db      	ldr	r3, [r3, #28]
 800e332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e336:	f040 80c5 	bne.w	800e4c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e33a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e33e:	2b20      	cmp	r3, #32
 800e340:	dc48      	bgt.n	800e3d4 <UART_SetConfig+0x848>
 800e342:	2b00      	cmp	r3, #0
 800e344:	db7b      	blt.n	800e43e <UART_SetConfig+0x8b2>
 800e346:	2b20      	cmp	r3, #32
 800e348:	d879      	bhi.n	800e43e <UART_SetConfig+0x8b2>
 800e34a:	a201      	add	r2, pc, #4	; (adr r2, 800e350 <UART_SetConfig+0x7c4>)
 800e34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e350:	0800e3db 	.word	0x0800e3db
 800e354:	0800e3e3 	.word	0x0800e3e3
 800e358:	0800e43f 	.word	0x0800e43f
 800e35c:	0800e43f 	.word	0x0800e43f
 800e360:	0800e3eb 	.word	0x0800e3eb
 800e364:	0800e43f 	.word	0x0800e43f
 800e368:	0800e43f 	.word	0x0800e43f
 800e36c:	0800e43f 	.word	0x0800e43f
 800e370:	0800e3fb 	.word	0x0800e3fb
 800e374:	0800e43f 	.word	0x0800e43f
 800e378:	0800e43f 	.word	0x0800e43f
 800e37c:	0800e43f 	.word	0x0800e43f
 800e380:	0800e43f 	.word	0x0800e43f
 800e384:	0800e43f 	.word	0x0800e43f
 800e388:	0800e43f 	.word	0x0800e43f
 800e38c:	0800e43f 	.word	0x0800e43f
 800e390:	0800e40b 	.word	0x0800e40b
 800e394:	0800e43f 	.word	0x0800e43f
 800e398:	0800e43f 	.word	0x0800e43f
 800e39c:	0800e43f 	.word	0x0800e43f
 800e3a0:	0800e43f 	.word	0x0800e43f
 800e3a4:	0800e43f 	.word	0x0800e43f
 800e3a8:	0800e43f 	.word	0x0800e43f
 800e3ac:	0800e43f 	.word	0x0800e43f
 800e3b0:	0800e43f 	.word	0x0800e43f
 800e3b4:	0800e43f 	.word	0x0800e43f
 800e3b8:	0800e43f 	.word	0x0800e43f
 800e3bc:	0800e43f 	.word	0x0800e43f
 800e3c0:	0800e43f 	.word	0x0800e43f
 800e3c4:	0800e43f 	.word	0x0800e43f
 800e3c8:	0800e43f 	.word	0x0800e43f
 800e3cc:	0800e43f 	.word	0x0800e43f
 800e3d0:	0800e431 	.word	0x0800e431
 800e3d4:	2b40      	cmp	r3, #64	; 0x40
 800e3d6:	d02e      	beq.n	800e436 <UART_SetConfig+0x8aa>
 800e3d8:	e031      	b.n	800e43e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3da:	f7fc fa47 	bl	800a86c <HAL_RCC_GetPCLK1Freq>
 800e3de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3e0:	e033      	b.n	800e44a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3e2:	f7fc fa59 	bl	800a898 <HAL_RCC_GetPCLK2Freq>
 800e3e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3e8:	e02f      	b.n	800e44a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fe fa24 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3f8:	e027      	b.n	800e44a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3fa:	f107 0318 	add.w	r3, r7, #24
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe fb70 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e408:	e01f      	b.n	800e44a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e40a:	4b2d      	ldr	r3, [pc, #180]	; (800e4c0 <UART_SetConfig+0x934>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f003 0320 	and.w	r3, r3, #32
 800e412:	2b00      	cmp	r3, #0
 800e414:	d009      	beq.n	800e42a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e416:	4b2a      	ldr	r3, [pc, #168]	; (800e4c0 <UART_SetConfig+0x934>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	08db      	lsrs	r3, r3, #3
 800e41c:	f003 0303 	and.w	r3, r3, #3
 800e420:	4a24      	ldr	r2, [pc, #144]	; (800e4b4 <UART_SetConfig+0x928>)
 800e422:	fa22 f303 	lsr.w	r3, r2, r3
 800e426:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e428:	e00f      	b.n	800e44a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e42a:	4b22      	ldr	r3, [pc, #136]	; (800e4b4 <UART_SetConfig+0x928>)
 800e42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e42e:	e00c      	b.n	800e44a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e430:	4b21      	ldr	r3, [pc, #132]	; (800e4b8 <UART_SetConfig+0x92c>)
 800e432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e434:	e009      	b.n	800e44a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e43c:	e005      	b.n	800e44a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e43e:	2300      	movs	r3, #0
 800e440:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e442:	2301      	movs	r3, #1
 800e444:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f000 80e7 	beq.w	800e620 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e456:	4a19      	ldr	r2, [pc, #100]	; (800e4bc <UART_SetConfig+0x930>)
 800e458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e45c:	461a      	mov	r2, r3
 800e45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e460:	fbb3 f3f2 	udiv	r3, r3, r2
 800e464:	005a      	lsls	r2, r3, #1
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	085b      	lsrs	r3, r3, #1
 800e46c:	441a      	add	r2, r3
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	fbb2 f3f3 	udiv	r3, r2, r3
 800e476:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	2b0f      	cmp	r3, #15
 800e47c:	d916      	bls.n	800e4ac <UART_SetConfig+0x920>
 800e47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e484:	d212      	bcs.n	800e4ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	b29b      	uxth	r3, r3
 800e48a:	f023 030f 	bic.w	r3, r3, #15
 800e48e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	085b      	lsrs	r3, r3, #1
 800e494:	b29b      	uxth	r3, r3
 800e496:	f003 0307 	and.w	r3, r3, #7
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e4a8:	60da      	str	r2, [r3, #12]
 800e4aa:	e0b9      	b.n	800e620 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e4b2:	e0b5      	b.n	800e620 <UART_SetConfig+0xa94>
 800e4b4:	03d09000 	.word	0x03d09000
 800e4b8:	003d0900 	.word	0x003d0900
 800e4bc:	0801ee10 	.word	0x0801ee10
 800e4c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e4c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4c8:	2b20      	cmp	r3, #32
 800e4ca:	dc49      	bgt.n	800e560 <UART_SetConfig+0x9d4>
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	db7c      	blt.n	800e5ca <UART_SetConfig+0xa3e>
 800e4d0:	2b20      	cmp	r3, #32
 800e4d2:	d87a      	bhi.n	800e5ca <UART_SetConfig+0xa3e>
 800e4d4:	a201      	add	r2, pc, #4	; (adr r2, 800e4dc <UART_SetConfig+0x950>)
 800e4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4da:	bf00      	nop
 800e4dc:	0800e567 	.word	0x0800e567
 800e4e0:	0800e56f 	.word	0x0800e56f
 800e4e4:	0800e5cb 	.word	0x0800e5cb
 800e4e8:	0800e5cb 	.word	0x0800e5cb
 800e4ec:	0800e577 	.word	0x0800e577
 800e4f0:	0800e5cb 	.word	0x0800e5cb
 800e4f4:	0800e5cb 	.word	0x0800e5cb
 800e4f8:	0800e5cb 	.word	0x0800e5cb
 800e4fc:	0800e587 	.word	0x0800e587
 800e500:	0800e5cb 	.word	0x0800e5cb
 800e504:	0800e5cb 	.word	0x0800e5cb
 800e508:	0800e5cb 	.word	0x0800e5cb
 800e50c:	0800e5cb 	.word	0x0800e5cb
 800e510:	0800e5cb 	.word	0x0800e5cb
 800e514:	0800e5cb 	.word	0x0800e5cb
 800e518:	0800e5cb 	.word	0x0800e5cb
 800e51c:	0800e597 	.word	0x0800e597
 800e520:	0800e5cb 	.word	0x0800e5cb
 800e524:	0800e5cb 	.word	0x0800e5cb
 800e528:	0800e5cb 	.word	0x0800e5cb
 800e52c:	0800e5cb 	.word	0x0800e5cb
 800e530:	0800e5cb 	.word	0x0800e5cb
 800e534:	0800e5cb 	.word	0x0800e5cb
 800e538:	0800e5cb 	.word	0x0800e5cb
 800e53c:	0800e5cb 	.word	0x0800e5cb
 800e540:	0800e5cb 	.word	0x0800e5cb
 800e544:	0800e5cb 	.word	0x0800e5cb
 800e548:	0800e5cb 	.word	0x0800e5cb
 800e54c:	0800e5cb 	.word	0x0800e5cb
 800e550:	0800e5cb 	.word	0x0800e5cb
 800e554:	0800e5cb 	.word	0x0800e5cb
 800e558:	0800e5cb 	.word	0x0800e5cb
 800e55c:	0800e5bd 	.word	0x0800e5bd
 800e560:	2b40      	cmp	r3, #64	; 0x40
 800e562:	d02e      	beq.n	800e5c2 <UART_SetConfig+0xa36>
 800e564:	e031      	b.n	800e5ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e566:	f7fc f981 	bl	800a86c <HAL_RCC_GetPCLK1Freq>
 800e56a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e56c:	e033      	b.n	800e5d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e56e:	f7fc f993 	bl	800a898 <HAL_RCC_GetPCLK2Freq>
 800e572:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e574:	e02f      	b.n	800e5d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fe f95e 	bl	800c83c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e584:	e027      	b.n	800e5d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e586:	f107 0318 	add.w	r3, r7, #24
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe faaa 	bl	800cae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e594:	e01f      	b.n	800e5d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e596:	4b2d      	ldr	r3, [pc, #180]	; (800e64c <UART_SetConfig+0xac0>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 0320 	and.w	r3, r3, #32
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d009      	beq.n	800e5b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5a2:	4b2a      	ldr	r3, [pc, #168]	; (800e64c <UART_SetConfig+0xac0>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	08db      	lsrs	r3, r3, #3
 800e5a8:	f003 0303 	and.w	r3, r3, #3
 800e5ac:	4a28      	ldr	r2, [pc, #160]	; (800e650 <UART_SetConfig+0xac4>)
 800e5ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5b4:	e00f      	b.n	800e5d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e5b6:	4b26      	ldr	r3, [pc, #152]	; (800e650 <UART_SetConfig+0xac4>)
 800e5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ba:	e00c      	b.n	800e5d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5bc:	4b25      	ldr	r3, [pc, #148]	; (800e654 <UART_SetConfig+0xac8>)
 800e5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5c0:	e009      	b.n	800e5d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5c8:	e005      	b.n	800e5d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5d4:	bf00      	nop
    }

    if (pclk != 0U)
 800e5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d021      	beq.n	800e620 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e0:	4a1d      	ldr	r2, [pc, #116]	; (800e658 <UART_SetConfig+0xacc>)
 800e5e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	085b      	lsrs	r3, r3, #1
 800e5f4:	441a      	add	r2, r3
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	2b0f      	cmp	r3, #15
 800e604:	d909      	bls.n	800e61a <UART_SetConfig+0xa8e>
 800e606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e60c:	d205      	bcs.n	800e61a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e610:	b29a      	uxth	r2, r3
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	60da      	str	r2, [r3, #12]
 800e618:	e002      	b.n	800e620 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2201      	movs	r2, #1
 800e624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	2201      	movs	r2, #1
 800e62c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	2200      	movs	r2, #0
 800e634:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2200      	movs	r2, #0
 800e63a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e63c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e640:	4618      	mov	r0, r3
 800e642:	3748      	adds	r7, #72	; 0x48
 800e644:	46bd      	mov	sp, r7
 800e646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e64a:	bf00      	nop
 800e64c:	58024400 	.word	0x58024400
 800e650:	03d09000 	.word	0x03d09000
 800e654:	003d0900 	.word	0x003d0900
 800e658:	0801ee10 	.word	0x0801ee10

0800e65c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e668:	f003 0301 	and.w	r3, r3, #1
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00a      	beq.n	800e686 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	430a      	orrs	r2, r1
 800e684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e68a:	f003 0302 	and.w	r3, r3, #2
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00a      	beq.n	800e6a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	430a      	orrs	r2, r1
 800e6a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ac:	f003 0304 	and.w	r3, r3, #4
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d00a      	beq.n	800e6ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	430a      	orrs	r2, r1
 800e6c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ce:	f003 0308 	and.w	r3, r3, #8
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00a      	beq.n	800e6ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	430a      	orrs	r2, r1
 800e6ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f0:	f003 0310 	and.w	r3, r3, #16
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00a      	beq.n	800e70e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	430a      	orrs	r2, r1
 800e70c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e712:	f003 0320 	and.w	r3, r3, #32
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00a      	beq.n	800e730 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	430a      	orrs	r2, r1
 800e72e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d01a      	beq.n	800e772 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	430a      	orrs	r2, r1
 800e750:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e75a:	d10a      	bne.n	800e772 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	685b      	ldr	r3, [r3, #4]
 800e762:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	430a      	orrs	r2, r1
 800e770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00a      	beq.n	800e794 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	430a      	orrs	r2, r1
 800e792:	605a      	str	r2, [r3, #4]
  }
}
 800e794:	bf00      	nop
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b098      	sub	sp, #96	; 0x60
 800e7a4:	af02      	add	r7, sp, #8
 800e7a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7b0:	f7f5 fb74 	bl	8003e9c <HAL_GetTick>
 800e7b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f003 0308 	and.w	r3, r3, #8
 800e7c0:	2b08      	cmp	r3, #8
 800e7c2:	d12f      	bne.n	800e824 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f88e 	bl	800e8f4 <UART_WaitOnFlagUntilTimeout>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d022      	beq.n	800e824 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e6:	e853 3f00 	ldrex	r3, [r3]
 800e7ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7f2:	653b      	str	r3, [r7, #80]	; 0x50
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7fc:	647b      	str	r3, [r7, #68]	; 0x44
 800e7fe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e800:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e804:	e841 2300 	strex	r3, r2, [r1]
 800e808:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d1e6      	bne.n	800e7de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2220      	movs	r2, #32
 800e814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e820:	2303      	movs	r3, #3
 800e822:	e063      	b.n	800e8ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f003 0304 	and.w	r3, r3, #4
 800e82e:	2b04      	cmp	r3, #4
 800e830:	d149      	bne.n	800e8c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e832:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e83a:	2200      	movs	r2, #0
 800e83c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 f857 	bl	800e8f4 <UART_WaitOnFlagUntilTimeout>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d03c      	beq.n	800e8c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e854:	e853 3f00 	ldrex	r3, [r3]
 800e858:	623b      	str	r3, [r7, #32]
   return(result);
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e860:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	461a      	mov	r2, r3
 800e868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e86a:	633b      	str	r3, [r7, #48]	; 0x30
 800e86c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e86e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e872:	e841 2300 	strex	r3, r2, [r1]
 800e876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1e6      	bne.n	800e84c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	3308      	adds	r3, #8
 800e884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	e853 3f00 	ldrex	r3, [r3]
 800e88c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f023 0301 	bic.w	r3, r3, #1
 800e894:	64bb      	str	r3, [r7, #72]	; 0x48
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	3308      	adds	r3, #8
 800e89c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e89e:	61fa      	str	r2, [r7, #28]
 800e8a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a2:	69b9      	ldr	r1, [r7, #24]
 800e8a4:	69fa      	ldr	r2, [r7, #28]
 800e8a6:	e841 2300 	strex	r3, r2, [r1]
 800e8aa:	617b      	str	r3, [r7, #20]
   return(result);
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1e5      	bne.n	800e87e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2220      	movs	r2, #32
 800e8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8c2:	2303      	movs	r3, #3
 800e8c4:	e012      	b.n	800e8ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2220      	movs	r2, #32
 800e8ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2220      	movs	r2, #32
 800e8d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3758      	adds	r7, #88	; 0x58
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	603b      	str	r3, [r7, #0]
 800e900:	4613      	mov	r3, r2
 800e902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e904:	e049      	b.n	800e99a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90c:	d045      	beq.n	800e99a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e90e:	f7f5 fac5 	bl	8003e9c <HAL_GetTick>
 800e912:	4602      	mov	r2, r0
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	69ba      	ldr	r2, [r7, #24]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d302      	bcc.n	800e924 <UART_WaitOnFlagUntilTimeout+0x30>
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d101      	bne.n	800e928 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e924:	2303      	movs	r3, #3
 800e926:	e048      	b.n	800e9ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f003 0304 	and.w	r3, r3, #4
 800e932:	2b00      	cmp	r3, #0
 800e934:	d031      	beq.n	800e99a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	69db      	ldr	r3, [r3, #28]
 800e93c:	f003 0308 	and.w	r3, r3, #8
 800e940:	2b08      	cmp	r3, #8
 800e942:	d110      	bne.n	800e966 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2208      	movs	r2, #8
 800e94a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f000 f839 	bl	800e9c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2208      	movs	r2, #8
 800e956:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	e029      	b.n	800e9ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	69db      	ldr	r3, [r3, #28]
 800e96c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e974:	d111      	bne.n	800e99a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e97e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f000 f81f 	bl	800e9c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2220      	movs	r2, #32
 800e98a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e996:	2303      	movs	r3, #3
 800e998:	e00f      	b.n	800e9ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	69da      	ldr	r2, [r3, #28]
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	bf0c      	ite	eq
 800e9aa:	2301      	moveq	r3, #1
 800e9ac:	2300      	movne	r3, #0
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	79fb      	ldrb	r3, [r7, #7]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d0a6      	beq.n	800e906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
	...

0800e9c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b095      	sub	sp, #84	; 0x54
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d4:	e853 3f00 	ldrex	r3, [r3]
 800e9d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e9e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9ea:	643b      	str	r3, [r7, #64]	; 0x40
 800e9ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9f2:	e841 2300 	strex	r3, r2, [r1]
 800e9f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1e6      	bne.n	800e9cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	3308      	adds	r3, #8
 800ea04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea06:	6a3b      	ldr	r3, [r7, #32]
 800ea08:	e853 3f00 	ldrex	r3, [r3]
 800ea0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea0e:	69fa      	ldr	r2, [r7, #28]
 800ea10:	4b1e      	ldr	r3, [pc, #120]	; (800ea8c <UART_EndRxTransfer+0xc8>)
 800ea12:	4013      	ands	r3, r2
 800ea14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	3308      	adds	r3, #8
 800ea1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea26:	e841 2300 	strex	r3, r2, [r1]
 800ea2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1e5      	bne.n	800e9fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d118      	bne.n	800ea6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	e853 3f00 	ldrex	r3, [r3]
 800ea46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	f023 0310 	bic.w	r3, r3, #16
 800ea4e:	647b      	str	r3, [r7, #68]	; 0x44
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	461a      	mov	r2, r3
 800ea56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea58:	61bb      	str	r3, [r7, #24]
 800ea5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5c:	6979      	ldr	r1, [r7, #20]
 800ea5e:	69ba      	ldr	r2, [r7, #24]
 800ea60:	e841 2300 	strex	r3, r2, [r1]
 800ea64:	613b      	str	r3, [r7, #16]
   return(result);
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1e6      	bne.n	800ea3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2220      	movs	r2, #32
 800ea70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ea80:	bf00      	nop
 800ea82:	3754      	adds	r7, #84	; 0x54
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	effffffe 	.word	0xeffffffe

0800ea90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b085      	sub	sp, #20
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d101      	bne.n	800eaa6 <HAL_UARTEx_DisableFifoMode+0x16>
 800eaa2:	2302      	movs	r3, #2
 800eaa4:	e027      	b.n	800eaf6 <HAL_UARTEx_DisableFifoMode+0x66>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2224      	movs	r2, #36	; 0x24
 800eab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f022 0201 	bic.w	r2, r2, #1
 800eacc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ead4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2220      	movs	r2, #32
 800eae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d101      	bne.n	800eb1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb16:	2302      	movs	r3, #2
 800eb18:	e02d      	b.n	800eb76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2224      	movs	r2, #36	; 0x24
 800eb26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f022 0201 	bic.w	r2, r2, #1
 800eb40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	689b      	ldr	r3, [r3, #8]
 800eb48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	430a      	orrs	r2, r1
 800eb54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 f850 	bl	800ebfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2220      	movs	r2, #32
 800eb68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b084      	sub	sp, #16
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
 800eb86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d101      	bne.n	800eb96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eb92:	2302      	movs	r3, #2
 800eb94:	e02d      	b.n	800ebf2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2201      	movs	r2, #1
 800eb9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2224      	movs	r2, #36	; 0x24
 800eba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f022 0201 	bic.w	r2, r2, #1
 800ebbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	683a      	ldr	r2, [r7, #0]
 800ebce:	430a      	orrs	r2, r1
 800ebd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 f812 	bl	800ebfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2220      	movs	r2, #32
 800ebe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
	...

0800ebfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d108      	bne.n	800ec1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec1c:	e031      	b.n	800ec82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec1e:	2310      	movs	r3, #16
 800ec20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec22:	2310      	movs	r3, #16
 800ec24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	0e5b      	lsrs	r3, r3, #25
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	f003 0307 	and.w	r3, r3, #7
 800ec34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	689b      	ldr	r3, [r3, #8]
 800ec3c:	0f5b      	lsrs	r3, r3, #29
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	f003 0307 	and.w	r3, r3, #7
 800ec44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec46:	7bbb      	ldrb	r3, [r7, #14]
 800ec48:	7b3a      	ldrb	r2, [r7, #12]
 800ec4a:	4911      	ldr	r1, [pc, #68]	; (800ec90 <UARTEx_SetNbDataToProcess+0x94>)
 800ec4c:	5c8a      	ldrb	r2, [r1, r2]
 800ec4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec52:	7b3a      	ldrb	r2, [r7, #12]
 800ec54:	490f      	ldr	r1, [pc, #60]	; (800ec94 <UARTEx_SetNbDataToProcess+0x98>)
 800ec56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
 800ec66:	7b7a      	ldrb	r2, [r7, #13]
 800ec68:	4909      	ldr	r1, [pc, #36]	; (800ec90 <UARTEx_SetNbDataToProcess+0x94>)
 800ec6a:	5c8a      	ldrb	r2, [r1, r2]
 800ec6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec70:	7b7a      	ldrb	r2, [r7, #13]
 800ec72:	4908      	ldr	r1, [pc, #32]	; (800ec94 <UARTEx_SetNbDataToProcess+0x98>)
 800ec74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec76:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ec82:	bf00      	nop
 800ec84:	3714      	adds	r7, #20
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	bf00      	nop
 800ec90:	0801ee28 	.word	0x0801ee28
 800ec94:	0801ee30 	.word	0x0801ee30

0800ec98 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ec9e:	4b87      	ldr	r3, [pc, #540]	; (800eebc <MX_LWIP_Init+0x224>)
 800eca0:	22c0      	movs	r2, #192	; 0xc0
 800eca2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800eca4:	4b85      	ldr	r3, [pc, #532]	; (800eebc <MX_LWIP_Init+0x224>)
 800eca6:	22a8      	movs	r2, #168	; 0xa8
 800eca8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ecaa:	4b84      	ldr	r3, [pc, #528]	; (800eebc <MX_LWIP_Init+0x224>)
 800ecac:	2201      	movs	r2, #1
 800ecae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800ecb0:	4b82      	ldr	r3, [pc, #520]	; (800eebc <MX_LWIP_Init+0x224>)
 800ecb2:	220a      	movs	r2, #10
 800ecb4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ecb6:	4b82      	ldr	r3, [pc, #520]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ecb8:	22ff      	movs	r2, #255	; 0xff
 800ecba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ecbc:	4b80      	ldr	r3, [pc, #512]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ecbe:	22ff      	movs	r2, #255	; 0xff
 800ecc0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800ecc2:	4b7f      	ldr	r3, [pc, #508]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ecc8:	4b7d      	ldr	r3, [pc, #500]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ecca:	2200      	movs	r2, #0
 800eccc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ecce:	4b7d      	ldr	r3, [pc, #500]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ecd0:	22c0      	movs	r2, #192	; 0xc0
 800ecd2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ecd4:	4b7b      	ldr	r3, [pc, #492]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ecd6:	22a8      	movs	r2, #168	; 0xa8
 800ecd8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ecda:	4b7a      	ldr	r3, [pc, #488]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ecdc:	2201      	movs	r2, #1
 800ecde:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ece0:	4b78      	ldr	r3, [pc, #480]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ece2:	2201      	movs	r2, #1
 800ece4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800ece6:	f000 fd31 	bl	800f74c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ecea:	4b74      	ldr	r3, [pc, #464]	; (800eebc <MX_LWIP_Init+0x224>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	061a      	lsls	r2, r3, #24
 800ecf0:	4b72      	ldr	r3, [pc, #456]	; (800eebc <MX_LWIP_Init+0x224>)
 800ecf2:	785b      	ldrb	r3, [r3, #1]
 800ecf4:	041b      	lsls	r3, r3, #16
 800ecf6:	431a      	orrs	r2, r3
 800ecf8:	4b70      	ldr	r3, [pc, #448]	; (800eebc <MX_LWIP_Init+0x224>)
 800ecfa:	789b      	ldrb	r3, [r3, #2]
 800ecfc:	021b      	lsls	r3, r3, #8
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	4a6e      	ldr	r2, [pc, #440]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed02:	78d2      	ldrb	r2, [r2, #3]
 800ed04:	4313      	orrs	r3, r2
 800ed06:	061a      	lsls	r2, r3, #24
 800ed08:	4b6c      	ldr	r3, [pc, #432]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	0619      	lsls	r1, r3, #24
 800ed0e:	4b6b      	ldr	r3, [pc, #428]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed10:	785b      	ldrb	r3, [r3, #1]
 800ed12:	041b      	lsls	r3, r3, #16
 800ed14:	4319      	orrs	r1, r3
 800ed16:	4b69      	ldr	r3, [pc, #420]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed18:	789b      	ldrb	r3, [r3, #2]
 800ed1a:	021b      	lsls	r3, r3, #8
 800ed1c:	430b      	orrs	r3, r1
 800ed1e:	4967      	ldr	r1, [pc, #412]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed20:	78c9      	ldrb	r1, [r1, #3]
 800ed22:	430b      	orrs	r3, r1
 800ed24:	021b      	lsls	r3, r3, #8
 800ed26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed2a:	431a      	orrs	r2, r3
 800ed2c:	4b63      	ldr	r3, [pc, #396]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	0619      	lsls	r1, r3, #24
 800ed32:	4b62      	ldr	r3, [pc, #392]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed34:	785b      	ldrb	r3, [r3, #1]
 800ed36:	041b      	lsls	r3, r3, #16
 800ed38:	4319      	orrs	r1, r3
 800ed3a:	4b60      	ldr	r3, [pc, #384]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed3c:	789b      	ldrb	r3, [r3, #2]
 800ed3e:	021b      	lsls	r3, r3, #8
 800ed40:	430b      	orrs	r3, r1
 800ed42:	495e      	ldr	r1, [pc, #376]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed44:	78c9      	ldrb	r1, [r1, #3]
 800ed46:	430b      	orrs	r3, r1
 800ed48:	0a1b      	lsrs	r3, r3, #8
 800ed4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ed4e:	431a      	orrs	r2, r3
 800ed50:	4b5a      	ldr	r3, [pc, #360]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed52:	781b      	ldrb	r3, [r3, #0]
 800ed54:	0619      	lsls	r1, r3, #24
 800ed56:	4b59      	ldr	r3, [pc, #356]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed58:	785b      	ldrb	r3, [r3, #1]
 800ed5a:	041b      	lsls	r3, r3, #16
 800ed5c:	4319      	orrs	r1, r3
 800ed5e:	4b57      	ldr	r3, [pc, #348]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed60:	789b      	ldrb	r3, [r3, #2]
 800ed62:	021b      	lsls	r3, r3, #8
 800ed64:	430b      	orrs	r3, r1
 800ed66:	4955      	ldr	r1, [pc, #340]	; (800eebc <MX_LWIP_Init+0x224>)
 800ed68:	78c9      	ldrb	r1, [r1, #3]
 800ed6a:	430b      	orrs	r3, r1
 800ed6c:	0e1b      	lsrs	r3, r3, #24
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	4a55      	ldr	r2, [pc, #340]	; (800eec8 <MX_LWIP_Init+0x230>)
 800ed72:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ed74:	4b52      	ldr	r3, [pc, #328]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	061a      	lsls	r2, r3, #24
 800ed7a:	4b51      	ldr	r3, [pc, #324]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ed7c:	785b      	ldrb	r3, [r3, #1]
 800ed7e:	041b      	lsls	r3, r3, #16
 800ed80:	431a      	orrs	r2, r3
 800ed82:	4b4f      	ldr	r3, [pc, #316]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ed84:	789b      	ldrb	r3, [r3, #2]
 800ed86:	021b      	lsls	r3, r3, #8
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	4a4d      	ldr	r2, [pc, #308]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ed8c:	78d2      	ldrb	r2, [r2, #3]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	061a      	lsls	r2, r3, #24
 800ed92:	4b4b      	ldr	r3, [pc, #300]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	0619      	lsls	r1, r3, #24
 800ed98:	4b49      	ldr	r3, [pc, #292]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ed9a:	785b      	ldrb	r3, [r3, #1]
 800ed9c:	041b      	lsls	r3, r3, #16
 800ed9e:	4319      	orrs	r1, r3
 800eda0:	4b47      	ldr	r3, [pc, #284]	; (800eec0 <MX_LWIP_Init+0x228>)
 800eda2:	789b      	ldrb	r3, [r3, #2]
 800eda4:	021b      	lsls	r3, r3, #8
 800eda6:	430b      	orrs	r3, r1
 800eda8:	4945      	ldr	r1, [pc, #276]	; (800eec0 <MX_LWIP_Init+0x228>)
 800edaa:	78c9      	ldrb	r1, [r1, #3]
 800edac:	430b      	orrs	r3, r1
 800edae:	021b      	lsls	r3, r3, #8
 800edb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800edb4:	431a      	orrs	r2, r3
 800edb6:	4b42      	ldr	r3, [pc, #264]	; (800eec0 <MX_LWIP_Init+0x228>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	0619      	lsls	r1, r3, #24
 800edbc:	4b40      	ldr	r3, [pc, #256]	; (800eec0 <MX_LWIP_Init+0x228>)
 800edbe:	785b      	ldrb	r3, [r3, #1]
 800edc0:	041b      	lsls	r3, r3, #16
 800edc2:	4319      	orrs	r1, r3
 800edc4:	4b3e      	ldr	r3, [pc, #248]	; (800eec0 <MX_LWIP_Init+0x228>)
 800edc6:	789b      	ldrb	r3, [r3, #2]
 800edc8:	021b      	lsls	r3, r3, #8
 800edca:	430b      	orrs	r3, r1
 800edcc:	493c      	ldr	r1, [pc, #240]	; (800eec0 <MX_LWIP_Init+0x228>)
 800edce:	78c9      	ldrb	r1, [r1, #3]
 800edd0:	430b      	orrs	r3, r1
 800edd2:	0a1b      	lsrs	r3, r3, #8
 800edd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800edd8:	431a      	orrs	r2, r3
 800edda:	4b39      	ldr	r3, [pc, #228]	; (800eec0 <MX_LWIP_Init+0x228>)
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	0619      	lsls	r1, r3, #24
 800ede0:	4b37      	ldr	r3, [pc, #220]	; (800eec0 <MX_LWIP_Init+0x228>)
 800ede2:	785b      	ldrb	r3, [r3, #1]
 800ede4:	041b      	lsls	r3, r3, #16
 800ede6:	4319      	orrs	r1, r3
 800ede8:	4b35      	ldr	r3, [pc, #212]	; (800eec0 <MX_LWIP_Init+0x228>)
 800edea:	789b      	ldrb	r3, [r3, #2]
 800edec:	021b      	lsls	r3, r3, #8
 800edee:	430b      	orrs	r3, r1
 800edf0:	4933      	ldr	r1, [pc, #204]	; (800eec0 <MX_LWIP_Init+0x228>)
 800edf2:	78c9      	ldrb	r1, [r1, #3]
 800edf4:	430b      	orrs	r3, r1
 800edf6:	0e1b      	lsrs	r3, r3, #24
 800edf8:	4313      	orrs	r3, r2
 800edfa:	4a34      	ldr	r2, [pc, #208]	; (800eecc <MX_LWIP_Init+0x234>)
 800edfc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800edfe:	4b31      	ldr	r3, [pc, #196]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	061a      	lsls	r2, r3, #24
 800ee04:	4b2f      	ldr	r3, [pc, #188]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee06:	785b      	ldrb	r3, [r3, #1]
 800ee08:	041b      	lsls	r3, r3, #16
 800ee0a:	431a      	orrs	r2, r3
 800ee0c:	4b2d      	ldr	r3, [pc, #180]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee0e:	789b      	ldrb	r3, [r3, #2]
 800ee10:	021b      	lsls	r3, r3, #8
 800ee12:	4313      	orrs	r3, r2
 800ee14:	4a2b      	ldr	r2, [pc, #172]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee16:	78d2      	ldrb	r2, [r2, #3]
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	061a      	lsls	r2, r3, #24
 800ee1c:	4b29      	ldr	r3, [pc, #164]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	0619      	lsls	r1, r3, #24
 800ee22:	4b28      	ldr	r3, [pc, #160]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee24:	785b      	ldrb	r3, [r3, #1]
 800ee26:	041b      	lsls	r3, r3, #16
 800ee28:	4319      	orrs	r1, r3
 800ee2a:	4b26      	ldr	r3, [pc, #152]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee2c:	789b      	ldrb	r3, [r3, #2]
 800ee2e:	021b      	lsls	r3, r3, #8
 800ee30:	430b      	orrs	r3, r1
 800ee32:	4924      	ldr	r1, [pc, #144]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee34:	78c9      	ldrb	r1, [r1, #3]
 800ee36:	430b      	orrs	r3, r1
 800ee38:	021b      	lsls	r3, r3, #8
 800ee3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ee3e:	431a      	orrs	r2, r3
 800ee40:	4b20      	ldr	r3, [pc, #128]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	0619      	lsls	r1, r3, #24
 800ee46:	4b1f      	ldr	r3, [pc, #124]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee48:	785b      	ldrb	r3, [r3, #1]
 800ee4a:	041b      	lsls	r3, r3, #16
 800ee4c:	4319      	orrs	r1, r3
 800ee4e:	4b1d      	ldr	r3, [pc, #116]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee50:	789b      	ldrb	r3, [r3, #2]
 800ee52:	021b      	lsls	r3, r3, #8
 800ee54:	430b      	orrs	r3, r1
 800ee56:	491b      	ldr	r1, [pc, #108]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee58:	78c9      	ldrb	r1, [r1, #3]
 800ee5a:	430b      	orrs	r3, r1
 800ee5c:	0a1b      	lsrs	r3, r3, #8
 800ee5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ee62:	431a      	orrs	r2, r3
 800ee64:	4b17      	ldr	r3, [pc, #92]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	0619      	lsls	r1, r3, #24
 800ee6a:	4b16      	ldr	r3, [pc, #88]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee6c:	785b      	ldrb	r3, [r3, #1]
 800ee6e:	041b      	lsls	r3, r3, #16
 800ee70:	4319      	orrs	r1, r3
 800ee72:	4b14      	ldr	r3, [pc, #80]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee74:	789b      	ldrb	r3, [r3, #2]
 800ee76:	021b      	lsls	r3, r3, #8
 800ee78:	430b      	orrs	r3, r1
 800ee7a:	4912      	ldr	r1, [pc, #72]	; (800eec4 <MX_LWIP_Init+0x22c>)
 800ee7c:	78c9      	ldrb	r1, [r1, #3]
 800ee7e:	430b      	orrs	r3, r1
 800ee80:	0e1b      	lsrs	r3, r3, #24
 800ee82:	4313      	orrs	r3, r2
 800ee84:	4a12      	ldr	r2, [pc, #72]	; (800eed0 <MX_LWIP_Init+0x238>)
 800ee86:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ee88:	4b12      	ldr	r3, [pc, #72]	; (800eed4 <MX_LWIP_Init+0x23c>)
 800ee8a:	9302      	str	r3, [sp, #8]
 800ee8c:	4b12      	ldr	r3, [pc, #72]	; (800eed8 <MX_LWIP_Init+0x240>)
 800ee8e:	9301      	str	r3, [sp, #4]
 800ee90:	2300      	movs	r3, #0
 800ee92:	9300      	str	r3, [sp, #0]
 800ee94:	4b0e      	ldr	r3, [pc, #56]	; (800eed0 <MX_LWIP_Init+0x238>)
 800ee96:	4a0d      	ldr	r2, [pc, #52]	; (800eecc <MX_LWIP_Init+0x234>)
 800ee98:	490b      	ldr	r1, [pc, #44]	; (800eec8 <MX_LWIP_Init+0x230>)
 800ee9a:	4810      	ldr	r0, [pc, #64]	; (800eedc <MX_LWIP_Init+0x244>)
 800ee9c:	f001 f92c 	bl	80100f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800eea0:	480e      	ldr	r0, [pc, #56]	; (800eedc <MX_LWIP_Init+0x244>)
 800eea2:	f001 fadb 	bl	801045c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800eea6:	480d      	ldr	r0, [pc, #52]	; (800eedc <MX_LWIP_Init+0x244>)
 800eea8:	f001 fae8 	bl	801047c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800eeac:	490c      	ldr	r1, [pc, #48]	; (800eee0 <MX_LWIP_Init+0x248>)
 800eeae:	480b      	ldr	r0, [pc, #44]	; (800eedc <MX_LWIP_Init+0x244>)
 800eeb0:	f001 fbe6 	bl	8010680 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800eeb4:	bf00      	nop
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	200006d8 	.word	0x200006d8
 800eec0:	200006dc 	.word	0x200006dc
 800eec4:	200006e0 	.word	0x200006e0
 800eec8:	200006cc 	.word	0x200006cc
 800eecc:	200006d0 	.word	0x200006d0
 800eed0:	200006d4 	.word	0x200006d4
 800eed4:	08018ecd 	.word	0x08018ecd
 800eed8:	0800f129 	.word	0x0800f129
 800eedc:	20000698 	.word	0x20000698
 800eee0:	0800eee5 	.word	0x0800eee5

0800eee4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800eeec:	bf00      	nop
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ef04:	4b3f      	ldr	r3, [pc, #252]	; (800f004 <low_level_init+0x10c>)
 800ef06:	4a40      	ldr	r2, [pc, #256]	; (800f008 <low_level_init+0x110>)
 800ef08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ef0e:	2380      	movs	r3, #128	; 0x80
 800ef10:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ef12:	23e1      	movs	r3, #225	; 0xe1
 800ef14:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ef16:	2300      	movs	r3, #0
 800ef18:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ef22:	4a38      	ldr	r2, [pc, #224]	; (800f004 <low_level_init+0x10c>)
 800ef24:	f107 0308 	add.w	r3, r7, #8
 800ef28:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ef2a:	4b36      	ldr	r3, [pc, #216]	; (800f004 <low_level_init+0x10c>)
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ef30:	4b34      	ldr	r3, [pc, #208]	; (800f004 <low_level_init+0x10c>)
 800ef32:	4a36      	ldr	r2, [pc, #216]	; (800f00c <low_level_init+0x114>)
 800ef34:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ef36:	4b33      	ldr	r3, [pc, #204]	; (800f004 <low_level_init+0x10c>)
 800ef38:	4a35      	ldr	r2, [pc, #212]	; (800f010 <low_level_init+0x118>)
 800ef3a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ef3c:	4b31      	ldr	r3, [pc, #196]	; (800f004 <low_level_init+0x10c>)
 800ef3e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ef42:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ef44:	482f      	ldr	r0, [pc, #188]	; (800f004 <low_level_init+0x10c>)
 800ef46:	f7f7 f8d9 	bl	80060fc <HAL_ETH_Init>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ef4e:	2238      	movs	r2, #56	; 0x38
 800ef50:	2100      	movs	r1, #0
 800ef52:	4830      	ldr	r0, [pc, #192]	; (800f014 <low_level_init+0x11c>)
 800ef54:	f00a ff22 	bl	8019d9c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ef58:	4b2e      	ldr	r3, [pc, #184]	; (800f014 <low_level_init+0x11c>)
 800ef5a:	2221      	movs	r2, #33	; 0x21
 800ef5c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ef5e:	4b2d      	ldr	r3, [pc, #180]	; (800f014 <low_level_init+0x11c>)
 800ef60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ef64:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ef66:	4b2b      	ldr	r3, [pc, #172]	; (800f014 <low_level_init+0x11c>)
 800ef68:	2200      	movs	r2, #0
 800ef6a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ef6c:	482a      	ldr	r0, [pc, #168]	; (800f018 <low_level_init+0x120>)
 800ef6e:	f000 ff8b 	bl	800fe88 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2206      	movs	r2, #6
 800ef76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ef7a:	4b22      	ldr	r3, [pc, #136]	; (800f004 <low_level_init+0x10c>)
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	781a      	ldrb	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ef86:	4b1f      	ldr	r3, [pc, #124]	; (800f004 <low_level_init+0x10c>)
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	785a      	ldrb	r2, [r3, #1]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ef92:	4b1c      	ldr	r3, [pc, #112]	; (800f004 <low_level_init+0x10c>)
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	789a      	ldrb	r2, [r3, #2]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ef9e:	4b19      	ldr	r3, [pc, #100]	; (800f004 <low_level_init+0x10c>)
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	78da      	ldrb	r2, [r3, #3]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800efaa:	4b16      	ldr	r3, [pc, #88]	; (800f004 <low_level_init+0x10c>)
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	791a      	ldrb	r2, [r3, #4]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800efb6:	4b13      	ldr	r3, [pc, #76]	; (800f004 <low_level_init+0x10c>)
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	795a      	ldrb	r2, [r3, #5]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800efc8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efd0:	f043 030a 	orr.w	r3, r3, #10
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800efdc:	490f      	ldr	r1, [pc, #60]	; (800f01c <low_level_init+0x124>)
 800efde:	4810      	ldr	r0, [pc, #64]	; (800f020 <low_level_init+0x128>)
 800efe0:	f7f4 fd75 	bl	8003ace <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800efe4:	480e      	ldr	r0, [pc, #56]	; (800f020 <low_level_init+0x128>)
 800efe6:	f7f4 fda4 	bl	8003b32 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800efea:	7bfb      	ldrb	r3, [r7, #15]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d103      	bne.n	800eff8 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fa05 	bl	800f400 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800eff6:	e001      	b.n	800effc <low_level_init+0x104>
    Error_Handler();
 800eff8:	f7f4 f89e 	bl	8003138 <Error_Handler>
}
 800effc:	bf00      	nop
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	200006ec 	.word	0x200006ec
 800f008:	40028000 	.word	0x40028000
 800f00c:	30040060 	.word	0x30040060
 800f010:	30040000 	.word	0x30040000
 800f014:	2000079c 	.word	0x2000079c
 800f018:	0801ee38 	.word	0x0801ee38
 800f01c:	20000044 	.word	0x20000044
 800f020:	200007d4 	.word	0x200007d4

0800f024 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b092      	sub	sp, #72	; 0x48
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f02e:	2300      	movs	r3, #0
 800f030:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f032:	2300      	movs	r3, #0
 800f034:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f036:	2300      	movs	r3, #0
 800f038:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f03c:	f107 030c 	add.w	r3, r7, #12
 800f040:	2230      	movs	r2, #48	; 0x30
 800f042:	2100      	movs	r1, #0
 800f044:	4618      	mov	r0, r3
 800f046:	f00a fea9 	bl	8019d9c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f04a:	f107 030c 	add.w	r3, r7, #12
 800f04e:	2230      	movs	r2, #48	; 0x30
 800f050:	2100      	movs	r1, #0
 800f052:	4618      	mov	r0, r3
 800f054:	f00a fea2 	bl	8019d9c <memset>

  for(q = p; q != NULL; q = q->next)
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	643b      	str	r3, [r7, #64]	; 0x40
 800f05c:	e045      	b.n	800f0ea <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f05e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f060:	2b03      	cmp	r3, #3
 800f062:	d902      	bls.n	800f06a <low_level_output+0x46>
      return ERR_IF;
 800f064:	f06f 030b 	mvn.w	r3, #11
 800f068:	e055      	b.n	800f116 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f06c:	6859      	ldr	r1, [r3, #4]
 800f06e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f070:	4613      	mov	r3, r2
 800f072:	005b      	lsls	r3, r3, #1
 800f074:	4413      	add	r3, r2
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	3348      	adds	r3, #72	; 0x48
 800f07a:	443b      	add	r3, r7
 800f07c:	3b3c      	subs	r3, #60	; 0x3c
 800f07e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f082:	895b      	ldrh	r3, [r3, #10]
 800f084:	4619      	mov	r1, r3
 800f086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f088:	4613      	mov	r3, r2
 800f08a:	005b      	lsls	r3, r3, #1
 800f08c:	4413      	add	r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	3348      	adds	r3, #72	; 0x48
 800f092:	443b      	add	r3, r7
 800f094:	3b38      	subs	r3, #56	; 0x38
 800f096:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d011      	beq.n	800f0c2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f09e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0a0:	1e5a      	subs	r2, r3, #1
 800f0a2:	f107 000c 	add.w	r0, r7, #12
 800f0a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	005b      	lsls	r3, r3, #1
 800f0ac:	440b      	add	r3, r1
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	18c1      	adds	r1, r0, r3
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	005b      	lsls	r3, r3, #1
 800f0b6:	4413      	add	r3, r2
 800f0b8:	009b      	lsls	r3, r3, #2
 800f0ba:	3348      	adds	r3, #72	; 0x48
 800f0bc:	443b      	add	r3, r7
 800f0be:	3b34      	subs	r3, #52	; 0x34
 800f0c0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f0c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d109      	bne.n	800f0de <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f0ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	4413      	add	r3, r2
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	3348      	adds	r3, #72	; 0x48
 800f0d6:	443b      	add	r3, r7
 800f0d8:	3b34      	subs	r3, #52	; 0x34
 800f0da:	2200      	movs	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f0de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f0e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	643b      	str	r3, [r7, #64]	; 0x40
 800f0ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d1b6      	bne.n	800f05e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	891b      	ldrh	r3, [r3, #8]
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	4b0a      	ldr	r3, [pc, #40]	; (800f120 <low_level_output+0xfc>)
 800f0f8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f0fa:	4a09      	ldr	r2, [pc, #36]	; (800f120 <low_level_output+0xfc>)
 800f0fc:	f107 030c 	add.w	r3, r7, #12
 800f100:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f102:	4a07      	ldr	r2, [pc, #28]	; (800f120 <low_level_output+0xfc>)
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f108:	2214      	movs	r2, #20
 800f10a:	4905      	ldr	r1, [pc, #20]	; (800f120 <low_level_output+0xfc>)
 800f10c:	4805      	ldr	r0, [pc, #20]	; (800f124 <low_level_output+0x100>)
 800f10e:	f7f7 f98d 	bl	800642c <HAL_ETH_Transmit>

  return errval;
 800f112:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f116:	4618      	mov	r0, r3
 800f118:	3748      	adds	r7, #72	; 0x48
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	2000079c 	.word	0x2000079c
 800f124:	200006ec 	.word	0x200006ec

0800f128 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d106      	bne.n	800f144 <ethernetif_init+0x1c>
 800f136:	4b0e      	ldr	r3, [pc, #56]	; (800f170 <ethernetif_init+0x48>)
 800f138:	f240 1285 	movw	r2, #389	; 0x185
 800f13c:	490d      	ldr	r1, [pc, #52]	; (800f174 <ethernetif_init+0x4c>)
 800f13e:	480e      	ldr	r0, [pc, #56]	; (800f178 <ethernetif_init+0x50>)
 800f140:	f00a fcd6 	bl	8019af0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2273      	movs	r2, #115	; 0x73
 800f148:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2274      	movs	r2, #116	; 0x74
 800f150:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a09      	ldr	r2, [pc, #36]	; (800f17c <ethernetif_init+0x54>)
 800f158:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4a08      	ldr	r2, [pc, #32]	; (800f180 <ethernetif_init+0x58>)
 800f15e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7ff fec9 	bl	800eef8 <low_level_init>

  return ERR_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	0801c420 	.word	0x0801c420
 800f174:	0801c43c 	.word	0x0801c43c
 800f178:	0801c44c 	.word	0x0801c44c
 800f17c:	08017339 	.word	0x08017339
 800f180:	0800f025 	.word	0x0800f025

0800f184 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f190:	68f9      	ldr	r1, [r7, #12]
 800f192:	4807      	ldr	r0, [pc, #28]	; (800f1b0 <pbuf_free_custom+0x2c>)
 800f194:	f000 ff5a 	bl	801004c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f198:	4b06      	ldr	r3, [pc, #24]	; (800f1b4 <pbuf_free_custom+0x30>)
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d102      	bne.n	800f1a6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f1a0:	4b04      	ldr	r3, [pc, #16]	; (800f1b4 <pbuf_free_custom+0x30>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	701a      	strb	r2, [r3, #0]
  }
}
 800f1a6:	bf00      	nop
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	0801ee38 	.word	0x0801ee38
 800f1b4:	200006e8 	.word	0x200006e8

0800f1b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f1bc:	f7f4 fe6e 	bl	8003e9c <HAL_GetTick>
 800f1c0:	4603      	mov	r3, r0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	bd80      	pop	{r7, pc}
	...

0800f1c8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b08e      	sub	sp, #56	; 0x38
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	601a      	str	r2, [r3, #0]
 800f1d8:	605a      	str	r2, [r3, #4]
 800f1da:	609a      	str	r2, [r3, #8]
 800f1dc:	60da      	str	r2, [r3, #12]
 800f1de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4a59      	ldr	r2, [pc, #356]	; (800f34c <HAL_ETH_MspInit+0x184>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	f040 80ab 	bne.w	800f342 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f1ec:	4b58      	ldr	r3, [pc, #352]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f1ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f1f2:	4a57      	ldr	r2, [pc, #348]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f1f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f1fc:	4b54      	ldr	r3, [pc, #336]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f1fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f206:	623b      	str	r3, [r7, #32]
 800f208:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f20a:	4b51      	ldr	r3, [pc, #324]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f20c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f210:	4a4f      	ldr	r2, [pc, #316]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f216:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f21a:	4b4d      	ldr	r3, [pc, #308]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f21c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f224:	61fb      	str	r3, [r7, #28]
 800f226:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f228:	4b49      	ldr	r3, [pc, #292]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f22a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f22e:	4a48      	ldr	r2, [pc, #288]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f234:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f238:	4b45      	ldr	r3, [pc, #276]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f23a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f23e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f242:	61bb      	str	r3, [r7, #24]
 800f244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f246:	4b42      	ldr	r3, [pc, #264]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f24c:	4a40      	ldr	r2, [pc, #256]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f24e:	f043 0304 	orr.w	r3, r3, #4
 800f252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f256:	4b3e      	ldr	r3, [pc, #248]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f25c:	f003 0304 	and.w	r3, r3, #4
 800f260:	617b      	str	r3, [r7, #20]
 800f262:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f264:	4b3a      	ldr	r3, [pc, #232]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f26a:	4a39      	ldr	r2, [pc, #228]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f26c:	f043 0301 	orr.w	r3, r3, #1
 800f270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f274:	4b36      	ldr	r3, [pc, #216]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	613b      	str	r3, [r7, #16]
 800f280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f282:	4b33      	ldr	r3, [pc, #204]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f288:	4a31      	ldr	r2, [pc, #196]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f28a:	f043 0302 	orr.w	r3, r3, #2
 800f28e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f292:	4b2f      	ldr	r3, [pc, #188]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f298:	f003 0302 	and.w	r3, r3, #2
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f2a0:	4b2b      	ldr	r3, [pc, #172]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f2a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2a6:	4a2a      	ldr	r2, [pc, #168]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f2b0:	4b27      	ldr	r3, [pc, #156]	; (800f350 <HAL_ETH_MspInit+0x188>)
 800f2b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ba:	60bb      	str	r3, [r7, #8]
 800f2bc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f2be:	2332      	movs	r3, #50	; 0x32
 800f2c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2c2:	2302      	movs	r3, #2
 800f2c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f2ce:	230b      	movs	r3, #11
 800f2d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f2d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	481e      	ldr	r0, [pc, #120]	; (800f354 <HAL_ETH_MspInit+0x18c>)
 800f2da:	f7f8 fa0f 	bl	80076fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f2de:	2386      	movs	r3, #134	; 0x86
 800f2e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f2e2:	2302      	movs	r3, #2
 800f2e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f2ee:	230b      	movs	r3, #11
 800f2f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	4817      	ldr	r0, [pc, #92]	; (800f358 <HAL_ETH_MspInit+0x190>)
 800f2fa:	f7f8 f9ff 	bl	80076fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f2fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f304:	2302      	movs	r3, #2
 800f306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f308:	2300      	movs	r3, #0
 800f30a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f30c:	2300      	movs	r3, #0
 800f30e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f310:	230b      	movs	r3, #11
 800f312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f318:	4619      	mov	r1, r3
 800f31a:	4810      	ldr	r0, [pc, #64]	; (800f35c <HAL_ETH_MspInit+0x194>)
 800f31c:	f7f8 f9ee 	bl	80076fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f320:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f326:	2302      	movs	r3, #2
 800f328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f32a:	2300      	movs	r3, #0
 800f32c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f32e:	2300      	movs	r3, #0
 800f330:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f332:	230b      	movs	r3, #11
 800f334:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f33a:	4619      	mov	r1, r3
 800f33c:	4808      	ldr	r0, [pc, #32]	; (800f360 <HAL_ETH_MspInit+0x198>)
 800f33e:	f7f8 f9dd 	bl	80076fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f342:	bf00      	nop
 800f344:	3738      	adds	r7, #56	; 0x38
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	40028000 	.word	0x40028000
 800f350:	58024400 	.word	0x58024400
 800f354:	58020800 	.word	0x58020800
 800f358:	58020000 	.word	0x58020000
 800f35c:	58020400 	.word	0x58020400
 800f360:	58021800 	.word	0x58021800

0800f364 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f368:	4802      	ldr	r0, [pc, #8]	; (800f374 <ETH_PHY_IO_Init+0x10>)
 800f36a:	f7f7 fbfb 	bl	8006b64 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	bd80      	pop	{r7, pc}
 800f374:	200006ec 	.word	0x200006ec

0800f378 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f378:	b480      	push	{r7}
 800f37a:	af00      	add	r7, sp, #0
  return 0;
 800f37c:	2300      	movs	r3, #0
}
 800f37e:	4618      	mov	r0, r3
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	68f9      	ldr	r1, [r7, #12]
 800f39a:	4807      	ldr	r0, [pc, #28]	; (800f3b8 <ETH_PHY_IO_ReadReg+0x30>)
 800f39c:	f7f7 f94b 	bl	8006636 <HAL_ETH_ReadPHYRegister>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d002      	beq.n	800f3ac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f3aa:	e000      	b.n	800f3ae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f3ac:	2300      	movs	r3, #0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	200006ec 	.word	0x200006ec

0800f3bc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	68f9      	ldr	r1, [r7, #12]
 800f3ce:	4807      	ldr	r0, [pc, #28]	; (800f3ec <ETH_PHY_IO_WriteReg+0x30>)
 800f3d0:	f7f7 f986 	bl	80066e0 <HAL_ETH_WritePHYRegister>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d002      	beq.n	800f3e0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f3da:	f04f 33ff 	mov.w	r3, #4294967295
 800f3de:	e000      	b.n	800f3e2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f3e0:	2300      	movs	r3, #0
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	200006ec 	.word	0x200006ec

0800f3f0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f3f4:	f7f4 fd52 	bl	8003e9c <HAL_GetTick>
 800f3f8:	4603      	mov	r3, r0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	bd80      	pop	{r7, pc}
	...

0800f400 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b0a0      	sub	sp, #128	; 0x80
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f408:	f107 030c 	add.w	r3, r7, #12
 800f40c:	2264      	movs	r2, #100	; 0x64
 800f40e:	2100      	movs	r1, #0
 800f410:	4618      	mov	r0, r3
 800f412:	f00a fcc3 	bl	8019d9c <memset>
  int32_t PHYLinkState = 0;
 800f416:	2300      	movs	r3, #0
 800f418:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f41a:	2300      	movs	r3, #0
 800f41c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f41e:	2300      	movs	r3, #0
 800f420:	67bb      	str	r3, [r7, #120]	; 0x78
 800f422:	2300      	movs	r3, #0
 800f424:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f426:	483a      	ldr	r0, [pc, #232]	; (800f510 <ethernet_link_check_state+0x110>)
 800f428:	f7f4 fc2b 	bl	8003c82 <LAN8742_GetLinkState>
 800f42c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f434:	089b      	lsrs	r3, r3, #2
 800f436:	f003 0301 	and.w	r3, r3, #1
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00c      	beq.n	800f45a <ethernet_link_check_state+0x5a>
 800f440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f442:	2b01      	cmp	r3, #1
 800f444:	dc09      	bgt.n	800f45a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800f446:	4833      	ldr	r0, [pc, #204]	; (800f514 <ethernet_link_check_state+0x114>)
 800f448:	f7f6 ffa0 	bl	800638c <HAL_ETH_Stop>
    netif_set_down(netif);
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f001 f881 	bl	8010554 <netif_set_down>
    netif_set_link_down(netif);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f001 f8e4 	bl	8010620 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800f458:	e055      	b.n	800f506 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f460:	f003 0304 	and.w	r3, r3, #4
 800f464:	2b00      	cmp	r3, #0
 800f466:	d14e      	bne.n	800f506 <ethernet_link_check_state+0x106>
 800f468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	dd4b      	ble.n	800f506 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800f46e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f470:	3b02      	subs	r3, #2
 800f472:	2b03      	cmp	r3, #3
 800f474:	d82a      	bhi.n	800f4cc <ethernet_link_check_state+0xcc>
 800f476:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <ethernet_link_check_state+0x7c>)
 800f478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47c:	0800f48d 	.word	0x0800f48d
 800f480:	0800f49f 	.word	0x0800f49f
 800f484:	0800f4af 	.word	0x0800f4af
 800f488:	0800f4bf 	.word	0x0800f4bf
      duplex = ETH_FULLDUPLEX_MODE;
 800f48c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f490:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f492:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f496:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f498:	2301      	movs	r3, #1
 800f49a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f49c:	e017      	b.n	800f4ce <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f4a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f4a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f4ac:	e00f      	b.n	800f4ce <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800f4ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4b2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f4bc:	e007      	b.n	800f4ce <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f4ca:	e000      	b.n	800f4ce <ethernet_link_check_state+0xce>
      break;
 800f4cc:	bf00      	nop
    if(linkchanged)
 800f4ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d018      	beq.n	800f506 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f4d4:	f107 030c 	add.w	r3, r7, #12
 800f4d8:	4619      	mov	r1, r3
 800f4da:	480e      	ldr	r0, [pc, #56]	; (800f514 <ethernet_link_check_state+0x114>)
 800f4dc:	f7f7 f954 	bl	8006788 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800f4e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4e2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800f4e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4e6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f4e8:	f107 030c 	add.w	r3, r7, #12
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	4809      	ldr	r0, [pc, #36]	; (800f514 <ethernet_link_check_state+0x114>)
 800f4f0:	f7f7 fb1e 	bl	8006b30 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800f4f4:	4807      	ldr	r0, [pc, #28]	; (800f514 <ethernet_link_check_state+0x114>)
 800f4f6:	f7f6 fee7 	bl	80062c8 <HAL_ETH_Start>
      netif_set_up(netif);
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 ffbe 	bl	801047c <netif_set_up>
      netif_set_link_up(netif);
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f001 f859 	bl	80105b8 <netif_set_link_up>
}
 800f506:	bf00      	nop
 800f508:	3780      	adds	r7, #128	; 0x80
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	200007d4 	.word	0x200007d4
 800f514:	200006ec 	.word	0x200006ec

0800f518 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b086      	sub	sp, #24
 800f51c:	af02      	add	r7, sp, #8
 800f51e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800f520:	4812      	ldr	r0, [pc, #72]	; (800f56c <HAL_ETH_RxAllocateCallback+0x54>)
 800f522:	f000 fd25 	bl	800ff70 <memp_malloc_pool>
 800f526:	60f8      	str	r0, [r7, #12]
  if (p)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d014      	beq.n	800f558 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f103 0220 	add.w	r2, r3, #32
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	4a0d      	ldr	r2, [pc, #52]	; (800f570 <HAL_ETH_RxAllocateCallback+0x58>)
 800f53c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f546:	9201      	str	r2, [sp, #4]
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2241      	movs	r2, #65	; 0x41
 800f54e:	2100      	movs	r1, #0
 800f550:	2000      	movs	r0, #0
 800f552:	f001 fa3d 	bl	80109d0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800f556:	e005      	b.n	800f564 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800f558:	4b06      	ldr	r3, [pc, #24]	; (800f574 <HAL_ETH_RxAllocateCallback+0x5c>)
 800f55a:	2201      	movs	r2, #1
 800f55c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	601a      	str	r2, [r3, #0]
}
 800f564:	bf00      	nop
 800f566:	3710      	adds	r7, #16
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	0801ee38 	.word	0x0801ee38
 800f570:	0800f185 	.word	0x0800f185
 800f574:	200006e8 	.word	0x200006e8

0800f578 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f582:	88fb      	ldrh	r3, [r7, #6]
 800f584:	021b      	lsls	r3, r3, #8
 800f586:	b21a      	sxth	r2, r3
 800f588:	88fb      	ldrh	r3, [r7, #6]
 800f58a:	0a1b      	lsrs	r3, r3, #8
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	b21b      	sxth	r3, r3
 800f590:	4313      	orrs	r3, r2
 800f592:	b21b      	sxth	r3, r3
 800f594:	b29b      	uxth	r3, r3
}
 800f596:	4618      	mov	r0, r3
 800f598:	370c      	adds	r7, #12
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr

0800f5a2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f5a2:	b480      	push	{r7}
 800f5a4:	b083      	sub	sp, #12
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	061a      	lsls	r2, r3, #24
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	021b      	lsls	r3, r3, #8
 800f5b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f5b6:	431a      	orrs	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	0a1b      	lsrs	r3, r3, #8
 800f5bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f5c0:	431a      	orrs	r2, r3
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	0e1b      	lsrs	r3, r3, #24
 800f5c6:	4313      	orrs	r3, r2
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b089      	sub	sp, #36	; 0x24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	f003 0301 	and.w	r3, r3, #1
 800f5f0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00d      	beq.n	800f614 <lwip_standard_chksum+0x40>
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	dd0a      	ble.n	800f614 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f5fe:	69fa      	ldr	r2, [r7, #28]
 800f600:	1c53      	adds	r3, r2, #1
 800f602:	61fb      	str	r3, [r7, #28]
 800f604:	f107 030e 	add.w	r3, r7, #14
 800f608:	3301      	adds	r3, #1
 800f60a:	7812      	ldrb	r2, [r2, #0]
 800f60c:	701a      	strb	r2, [r3, #0]
    len--;
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	3b01      	subs	r3, #1
 800f612:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f618:	e00a      	b.n	800f630 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f61a:	69bb      	ldr	r3, [r7, #24]
 800f61c:	1c9a      	adds	r2, r3, #2
 800f61e:	61ba      	str	r2, [r7, #24]
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	461a      	mov	r2, r3
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	4413      	add	r3, r2
 800f628:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	3b02      	subs	r3, #2
 800f62e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	2b01      	cmp	r3, #1
 800f634:	dcf1      	bgt.n	800f61a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	dd04      	ble.n	800f646 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f63c:	f107 030e 	add.w	r3, r7, #14
 800f640:	69ba      	ldr	r2, [r7, #24]
 800f642:	7812      	ldrb	r2, [r2, #0]
 800f644:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f646:	89fb      	ldrh	r3, [r7, #14]
 800f648:	461a      	mov	r2, r3
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	4413      	add	r3, r2
 800f64e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	0c1a      	lsrs	r2, r3, #16
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	b29b      	uxth	r3, r3
 800f658:	4413      	add	r3, r2
 800f65a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	0c1a      	lsrs	r2, r3, #16
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	b29b      	uxth	r3, r3
 800f664:	4413      	add	r3, r2
 800f666:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d007      	beq.n	800f67e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	021b      	lsls	r3, r3, #8
 800f672:	b29a      	uxth	r2, r3
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	0a1b      	lsrs	r3, r3, #8
 800f678:	b2db      	uxtb	r3, r3
 800f67a:	4313      	orrs	r3, r2
 800f67c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	b29b      	uxth	r3, r3
}
 800f682:	4618      	mov	r0, r3
 800f684:	3724      	adds	r7, #36	; 0x24
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b082      	sub	sp, #8
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	460b      	mov	r3, r1
 800f698:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f69a:	887b      	ldrh	r3, [r7, #2]
 800f69c:	4619      	mov	r1, r3
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7ff ff98 	bl	800f5d4 <lwip_standard_chksum>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	43db      	mvns	r3, r3
 800f6a8:	b29b      	uxth	r3, r3
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b086      	sub	sp, #24
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	613b      	str	r3, [r7, #16]
 800f6c6:	e02b      	b.n	800f720 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	895b      	ldrh	r3, [r3, #10]
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	4610      	mov	r0, r2
 800f6d4:	f7ff ff7e 	bl	800f5d4 <lwip_standard_chksum>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	4413      	add	r3, r2
 800f6e0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	0c1a      	lsrs	r2, r3, #16
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	4413      	add	r3, r2
 800f6ec:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	895b      	ldrh	r3, [r3, #10]
 800f6f2:	f003 0301 	and.w	r3, r3, #1
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00e      	beq.n	800f71a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	bf0c      	ite	eq
 800f702:	2301      	moveq	r3, #1
 800f704:	2300      	movne	r3, #0
 800f706:	b2db      	uxtb	r3, r3
 800f708:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	021b      	lsls	r3, r3, #8
 800f70e:	b29a      	uxth	r2, r3
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	0a1b      	lsrs	r3, r3, #8
 800f714:	b2db      	uxtb	r3, r3
 800f716:	4313      	orrs	r3, r2
 800f718:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	613b      	str	r3, [r7, #16]
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d1d0      	bne.n	800f6c8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d007      	beq.n	800f73c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	021b      	lsls	r3, r3, #8
 800f730:	b29a      	uxth	r2, r3
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	0a1b      	lsrs	r3, r3, #8
 800f736:	b2db      	uxtb	r3, r3
 800f738:	4313      	orrs	r3, r2
 800f73a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	43db      	mvns	r3, r3
 800f742:	b29b      	uxth	r3, r3
}
 800f744:	4618      	mov	r0, r3
 800f746:	3718      	adds	r7, #24
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f752:	2300      	movs	r3, #0
 800f754:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800f756:	f000 f8d3 	bl	800f900 <mem_init>
  memp_init();
 800f75a:	f000 fbc5 	bl	800fee8 <memp_init>
  pbuf_init();
  netif_init();
 800f75e:	f000 fcc3 	bl	80100e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f762:	f006 ffe3 	bl	801672c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f766:	f001 fd79 	bl	801125c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f76a:	f006 ff97 	bl	801669c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f76e:	bf00      	nop
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
	...

0800f778 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800f780:	4b04      	ldr	r3, [pc, #16]	; (800f794 <ptr_to_mem+0x1c>)
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	4413      	add	r3, r2
}
 800f788:	4618      	mov	r0, r3
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr
 800f794:	2000080c 	.word	0x2000080c

0800f798 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f7a0:	4b04      	ldr	r3, [pc, #16]	; (800f7b4 <mem_to_ptr+0x1c>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	1ad3      	subs	r3, r2, r3
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	370c      	adds	r7, #12
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr
 800f7b4:	2000080c 	.word	0x2000080c

0800f7b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f7b8:	b590      	push	{r4, r7, lr}
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f7c0:	4b45      	ldr	r3, [pc, #276]	; (800f8d8 <plug_holes+0x120>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d206      	bcs.n	800f7d8 <plug_holes+0x20>
 800f7ca:	4b44      	ldr	r3, [pc, #272]	; (800f8dc <plug_holes+0x124>)
 800f7cc:	f240 12df 	movw	r2, #479	; 0x1df
 800f7d0:	4943      	ldr	r1, [pc, #268]	; (800f8e0 <plug_holes+0x128>)
 800f7d2:	4844      	ldr	r0, [pc, #272]	; (800f8e4 <plug_holes+0x12c>)
 800f7d4:	f00a f98c 	bl	8019af0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f7d8:	4b43      	ldr	r3, [pc, #268]	; (800f8e8 <plug_holes+0x130>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	687a      	ldr	r2, [r7, #4]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d306      	bcc.n	800f7f0 <plug_holes+0x38>
 800f7e2:	4b3e      	ldr	r3, [pc, #248]	; (800f8dc <plug_holes+0x124>)
 800f7e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f7e8:	4940      	ldr	r1, [pc, #256]	; (800f8ec <plug_holes+0x134>)
 800f7ea:	483e      	ldr	r0, [pc, #248]	; (800f8e4 <plug_holes+0x12c>)
 800f7ec:	f00a f980 	bl	8019af0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	7a1b      	ldrb	r3, [r3, #8]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d006      	beq.n	800f806 <plug_holes+0x4e>
 800f7f8:	4b38      	ldr	r3, [pc, #224]	; (800f8dc <plug_holes+0x124>)
 800f7fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f7fe:	493c      	ldr	r1, [pc, #240]	; (800f8f0 <plug_holes+0x138>)
 800f800:	4838      	ldr	r0, [pc, #224]	; (800f8e4 <plug_holes+0x12c>)
 800f802:	f00a f975 	bl	8019af0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a3a      	ldr	r2, [pc, #232]	; (800f8f4 <plug_holes+0x13c>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d906      	bls.n	800f81e <plug_holes+0x66>
 800f810:	4b32      	ldr	r3, [pc, #200]	; (800f8dc <plug_holes+0x124>)
 800f812:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f816:	4938      	ldr	r1, [pc, #224]	; (800f8f8 <plug_holes+0x140>)
 800f818:	4832      	ldr	r0, [pc, #200]	; (800f8e4 <plug_holes+0x12c>)
 800f81a:	f00a f969 	bl	8019af0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4618      	mov	r0, r3
 800f824:	f7ff ffa8 	bl	800f778 <ptr_to_mem>
 800f828:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d024      	beq.n	800f87c <plug_holes+0xc4>
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	7a1b      	ldrb	r3, [r3, #8]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d120      	bne.n	800f87c <plug_holes+0xc4>
 800f83a:	4b2b      	ldr	r3, [pc, #172]	; (800f8e8 <plug_holes+0x130>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	68fa      	ldr	r2, [r7, #12]
 800f840:	429a      	cmp	r2, r3
 800f842:	d01b      	beq.n	800f87c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f844:	4b2d      	ldr	r3, [pc, #180]	; (800f8fc <plug_holes+0x144>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d102      	bne.n	800f854 <plug_holes+0x9c>
      lfree = mem;
 800f84e:	4a2b      	ldr	r2, [pc, #172]	; (800f8fc <plug_holes+0x144>)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	4a24      	ldr	r2, [pc, #144]	; (800f8f4 <plug_holes+0x13c>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d00a      	beq.n	800f87c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7ff ff84 	bl	800f778 <ptr_to_mem>
 800f870:	4604      	mov	r4, r0
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f7ff ff90 	bl	800f798 <mem_to_ptr>
 800f878:	4603      	mov	r3, r0
 800f87a:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	4618      	mov	r0, r3
 800f882:	f7ff ff79 	bl	800f778 <ptr_to_mem>
 800f886:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f888:	68ba      	ldr	r2, [r7, #8]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d01f      	beq.n	800f8d0 <plug_holes+0x118>
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	7a1b      	ldrb	r3, [r3, #8]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d11b      	bne.n	800f8d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f898:	4b18      	ldr	r3, [pc, #96]	; (800f8fc <plug_holes+0x144>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d102      	bne.n	800f8a8 <plug_holes+0xf0>
      lfree = pmem;
 800f8a2:	4a16      	ldr	r2, [pc, #88]	; (800f8fc <plug_holes+0x144>)
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a0f      	ldr	r2, [pc, #60]	; (800f8f4 <plug_holes+0x13c>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d00a      	beq.n	800f8d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7ff ff5a 	bl	800f778 <ptr_to_mem>
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	68b8      	ldr	r0, [r7, #8]
 800f8c8:	f7ff ff66 	bl	800f798 <mem_to_ptr>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	6063      	str	r3, [r4, #4]
    }
  }
}
 800f8d0:	bf00      	nop
 800f8d2:	3714      	adds	r7, #20
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd90      	pop	{r4, r7, pc}
 800f8d8:	2000080c 	.word	0x2000080c
 800f8dc:	0801c474 	.word	0x0801c474
 800f8e0:	0801c4a4 	.word	0x0801c4a4
 800f8e4:	0801c4bc 	.word	0x0801c4bc
 800f8e8:	20000810 	.word	0x20000810
 800f8ec:	0801c4e4 	.word	0x0801c4e4
 800f8f0:	0801c500 	.word	0x0801c500
 800f8f4:	0001ffe8 	.word	0x0001ffe8
 800f8f8:	0801c51c 	.word	0x0801c51c
 800f8fc:	20000814 	.word	0x20000814

0800f900 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f906:	4b14      	ldr	r3, [pc, #80]	; (800f958 <mem_init+0x58>)
 800f908:	4a14      	ldr	r2, [pc, #80]	; (800f95c <mem_init+0x5c>)
 800f90a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f90c:	4b12      	ldr	r3, [pc, #72]	; (800f958 <mem_init+0x58>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4a12      	ldr	r2, [pc, #72]	; (800f960 <mem_init+0x60>)
 800f916:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f924:	480e      	ldr	r0, [pc, #56]	; (800f960 <mem_init+0x60>)
 800f926:	f7ff ff27 	bl	800f778 <ptr_to_mem>
 800f92a:	4603      	mov	r3, r0
 800f92c:	4a0d      	ldr	r2, [pc, #52]	; (800f964 <mem_init+0x64>)
 800f92e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f930:	4b0c      	ldr	r3, [pc, #48]	; (800f964 <mem_init+0x64>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2201      	movs	r2, #1
 800f936:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f938:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <mem_init+0x64>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a08      	ldr	r2, [pc, #32]	; (800f960 <mem_init+0x60>)
 800f93e:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f940:	4b08      	ldr	r3, [pc, #32]	; (800f964 <mem_init+0x64>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a06      	ldr	r2, [pc, #24]	; (800f960 <mem_init+0x60>)
 800f946:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f948:	4b03      	ldr	r3, [pc, #12]	; (800f958 <mem_init+0x58>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a06      	ldr	r2, [pc, #24]	; (800f968 <mem_init+0x68>)
 800f94e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800f950:	bf00      	nop
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	2000080c 	.word	0x2000080c
 800f95c:	30020000 	.word	0x30020000
 800f960:	0001ffe8 	.word	0x0001ffe8
 800f964:	20000810 	.word	0x20000810
 800f968:	20000814 	.word	0x20000814

0800f96c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b086      	sub	sp, #24
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff ff0f 	bl	800f798 <mem_to_ptr>
 800f97a:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4618      	mov	r0, r3
 800f982:	f7ff fef9 	bl	800f778 <ptr_to_mem>
 800f986:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	685b      	ldr	r3, [r3, #4]
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7ff fef3 	bl	800f778 <ptr_to_mem>
 800f992:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	4a11      	ldr	r2, [pc, #68]	; (800f9e0 <mem_link_valid+0x74>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d818      	bhi.n	800f9d0 <mem_link_valid+0x64>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	4a0f      	ldr	r2, [pc, #60]	; (800f9e0 <mem_link_valid+0x74>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d813      	bhi.n	800f9d0 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d004      	beq.n	800f9bc <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	697a      	ldr	r2, [r7, #20]
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d109      	bne.n	800f9d0 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f9bc:	4b09      	ldr	r3, [pc, #36]	; (800f9e4 <mem_link_valid+0x78>)
 800f9be:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f9c0:	693a      	ldr	r2, [r7, #16]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d006      	beq.n	800f9d4 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d001      	beq.n	800f9d4 <mem_link_valid+0x68>
    return 0;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	e000      	b.n	800f9d6 <mem_link_valid+0x6a>
  }
  return 1;
 800f9d4:	2301      	movs	r3, #1
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3718      	adds	r7, #24
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	0001ffe8 	.word	0x0001ffe8
 800f9e4:	20000810 	.word	0x20000810

0800f9e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d04c      	beq.n	800fa90 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f003 0303 	and.w	r3, r3, #3
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d007      	beq.n	800fa10 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fa00:	4b25      	ldr	r3, [pc, #148]	; (800fa98 <mem_free+0xb0>)
 800fa02:	f240 2273 	movw	r2, #627	; 0x273
 800fa06:	4925      	ldr	r1, [pc, #148]	; (800fa9c <mem_free+0xb4>)
 800fa08:	4825      	ldr	r0, [pc, #148]	; (800faa0 <mem_free+0xb8>)
 800fa0a:	f00a f871 	bl	8019af0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fa0e:	e040      	b.n	800fa92 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	3b0c      	subs	r3, #12
 800fa14:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fa16:	4b23      	ldr	r3, [pc, #140]	; (800faa4 <mem_free+0xbc>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d306      	bcc.n	800fa2e <mem_free+0x46>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f103 020c 	add.w	r2, r3, #12
 800fa26:	4b20      	ldr	r3, [pc, #128]	; (800faa8 <mem_free+0xc0>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d907      	bls.n	800fa3e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fa2e:	4b1a      	ldr	r3, [pc, #104]	; (800fa98 <mem_free+0xb0>)
 800fa30:	f240 227f 	movw	r2, #639	; 0x27f
 800fa34:	491d      	ldr	r1, [pc, #116]	; (800faac <mem_free+0xc4>)
 800fa36:	481a      	ldr	r0, [pc, #104]	; (800faa0 <mem_free+0xb8>)
 800fa38:	f00a f85a 	bl	8019af0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fa3c:	e029      	b.n	800fa92 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	7a1b      	ldrb	r3, [r3, #8]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d107      	bne.n	800fa56 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fa46:	4b14      	ldr	r3, [pc, #80]	; (800fa98 <mem_free+0xb0>)
 800fa48:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fa4c:	4918      	ldr	r1, [pc, #96]	; (800fab0 <mem_free+0xc8>)
 800fa4e:	4814      	ldr	r0, [pc, #80]	; (800faa0 <mem_free+0xb8>)
 800fa50:	f00a f84e 	bl	8019af0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fa54:	e01d      	b.n	800fa92 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800fa56:	68f8      	ldr	r0, [r7, #12]
 800fa58:	f7ff ff88 	bl	800f96c <mem_link_valid>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d107      	bne.n	800fa72 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fa62:	4b0d      	ldr	r3, [pc, #52]	; (800fa98 <mem_free+0xb0>)
 800fa64:	f240 2295 	movw	r2, #661	; 0x295
 800fa68:	4912      	ldr	r1, [pc, #72]	; (800fab4 <mem_free+0xcc>)
 800fa6a:	480d      	ldr	r0, [pc, #52]	; (800faa0 <mem_free+0xb8>)
 800fa6c:	f00a f840 	bl	8019af0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fa70:	e00f      	b.n	800fa92 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2200      	movs	r2, #0
 800fa76:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800fa78:	4b0f      	ldr	r3, [pc, #60]	; (800fab8 <mem_free+0xd0>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d202      	bcs.n	800fa88 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fa82:	4a0d      	ldr	r2, [pc, #52]	; (800fab8 <mem_free+0xd0>)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f7ff fe95 	bl	800f7b8 <plug_holes>
 800fa8e:	e000      	b.n	800fa92 <mem_free+0xaa>
    return;
 800fa90:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800fa92:	3710      	adds	r7, #16
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	0801c474 	.word	0x0801c474
 800fa9c:	0801c548 	.word	0x0801c548
 800faa0:	0801c4bc 	.word	0x0801c4bc
 800faa4:	2000080c 	.word	0x2000080c
 800faa8:	20000810 	.word	0x20000810
 800faac:	0801c56c 	.word	0x0801c56c
 800fab0:	0801c588 	.word	0x0801c588
 800fab4:	0801c5b0 	.word	0x0801c5b0
 800fab8:	20000814 	.word	0x20000814

0800fabc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b08a      	sub	sp, #40	; 0x28
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	3303      	adds	r3, #3
 800faca:	f023 0303 	bic.w	r3, r3, #3
 800face:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	2b0b      	cmp	r3, #11
 800fad4:	d801      	bhi.n	800fada <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fad6:	230c      	movs	r3, #12
 800fad8:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fadc:	4a68      	ldr	r2, [pc, #416]	; (800fc80 <mem_trim+0x1c4>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d803      	bhi.n	800faea <mem_trim+0x2e>
 800fae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d201      	bcs.n	800faee <mem_trim+0x32>
    return NULL;
 800faea:	2300      	movs	r3, #0
 800faec:	e0c4      	b.n	800fc78 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800faee:	4b65      	ldr	r3, [pc, #404]	; (800fc84 <mem_trim+0x1c8>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	687a      	ldr	r2, [r7, #4]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d304      	bcc.n	800fb02 <mem_trim+0x46>
 800faf8:	4b63      	ldr	r3, [pc, #396]	; (800fc88 <mem_trim+0x1cc>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d306      	bcc.n	800fb10 <mem_trim+0x54>
 800fb02:	4b62      	ldr	r3, [pc, #392]	; (800fc8c <mem_trim+0x1d0>)
 800fb04:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fb08:	4961      	ldr	r1, [pc, #388]	; (800fc90 <mem_trim+0x1d4>)
 800fb0a:	4862      	ldr	r0, [pc, #392]	; (800fc94 <mem_trim+0x1d8>)
 800fb0c:	f009 fff0 	bl	8019af0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fb10:	4b5c      	ldr	r3, [pc, #368]	; (800fc84 <mem_trim+0x1c8>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d304      	bcc.n	800fb24 <mem_trim+0x68>
 800fb1a:	4b5b      	ldr	r3, [pc, #364]	; (800fc88 <mem_trim+0x1cc>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d301      	bcc.n	800fb28 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	e0a7      	b.n	800fc78 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	3b0c      	subs	r3, #12
 800fb2c:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fb2e:	6a38      	ldr	r0, [r7, #32]
 800fb30:	f7ff fe32 	bl	800f798 <mem_to_ptr>
 800fb34:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fb36:	6a3b      	ldr	r3, [r7, #32]
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	1ad3      	subs	r3, r2, r3
 800fb3e:	3b0c      	subs	r3, #12
 800fb40:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb44:	69bb      	ldr	r3, [r7, #24]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d906      	bls.n	800fb58 <mem_trim+0x9c>
 800fb4a:	4b50      	ldr	r3, [pc, #320]	; (800fc8c <mem_trim+0x1d0>)
 800fb4c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fb50:	4951      	ldr	r1, [pc, #324]	; (800fc98 <mem_trim+0x1dc>)
 800fb52:	4850      	ldr	r0, [pc, #320]	; (800fc94 <mem_trim+0x1d8>)
 800fb54:	f009 ffcc 	bl	8019af0 <iprintf>
  if (newsize > size) {
 800fb58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d901      	bls.n	800fb64 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800fb60:	2300      	movs	r3, #0
 800fb62:	e089      	b.n	800fc78 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 800fb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d101      	bne.n	800fb70 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	e083      	b.n	800fc78 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800fb70:	6a3b      	ldr	r3, [r7, #32]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7ff fdff 	bl	800f778 <ptr_to_mem>
 800fb7a:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	7a1b      	ldrb	r3, [r3, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d13c      	bne.n	800fbfe <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fb84:	6a3b      	ldr	r3, [r7, #32]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a3d      	ldr	r2, [pc, #244]	; (800fc80 <mem_trim+0x1c4>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d106      	bne.n	800fb9c <mem_trim+0xe0>
 800fb8e:	4b3f      	ldr	r3, [pc, #252]	; (800fc8c <mem_trim+0x1d0>)
 800fb90:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fb94:	4941      	ldr	r1, [pc, #260]	; (800fc9c <mem_trim+0x1e0>)
 800fb96:	483f      	ldr	r0, [pc, #252]	; (800fc94 <mem_trim+0x1d8>)
 800fb98:	f009 ffaa 	bl	8019af0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fba2:	69fa      	ldr	r2, [r7, #28]
 800fba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba6:	4413      	add	r3, r2
 800fba8:	330c      	adds	r3, #12
 800fbaa:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800fbac:	4b3c      	ldr	r3, [pc, #240]	; (800fca0 <mem_trim+0x1e4>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	697a      	ldr	r2, [r7, #20]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d105      	bne.n	800fbc2 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 800fbb6:	6938      	ldr	r0, [r7, #16]
 800fbb8:	f7ff fdde 	bl	800f778 <ptr_to_mem>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	4a38      	ldr	r2, [pc, #224]	; (800fca0 <mem_trim+0x1e4>)
 800fbc0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fbc2:	6938      	ldr	r0, [r7, #16]
 800fbc4:	f7ff fdd8 	bl	800f778 <ptr_to_mem>
 800fbc8:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	69fa      	ldr	r2, [r7, #28]
 800fbda:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	693a      	ldr	r2, [r7, #16]
 800fbe0:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4a26      	ldr	r2, [pc, #152]	; (800fc80 <mem_trim+0x1c4>)
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d044      	beq.n	800fc76 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff fdc1 	bl	800f778 <ptr_to_mem>
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	6053      	str	r3, [r2, #4]
 800fbfc:	e03b      	b.n	800fc76 <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc00:	3318      	adds	r3, #24
 800fc02:	69ba      	ldr	r2, [r7, #24]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d336      	bcc.n	800fc76 <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fc08:	69fa      	ldr	r2, [r7, #28]
 800fc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0c:	4413      	add	r3, r2
 800fc0e:	330c      	adds	r3, #12
 800fc10:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fc12:	6a3b      	ldr	r3, [r7, #32]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a1a      	ldr	r2, [pc, #104]	; (800fc80 <mem_trim+0x1c4>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d106      	bne.n	800fc2a <mem_trim+0x16e>
 800fc1c:	4b1b      	ldr	r3, [pc, #108]	; (800fc8c <mem_trim+0x1d0>)
 800fc1e:	f240 3216 	movw	r2, #790	; 0x316
 800fc22:	491e      	ldr	r1, [pc, #120]	; (800fc9c <mem_trim+0x1e0>)
 800fc24:	481b      	ldr	r0, [pc, #108]	; (800fc94 <mem_trim+0x1d8>)
 800fc26:	f009 ff63 	bl	8019af0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fc2a:	6938      	ldr	r0, [r7, #16]
 800fc2c:	f7ff fda4 	bl	800f778 <ptr_to_mem>
 800fc30:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800fc32:	4b1b      	ldr	r3, [pc, #108]	; (800fca0 <mem_trim+0x1e4>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d202      	bcs.n	800fc42 <mem_trim+0x186>
      lfree = mem2;
 800fc3c:	4a18      	ldr	r2, [pc, #96]	; (800fca0 <mem_trim+0x1e4>)
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	2200      	movs	r2, #0
 800fc46:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800fc48:	6a3b      	ldr	r3, [r7, #32]
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	69fa      	ldr	r2, [r7, #28]
 800fc54:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800fc56:	6a3b      	ldr	r3, [r7, #32]
 800fc58:	693a      	ldr	r2, [r7, #16]
 800fc5a:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a07      	ldr	r2, [pc, #28]	; (800fc80 <mem_trim+0x1c4>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d007      	beq.n	800fc76 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7ff fd84 	bl	800f778 <ptr_to_mem>
 800fc70:	4602      	mov	r2, r0
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800fc76:	687b      	ldr	r3, [r7, #4]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3728      	adds	r7, #40	; 0x28
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	0001ffe8 	.word	0x0001ffe8
 800fc84:	2000080c 	.word	0x2000080c
 800fc88:	20000810 	.word	0x20000810
 800fc8c:	0801c474 	.word	0x0801c474
 800fc90:	0801c5e4 	.word	0x0801c5e4
 800fc94:	0801c4bc 	.word	0x0801c4bc
 800fc98:	0801c5fc 	.word	0x0801c5fc
 800fc9c:	0801c61c 	.word	0x0801c61c
 800fca0:	20000814 	.word	0x20000814

0800fca4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b088      	sub	sp, #32
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d101      	bne.n	800fcb6 <mem_malloc+0x12>
    return NULL;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	e0d0      	b.n	800fe58 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	3303      	adds	r3, #3
 800fcba:	f023 0303 	bic.w	r3, r3, #3
 800fcbe:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	2b0b      	cmp	r3, #11
 800fcc4:	d801      	bhi.n	800fcca <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fcc6:	230c      	movs	r3, #12
 800fcc8:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	4a64      	ldr	r2, [pc, #400]	; (800fe60 <mem_malloc+0x1bc>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d803      	bhi.n	800fcda <mem_malloc+0x36>
 800fcd2:	69ba      	ldr	r2, [r7, #24]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d201      	bcs.n	800fcde <mem_malloc+0x3a>
    return NULL;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	e0bc      	b.n	800fe58 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fcde:	4b61      	ldr	r3, [pc, #388]	; (800fe64 <mem_malloc+0x1c0>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff fd58 	bl	800f798 <mem_to_ptr>
 800fce8:	61f8      	str	r0, [r7, #28]
 800fcea:	e0ad      	b.n	800fe48 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fcec:	69f8      	ldr	r0, [r7, #28]
 800fcee:	f7ff fd43 	bl	800f778 <ptr_to_mem>
 800fcf2:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	7a1b      	ldrb	r3, [r3, #8]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	f040 809f 	bne.w	800fe3c <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800fd08:	69ba      	ldr	r2, [r7, #24]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	f200 8096 	bhi.w	800fe3c <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	f1a3 020c 	sub.w	r2, r3, #12
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	3318      	adds	r3, #24
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d331      	bcc.n	800fd88 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fd24:	69fa      	ldr	r2, [r7, #28]
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	4413      	add	r3, r2
 800fd2a:	330c      	adds	r3, #12
 800fd2c:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	4a4b      	ldr	r2, [pc, #300]	; (800fe60 <mem_malloc+0x1bc>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d106      	bne.n	800fd44 <mem_malloc+0xa0>
 800fd36:	4b4c      	ldr	r3, [pc, #304]	; (800fe68 <mem_malloc+0x1c4>)
 800fd38:	f240 3287 	movw	r2, #903	; 0x387
 800fd3c:	494b      	ldr	r1, [pc, #300]	; (800fe6c <mem_malloc+0x1c8>)
 800fd3e:	484c      	ldr	r0, [pc, #304]	; (800fe70 <mem_malloc+0x1cc>)
 800fd40:	f009 fed6 	bl	8019af0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fd44:	68f8      	ldr	r0, [r7, #12]
 800fd46:	f7ff fd17 	bl	800f778 <ptr_to_mem>
 800fd4a:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	69fa      	ldr	r2, [r7, #28]
 800fd5e:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fd60:	693b      	ldr	r3, [r7, #16]
 800fd62:	68fa      	ldr	r2, [r7, #12]
 800fd64:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a3b      	ldr	r2, [pc, #236]	; (800fe60 <mem_malloc+0x1bc>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d00b      	beq.n	800fd8e <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7ff fcfc 	bl	800f778 <ptr_to_mem>
 800fd80:	4602      	mov	r2, r0
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6053      	str	r3, [r2, #4]
 800fd86:	e002      	b.n	800fd8e <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fd8e:	4b35      	ldr	r3, [pc, #212]	; (800fe64 <mem_malloc+0x1c0>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	693a      	ldr	r2, [r7, #16]
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d127      	bne.n	800fde8 <mem_malloc+0x144>
          struct mem *cur = lfree;
 800fd98:	4b32      	ldr	r3, [pc, #200]	; (800fe64 <mem_malloc+0x1c0>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fd9e:	e005      	b.n	800fdac <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7ff fce7 	bl	800f778 <ptr_to_mem>
 800fdaa:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	7a1b      	ldrb	r3, [r3, #8]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d004      	beq.n	800fdbe <mem_malloc+0x11a>
 800fdb4:	4b2f      	ldr	r3, [pc, #188]	; (800fe74 <mem_malloc+0x1d0>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d1f0      	bne.n	800fda0 <mem_malloc+0xfc>
          }
          lfree = cur;
 800fdbe:	4a29      	ldr	r2, [pc, #164]	; (800fe64 <mem_malloc+0x1c0>)
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fdc4:	4b27      	ldr	r3, [pc, #156]	; (800fe64 <mem_malloc+0x1c0>)
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	4b2a      	ldr	r3, [pc, #168]	; (800fe74 <mem_malloc+0x1d0>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d00b      	beq.n	800fde8 <mem_malloc+0x144>
 800fdd0:	4b24      	ldr	r3, [pc, #144]	; (800fe64 <mem_malloc+0x1c0>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	7a1b      	ldrb	r3, [r3, #8]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d006      	beq.n	800fde8 <mem_malloc+0x144>
 800fdda:	4b23      	ldr	r3, [pc, #140]	; (800fe68 <mem_malloc+0x1c4>)
 800fddc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800fde0:	4925      	ldr	r1, [pc, #148]	; (800fe78 <mem_malloc+0x1d4>)
 800fde2:	4823      	ldr	r0, [pc, #140]	; (800fe70 <mem_malloc+0x1cc>)
 800fde4:	f009 fe84 	bl	8019af0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fde8:	693a      	ldr	r2, [r7, #16]
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	4413      	add	r3, r2
 800fdee:	330c      	adds	r3, #12
 800fdf0:	4a20      	ldr	r2, [pc, #128]	; (800fe74 <mem_malloc+0x1d0>)
 800fdf2:	6812      	ldr	r2, [r2, #0]
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d906      	bls.n	800fe06 <mem_malloc+0x162>
 800fdf8:	4b1b      	ldr	r3, [pc, #108]	; (800fe68 <mem_malloc+0x1c4>)
 800fdfa:	f240 32b9 	movw	r2, #953	; 0x3b9
 800fdfe:	491f      	ldr	r1, [pc, #124]	; (800fe7c <mem_malloc+0x1d8>)
 800fe00:	481b      	ldr	r0, [pc, #108]	; (800fe70 <mem_malloc+0x1cc>)
 800fe02:	f009 fe75 	bl	8019af0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	f003 0303 	and.w	r3, r3, #3
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d006      	beq.n	800fe1e <mem_malloc+0x17a>
 800fe10:	4b15      	ldr	r3, [pc, #84]	; (800fe68 <mem_malloc+0x1c4>)
 800fe12:	f240 32bb 	movw	r2, #955	; 0x3bb
 800fe16:	491a      	ldr	r1, [pc, #104]	; (800fe80 <mem_malloc+0x1dc>)
 800fe18:	4815      	ldr	r0, [pc, #84]	; (800fe70 <mem_malloc+0x1cc>)
 800fe1a:	f009 fe69 	bl	8019af0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	f003 0303 	and.w	r3, r3, #3
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d006      	beq.n	800fe36 <mem_malloc+0x192>
 800fe28:	4b0f      	ldr	r3, [pc, #60]	; (800fe68 <mem_malloc+0x1c4>)
 800fe2a:	f240 32bd 	movw	r2, #957	; 0x3bd
 800fe2e:	4915      	ldr	r1, [pc, #84]	; (800fe84 <mem_malloc+0x1e0>)
 800fe30:	480f      	ldr	r0, [pc, #60]	; (800fe70 <mem_malloc+0x1cc>)
 800fe32:	f009 fe5d 	bl	8019af0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	330c      	adds	r3, #12
 800fe3a:	e00d      	b.n	800fe58 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 800fe3c:	69f8      	ldr	r0, [r7, #28]
 800fe3e:	f7ff fc9b 	bl	800f778 <ptr_to_mem>
 800fe42:	4603      	mov	r3, r0
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fe48:	69ba      	ldr	r2, [r7, #24]
 800fe4a:	4b05      	ldr	r3, [pc, #20]	; (800fe60 <mem_malloc+0x1bc>)
 800fe4c:	1a9b      	subs	r3, r3, r2
 800fe4e:	69fa      	ldr	r2, [r7, #28]
 800fe50:	429a      	cmp	r2, r3
 800fe52:	f4ff af4b 	bcc.w	800fcec <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fe56:	2300      	movs	r3, #0
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3720      	adds	r7, #32
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	0001ffe8 	.word	0x0001ffe8
 800fe64:	20000814 	.word	0x20000814
 800fe68:	0801c474 	.word	0x0801c474
 800fe6c:	0801c61c 	.word	0x0801c61c
 800fe70:	0801c4bc 	.word	0x0801c4bc
 800fe74:	20000810 	.word	0x20000810
 800fe78:	0801c630 	.word	0x0801c630
 800fe7c:	0801c64c 	.word	0x0801c64c
 800fe80:	0801c67c 	.word	0x0801c67c
 800fe84:	0801c6ac 	.word	0x0801c6ac

0800fe88 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	689b      	ldr	r3, [r3, #8]
 800fe94:	2200      	movs	r2, #0
 800fe96:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	3303      	adds	r3, #3
 800fe9e:	f023 0303 	bic.w	r3, r3, #3
 800fea2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fea4:	2300      	movs	r3, #0
 800fea6:	60fb      	str	r3, [r7, #12]
 800fea8:	e011      	b.n	800fece <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	689b      	ldr	r3, [r3, #8]
 800feae:	681a      	ldr	r2, [r3, #0]
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	689b      	ldr	r3, [r3, #8]
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	461a      	mov	r2, r3
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	4413      	add	r3, r2
 800fec6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	3301      	adds	r3, #1
 800fecc:	60fb      	str	r3, [r7, #12]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	885b      	ldrh	r3, [r3, #2]
 800fed2:	461a      	mov	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	4293      	cmp	r3, r2
 800fed8:	dbe7      	blt.n	800feaa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800feda:	bf00      	nop
 800fedc:	bf00      	nop
 800fede:	3714      	adds	r7, #20
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr

0800fee8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800feee:	2300      	movs	r3, #0
 800fef0:	80fb      	strh	r3, [r7, #6]
 800fef2:	e009      	b.n	800ff08 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fef4:	88fb      	ldrh	r3, [r7, #6]
 800fef6:	4a08      	ldr	r2, [pc, #32]	; (800ff18 <memp_init+0x30>)
 800fef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7ff ffc3 	bl	800fe88 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ff02:	88fb      	ldrh	r3, [r7, #6]
 800ff04:	3301      	adds	r3, #1
 800ff06:	80fb      	strh	r3, [r7, #6]
 800ff08:	88fb      	ldrh	r3, [r7, #6]
 800ff0a:	2b08      	cmp	r3, #8
 800ff0c:	d9f2      	bls.n	800fef4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ff0e:	bf00      	nop
 800ff10:	bf00      	nop
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	0801eeb0 	.word	0x0801eeb0

0800ff1c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	689b      	ldr	r3, [r3, #8]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d012      	beq.n	800ff58 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	68fa      	ldr	r2, [r7, #12]
 800ff38:	6812      	ldr	r2, [r2, #0]
 800ff3a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f003 0303 	and.w	r3, r3, #3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d006      	beq.n	800ff54 <do_memp_malloc_pool+0x38>
 800ff46:	4b07      	ldr	r3, [pc, #28]	; (800ff64 <do_memp_malloc_pool+0x48>)
 800ff48:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ff4c:	4906      	ldr	r1, [pc, #24]	; (800ff68 <do_memp_malloc_pool+0x4c>)
 800ff4e:	4807      	ldr	r0, [pc, #28]	; (800ff6c <do_memp_malloc_pool+0x50>)
 800ff50:	f009 fdce 	bl	8019af0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	e000      	b.n	800ff5a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3710      	adds	r7, #16
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	0801c6d0 	.word	0x0801c6d0
 800ff68:	0801c700 	.word	0x0801c700
 800ff6c:	0801c724 	.word	0x0801c724

0800ff70 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d106      	bne.n	800ff8c <memp_malloc_pool+0x1c>
 800ff7e:	4b0a      	ldr	r3, [pc, #40]	; (800ffa8 <memp_malloc_pool+0x38>)
 800ff80:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ff84:	4909      	ldr	r1, [pc, #36]	; (800ffac <memp_malloc_pool+0x3c>)
 800ff86:	480a      	ldr	r0, [pc, #40]	; (800ffb0 <memp_malloc_pool+0x40>)
 800ff88:	f009 fdb2 	bl	8019af0 <iprintf>
  if (desc == NULL) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d101      	bne.n	800ff96 <memp_malloc_pool+0x26>
    return NULL;
 800ff92:	2300      	movs	r3, #0
 800ff94:	e003      	b.n	800ff9e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7ff ffc0 	bl	800ff1c <do_memp_malloc_pool>
 800ff9c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3708      	adds	r7, #8
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	0801c6d0 	.word	0x0801c6d0
 800ffac:	0801c74c 	.word	0x0801c74c
 800ffb0:	0801c724 	.word	0x0801c724

0800ffb4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	4603      	mov	r3, r0
 800ffbc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ffbe:	79fb      	ldrb	r3, [r7, #7]
 800ffc0:	2b08      	cmp	r3, #8
 800ffc2:	d908      	bls.n	800ffd6 <memp_malloc+0x22>
 800ffc4:	4b0a      	ldr	r3, [pc, #40]	; (800fff0 <memp_malloc+0x3c>)
 800ffc6:	f240 1257 	movw	r2, #343	; 0x157
 800ffca:	490a      	ldr	r1, [pc, #40]	; (800fff4 <memp_malloc+0x40>)
 800ffcc:	480a      	ldr	r0, [pc, #40]	; (800fff8 <memp_malloc+0x44>)
 800ffce:	f009 fd8f 	bl	8019af0 <iprintf>
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	e008      	b.n	800ffe8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	4a08      	ldr	r2, [pc, #32]	; (800fffc <memp_malloc+0x48>)
 800ffda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7ff ff9c 	bl	800ff1c <do_memp_malloc_pool>
 800ffe4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3710      	adds	r7, #16
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	0801c6d0 	.word	0x0801c6d0
 800fff4:	0801c760 	.word	0x0801c760
 800fff8:	0801c724 	.word	0x0801c724
 800fffc:	0801eeb0 	.word	0x0801eeb0

08010000 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	f003 0303 	and.w	r3, r3, #3
 8010010:	2b00      	cmp	r3, #0
 8010012:	d006      	beq.n	8010022 <do_memp_free_pool+0x22>
 8010014:	4b0a      	ldr	r3, [pc, #40]	; (8010040 <do_memp_free_pool+0x40>)
 8010016:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801001a:	490a      	ldr	r1, [pc, #40]	; (8010044 <do_memp_free_pool+0x44>)
 801001c:	480a      	ldr	r0, [pc, #40]	; (8010048 <do_memp_free_pool+0x48>)
 801001e:	f009 fd67 	bl	8019af0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	689b      	ldr	r3, [r3, #8]
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	68fa      	ldr	r2, [r7, #12]
 8010036:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8010038:	bf00      	nop
 801003a:	3710      	adds	r7, #16
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	0801c6d0 	.word	0x0801c6d0
 8010044:	0801c780 	.word	0x0801c780
 8010048:	0801c724 	.word	0x0801c724

0801004c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d106      	bne.n	801006a <memp_free_pool+0x1e>
 801005c:	4b0a      	ldr	r3, [pc, #40]	; (8010088 <memp_free_pool+0x3c>)
 801005e:	f240 1295 	movw	r2, #405	; 0x195
 8010062:	490a      	ldr	r1, [pc, #40]	; (801008c <memp_free_pool+0x40>)
 8010064:	480a      	ldr	r0, [pc, #40]	; (8010090 <memp_free_pool+0x44>)
 8010066:	f009 fd43 	bl	8019af0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d007      	beq.n	8010080 <memp_free_pool+0x34>
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d004      	beq.n	8010080 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010076:	6839      	ldr	r1, [r7, #0]
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f7ff ffc1 	bl	8010000 <do_memp_free_pool>
 801007e:	e000      	b.n	8010082 <memp_free_pool+0x36>
    return;
 8010080:	bf00      	nop
}
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	0801c6d0 	.word	0x0801c6d0
 801008c:	0801c74c 	.word	0x0801c74c
 8010090:	0801c724 	.word	0x0801c724

08010094 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
 801009a:	4603      	mov	r3, r0
 801009c:	6039      	str	r1, [r7, #0]
 801009e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80100a0:	79fb      	ldrb	r3, [r7, #7]
 80100a2:	2b08      	cmp	r3, #8
 80100a4:	d907      	bls.n	80100b6 <memp_free+0x22>
 80100a6:	4b0c      	ldr	r3, [pc, #48]	; (80100d8 <memp_free+0x44>)
 80100a8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80100ac:	490b      	ldr	r1, [pc, #44]	; (80100dc <memp_free+0x48>)
 80100ae:	480c      	ldr	r0, [pc, #48]	; (80100e0 <memp_free+0x4c>)
 80100b0:	f009 fd1e 	bl	8019af0 <iprintf>
 80100b4:	e00c      	b.n	80100d0 <memp_free+0x3c>

  if (mem == NULL) {
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d008      	beq.n	80100ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80100bc:	79fb      	ldrb	r3, [r7, #7]
 80100be:	4a09      	ldr	r2, [pc, #36]	; (80100e4 <memp_free+0x50>)
 80100c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100c4:	6839      	ldr	r1, [r7, #0]
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7ff ff9a 	bl	8010000 <do_memp_free_pool>
 80100cc:	e000      	b.n	80100d0 <memp_free+0x3c>
    return;
 80100ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80100d0:	3708      	adds	r7, #8
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	0801c6d0 	.word	0x0801c6d0
 80100dc:	0801c7a0 	.word	0x0801c7a0
 80100e0:	0801c724 	.word	0x0801c724
 80100e4:	0801eeb0 	.word	0x0801eeb0

080100e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80100e8:	b480      	push	{r7}
 80100ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80100ec:	bf00      	nop
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr
	...

080100f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b086      	sub	sp, #24
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
 8010104:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d108      	bne.n	801011e <netif_add+0x26>
 801010c:	4b57      	ldr	r3, [pc, #348]	; (801026c <netif_add+0x174>)
 801010e:	f240 1227 	movw	r2, #295	; 0x127
 8010112:	4957      	ldr	r1, [pc, #348]	; (8010270 <netif_add+0x178>)
 8010114:	4857      	ldr	r0, [pc, #348]	; (8010274 <netif_add+0x17c>)
 8010116:	f009 fceb 	bl	8019af0 <iprintf>
 801011a:	2300      	movs	r3, #0
 801011c:	e0a2      	b.n	8010264 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801011e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010120:	2b00      	cmp	r3, #0
 8010122:	d108      	bne.n	8010136 <netif_add+0x3e>
 8010124:	4b51      	ldr	r3, [pc, #324]	; (801026c <netif_add+0x174>)
 8010126:	f44f 7294 	mov.w	r2, #296	; 0x128
 801012a:	4953      	ldr	r1, [pc, #332]	; (8010278 <netif_add+0x180>)
 801012c:	4851      	ldr	r0, [pc, #324]	; (8010274 <netif_add+0x17c>)
 801012e:	f009 fcdf 	bl	8019af0 <iprintf>
 8010132:	2300      	movs	r3, #0
 8010134:	e096      	b.n	8010264 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d101      	bne.n	8010140 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801013c:	4b4f      	ldr	r3, [pc, #316]	; (801027c <netif_add+0x184>)
 801013e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d101      	bne.n	801014a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010146:	4b4d      	ldr	r3, [pc, #308]	; (801027c <netif_add+0x184>)
 8010148:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d101      	bne.n	8010154 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010150:	4b4a      	ldr	r3, [pc, #296]	; (801027c <netif_add+0x184>)
 8010152:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2200      	movs	r2, #0
 8010158:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2200      	movs	r2, #0
 801015e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2200      	movs	r2, #0
 8010164:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	4a45      	ldr	r2, [pc, #276]	; (8010280 <netif_add+0x188>)
 801016a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2200      	movs	r2, #0
 8010170:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2200      	movs	r2, #0
 8010176:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2200      	movs	r2, #0
 801017e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6a3a      	ldr	r2, [r7, #32]
 8010184:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010186:	4b3f      	ldr	r3, [pc, #252]	; (8010284 <netif_add+0x18c>)
 8010188:	781a      	ldrb	r2, [r3, #0]
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010194:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	68b9      	ldr	r1, [r7, #8]
 801019c:	68f8      	ldr	r0, [r7, #12]
 801019e:	f000 f913 	bl	80103c8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	4798      	blx	r3
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d001      	beq.n	80101b2 <netif_add+0xba>
    return NULL;
 80101ae:	2300      	movs	r3, #0
 80101b0:	e058      	b.n	8010264 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101b8:	2bff      	cmp	r3, #255	; 0xff
 80101ba:	d103      	bne.n	80101c4 <netif_add+0xcc>
        netif->num = 0;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2200      	movs	r2, #0
 80101c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80101c4:	2300      	movs	r3, #0
 80101c6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80101c8:	4b2f      	ldr	r3, [pc, #188]	; (8010288 <netif_add+0x190>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	617b      	str	r3, [r7, #20]
 80101ce:	e02b      	b.n	8010228 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80101d0:	697a      	ldr	r2, [r7, #20]
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d106      	bne.n	80101e6 <netif_add+0xee>
 80101d8:	4b24      	ldr	r3, [pc, #144]	; (801026c <netif_add+0x174>)
 80101da:	f240 128b 	movw	r2, #395	; 0x18b
 80101de:	492b      	ldr	r1, [pc, #172]	; (801028c <netif_add+0x194>)
 80101e0:	4824      	ldr	r0, [pc, #144]	; (8010274 <netif_add+0x17c>)
 80101e2:	f009 fc85 	bl	8019af0 <iprintf>
        num_netifs++;
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	3301      	adds	r3, #1
 80101ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	2bff      	cmp	r3, #255	; 0xff
 80101f0:	dd06      	ble.n	8010200 <netif_add+0x108>
 80101f2:	4b1e      	ldr	r3, [pc, #120]	; (801026c <netif_add+0x174>)
 80101f4:	f240 128d 	movw	r2, #397	; 0x18d
 80101f8:	4925      	ldr	r1, [pc, #148]	; (8010290 <netif_add+0x198>)
 80101fa:	481e      	ldr	r0, [pc, #120]	; (8010274 <netif_add+0x17c>)
 80101fc:	f009 fc78 	bl	8019af0 <iprintf>
        if (netif2->num == netif->num) {
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801020c:	429a      	cmp	r2, r3
 801020e:	d108      	bne.n	8010222 <netif_add+0x12a>
          netif->num++;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010216:	3301      	adds	r3, #1
 8010218:	b2da      	uxtb	r2, r3
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010220:	e005      	b.n	801022e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	617b      	str	r3, [r7, #20]
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1d0      	bne.n	80101d0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d1be      	bne.n	80101b2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801023a:	2bfe      	cmp	r3, #254	; 0xfe
 801023c:	d103      	bne.n	8010246 <netif_add+0x14e>
    netif_num = 0;
 801023e:	4b11      	ldr	r3, [pc, #68]	; (8010284 <netif_add+0x18c>)
 8010240:	2200      	movs	r2, #0
 8010242:	701a      	strb	r2, [r3, #0]
 8010244:	e006      	b.n	8010254 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801024c:	3301      	adds	r3, #1
 801024e:	b2da      	uxtb	r2, r3
 8010250:	4b0c      	ldr	r3, [pc, #48]	; (8010284 <netif_add+0x18c>)
 8010252:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010254:	4b0c      	ldr	r3, [pc, #48]	; (8010288 <netif_add+0x190>)
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801025c:	4a0a      	ldr	r2, [pc, #40]	; (8010288 <netif_add+0x190>)
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010262:	68fb      	ldr	r3, [r7, #12]
}
 8010264:	4618      	mov	r0, r3
 8010266:	3718      	adds	r7, #24
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	0801c7bc 	.word	0x0801c7bc
 8010270:	0801c850 	.word	0x0801c850
 8010274:	0801c80c 	.word	0x0801c80c
 8010278:	0801c86c 	.word	0x0801c86c
 801027c:	0801ef14 	.word	0x0801ef14
 8010280:	080106a3 	.word	0x080106a3
 8010284:	200070cc 	.word	0x200070cc
 8010288:	200070c4 	.word	0x200070c4
 801028c:	0801c890 	.word	0x0801c890
 8010290:	0801c8a4 	.word	0x0801c8a4

08010294 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801029e:	6839      	ldr	r1, [r7, #0]
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f002 fb27 	bl	80128f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80102a6:	6839      	ldr	r1, [r7, #0]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f006 fbc9 	bl	8016a40 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80102ae:	bf00      	nop
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b086      	sub	sp, #24
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d106      	bne.n	80102d8 <netif_do_set_ipaddr+0x20>
 80102ca:	4b1d      	ldr	r3, [pc, #116]	; (8010340 <netif_do_set_ipaddr+0x88>)
 80102cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80102d0:	491c      	ldr	r1, [pc, #112]	; (8010344 <netif_do_set_ipaddr+0x8c>)
 80102d2:	481d      	ldr	r0, [pc, #116]	; (8010348 <netif_do_set_ipaddr+0x90>)
 80102d4:	f009 fc0c 	bl	8019af0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d106      	bne.n	80102ec <netif_do_set_ipaddr+0x34>
 80102de:	4b18      	ldr	r3, [pc, #96]	; (8010340 <netif_do_set_ipaddr+0x88>)
 80102e0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80102e4:	4917      	ldr	r1, [pc, #92]	; (8010344 <netif_do_set_ipaddr+0x8c>)
 80102e6:	4818      	ldr	r0, [pc, #96]	; (8010348 <netif_do_set_ipaddr+0x90>)
 80102e8:	f009 fc02 	bl	8019af0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	3304      	adds	r3, #4
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d01c      	beq.n	8010334 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	3304      	adds	r3, #4
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801030a:	f107 0314 	add.w	r3, r7, #20
 801030e:	4619      	mov	r1, r3
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7ff ffbf 	bl	8010294 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d002      	beq.n	8010322 <netif_do_set_ipaddr+0x6a>
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	e000      	b.n	8010324 <netif_do_set_ipaddr+0x6c>
 8010322:	2300      	movs	r3, #0
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010328:	2101      	movs	r1, #1
 801032a:	68f8      	ldr	r0, [r7, #12]
 801032c:	f000 f8d2 	bl	80104d4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010330:	2301      	movs	r3, #1
 8010332:	e000      	b.n	8010336 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010334:	2300      	movs	r3, #0
}
 8010336:	4618      	mov	r0, r3
 8010338:	3718      	adds	r7, #24
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	0801c7bc 	.word	0x0801c7bc
 8010344:	0801c8d4 	.word	0x0801c8d4
 8010348:	0801c80c 	.word	0x0801c80c

0801034c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801034c:	b480      	push	{r7}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	3308      	adds	r3, #8
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	429a      	cmp	r2, r3
 8010364:	d00a      	beq.n	801037c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d002      	beq.n	8010372 <netif_do_set_netmask+0x26>
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	e000      	b.n	8010374 <netif_do_set_netmask+0x28>
 8010372:	2300      	movs	r3, #0
 8010374:	68fa      	ldr	r2, [r7, #12]
 8010376:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010378:	2301      	movs	r3, #1
 801037a:	e000      	b.n	801037e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801037c:	2300      	movs	r3, #0
}
 801037e:	4618      	mov	r0, r3
 8010380:	3714      	adds	r7, #20
 8010382:	46bd      	mov	sp, r7
 8010384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010388:	4770      	bx	lr

0801038a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801038a:	b480      	push	{r7}
 801038c:	b085      	sub	sp, #20
 801038e:	af00      	add	r7, sp, #0
 8010390:	60f8      	str	r0, [r7, #12]
 8010392:	60b9      	str	r1, [r7, #8]
 8010394:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	681a      	ldr	r2, [r3, #0]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	330c      	adds	r3, #12
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d00a      	beq.n	80103ba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d002      	beq.n	80103b0 <netif_do_set_gw+0x26>
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	e000      	b.n	80103b2 <netif_do_set_gw+0x28>
 80103b0:	2300      	movs	r3, #0
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80103b6:	2301      	movs	r3, #1
 80103b8:	e000      	b.n	80103bc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3714      	adds	r7, #20
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b088      	sub	sp, #32
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
 80103d4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80103d6:	2300      	movs	r3, #0
 80103d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d101      	bne.n	80103e8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80103e4:	4b1c      	ldr	r3, [pc, #112]	; (8010458 <netif_set_addr+0x90>)
 80103e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d101      	bne.n	80103f2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80103ee:	4b1a      	ldr	r3, [pc, #104]	; (8010458 <netif_set_addr+0x90>)
 80103f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d101      	bne.n	80103fc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80103f8:	4b17      	ldr	r3, [pc, #92]	; (8010458 <netif_set_addr+0x90>)
 80103fa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d003      	beq.n	801040a <netif_set_addr+0x42>
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d101      	bne.n	801040e <netif_set_addr+0x46>
 801040a:	2301      	movs	r3, #1
 801040c:	e000      	b.n	8010410 <netif_set_addr+0x48>
 801040e:	2300      	movs	r3, #0
 8010410:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d006      	beq.n	8010426 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010418:	f107 0310 	add.w	r3, r7, #16
 801041c:	461a      	mov	r2, r3
 801041e:	68b9      	ldr	r1, [r7, #8]
 8010420:	68f8      	ldr	r0, [r7, #12]
 8010422:	f7ff ff49 	bl	80102b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010426:	69fa      	ldr	r2, [r7, #28]
 8010428:	6879      	ldr	r1, [r7, #4]
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f7ff ff8e 	bl	801034c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010430:	69ba      	ldr	r2, [r7, #24]
 8010432:	6839      	ldr	r1, [r7, #0]
 8010434:	68f8      	ldr	r0, [r7, #12]
 8010436:	f7ff ffa8 	bl	801038a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d106      	bne.n	801044e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010440:	f107 0310 	add.w	r3, r7, #16
 8010444:	461a      	mov	r2, r3
 8010446:	68b9      	ldr	r1, [r7, #8]
 8010448:	68f8      	ldr	r0, [r7, #12]
 801044a:	f7ff ff35 	bl	80102b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801044e:	bf00      	nop
 8010450:	3720      	adds	r7, #32
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	0801ef14 	.word	0x0801ef14

0801045c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010464:	4a04      	ldr	r2, [pc, #16]	; (8010478 <netif_set_default+0x1c>)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801046a:	bf00      	nop
 801046c:	370c      	adds	r7, #12
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	200070c8 	.word	0x200070c8

0801047c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d107      	bne.n	801049a <netif_set_up+0x1e>
 801048a:	4b0f      	ldr	r3, [pc, #60]	; (80104c8 <netif_set_up+0x4c>)
 801048c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010490:	490e      	ldr	r1, [pc, #56]	; (80104cc <netif_set_up+0x50>)
 8010492:	480f      	ldr	r0, [pc, #60]	; (80104d0 <netif_set_up+0x54>)
 8010494:	f009 fb2c 	bl	8019af0 <iprintf>
 8010498:	e013      	b.n	80104c2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104a0:	f003 0301 	and.w	r3, r3, #1
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d10c      	bne.n	80104c2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104ae:	f043 0301 	orr.w	r3, r3, #1
 80104b2:	b2da      	uxtb	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80104ba:	2103      	movs	r1, #3
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 f809 	bl	80104d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	0801c7bc 	.word	0x0801c7bc
 80104cc:	0801c944 	.word	0x0801c944
 80104d0:	0801c80c 	.word	0x0801c80c

080104d4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b082      	sub	sp, #8
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	460b      	mov	r3, r1
 80104de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d106      	bne.n	80104f4 <netif_issue_reports+0x20>
 80104e6:	4b18      	ldr	r3, [pc, #96]	; (8010548 <netif_issue_reports+0x74>)
 80104e8:	f240 326d 	movw	r2, #877	; 0x36d
 80104ec:	4917      	ldr	r1, [pc, #92]	; (801054c <netif_issue_reports+0x78>)
 80104ee:	4818      	ldr	r0, [pc, #96]	; (8010550 <netif_issue_reports+0x7c>)
 80104f0:	f009 fafe 	bl	8019af0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104fa:	f003 0304 	and.w	r3, r3, #4
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d01e      	beq.n	8010540 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010508:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801050c:	2b00      	cmp	r3, #0
 801050e:	d017      	beq.n	8010540 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010510:	78fb      	ldrb	r3, [r7, #3]
 8010512:	f003 0301 	and.w	r3, r3, #1
 8010516:	2b00      	cmp	r3, #0
 8010518:	d013      	beq.n	8010542 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	3304      	adds	r3, #4
 801051e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00e      	beq.n	8010542 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801052a:	f003 0308 	and.w	r3, r3, #8
 801052e:	2b00      	cmp	r3, #0
 8010530:	d007      	beq.n	8010542 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	3304      	adds	r3, #4
 8010536:	4619      	mov	r1, r3
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f007 f9eb 	bl	8017914 <etharp_request>
 801053e:	e000      	b.n	8010542 <netif_issue_reports+0x6e>
    return;
 8010540:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	0801c7bc 	.word	0x0801c7bc
 801054c:	0801c960 	.word	0x0801c960
 8010550:	0801c80c 	.word	0x0801c80c

08010554 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d107      	bne.n	8010572 <netif_set_down+0x1e>
 8010562:	4b12      	ldr	r3, [pc, #72]	; (80105ac <netif_set_down+0x58>)
 8010564:	f240 329b 	movw	r2, #923	; 0x39b
 8010568:	4911      	ldr	r1, [pc, #68]	; (80105b0 <netif_set_down+0x5c>)
 801056a:	4812      	ldr	r0, [pc, #72]	; (80105b4 <netif_set_down+0x60>)
 801056c:	f009 fac0 	bl	8019af0 <iprintf>
 8010570:	e019      	b.n	80105a6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010578:	f003 0301 	and.w	r3, r3, #1
 801057c:	2b00      	cmp	r3, #0
 801057e:	d012      	beq.n	80105a6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010586:	f023 0301 	bic.w	r3, r3, #1
 801058a:	b2da      	uxtb	r2, r3
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010598:	f003 0308 	and.w	r3, r3, #8
 801059c:	2b00      	cmp	r3, #0
 801059e:	d002      	beq.n	80105a6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f006 fd75 	bl	8017090 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	0801c7bc 	.word	0x0801c7bc
 80105b0:	0801c984 	.word	0x0801c984
 80105b4:	0801c80c 	.word	0x0801c80c

080105b8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d107      	bne.n	80105d6 <netif_set_link_up+0x1e>
 80105c6:	4b13      	ldr	r3, [pc, #76]	; (8010614 <netif_set_link_up+0x5c>)
 80105c8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80105cc:	4912      	ldr	r1, [pc, #72]	; (8010618 <netif_set_link_up+0x60>)
 80105ce:	4813      	ldr	r0, [pc, #76]	; (801061c <netif_set_link_up+0x64>)
 80105d0:	f009 fa8e 	bl	8019af0 <iprintf>
 80105d4:	e01b      	b.n	801060e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80105dc:	f003 0304 	and.w	r3, r3, #4
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d114      	bne.n	801060e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80105ea:	f043 0304 	orr.w	r3, r3, #4
 80105ee:	b2da      	uxtb	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80105f6:	2103      	movs	r1, #3
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff ff6b 	bl	80104d4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	69db      	ldr	r3, [r3, #28]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d003      	beq.n	801060e <netif_set_link_up+0x56>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	69db      	ldr	r3, [r3, #28]
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801060e:	3708      	adds	r7, #8
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	0801c7bc 	.word	0x0801c7bc
 8010618:	0801c9a4 	.word	0x0801c9a4
 801061c:	0801c80c 	.word	0x0801c80c

08010620 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d107      	bne.n	801063e <netif_set_link_down+0x1e>
 801062e:	4b11      	ldr	r3, [pc, #68]	; (8010674 <netif_set_link_down+0x54>)
 8010630:	f240 4206 	movw	r2, #1030	; 0x406
 8010634:	4910      	ldr	r1, [pc, #64]	; (8010678 <netif_set_link_down+0x58>)
 8010636:	4811      	ldr	r0, [pc, #68]	; (801067c <netif_set_link_down+0x5c>)
 8010638:	f009 fa5a 	bl	8019af0 <iprintf>
 801063c:	e017      	b.n	801066e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010644:	f003 0304 	and.w	r3, r3, #4
 8010648:	2b00      	cmp	r3, #0
 801064a:	d010      	beq.n	801066e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010652:	f023 0304 	bic.w	r3, r3, #4
 8010656:	b2da      	uxtb	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	69db      	ldr	r3, [r3, #28]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d003      	beq.n	801066e <netif_set_link_down+0x4e>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	69db      	ldr	r3, [r3, #28]
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	0801c7bc 	.word	0x0801c7bc
 8010678:	0801c9c8 	.word	0x0801c9c8
 801067c:	0801c80c 	.word	0x0801c80c

08010680 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d002      	beq.n	8010696 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	683a      	ldr	r2, [r7, #0]
 8010694:	61da      	str	r2, [r3, #28]
  }
}
 8010696:	bf00      	nop
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr

080106a2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80106a2:	b480      	push	{r7}
 80106a4:	b085      	sub	sp, #20
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	60f8      	str	r0, [r7, #12]
 80106aa:	60b9      	str	r1, [r7, #8]
 80106ac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80106ae:	f06f 030b 	mvn.w	r3, #11
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3714      	adds	r7, #20
 80106b6:	46bd      	mov	sp, r7
 80106b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106bc:	4770      	bx	lr
	...

080106c0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b085      	sub	sp, #20
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	4603      	mov	r3, r0
 80106c8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80106ca:	79fb      	ldrb	r3, [r7, #7]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d013      	beq.n	80106f8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80106d0:	4b0d      	ldr	r3, [pc, #52]	; (8010708 <netif_get_by_index+0x48>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	60fb      	str	r3, [r7, #12]
 80106d6:	e00c      	b.n	80106f2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80106de:	3301      	adds	r3, #1
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	79fa      	ldrb	r2, [r7, #7]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d101      	bne.n	80106ec <netif_get_by_index+0x2c>
        return netif; /* found! */
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	e006      	b.n	80106fa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	60fb      	str	r3, [r7, #12]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d1ef      	bne.n	80106d8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80106f8:	2300      	movs	r3, #0
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3714      	adds	r7, #20
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop
 8010708:	200070c4 	.word	0x200070c4

0801070c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801070c:	b480      	push	{r7}
 801070e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010710:	4b03      	ldr	r3, [pc, #12]	; (8010720 <pbuf_pool_is_empty+0x14>)
 8010712:	2201      	movs	r2, #1
 8010714:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010716:	bf00      	nop
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr
 8010720:	200070cd 	.word	0x200070cd

08010724 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010724:	b480      	push	{r7}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	4611      	mov	r1, r2
 8010730:	461a      	mov	r2, r3
 8010732:	460b      	mov	r3, r1
 8010734:	80fb      	strh	r3, [r7, #6]
 8010736:	4613      	mov	r3, r2
 8010738:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2200      	movs	r2, #0
 801073e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	88fa      	ldrh	r2, [r7, #6]
 801074a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	88ba      	ldrh	r2, [r7, #4]
 8010750:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010752:	8b3b      	ldrh	r3, [r7, #24]
 8010754:	b2da      	uxtb	r2, r3
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	7f3a      	ldrb	r2, [r7, #28]
 801075e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2201      	movs	r2, #1
 8010764:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2200      	movs	r2, #0
 801076a:	73da      	strb	r2, [r3, #15]
}
 801076c:	bf00      	nop
 801076e:	3714      	adds	r7, #20
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b08c      	sub	sp, #48	; 0x30
 801077c:	af02      	add	r7, sp, #8
 801077e:	4603      	mov	r3, r0
 8010780:	71fb      	strb	r3, [r7, #7]
 8010782:	460b      	mov	r3, r1
 8010784:	80bb      	strh	r3, [r7, #4]
 8010786:	4613      	mov	r3, r2
 8010788:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801078a:	79fb      	ldrb	r3, [r7, #7]
 801078c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801078e:	887b      	ldrh	r3, [r7, #2]
 8010790:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010794:	f000 8082 	beq.w	801089c <pbuf_alloc+0x124>
 8010798:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801079c:	f300 80c9 	bgt.w	8010932 <pbuf_alloc+0x1ba>
 80107a0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80107a4:	d010      	beq.n	80107c8 <pbuf_alloc+0x50>
 80107a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80107aa:	f300 80c2 	bgt.w	8010932 <pbuf_alloc+0x1ba>
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d002      	beq.n	80107b8 <pbuf_alloc+0x40>
 80107b2:	2b41      	cmp	r3, #65	; 0x41
 80107b4:	f040 80bd 	bne.w	8010932 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80107b8:	887a      	ldrh	r2, [r7, #2]
 80107ba:	88bb      	ldrh	r3, [r7, #4]
 80107bc:	4619      	mov	r1, r3
 80107be:	2000      	movs	r0, #0
 80107c0:	f000 f8d2 	bl	8010968 <pbuf_alloc_reference>
 80107c4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80107c6:	e0be      	b.n	8010946 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80107c8:	2300      	movs	r3, #0
 80107ca:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80107cc:	2300      	movs	r3, #0
 80107ce:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80107d0:	88bb      	ldrh	r3, [r7, #4]
 80107d2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80107d4:	2008      	movs	r0, #8
 80107d6:	f7ff fbed 	bl	800ffb4 <memp_malloc>
 80107da:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d109      	bne.n	80107f6 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 80107e2:	f7ff ff93 	bl	801070c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80107e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d002      	beq.n	80107f2 <pbuf_alloc+0x7a>
            pbuf_free(p);
 80107ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107ee:	f000 faa7 	bl	8010d40 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80107f2:	2300      	movs	r3, #0
 80107f4:	e0a8      	b.n	8010948 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80107f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80107f8:	3303      	adds	r3, #3
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	f023 0303 	bic.w	r3, r3, #3
 8010800:	b29a      	uxth	r2, r3
 8010802:	f240 53ec 	movw	r3, #1516	; 0x5ec
 8010806:	1a9b      	subs	r3, r3, r2
 8010808:	b29b      	uxth	r3, r3
 801080a:	8b7a      	ldrh	r2, [r7, #26]
 801080c:	4293      	cmp	r3, r2
 801080e:	bf28      	it	cs
 8010810:	4613      	movcs	r3, r2
 8010812:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010814:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010816:	3310      	adds	r3, #16
 8010818:	693a      	ldr	r2, [r7, #16]
 801081a:	4413      	add	r3, r2
 801081c:	3303      	adds	r3, #3
 801081e:	f023 0303 	bic.w	r3, r3, #3
 8010822:	4618      	mov	r0, r3
 8010824:	89f9      	ldrh	r1, [r7, #14]
 8010826:	8b7a      	ldrh	r2, [r7, #26]
 8010828:	2300      	movs	r3, #0
 801082a:	9301      	str	r3, [sp, #4]
 801082c:	887b      	ldrh	r3, [r7, #2]
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	460b      	mov	r3, r1
 8010832:	4601      	mov	r1, r0
 8010834:	6938      	ldr	r0, [r7, #16]
 8010836:	f7ff ff75 	bl	8010724 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	f003 0303 	and.w	r3, r3, #3
 8010842:	2b00      	cmp	r3, #0
 8010844:	d006      	beq.n	8010854 <pbuf_alloc+0xdc>
 8010846:	4b42      	ldr	r3, [pc, #264]	; (8010950 <pbuf_alloc+0x1d8>)
 8010848:	f44f 7280 	mov.w	r2, #256	; 0x100
 801084c:	4941      	ldr	r1, [pc, #260]	; (8010954 <pbuf_alloc+0x1dc>)
 801084e:	4842      	ldr	r0, [pc, #264]	; (8010958 <pbuf_alloc+0x1e0>)
 8010850:	f009 f94e 	bl	8019af0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010856:	3303      	adds	r3, #3
 8010858:	f023 0303 	bic.w	r3, r3, #3
 801085c:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8010860:	4293      	cmp	r3, r2
 8010862:	d106      	bne.n	8010872 <pbuf_alloc+0xfa>
 8010864:	4b3a      	ldr	r3, [pc, #232]	; (8010950 <pbuf_alloc+0x1d8>)
 8010866:	f44f 7281 	mov.w	r2, #258	; 0x102
 801086a:	493c      	ldr	r1, [pc, #240]	; (801095c <pbuf_alloc+0x1e4>)
 801086c:	483a      	ldr	r0, [pc, #232]	; (8010958 <pbuf_alloc+0x1e0>)
 801086e:	f009 f93f 	bl	8019af0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010874:	2b00      	cmp	r3, #0
 8010876:	d102      	bne.n	801087e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	627b      	str	r3, [r7, #36]	; 0x24
 801087c:	e002      	b.n	8010884 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	693a      	ldr	r2, [r7, #16]
 8010882:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010888:	8b7a      	ldrh	r2, [r7, #26]
 801088a:	89fb      	ldrh	r3, [r7, #14]
 801088c:	1ad3      	subs	r3, r2, r3
 801088e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010890:	2300      	movs	r3, #0
 8010892:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010894:	8b7b      	ldrh	r3, [r7, #26]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d19c      	bne.n	80107d4 <pbuf_alloc+0x5c>
      break;
 801089a:	e054      	b.n	8010946 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801089c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801089e:	3303      	adds	r3, #3
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	f023 0303 	bic.w	r3, r3, #3
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	88bb      	ldrh	r3, [r7, #4]
 80108aa:	3303      	adds	r3, #3
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	f023 0303 	bic.w	r3, r3, #3
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	4413      	add	r3, r2
 80108b6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80108b8:	8b3b      	ldrh	r3, [r7, #24]
 80108ba:	3310      	adds	r3, #16
 80108bc:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80108be:	8b3a      	ldrh	r2, [r7, #24]
 80108c0:	88bb      	ldrh	r3, [r7, #4]
 80108c2:	3303      	adds	r3, #3
 80108c4:	f023 0303 	bic.w	r3, r3, #3
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d306      	bcc.n	80108da <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80108cc:	88bb      	ldrh	r3, [r7, #4]
 80108ce:	3303      	adds	r3, #3
 80108d0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80108d4:	697a      	ldr	r2, [r7, #20]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d201      	bcs.n	80108de <pbuf_alloc+0x166>
        return NULL;
 80108da:	2300      	movs	r3, #0
 80108dc:	e034      	b.n	8010948 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80108de:	6978      	ldr	r0, [r7, #20]
 80108e0:	f7ff f9e0 	bl	800fca4 <mem_malloc>
 80108e4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80108e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d101      	bne.n	80108f0 <pbuf_alloc+0x178>
        return NULL;
 80108ec:	2300      	movs	r3, #0
 80108ee:	e02b      	b.n	8010948 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80108f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108f2:	3310      	adds	r3, #16
 80108f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108f6:	4413      	add	r3, r2
 80108f8:	3303      	adds	r3, #3
 80108fa:	f023 0303 	bic.w	r3, r3, #3
 80108fe:	4618      	mov	r0, r3
 8010900:	88b9      	ldrh	r1, [r7, #4]
 8010902:	88ba      	ldrh	r2, [r7, #4]
 8010904:	2300      	movs	r3, #0
 8010906:	9301      	str	r3, [sp, #4]
 8010908:	887b      	ldrh	r3, [r7, #2]
 801090a:	9300      	str	r3, [sp, #0]
 801090c:	460b      	mov	r3, r1
 801090e:	4601      	mov	r1, r0
 8010910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010912:	f7ff ff07 	bl	8010724 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	f003 0303 	and.w	r3, r3, #3
 801091e:	2b00      	cmp	r3, #0
 8010920:	d010      	beq.n	8010944 <pbuf_alloc+0x1cc>
 8010922:	4b0b      	ldr	r3, [pc, #44]	; (8010950 <pbuf_alloc+0x1d8>)
 8010924:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010928:	490d      	ldr	r1, [pc, #52]	; (8010960 <pbuf_alloc+0x1e8>)
 801092a:	480b      	ldr	r0, [pc, #44]	; (8010958 <pbuf_alloc+0x1e0>)
 801092c:	f009 f8e0 	bl	8019af0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010930:	e008      	b.n	8010944 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010932:	4b07      	ldr	r3, [pc, #28]	; (8010950 <pbuf_alloc+0x1d8>)
 8010934:	f240 1227 	movw	r2, #295	; 0x127
 8010938:	490a      	ldr	r1, [pc, #40]	; (8010964 <pbuf_alloc+0x1ec>)
 801093a:	4807      	ldr	r0, [pc, #28]	; (8010958 <pbuf_alloc+0x1e0>)
 801093c:	f009 f8d8 	bl	8019af0 <iprintf>
      return NULL;
 8010940:	2300      	movs	r3, #0
 8010942:	e001      	b.n	8010948 <pbuf_alloc+0x1d0>
      break;
 8010944:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010948:	4618      	mov	r0, r3
 801094a:	3728      	adds	r7, #40	; 0x28
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}
 8010950:	0801c9ec 	.word	0x0801c9ec
 8010954:	0801ca1c 	.word	0x0801ca1c
 8010958:	0801ca4c 	.word	0x0801ca4c
 801095c:	0801ca74 	.word	0x0801ca74
 8010960:	0801caa8 	.word	0x0801caa8
 8010964:	0801cad4 	.word	0x0801cad4

08010968 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b086      	sub	sp, #24
 801096c:	af02      	add	r7, sp, #8
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	460b      	mov	r3, r1
 8010972:	807b      	strh	r3, [r7, #2]
 8010974:	4613      	mov	r3, r2
 8010976:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010978:	883b      	ldrh	r3, [r7, #0]
 801097a:	2b41      	cmp	r3, #65	; 0x41
 801097c:	d009      	beq.n	8010992 <pbuf_alloc_reference+0x2a>
 801097e:	883b      	ldrh	r3, [r7, #0]
 8010980:	2b01      	cmp	r3, #1
 8010982:	d006      	beq.n	8010992 <pbuf_alloc_reference+0x2a>
 8010984:	4b0f      	ldr	r3, [pc, #60]	; (80109c4 <pbuf_alloc_reference+0x5c>)
 8010986:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801098a:	490f      	ldr	r1, [pc, #60]	; (80109c8 <pbuf_alloc_reference+0x60>)
 801098c:	480f      	ldr	r0, [pc, #60]	; (80109cc <pbuf_alloc_reference+0x64>)
 801098e:	f009 f8af 	bl	8019af0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010992:	2007      	movs	r0, #7
 8010994:	f7ff fb0e 	bl	800ffb4 <memp_malloc>
 8010998:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d101      	bne.n	80109a4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80109a0:	2300      	movs	r3, #0
 80109a2:	e00b      	b.n	80109bc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80109a4:	8879      	ldrh	r1, [r7, #2]
 80109a6:	887a      	ldrh	r2, [r7, #2]
 80109a8:	2300      	movs	r3, #0
 80109aa:	9301      	str	r3, [sp, #4]
 80109ac:	883b      	ldrh	r3, [r7, #0]
 80109ae:	9300      	str	r3, [sp, #0]
 80109b0:	460b      	mov	r3, r1
 80109b2:	6879      	ldr	r1, [r7, #4]
 80109b4:	68f8      	ldr	r0, [r7, #12]
 80109b6:	f7ff feb5 	bl	8010724 <pbuf_init_alloced_pbuf>
  return p;
 80109ba:	68fb      	ldr	r3, [r7, #12]
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3710      	adds	r7, #16
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	0801c9ec 	.word	0x0801c9ec
 80109c8:	0801caf0 	.word	0x0801caf0
 80109cc:	0801ca4c 	.word	0x0801ca4c

080109d0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b088      	sub	sp, #32
 80109d4:	af02      	add	r7, sp, #8
 80109d6:	607b      	str	r3, [r7, #4]
 80109d8:	4603      	mov	r3, r0
 80109da:	73fb      	strb	r3, [r7, #15]
 80109dc:	460b      	mov	r3, r1
 80109de:	81bb      	strh	r3, [r7, #12]
 80109e0:	4613      	mov	r3, r2
 80109e2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80109e4:	7bfb      	ldrb	r3, [r7, #15]
 80109e6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80109e8:	8a7b      	ldrh	r3, [r7, #18]
 80109ea:	3303      	adds	r3, #3
 80109ec:	f023 0203 	bic.w	r2, r3, #3
 80109f0:	89bb      	ldrh	r3, [r7, #12]
 80109f2:	441a      	add	r2, r3
 80109f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d901      	bls.n	80109fe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80109fa:	2300      	movs	r3, #0
 80109fc:	e018      	b.n	8010a30 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80109fe:	6a3b      	ldr	r3, [r7, #32]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d007      	beq.n	8010a14 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010a04:	8a7b      	ldrh	r3, [r7, #18]
 8010a06:	3303      	adds	r3, #3
 8010a08:	f023 0303 	bic.w	r3, r3, #3
 8010a0c:	6a3a      	ldr	r2, [r7, #32]
 8010a0e:	4413      	add	r3, r2
 8010a10:	617b      	str	r3, [r7, #20]
 8010a12:	e001      	b.n	8010a18 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010a14:	2300      	movs	r3, #0
 8010a16:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	89b9      	ldrh	r1, [r7, #12]
 8010a1c:	89ba      	ldrh	r2, [r7, #12]
 8010a1e:	2302      	movs	r3, #2
 8010a20:	9301      	str	r3, [sp, #4]
 8010a22:	897b      	ldrh	r3, [r7, #10]
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	460b      	mov	r3, r1
 8010a28:	6979      	ldr	r1, [r7, #20]
 8010a2a:	f7ff fe7b 	bl	8010724 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010a2e:	687b      	ldr	r3, [r7, #4]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3718      	adds	r7, #24
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	460b      	mov	r3, r1
 8010a42:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d106      	bne.n	8010a58 <pbuf_realloc+0x20>
 8010a4a:	4b39      	ldr	r3, [pc, #228]	; (8010b30 <pbuf_realloc+0xf8>)
 8010a4c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010a50:	4938      	ldr	r1, [pc, #224]	; (8010b34 <pbuf_realloc+0xfc>)
 8010a52:	4839      	ldr	r0, [pc, #228]	; (8010b38 <pbuf_realloc+0x100>)
 8010a54:	f009 f84c 	bl	8019af0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	891b      	ldrh	r3, [r3, #8]
 8010a5c:	887a      	ldrh	r2, [r7, #2]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d261      	bcs.n	8010b26 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	891a      	ldrh	r2, [r3, #8]
 8010a66:	887b      	ldrh	r3, [r7, #2]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010a6c:	887b      	ldrh	r3, [r7, #2]
 8010a6e:	817b      	strh	r3, [r7, #10]
  q = p;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010a74:	e018      	b.n	8010aa8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	895b      	ldrh	r3, [r3, #10]
 8010a7a:	897a      	ldrh	r2, [r7, #10]
 8010a7c:	1ad3      	subs	r3, r2, r3
 8010a7e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	891a      	ldrh	r2, [r3, #8]
 8010a84:	893b      	ldrh	r3, [r7, #8]
 8010a86:	1ad3      	subs	r3, r2, r3
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d106      	bne.n	8010aa8 <pbuf_realloc+0x70>
 8010a9a:	4b25      	ldr	r3, [pc, #148]	; (8010b30 <pbuf_realloc+0xf8>)
 8010a9c:	f240 12af 	movw	r2, #431	; 0x1af
 8010aa0:	4926      	ldr	r1, [pc, #152]	; (8010b3c <pbuf_realloc+0x104>)
 8010aa2:	4825      	ldr	r0, [pc, #148]	; (8010b38 <pbuf_realloc+0x100>)
 8010aa4:	f009 f824 	bl	8019af0 <iprintf>
  while (rem_len > q->len) {
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	895b      	ldrh	r3, [r3, #10]
 8010aac:	897a      	ldrh	r2, [r7, #10]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d8e1      	bhi.n	8010a76 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	7b1b      	ldrb	r3, [r3, #12]
 8010ab6:	f003 030f 	and.w	r3, r3, #15
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d11f      	bne.n	8010afe <pbuf_realloc+0xc6>
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	895b      	ldrh	r3, [r3, #10]
 8010ac2:	897a      	ldrh	r2, [r7, #10]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d01a      	beq.n	8010afe <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	7b5b      	ldrb	r3, [r3, #13]
 8010acc:	f003 0302 	and.w	r3, r3, #2
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d114      	bne.n	8010afe <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	685a      	ldr	r2, [r3, #4]
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	1ad2      	subs	r2, r2, r3
 8010adc:	897b      	ldrh	r3, [r7, #10]
 8010ade:	4413      	add	r3, r2
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f7fe ffea 	bl	800fabc <mem_trim>
 8010ae8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d106      	bne.n	8010afe <pbuf_realloc+0xc6>
 8010af0:	4b0f      	ldr	r3, [pc, #60]	; (8010b30 <pbuf_realloc+0xf8>)
 8010af2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010af6:	4912      	ldr	r1, [pc, #72]	; (8010b40 <pbuf_realloc+0x108>)
 8010af8:	480f      	ldr	r0, [pc, #60]	; (8010b38 <pbuf_realloc+0x100>)
 8010afa:	f008 fff9 	bl	8019af0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	897a      	ldrh	r2, [r7, #10]
 8010b02:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	895a      	ldrh	r2, [r3, #10]
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d004      	beq.n	8010b1e <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f000 f911 	bl	8010d40 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2200      	movs	r2, #0
 8010b22:	601a      	str	r2, [r3, #0]
 8010b24:	e000      	b.n	8010b28 <pbuf_realloc+0xf0>
    return;
 8010b26:	bf00      	nop

}
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	0801c9ec 	.word	0x0801c9ec
 8010b34:	0801cb04 	.word	0x0801cb04
 8010b38:	0801ca4c 	.word	0x0801ca4c
 8010b3c:	0801cb1c 	.word	0x0801cb1c
 8010b40:	0801cb34 	.word	0x0801cb34

08010b44 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b086      	sub	sp, #24
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	4613      	mov	r3, r2
 8010b50:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d106      	bne.n	8010b66 <pbuf_add_header_impl+0x22>
 8010b58:	4b2b      	ldr	r3, [pc, #172]	; (8010c08 <pbuf_add_header_impl+0xc4>)
 8010b5a:	f240 12df 	movw	r2, #479	; 0x1df
 8010b5e:	492b      	ldr	r1, [pc, #172]	; (8010c0c <pbuf_add_header_impl+0xc8>)
 8010b60:	482b      	ldr	r0, [pc, #172]	; (8010c10 <pbuf_add_header_impl+0xcc>)
 8010b62:	f008 ffc5 	bl	8019af0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d003      	beq.n	8010b74 <pbuf_add_header_impl+0x30>
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b72:	d301      	bcc.n	8010b78 <pbuf_add_header_impl+0x34>
    return 1;
 8010b74:	2301      	movs	r3, #1
 8010b76:	e043      	b.n	8010c00 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d101      	bne.n	8010b82 <pbuf_add_header_impl+0x3e>
    return 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	e03e      	b.n	8010c00 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	891a      	ldrh	r2, [r3, #8]
 8010b8a:	8a7b      	ldrh	r3, [r7, #18]
 8010b8c:	4413      	add	r3, r2
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	8a7a      	ldrh	r2, [r7, #18]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d901      	bls.n	8010b9a <pbuf_add_header_impl+0x56>
    return 1;
 8010b96:	2301      	movs	r3, #1
 8010b98:	e032      	b.n	8010c00 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	7b1b      	ldrb	r3, [r3, #12]
 8010b9e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010ba0:	8a3b      	ldrh	r3, [r7, #16]
 8010ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d00c      	beq.n	8010bc4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	685a      	ldr	r2, [r3, #4]
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	425b      	negs	r3, r3
 8010bb2:	4413      	add	r3, r2
 8010bb4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	3310      	adds	r3, #16
 8010bba:	697a      	ldr	r2, [r7, #20]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d20d      	bcs.n	8010bdc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e01d      	b.n	8010c00 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010bc4:	79fb      	ldrb	r3, [r7, #7]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d006      	beq.n	8010bd8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	685a      	ldr	r2, [r3, #4]
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	425b      	negs	r3, r3
 8010bd2:	4413      	add	r3, r2
 8010bd4:	617b      	str	r3, [r7, #20]
 8010bd6:	e001      	b.n	8010bdc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	e011      	b.n	8010c00 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	697a      	ldr	r2, [r7, #20]
 8010be0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	895a      	ldrh	r2, [r3, #10]
 8010be6:	8a7b      	ldrh	r3, [r7, #18]
 8010be8:	4413      	add	r3, r2
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	891a      	ldrh	r2, [r3, #8]
 8010bf4:	8a7b      	ldrh	r3, [r7, #18]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	811a      	strh	r2, [r3, #8]


  return 0;
 8010bfe:	2300      	movs	r3, #0
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	0801c9ec 	.word	0x0801c9ec
 8010c0c:	0801cb50 	.word	0x0801cb50
 8010c10:	0801ca4c 	.word	0x0801ca4c

08010c14 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010c1e:	2200      	movs	r2, #0
 8010c20:	6839      	ldr	r1, [r7, #0]
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f7ff ff8e 	bl	8010b44 <pbuf_add_header_impl>
 8010c28:	4603      	mov	r3, r0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
	...

08010c34 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d106      	bne.n	8010c52 <pbuf_remove_header+0x1e>
 8010c44:	4b20      	ldr	r3, [pc, #128]	; (8010cc8 <pbuf_remove_header+0x94>)
 8010c46:	f240 224b 	movw	r2, #587	; 0x24b
 8010c4a:	4920      	ldr	r1, [pc, #128]	; (8010ccc <pbuf_remove_header+0x98>)
 8010c4c:	4820      	ldr	r0, [pc, #128]	; (8010cd0 <pbuf_remove_header+0x9c>)
 8010c4e:	f008 ff4f 	bl	8019af0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d003      	beq.n	8010c60 <pbuf_remove_header+0x2c>
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c5e:	d301      	bcc.n	8010c64 <pbuf_remove_header+0x30>
    return 1;
 8010c60:	2301      	movs	r3, #1
 8010c62:	e02c      	b.n	8010cbe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d101      	bne.n	8010c6e <pbuf_remove_header+0x3a>
    return 0;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	e027      	b.n	8010cbe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	895b      	ldrh	r3, [r3, #10]
 8010c76:	89fa      	ldrh	r2, [r7, #14]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d908      	bls.n	8010c8e <pbuf_remove_header+0x5a>
 8010c7c:	4b12      	ldr	r3, [pc, #72]	; (8010cc8 <pbuf_remove_header+0x94>)
 8010c7e:	f240 2255 	movw	r2, #597	; 0x255
 8010c82:	4914      	ldr	r1, [pc, #80]	; (8010cd4 <pbuf_remove_header+0xa0>)
 8010c84:	4812      	ldr	r0, [pc, #72]	; (8010cd0 <pbuf_remove_header+0x9c>)
 8010c86:	f008 ff33 	bl	8019af0 <iprintf>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	e017      	b.n	8010cbe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	685a      	ldr	r2, [r3, #4]
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	441a      	add	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	895a      	ldrh	r2, [r3, #10]
 8010ca4:	89fb      	ldrh	r3, [r7, #14]
 8010ca6:	1ad3      	subs	r3, r2, r3
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	891a      	ldrh	r2, [r3, #8]
 8010cb2:	89fb      	ldrh	r3, [r7, #14]
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010cbc:	2300      	movs	r3, #0
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3710      	adds	r7, #16
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	0801c9ec 	.word	0x0801c9ec
 8010ccc:	0801cb50 	.word	0x0801cb50
 8010cd0:	0801ca4c 	.word	0x0801ca4c
 8010cd4:	0801cb5c 	.word	0x0801cb5c

08010cd8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	807b      	strh	r3, [r7, #2]
 8010ce4:	4613      	mov	r3, r2
 8010ce6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010ce8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	da08      	bge.n	8010d02 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010cf4:	425b      	negs	r3, r3
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f7ff ff9b 	bl	8010c34 <pbuf_remove_header>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	e007      	b.n	8010d12 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010d02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d06:	787a      	ldrb	r2, [r7, #1]
 8010d08:	4619      	mov	r1, r3
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7ff ff1a 	bl	8010b44 <pbuf_add_header_impl>
 8010d10:	4603      	mov	r3, r0
  }
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3708      	adds	r7, #8
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}

08010d1a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b082      	sub	sp, #8
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
 8010d22:	460b      	mov	r3, r1
 8010d24:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010d26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7ff ffd2 	bl	8010cd8 <pbuf_header_impl>
 8010d34:	4603      	mov	r3, r0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3708      	adds	r7, #8
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
	...

08010d40 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b086      	sub	sp, #24
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d10b      	bne.n	8010d66 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d106      	bne.n	8010d62 <pbuf_free+0x22>
 8010d54:	4b38      	ldr	r3, [pc, #224]	; (8010e38 <pbuf_free+0xf8>)
 8010d56:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010d5a:	4938      	ldr	r1, [pc, #224]	; (8010e3c <pbuf_free+0xfc>)
 8010d5c:	4838      	ldr	r0, [pc, #224]	; (8010e40 <pbuf_free+0x100>)
 8010d5e:	f008 fec7 	bl	8019af0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010d62:	2300      	movs	r3, #0
 8010d64:	e063      	b.n	8010e2e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010d6a:	e05c      	b.n	8010e26 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	7b9b      	ldrb	r3, [r3, #14]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d106      	bne.n	8010d82 <pbuf_free+0x42>
 8010d74:	4b30      	ldr	r3, [pc, #192]	; (8010e38 <pbuf_free+0xf8>)
 8010d76:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010d7a:	4932      	ldr	r1, [pc, #200]	; (8010e44 <pbuf_free+0x104>)
 8010d7c:	4830      	ldr	r0, [pc, #192]	; (8010e40 <pbuf_free+0x100>)
 8010d7e:	f008 feb7 	bl	8019af0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	7b9b      	ldrb	r3, [r3, #14]
 8010d86:	3b01      	subs	r3, #1
 8010d88:	b2da      	uxtb	r2, r3
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	739a      	strb	r2, [r3, #14]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	7b9b      	ldrb	r3, [r3, #14]
 8010d92:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010d94:	7dbb      	ldrb	r3, [r7, #22]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d143      	bne.n	8010e22 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	7b1b      	ldrb	r3, [r3, #12]
 8010da4:	f003 030f 	and.w	r3, r3, #15
 8010da8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	7b5b      	ldrb	r3, [r3, #13]
 8010dae:	f003 0302 	and.w	r3, r3, #2
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d011      	beq.n	8010dda <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	691b      	ldr	r3, [r3, #16]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d106      	bne.n	8010dd0 <pbuf_free+0x90>
 8010dc2:	4b1d      	ldr	r3, [pc, #116]	; (8010e38 <pbuf_free+0xf8>)
 8010dc4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010dc8:	491f      	ldr	r1, [pc, #124]	; (8010e48 <pbuf_free+0x108>)
 8010dca:	481d      	ldr	r0, [pc, #116]	; (8010e40 <pbuf_free+0x100>)
 8010dcc:	f008 fe90 	bl	8019af0 <iprintf>
        pc->custom_free_function(p);
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	691b      	ldr	r3, [r3, #16]
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	4798      	blx	r3
 8010dd8:	e01d      	b.n	8010e16 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010dda:	7bfb      	ldrb	r3, [r7, #15]
 8010ddc:	2b02      	cmp	r3, #2
 8010dde:	d104      	bne.n	8010dea <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010de0:	6879      	ldr	r1, [r7, #4]
 8010de2:	2008      	movs	r0, #8
 8010de4:	f7ff f956 	bl	8010094 <memp_free>
 8010de8:	e015      	b.n	8010e16 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010dea:	7bfb      	ldrb	r3, [r7, #15]
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d104      	bne.n	8010dfa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010df0:	6879      	ldr	r1, [r7, #4]
 8010df2:	2007      	movs	r0, #7
 8010df4:	f7ff f94e 	bl	8010094 <memp_free>
 8010df8:	e00d      	b.n	8010e16 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010dfa:	7bfb      	ldrb	r3, [r7, #15]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d103      	bne.n	8010e08 <pbuf_free+0xc8>
          mem_free(p);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7fe fdf1 	bl	800f9e8 <mem_free>
 8010e06:	e006      	b.n	8010e16 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010e08:	4b0b      	ldr	r3, [pc, #44]	; (8010e38 <pbuf_free+0xf8>)
 8010e0a:	f240 320f 	movw	r2, #783	; 0x30f
 8010e0e:	490f      	ldr	r1, [pc, #60]	; (8010e4c <pbuf_free+0x10c>)
 8010e10:	480b      	ldr	r0, [pc, #44]	; (8010e40 <pbuf_free+0x100>)
 8010e12:	f008 fe6d 	bl	8019af0 <iprintf>
        }
      }
      count++;
 8010e16:	7dfb      	ldrb	r3, [r7, #23]
 8010e18:	3301      	adds	r3, #1
 8010e1a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	607b      	str	r3, [r7, #4]
 8010e20:	e001      	b.n	8010e26 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010e22:	2300      	movs	r3, #0
 8010e24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d19f      	bne.n	8010d6c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3718      	adds	r7, #24
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	0801c9ec 	.word	0x0801c9ec
 8010e3c:	0801cb50 	.word	0x0801cb50
 8010e40:	0801ca4c 	.word	0x0801ca4c
 8010e44:	0801cb7c 	.word	0x0801cb7c
 8010e48:	0801cb94 	.word	0x0801cb94
 8010e4c:	0801cbb8 	.word	0x0801cbb8

08010e50 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010e5c:	e005      	b.n	8010e6a <pbuf_clen+0x1a>
    ++len;
 8010e5e:	89fb      	ldrh	r3, [r7, #14]
 8010e60:	3301      	adds	r3, #1
 8010e62:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d1f6      	bne.n	8010e5e <pbuf_clen+0xe>
  }
  return len;
 8010e70:	89fb      	ldrh	r3, [r7, #14]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3714      	adds	r7, #20
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr
	...

08010e80 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d010      	beq.n	8010eb0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	7b9b      	ldrb	r3, [r3, #14]
 8010e92:	3301      	adds	r3, #1
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	7b9b      	ldrb	r3, [r3, #14]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d106      	bne.n	8010eb0 <pbuf_ref+0x30>
 8010ea2:	4b05      	ldr	r3, [pc, #20]	; (8010eb8 <pbuf_ref+0x38>)
 8010ea4:	f240 3242 	movw	r2, #834	; 0x342
 8010ea8:	4904      	ldr	r1, [pc, #16]	; (8010ebc <pbuf_ref+0x3c>)
 8010eaa:	4805      	ldr	r0, [pc, #20]	; (8010ec0 <pbuf_ref+0x40>)
 8010eac:	f008 fe20 	bl	8019af0 <iprintf>
  }
}
 8010eb0:	bf00      	nop
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	0801c9ec 	.word	0x0801c9ec
 8010ebc:	0801cbcc 	.word	0x0801cbcc
 8010ec0:	0801ca4c 	.word	0x0801ca4c

08010ec4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b084      	sub	sp, #16
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <pbuf_cat+0x16>
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d107      	bne.n	8010eea <pbuf_cat+0x26>
 8010eda:	4b20      	ldr	r3, [pc, #128]	; (8010f5c <pbuf_cat+0x98>)
 8010edc:	f240 3259 	movw	r2, #857	; 0x359
 8010ee0:	491f      	ldr	r1, [pc, #124]	; (8010f60 <pbuf_cat+0x9c>)
 8010ee2:	4820      	ldr	r0, [pc, #128]	; (8010f64 <pbuf_cat+0xa0>)
 8010ee4:	f008 fe04 	bl	8019af0 <iprintf>
 8010ee8:	e034      	b.n	8010f54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	60fb      	str	r3, [r7, #12]
 8010eee:	e00a      	b.n	8010f06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	891a      	ldrh	r2, [r3, #8]
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	891b      	ldrh	r3, [r3, #8]
 8010ef8:	4413      	add	r3, r2
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	60fb      	str	r3, [r7, #12]
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1f0      	bne.n	8010ef0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	891a      	ldrh	r2, [r3, #8]
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	895b      	ldrh	r3, [r3, #10]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d006      	beq.n	8010f28 <pbuf_cat+0x64>
 8010f1a:	4b10      	ldr	r3, [pc, #64]	; (8010f5c <pbuf_cat+0x98>)
 8010f1c:	f240 3262 	movw	r2, #866	; 0x362
 8010f20:	4911      	ldr	r1, [pc, #68]	; (8010f68 <pbuf_cat+0xa4>)
 8010f22:	4810      	ldr	r0, [pc, #64]	; (8010f64 <pbuf_cat+0xa0>)
 8010f24:	f008 fde4 	bl	8019af0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d006      	beq.n	8010f3e <pbuf_cat+0x7a>
 8010f30:	4b0a      	ldr	r3, [pc, #40]	; (8010f5c <pbuf_cat+0x98>)
 8010f32:	f240 3263 	movw	r2, #867	; 0x363
 8010f36:	490d      	ldr	r1, [pc, #52]	; (8010f6c <pbuf_cat+0xa8>)
 8010f38:	480a      	ldr	r0, [pc, #40]	; (8010f64 <pbuf_cat+0xa0>)
 8010f3a:	f008 fdd9 	bl	8019af0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	891a      	ldrh	r2, [r3, #8]
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	891b      	ldrh	r3, [r3, #8]
 8010f46:	4413      	add	r3, r2
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	683a      	ldr	r2, [r7, #0]
 8010f52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010f54:	3710      	adds	r7, #16
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	0801c9ec 	.word	0x0801c9ec
 8010f60:	0801cbe0 	.word	0x0801cbe0
 8010f64:	0801ca4c 	.word	0x0801ca4c
 8010f68:	0801cc18 	.word	0x0801cc18
 8010f6c:	0801cc48 	.word	0x0801cc48

08010f70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b086      	sub	sp, #24
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	617b      	str	r3, [r7, #20]
 8010f7e:	2300      	movs	r3, #0
 8010f80:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d008      	beq.n	8010f9a <pbuf_copy+0x2a>
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d005      	beq.n	8010f9a <pbuf_copy+0x2a>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	891a      	ldrh	r2, [r3, #8]
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	891b      	ldrh	r3, [r3, #8]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d209      	bcs.n	8010fae <pbuf_copy+0x3e>
 8010f9a:	4b57      	ldr	r3, [pc, #348]	; (80110f8 <pbuf_copy+0x188>)
 8010f9c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010fa0:	4956      	ldr	r1, [pc, #344]	; (80110fc <pbuf_copy+0x18c>)
 8010fa2:	4857      	ldr	r0, [pc, #348]	; (8011100 <pbuf_copy+0x190>)
 8010fa4:	f008 fda4 	bl	8019af0 <iprintf>
 8010fa8:	f06f 030f 	mvn.w	r3, #15
 8010fac:	e09f      	b.n	80110ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	895b      	ldrh	r3, [r3, #10]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	1ad2      	subs	r2, r2, r3
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	895b      	ldrh	r3, [r3, #10]
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	1acb      	subs	r3, r1, r3
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d306      	bcc.n	8010fd4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	895b      	ldrh	r3, [r3, #10]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	60fb      	str	r3, [r7, #12]
 8010fd2:	e005      	b.n	8010fe0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	895b      	ldrh	r3, [r3, #10]
 8010fd8:	461a      	mov	r2, r3
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	1ad3      	subs	r3, r2, r3
 8010fde:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	685a      	ldr	r2, [r3, #4]
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	18d0      	adds	r0, r2, r3
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	685a      	ldr	r2, [r3, #4]
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	4413      	add	r3, r2
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	f008 ff4b 	bl	8019e8e <memcpy>
    offset_to += len;
 8010ff8:	697a      	ldr	r2, [r7, #20]
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	4413      	add	r3, r2
 8010ffe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011000:	693a      	ldr	r2, [r7, #16]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	4413      	add	r3, r2
 8011006:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	895b      	ldrh	r3, [r3, #10]
 801100c:	461a      	mov	r2, r3
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	4293      	cmp	r3, r2
 8011012:	d906      	bls.n	8011022 <pbuf_copy+0xb2>
 8011014:	4b38      	ldr	r3, [pc, #224]	; (80110f8 <pbuf_copy+0x188>)
 8011016:	f240 32d9 	movw	r2, #985	; 0x3d9
 801101a:	493a      	ldr	r1, [pc, #232]	; (8011104 <pbuf_copy+0x194>)
 801101c:	4838      	ldr	r0, [pc, #224]	; (8011100 <pbuf_copy+0x190>)
 801101e:	f008 fd67 	bl	8019af0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	895b      	ldrh	r3, [r3, #10]
 8011026:	461a      	mov	r2, r3
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	4293      	cmp	r3, r2
 801102c:	d906      	bls.n	801103c <pbuf_copy+0xcc>
 801102e:	4b32      	ldr	r3, [pc, #200]	; (80110f8 <pbuf_copy+0x188>)
 8011030:	f240 32da 	movw	r2, #986	; 0x3da
 8011034:	4934      	ldr	r1, [pc, #208]	; (8011108 <pbuf_copy+0x198>)
 8011036:	4832      	ldr	r0, [pc, #200]	; (8011100 <pbuf_copy+0x190>)
 8011038:	f008 fd5a 	bl	8019af0 <iprintf>
    if (offset_from >= p_from->len) {
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	895b      	ldrh	r3, [r3, #10]
 8011040:	461a      	mov	r2, r3
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	4293      	cmp	r3, r2
 8011046:	d304      	bcc.n	8011052 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011048:	2300      	movs	r3, #0
 801104a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	895b      	ldrh	r3, [r3, #10]
 8011056:	461a      	mov	r2, r3
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	4293      	cmp	r3, r2
 801105c:	d114      	bne.n	8011088 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801105e:	2300      	movs	r3, #0
 8011060:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d10c      	bne.n	8011088 <pbuf_copy+0x118>
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d009      	beq.n	8011088 <pbuf_copy+0x118>
 8011074:	4b20      	ldr	r3, [pc, #128]	; (80110f8 <pbuf_copy+0x188>)
 8011076:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801107a:	4924      	ldr	r1, [pc, #144]	; (801110c <pbuf_copy+0x19c>)
 801107c:	4820      	ldr	r0, [pc, #128]	; (8011100 <pbuf_copy+0x190>)
 801107e:	f008 fd37 	bl	8019af0 <iprintf>
 8011082:	f06f 030f 	mvn.w	r3, #15
 8011086:	e032      	b.n	80110ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d013      	beq.n	80110b6 <pbuf_copy+0x146>
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	895a      	ldrh	r2, [r3, #10]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	891b      	ldrh	r3, [r3, #8]
 8011096:	429a      	cmp	r2, r3
 8011098:	d10d      	bne.n	80110b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d009      	beq.n	80110b6 <pbuf_copy+0x146>
 80110a2:	4b15      	ldr	r3, [pc, #84]	; (80110f8 <pbuf_copy+0x188>)
 80110a4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80110a8:	4919      	ldr	r1, [pc, #100]	; (8011110 <pbuf_copy+0x1a0>)
 80110aa:	4815      	ldr	r0, [pc, #84]	; (8011100 <pbuf_copy+0x190>)
 80110ac:	f008 fd20 	bl	8019af0 <iprintf>
 80110b0:	f06f 0305 	mvn.w	r3, #5
 80110b4:	e01b      	b.n	80110ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d013      	beq.n	80110e4 <pbuf_copy+0x174>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	895a      	ldrh	r2, [r3, #10]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	891b      	ldrh	r3, [r3, #8]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d10d      	bne.n	80110e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d009      	beq.n	80110e4 <pbuf_copy+0x174>
 80110d0:	4b09      	ldr	r3, [pc, #36]	; (80110f8 <pbuf_copy+0x188>)
 80110d2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80110d6:	490e      	ldr	r1, [pc, #56]	; (8011110 <pbuf_copy+0x1a0>)
 80110d8:	4809      	ldr	r0, [pc, #36]	; (8011100 <pbuf_copy+0x190>)
 80110da:	f008 fd09 	bl	8019af0 <iprintf>
 80110de:	f06f 0305 	mvn.w	r3, #5
 80110e2:	e004      	b.n	80110ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	f47f af61 	bne.w	8010fae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80110ec:	2300      	movs	r3, #0
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3718      	adds	r7, #24
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	0801c9ec 	.word	0x0801c9ec
 80110fc:	0801cc94 	.word	0x0801cc94
 8011100:	0801ca4c 	.word	0x0801ca4c
 8011104:	0801ccc4 	.word	0x0801ccc4
 8011108:	0801ccdc 	.word	0x0801ccdc
 801110c:	0801ccf8 	.word	0x0801ccf8
 8011110:	0801cd08 	.word	0x0801cd08

08011114 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b088      	sub	sp, #32
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	4611      	mov	r1, r2
 8011120:	461a      	mov	r2, r3
 8011122:	460b      	mov	r3, r1
 8011124:	80fb      	strh	r3, [r7, #6]
 8011126:	4613      	mov	r3, r2
 8011128:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801112a:	2300      	movs	r3, #0
 801112c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801112e:	2300      	movs	r3, #0
 8011130:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d108      	bne.n	801114a <pbuf_copy_partial+0x36>
 8011138:	4b2b      	ldr	r3, [pc, #172]	; (80111e8 <pbuf_copy_partial+0xd4>)
 801113a:	f240 420a 	movw	r2, #1034	; 0x40a
 801113e:	492b      	ldr	r1, [pc, #172]	; (80111ec <pbuf_copy_partial+0xd8>)
 8011140:	482b      	ldr	r0, [pc, #172]	; (80111f0 <pbuf_copy_partial+0xdc>)
 8011142:	f008 fcd5 	bl	8019af0 <iprintf>
 8011146:	2300      	movs	r3, #0
 8011148:	e04a      	b.n	80111e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d108      	bne.n	8011162 <pbuf_copy_partial+0x4e>
 8011150:	4b25      	ldr	r3, [pc, #148]	; (80111e8 <pbuf_copy_partial+0xd4>)
 8011152:	f240 420b 	movw	r2, #1035	; 0x40b
 8011156:	4927      	ldr	r1, [pc, #156]	; (80111f4 <pbuf_copy_partial+0xe0>)
 8011158:	4825      	ldr	r0, [pc, #148]	; (80111f0 <pbuf_copy_partial+0xdc>)
 801115a:	f008 fcc9 	bl	8019af0 <iprintf>
 801115e:	2300      	movs	r3, #0
 8011160:	e03e      	b.n	80111e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	61fb      	str	r3, [r7, #28]
 8011166:	e034      	b.n	80111d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011168:	88bb      	ldrh	r3, [r7, #4]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00a      	beq.n	8011184 <pbuf_copy_partial+0x70>
 801116e:	69fb      	ldr	r3, [r7, #28]
 8011170:	895b      	ldrh	r3, [r3, #10]
 8011172:	88ba      	ldrh	r2, [r7, #4]
 8011174:	429a      	cmp	r2, r3
 8011176:	d305      	bcc.n	8011184 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	895b      	ldrh	r3, [r3, #10]
 801117c:	88ba      	ldrh	r2, [r7, #4]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	80bb      	strh	r3, [r7, #4]
 8011182:	e023      	b.n	80111cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	895a      	ldrh	r2, [r3, #10]
 8011188:	88bb      	ldrh	r3, [r7, #4]
 801118a:	1ad3      	subs	r3, r2, r3
 801118c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801118e:	8b3a      	ldrh	r2, [r7, #24]
 8011190:	88fb      	ldrh	r3, [r7, #6]
 8011192:	429a      	cmp	r2, r3
 8011194:	d901      	bls.n	801119a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011196:	88fb      	ldrh	r3, [r7, #6]
 8011198:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801119a:	8b7b      	ldrh	r3, [r7, #26]
 801119c:	68ba      	ldr	r2, [r7, #8]
 801119e:	18d0      	adds	r0, r2, r3
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	685a      	ldr	r2, [r3, #4]
 80111a4:	88bb      	ldrh	r3, [r7, #4]
 80111a6:	4413      	add	r3, r2
 80111a8:	8b3a      	ldrh	r2, [r7, #24]
 80111aa:	4619      	mov	r1, r3
 80111ac:	f008 fe6f 	bl	8019e8e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80111b0:	8afa      	ldrh	r2, [r7, #22]
 80111b2:	8b3b      	ldrh	r3, [r7, #24]
 80111b4:	4413      	add	r3, r2
 80111b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80111b8:	8b7a      	ldrh	r2, [r7, #26]
 80111ba:	8b3b      	ldrh	r3, [r7, #24]
 80111bc:	4413      	add	r3, r2
 80111be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80111c0:	88fa      	ldrh	r2, [r7, #6]
 80111c2:	8b3b      	ldrh	r3, [r7, #24]
 80111c4:	1ad3      	subs	r3, r2, r3
 80111c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80111c8:	2300      	movs	r3, #0
 80111ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	61fb      	str	r3, [r7, #28]
 80111d2:	88fb      	ldrh	r3, [r7, #6]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d002      	beq.n	80111de <pbuf_copy_partial+0xca>
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d1c4      	bne.n	8011168 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80111de:	8afb      	ldrh	r3, [r7, #22]
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	3720      	adds	r7, #32
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	0801c9ec 	.word	0x0801c9ec
 80111ec:	0801cd34 	.word	0x0801cd34
 80111f0:	0801ca4c 	.word	0x0801ca4c
 80111f4:	0801cd54 	.word	0x0801cd54

080111f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	4603      	mov	r3, r0
 8011200:	603a      	str	r2, [r7, #0]
 8011202:	71fb      	strb	r3, [r7, #7]
 8011204:	460b      	mov	r3, r1
 8011206:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	8919      	ldrh	r1, [r3, #8]
 801120c:	88ba      	ldrh	r2, [r7, #4]
 801120e:	79fb      	ldrb	r3, [r7, #7]
 8011210:	4618      	mov	r0, r3
 8011212:	f7ff fab1 	bl	8010778 <pbuf_alloc>
 8011216:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d101      	bne.n	8011222 <pbuf_clone+0x2a>
    return NULL;
 801121e:	2300      	movs	r3, #0
 8011220:	e011      	b.n	8011246 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011222:	6839      	ldr	r1, [r7, #0]
 8011224:	68f8      	ldr	r0, [r7, #12]
 8011226:	f7ff fea3 	bl	8010f70 <pbuf_copy>
 801122a:	4603      	mov	r3, r0
 801122c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801122e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d006      	beq.n	8011244 <pbuf_clone+0x4c>
 8011236:	4b06      	ldr	r3, [pc, #24]	; (8011250 <pbuf_clone+0x58>)
 8011238:	f240 5224 	movw	r2, #1316	; 0x524
 801123c:	4905      	ldr	r1, [pc, #20]	; (8011254 <pbuf_clone+0x5c>)
 801123e:	4806      	ldr	r0, [pc, #24]	; (8011258 <pbuf_clone+0x60>)
 8011240:	f008 fc56 	bl	8019af0 <iprintf>
  return q;
 8011244:	68fb      	ldr	r3, [r7, #12]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop
 8011250:	0801c9ec 	.word	0x0801c9ec
 8011254:	0801ce60 	.word	0x0801ce60
 8011258:	0801ca4c 	.word	0x0801ca4c

0801125c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011260:	f007 ff0a 	bl	8019078 <rand>
 8011264:	4603      	mov	r3, r0
 8011266:	b29b      	uxth	r3, r3
 8011268:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801126c:	b29b      	uxth	r3, r3
 801126e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011272:	b29a      	uxth	r2, r3
 8011274:	4b01      	ldr	r3, [pc, #4]	; (801127c <tcp_init+0x20>)
 8011276:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011278:	bf00      	nop
 801127a:	bd80      	pop	{r7, pc}
 801127c:	20000058 	.word	0x20000058

08011280 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	7d1b      	ldrb	r3, [r3, #20]
 801128c:	2b01      	cmp	r3, #1
 801128e:	d105      	bne.n	801129c <tcp_free+0x1c>
 8011290:	4b06      	ldr	r3, [pc, #24]	; (80112ac <tcp_free+0x2c>)
 8011292:	22d4      	movs	r2, #212	; 0xd4
 8011294:	4906      	ldr	r1, [pc, #24]	; (80112b0 <tcp_free+0x30>)
 8011296:	4807      	ldr	r0, [pc, #28]	; (80112b4 <tcp_free+0x34>)
 8011298:	f008 fc2a 	bl	8019af0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801129c:	6879      	ldr	r1, [r7, #4]
 801129e:	2001      	movs	r0, #1
 80112a0:	f7fe fef8 	bl	8010094 <memp_free>
}
 80112a4:	bf00      	nop
 80112a6:	3708      	adds	r7, #8
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	0801ceec 	.word	0x0801ceec
 80112b0:	0801cf1c 	.word	0x0801cf1c
 80112b4:	0801cf30 	.word	0x0801cf30

080112b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	7d1b      	ldrb	r3, [r3, #20]
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d105      	bne.n	80112d4 <tcp_free_listen+0x1c>
 80112c8:	4b06      	ldr	r3, [pc, #24]	; (80112e4 <tcp_free_listen+0x2c>)
 80112ca:	22df      	movs	r2, #223	; 0xdf
 80112cc:	4906      	ldr	r1, [pc, #24]	; (80112e8 <tcp_free_listen+0x30>)
 80112ce:	4807      	ldr	r0, [pc, #28]	; (80112ec <tcp_free_listen+0x34>)
 80112d0:	f008 fc0e 	bl	8019af0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80112d4:	6879      	ldr	r1, [r7, #4]
 80112d6:	2002      	movs	r0, #2
 80112d8:	f7fe fedc 	bl	8010094 <memp_free>
}
 80112dc:	bf00      	nop
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	0801ceec 	.word	0x0801ceec
 80112e8:	0801cf58 	.word	0x0801cf58
 80112ec:	0801cf30 	.word	0x0801cf30

080112f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80112f4:	f000 fea4 	bl	8012040 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80112f8:	4b07      	ldr	r3, [pc, #28]	; (8011318 <tcp_tmr+0x28>)
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	3301      	adds	r3, #1
 80112fe:	b2da      	uxtb	r2, r3
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <tcp_tmr+0x28>)
 8011302:	701a      	strb	r2, [r3, #0]
 8011304:	4b04      	ldr	r3, [pc, #16]	; (8011318 <tcp_tmr+0x28>)
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	f003 0301 	and.w	r3, r3, #1
 801130c:	2b00      	cmp	r3, #0
 801130e:	d001      	beq.n	8011314 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011310:	f000 fb56 	bl	80119c0 <tcp_slowtmr>
  }
}
 8011314:	bf00      	nop
 8011316:	bd80      	pop	{r7, pc}
 8011318:	200070e5 	.word	0x200070e5

0801131c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b084      	sub	sp, #16
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d105      	bne.n	8011338 <tcp_remove_listener+0x1c>
 801132c:	4b0d      	ldr	r3, [pc, #52]	; (8011364 <tcp_remove_listener+0x48>)
 801132e:	22ff      	movs	r2, #255	; 0xff
 8011330:	490d      	ldr	r1, [pc, #52]	; (8011368 <tcp_remove_listener+0x4c>)
 8011332:	480e      	ldr	r0, [pc, #56]	; (801136c <tcp_remove_listener+0x50>)
 8011334:	f008 fbdc 	bl	8019af0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	60fb      	str	r3, [r7, #12]
 801133c:	e00a      	b.n	8011354 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011342:	683a      	ldr	r2, [r7, #0]
 8011344:	429a      	cmp	r2, r3
 8011346:	d102      	bne.n	801134e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2200      	movs	r2, #0
 801134c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	60fb      	str	r3, [r7, #12]
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1f1      	bne.n	801133e <tcp_remove_listener+0x22>
    }
  }
}
 801135a:	bf00      	nop
 801135c:	bf00      	nop
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	0801ceec 	.word	0x0801ceec
 8011368:	0801cf74 	.word	0x0801cf74
 801136c:	0801cf30 	.word	0x0801cf30

08011370 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d106      	bne.n	801138c <tcp_listen_closed+0x1c>
 801137e:	4b14      	ldr	r3, [pc, #80]	; (80113d0 <tcp_listen_closed+0x60>)
 8011380:	f240 1211 	movw	r2, #273	; 0x111
 8011384:	4913      	ldr	r1, [pc, #76]	; (80113d4 <tcp_listen_closed+0x64>)
 8011386:	4814      	ldr	r0, [pc, #80]	; (80113d8 <tcp_listen_closed+0x68>)
 8011388:	f008 fbb2 	bl	8019af0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	7d1b      	ldrb	r3, [r3, #20]
 8011390:	2b01      	cmp	r3, #1
 8011392:	d006      	beq.n	80113a2 <tcp_listen_closed+0x32>
 8011394:	4b0e      	ldr	r3, [pc, #56]	; (80113d0 <tcp_listen_closed+0x60>)
 8011396:	f44f 7289 	mov.w	r2, #274	; 0x112
 801139a:	4910      	ldr	r1, [pc, #64]	; (80113dc <tcp_listen_closed+0x6c>)
 801139c:	480e      	ldr	r0, [pc, #56]	; (80113d8 <tcp_listen_closed+0x68>)
 801139e:	f008 fba7 	bl	8019af0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80113a2:	2301      	movs	r3, #1
 80113a4:	60fb      	str	r3, [r7, #12]
 80113a6:	e00b      	b.n	80113c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80113a8:	4a0d      	ldr	r2, [pc, #52]	; (80113e0 <tcp_listen_closed+0x70>)
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	6879      	ldr	r1, [r7, #4]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff ffb1 	bl	801131c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	3301      	adds	r3, #1
 80113be:	60fb      	str	r3, [r7, #12]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b03      	cmp	r3, #3
 80113c4:	d9f0      	bls.n	80113a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80113c6:	bf00      	nop
 80113c8:	bf00      	nop
 80113ca:	3710      	adds	r7, #16
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	0801ceec 	.word	0x0801ceec
 80113d4:	0801cf9c 	.word	0x0801cf9c
 80113d8:	0801cf30 	.word	0x0801cf30
 80113dc:	0801cfa8 	.word	0x0801cfa8
 80113e0:	0801eeec 	.word	0x0801eeec

080113e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80113e4:	b5b0      	push	{r4, r5, r7, lr}
 80113e6:	b088      	sub	sp, #32
 80113e8:	af04      	add	r7, sp, #16
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	460b      	mov	r3, r1
 80113ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d106      	bne.n	8011404 <tcp_close_shutdown+0x20>
 80113f6:	4b63      	ldr	r3, [pc, #396]	; (8011584 <tcp_close_shutdown+0x1a0>)
 80113f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80113fc:	4962      	ldr	r1, [pc, #392]	; (8011588 <tcp_close_shutdown+0x1a4>)
 80113fe:	4863      	ldr	r0, [pc, #396]	; (801158c <tcp_close_shutdown+0x1a8>)
 8011400:	f008 fb76 	bl	8019af0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011404:	78fb      	ldrb	r3, [r7, #3]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d067      	beq.n	80114da <tcp_close_shutdown+0xf6>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	7d1b      	ldrb	r3, [r3, #20]
 801140e:	2b04      	cmp	r3, #4
 8011410:	d003      	beq.n	801141a <tcp_close_shutdown+0x36>
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	7d1b      	ldrb	r3, [r3, #20]
 8011416:	2b07      	cmp	r3, #7
 8011418:	d15f      	bne.n	80114da <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801141e:	2b00      	cmp	r3, #0
 8011420:	d105      	bne.n	801142e <tcp_close_shutdown+0x4a>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011426:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801142a:	4293      	cmp	r3, r2
 801142c:	d055      	beq.n	80114da <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	8b5b      	ldrh	r3, [r3, #26]
 8011432:	f003 0310 	and.w	r3, r3, #16
 8011436:	2b00      	cmp	r3, #0
 8011438:	d106      	bne.n	8011448 <tcp_close_shutdown+0x64>
 801143a:	4b52      	ldr	r3, [pc, #328]	; (8011584 <tcp_close_shutdown+0x1a0>)
 801143c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011440:	4953      	ldr	r1, [pc, #332]	; (8011590 <tcp_close_shutdown+0x1ac>)
 8011442:	4852      	ldr	r0, [pc, #328]	; (801158c <tcp_close_shutdown+0x1a8>)
 8011444:	f008 fb54 	bl	8019af0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011450:	687d      	ldr	r5, [r7, #4]
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	3304      	adds	r3, #4
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	8ad2      	ldrh	r2, [r2, #22]
 801145a:	6879      	ldr	r1, [r7, #4]
 801145c:	8b09      	ldrh	r1, [r1, #24]
 801145e:	9102      	str	r1, [sp, #8]
 8011460:	9201      	str	r2, [sp, #4]
 8011462:	9300      	str	r3, [sp, #0]
 8011464:	462b      	mov	r3, r5
 8011466:	4622      	mov	r2, r4
 8011468:	4601      	mov	r1, r0
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f004 fe94 	bl	8016198 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f001 f8c9 	bl	8012608 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011476:	4b47      	ldr	r3, [pc, #284]	; (8011594 <tcp_close_shutdown+0x1b0>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	429a      	cmp	r2, r3
 801147e:	d105      	bne.n	801148c <tcp_close_shutdown+0xa8>
 8011480:	4b44      	ldr	r3, [pc, #272]	; (8011594 <tcp_close_shutdown+0x1b0>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	4a43      	ldr	r2, [pc, #268]	; (8011594 <tcp_close_shutdown+0x1b0>)
 8011488:	6013      	str	r3, [r2, #0]
 801148a:	e013      	b.n	80114b4 <tcp_close_shutdown+0xd0>
 801148c:	4b41      	ldr	r3, [pc, #260]	; (8011594 <tcp_close_shutdown+0x1b0>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	60fb      	str	r3, [r7, #12]
 8011492:	e00c      	b.n	80114ae <tcp_close_shutdown+0xca>
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	429a      	cmp	r2, r3
 801149c:	d104      	bne.n	80114a8 <tcp_close_shutdown+0xc4>
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	68da      	ldr	r2, [r3, #12]
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	60da      	str	r2, [r3, #12]
 80114a6:	e005      	b.n	80114b4 <tcp_close_shutdown+0xd0>
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	60fb      	str	r3, [r7, #12]
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d1ef      	bne.n	8011494 <tcp_close_shutdown+0xb0>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2200      	movs	r2, #0
 80114b8:	60da      	str	r2, [r3, #12]
 80114ba:	4b37      	ldr	r3, [pc, #220]	; (8011598 <tcp_close_shutdown+0x1b4>)
 80114bc:	2201      	movs	r2, #1
 80114be:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80114c0:	4b36      	ldr	r3, [pc, #216]	; (801159c <tcp_close_shutdown+0x1b8>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d102      	bne.n	80114d0 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80114ca:	f003 fd61 	bl	8014f90 <tcp_trigger_input_pcb_close>
 80114ce:	e002      	b.n	80114d6 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f7ff fed5 	bl	8011280 <tcp_free>
      }
      return ERR_OK;
 80114d6:	2300      	movs	r3, #0
 80114d8:	e050      	b.n	801157c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	7d1b      	ldrb	r3, [r3, #20]
 80114de:	2b02      	cmp	r3, #2
 80114e0:	d03b      	beq.n	801155a <tcp_close_shutdown+0x176>
 80114e2:	2b02      	cmp	r3, #2
 80114e4:	dc44      	bgt.n	8011570 <tcp_close_shutdown+0x18c>
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d002      	beq.n	80114f0 <tcp_close_shutdown+0x10c>
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d02a      	beq.n	8011544 <tcp_close_shutdown+0x160>
 80114ee:	e03f      	b.n	8011570 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	8adb      	ldrh	r3, [r3, #22]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d021      	beq.n	801153c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80114f8:	4b29      	ldr	r3, [pc, #164]	; (80115a0 <tcp_close_shutdown+0x1bc>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d105      	bne.n	801150e <tcp_close_shutdown+0x12a>
 8011502:	4b27      	ldr	r3, [pc, #156]	; (80115a0 <tcp_close_shutdown+0x1bc>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	4a25      	ldr	r2, [pc, #148]	; (80115a0 <tcp_close_shutdown+0x1bc>)
 801150a:	6013      	str	r3, [r2, #0]
 801150c:	e013      	b.n	8011536 <tcp_close_shutdown+0x152>
 801150e:	4b24      	ldr	r3, [pc, #144]	; (80115a0 <tcp_close_shutdown+0x1bc>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	60bb      	str	r3, [r7, #8]
 8011514:	e00c      	b.n	8011530 <tcp_close_shutdown+0x14c>
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	429a      	cmp	r2, r3
 801151e:	d104      	bne.n	801152a <tcp_close_shutdown+0x146>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	68da      	ldr	r2, [r3, #12]
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	60da      	str	r2, [r3, #12]
 8011528:	e005      	b.n	8011536 <tcp_close_shutdown+0x152>
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	60bb      	str	r3, [r7, #8]
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d1ef      	bne.n	8011516 <tcp_close_shutdown+0x132>
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7ff fe9f 	bl	8011280 <tcp_free>
      break;
 8011542:	e01a      	b.n	801157a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7ff ff13 	bl	8011370 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801154a:	6879      	ldr	r1, [r7, #4]
 801154c:	4815      	ldr	r0, [pc, #84]	; (80115a4 <tcp_close_shutdown+0x1c0>)
 801154e:	f001 f8ab 	bl	80126a8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f7ff feb0 	bl	80112b8 <tcp_free_listen>
      break;
 8011558:	e00f      	b.n	801157a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801155a:	6879      	ldr	r1, [r7, #4]
 801155c:	480d      	ldr	r0, [pc, #52]	; (8011594 <tcp_close_shutdown+0x1b0>)
 801155e:	f001 f8a3 	bl	80126a8 <tcp_pcb_remove>
 8011562:	4b0d      	ldr	r3, [pc, #52]	; (8011598 <tcp_close_shutdown+0x1b4>)
 8011564:	2201      	movs	r2, #1
 8011566:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f7ff fe89 	bl	8011280 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801156e:	e004      	b.n	801157a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f000 f819 	bl	80115a8 <tcp_close_shutdown_fin>
 8011576:	4603      	mov	r3, r0
 8011578:	e000      	b.n	801157c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801157a:	2300      	movs	r3, #0
}
 801157c:	4618      	mov	r0, r3
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bdb0      	pop	{r4, r5, r7, pc}
 8011584:	0801ceec 	.word	0x0801ceec
 8011588:	0801cfc0 	.word	0x0801cfc0
 801158c:	0801cf30 	.word	0x0801cf30
 8011590:	0801cfe0 	.word	0x0801cfe0
 8011594:	200070dc 	.word	0x200070dc
 8011598:	200070e4 	.word	0x200070e4
 801159c:	2000711c 	.word	0x2000711c
 80115a0:	200070d4 	.word	0x200070d4
 80115a4:	200070d8 	.word	0x200070d8

080115a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b084      	sub	sp, #16
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d106      	bne.n	80115c4 <tcp_close_shutdown_fin+0x1c>
 80115b6:	4b2e      	ldr	r3, [pc, #184]	; (8011670 <tcp_close_shutdown_fin+0xc8>)
 80115b8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80115bc:	492d      	ldr	r1, [pc, #180]	; (8011674 <tcp_close_shutdown_fin+0xcc>)
 80115be:	482e      	ldr	r0, [pc, #184]	; (8011678 <tcp_close_shutdown_fin+0xd0>)
 80115c0:	f008 fa96 	bl	8019af0 <iprintf>

  switch (pcb->state) {
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	7d1b      	ldrb	r3, [r3, #20]
 80115c8:	2b07      	cmp	r3, #7
 80115ca:	d020      	beq.n	801160e <tcp_close_shutdown_fin+0x66>
 80115cc:	2b07      	cmp	r3, #7
 80115ce:	dc2b      	bgt.n	8011628 <tcp_close_shutdown_fin+0x80>
 80115d0:	2b03      	cmp	r3, #3
 80115d2:	d002      	beq.n	80115da <tcp_close_shutdown_fin+0x32>
 80115d4:	2b04      	cmp	r3, #4
 80115d6:	d00d      	beq.n	80115f4 <tcp_close_shutdown_fin+0x4c>
 80115d8:	e026      	b.n	8011628 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f003 feea 	bl	80153b4 <tcp_send_fin>
 80115e0:	4603      	mov	r3, r0
 80115e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80115e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d11f      	bne.n	801162c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2205      	movs	r2, #5
 80115f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80115f2:	e01b      	b.n	801162c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f003 fedd 	bl	80153b4 <tcp_send_fin>
 80115fa:	4603      	mov	r3, r0
 80115fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80115fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d114      	bne.n	8011630 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2205      	movs	r2, #5
 801160a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801160c:	e010      	b.n	8011630 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f003 fed0 	bl	80153b4 <tcp_send_fin>
 8011614:	4603      	mov	r3, r0
 8011616:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d109      	bne.n	8011634 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2209      	movs	r2, #9
 8011624:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011626:	e005      	b.n	8011634 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011628:	2300      	movs	r3, #0
 801162a:	e01c      	b.n	8011666 <tcp_close_shutdown_fin+0xbe>
      break;
 801162c:	bf00      	nop
 801162e:	e002      	b.n	8011636 <tcp_close_shutdown_fin+0x8e>
      break;
 8011630:	bf00      	nop
 8011632:	e000      	b.n	8011636 <tcp_close_shutdown_fin+0x8e>
      break;
 8011634:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d103      	bne.n	8011646 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f003 fff6 	bl	8015630 <tcp_output>
 8011644:	e00d      	b.n	8011662 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801164a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801164e:	d108      	bne.n	8011662 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	8b5b      	ldrh	r3, [r3, #26]
 8011654:	f043 0308 	orr.w	r3, r3, #8
 8011658:	b29a      	uxth	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801165e:	2300      	movs	r3, #0
 8011660:	e001      	b.n	8011666 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011662:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3710      	adds	r7, #16
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	0801ceec 	.word	0x0801ceec
 8011674:	0801cf9c 	.word	0x0801cf9c
 8011678:	0801cf30 	.word	0x0801cf30

0801167c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b082      	sub	sp, #8
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d109      	bne.n	801169e <tcp_close+0x22>
 801168a:	4b0f      	ldr	r3, [pc, #60]	; (80116c8 <tcp_close+0x4c>)
 801168c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011690:	490e      	ldr	r1, [pc, #56]	; (80116cc <tcp_close+0x50>)
 8011692:	480f      	ldr	r0, [pc, #60]	; (80116d0 <tcp_close+0x54>)
 8011694:	f008 fa2c 	bl	8019af0 <iprintf>
 8011698:	f06f 030f 	mvn.w	r3, #15
 801169c:	e00f      	b.n	80116be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	7d1b      	ldrb	r3, [r3, #20]
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d006      	beq.n	80116b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	8b5b      	ldrh	r3, [r3, #26]
 80116aa:	f043 0310 	orr.w	r3, r3, #16
 80116ae:	b29a      	uxth	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80116b4:	2101      	movs	r1, #1
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f7ff fe94 	bl	80113e4 <tcp_close_shutdown>
 80116bc:	4603      	mov	r3, r0
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3708      	adds	r7, #8
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	0801ceec 	.word	0x0801ceec
 80116cc:	0801cffc 	.word	0x0801cffc
 80116d0:	0801cf30 	.word	0x0801cf30

080116d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b08e      	sub	sp, #56	; 0x38
 80116d8:	af04      	add	r7, sp, #16
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d107      	bne.n	80116f4 <tcp_abandon+0x20>
 80116e4:	4b52      	ldr	r3, [pc, #328]	; (8011830 <tcp_abandon+0x15c>)
 80116e6:	f240 223d 	movw	r2, #573	; 0x23d
 80116ea:	4952      	ldr	r1, [pc, #328]	; (8011834 <tcp_abandon+0x160>)
 80116ec:	4852      	ldr	r0, [pc, #328]	; (8011838 <tcp_abandon+0x164>)
 80116ee:	f008 f9ff 	bl	8019af0 <iprintf>
 80116f2:	e099      	b.n	8011828 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	7d1b      	ldrb	r3, [r3, #20]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d106      	bne.n	801170a <tcp_abandon+0x36>
 80116fc:	4b4c      	ldr	r3, [pc, #304]	; (8011830 <tcp_abandon+0x15c>)
 80116fe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011702:	494e      	ldr	r1, [pc, #312]	; (801183c <tcp_abandon+0x168>)
 8011704:	484c      	ldr	r0, [pc, #304]	; (8011838 <tcp_abandon+0x164>)
 8011706:	f008 f9f3 	bl	8019af0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	7d1b      	ldrb	r3, [r3, #20]
 801170e:	2b0a      	cmp	r3, #10
 8011710:	d107      	bne.n	8011722 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011712:	6879      	ldr	r1, [r7, #4]
 8011714:	484a      	ldr	r0, [pc, #296]	; (8011840 <tcp_abandon+0x16c>)
 8011716:	f000 ffc7 	bl	80126a8 <tcp_pcb_remove>
    tcp_free(pcb);
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f7ff fdb0 	bl	8011280 <tcp_free>
 8011720:	e082      	b.n	8011828 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011722:	2300      	movs	r3, #0
 8011724:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011726:	2300      	movs	r3, #0
 8011728:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801172e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011734:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801173c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	691b      	ldr	r3, [r3, #16]
 8011742:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	7d1b      	ldrb	r3, [r3, #20]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d126      	bne.n	801179a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	8adb      	ldrh	r3, [r3, #22]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d02e      	beq.n	80117b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011754:	4b3b      	ldr	r3, [pc, #236]	; (8011844 <tcp_abandon+0x170>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	429a      	cmp	r2, r3
 801175c:	d105      	bne.n	801176a <tcp_abandon+0x96>
 801175e:	4b39      	ldr	r3, [pc, #228]	; (8011844 <tcp_abandon+0x170>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	68db      	ldr	r3, [r3, #12]
 8011764:	4a37      	ldr	r2, [pc, #220]	; (8011844 <tcp_abandon+0x170>)
 8011766:	6013      	str	r3, [r2, #0]
 8011768:	e013      	b.n	8011792 <tcp_abandon+0xbe>
 801176a:	4b36      	ldr	r3, [pc, #216]	; (8011844 <tcp_abandon+0x170>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	61fb      	str	r3, [r7, #28]
 8011770:	e00c      	b.n	801178c <tcp_abandon+0xb8>
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	429a      	cmp	r2, r3
 801177a:	d104      	bne.n	8011786 <tcp_abandon+0xb2>
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	68da      	ldr	r2, [r3, #12]
 8011780:	69fb      	ldr	r3, [r7, #28]
 8011782:	60da      	str	r2, [r3, #12]
 8011784:	e005      	b.n	8011792 <tcp_abandon+0xbe>
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	61fb      	str	r3, [r7, #28]
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d1ef      	bne.n	8011772 <tcp_abandon+0x9e>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2200      	movs	r2, #0
 8011796:	60da      	str	r2, [r3, #12]
 8011798:	e00b      	b.n	80117b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	8adb      	ldrh	r3, [r3, #22]
 80117a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80117a4:	6879      	ldr	r1, [r7, #4]
 80117a6:	4828      	ldr	r0, [pc, #160]	; (8011848 <tcp_abandon+0x174>)
 80117a8:	f000 ff7e 	bl	80126a8 <tcp_pcb_remove>
 80117ac:	4b27      	ldr	r3, [pc, #156]	; (801184c <tcp_abandon+0x178>)
 80117ae:	2201      	movs	r2, #1
 80117b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d004      	beq.n	80117c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117be:	4618      	mov	r0, r3
 80117c0:	f000 fd20 	bl	8012204 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d004      	beq.n	80117d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117d0:	4618      	mov	r0, r3
 80117d2:	f000 fd17 	bl	8012204 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d004      	beq.n	80117e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117e2:	4618      	mov	r0, r3
 80117e4:	f000 fd0e 	bl	8012204 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80117e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00e      	beq.n	801180c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80117ee:	6879      	ldr	r1, [r7, #4]
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	3304      	adds	r3, #4
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	8b12      	ldrh	r2, [r2, #24]
 80117f8:	9202      	str	r2, [sp, #8]
 80117fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80117fc:	9201      	str	r2, [sp, #4]
 80117fe:	9300      	str	r3, [sp, #0]
 8011800:	460b      	mov	r3, r1
 8011802:	697a      	ldr	r2, [r7, #20]
 8011804:	69b9      	ldr	r1, [r7, #24]
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f004 fcc6 	bl	8016198 <tcp_rst>
    }
    last_state = pcb->state;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	7d1b      	ldrb	r3, [r3, #20]
 8011810:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7ff fd34 	bl	8011280 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d004      	beq.n	8011828 <tcp_abandon+0x154>
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	f06f 010c 	mvn.w	r1, #12
 8011824:	68f8      	ldr	r0, [r7, #12]
 8011826:	4798      	blx	r3
  }
}
 8011828:	3728      	adds	r7, #40	; 0x28
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	0801ceec 	.word	0x0801ceec
 8011834:	0801d030 	.word	0x0801d030
 8011838:	0801cf30 	.word	0x0801cf30
 801183c:	0801d04c 	.word	0x0801d04c
 8011840:	200070e0 	.word	0x200070e0
 8011844:	200070d4 	.word	0x200070d4
 8011848:	200070dc 	.word	0x200070dc
 801184c:	200070e4 	.word	0x200070e4

08011850 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011858:	2101      	movs	r1, #1
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f7ff ff3a 	bl	80116d4 <tcp_abandon>
}
 8011860:	bf00      	nop
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b084      	sub	sp, #16
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d106      	bne.n	8011884 <tcp_update_rcv_ann_wnd+0x1c>
 8011876:	4b25      	ldr	r3, [pc, #148]	; (801190c <tcp_update_rcv_ann_wnd+0xa4>)
 8011878:	f240 32a6 	movw	r2, #934	; 0x3a6
 801187c:	4924      	ldr	r1, [pc, #144]	; (8011910 <tcp_update_rcv_ann_wnd+0xa8>)
 801187e:	4825      	ldr	r0, [pc, #148]	; (8011914 <tcp_update_rcv_ann_wnd+0xac>)
 8011880:	f008 f936 	bl	8019af0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011888:	687a      	ldr	r2, [r7, #4]
 801188a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801188c:	4413      	add	r3, r2
 801188e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011898:	f640 3168 	movw	r1, #2920	; 0xb68
 801189c:	428a      	cmp	r2, r1
 801189e:	bf28      	it	cs
 80118a0:	460a      	movcs	r2, r1
 80118a2:	b292      	uxth	r2, r2
 80118a4:	4413      	add	r3, r2
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	1ad3      	subs	r3, r2, r3
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	db08      	blt.n	80118c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	1ad3      	subs	r3, r2, r3
 80118be:	e020      	b.n	8011902 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c8:	1ad3      	subs	r3, r2, r3
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	dd03      	ble.n	80118d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80118d4:	e014      	b.n	8011900 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118de:	1ad3      	subs	r3, r2, r3
 80118e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118e8:	d306      	bcc.n	80118f8 <tcp_update_rcv_ann_wnd+0x90>
 80118ea:	4b08      	ldr	r3, [pc, #32]	; (801190c <tcp_update_rcv_ann_wnd+0xa4>)
 80118ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 80118f0:	4909      	ldr	r1, [pc, #36]	; (8011918 <tcp_update_rcv_ann_wnd+0xb0>)
 80118f2:	4808      	ldr	r0, [pc, #32]	; (8011914 <tcp_update_rcv_ann_wnd+0xac>)
 80118f4:	f008 f8fc 	bl	8019af0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011900:	2300      	movs	r3, #0
  }
}
 8011902:	4618      	mov	r0, r3
 8011904:	3710      	adds	r7, #16
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
 801190a:	bf00      	nop
 801190c:	0801ceec 	.word	0x0801ceec
 8011910:	0801d148 	.word	0x0801d148
 8011914:	0801cf30 	.word	0x0801cf30
 8011918:	0801d16c 	.word	0x0801d16c

0801191c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	460b      	mov	r3, r1
 8011926:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d107      	bne.n	801193e <tcp_recved+0x22>
 801192e:	4b20      	ldr	r3, [pc, #128]	; (80119b0 <tcp_recved+0x94>)
 8011930:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011934:	491f      	ldr	r1, [pc, #124]	; (80119b4 <tcp_recved+0x98>)
 8011936:	4820      	ldr	r0, [pc, #128]	; (80119b8 <tcp_recved+0x9c>)
 8011938:	f008 f8da 	bl	8019af0 <iprintf>
 801193c:	e034      	b.n	80119a8 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	7d1b      	ldrb	r3, [r3, #20]
 8011942:	2b01      	cmp	r3, #1
 8011944:	d106      	bne.n	8011954 <tcp_recved+0x38>
 8011946:	4b1a      	ldr	r3, [pc, #104]	; (80119b0 <tcp_recved+0x94>)
 8011948:	f240 32d2 	movw	r2, #978	; 0x3d2
 801194c:	491b      	ldr	r1, [pc, #108]	; (80119bc <tcp_recved+0xa0>)
 801194e:	481a      	ldr	r0, [pc, #104]	; (80119b8 <tcp_recved+0x9c>)
 8011950:	f008 f8ce 	bl	8019af0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011958:	887b      	ldrh	r3, [r7, #2]
 801195a:	4413      	add	r3, r2
 801195c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801195e:	89fb      	ldrh	r3, [r7, #14]
 8011960:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011964:	4293      	cmp	r3, r2
 8011966:	d804      	bhi.n	8011972 <tcp_recved+0x56>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801196c:	89fa      	ldrh	r2, [r7, #14]
 801196e:	429a      	cmp	r2, r3
 8011970:	d204      	bcs.n	801197c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011978:	851a      	strh	r2, [r3, #40]	; 0x28
 801197a:	e002      	b.n	8011982 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	89fa      	ldrh	r2, [r7, #14]
 8011980:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f7ff ff70 	bl	8011868 <tcp_update_rcv_ann_wnd>
 8011988:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011990:	4293      	cmp	r3, r2
 8011992:	d909      	bls.n	80119a8 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	8b5b      	ldrh	r3, [r3, #26]
 8011998:	f043 0302 	orr.w	r3, r3, #2
 801199c:	b29a      	uxth	r2, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f003 fe44 	bl	8015630 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80119a8:	3710      	adds	r7, #16
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	0801ceec 	.word	0x0801ceec
 80119b4:	0801d188 	.word	0x0801d188
 80119b8:	0801cf30 	.word	0x0801cf30
 80119bc:	0801d1a0 	.word	0x0801d1a0

080119c0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80119c0:	b5b0      	push	{r4, r5, r7, lr}
 80119c2:	b090      	sub	sp, #64	; 0x40
 80119c4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80119c6:	2300      	movs	r3, #0
 80119c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80119cc:	4b94      	ldr	r3, [pc, #592]	; (8011c20 <tcp_slowtmr+0x260>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	3301      	adds	r3, #1
 80119d2:	4a93      	ldr	r2, [pc, #588]	; (8011c20 <tcp_slowtmr+0x260>)
 80119d4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80119d6:	4b93      	ldr	r3, [pc, #588]	; (8011c24 <tcp_slowtmr+0x264>)
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	3301      	adds	r3, #1
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	4b91      	ldr	r3, [pc, #580]	; (8011c24 <tcp_slowtmr+0x264>)
 80119e0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80119e2:	2300      	movs	r3, #0
 80119e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80119e6:	4b90      	ldr	r3, [pc, #576]	; (8011c28 <tcp_slowtmr+0x268>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80119ec:	e29d      	b.n	8011f2a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80119ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f0:	7d1b      	ldrb	r3, [r3, #20]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d106      	bne.n	8011a04 <tcp_slowtmr+0x44>
 80119f6:	4b8d      	ldr	r3, [pc, #564]	; (8011c2c <tcp_slowtmr+0x26c>)
 80119f8:	f240 42be 	movw	r2, #1214	; 0x4be
 80119fc:	498c      	ldr	r1, [pc, #560]	; (8011c30 <tcp_slowtmr+0x270>)
 80119fe:	488d      	ldr	r0, [pc, #564]	; (8011c34 <tcp_slowtmr+0x274>)
 8011a00:	f008 f876 	bl	8019af0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a06:	7d1b      	ldrb	r3, [r3, #20]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d106      	bne.n	8011a1a <tcp_slowtmr+0x5a>
 8011a0c:	4b87      	ldr	r3, [pc, #540]	; (8011c2c <tcp_slowtmr+0x26c>)
 8011a0e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011a12:	4989      	ldr	r1, [pc, #548]	; (8011c38 <tcp_slowtmr+0x278>)
 8011a14:	4887      	ldr	r0, [pc, #540]	; (8011c34 <tcp_slowtmr+0x274>)
 8011a16:	f008 f86b 	bl	8019af0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1c:	7d1b      	ldrb	r3, [r3, #20]
 8011a1e:	2b0a      	cmp	r3, #10
 8011a20:	d106      	bne.n	8011a30 <tcp_slowtmr+0x70>
 8011a22:	4b82      	ldr	r3, [pc, #520]	; (8011c2c <tcp_slowtmr+0x26c>)
 8011a24:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011a28:	4984      	ldr	r1, [pc, #528]	; (8011c3c <tcp_slowtmr+0x27c>)
 8011a2a:	4882      	ldr	r0, [pc, #520]	; (8011c34 <tcp_slowtmr+0x274>)
 8011a2c:	f008 f860 	bl	8019af0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a32:	7f9a      	ldrb	r2, [r3, #30]
 8011a34:	4b7b      	ldr	r3, [pc, #492]	; (8011c24 <tcp_slowtmr+0x264>)
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d105      	bne.n	8011a48 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a42:	68db      	ldr	r3, [r3, #12]
 8011a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011a46:	e270      	b.n	8011f2a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011a48:	4b76      	ldr	r3, [pc, #472]	; (8011c24 <tcp_slowtmr+0x264>)
 8011a4a:	781a      	ldrb	r2, [r3, #0]
 8011a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011a50:	2300      	movs	r3, #0
 8011a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011a56:	2300      	movs	r3, #0
 8011a58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5e:	7d1b      	ldrb	r3, [r3, #20]
 8011a60:	2b02      	cmp	r3, #2
 8011a62:	d10a      	bne.n	8011a7a <tcp_slowtmr+0xba>
 8011a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a6a:	2b05      	cmp	r3, #5
 8011a6c:	d905      	bls.n	8011a7a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a72:	3301      	adds	r3, #1
 8011a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a78:	e11e      	b.n	8011cb8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a80:	2b0b      	cmp	r3, #11
 8011a82:	d905      	bls.n	8011a90 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a88:	3301      	adds	r3, #1
 8011a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a8e:	e113      	b.n	8011cb8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d075      	beq.n	8011b86 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d006      	beq.n	8011ab0 <tcp_slowtmr+0xf0>
 8011aa2:	4b62      	ldr	r3, [pc, #392]	; (8011c2c <tcp_slowtmr+0x26c>)
 8011aa4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011aa8:	4965      	ldr	r1, [pc, #404]	; (8011c40 <tcp_slowtmr+0x280>)
 8011aaa:	4862      	ldr	r0, [pc, #392]	; (8011c34 <tcp_slowtmr+0x274>)
 8011aac:	f008 f820 	bl	8019af0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d106      	bne.n	8011ac6 <tcp_slowtmr+0x106>
 8011ab8:	4b5c      	ldr	r3, [pc, #368]	; (8011c2c <tcp_slowtmr+0x26c>)
 8011aba:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011abe:	4961      	ldr	r1, [pc, #388]	; (8011c44 <tcp_slowtmr+0x284>)
 8011ac0:	485c      	ldr	r0, [pc, #368]	; (8011c34 <tcp_slowtmr+0x274>)
 8011ac2:	f008 f815 	bl	8019af0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011acc:	2b0b      	cmp	r3, #11
 8011ace:	d905      	bls.n	8011adc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ada:	e0ed      	b.n	8011cb8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ade:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011ae2:	3b01      	subs	r3, #1
 8011ae4:	4a58      	ldr	r2, [pc, #352]	; (8011c48 <tcp_slowtmr+0x288>)
 8011ae6:	5cd3      	ldrb	r3, [r2, r3]
 8011ae8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011af0:	7c7a      	ldrb	r2, [r7, #17]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d907      	bls.n	8011b06 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011afc:	3301      	adds	r3, #1
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011b0c:	7c7a      	ldrb	r2, [r7, #17]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	f200 80d2 	bhi.w	8011cb8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011b14:	2301      	movs	r3, #1
 8011b16:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d108      	bne.n	8011b34 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b24:	f004 fc2c 	bl	8016380 <tcp_zero_window_probe>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d014      	beq.n	8011b58 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011b2e:	2300      	movs	r3, #0
 8011b30:	623b      	str	r3, [r7, #32]
 8011b32:	e011      	b.n	8011b58 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b3e:	f003 faf1 	bl	8015124 <tcp_split_unsent_seg>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d107      	bne.n	8011b58 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b4a:	f003 fd71 	bl	8015630 <tcp_output>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d101      	bne.n	8011b58 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011b54:	2300      	movs	r3, #0
 8011b56:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011b58:	6a3b      	ldr	r3, [r7, #32]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	f000 80ac 	beq.w	8011cb8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b62:	2200      	movs	r2, #0
 8011b64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b6e:	2b06      	cmp	r3, #6
 8011b70:	f200 80a2 	bhi.w	8011cb8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b7a:	3301      	adds	r3, #1
 8011b7c:	b2da      	uxtb	r2, r3
 8011b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011b84:	e098      	b.n	8011cb8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	db0f      	blt.n	8011bb0 <tcp_slowtmr+0x1f0>
 8011b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011b96:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	d008      	beq.n	8011bb0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	b21a      	sxth	r2, r3
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	db7b      	blt.n	8011cb8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011bc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bc2:	f004 f829 	bl	8015c18 <tcp_rexmit_rto_prepare>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d007      	beq.n	8011bdc <tcp_slowtmr+0x21c>
 8011bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d171      	bne.n	8011cb8 <tcp_slowtmr+0x2f8>
 8011bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d06d      	beq.n	8011cb8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bde:	7d1b      	ldrb	r3, [r3, #20]
 8011be0:	2b02      	cmp	r3, #2
 8011be2:	d03a      	beq.n	8011c5a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011bea:	2b0c      	cmp	r3, #12
 8011bec:	bf28      	it	cs
 8011bee:	230c      	movcs	r3, #12
 8011bf0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011bf8:	10db      	asrs	r3, r3, #3
 8011bfa:	b21b      	sxth	r3, r3
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c00:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011c04:	4413      	add	r3, r2
 8011c06:	7efa      	ldrb	r2, [r7, #27]
 8011c08:	4910      	ldr	r1, [pc, #64]	; (8011c4c <tcp_slowtmr+0x28c>)
 8011c0a:	5c8a      	ldrb	r2, [r1, r2]
 8011c0c:	4093      	lsls	r3, r2
 8011c0e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011c16:	4293      	cmp	r3, r2
 8011c18:	dc1a      	bgt.n	8011c50 <tcp_slowtmr+0x290>
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	b21a      	sxth	r2, r3
 8011c1e:	e019      	b.n	8011c54 <tcp_slowtmr+0x294>
 8011c20:	200070d0 	.word	0x200070d0
 8011c24:	200070e6 	.word	0x200070e6
 8011c28:	200070dc 	.word	0x200070dc
 8011c2c:	0801ceec 	.word	0x0801ceec
 8011c30:	0801d230 	.word	0x0801d230
 8011c34:	0801cf30 	.word	0x0801cf30
 8011c38:	0801d25c 	.word	0x0801d25c
 8011c3c:	0801d288 	.word	0x0801d288
 8011c40:	0801d2b8 	.word	0x0801d2b8
 8011c44:	0801d2ec 	.word	0x0801d2ec
 8011c48:	0801eee4 	.word	0x0801eee4
 8011c4c:	0801eed4 	.word	0x0801eed4
 8011c50:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011c6c:	4293      	cmp	r3, r2
 8011c6e:	bf28      	it	cs
 8011c70:	4613      	movcs	r3, r2
 8011c72:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011c74:	8a7b      	ldrh	r3, [r7, #18]
 8011c76:	085b      	lsrs	r3, r3, #1
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c8a:	005b      	lsls	r3, r3, #1
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d206      	bcs.n	8011ca0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c96:	005b      	lsls	r3, r3, #1
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cac:	2200      	movs	r2, #0
 8011cae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cb4:	f004 f820 	bl	8015cf8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cba:	7d1b      	ldrb	r3, [r3, #20]
 8011cbc:	2b06      	cmp	r3, #6
 8011cbe:	d111      	bne.n	8011ce4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc2:	8b5b      	ldrh	r3, [r3, #26]
 8011cc4:	f003 0310 	and.w	r3, r3, #16
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d00b      	beq.n	8011ce4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ccc:	4b9c      	ldr	r3, [pc, #624]	; (8011f40 <tcp_slowtmr+0x580>)
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd2:	6a1b      	ldr	r3, [r3, #32]
 8011cd4:	1ad3      	subs	r3, r2, r3
 8011cd6:	2b28      	cmp	r3, #40	; 0x28
 8011cd8:	d904      	bls.n	8011ce4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011cda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cde:	3301      	adds	r3, #1
 8011ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce6:	7a5b      	ldrb	r3, [r3, #9]
 8011ce8:	f003 0308 	and.w	r3, r3, #8
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d04a      	beq.n	8011d86 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011cf4:	2b04      	cmp	r3, #4
 8011cf6:	d003      	beq.n	8011d00 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011cfc:	2b07      	cmp	r3, #7
 8011cfe:	d142      	bne.n	8011d86 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d00:	4b8f      	ldr	r3, [pc, #572]	; (8011f40 <tcp_slowtmr+0x580>)
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d06:	6a1b      	ldr	r3, [r3, #32]
 8011d08:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011d10:	4b8c      	ldr	r3, [pc, #560]	; (8011f44 <tcp_slowtmr+0x584>)
 8011d12:	440b      	add	r3, r1
 8011d14:	498c      	ldr	r1, [pc, #560]	; (8011f48 <tcp_slowtmr+0x588>)
 8011d16:	fba1 1303 	umull	r1, r3, r1, r3
 8011d1a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d90a      	bls.n	8011d36 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d24:	3301      	adds	r3, #1
 8011d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011d2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d2e:	3301      	adds	r3, #1
 8011d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011d34:	e027      	b.n	8011d86 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d36:	4b82      	ldr	r3, [pc, #520]	; (8011f40 <tcp_slowtmr+0x580>)
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3c:	6a1b      	ldr	r3, [r3, #32]
 8011d3e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d42:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d48:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	4b7f      	ldr	r3, [pc, #508]	; (8011f4c <tcp_slowtmr+0x58c>)
 8011d50:	fb00 f303 	mul.w	r3, r0, r3
 8011d54:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011d56:	497c      	ldr	r1, [pc, #496]	; (8011f48 <tcp_slowtmr+0x588>)
 8011d58:	fba1 1303 	umull	r1, r3, r1, r3
 8011d5c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d911      	bls.n	8011d86 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d64:	f004 facc 	bl	8016300 <tcp_keepalive>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011d6e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d107      	bne.n	8011d86 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d78:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	b2da      	uxtb	r2, r3
 8011d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d82:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d011      	beq.n	8011db2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011d8e:	4b6c      	ldr	r3, [pc, #432]	; (8011f40 <tcp_slowtmr+0x580>)
 8011d90:	681a      	ldr	r2, [r3, #0]
 8011d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d94:	6a1b      	ldr	r3, [r3, #32]
 8011d96:	1ad2      	subs	r2, r2, r3
 8011d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011d9e:	4619      	mov	r1, r3
 8011da0:	460b      	mov	r3, r1
 8011da2:	005b      	lsls	r3, r3, #1
 8011da4:	440b      	add	r3, r1
 8011da6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d302      	bcc.n	8011db2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dae:	f000 fddf 	bl	8012970 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db4:	7d1b      	ldrb	r3, [r3, #20]
 8011db6:	2b03      	cmp	r3, #3
 8011db8:	d10b      	bne.n	8011dd2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011dba:	4b61      	ldr	r3, [pc, #388]	; (8011f40 <tcp_slowtmr+0x580>)
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc0:	6a1b      	ldr	r3, [r3, #32]
 8011dc2:	1ad3      	subs	r3, r2, r3
 8011dc4:	2b28      	cmp	r3, #40	; 0x28
 8011dc6:	d904      	bls.n	8011dd2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dcc:	3301      	adds	r3, #1
 8011dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd4:	7d1b      	ldrb	r3, [r3, #20]
 8011dd6:	2b09      	cmp	r3, #9
 8011dd8:	d10b      	bne.n	8011df2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011dda:	4b59      	ldr	r3, [pc, #356]	; (8011f40 <tcp_slowtmr+0x580>)
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de0:	6a1b      	ldr	r3, [r3, #32]
 8011de2:	1ad3      	subs	r3, r2, r3
 8011de4:	2bf0      	cmp	r3, #240	; 0xf0
 8011de6:	d904      	bls.n	8011df2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dec:	3301      	adds	r3, #1
 8011dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d060      	beq.n	8011ebc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e00:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e04:	f000 fc00 	bl	8012608 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d010      	beq.n	8011e30 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011e0e:	4b50      	ldr	r3, [pc, #320]	; (8011f50 <tcp_slowtmr+0x590>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d106      	bne.n	8011e26 <tcp_slowtmr+0x466>
 8011e18:	4b4e      	ldr	r3, [pc, #312]	; (8011f54 <tcp_slowtmr+0x594>)
 8011e1a:	f240 526d 	movw	r2, #1389	; 0x56d
 8011e1e:	494e      	ldr	r1, [pc, #312]	; (8011f58 <tcp_slowtmr+0x598>)
 8011e20:	484e      	ldr	r0, [pc, #312]	; (8011f5c <tcp_slowtmr+0x59c>)
 8011e22:	f007 fe65 	bl	8019af0 <iprintf>
        prev->next = pcb->next;
 8011e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e28:	68da      	ldr	r2, [r3, #12]
 8011e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e2c:	60da      	str	r2, [r3, #12]
 8011e2e:	e00f      	b.n	8011e50 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011e30:	4b47      	ldr	r3, [pc, #284]	; (8011f50 <tcp_slowtmr+0x590>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e36:	429a      	cmp	r2, r3
 8011e38:	d006      	beq.n	8011e48 <tcp_slowtmr+0x488>
 8011e3a:	4b46      	ldr	r3, [pc, #280]	; (8011f54 <tcp_slowtmr+0x594>)
 8011e3c:	f240 5271 	movw	r2, #1393	; 0x571
 8011e40:	4947      	ldr	r1, [pc, #284]	; (8011f60 <tcp_slowtmr+0x5a0>)
 8011e42:	4846      	ldr	r0, [pc, #280]	; (8011f5c <tcp_slowtmr+0x59c>)
 8011e44:	f007 fe54 	bl	8019af0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	4a40      	ldr	r2, [pc, #256]	; (8011f50 <tcp_slowtmr+0x590>)
 8011e4e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011e50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d013      	beq.n	8011e80 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011e60:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e64:	3304      	adds	r3, #4
 8011e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e68:	8ad2      	ldrh	r2, [r2, #22]
 8011e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e6c:	8b09      	ldrh	r1, [r1, #24]
 8011e6e:	9102      	str	r1, [sp, #8]
 8011e70:	9201      	str	r2, [sp, #4]
 8011e72:	9300      	str	r3, [sp, #0]
 8011e74:	462b      	mov	r3, r5
 8011e76:	4622      	mov	r2, r4
 8011e78:	4601      	mov	r1, r0
 8011e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e7c:	f004 f98c 	bl	8016198 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e82:	691b      	ldr	r3, [r3, #16]
 8011e84:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e88:	7d1b      	ldrb	r3, [r3, #20]
 8011e8a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e8e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011e96:	6838      	ldr	r0, [r7, #0]
 8011e98:	f7ff f9f2 	bl	8011280 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011e9c:	4b31      	ldr	r3, [pc, #196]	; (8011f64 <tcp_slowtmr+0x5a4>)
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <tcp_slowtmr+0x4f2>
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f06f 010c 	mvn.w	r1, #12
 8011eae:	68b8      	ldr	r0, [r7, #8]
 8011eb0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011eb2:	4b2c      	ldr	r3, [pc, #176]	; (8011f64 <tcp_slowtmr+0x5a4>)
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d037      	beq.n	8011f2a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011eba:	e592      	b.n	80119e2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec8:	7f1b      	ldrb	r3, [r3, #28]
 8011eca:	3301      	adds	r3, #1
 8011ecc:	b2da      	uxtb	r2, r3
 8011ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed4:	7f1a      	ldrb	r2, [r3, #28]
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	7f5b      	ldrb	r3, [r3, #29]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d325      	bcc.n	8011f2a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011ee4:	4b1f      	ldr	r3, [pc, #124]	; (8011f64 <tcp_slowtmr+0x5a4>)
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d00b      	beq.n	8011f0c <tcp_slowtmr+0x54c>
 8011ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011efc:	6912      	ldr	r2, [r2, #16]
 8011efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f00:	4610      	mov	r0, r2
 8011f02:	4798      	blx	r3
 8011f04:	4603      	mov	r3, r0
 8011f06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011f0a:	e002      	b.n	8011f12 <tcp_slowtmr+0x552>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011f12:	4b14      	ldr	r3, [pc, #80]	; (8011f64 <tcp_slowtmr+0x5a4>)
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d000      	beq.n	8011f1c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011f1a:	e562      	b.n	80119e2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011f1c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d102      	bne.n	8011f2a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f26:	f003 fb83 	bl	8015630 <tcp_output>
  while (pcb != NULL) {
 8011f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f47f ad5e 	bne.w	80119ee <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011f32:	2300      	movs	r3, #0
 8011f34:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011f36:	4b0c      	ldr	r3, [pc, #48]	; (8011f68 <tcp_slowtmr+0x5a8>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011f3c:	e069      	b.n	8012012 <tcp_slowtmr+0x652>
 8011f3e:	bf00      	nop
 8011f40:	200070d0 	.word	0x200070d0
 8011f44:	000a4cb8 	.word	0x000a4cb8
 8011f48:	10624dd3 	.word	0x10624dd3
 8011f4c:	000124f8 	.word	0x000124f8
 8011f50:	200070dc 	.word	0x200070dc
 8011f54:	0801ceec 	.word	0x0801ceec
 8011f58:	0801d324 	.word	0x0801d324
 8011f5c:	0801cf30 	.word	0x0801cf30
 8011f60:	0801d350 	.word	0x0801d350
 8011f64:	200070e4 	.word	0x200070e4
 8011f68:	200070e0 	.word	0x200070e0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6e:	7d1b      	ldrb	r3, [r3, #20]
 8011f70:	2b0a      	cmp	r3, #10
 8011f72:	d006      	beq.n	8011f82 <tcp_slowtmr+0x5c2>
 8011f74:	4b2b      	ldr	r3, [pc, #172]	; (8012024 <tcp_slowtmr+0x664>)
 8011f76:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011f7a:	492b      	ldr	r1, [pc, #172]	; (8012028 <tcp_slowtmr+0x668>)
 8011f7c:	482b      	ldr	r0, [pc, #172]	; (801202c <tcp_slowtmr+0x66c>)
 8011f7e:	f007 fdb7 	bl	8019af0 <iprintf>
    pcb_remove = 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011f88:	4b29      	ldr	r3, [pc, #164]	; (8012030 <tcp_slowtmr+0x670>)
 8011f8a:	681a      	ldr	r2, [r3, #0]
 8011f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8e:	6a1b      	ldr	r3, [r3, #32]
 8011f90:	1ad3      	subs	r3, r2, r3
 8011f92:	2bf0      	cmp	r3, #240	; 0xf0
 8011f94:	d904      	bls.n	8011fa0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d02f      	beq.n	8012008 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011fa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011faa:	f000 fb2d 	bl	8012608 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d010      	beq.n	8011fd6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011fb4:	4b1f      	ldr	r3, [pc, #124]	; (8012034 <tcp_slowtmr+0x674>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d106      	bne.n	8011fcc <tcp_slowtmr+0x60c>
 8011fbe:	4b19      	ldr	r3, [pc, #100]	; (8012024 <tcp_slowtmr+0x664>)
 8011fc0:	f240 52af 	movw	r2, #1455	; 0x5af
 8011fc4:	491c      	ldr	r1, [pc, #112]	; (8012038 <tcp_slowtmr+0x678>)
 8011fc6:	4819      	ldr	r0, [pc, #100]	; (801202c <tcp_slowtmr+0x66c>)
 8011fc8:	f007 fd92 	bl	8019af0 <iprintf>
        prev->next = pcb->next;
 8011fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fce:	68da      	ldr	r2, [r3, #12]
 8011fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd2:	60da      	str	r2, [r3, #12]
 8011fd4:	e00f      	b.n	8011ff6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011fd6:	4b17      	ldr	r3, [pc, #92]	; (8012034 <tcp_slowtmr+0x674>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d006      	beq.n	8011fee <tcp_slowtmr+0x62e>
 8011fe0:	4b10      	ldr	r3, [pc, #64]	; (8012024 <tcp_slowtmr+0x664>)
 8011fe2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011fe6:	4915      	ldr	r1, [pc, #84]	; (801203c <tcp_slowtmr+0x67c>)
 8011fe8:	4810      	ldr	r0, [pc, #64]	; (801202c <tcp_slowtmr+0x66c>)
 8011fea:	f007 fd81 	bl	8019af0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	4a10      	ldr	r2, [pc, #64]	; (8012034 <tcp_slowtmr+0x674>)
 8011ff4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012000:	69f8      	ldr	r0, [r7, #28]
 8012002:	f7ff f93d 	bl	8011280 <tcp_free>
 8012006:	e004      	b.n	8012012 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200e:	68db      	ldr	r3, [r3, #12]
 8012010:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1a9      	bne.n	8011f6c <tcp_slowtmr+0x5ac>
    }
  }
}
 8012018:	bf00      	nop
 801201a:	bf00      	nop
 801201c:	3730      	adds	r7, #48	; 0x30
 801201e:	46bd      	mov	sp, r7
 8012020:	bdb0      	pop	{r4, r5, r7, pc}
 8012022:	bf00      	nop
 8012024:	0801ceec 	.word	0x0801ceec
 8012028:	0801d37c 	.word	0x0801d37c
 801202c:	0801cf30 	.word	0x0801cf30
 8012030:	200070d0 	.word	0x200070d0
 8012034:	200070e0 	.word	0x200070e0
 8012038:	0801d3ac 	.word	0x0801d3ac
 801203c:	0801d3d4 	.word	0x0801d3d4

08012040 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012046:	4b2d      	ldr	r3, [pc, #180]	; (80120fc <tcp_fasttmr+0xbc>)
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	3301      	adds	r3, #1
 801204c:	b2da      	uxtb	r2, r3
 801204e:	4b2b      	ldr	r3, [pc, #172]	; (80120fc <tcp_fasttmr+0xbc>)
 8012050:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012052:	4b2b      	ldr	r3, [pc, #172]	; (8012100 <tcp_fasttmr+0xc0>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012058:	e048      	b.n	80120ec <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	7f9a      	ldrb	r2, [r3, #30]
 801205e:	4b27      	ldr	r3, [pc, #156]	; (80120fc <tcp_fasttmr+0xbc>)
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	429a      	cmp	r2, r3
 8012064:	d03f      	beq.n	80120e6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012066:	4b25      	ldr	r3, [pc, #148]	; (80120fc <tcp_fasttmr+0xbc>)
 8012068:	781a      	ldrb	r2, [r3, #0]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	8b5b      	ldrh	r3, [r3, #26]
 8012072:	f003 0301 	and.w	r3, r3, #1
 8012076:	2b00      	cmp	r3, #0
 8012078:	d010      	beq.n	801209c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8b5b      	ldrh	r3, [r3, #26]
 801207e:	f043 0302 	orr.w	r3, r3, #2
 8012082:	b29a      	uxth	r2, r3
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f003 fad1 	bl	8015630 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	8b5b      	ldrh	r3, [r3, #26]
 8012092:	f023 0303 	bic.w	r3, r3, #3
 8012096:	b29a      	uxth	r2, r3
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	8b5b      	ldrh	r3, [r3, #26]
 80120a0:	f003 0308 	and.w	r3, r3, #8
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d009      	beq.n	80120bc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	8b5b      	ldrh	r3, [r3, #26]
 80120ac:	f023 0308 	bic.w	r3, r3, #8
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7ff fa76 	bl	80115a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d00a      	beq.n	80120e0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80120ca:	4b0e      	ldr	r3, [pc, #56]	; (8012104 <tcp_fasttmr+0xc4>)
 80120cc:	2200      	movs	r2, #0
 80120ce:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f000 f819 	bl	8012108 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80120d6:	4b0b      	ldr	r3, [pc, #44]	; (8012104 <tcp_fasttmr+0xc4>)
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d000      	beq.n	80120e0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80120de:	e7b8      	b.n	8012052 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	607b      	str	r3, [r7, #4]
 80120e4:	e002      	b.n	80120ec <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1b3      	bne.n	801205a <tcp_fasttmr+0x1a>
    }
  }
}
 80120f2:	bf00      	nop
 80120f4:	bf00      	nop
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	200070e6 	.word	0x200070e6
 8012100:	200070dc 	.word	0x200070dc
 8012104:	200070e4 	.word	0x200070e4

08012108 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012108:	b590      	push	{r4, r7, lr}
 801210a:	b085      	sub	sp, #20
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d109      	bne.n	801212a <tcp_process_refused_data+0x22>
 8012116:	4b38      	ldr	r3, [pc, #224]	; (80121f8 <tcp_process_refused_data+0xf0>)
 8012118:	f240 6209 	movw	r2, #1545	; 0x609
 801211c:	4937      	ldr	r1, [pc, #220]	; (80121fc <tcp_process_refused_data+0xf4>)
 801211e:	4838      	ldr	r0, [pc, #224]	; (8012200 <tcp_process_refused_data+0xf8>)
 8012120:	f007 fce6 	bl	8019af0 <iprintf>
 8012124:	f06f 030f 	mvn.w	r3, #15
 8012128:	e061      	b.n	80121ee <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801212e:	7b5b      	ldrb	r3, [r3, #13]
 8012130:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012136:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2200      	movs	r2, #0
 801213c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012144:	2b00      	cmp	r3, #0
 8012146:	d00b      	beq.n	8012160 <tcp_process_refused_data+0x58>
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6918      	ldr	r0, [r3, #16]
 8012152:	2300      	movs	r3, #0
 8012154:	68ba      	ldr	r2, [r7, #8]
 8012156:	6879      	ldr	r1, [r7, #4]
 8012158:	47a0      	blx	r4
 801215a:	4603      	mov	r3, r0
 801215c:	73fb      	strb	r3, [r7, #15]
 801215e:	e007      	b.n	8012170 <tcp_process_refused_data+0x68>
 8012160:	2300      	movs	r3, #0
 8012162:	68ba      	ldr	r2, [r7, #8]
 8012164:	6879      	ldr	r1, [r7, #4]
 8012166:	2000      	movs	r0, #0
 8012168:	f000 f8a6 	bl	80122b8 <tcp_recv_null>
 801216c:	4603      	mov	r3, r0
 801216e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d12b      	bne.n	80121d0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012178:	7bbb      	ldrb	r3, [r7, #14]
 801217a:	f003 0320 	and.w	r3, r3, #32
 801217e:	2b00      	cmp	r3, #0
 8012180:	d034      	beq.n	80121ec <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012186:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801218a:	4293      	cmp	r3, r2
 801218c:	d005      	beq.n	801219a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012192:	3301      	adds	r3, #1
 8012194:	b29a      	uxth	r2, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d00b      	beq.n	80121bc <tcp_process_refused_data+0xb4>
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6918      	ldr	r0, [r3, #16]
 80121ae:	2300      	movs	r3, #0
 80121b0:	2200      	movs	r2, #0
 80121b2:	6879      	ldr	r1, [r7, #4]
 80121b4:	47a0      	blx	r4
 80121b6:	4603      	mov	r3, r0
 80121b8:	73fb      	strb	r3, [r7, #15]
 80121ba:	e001      	b.n	80121c0 <tcp_process_refused_data+0xb8>
 80121bc:	2300      	movs	r3, #0
 80121be:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80121c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121c4:	f113 0f0d 	cmn.w	r3, #13
 80121c8:	d110      	bne.n	80121ec <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80121ca:	f06f 030c 	mvn.w	r3, #12
 80121ce:	e00e      	b.n	80121ee <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80121d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121d4:	f113 0f0d 	cmn.w	r3, #13
 80121d8:	d102      	bne.n	80121e0 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80121da:	f06f 030c 	mvn.w	r3, #12
 80121de:	e006      	b.n	80121ee <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	68ba      	ldr	r2, [r7, #8]
 80121e4:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80121e6:	f06f 0304 	mvn.w	r3, #4
 80121ea:	e000      	b.n	80121ee <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3714      	adds	r7, #20
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd90      	pop	{r4, r7, pc}
 80121f6:	bf00      	nop
 80121f8:	0801ceec 	.word	0x0801ceec
 80121fc:	0801d3fc 	.word	0x0801d3fc
 8012200:	0801cf30 	.word	0x0801cf30

08012204 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801220c:	e007      	b.n	801221e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f000 f80a 	bl	801222e <tcp_seg_free>
    seg = next;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d1f4      	bne.n	801220e <tcp_segs_free+0xa>
  }
}
 8012224:	bf00      	nop
 8012226:	bf00      	nop
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b082      	sub	sp, #8
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d00c      	beq.n	8012256 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d004      	beq.n	801224e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	4618      	mov	r0, r3
 801224a:	f7fe fd79 	bl	8010d40 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801224e:	6879      	ldr	r1, [r7, #4]
 8012250:	2003      	movs	r0, #3
 8012252:	f7fd ff1f 	bl	8010094 <memp_free>
  }
}
 8012256:	bf00      	nop
 8012258:	3708      	adds	r7, #8
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
	...

08012260 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b084      	sub	sp, #16
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d106      	bne.n	801227c <tcp_seg_copy+0x1c>
 801226e:	4b0f      	ldr	r3, [pc, #60]	; (80122ac <tcp_seg_copy+0x4c>)
 8012270:	f240 6282 	movw	r2, #1666	; 0x682
 8012274:	490e      	ldr	r1, [pc, #56]	; (80122b0 <tcp_seg_copy+0x50>)
 8012276:	480f      	ldr	r0, [pc, #60]	; (80122b4 <tcp_seg_copy+0x54>)
 8012278:	f007 fc3a 	bl	8019af0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801227c:	2003      	movs	r0, #3
 801227e:	f7fd fe99 	bl	800ffb4 <memp_malloc>
 8012282:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d101      	bne.n	801228e <tcp_seg_copy+0x2e>
    return NULL;
 801228a:	2300      	movs	r3, #0
 801228c:	e00a      	b.n	80122a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801228e:	2210      	movs	r2, #16
 8012290:	6879      	ldr	r1, [r7, #4]
 8012292:	68f8      	ldr	r0, [r7, #12]
 8012294:	f007 fdfb 	bl	8019e8e <memcpy>
  pbuf_ref(cseg->p);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	4618      	mov	r0, r3
 801229e:	f7fe fdef 	bl	8010e80 <pbuf_ref>
  return cseg;
 80122a2:	68fb      	ldr	r3, [r7, #12]
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3710      	adds	r7, #16
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	0801ceec 	.word	0x0801ceec
 80122b0:	0801d440 	.word	0x0801d440
 80122b4:	0801cf30 	.word	0x0801cf30

080122b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b084      	sub	sp, #16
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	607a      	str	r2, [r7, #4]
 80122c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d109      	bne.n	80122e0 <tcp_recv_null+0x28>
 80122cc:	4b12      	ldr	r3, [pc, #72]	; (8012318 <tcp_recv_null+0x60>)
 80122ce:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80122d2:	4912      	ldr	r1, [pc, #72]	; (801231c <tcp_recv_null+0x64>)
 80122d4:	4812      	ldr	r0, [pc, #72]	; (8012320 <tcp_recv_null+0x68>)
 80122d6:	f007 fc0b 	bl	8019af0 <iprintf>
 80122da:	f06f 030f 	mvn.w	r3, #15
 80122de:	e016      	b.n	801230e <tcp_recv_null+0x56>

  if (p != NULL) {
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d009      	beq.n	80122fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	891b      	ldrh	r3, [r3, #8]
 80122ea:	4619      	mov	r1, r3
 80122ec:	68b8      	ldr	r0, [r7, #8]
 80122ee:	f7ff fb15 	bl	801191c <tcp_recved>
    pbuf_free(p);
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f7fe fd24 	bl	8010d40 <pbuf_free>
 80122f8:	e008      	b.n	801230c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80122fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d104      	bne.n	801230c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012302:	68b8      	ldr	r0, [r7, #8]
 8012304:	f7ff f9ba 	bl	801167c <tcp_close>
 8012308:	4603      	mov	r3, r0
 801230a:	e000      	b.n	801230e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	0801ceec 	.word	0x0801ceec
 801231c:	0801d45c 	.word	0x0801d45c
 8012320:	0801cf30 	.word	0x0801cf30

08012324 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b086      	sub	sp, #24
 8012328:	af00      	add	r7, sp, #0
 801232a:	4603      	mov	r3, r0
 801232c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012332:	2b00      	cmp	r3, #0
 8012334:	db01      	blt.n	801233a <tcp_kill_prio+0x16>
 8012336:	79fb      	ldrb	r3, [r7, #7]
 8012338:	e000      	b.n	801233c <tcp_kill_prio+0x18>
 801233a:	237f      	movs	r3, #127	; 0x7f
 801233c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801233e:	7afb      	ldrb	r3, [r7, #11]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d034      	beq.n	80123ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012344:	7afb      	ldrb	r3, [r7, #11]
 8012346:	3b01      	subs	r3, #1
 8012348:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801234a:	2300      	movs	r3, #0
 801234c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801234e:	2300      	movs	r3, #0
 8012350:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012352:	4b19      	ldr	r3, [pc, #100]	; (80123b8 <tcp_kill_prio+0x94>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	617b      	str	r3, [r7, #20]
 8012358:	e01f      	b.n	801239a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	7d5b      	ldrb	r3, [r3, #21]
 801235e:	7afa      	ldrb	r2, [r7, #11]
 8012360:	429a      	cmp	r2, r3
 8012362:	d80c      	bhi.n	801237e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012368:	7afa      	ldrb	r2, [r7, #11]
 801236a:	429a      	cmp	r2, r3
 801236c:	d112      	bne.n	8012394 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801236e:	4b13      	ldr	r3, [pc, #76]	; (80123bc <tcp_kill_prio+0x98>)
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	6a1b      	ldr	r3, [r3, #32]
 8012376:	1ad3      	subs	r3, r2, r3
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	429a      	cmp	r2, r3
 801237c:	d80a      	bhi.n	8012394 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801237e:	4b0f      	ldr	r3, [pc, #60]	; (80123bc <tcp_kill_prio+0x98>)
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	6a1b      	ldr	r3, [r3, #32]
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	7d5b      	ldrb	r3, [r3, #21]
 8012392:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	68db      	ldr	r3, [r3, #12]
 8012398:	617b      	str	r3, [r7, #20]
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1dc      	bne.n	801235a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d004      	beq.n	80123b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80123a6:	6938      	ldr	r0, [r7, #16]
 80123a8:	f7ff fa52 	bl	8011850 <tcp_abort>
 80123ac:	e000      	b.n	80123b0 <tcp_kill_prio+0x8c>
    return;
 80123ae:	bf00      	nop
  }
}
 80123b0:	3718      	adds	r7, #24
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	200070dc 	.word	0x200070dc
 80123bc:	200070d0 	.word	0x200070d0

080123c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b086      	sub	sp, #24
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	4603      	mov	r3, r0
 80123c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80123ca:	79fb      	ldrb	r3, [r7, #7]
 80123cc:	2b08      	cmp	r3, #8
 80123ce:	d009      	beq.n	80123e4 <tcp_kill_state+0x24>
 80123d0:	79fb      	ldrb	r3, [r7, #7]
 80123d2:	2b09      	cmp	r3, #9
 80123d4:	d006      	beq.n	80123e4 <tcp_kill_state+0x24>
 80123d6:	4b1a      	ldr	r3, [pc, #104]	; (8012440 <tcp_kill_state+0x80>)
 80123d8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80123dc:	4919      	ldr	r1, [pc, #100]	; (8012444 <tcp_kill_state+0x84>)
 80123de:	481a      	ldr	r0, [pc, #104]	; (8012448 <tcp_kill_state+0x88>)
 80123e0:	f007 fb86 	bl	8019af0 <iprintf>

  inactivity = 0;
 80123e4:	2300      	movs	r3, #0
 80123e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80123e8:	2300      	movs	r3, #0
 80123ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80123ec:	4b17      	ldr	r3, [pc, #92]	; (801244c <tcp_kill_state+0x8c>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	617b      	str	r3, [r7, #20]
 80123f2:	e017      	b.n	8012424 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	7d1b      	ldrb	r3, [r3, #20]
 80123f8:	79fa      	ldrb	r2, [r7, #7]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d10f      	bne.n	801241e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80123fe:	4b14      	ldr	r3, [pc, #80]	; (8012450 <tcp_kill_state+0x90>)
 8012400:	681a      	ldr	r2, [r3, #0]
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	6a1b      	ldr	r3, [r3, #32]
 8012406:	1ad3      	subs	r3, r2, r3
 8012408:	68fa      	ldr	r2, [r7, #12]
 801240a:	429a      	cmp	r2, r3
 801240c:	d807      	bhi.n	801241e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801240e:	4b10      	ldr	r3, [pc, #64]	; (8012450 <tcp_kill_state+0x90>)
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	6a1b      	ldr	r3, [r3, #32]
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	617b      	str	r3, [r7, #20]
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d1e4      	bne.n	80123f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d003      	beq.n	8012438 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012430:	2100      	movs	r1, #0
 8012432:	6938      	ldr	r0, [r7, #16]
 8012434:	f7ff f94e 	bl	80116d4 <tcp_abandon>
  }
}
 8012438:	bf00      	nop
 801243a:	3718      	adds	r7, #24
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	0801ceec 	.word	0x0801ceec
 8012444:	0801d478 	.word	0x0801d478
 8012448:	0801cf30 	.word	0x0801cf30
 801244c:	200070dc 	.word	0x200070dc
 8012450:	200070d0 	.word	0x200070d0

08012454 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b084      	sub	sp, #16
 8012458:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801245a:	2300      	movs	r3, #0
 801245c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801245e:	2300      	movs	r3, #0
 8012460:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012462:	4b12      	ldr	r3, [pc, #72]	; (80124ac <tcp_kill_timewait+0x58>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	60fb      	str	r3, [r7, #12]
 8012468:	e012      	b.n	8012490 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801246a:	4b11      	ldr	r3, [pc, #68]	; (80124b0 <tcp_kill_timewait+0x5c>)
 801246c:	681a      	ldr	r2, [r3, #0]
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	6a1b      	ldr	r3, [r3, #32]
 8012472:	1ad3      	subs	r3, r2, r3
 8012474:	687a      	ldr	r2, [r7, #4]
 8012476:	429a      	cmp	r2, r3
 8012478:	d807      	bhi.n	801248a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801247a:	4b0d      	ldr	r3, [pc, #52]	; (80124b0 <tcp_kill_timewait+0x5c>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	6a1b      	ldr	r3, [r3, #32]
 8012482:	1ad3      	subs	r3, r2, r3
 8012484:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	68db      	ldr	r3, [r3, #12]
 801248e:	60fb      	str	r3, [r7, #12]
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d1e9      	bne.n	801246a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d002      	beq.n	80124a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801249c:	68b8      	ldr	r0, [r7, #8]
 801249e:	f7ff f9d7 	bl	8011850 <tcp_abort>
  }
}
 80124a2:	bf00      	nop
 80124a4:	3710      	adds	r7, #16
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
 80124aa:	bf00      	nop
 80124ac:	200070e0 	.word	0x200070e0
 80124b0:	200070d0 	.word	0x200070d0

080124b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80124ba:	4b10      	ldr	r3, [pc, #64]	; (80124fc <tcp_handle_closepend+0x48>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80124c0:	e014      	b.n	80124ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	8b5b      	ldrh	r3, [r3, #26]
 80124cc:	f003 0308 	and.w	r3, r3, #8
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d009      	beq.n	80124e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	8b5b      	ldrh	r3, [r3, #26]
 80124d8:	f023 0308 	bic.w	r3, r3, #8
 80124dc:	b29a      	uxth	r2, r3
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f7ff f860 	bl	80115a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d1e7      	bne.n	80124c2 <tcp_handle_closepend+0xe>
  }
}
 80124f2:	bf00      	nop
 80124f4:	bf00      	nop
 80124f6:	3708      	adds	r7, #8
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	200070dc 	.word	0x200070dc

08012500 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b084      	sub	sp, #16
 8012504:	af00      	add	r7, sp, #0
 8012506:	4603      	mov	r3, r0
 8012508:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801250a:	2001      	movs	r0, #1
 801250c:	f7fd fd52 	bl	800ffb4 <memp_malloc>
 8012510:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d126      	bne.n	8012566 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012518:	f7ff ffcc 	bl	80124b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801251c:	f7ff ff9a 	bl	8012454 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012520:	2001      	movs	r0, #1
 8012522:	f7fd fd47 	bl	800ffb4 <memp_malloc>
 8012526:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d11b      	bne.n	8012566 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801252e:	2009      	movs	r0, #9
 8012530:	f7ff ff46 	bl	80123c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012534:	2001      	movs	r0, #1
 8012536:	f7fd fd3d 	bl	800ffb4 <memp_malloc>
 801253a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d111      	bne.n	8012566 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012542:	2008      	movs	r0, #8
 8012544:	f7ff ff3c 	bl	80123c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012548:	2001      	movs	r0, #1
 801254a:	f7fd fd33 	bl	800ffb4 <memp_malloc>
 801254e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d107      	bne.n	8012566 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012556:	79fb      	ldrb	r3, [r7, #7]
 8012558:	4618      	mov	r0, r3
 801255a:	f7ff fee3 	bl	8012324 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801255e:	2001      	movs	r0, #1
 8012560:	f7fd fd28 	bl	800ffb4 <memp_malloc>
 8012564:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d03f      	beq.n	80125ec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801256c:	229c      	movs	r2, #156	; 0x9c
 801256e:	2100      	movs	r1, #0
 8012570:	68f8      	ldr	r0, [r7, #12]
 8012572:	f007 fc13 	bl	8019d9c <memset>
    pcb->prio = prio;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	79fa      	ldrb	r2, [r7, #7]
 801257a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012582:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801258c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	22ff      	movs	r2, #255	; 0xff
 801259a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	f44f 7206 	mov.w	r2, #536	; 0x218
 80125a2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	2206      	movs	r2, #6
 80125a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2206      	movs	r2, #6
 80125b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125b8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	2201      	movs	r2, #1
 80125be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80125c2:	4b0d      	ldr	r3, [pc, #52]	; (80125f8 <tcp_alloc+0xf8>)
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80125ca:	4b0c      	ldr	r3, [pc, #48]	; (80125fc <tcp_alloc+0xfc>)
 80125cc:	781a      	ldrb	r2, [r3, #0]
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80125d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	4a08      	ldr	r2, [pc, #32]	; (8012600 <tcp_alloc+0x100>)
 80125e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	4a07      	ldr	r2, [pc, #28]	; (8012604 <tcp_alloc+0x104>)
 80125e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80125ec:	68fb      	ldr	r3, [r7, #12]
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3710      	adds	r7, #16
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop
 80125f8:	200070d0 	.word	0x200070d0
 80125fc:	200070e6 	.word	0x200070e6
 8012600:	080122b9 	.word	0x080122b9
 8012604:	006ddd00 	.word	0x006ddd00

08012608 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d107      	bne.n	8012626 <tcp_pcb_purge+0x1e>
 8012616:	4b21      	ldr	r3, [pc, #132]	; (801269c <tcp_pcb_purge+0x94>)
 8012618:	f640 0251 	movw	r2, #2129	; 0x851
 801261c:	4920      	ldr	r1, [pc, #128]	; (80126a0 <tcp_pcb_purge+0x98>)
 801261e:	4821      	ldr	r0, [pc, #132]	; (80126a4 <tcp_pcb_purge+0x9c>)
 8012620:	f007 fa66 	bl	8019af0 <iprintf>
 8012624:	e037      	b.n	8012696 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	7d1b      	ldrb	r3, [r3, #20]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d033      	beq.n	8012696 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012632:	2b0a      	cmp	r3, #10
 8012634:	d02f      	beq.n	8012696 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801263a:	2b01      	cmp	r3, #1
 801263c:	d02b      	beq.n	8012696 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012642:	2b00      	cmp	r3, #0
 8012644:	d007      	beq.n	8012656 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801264a:	4618      	mov	r0, r3
 801264c:	f7fe fb78 	bl	8010d40 <pbuf_free>
      pcb->refused_data = NULL;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2200      	movs	r2, #0
 8012654:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801265a:	2b00      	cmp	r3, #0
 801265c:	d002      	beq.n	8012664 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f000 f986 	bl	8012970 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801266a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012670:	4618      	mov	r0, r3
 8012672:	f7ff fdc7 	bl	8012204 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801267a:	4618      	mov	r0, r3
 801267c:	f7ff fdc2 	bl	8012204 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2200      	movs	r2, #0
 8012684:	66da      	str	r2, [r3, #108]	; 0x6c
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2200      	movs	r2, #0
 8012692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012696:	3708      	adds	r7, #8
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	0801ceec 	.word	0x0801ceec
 80126a0:	0801d538 	.word	0x0801d538
 80126a4:	0801cf30 	.word	0x0801cf30

080126a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d106      	bne.n	80126c6 <tcp_pcb_remove+0x1e>
 80126b8:	4b3e      	ldr	r3, [pc, #248]	; (80127b4 <tcp_pcb_remove+0x10c>)
 80126ba:	f640 0283 	movw	r2, #2179	; 0x883
 80126be:	493e      	ldr	r1, [pc, #248]	; (80127b8 <tcp_pcb_remove+0x110>)
 80126c0:	483e      	ldr	r0, [pc, #248]	; (80127bc <tcp_pcb_remove+0x114>)
 80126c2:	f007 fa15 	bl	8019af0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d106      	bne.n	80126da <tcp_pcb_remove+0x32>
 80126cc:	4b39      	ldr	r3, [pc, #228]	; (80127b4 <tcp_pcb_remove+0x10c>)
 80126ce:	f640 0284 	movw	r2, #2180	; 0x884
 80126d2:	493b      	ldr	r1, [pc, #236]	; (80127c0 <tcp_pcb_remove+0x118>)
 80126d4:	4839      	ldr	r0, [pc, #228]	; (80127bc <tcp_pcb_remove+0x114>)
 80126d6:	f007 fa0b 	bl	8019af0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	683a      	ldr	r2, [r7, #0]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d105      	bne.n	80126f0 <tcp_pcb_remove+0x48>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	68da      	ldr	r2, [r3, #12]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	601a      	str	r2, [r3, #0]
 80126ee:	e013      	b.n	8012718 <tcp_pcb_remove+0x70>
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	60fb      	str	r3, [r7, #12]
 80126f6:	e00c      	b.n	8012712 <tcp_pcb_remove+0x6a>
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	683a      	ldr	r2, [r7, #0]
 80126fe:	429a      	cmp	r2, r3
 8012700:	d104      	bne.n	801270c <tcp_pcb_remove+0x64>
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	68da      	ldr	r2, [r3, #12]
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	60da      	str	r2, [r3, #12]
 801270a:	e005      	b.n	8012718 <tcp_pcb_remove+0x70>
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	68db      	ldr	r3, [r3, #12]
 8012710:	60fb      	str	r3, [r7, #12]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1ef      	bne.n	80126f8 <tcp_pcb_remove+0x50>
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	2200      	movs	r2, #0
 801271c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801271e:	6838      	ldr	r0, [r7, #0]
 8012720:	f7ff ff72 	bl	8012608 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	7d1b      	ldrb	r3, [r3, #20]
 8012728:	2b0a      	cmp	r3, #10
 801272a:	d013      	beq.n	8012754 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012730:	2b01      	cmp	r3, #1
 8012732:	d00f      	beq.n	8012754 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012734:	683b      	ldr	r3, [r7, #0]
 8012736:	8b5b      	ldrh	r3, [r3, #26]
 8012738:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801273c:	2b00      	cmp	r3, #0
 801273e:	d009      	beq.n	8012754 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	8b5b      	ldrh	r3, [r3, #26]
 8012744:	f043 0302 	orr.w	r3, r3, #2
 8012748:	b29a      	uxth	r2, r3
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801274e:	6838      	ldr	r0, [r7, #0]
 8012750:	f002 ff6e 	bl	8015630 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	7d1b      	ldrb	r3, [r3, #20]
 8012758:	2b01      	cmp	r3, #1
 801275a:	d020      	beq.n	801279e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012760:	2b00      	cmp	r3, #0
 8012762:	d006      	beq.n	8012772 <tcp_pcb_remove+0xca>
 8012764:	4b13      	ldr	r3, [pc, #76]	; (80127b4 <tcp_pcb_remove+0x10c>)
 8012766:	f640 0293 	movw	r2, #2195	; 0x893
 801276a:	4916      	ldr	r1, [pc, #88]	; (80127c4 <tcp_pcb_remove+0x11c>)
 801276c:	4813      	ldr	r0, [pc, #76]	; (80127bc <tcp_pcb_remove+0x114>)
 801276e:	f007 f9bf 	bl	8019af0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012776:	2b00      	cmp	r3, #0
 8012778:	d006      	beq.n	8012788 <tcp_pcb_remove+0xe0>
 801277a:	4b0e      	ldr	r3, [pc, #56]	; (80127b4 <tcp_pcb_remove+0x10c>)
 801277c:	f640 0294 	movw	r2, #2196	; 0x894
 8012780:	4911      	ldr	r1, [pc, #68]	; (80127c8 <tcp_pcb_remove+0x120>)
 8012782:	480e      	ldr	r0, [pc, #56]	; (80127bc <tcp_pcb_remove+0x114>)
 8012784:	f007 f9b4 	bl	8019af0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801278c:	2b00      	cmp	r3, #0
 801278e:	d006      	beq.n	801279e <tcp_pcb_remove+0xf6>
 8012790:	4b08      	ldr	r3, [pc, #32]	; (80127b4 <tcp_pcb_remove+0x10c>)
 8012792:	f640 0296 	movw	r2, #2198	; 0x896
 8012796:	490d      	ldr	r1, [pc, #52]	; (80127cc <tcp_pcb_remove+0x124>)
 8012798:	4808      	ldr	r0, [pc, #32]	; (80127bc <tcp_pcb_remove+0x114>)
 801279a:	f007 f9a9 	bl	8019af0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	2200      	movs	r2, #0
 80127a2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	2200      	movs	r2, #0
 80127a8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80127aa:	bf00      	nop
 80127ac:	3710      	adds	r7, #16
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}
 80127b2:	bf00      	nop
 80127b4:	0801ceec 	.word	0x0801ceec
 80127b8:	0801d554 	.word	0x0801d554
 80127bc:	0801cf30 	.word	0x0801cf30
 80127c0:	0801d570 	.word	0x0801d570
 80127c4:	0801d590 	.word	0x0801d590
 80127c8:	0801d5a8 	.word	0x0801d5a8
 80127cc:	0801d5c4 	.word	0x0801d5c4

080127d0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d106      	bne.n	80127ec <tcp_next_iss+0x1c>
 80127de:	4b0a      	ldr	r3, [pc, #40]	; (8012808 <tcp_next_iss+0x38>)
 80127e0:	f640 02af 	movw	r2, #2223	; 0x8af
 80127e4:	4909      	ldr	r1, [pc, #36]	; (801280c <tcp_next_iss+0x3c>)
 80127e6:	480a      	ldr	r0, [pc, #40]	; (8012810 <tcp_next_iss+0x40>)
 80127e8:	f007 f982 	bl	8019af0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80127ec:	4b09      	ldr	r3, [pc, #36]	; (8012814 <tcp_next_iss+0x44>)
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	4b09      	ldr	r3, [pc, #36]	; (8012818 <tcp_next_iss+0x48>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4413      	add	r3, r2
 80127f6:	4a07      	ldr	r2, [pc, #28]	; (8012814 <tcp_next_iss+0x44>)
 80127f8:	6013      	str	r3, [r2, #0]
  return iss;
 80127fa:	4b06      	ldr	r3, [pc, #24]	; (8012814 <tcp_next_iss+0x44>)
 80127fc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3708      	adds	r7, #8
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	0801ceec 	.word	0x0801ceec
 801280c:	0801d5dc 	.word	0x0801d5dc
 8012810:	0801cf30 	.word	0x0801cf30
 8012814:	2000005c 	.word	0x2000005c
 8012818:	200070d0 	.word	0x200070d0

0801281c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b086      	sub	sp, #24
 8012820:	af00      	add	r7, sp, #0
 8012822:	4603      	mov	r3, r0
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	607a      	str	r2, [r7, #4]
 8012828:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d106      	bne.n	801283e <tcp_eff_send_mss_netif+0x22>
 8012830:	4b14      	ldr	r3, [pc, #80]	; (8012884 <tcp_eff_send_mss_netif+0x68>)
 8012832:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012836:	4914      	ldr	r1, [pc, #80]	; (8012888 <tcp_eff_send_mss_netif+0x6c>)
 8012838:	4814      	ldr	r0, [pc, #80]	; (801288c <tcp_eff_send_mss_netif+0x70>)
 801283a:	f007 f959 	bl	8019af0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d101      	bne.n	8012848 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012844:	89fb      	ldrh	r3, [r7, #14]
 8012846:	e019      	b.n	801287c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801284c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801284e:	8afb      	ldrh	r3, [r7, #22]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d012      	beq.n	801287a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012854:	2328      	movs	r3, #40	; 0x28
 8012856:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012858:	8afa      	ldrh	r2, [r7, #22]
 801285a:	8abb      	ldrh	r3, [r7, #20]
 801285c:	429a      	cmp	r2, r3
 801285e:	d904      	bls.n	801286a <tcp_eff_send_mss_netif+0x4e>
 8012860:	8afa      	ldrh	r2, [r7, #22]
 8012862:	8abb      	ldrh	r3, [r7, #20]
 8012864:	1ad3      	subs	r3, r2, r3
 8012866:	b29b      	uxth	r3, r3
 8012868:	e000      	b.n	801286c <tcp_eff_send_mss_netif+0x50>
 801286a:	2300      	movs	r3, #0
 801286c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801286e:	8a7a      	ldrh	r2, [r7, #18]
 8012870:	89fb      	ldrh	r3, [r7, #14]
 8012872:	4293      	cmp	r3, r2
 8012874:	bf28      	it	cs
 8012876:	4613      	movcs	r3, r2
 8012878:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801287a:	89fb      	ldrh	r3, [r7, #14]
}
 801287c:	4618      	mov	r0, r3
 801287e:	3718      	adds	r7, #24
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	0801ceec 	.word	0x0801ceec
 8012888:	0801d5f8 	.word	0x0801d5f8
 801288c:	0801cf30 	.word	0x0801cf30

08012890 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d119      	bne.n	80128d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80128a4:	4b10      	ldr	r3, [pc, #64]	; (80128e8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80128a6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80128aa:	4910      	ldr	r1, [pc, #64]	; (80128ec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80128ac:	4810      	ldr	r0, [pc, #64]	; (80128f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80128ae:	f007 f91f 	bl	8019af0 <iprintf>

  while (pcb != NULL) {
 80128b2:	e011      	b.n	80128d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d108      	bne.n	80128d2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	68db      	ldr	r3, [r3, #12]
 80128c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80128c6:	68f8      	ldr	r0, [r7, #12]
 80128c8:	f7fe ffc2 	bl	8011850 <tcp_abort>
      pcb = next;
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	60fb      	str	r3, [r7, #12]
 80128d0:	e002      	b.n	80128d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d1ea      	bne.n	80128b4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80128de:	bf00      	nop
 80128e0:	bf00      	nop
 80128e2:	3710      	adds	r7, #16
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	0801ceec 	.word	0x0801ceec
 80128ec:	0801d620 	.word	0x0801d620
 80128f0:	0801cf30 	.word	0x0801cf30

080128f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b084      	sub	sp, #16
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d02a      	beq.n	801295a <tcp_netif_ip_addr_changed+0x66>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d026      	beq.n	801295a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801290c:	4b15      	ldr	r3, [pc, #84]	; (8012964 <tcp_netif_ip_addr_changed+0x70>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4619      	mov	r1, r3
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f7ff ffbc 	bl	8012890 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012918:	4b13      	ldr	r3, [pc, #76]	; (8012968 <tcp_netif_ip_addr_changed+0x74>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4619      	mov	r1, r3
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f7ff ffb6 	bl	8012890 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d017      	beq.n	801295a <tcp_netif_ip_addr_changed+0x66>
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d013      	beq.n	801295a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012932:	4b0e      	ldr	r3, [pc, #56]	; (801296c <tcp_netif_ip_addr_changed+0x78>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	60fb      	str	r3, [r7, #12]
 8012938:	e00c      	b.n	8012954 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	681a      	ldr	r2, [r3, #0]
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	429a      	cmp	r2, r3
 8012944:	d103      	bne.n	801294e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	681a      	ldr	r2, [r3, #0]
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	68db      	ldr	r3, [r3, #12]
 8012952:	60fb      	str	r3, [r7, #12]
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1ef      	bne.n	801293a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801295a:	bf00      	nop
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	200070dc 	.word	0x200070dc
 8012968:	200070d4 	.word	0x200070d4
 801296c:	200070d8 	.word	0x200070d8

08012970 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801297c:	2b00      	cmp	r3, #0
 801297e:	d007      	beq.n	8012990 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012984:	4618      	mov	r0, r3
 8012986:	f7ff fc3d 	bl	8012204 <tcp_segs_free>
    pcb->ooseq = NULL;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2200      	movs	r2, #0
 801298e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012990:	bf00      	nop
 8012992:	3708      	adds	r7, #8
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012998:	b590      	push	{r4, r7, lr}
 801299a:	b08d      	sub	sp, #52	; 0x34
 801299c:	af04      	add	r7, sp, #16
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d105      	bne.n	80129b4 <tcp_input+0x1c>
 80129a8:	4b9b      	ldr	r3, [pc, #620]	; (8012c18 <tcp_input+0x280>)
 80129aa:	2283      	movs	r2, #131	; 0x83
 80129ac:	499b      	ldr	r1, [pc, #620]	; (8012c1c <tcp_input+0x284>)
 80129ae:	489c      	ldr	r0, [pc, #624]	; (8012c20 <tcp_input+0x288>)
 80129b0:	f007 f89e 	bl	8019af0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	4a9a      	ldr	r2, [pc, #616]	; (8012c24 <tcp_input+0x28c>)
 80129ba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	895b      	ldrh	r3, [r3, #10]
 80129c0:	2b13      	cmp	r3, #19
 80129c2:	f240 83d1 	bls.w	8013168 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80129c6:	4b98      	ldr	r3, [pc, #608]	; (8012c28 <tcp_input+0x290>)
 80129c8:	695b      	ldr	r3, [r3, #20]
 80129ca:	4a97      	ldr	r2, [pc, #604]	; (8012c28 <tcp_input+0x290>)
 80129cc:	6812      	ldr	r2, [r2, #0]
 80129ce:	4611      	mov	r1, r2
 80129d0:	4618      	mov	r0, r3
 80129d2:	f005 fbfb 	bl	80181cc <ip4_addr_isbroadcast_u32>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	f040 83c7 	bne.w	801316c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80129de:	4b92      	ldr	r3, [pc, #584]	; (8012c28 <tcp_input+0x290>)
 80129e0:	695b      	ldr	r3, [r3, #20]
 80129e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80129e6:	2be0      	cmp	r3, #224	; 0xe0
 80129e8:	f000 83c0 	beq.w	801316c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80129ec:	4b8d      	ldr	r3, [pc, #564]	; (8012c24 <tcp_input+0x28c>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	899b      	ldrh	r3, [r3, #12]
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7fc fdbf 	bl	800f578 <lwip_htons>
 80129fa:	4603      	mov	r3, r0
 80129fc:	0b1b      	lsrs	r3, r3, #12
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012a06:	7cbb      	ldrb	r3, [r7, #18]
 8012a08:	2b13      	cmp	r3, #19
 8012a0a:	f240 83b1 	bls.w	8013170 <tcp_input+0x7d8>
 8012a0e:	7cbb      	ldrb	r3, [r7, #18]
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	891b      	ldrh	r3, [r3, #8]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	f200 83aa 	bhi.w	8013170 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012a1c:	7cbb      	ldrb	r3, [r7, #18]
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	3b14      	subs	r3, #20
 8012a22:	b29a      	uxth	r2, r3
 8012a24:	4b81      	ldr	r3, [pc, #516]	; (8012c2c <tcp_input+0x294>)
 8012a26:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012a28:	4b81      	ldr	r3, [pc, #516]	; (8012c30 <tcp_input+0x298>)
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	895a      	ldrh	r2, [r3, #10]
 8012a32:	7cbb      	ldrb	r3, [r7, #18]
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d309      	bcc.n	8012a4e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012a3a:	4b7c      	ldr	r3, [pc, #496]	; (8012c2c <tcp_input+0x294>)
 8012a3c:	881a      	ldrh	r2, [r3, #0]
 8012a3e:	4b7d      	ldr	r3, [pc, #500]	; (8012c34 <tcp_input+0x29c>)
 8012a40:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012a42:	7cbb      	ldrb	r3, [r7, #18]
 8012a44:	4619      	mov	r1, r3
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7fe f8f4 	bl	8010c34 <pbuf_remove_header>
 8012a4c:	e04e      	b.n	8012aec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d105      	bne.n	8012a62 <tcp_input+0xca>
 8012a56:	4b70      	ldr	r3, [pc, #448]	; (8012c18 <tcp_input+0x280>)
 8012a58:	22c2      	movs	r2, #194	; 0xc2
 8012a5a:	4977      	ldr	r1, [pc, #476]	; (8012c38 <tcp_input+0x2a0>)
 8012a5c:	4870      	ldr	r0, [pc, #448]	; (8012c20 <tcp_input+0x288>)
 8012a5e:	f007 f847 	bl	8019af0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012a62:	2114      	movs	r1, #20
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f7fe f8e5 	bl	8010c34 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	895a      	ldrh	r2, [r3, #10]
 8012a6e:	4b71      	ldr	r3, [pc, #452]	; (8012c34 <tcp_input+0x29c>)
 8012a70:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012a72:	4b6e      	ldr	r3, [pc, #440]	; (8012c2c <tcp_input+0x294>)
 8012a74:	881a      	ldrh	r2, [r3, #0]
 8012a76:	4b6f      	ldr	r3, [pc, #444]	; (8012c34 <tcp_input+0x29c>)
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	1ad3      	subs	r3, r2, r3
 8012a7c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012a7e:	4b6d      	ldr	r3, [pc, #436]	; (8012c34 <tcp_input+0x29c>)
 8012a80:	881b      	ldrh	r3, [r3, #0]
 8012a82:	4619      	mov	r1, r3
 8012a84:	6878      	ldr	r0, [r7, #4]
 8012a86:	f7fe f8d5 	bl	8010c34 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	895b      	ldrh	r3, [r3, #10]
 8012a90:	8a3a      	ldrh	r2, [r7, #16]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	f200 836e 	bhi.w	8013174 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	4a64      	ldr	r2, [pc, #400]	; (8012c30 <tcp_input+0x298>)
 8012aa0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	8a3a      	ldrh	r2, [r7, #16]
 8012aa8:	4611      	mov	r1, r2
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7fe f8c2 	bl	8010c34 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	891a      	ldrh	r2, [r3, #8]
 8012ab4:	8a3b      	ldrh	r3, [r7, #16]
 8012ab6:	1ad3      	subs	r3, r2, r3
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	895b      	ldrh	r3, [r3, #10]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d005      	beq.n	8012ad2 <tcp_input+0x13a>
 8012ac6:	4b54      	ldr	r3, [pc, #336]	; (8012c18 <tcp_input+0x280>)
 8012ac8:	22df      	movs	r2, #223	; 0xdf
 8012aca:	495c      	ldr	r1, [pc, #368]	; (8012c3c <tcp_input+0x2a4>)
 8012acc:	4854      	ldr	r0, [pc, #336]	; (8012c20 <tcp_input+0x288>)
 8012ace:	f007 f80f 	bl	8019af0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	891a      	ldrh	r2, [r3, #8]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	891b      	ldrh	r3, [r3, #8]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d005      	beq.n	8012aec <tcp_input+0x154>
 8012ae0:	4b4d      	ldr	r3, [pc, #308]	; (8012c18 <tcp_input+0x280>)
 8012ae2:	22e0      	movs	r2, #224	; 0xe0
 8012ae4:	4956      	ldr	r1, [pc, #344]	; (8012c40 <tcp_input+0x2a8>)
 8012ae6:	484e      	ldr	r0, [pc, #312]	; (8012c20 <tcp_input+0x288>)
 8012ae8:	f007 f802 	bl	8019af0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012aec:	4b4d      	ldr	r3, [pc, #308]	; (8012c24 <tcp_input+0x28c>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	881b      	ldrh	r3, [r3, #0]
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	4a4b      	ldr	r2, [pc, #300]	; (8012c24 <tcp_input+0x28c>)
 8012af6:	6814      	ldr	r4, [r2, #0]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7fc fd3d 	bl	800f578 <lwip_htons>
 8012afe:	4603      	mov	r3, r0
 8012b00:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012b02:	4b48      	ldr	r3, [pc, #288]	; (8012c24 <tcp_input+0x28c>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	885b      	ldrh	r3, [r3, #2]
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	4a46      	ldr	r2, [pc, #280]	; (8012c24 <tcp_input+0x28c>)
 8012b0c:	6814      	ldr	r4, [r2, #0]
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7fc fd32 	bl	800f578 <lwip_htons>
 8012b14:	4603      	mov	r3, r0
 8012b16:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012b18:	4b42      	ldr	r3, [pc, #264]	; (8012c24 <tcp_input+0x28c>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	4a41      	ldr	r2, [pc, #260]	; (8012c24 <tcp_input+0x28c>)
 8012b20:	6814      	ldr	r4, [r2, #0]
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7fc fd3d 	bl	800f5a2 <lwip_htonl>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	6063      	str	r3, [r4, #4]
 8012b2c:	6863      	ldr	r3, [r4, #4]
 8012b2e:	4a45      	ldr	r2, [pc, #276]	; (8012c44 <tcp_input+0x2ac>)
 8012b30:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012b32:	4b3c      	ldr	r3, [pc, #240]	; (8012c24 <tcp_input+0x28c>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	689b      	ldr	r3, [r3, #8]
 8012b38:	4a3a      	ldr	r2, [pc, #232]	; (8012c24 <tcp_input+0x28c>)
 8012b3a:	6814      	ldr	r4, [r2, #0]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fc fd30 	bl	800f5a2 <lwip_htonl>
 8012b42:	4603      	mov	r3, r0
 8012b44:	60a3      	str	r3, [r4, #8]
 8012b46:	68a3      	ldr	r3, [r4, #8]
 8012b48:	4a3f      	ldr	r2, [pc, #252]	; (8012c48 <tcp_input+0x2b0>)
 8012b4a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012b4c:	4b35      	ldr	r3, [pc, #212]	; (8012c24 <tcp_input+0x28c>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	89db      	ldrh	r3, [r3, #14]
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	4a33      	ldr	r2, [pc, #204]	; (8012c24 <tcp_input+0x28c>)
 8012b56:	6814      	ldr	r4, [r2, #0]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7fc fd0d 	bl	800f578 <lwip_htons>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012b62:	4b30      	ldr	r3, [pc, #192]	; (8012c24 <tcp_input+0x28c>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	899b      	ldrh	r3, [r3, #12]
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f7fc fd04 	bl	800f578 <lwip_htons>
 8012b70:	4603      	mov	r3, r0
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b78:	b2da      	uxtb	r2, r3
 8012b7a:	4b34      	ldr	r3, [pc, #208]	; (8012c4c <tcp_input+0x2b4>)
 8012b7c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	891a      	ldrh	r2, [r3, #8]
 8012b82:	4b33      	ldr	r3, [pc, #204]	; (8012c50 <tcp_input+0x2b8>)
 8012b84:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012b86:	4b31      	ldr	r3, [pc, #196]	; (8012c4c <tcp_input+0x2b4>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	f003 0303 	and.w	r3, r3, #3
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d00c      	beq.n	8012bac <tcp_input+0x214>
    tcplen++;
 8012b92:	4b2f      	ldr	r3, [pc, #188]	; (8012c50 <tcp_input+0x2b8>)
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	3301      	adds	r3, #1
 8012b98:	b29a      	uxth	r2, r3
 8012b9a:	4b2d      	ldr	r3, [pc, #180]	; (8012c50 <tcp_input+0x2b8>)
 8012b9c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	891a      	ldrh	r2, [r3, #8]
 8012ba2:	4b2b      	ldr	r3, [pc, #172]	; (8012c50 <tcp_input+0x2b8>)
 8012ba4:	881b      	ldrh	r3, [r3, #0]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	f200 82e6 	bhi.w	8013178 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012bac:	2300      	movs	r3, #0
 8012bae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bb0:	4b28      	ldr	r3, [pc, #160]	; (8012c54 <tcp_input+0x2bc>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	61fb      	str	r3, [r7, #28]
 8012bb6:	e09d      	b.n	8012cf4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	7d1b      	ldrb	r3, [r3, #20]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d105      	bne.n	8012bcc <tcp_input+0x234>
 8012bc0:	4b15      	ldr	r3, [pc, #84]	; (8012c18 <tcp_input+0x280>)
 8012bc2:	22fb      	movs	r2, #251	; 0xfb
 8012bc4:	4924      	ldr	r1, [pc, #144]	; (8012c58 <tcp_input+0x2c0>)
 8012bc6:	4816      	ldr	r0, [pc, #88]	; (8012c20 <tcp_input+0x288>)
 8012bc8:	f006 ff92 	bl	8019af0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	7d1b      	ldrb	r3, [r3, #20]
 8012bd0:	2b0a      	cmp	r3, #10
 8012bd2:	d105      	bne.n	8012be0 <tcp_input+0x248>
 8012bd4:	4b10      	ldr	r3, [pc, #64]	; (8012c18 <tcp_input+0x280>)
 8012bd6:	22fc      	movs	r2, #252	; 0xfc
 8012bd8:	4920      	ldr	r1, [pc, #128]	; (8012c5c <tcp_input+0x2c4>)
 8012bda:	4811      	ldr	r0, [pc, #68]	; (8012c20 <tcp_input+0x288>)
 8012bdc:	f006 ff88 	bl	8019af0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	7d1b      	ldrb	r3, [r3, #20]
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d105      	bne.n	8012bf4 <tcp_input+0x25c>
 8012be8:	4b0b      	ldr	r3, [pc, #44]	; (8012c18 <tcp_input+0x280>)
 8012bea:	22fd      	movs	r2, #253	; 0xfd
 8012bec:	491c      	ldr	r1, [pc, #112]	; (8012c60 <tcp_input+0x2c8>)
 8012bee:	480c      	ldr	r0, [pc, #48]	; (8012c20 <tcp_input+0x288>)
 8012bf0:	f006 ff7e 	bl	8019af0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	7a1b      	ldrb	r3, [r3, #8]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d033      	beq.n	8012c64 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	7a1a      	ldrb	r2, [r3, #8]
 8012c00:	4b09      	ldr	r3, [pc, #36]	; (8012c28 <tcp_input+0x290>)
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c08:	3301      	adds	r3, #1
 8012c0a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d029      	beq.n	8012c64 <tcp_input+0x2cc>
      prev = pcb;
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	61bb      	str	r3, [r7, #24]
      continue;
 8012c14:	e06b      	b.n	8012cee <tcp_input+0x356>
 8012c16:	bf00      	nop
 8012c18:	0801d654 	.word	0x0801d654
 8012c1c:	0801d688 	.word	0x0801d688
 8012c20:	0801d6a0 	.word	0x0801d6a0
 8012c24:	200070f8 	.word	0x200070f8
 8012c28:	200007f4 	.word	0x200007f4
 8012c2c:	200070fc 	.word	0x200070fc
 8012c30:	20007100 	.word	0x20007100
 8012c34:	200070fe 	.word	0x200070fe
 8012c38:	0801d6c8 	.word	0x0801d6c8
 8012c3c:	0801d6d8 	.word	0x0801d6d8
 8012c40:	0801d6e4 	.word	0x0801d6e4
 8012c44:	20007108 	.word	0x20007108
 8012c48:	2000710c 	.word	0x2000710c
 8012c4c:	20007114 	.word	0x20007114
 8012c50:	20007112 	.word	0x20007112
 8012c54:	200070dc 	.word	0x200070dc
 8012c58:	0801d704 	.word	0x0801d704
 8012c5c:	0801d72c 	.word	0x0801d72c
 8012c60:	0801d758 	.word	0x0801d758
    }

    if (pcb->remote_port == tcphdr->src &&
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	8b1a      	ldrh	r2, [r3, #24]
 8012c68:	4b72      	ldr	r3, [pc, #456]	; (8012e34 <tcp_input+0x49c>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d13a      	bne.n	8012cea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012c74:	69fb      	ldr	r3, [r7, #28]
 8012c76:	8ada      	ldrh	r2, [r3, #22]
 8012c78:	4b6e      	ldr	r3, [pc, #440]	; (8012e34 <tcp_input+0x49c>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	885b      	ldrh	r3, [r3, #2]
 8012c7e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d132      	bne.n	8012cea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c84:	69fb      	ldr	r3, [r7, #28]
 8012c86:	685a      	ldr	r2, [r3, #4]
 8012c88:	4b6b      	ldr	r3, [pc, #428]	; (8012e38 <tcp_input+0x4a0>)
 8012c8a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d12c      	bne.n	8012cea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	4b68      	ldr	r3, [pc, #416]	; (8012e38 <tcp_input+0x4a0>)
 8012c96:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d126      	bne.n	8012cea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	69fa      	ldr	r2, [r7, #28]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d106      	bne.n	8012cb4 <tcp_input+0x31c>
 8012ca6:	4b65      	ldr	r3, [pc, #404]	; (8012e3c <tcp_input+0x4a4>)
 8012ca8:	f240 120d 	movw	r2, #269	; 0x10d
 8012cac:	4964      	ldr	r1, [pc, #400]	; (8012e40 <tcp_input+0x4a8>)
 8012cae:	4865      	ldr	r0, [pc, #404]	; (8012e44 <tcp_input+0x4ac>)
 8012cb0:	f006 ff1e 	bl	8019af0 <iprintf>
      if (prev != NULL) {
 8012cb4:	69bb      	ldr	r3, [r7, #24]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d00a      	beq.n	8012cd0 <tcp_input+0x338>
        prev->next = pcb->next;
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	68da      	ldr	r2, [r3, #12]
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012cc2:	4b61      	ldr	r3, [pc, #388]	; (8012e48 <tcp_input+0x4b0>)
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	69fb      	ldr	r3, [r7, #28]
 8012cc8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012cca:	4a5f      	ldr	r2, [pc, #380]	; (8012e48 <tcp_input+0x4b0>)
 8012ccc:	69fb      	ldr	r3, [r7, #28]
 8012cce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	68db      	ldr	r3, [r3, #12]
 8012cd4:	69fa      	ldr	r2, [r7, #28]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d111      	bne.n	8012cfe <tcp_input+0x366>
 8012cda:	4b58      	ldr	r3, [pc, #352]	; (8012e3c <tcp_input+0x4a4>)
 8012cdc:	f240 1215 	movw	r2, #277	; 0x115
 8012ce0:	495a      	ldr	r1, [pc, #360]	; (8012e4c <tcp_input+0x4b4>)
 8012ce2:	4858      	ldr	r0, [pc, #352]	; (8012e44 <tcp_input+0x4ac>)
 8012ce4:	f006 ff04 	bl	8019af0 <iprintf>
      break;
 8012ce8:	e009      	b.n	8012cfe <tcp_input+0x366>
    }
    prev = pcb;
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cee:	69fb      	ldr	r3, [r7, #28]
 8012cf0:	68db      	ldr	r3, [r3, #12]
 8012cf2:	61fb      	str	r3, [r7, #28]
 8012cf4:	69fb      	ldr	r3, [r7, #28]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	f47f af5e 	bne.w	8012bb8 <tcp_input+0x220>
 8012cfc:	e000      	b.n	8012d00 <tcp_input+0x368>
      break;
 8012cfe:	bf00      	nop
  }

  if (pcb == NULL) {
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	f040 80aa 	bne.w	8012e5c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d08:	4b51      	ldr	r3, [pc, #324]	; (8012e50 <tcp_input+0x4b8>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	61fb      	str	r3, [r7, #28]
 8012d0e:	e03f      	b.n	8012d90 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	7d1b      	ldrb	r3, [r3, #20]
 8012d14:	2b0a      	cmp	r3, #10
 8012d16:	d006      	beq.n	8012d26 <tcp_input+0x38e>
 8012d18:	4b48      	ldr	r3, [pc, #288]	; (8012e3c <tcp_input+0x4a4>)
 8012d1a:	f240 121f 	movw	r2, #287	; 0x11f
 8012d1e:	494d      	ldr	r1, [pc, #308]	; (8012e54 <tcp_input+0x4bc>)
 8012d20:	4848      	ldr	r0, [pc, #288]	; (8012e44 <tcp_input+0x4ac>)
 8012d22:	f006 fee5 	bl	8019af0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	7a1b      	ldrb	r3, [r3, #8]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d009      	beq.n	8012d42 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	7a1a      	ldrb	r2, [r3, #8]
 8012d32:	4b41      	ldr	r3, [pc, #260]	; (8012e38 <tcp_input+0x4a0>)
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d122      	bne.n	8012d88 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	8b1a      	ldrh	r2, [r3, #24]
 8012d46:	4b3b      	ldr	r3, [pc, #236]	; (8012e34 <tcp_input+0x49c>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	881b      	ldrh	r3, [r3, #0]
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d11b      	bne.n	8012d8a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	8ada      	ldrh	r2, [r3, #22]
 8012d56:	4b37      	ldr	r3, [pc, #220]	; (8012e34 <tcp_input+0x49c>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	885b      	ldrh	r3, [r3, #2]
 8012d5c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d113      	bne.n	8012d8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d62:	69fb      	ldr	r3, [r7, #28]
 8012d64:	685a      	ldr	r2, [r3, #4]
 8012d66:	4b34      	ldr	r3, [pc, #208]	; (8012e38 <tcp_input+0x4a0>)
 8012d68:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d10d      	bne.n	8012d8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	681a      	ldr	r2, [r3, #0]
 8012d72:	4b31      	ldr	r3, [pc, #196]	; (8012e38 <tcp_input+0x4a0>)
 8012d74:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d107      	bne.n	8012d8a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012d7a:	69f8      	ldr	r0, [r7, #28]
 8012d7c:	f000 fb56 	bl	801342c <tcp_timewait_input>
        }
        pbuf_free(p);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7fd ffdd 	bl	8010d40 <pbuf_free>
        return;
 8012d86:	e1fd      	b.n	8013184 <tcp_input+0x7ec>
        continue;
 8012d88:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	61fb      	str	r3, [r7, #28]
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d1bc      	bne.n	8012d10 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012d96:	2300      	movs	r3, #0
 8012d98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012d9a:	4b2f      	ldr	r3, [pc, #188]	; (8012e58 <tcp_input+0x4c0>)
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	617b      	str	r3, [r7, #20]
 8012da0:	e02a      	b.n	8012df8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	7a1b      	ldrb	r3, [r3, #8]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d00c      	beq.n	8012dc4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	7a1a      	ldrb	r2, [r3, #8]
 8012dae:	4b22      	ldr	r3, [pc, #136]	; (8012e38 <tcp_input+0x4a0>)
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012db6:	3301      	adds	r3, #1
 8012db8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d002      	beq.n	8012dc4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	61bb      	str	r3, [r7, #24]
        continue;
 8012dc2:	e016      	b.n	8012df2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	8ada      	ldrh	r2, [r3, #22]
 8012dc8:	4b1a      	ldr	r3, [pc, #104]	; (8012e34 <tcp_input+0x49c>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	885b      	ldrh	r3, [r3, #2]
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d10c      	bne.n	8012dee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	681a      	ldr	r2, [r3, #0]
 8012dd8:	4b17      	ldr	r3, [pc, #92]	; (8012e38 <tcp_input+0x4a0>)
 8012dda:	695b      	ldr	r3, [r3, #20]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d00f      	beq.n	8012e00 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00d      	beq.n	8012e02 <tcp_input+0x46a>
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d009      	beq.n	8012e02 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	617b      	str	r3, [r7, #20]
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d1d1      	bne.n	8012da2 <tcp_input+0x40a>
 8012dfe:	e000      	b.n	8012e02 <tcp_input+0x46a>
            break;
 8012e00:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d029      	beq.n	8012e5c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d00a      	beq.n	8012e24 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	68da      	ldr	r2, [r3, #12]
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012e16:	4b10      	ldr	r3, [pc, #64]	; (8012e58 <tcp_input+0x4c0>)
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012e1e:	4a0e      	ldr	r2, [pc, #56]	; (8012e58 <tcp_input+0x4c0>)
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012e24:	6978      	ldr	r0, [r7, #20]
 8012e26:	f000 fa03 	bl	8013230 <tcp_listen_input>
      }
      pbuf_free(p);
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f7fd ff88 	bl	8010d40 <pbuf_free>
      return;
 8012e30:	e1a8      	b.n	8013184 <tcp_input+0x7ec>
 8012e32:	bf00      	nop
 8012e34:	200070f8 	.word	0x200070f8
 8012e38:	200007f4 	.word	0x200007f4
 8012e3c:	0801d654 	.word	0x0801d654
 8012e40:	0801d780 	.word	0x0801d780
 8012e44:	0801d6a0 	.word	0x0801d6a0
 8012e48:	200070dc 	.word	0x200070dc
 8012e4c:	0801d7ac 	.word	0x0801d7ac
 8012e50:	200070e0 	.word	0x200070e0
 8012e54:	0801d7d8 	.word	0x0801d7d8
 8012e58:	200070d8 	.word	0x200070d8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012e5c:	69fb      	ldr	r3, [r7, #28]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	f000 8158 	beq.w	8013114 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012e64:	4b95      	ldr	r3, [pc, #596]	; (80130bc <tcp_input+0x724>)
 8012e66:	2200      	movs	r2, #0
 8012e68:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	891a      	ldrh	r2, [r3, #8]
 8012e6e:	4b93      	ldr	r3, [pc, #588]	; (80130bc <tcp_input+0x724>)
 8012e70:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012e72:	4a92      	ldr	r2, [pc, #584]	; (80130bc <tcp_input+0x724>)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012e78:	4b91      	ldr	r3, [pc, #580]	; (80130c0 <tcp_input+0x728>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	4a8f      	ldr	r2, [pc, #572]	; (80130bc <tcp_input+0x724>)
 8012e7e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012e80:	4b90      	ldr	r3, [pc, #576]	; (80130c4 <tcp_input+0x72c>)
 8012e82:	2200      	movs	r2, #0
 8012e84:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012e86:	4b90      	ldr	r3, [pc, #576]	; (80130c8 <tcp_input+0x730>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012e8c:	4b8f      	ldr	r3, [pc, #572]	; (80130cc <tcp_input+0x734>)
 8012e8e:	2200      	movs	r2, #0
 8012e90:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012e92:	4b8f      	ldr	r3, [pc, #572]	; (80130d0 <tcp_input+0x738>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	f003 0308 	and.w	r3, r3, #8
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d006      	beq.n	8012eac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	7b5b      	ldrb	r3, [r3, #13]
 8012ea2:	f043 0301 	orr.w	r3, r3, #1
 8012ea6:	b2da      	uxtb	r2, r3
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012eac:	69fb      	ldr	r3, [r7, #28]
 8012eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d017      	beq.n	8012ee4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012eb4:	69f8      	ldr	r0, [r7, #28]
 8012eb6:	f7ff f927 	bl	8012108 <tcp_process_refused_data>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	f113 0f0d 	cmn.w	r3, #13
 8012ec0:	d007      	beq.n	8012ed2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d00c      	beq.n	8012ee4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012eca:	4b82      	ldr	r3, [pc, #520]	; (80130d4 <tcp_input+0x73c>)
 8012ecc:	881b      	ldrh	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d008      	beq.n	8012ee4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	f040 80e4 	bne.w	80130a4 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012edc:	69f8      	ldr	r0, [r7, #28]
 8012ede:	f003 f9ad 	bl	801623c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012ee2:	e0df      	b.n	80130a4 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8012ee4:	4a7c      	ldr	r2, [pc, #496]	; (80130d8 <tcp_input+0x740>)
 8012ee6:	69fb      	ldr	r3, [r7, #28]
 8012ee8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012eea:	69f8      	ldr	r0, [r7, #28]
 8012eec:	f000 fb18 	bl	8013520 <tcp_process>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012ef4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ef8:	f113 0f0d 	cmn.w	r3, #13
 8012efc:	f000 80d4 	beq.w	80130a8 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8012f00:	4b71      	ldr	r3, [pc, #452]	; (80130c8 <tcp_input+0x730>)
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	f003 0308 	and.w	r3, r3, #8
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d015      	beq.n	8012f38 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d008      	beq.n	8012f28 <tcp_input+0x590>
 8012f16:	69fb      	ldr	r3, [r7, #28]
 8012f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012f1c:	69fa      	ldr	r2, [r7, #28]
 8012f1e:	6912      	ldr	r2, [r2, #16]
 8012f20:	f06f 010d 	mvn.w	r1, #13
 8012f24:	4610      	mov	r0, r2
 8012f26:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012f28:	69f9      	ldr	r1, [r7, #28]
 8012f2a:	486c      	ldr	r0, [pc, #432]	; (80130dc <tcp_input+0x744>)
 8012f2c:	f7ff fbbc 	bl	80126a8 <tcp_pcb_remove>
        tcp_free(pcb);
 8012f30:	69f8      	ldr	r0, [r7, #28]
 8012f32:	f7fe f9a5 	bl	8011280 <tcp_free>
 8012f36:	e0da      	b.n	80130ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012f3c:	4b63      	ldr	r3, [pc, #396]	; (80130cc <tcp_input+0x734>)
 8012f3e:	881b      	ldrh	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d01d      	beq.n	8012f80 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012f44:	4b61      	ldr	r3, [pc, #388]	; (80130cc <tcp_input+0x734>)
 8012f46:	881b      	ldrh	r3, [r3, #0]
 8012f48:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012f4a:	69fb      	ldr	r3, [r7, #28]
 8012f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d00a      	beq.n	8012f6a <tcp_input+0x5d2>
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f5a:	69fa      	ldr	r2, [r7, #28]
 8012f5c:	6910      	ldr	r0, [r2, #16]
 8012f5e:	89fa      	ldrh	r2, [r7, #14]
 8012f60:	69f9      	ldr	r1, [r7, #28]
 8012f62:	4798      	blx	r3
 8012f64:	4603      	mov	r3, r0
 8012f66:	74fb      	strb	r3, [r7, #19]
 8012f68:	e001      	b.n	8012f6e <tcp_input+0x5d6>
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f72:	f113 0f0d 	cmn.w	r3, #13
 8012f76:	f000 8099 	beq.w	80130ac <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012f7a:	4b54      	ldr	r3, [pc, #336]	; (80130cc <tcp_input+0x734>)
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012f80:	69f8      	ldr	r0, [r7, #28]
 8012f82:	f000 f915 	bl	80131b0 <tcp_input_delayed_close>
 8012f86:	4603      	mov	r3, r0
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f040 8091 	bne.w	80130b0 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012f8e:	4b4d      	ldr	r3, [pc, #308]	; (80130c4 <tcp_input+0x72c>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d041      	beq.n	801301a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012f96:	69fb      	ldr	r3, [r7, #28]
 8012f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d006      	beq.n	8012fac <tcp_input+0x614>
 8012f9e:	4b50      	ldr	r3, [pc, #320]	; (80130e0 <tcp_input+0x748>)
 8012fa0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012fa4:	494f      	ldr	r1, [pc, #316]	; (80130e4 <tcp_input+0x74c>)
 8012fa6:	4850      	ldr	r0, [pc, #320]	; (80130e8 <tcp_input+0x750>)
 8012fa8:	f006 fda2 	bl	8019af0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012fac:	69fb      	ldr	r3, [r7, #28]
 8012fae:	8b5b      	ldrh	r3, [r3, #26]
 8012fb0:	f003 0310 	and.w	r3, r3, #16
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d008      	beq.n	8012fca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012fb8:	4b42      	ldr	r3, [pc, #264]	; (80130c4 <tcp_input+0x72c>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7fd febf 	bl	8010d40 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012fc2:	69f8      	ldr	r0, [r7, #28]
 8012fc4:	f7fe fc44 	bl	8011850 <tcp_abort>
            goto aborted;
 8012fc8:	e091      	b.n	80130ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d00c      	beq.n	8012fee <tcp_input+0x656>
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012fda:	69fb      	ldr	r3, [r7, #28]
 8012fdc:	6918      	ldr	r0, [r3, #16]
 8012fde:	4b39      	ldr	r3, [pc, #228]	; (80130c4 <tcp_input+0x72c>)
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	69f9      	ldr	r1, [r7, #28]
 8012fe6:	47a0      	blx	r4
 8012fe8:	4603      	mov	r3, r0
 8012fea:	74fb      	strb	r3, [r7, #19]
 8012fec:	e008      	b.n	8013000 <tcp_input+0x668>
 8012fee:	4b35      	ldr	r3, [pc, #212]	; (80130c4 <tcp_input+0x72c>)
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	69f9      	ldr	r1, [r7, #28]
 8012ff6:	2000      	movs	r0, #0
 8012ff8:	f7ff f95e 	bl	80122b8 <tcp_recv_null>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013004:	f113 0f0d 	cmn.w	r3, #13
 8013008:	d054      	beq.n	80130b4 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801300a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d003      	beq.n	801301a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013012:	4b2c      	ldr	r3, [pc, #176]	; (80130c4 <tcp_input+0x72c>)
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	69fb      	ldr	r3, [r7, #28]
 8013018:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801301a:	4b2b      	ldr	r3, [pc, #172]	; (80130c8 <tcp_input+0x730>)
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	f003 0320 	and.w	r3, r3, #32
 8013022:	2b00      	cmp	r3, #0
 8013024:	d031      	beq.n	801308a <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801302a:	2b00      	cmp	r3, #0
 801302c:	d009      	beq.n	8013042 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013032:	7b5a      	ldrb	r2, [r3, #13]
 8013034:	69fb      	ldr	r3, [r7, #28]
 8013036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013038:	f042 0220 	orr.w	r2, r2, #32
 801303c:	b2d2      	uxtb	r2, r2
 801303e:	735a      	strb	r2, [r3, #13]
 8013040:	e023      	b.n	801308a <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013046:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801304a:	4293      	cmp	r3, r2
 801304c:	d005      	beq.n	801305a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013052:	3301      	adds	r3, #1
 8013054:	b29a      	uxth	r2, r3
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00b      	beq.n	801307c <tcp_input+0x6e4>
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	6918      	ldr	r0, [r3, #16]
 801306e:	2300      	movs	r3, #0
 8013070:	2200      	movs	r2, #0
 8013072:	69f9      	ldr	r1, [r7, #28]
 8013074:	47a0      	blx	r4
 8013076:	4603      	mov	r3, r0
 8013078:	74fb      	strb	r3, [r7, #19]
 801307a:	e001      	b.n	8013080 <tcp_input+0x6e8>
 801307c:	2300      	movs	r3, #0
 801307e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013080:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013084:	f113 0f0d 	cmn.w	r3, #13
 8013088:	d016      	beq.n	80130b8 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801308a:	4b13      	ldr	r3, [pc, #76]	; (80130d8 <tcp_input+0x740>)
 801308c:	2200      	movs	r2, #0
 801308e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013090:	69f8      	ldr	r0, [r7, #28]
 8013092:	f000 f88d 	bl	80131b0 <tcp_input_delayed_close>
 8013096:	4603      	mov	r3, r0
 8013098:	2b00      	cmp	r3, #0
 801309a:	d127      	bne.n	80130ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801309c:	69f8      	ldr	r0, [r7, #28]
 801309e:	f002 fac7 	bl	8015630 <tcp_output>
 80130a2:	e024      	b.n	80130ee <tcp_input+0x756>
        goto aborted;
 80130a4:	bf00      	nop
 80130a6:	e022      	b.n	80130ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80130a8:	bf00      	nop
 80130aa:	e020      	b.n	80130ee <tcp_input+0x756>
              goto aborted;
 80130ac:	bf00      	nop
 80130ae:	e01e      	b.n	80130ee <tcp_input+0x756>
          goto aborted;
 80130b0:	bf00      	nop
 80130b2:	e01c      	b.n	80130ee <tcp_input+0x756>
            goto aborted;
 80130b4:	bf00      	nop
 80130b6:	e01a      	b.n	80130ee <tcp_input+0x756>
              goto aborted;
 80130b8:	bf00      	nop
 80130ba:	e018      	b.n	80130ee <tcp_input+0x756>
 80130bc:	200070e8 	.word	0x200070e8
 80130c0:	200070f8 	.word	0x200070f8
 80130c4:	20007118 	.word	0x20007118
 80130c8:	20007115 	.word	0x20007115
 80130cc:	20007110 	.word	0x20007110
 80130d0:	20007114 	.word	0x20007114
 80130d4:	20007112 	.word	0x20007112
 80130d8:	2000711c 	.word	0x2000711c
 80130dc:	200070dc 	.word	0x200070dc
 80130e0:	0801d654 	.word	0x0801d654
 80130e4:	0801d808 	.word	0x0801d808
 80130e8:	0801d6a0 	.word	0x0801d6a0
          goto aborted;
 80130ec:	bf00      	nop
    tcp_input_pcb = NULL;
 80130ee:	4b27      	ldr	r3, [pc, #156]	; (801318c <tcp_input+0x7f4>)
 80130f0:	2200      	movs	r2, #0
 80130f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80130f4:	4b26      	ldr	r3, [pc, #152]	; (8013190 <tcp_input+0x7f8>)
 80130f6:	2200      	movs	r2, #0
 80130f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80130fa:	4b26      	ldr	r3, [pc, #152]	; (8013194 <tcp_input+0x7fc>)
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d03f      	beq.n	8013182 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013102:	4b24      	ldr	r3, [pc, #144]	; (8013194 <tcp_input+0x7fc>)
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	4618      	mov	r0, r3
 8013108:	f7fd fe1a 	bl	8010d40 <pbuf_free>
      inseg.p = NULL;
 801310c:	4b21      	ldr	r3, [pc, #132]	; (8013194 <tcp_input+0x7fc>)
 801310e:	2200      	movs	r2, #0
 8013110:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013112:	e036      	b.n	8013182 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013114:	4b20      	ldr	r3, [pc, #128]	; (8013198 <tcp_input+0x800>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	899b      	ldrh	r3, [r3, #12]
 801311a:	b29b      	uxth	r3, r3
 801311c:	4618      	mov	r0, r3
 801311e:	f7fc fa2b 	bl	800f578 <lwip_htons>
 8013122:	4603      	mov	r3, r0
 8013124:	b2db      	uxtb	r3, r3
 8013126:	f003 0304 	and.w	r3, r3, #4
 801312a:	2b00      	cmp	r3, #0
 801312c:	d118      	bne.n	8013160 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801312e:	4b1b      	ldr	r3, [pc, #108]	; (801319c <tcp_input+0x804>)
 8013130:	6819      	ldr	r1, [r3, #0]
 8013132:	4b1b      	ldr	r3, [pc, #108]	; (80131a0 <tcp_input+0x808>)
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	461a      	mov	r2, r3
 8013138:	4b1a      	ldr	r3, [pc, #104]	; (80131a4 <tcp_input+0x80c>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801313e:	4b16      	ldr	r3, [pc, #88]	; (8013198 <tcp_input+0x800>)
 8013140:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013142:	885b      	ldrh	r3, [r3, #2]
 8013144:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013146:	4a14      	ldr	r2, [pc, #80]	; (8013198 <tcp_input+0x800>)
 8013148:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801314a:	8812      	ldrh	r2, [r2, #0]
 801314c:	b292      	uxth	r2, r2
 801314e:	9202      	str	r2, [sp, #8]
 8013150:	9301      	str	r3, [sp, #4]
 8013152:	4b15      	ldr	r3, [pc, #84]	; (80131a8 <tcp_input+0x810>)
 8013154:	9300      	str	r3, [sp, #0]
 8013156:	4b15      	ldr	r3, [pc, #84]	; (80131ac <tcp_input+0x814>)
 8013158:	4602      	mov	r2, r0
 801315a:	2000      	movs	r0, #0
 801315c:	f003 f81c 	bl	8016198 <tcp_rst>
    pbuf_free(p);
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f7fd fded 	bl	8010d40 <pbuf_free>
  return;
 8013166:	e00c      	b.n	8013182 <tcp_input+0x7ea>
    goto dropped;
 8013168:	bf00      	nop
 801316a:	e006      	b.n	801317a <tcp_input+0x7e2>
    goto dropped;
 801316c:	bf00      	nop
 801316e:	e004      	b.n	801317a <tcp_input+0x7e2>
    goto dropped;
 8013170:	bf00      	nop
 8013172:	e002      	b.n	801317a <tcp_input+0x7e2>
      goto dropped;
 8013174:	bf00      	nop
 8013176:	e000      	b.n	801317a <tcp_input+0x7e2>
      goto dropped;
 8013178:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f7fd fde0 	bl	8010d40 <pbuf_free>
 8013180:	e000      	b.n	8013184 <tcp_input+0x7ec>
  return;
 8013182:	bf00      	nop
}
 8013184:	3724      	adds	r7, #36	; 0x24
 8013186:	46bd      	mov	sp, r7
 8013188:	bd90      	pop	{r4, r7, pc}
 801318a:	bf00      	nop
 801318c:	2000711c 	.word	0x2000711c
 8013190:	20007118 	.word	0x20007118
 8013194:	200070e8 	.word	0x200070e8
 8013198:	200070f8 	.word	0x200070f8
 801319c:	2000710c 	.word	0x2000710c
 80131a0:	20007112 	.word	0x20007112
 80131a4:	20007108 	.word	0x20007108
 80131a8:	20000804 	.word	0x20000804
 80131ac:	20000808 	.word	0x20000808

080131b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d106      	bne.n	80131cc <tcp_input_delayed_close+0x1c>
 80131be:	4b17      	ldr	r3, [pc, #92]	; (801321c <tcp_input_delayed_close+0x6c>)
 80131c0:	f240 225a 	movw	r2, #602	; 0x25a
 80131c4:	4916      	ldr	r1, [pc, #88]	; (8013220 <tcp_input_delayed_close+0x70>)
 80131c6:	4817      	ldr	r0, [pc, #92]	; (8013224 <tcp_input_delayed_close+0x74>)
 80131c8:	f006 fc92 	bl	8019af0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80131cc:	4b16      	ldr	r3, [pc, #88]	; (8013228 <tcp_input_delayed_close+0x78>)
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	f003 0310 	and.w	r3, r3, #16
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d01c      	beq.n	8013212 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	8b5b      	ldrh	r3, [r3, #26]
 80131dc:	f003 0310 	and.w	r3, r3, #16
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d10d      	bne.n	8013200 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d008      	beq.n	8013200 <tcp_input_delayed_close+0x50>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	6912      	ldr	r2, [r2, #16]
 80131f8:	f06f 010e 	mvn.w	r1, #14
 80131fc:	4610      	mov	r0, r2
 80131fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013200:	6879      	ldr	r1, [r7, #4]
 8013202:	480a      	ldr	r0, [pc, #40]	; (801322c <tcp_input_delayed_close+0x7c>)
 8013204:	f7ff fa50 	bl	80126a8 <tcp_pcb_remove>
    tcp_free(pcb);
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f7fe f839 	bl	8011280 <tcp_free>
    return 1;
 801320e:	2301      	movs	r3, #1
 8013210:	e000      	b.n	8013214 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013212:	2300      	movs	r3, #0
}
 8013214:	4618      	mov	r0, r3
 8013216:	3708      	adds	r7, #8
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}
 801321c:	0801d654 	.word	0x0801d654
 8013220:	0801d824 	.word	0x0801d824
 8013224:	0801d6a0 	.word	0x0801d6a0
 8013228:	20007115 	.word	0x20007115
 801322c:	200070dc 	.word	0x200070dc

08013230 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013230:	b590      	push	{r4, r7, lr}
 8013232:	b08b      	sub	sp, #44	; 0x2c
 8013234:	af04      	add	r7, sp, #16
 8013236:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013238:	4b6f      	ldr	r3, [pc, #444]	; (80133f8 <tcp_listen_input+0x1c8>)
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	f003 0304 	and.w	r3, r3, #4
 8013240:	2b00      	cmp	r3, #0
 8013242:	f040 80d2 	bne.w	80133ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d106      	bne.n	801325a <tcp_listen_input+0x2a>
 801324c:	4b6b      	ldr	r3, [pc, #428]	; (80133fc <tcp_listen_input+0x1cc>)
 801324e:	f240 2281 	movw	r2, #641	; 0x281
 8013252:	496b      	ldr	r1, [pc, #428]	; (8013400 <tcp_listen_input+0x1d0>)
 8013254:	486b      	ldr	r0, [pc, #428]	; (8013404 <tcp_listen_input+0x1d4>)
 8013256:	f006 fc4b 	bl	8019af0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801325a:	4b67      	ldr	r3, [pc, #412]	; (80133f8 <tcp_listen_input+0x1c8>)
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	f003 0310 	and.w	r3, r3, #16
 8013262:	2b00      	cmp	r3, #0
 8013264:	d019      	beq.n	801329a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013266:	4b68      	ldr	r3, [pc, #416]	; (8013408 <tcp_listen_input+0x1d8>)
 8013268:	6819      	ldr	r1, [r3, #0]
 801326a:	4b68      	ldr	r3, [pc, #416]	; (801340c <tcp_listen_input+0x1dc>)
 801326c:	881b      	ldrh	r3, [r3, #0]
 801326e:	461a      	mov	r2, r3
 8013270:	4b67      	ldr	r3, [pc, #412]	; (8013410 <tcp_listen_input+0x1e0>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013276:	4b67      	ldr	r3, [pc, #412]	; (8013414 <tcp_listen_input+0x1e4>)
 8013278:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801327a:	885b      	ldrh	r3, [r3, #2]
 801327c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801327e:	4a65      	ldr	r2, [pc, #404]	; (8013414 <tcp_listen_input+0x1e4>)
 8013280:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013282:	8812      	ldrh	r2, [r2, #0]
 8013284:	b292      	uxth	r2, r2
 8013286:	9202      	str	r2, [sp, #8]
 8013288:	9301      	str	r3, [sp, #4]
 801328a:	4b63      	ldr	r3, [pc, #396]	; (8013418 <tcp_listen_input+0x1e8>)
 801328c:	9300      	str	r3, [sp, #0]
 801328e:	4b63      	ldr	r3, [pc, #396]	; (801341c <tcp_listen_input+0x1ec>)
 8013290:	4602      	mov	r2, r0
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f002 ff80 	bl	8016198 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013298:	e0a9      	b.n	80133ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801329a:	4b57      	ldr	r3, [pc, #348]	; (80133f8 <tcp_listen_input+0x1c8>)
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	f003 0302 	and.w	r3, r3, #2
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f000 80a3 	beq.w	80133ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	7d5b      	ldrb	r3, [r3, #21]
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7ff f927 	bl	8012500 <tcp_alloc>
 80132b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d111      	bne.n	80132de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	699b      	ldr	r3, [r3, #24]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d00a      	beq.n	80132d8 <tcp_listen_input+0xa8>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	699b      	ldr	r3, [r3, #24]
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	6910      	ldr	r0, [r2, #16]
 80132ca:	f04f 32ff 	mov.w	r2, #4294967295
 80132ce:	2100      	movs	r1, #0
 80132d0:	4798      	blx	r3
 80132d2:	4603      	mov	r3, r0
 80132d4:	73bb      	strb	r3, [r7, #14]
      return;
 80132d6:	e08b      	b.n	80133f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80132d8:	23f0      	movs	r3, #240	; 0xf0
 80132da:	73bb      	strb	r3, [r7, #14]
      return;
 80132dc:	e088      	b.n	80133f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80132de:	4b50      	ldr	r3, [pc, #320]	; (8013420 <tcp_listen_input+0x1f0>)
 80132e0:	695a      	ldr	r2, [r3, #20]
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80132e6:	4b4e      	ldr	r3, [pc, #312]	; (8013420 <tcp_listen_input+0x1f0>)
 80132e8:	691a      	ldr	r2, [r3, #16]
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	8ada      	ldrh	r2, [r3, #22]
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80132f6:	4b47      	ldr	r3, [pc, #284]	; (8013414 <tcp_listen_input+0x1e4>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	881b      	ldrh	r3, [r3, #0]
 80132fc:	b29a      	uxth	r2, r3
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	2203      	movs	r2, #3
 8013306:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013308:	4b41      	ldr	r3, [pc, #260]	; (8013410 <tcp_listen_input+0x1e0>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	1c5a      	adds	r2, r3, #1
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801331a:	6978      	ldr	r0, [r7, #20]
 801331c:	f7ff fa58 	bl	80127d0 <tcp_next_iss>
 8013320:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	693a      	ldr	r2, [r7, #16]
 8013326:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	693a      	ldr	r2, [r7, #16]
 801332c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	693a      	ldr	r2, [r7, #16]
 8013332:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	693a      	ldr	r2, [r7, #16]
 8013338:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801333a:	4b35      	ldr	r3, [pc, #212]	; (8013410 <tcp_listen_input+0x1e0>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	1e5a      	subs	r2, r3, #1
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	691a      	ldr	r2, [r3, #16]
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	7a5b      	ldrb	r3, [r3, #9]
 8013356:	f003 030c 	and.w	r3, r3, #12
 801335a:	b2da      	uxtb	r2, r3
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	7a1a      	ldrb	r2, [r3, #8]
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013368:	4b2e      	ldr	r3, [pc, #184]	; (8013424 <tcp_listen_input+0x1f4>)
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	60da      	str	r2, [r3, #12]
 8013370:	4a2c      	ldr	r2, [pc, #176]	; (8013424 <tcp_listen_input+0x1f4>)
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	6013      	str	r3, [r2, #0]
 8013376:	f003 f8d1 	bl	801651c <tcp_timer_needed>
 801337a:	4b2b      	ldr	r3, [pc, #172]	; (8013428 <tcp_listen_input+0x1f8>)
 801337c:	2201      	movs	r2, #1
 801337e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013380:	6978      	ldr	r0, [r7, #20]
 8013382:	f001 fd8f 	bl	8014ea4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013386:	4b23      	ldr	r3, [pc, #140]	; (8013414 <tcp_listen_input+0x1e4>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	89db      	ldrh	r3, [r3, #14]
 801338c:	b29a      	uxth	r2, r3
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	3304      	adds	r3, #4
 80133a8:	4618      	mov	r0, r3
 80133aa:	f004 fc79 	bl	8017ca0 <ip4_route>
 80133ae:	4601      	mov	r1, r0
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	3304      	adds	r3, #4
 80133b4:	461a      	mov	r2, r3
 80133b6:	4620      	mov	r0, r4
 80133b8:	f7ff fa30 	bl	801281c <tcp_eff_send_mss_netif>
 80133bc:	4603      	mov	r3, r0
 80133be:	461a      	mov	r2, r3
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80133c4:	2112      	movs	r1, #18
 80133c6:	6978      	ldr	r0, [r7, #20]
 80133c8:	f002 f844 	bl	8015454 <tcp_enqueue_flags>
 80133cc:	4603      	mov	r3, r0
 80133ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80133d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d004      	beq.n	80133e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80133d8:	2100      	movs	r1, #0
 80133da:	6978      	ldr	r0, [r7, #20]
 80133dc:	f7fe f97a 	bl	80116d4 <tcp_abandon>
      return;
 80133e0:	e006      	b.n	80133f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80133e2:	6978      	ldr	r0, [r7, #20]
 80133e4:	f002 f924 	bl	8015630 <tcp_output>
  return;
 80133e8:	e001      	b.n	80133ee <tcp_listen_input+0x1be>
    return;
 80133ea:	bf00      	nop
 80133ec:	e000      	b.n	80133f0 <tcp_listen_input+0x1c0>
  return;
 80133ee:	bf00      	nop
}
 80133f0:	371c      	adds	r7, #28
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd90      	pop	{r4, r7, pc}
 80133f6:	bf00      	nop
 80133f8:	20007114 	.word	0x20007114
 80133fc:	0801d654 	.word	0x0801d654
 8013400:	0801d84c 	.word	0x0801d84c
 8013404:	0801d6a0 	.word	0x0801d6a0
 8013408:	2000710c 	.word	0x2000710c
 801340c:	20007112 	.word	0x20007112
 8013410:	20007108 	.word	0x20007108
 8013414:	200070f8 	.word	0x200070f8
 8013418:	20000804 	.word	0x20000804
 801341c:	20000808 	.word	0x20000808
 8013420:	200007f4 	.word	0x200007f4
 8013424:	200070dc 	.word	0x200070dc
 8013428:	200070e4 	.word	0x200070e4

0801342c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b086      	sub	sp, #24
 8013430:	af04      	add	r7, sp, #16
 8013432:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013434:	4b2f      	ldr	r3, [pc, #188]	; (80134f4 <tcp_timewait_input+0xc8>)
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	f003 0304 	and.w	r3, r3, #4
 801343c:	2b00      	cmp	r3, #0
 801343e:	d153      	bne.n	80134e8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d106      	bne.n	8013454 <tcp_timewait_input+0x28>
 8013446:	4b2c      	ldr	r3, [pc, #176]	; (80134f8 <tcp_timewait_input+0xcc>)
 8013448:	f240 22ee 	movw	r2, #750	; 0x2ee
 801344c:	492b      	ldr	r1, [pc, #172]	; (80134fc <tcp_timewait_input+0xd0>)
 801344e:	482c      	ldr	r0, [pc, #176]	; (8013500 <tcp_timewait_input+0xd4>)
 8013450:	f006 fb4e 	bl	8019af0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013454:	4b27      	ldr	r3, [pc, #156]	; (80134f4 <tcp_timewait_input+0xc8>)
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	f003 0302 	and.w	r3, r3, #2
 801345c:	2b00      	cmp	r3, #0
 801345e:	d02a      	beq.n	80134b6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013460:	4b28      	ldr	r3, [pc, #160]	; (8013504 <tcp_timewait_input+0xd8>)
 8013462:	681a      	ldr	r2, [r3, #0]
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013468:	1ad3      	subs	r3, r2, r3
 801346a:	2b00      	cmp	r3, #0
 801346c:	db2d      	blt.n	80134ca <tcp_timewait_input+0x9e>
 801346e:	4b25      	ldr	r3, [pc, #148]	; (8013504 <tcp_timewait_input+0xd8>)
 8013470:	681a      	ldr	r2, [r3, #0]
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013476:	6879      	ldr	r1, [r7, #4]
 8013478:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801347a:	440b      	add	r3, r1
 801347c:	1ad3      	subs	r3, r2, r3
 801347e:	2b00      	cmp	r3, #0
 8013480:	dc23      	bgt.n	80134ca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013482:	4b21      	ldr	r3, [pc, #132]	; (8013508 <tcp_timewait_input+0xdc>)
 8013484:	6819      	ldr	r1, [r3, #0]
 8013486:	4b21      	ldr	r3, [pc, #132]	; (801350c <tcp_timewait_input+0xe0>)
 8013488:	881b      	ldrh	r3, [r3, #0]
 801348a:	461a      	mov	r2, r3
 801348c:	4b1d      	ldr	r3, [pc, #116]	; (8013504 <tcp_timewait_input+0xd8>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013492:	4b1f      	ldr	r3, [pc, #124]	; (8013510 <tcp_timewait_input+0xe4>)
 8013494:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013496:	885b      	ldrh	r3, [r3, #2]
 8013498:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801349a:	4a1d      	ldr	r2, [pc, #116]	; (8013510 <tcp_timewait_input+0xe4>)
 801349c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801349e:	8812      	ldrh	r2, [r2, #0]
 80134a0:	b292      	uxth	r2, r2
 80134a2:	9202      	str	r2, [sp, #8]
 80134a4:	9301      	str	r3, [sp, #4]
 80134a6:	4b1b      	ldr	r3, [pc, #108]	; (8013514 <tcp_timewait_input+0xe8>)
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	4b1b      	ldr	r3, [pc, #108]	; (8013518 <tcp_timewait_input+0xec>)
 80134ac:	4602      	mov	r2, r0
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f002 fe72 	bl	8016198 <tcp_rst>
      return;
 80134b4:	e01b      	b.n	80134ee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80134b6:	4b0f      	ldr	r3, [pc, #60]	; (80134f4 <tcp_timewait_input+0xc8>)
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	f003 0301 	and.w	r3, r3, #1
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d003      	beq.n	80134ca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80134c2:	4b16      	ldr	r3, [pc, #88]	; (801351c <tcp_timewait_input+0xf0>)
 80134c4:	681a      	ldr	r2, [r3, #0]
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80134ca:	4b10      	ldr	r3, [pc, #64]	; (801350c <tcp_timewait_input+0xe0>)
 80134cc:	881b      	ldrh	r3, [r3, #0]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d00c      	beq.n	80134ec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	8b5b      	ldrh	r3, [r3, #26]
 80134d6:	f043 0302 	orr.w	r3, r3, #2
 80134da:	b29a      	uxth	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f002 f8a5 	bl	8015630 <tcp_output>
  }
  return;
 80134e6:	e001      	b.n	80134ec <tcp_timewait_input+0xc0>
    return;
 80134e8:	bf00      	nop
 80134ea:	e000      	b.n	80134ee <tcp_timewait_input+0xc2>
  return;
 80134ec:	bf00      	nop
}
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	20007114 	.word	0x20007114
 80134f8:	0801d654 	.word	0x0801d654
 80134fc:	0801d86c 	.word	0x0801d86c
 8013500:	0801d6a0 	.word	0x0801d6a0
 8013504:	20007108 	.word	0x20007108
 8013508:	2000710c 	.word	0x2000710c
 801350c:	20007112 	.word	0x20007112
 8013510:	200070f8 	.word	0x200070f8
 8013514:	20000804 	.word	0x20000804
 8013518:	20000808 	.word	0x20000808
 801351c:	200070d0 	.word	0x200070d0

08013520 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013520:	b590      	push	{r4, r7, lr}
 8013522:	b08d      	sub	sp, #52	; 0x34
 8013524:	af04      	add	r7, sp, #16
 8013526:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013528:	2300      	movs	r3, #0
 801352a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801352c:	2300      	movs	r3, #0
 801352e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d106      	bne.n	8013544 <tcp_process+0x24>
 8013536:	4b9d      	ldr	r3, [pc, #628]	; (80137ac <tcp_process+0x28c>)
 8013538:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801353c:	499c      	ldr	r1, [pc, #624]	; (80137b0 <tcp_process+0x290>)
 801353e:	489d      	ldr	r0, [pc, #628]	; (80137b4 <tcp_process+0x294>)
 8013540:	f006 fad6 	bl	8019af0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013544:	4b9c      	ldr	r3, [pc, #624]	; (80137b8 <tcp_process+0x298>)
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	f003 0304 	and.w	r3, r3, #4
 801354c:	2b00      	cmp	r3, #0
 801354e:	d04e      	beq.n	80135ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	7d1b      	ldrb	r3, [r3, #20]
 8013554:	2b02      	cmp	r3, #2
 8013556:	d108      	bne.n	801356a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801355c:	4b97      	ldr	r3, [pc, #604]	; (80137bc <tcp_process+0x29c>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	429a      	cmp	r2, r3
 8013562:	d123      	bne.n	80135ac <tcp_process+0x8c>
        acceptable = 1;
 8013564:	2301      	movs	r3, #1
 8013566:	76fb      	strb	r3, [r7, #27]
 8013568:	e020      	b.n	80135ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801356e:	4b94      	ldr	r3, [pc, #592]	; (80137c0 <tcp_process+0x2a0>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	429a      	cmp	r2, r3
 8013574:	d102      	bne.n	801357c <tcp_process+0x5c>
        acceptable = 1;
 8013576:	2301      	movs	r3, #1
 8013578:	76fb      	strb	r3, [r7, #27]
 801357a:	e017      	b.n	80135ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801357c:	4b90      	ldr	r3, [pc, #576]	; (80137c0 <tcp_process+0x2a0>)
 801357e:	681a      	ldr	r2, [r3, #0]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013584:	1ad3      	subs	r3, r2, r3
 8013586:	2b00      	cmp	r3, #0
 8013588:	db10      	blt.n	80135ac <tcp_process+0x8c>
 801358a:	4b8d      	ldr	r3, [pc, #564]	; (80137c0 <tcp_process+0x2a0>)
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013592:	6879      	ldr	r1, [r7, #4]
 8013594:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013596:	440b      	add	r3, r1
 8013598:	1ad3      	subs	r3, r2, r3
 801359a:	2b00      	cmp	r3, #0
 801359c:	dc06      	bgt.n	80135ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	8b5b      	ldrh	r3, [r3, #26]
 80135a2:	f043 0302 	orr.w	r3, r3, #2
 80135a6:	b29a      	uxth	r2, r3
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80135ac:	7efb      	ldrb	r3, [r7, #27]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d01b      	beq.n	80135ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	7d1b      	ldrb	r3, [r3, #20]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d106      	bne.n	80135c8 <tcp_process+0xa8>
 80135ba:	4b7c      	ldr	r3, [pc, #496]	; (80137ac <tcp_process+0x28c>)
 80135bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80135c0:	4980      	ldr	r1, [pc, #512]	; (80137c4 <tcp_process+0x2a4>)
 80135c2:	487c      	ldr	r0, [pc, #496]	; (80137b4 <tcp_process+0x294>)
 80135c4:	f006 fa94 	bl	8019af0 <iprintf>
      recv_flags |= TF_RESET;
 80135c8:	4b7f      	ldr	r3, [pc, #508]	; (80137c8 <tcp_process+0x2a8>)
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	f043 0308 	orr.w	r3, r3, #8
 80135d0:	b2da      	uxtb	r2, r3
 80135d2:	4b7d      	ldr	r3, [pc, #500]	; (80137c8 <tcp_process+0x2a8>)
 80135d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	8b5b      	ldrh	r3, [r3, #26]
 80135da:	f023 0301 	bic.w	r3, r3, #1
 80135de:	b29a      	uxth	r2, r3
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80135e4:	f06f 030d 	mvn.w	r3, #13
 80135e8:	e37a      	b.n	8013ce0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80135ea:	2300      	movs	r3, #0
 80135ec:	e378      	b.n	8013ce0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80135ee:	4b72      	ldr	r3, [pc, #456]	; (80137b8 <tcp_process+0x298>)
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	f003 0302 	and.w	r3, r3, #2
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d010      	beq.n	801361c <tcp_process+0xfc>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	7d1b      	ldrb	r3, [r3, #20]
 80135fe:	2b02      	cmp	r3, #2
 8013600:	d00c      	beq.n	801361c <tcp_process+0xfc>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	7d1b      	ldrb	r3, [r3, #20]
 8013606:	2b03      	cmp	r3, #3
 8013608:	d008      	beq.n	801361c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	8b5b      	ldrh	r3, [r3, #26]
 801360e:	f043 0302 	orr.w	r3, r3, #2
 8013612:	b29a      	uxth	r2, r3
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013618:	2300      	movs	r3, #0
 801361a:	e361      	b.n	8013ce0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	8b5b      	ldrh	r3, [r3, #26]
 8013620:	f003 0310 	and.w	r3, r3, #16
 8013624:	2b00      	cmp	r3, #0
 8013626:	d103      	bne.n	8013630 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013628:	4b68      	ldr	r3, [pc, #416]	; (80137cc <tcp_process+0x2ac>)
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2200      	movs	r2, #0
 8013634:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2200      	movs	r2, #0
 801363c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f001 fc2f 	bl	8014ea4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	7d1b      	ldrb	r3, [r3, #20]
 801364a:	3b02      	subs	r3, #2
 801364c:	2b07      	cmp	r3, #7
 801364e:	f200 8337 	bhi.w	8013cc0 <tcp_process+0x7a0>
 8013652:	a201      	add	r2, pc, #4	; (adr r2, 8013658 <tcp_process+0x138>)
 8013654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013658:	08013679 	.word	0x08013679
 801365c:	080138a9 	.word	0x080138a9
 8013660:	08013a21 	.word	0x08013a21
 8013664:	08013a4b 	.word	0x08013a4b
 8013668:	08013b6f 	.word	0x08013b6f
 801366c:	08013a21 	.word	0x08013a21
 8013670:	08013bfb 	.word	0x08013bfb
 8013674:	08013c8b 	.word	0x08013c8b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013678:	4b4f      	ldr	r3, [pc, #316]	; (80137b8 <tcp_process+0x298>)
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	f003 0310 	and.w	r3, r3, #16
 8013680:	2b00      	cmp	r3, #0
 8013682:	f000 80e4 	beq.w	801384e <tcp_process+0x32e>
 8013686:	4b4c      	ldr	r3, [pc, #304]	; (80137b8 <tcp_process+0x298>)
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	f003 0302 	and.w	r3, r3, #2
 801368e:	2b00      	cmp	r3, #0
 8013690:	f000 80dd 	beq.w	801384e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013698:	1c5a      	adds	r2, r3, #1
 801369a:	4b48      	ldr	r3, [pc, #288]	; (80137bc <tcp_process+0x29c>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	429a      	cmp	r2, r3
 80136a0:	f040 80d5 	bne.w	801384e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80136a4:	4b46      	ldr	r3, [pc, #280]	; (80137c0 <tcp_process+0x2a0>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	1c5a      	adds	r2, r3, #1
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80136b6:	4b41      	ldr	r3, [pc, #260]	; (80137bc <tcp_process+0x29c>)
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80136be:	4b44      	ldr	r3, [pc, #272]	; (80137d0 <tcp_process+0x2b0>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	89db      	ldrh	r3, [r3, #14]
 80136c4:	b29a      	uxth	r2, r3
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80136d8:	4b39      	ldr	r3, [pc, #228]	; (80137c0 <tcp_process+0x2a0>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	1e5a      	subs	r2, r3, #1
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2204      	movs	r2, #4
 80136e6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	3304      	adds	r3, #4
 80136f0:	4618      	mov	r0, r3
 80136f2:	f004 fad5 	bl	8017ca0 <ip4_route>
 80136f6:	4601      	mov	r1, r0
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	3304      	adds	r3, #4
 80136fc:	461a      	mov	r2, r3
 80136fe:	4620      	mov	r0, r4
 8013700:	f7ff f88c 	bl	801281c <tcp_eff_send_mss_netif>
 8013704:	4603      	mov	r3, r0
 8013706:	461a      	mov	r2, r3
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013710:	009a      	lsls	r2, r3, #2
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013716:	005b      	lsls	r3, r3, #1
 8013718:	f241 111c 	movw	r1, #4380	; 0x111c
 801371c:	428b      	cmp	r3, r1
 801371e:	bf38      	it	cc
 8013720:	460b      	movcc	r3, r1
 8013722:	429a      	cmp	r2, r3
 8013724:	d204      	bcs.n	8013730 <tcp_process+0x210>
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801372a:	009b      	lsls	r3, r3, #2
 801372c:	b29b      	uxth	r3, r3
 801372e:	e00d      	b.n	801374c <tcp_process+0x22c>
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013734:	005b      	lsls	r3, r3, #1
 8013736:	f241 121c 	movw	r2, #4380	; 0x111c
 801373a:	4293      	cmp	r3, r2
 801373c:	d904      	bls.n	8013748 <tcp_process+0x228>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013742:	005b      	lsls	r3, r3, #1
 8013744:	b29b      	uxth	r3, r3
 8013746:	e001      	b.n	801374c <tcp_process+0x22c>
 8013748:	f241 131c 	movw	r3, #4380	; 0x111c
 801374c:	687a      	ldr	r2, [r7, #4]
 801374e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013758:	2b00      	cmp	r3, #0
 801375a:	d106      	bne.n	801376a <tcp_process+0x24a>
 801375c:	4b13      	ldr	r3, [pc, #76]	; (80137ac <tcp_process+0x28c>)
 801375e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013762:	491c      	ldr	r1, [pc, #112]	; (80137d4 <tcp_process+0x2b4>)
 8013764:	4813      	ldr	r0, [pc, #76]	; (80137b4 <tcp_process+0x294>)
 8013766:	f006 f9c3 	bl	8019af0 <iprintf>
        --pcb->snd_queuelen;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013770:	3b01      	subs	r3, #1
 8013772:	b29a      	uxth	r2, r3
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801377e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d12a      	bne.n	80137dc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801378a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d106      	bne.n	80137a0 <tcp_process+0x280>
 8013792:	4b06      	ldr	r3, [pc, #24]	; (80137ac <tcp_process+0x28c>)
 8013794:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013798:	490f      	ldr	r1, [pc, #60]	; (80137d8 <tcp_process+0x2b8>)
 801379a:	4806      	ldr	r0, [pc, #24]	; (80137b4 <tcp_process+0x294>)
 801379c:	f006 f9a8 	bl	8019af0 <iprintf>
          pcb->unsent = rseg->next;
 80137a0:	69fb      	ldr	r3, [r7, #28]
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80137a8:	e01c      	b.n	80137e4 <tcp_process+0x2c4>
 80137aa:	bf00      	nop
 80137ac:	0801d654 	.word	0x0801d654
 80137b0:	0801d88c 	.word	0x0801d88c
 80137b4:	0801d6a0 	.word	0x0801d6a0
 80137b8:	20007114 	.word	0x20007114
 80137bc:	2000710c 	.word	0x2000710c
 80137c0:	20007108 	.word	0x20007108
 80137c4:	0801d8a8 	.word	0x0801d8a8
 80137c8:	20007115 	.word	0x20007115
 80137cc:	200070d0 	.word	0x200070d0
 80137d0:	200070f8 	.word	0x200070f8
 80137d4:	0801d8c8 	.word	0x0801d8c8
 80137d8:	0801d8e0 	.word	0x0801d8e0
        } else {
          pcb->unacked = rseg->next;
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80137e4:	69f8      	ldr	r0, [r7, #28]
 80137e6:	f7fe fd22 	bl	801222e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d104      	bne.n	80137fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137f8:	861a      	strh	r2, [r3, #48]	; 0x30
 80137fa:	e006      	b.n	801380a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2200      	movs	r2, #0
 8013800:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2200      	movs	r2, #0
 8013806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013810:	2b00      	cmp	r3, #0
 8013812:	d00a      	beq.n	801382a <tcp_process+0x30a>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	6910      	ldr	r0, [r2, #16]
 801381e:	2200      	movs	r2, #0
 8013820:	6879      	ldr	r1, [r7, #4]
 8013822:	4798      	blx	r3
 8013824:	4603      	mov	r3, r0
 8013826:	76bb      	strb	r3, [r7, #26]
 8013828:	e001      	b.n	801382e <tcp_process+0x30e>
 801382a:	2300      	movs	r3, #0
 801382c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801382e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013832:	f113 0f0d 	cmn.w	r3, #13
 8013836:	d102      	bne.n	801383e <tcp_process+0x31e>
          return ERR_ABRT;
 8013838:	f06f 030c 	mvn.w	r3, #12
 801383c:	e250      	b.n	8013ce0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	8b5b      	ldrh	r3, [r3, #26]
 8013842:	f043 0302 	orr.w	r3, r3, #2
 8013846:	b29a      	uxth	r2, r3
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801384c:	e23a      	b.n	8013cc4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801384e:	4b98      	ldr	r3, [pc, #608]	; (8013ab0 <tcp_process+0x590>)
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	f003 0310 	and.w	r3, r3, #16
 8013856:	2b00      	cmp	r3, #0
 8013858:	f000 8234 	beq.w	8013cc4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801385c:	4b95      	ldr	r3, [pc, #596]	; (8013ab4 <tcp_process+0x594>)
 801385e:	6819      	ldr	r1, [r3, #0]
 8013860:	4b95      	ldr	r3, [pc, #596]	; (8013ab8 <tcp_process+0x598>)
 8013862:	881b      	ldrh	r3, [r3, #0]
 8013864:	461a      	mov	r2, r3
 8013866:	4b95      	ldr	r3, [pc, #596]	; (8013abc <tcp_process+0x59c>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801386c:	4b94      	ldr	r3, [pc, #592]	; (8013ac0 <tcp_process+0x5a0>)
 801386e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013870:	885b      	ldrh	r3, [r3, #2]
 8013872:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013874:	4a92      	ldr	r2, [pc, #584]	; (8013ac0 <tcp_process+0x5a0>)
 8013876:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013878:	8812      	ldrh	r2, [r2, #0]
 801387a:	b292      	uxth	r2, r2
 801387c:	9202      	str	r2, [sp, #8]
 801387e:	9301      	str	r3, [sp, #4]
 8013880:	4b90      	ldr	r3, [pc, #576]	; (8013ac4 <tcp_process+0x5a4>)
 8013882:	9300      	str	r3, [sp, #0]
 8013884:	4b90      	ldr	r3, [pc, #576]	; (8013ac8 <tcp_process+0x5a8>)
 8013886:	4602      	mov	r2, r0
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f002 fc85 	bl	8016198 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013894:	2b05      	cmp	r3, #5
 8013896:	f200 8215 	bhi.w	8013cc4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2200      	movs	r2, #0
 801389e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f002 fa51 	bl	8015d48 <tcp_rexmit_rto>
      break;
 80138a6:	e20d      	b.n	8013cc4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80138a8:	4b81      	ldr	r3, [pc, #516]	; (8013ab0 <tcp_process+0x590>)
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	f003 0310 	and.w	r3, r3, #16
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	f000 80a1 	beq.w	80139f8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80138b6:	4b7f      	ldr	r3, [pc, #508]	; (8013ab4 <tcp_process+0x594>)
 80138b8:	681a      	ldr	r2, [r3, #0]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138be:	1ad3      	subs	r3, r2, r3
 80138c0:	3b01      	subs	r3, #1
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	db7e      	blt.n	80139c4 <tcp_process+0x4a4>
 80138c6:	4b7b      	ldr	r3, [pc, #492]	; (8013ab4 <tcp_process+0x594>)
 80138c8:	681a      	ldr	r2, [r3, #0]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138ce:	1ad3      	subs	r3, r2, r3
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	dc77      	bgt.n	80139c4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2204      	movs	r2, #4
 80138d8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d102      	bne.n	80138e8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80138e2:	23fa      	movs	r3, #250	; 0xfa
 80138e4:	76bb      	strb	r3, [r7, #26]
 80138e6:	e01d      	b.n	8013924 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138ec:	699b      	ldr	r3, [r3, #24]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d106      	bne.n	8013900 <tcp_process+0x3e0>
 80138f2:	4b76      	ldr	r3, [pc, #472]	; (8013acc <tcp_process+0x5ac>)
 80138f4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80138f8:	4975      	ldr	r1, [pc, #468]	; (8013ad0 <tcp_process+0x5b0>)
 80138fa:	4876      	ldr	r0, [pc, #472]	; (8013ad4 <tcp_process+0x5b4>)
 80138fc:	f006 f8f8 	bl	8019af0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013904:	699b      	ldr	r3, [r3, #24]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d00a      	beq.n	8013920 <tcp_process+0x400>
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801390e:	699b      	ldr	r3, [r3, #24]
 8013910:	687a      	ldr	r2, [r7, #4]
 8013912:	6910      	ldr	r0, [r2, #16]
 8013914:	2200      	movs	r2, #0
 8013916:	6879      	ldr	r1, [r7, #4]
 8013918:	4798      	blx	r3
 801391a:	4603      	mov	r3, r0
 801391c:	76bb      	strb	r3, [r7, #26]
 801391e:	e001      	b.n	8013924 <tcp_process+0x404>
 8013920:	23f0      	movs	r3, #240	; 0xf0
 8013922:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013924:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d00a      	beq.n	8013942 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801392c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013930:	f113 0f0d 	cmn.w	r3, #13
 8013934:	d002      	beq.n	801393c <tcp_process+0x41c>
              tcp_abort(pcb);
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f7fd ff8a 	bl	8011850 <tcp_abort>
            }
            return ERR_ABRT;
 801393c:	f06f 030c 	mvn.w	r3, #12
 8013940:	e1ce      	b.n	8013ce0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f000 fae0 	bl	8013f08 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013948:	4b63      	ldr	r3, [pc, #396]	; (8013ad8 <tcp_process+0x5b8>)
 801394a:	881b      	ldrh	r3, [r3, #0]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d005      	beq.n	801395c <tcp_process+0x43c>
            recv_acked--;
 8013950:	4b61      	ldr	r3, [pc, #388]	; (8013ad8 <tcp_process+0x5b8>)
 8013952:	881b      	ldrh	r3, [r3, #0]
 8013954:	3b01      	subs	r3, #1
 8013956:	b29a      	uxth	r2, r3
 8013958:	4b5f      	ldr	r3, [pc, #380]	; (8013ad8 <tcp_process+0x5b8>)
 801395a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013960:	009a      	lsls	r2, r3, #2
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013966:	005b      	lsls	r3, r3, #1
 8013968:	f241 111c 	movw	r1, #4380	; 0x111c
 801396c:	428b      	cmp	r3, r1
 801396e:	bf38      	it	cc
 8013970:	460b      	movcc	r3, r1
 8013972:	429a      	cmp	r2, r3
 8013974:	d204      	bcs.n	8013980 <tcp_process+0x460>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	b29b      	uxth	r3, r3
 801397e:	e00d      	b.n	801399c <tcp_process+0x47c>
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013984:	005b      	lsls	r3, r3, #1
 8013986:	f241 121c 	movw	r2, #4380	; 0x111c
 801398a:	4293      	cmp	r3, r2
 801398c:	d904      	bls.n	8013998 <tcp_process+0x478>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013992:	005b      	lsls	r3, r3, #1
 8013994:	b29b      	uxth	r3, r3
 8013996:	e001      	b.n	801399c <tcp_process+0x47c>
 8013998:	f241 131c 	movw	r3, #4380	; 0x111c
 801399c:	687a      	ldr	r2, [r7, #4]
 801399e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80139a2:	4b4e      	ldr	r3, [pc, #312]	; (8013adc <tcp_process+0x5bc>)
 80139a4:	781b      	ldrb	r3, [r3, #0]
 80139a6:	f003 0320 	and.w	r3, r3, #32
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d037      	beq.n	8013a1e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	8b5b      	ldrh	r3, [r3, #26]
 80139b2:	f043 0302 	orr.w	r3, r3, #2
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2207      	movs	r2, #7
 80139c0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80139c2:	e02c      	b.n	8013a1e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139c4:	4b3b      	ldr	r3, [pc, #236]	; (8013ab4 <tcp_process+0x594>)
 80139c6:	6819      	ldr	r1, [r3, #0]
 80139c8:	4b3b      	ldr	r3, [pc, #236]	; (8013ab8 <tcp_process+0x598>)
 80139ca:	881b      	ldrh	r3, [r3, #0]
 80139cc:	461a      	mov	r2, r3
 80139ce:	4b3b      	ldr	r3, [pc, #236]	; (8013abc <tcp_process+0x59c>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80139d4:	4b3a      	ldr	r3, [pc, #232]	; (8013ac0 <tcp_process+0x5a0>)
 80139d6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139d8:	885b      	ldrh	r3, [r3, #2]
 80139da:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80139dc:	4a38      	ldr	r2, [pc, #224]	; (8013ac0 <tcp_process+0x5a0>)
 80139de:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139e0:	8812      	ldrh	r2, [r2, #0]
 80139e2:	b292      	uxth	r2, r2
 80139e4:	9202      	str	r2, [sp, #8]
 80139e6:	9301      	str	r3, [sp, #4]
 80139e8:	4b36      	ldr	r3, [pc, #216]	; (8013ac4 <tcp_process+0x5a4>)
 80139ea:	9300      	str	r3, [sp, #0]
 80139ec:	4b36      	ldr	r3, [pc, #216]	; (8013ac8 <tcp_process+0x5a8>)
 80139ee:	4602      	mov	r2, r0
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f002 fbd1 	bl	8016198 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80139f6:	e167      	b.n	8013cc8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80139f8:	4b2d      	ldr	r3, [pc, #180]	; (8013ab0 <tcp_process+0x590>)
 80139fa:	781b      	ldrb	r3, [r3, #0]
 80139fc:	f003 0302 	and.w	r3, r3, #2
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f000 8161 	beq.w	8013cc8 <tcp_process+0x7a8>
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a0a:	1e5a      	subs	r2, r3, #1
 8013a0c:	4b2b      	ldr	r3, [pc, #172]	; (8013abc <tcp_process+0x59c>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	f040 8159 	bne.w	8013cc8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f002 f9b8 	bl	8015d8c <tcp_rexmit>
      break;
 8013a1c:	e154      	b.n	8013cc8 <tcp_process+0x7a8>
 8013a1e:	e153      	b.n	8013cc8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f000 fa71 	bl	8013f08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013a26:	4b2d      	ldr	r3, [pc, #180]	; (8013adc <tcp_process+0x5bc>)
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	f003 0320 	and.w	r3, r3, #32
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	f000 814c 	beq.w	8013ccc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	8b5b      	ldrh	r3, [r3, #26]
 8013a38:	f043 0302 	orr.w	r3, r3, #2
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2207      	movs	r2, #7
 8013a46:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a48:	e140      	b.n	8013ccc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f000 fa5c 	bl	8013f08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013a50:	4b22      	ldr	r3, [pc, #136]	; (8013adc <tcp_process+0x5bc>)
 8013a52:	781b      	ldrb	r3, [r3, #0]
 8013a54:	f003 0320 	and.w	r3, r3, #32
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d071      	beq.n	8013b40 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a5c:	4b14      	ldr	r3, [pc, #80]	; (8013ab0 <tcp_process+0x590>)
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	f003 0310 	and.w	r3, r3, #16
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d060      	beq.n	8013b2a <tcp_process+0x60a>
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a6c:	4b11      	ldr	r3, [pc, #68]	; (8013ab4 <tcp_process+0x594>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d15a      	bne.n	8013b2a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d156      	bne.n	8013b2a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	8b5b      	ldrh	r3, [r3, #26]
 8013a80:	f043 0302 	orr.w	r3, r3, #2
 8013a84:	b29a      	uxth	r2, r3
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f7fe fdbc 	bl	8012608 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013a90:	4b13      	ldr	r3, [pc, #76]	; (8013ae0 <tcp_process+0x5c0>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d105      	bne.n	8013aa6 <tcp_process+0x586>
 8013a9a:	4b11      	ldr	r3, [pc, #68]	; (8013ae0 <tcp_process+0x5c0>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	68db      	ldr	r3, [r3, #12]
 8013aa0:	4a0f      	ldr	r2, [pc, #60]	; (8013ae0 <tcp_process+0x5c0>)
 8013aa2:	6013      	str	r3, [r2, #0]
 8013aa4:	e02e      	b.n	8013b04 <tcp_process+0x5e4>
 8013aa6:	4b0e      	ldr	r3, [pc, #56]	; (8013ae0 <tcp_process+0x5c0>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	617b      	str	r3, [r7, #20]
 8013aac:	e027      	b.n	8013afe <tcp_process+0x5de>
 8013aae:	bf00      	nop
 8013ab0:	20007114 	.word	0x20007114
 8013ab4:	2000710c 	.word	0x2000710c
 8013ab8:	20007112 	.word	0x20007112
 8013abc:	20007108 	.word	0x20007108
 8013ac0:	200070f8 	.word	0x200070f8
 8013ac4:	20000804 	.word	0x20000804
 8013ac8:	20000808 	.word	0x20000808
 8013acc:	0801d654 	.word	0x0801d654
 8013ad0:	0801d8f4 	.word	0x0801d8f4
 8013ad4:	0801d6a0 	.word	0x0801d6a0
 8013ad8:	20007110 	.word	0x20007110
 8013adc:	20007115 	.word	0x20007115
 8013ae0:	200070dc 	.word	0x200070dc
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	687a      	ldr	r2, [r7, #4]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d104      	bne.n	8013af8 <tcp_process+0x5d8>
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	68da      	ldr	r2, [r3, #12]
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	60da      	str	r2, [r3, #12]
 8013af6:	e005      	b.n	8013b04 <tcp_process+0x5e4>
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	68db      	ldr	r3, [r3, #12]
 8013afc:	617b      	str	r3, [r7, #20]
 8013afe:	697b      	ldr	r3, [r7, #20]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d1ef      	bne.n	8013ae4 <tcp_process+0x5c4>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2200      	movs	r2, #0
 8013b08:	60da      	str	r2, [r3, #12]
 8013b0a:	4b77      	ldr	r3, [pc, #476]	; (8013ce8 <tcp_process+0x7c8>)
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	220a      	movs	r2, #10
 8013b14:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013b16:	4b75      	ldr	r3, [pc, #468]	; (8013cec <tcp_process+0x7cc>)
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	60da      	str	r2, [r3, #12]
 8013b1e:	4a73      	ldr	r2, [pc, #460]	; (8013cec <tcp_process+0x7cc>)
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6013      	str	r3, [r2, #0]
 8013b24:	f002 fcfa 	bl	801651c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013b28:	e0d2      	b.n	8013cd0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	8b5b      	ldrh	r3, [r3, #26]
 8013b2e:	f043 0302 	orr.w	r3, r3, #2
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2208      	movs	r2, #8
 8013b3c:	751a      	strb	r2, [r3, #20]
      break;
 8013b3e:	e0c7      	b.n	8013cd0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b40:	4b6b      	ldr	r3, [pc, #428]	; (8013cf0 <tcp_process+0x7d0>)
 8013b42:	781b      	ldrb	r3, [r3, #0]
 8013b44:	f003 0310 	and.w	r3, r3, #16
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f000 80c1 	beq.w	8013cd0 <tcp_process+0x7b0>
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b52:	4b68      	ldr	r3, [pc, #416]	; (8013cf4 <tcp_process+0x7d4>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	429a      	cmp	r2, r3
 8013b58:	f040 80ba 	bne.w	8013cd0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f040 80b5 	bne.w	8013cd0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2206      	movs	r2, #6
 8013b6a:	751a      	strb	r2, [r3, #20]
      break;
 8013b6c:	e0b0      	b.n	8013cd0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 f9ca 	bl	8013f08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013b74:	4b60      	ldr	r3, [pc, #384]	; (8013cf8 <tcp_process+0x7d8>)
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	f003 0320 	and.w	r3, r3, #32
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	f000 80a9 	beq.w	8013cd4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	8b5b      	ldrh	r3, [r3, #26]
 8013b86:	f043 0302 	orr.w	r3, r3, #2
 8013b8a:	b29a      	uxth	r2, r3
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7fe fd39 	bl	8012608 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013b96:	4b59      	ldr	r3, [pc, #356]	; (8013cfc <tcp_process+0x7dc>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	687a      	ldr	r2, [r7, #4]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d105      	bne.n	8013bac <tcp_process+0x68c>
 8013ba0:	4b56      	ldr	r3, [pc, #344]	; (8013cfc <tcp_process+0x7dc>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	68db      	ldr	r3, [r3, #12]
 8013ba6:	4a55      	ldr	r2, [pc, #340]	; (8013cfc <tcp_process+0x7dc>)
 8013ba8:	6013      	str	r3, [r2, #0]
 8013baa:	e013      	b.n	8013bd4 <tcp_process+0x6b4>
 8013bac:	4b53      	ldr	r3, [pc, #332]	; (8013cfc <tcp_process+0x7dc>)
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	613b      	str	r3, [r7, #16]
 8013bb2:	e00c      	b.n	8013bce <tcp_process+0x6ae>
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	687a      	ldr	r2, [r7, #4]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d104      	bne.n	8013bc8 <tcp_process+0x6a8>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	68da      	ldr	r2, [r3, #12]
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	60da      	str	r2, [r3, #12]
 8013bc6:	e005      	b.n	8013bd4 <tcp_process+0x6b4>
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	68db      	ldr	r3, [r3, #12]
 8013bcc:	613b      	str	r3, [r7, #16]
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d1ef      	bne.n	8013bb4 <tcp_process+0x694>
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	60da      	str	r2, [r3, #12]
 8013bda:	4b43      	ldr	r3, [pc, #268]	; (8013ce8 <tcp_process+0x7c8>)
 8013bdc:	2201      	movs	r2, #1
 8013bde:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	220a      	movs	r2, #10
 8013be4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013be6:	4b41      	ldr	r3, [pc, #260]	; (8013cec <tcp_process+0x7cc>)
 8013be8:	681a      	ldr	r2, [r3, #0]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	60da      	str	r2, [r3, #12]
 8013bee:	4a3f      	ldr	r2, [pc, #252]	; (8013cec <tcp_process+0x7cc>)
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6013      	str	r3, [r2, #0]
 8013bf4:	f002 fc92 	bl	801651c <tcp_timer_needed>
      }
      break;
 8013bf8:	e06c      	b.n	8013cd4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f000 f984 	bl	8013f08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013c00:	4b3b      	ldr	r3, [pc, #236]	; (8013cf0 <tcp_process+0x7d0>)
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	f003 0310 	and.w	r3, r3, #16
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d065      	beq.n	8013cd8 <tcp_process+0x7b8>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013c10:	4b38      	ldr	r3, [pc, #224]	; (8013cf4 <tcp_process+0x7d4>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d15f      	bne.n	8013cd8 <tcp_process+0x7b8>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d15b      	bne.n	8013cd8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7fe fcf1 	bl	8012608 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013c26:	4b35      	ldr	r3, [pc, #212]	; (8013cfc <tcp_process+0x7dc>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	687a      	ldr	r2, [r7, #4]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d105      	bne.n	8013c3c <tcp_process+0x71c>
 8013c30:	4b32      	ldr	r3, [pc, #200]	; (8013cfc <tcp_process+0x7dc>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	68db      	ldr	r3, [r3, #12]
 8013c36:	4a31      	ldr	r2, [pc, #196]	; (8013cfc <tcp_process+0x7dc>)
 8013c38:	6013      	str	r3, [r2, #0]
 8013c3a:	e013      	b.n	8013c64 <tcp_process+0x744>
 8013c3c:	4b2f      	ldr	r3, [pc, #188]	; (8013cfc <tcp_process+0x7dc>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	60fb      	str	r3, [r7, #12]
 8013c42:	e00c      	b.n	8013c5e <tcp_process+0x73e>
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	687a      	ldr	r2, [r7, #4]
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d104      	bne.n	8013c58 <tcp_process+0x738>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	68da      	ldr	r2, [r3, #12]
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	60da      	str	r2, [r3, #12]
 8013c56:	e005      	b.n	8013c64 <tcp_process+0x744>
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	60fb      	str	r3, [r7, #12]
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d1ef      	bne.n	8013c44 <tcp_process+0x724>
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2200      	movs	r2, #0
 8013c68:	60da      	str	r2, [r3, #12]
 8013c6a:	4b1f      	ldr	r3, [pc, #124]	; (8013ce8 <tcp_process+0x7c8>)
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	220a      	movs	r2, #10
 8013c74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013c76:	4b1d      	ldr	r3, [pc, #116]	; (8013cec <tcp_process+0x7cc>)
 8013c78:	681a      	ldr	r2, [r3, #0]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	60da      	str	r2, [r3, #12]
 8013c7e:	4a1b      	ldr	r2, [pc, #108]	; (8013cec <tcp_process+0x7cc>)
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6013      	str	r3, [r2, #0]
 8013c84:	f002 fc4a 	bl	801651c <tcp_timer_needed>
      }
      break;
 8013c88:	e026      	b.n	8013cd8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f000 f93c 	bl	8013f08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013c90:	4b17      	ldr	r3, [pc, #92]	; (8013cf0 <tcp_process+0x7d0>)
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	f003 0310 	and.w	r3, r3, #16
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d01f      	beq.n	8013cdc <tcp_process+0x7bc>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ca0:	4b14      	ldr	r3, [pc, #80]	; (8013cf4 <tcp_process+0x7d4>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d119      	bne.n	8013cdc <tcp_process+0x7bc>
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d115      	bne.n	8013cdc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013cb0:	4b11      	ldr	r3, [pc, #68]	; (8013cf8 <tcp_process+0x7d8>)
 8013cb2:	781b      	ldrb	r3, [r3, #0]
 8013cb4:	f043 0310 	orr.w	r3, r3, #16
 8013cb8:	b2da      	uxtb	r2, r3
 8013cba:	4b0f      	ldr	r3, [pc, #60]	; (8013cf8 <tcp_process+0x7d8>)
 8013cbc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013cbe:	e00d      	b.n	8013cdc <tcp_process+0x7bc>
    default:
      break;
 8013cc0:	bf00      	nop
 8013cc2:	e00c      	b.n	8013cde <tcp_process+0x7be>
      break;
 8013cc4:	bf00      	nop
 8013cc6:	e00a      	b.n	8013cde <tcp_process+0x7be>
      break;
 8013cc8:	bf00      	nop
 8013cca:	e008      	b.n	8013cde <tcp_process+0x7be>
      break;
 8013ccc:	bf00      	nop
 8013cce:	e006      	b.n	8013cde <tcp_process+0x7be>
      break;
 8013cd0:	bf00      	nop
 8013cd2:	e004      	b.n	8013cde <tcp_process+0x7be>
      break;
 8013cd4:	bf00      	nop
 8013cd6:	e002      	b.n	8013cde <tcp_process+0x7be>
      break;
 8013cd8:	bf00      	nop
 8013cda:	e000      	b.n	8013cde <tcp_process+0x7be>
      break;
 8013cdc:	bf00      	nop
  }
  return ERR_OK;
 8013cde:	2300      	movs	r3, #0
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3724      	adds	r7, #36	; 0x24
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd90      	pop	{r4, r7, pc}
 8013ce8:	200070e4 	.word	0x200070e4
 8013cec:	200070e0 	.word	0x200070e0
 8013cf0:	20007114 	.word	0x20007114
 8013cf4:	2000710c 	.word	0x2000710c
 8013cf8:	20007115 	.word	0x20007115
 8013cfc:	200070dc 	.word	0x200070dc

08013d00 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013d00:	b590      	push	{r4, r7, lr}
 8013d02:	b085      	sub	sp, #20
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d106      	bne.n	8013d1e <tcp_oos_insert_segment+0x1e>
 8013d10:	4b3b      	ldr	r3, [pc, #236]	; (8013e00 <tcp_oos_insert_segment+0x100>)
 8013d12:	f240 421f 	movw	r2, #1055	; 0x41f
 8013d16:	493b      	ldr	r1, [pc, #236]	; (8013e04 <tcp_oos_insert_segment+0x104>)
 8013d18:	483b      	ldr	r0, [pc, #236]	; (8013e08 <tcp_oos_insert_segment+0x108>)
 8013d1a:	f005 fee9 	bl	8019af0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	68db      	ldr	r3, [r3, #12]
 8013d22:	899b      	ldrh	r3, [r3, #12]
 8013d24:	b29b      	uxth	r3, r3
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7fb fc26 	bl	800f578 <lwip_htons>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	f003 0301 	and.w	r3, r3, #1
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d028      	beq.n	8013d8a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013d38:	6838      	ldr	r0, [r7, #0]
 8013d3a:	f7fe fa63 	bl	8012204 <tcp_segs_free>
    next = NULL;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	603b      	str	r3, [r7, #0]
 8013d42:	e056      	b.n	8013df2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	68db      	ldr	r3, [r3, #12]
 8013d48:	899b      	ldrh	r3, [r3, #12]
 8013d4a:	b29b      	uxth	r3, r3
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fb fc13 	bl	800f578 <lwip_htons>
 8013d52:	4603      	mov	r3, r0
 8013d54:	b2db      	uxtb	r3, r3
 8013d56:	f003 0301 	and.w	r3, r3, #1
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d00d      	beq.n	8013d7a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	68db      	ldr	r3, [r3, #12]
 8013d62:	899b      	ldrh	r3, [r3, #12]
 8013d64:	b29c      	uxth	r4, r3
 8013d66:	2001      	movs	r0, #1
 8013d68:	f7fb fc06 	bl	800f578 <lwip_htons>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	461a      	mov	r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	4322      	orrs	r2, r4
 8013d76:	b292      	uxth	r2, r2
 8013d78:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013d84:	68f8      	ldr	r0, [r7, #12]
 8013d86:	f7fe fa52 	bl	801222e <tcp_seg_free>
    while (next &&
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d00e      	beq.n	8013dae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	891b      	ldrh	r3, [r3, #8]
 8013d94:	461a      	mov	r2, r3
 8013d96:	4b1d      	ldr	r3, [pc, #116]	; (8013e0c <tcp_oos_insert_segment+0x10c>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	441a      	add	r2, r3
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	6839      	ldr	r1, [r7, #0]
 8013da4:	8909      	ldrh	r1, [r1, #8]
 8013da6:	440b      	add	r3, r1
 8013da8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	daca      	bge.n	8013d44 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d01e      	beq.n	8013df2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	891b      	ldrh	r3, [r3, #8]
 8013db8:	461a      	mov	r2, r3
 8013dba:	4b14      	ldr	r3, [pc, #80]	; (8013e0c <tcp_oos_insert_segment+0x10c>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	441a      	add	r2, r3
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	68db      	ldr	r3, [r3, #12]
 8013dc4:	685b      	ldr	r3, [r3, #4]
 8013dc6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	dd12      	ble.n	8013df2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	68db      	ldr	r3, [r3, #12]
 8013dd0:	685b      	ldr	r3, [r3, #4]
 8013dd2:	b29a      	uxth	r2, r3
 8013dd4:	4b0d      	ldr	r3, [pc, #52]	; (8013e0c <tcp_oos_insert_segment+0x10c>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	1ad3      	subs	r3, r2, r3
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	685a      	ldr	r2, [r3, #4]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	891b      	ldrh	r3, [r3, #8]
 8013dea:	4619      	mov	r1, r3
 8013dec:	4610      	mov	r0, r2
 8013dee:	f7fc fe23 	bl	8010a38 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	683a      	ldr	r2, [r7, #0]
 8013df6:	601a      	str	r2, [r3, #0]
}
 8013df8:	bf00      	nop
 8013dfa:	3714      	adds	r7, #20
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd90      	pop	{r4, r7, pc}
 8013e00:	0801d654 	.word	0x0801d654
 8013e04:	0801d914 	.word	0x0801d914
 8013e08:	0801d6a0 	.word	0x0801d6a0
 8013e0c:	20007108 	.word	0x20007108

08013e10 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013e10:	b5b0      	push	{r4, r5, r7, lr}
 8013e12:	b086      	sub	sp, #24
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	60f8      	str	r0, [r7, #12]
 8013e18:	60b9      	str	r1, [r7, #8]
 8013e1a:	607a      	str	r2, [r7, #4]
 8013e1c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013e1e:	e03e      	b.n	8013e9e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	685b      	ldr	r3, [r3, #4]
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7fd f80e 	bl	8010e50 <pbuf_clen>
 8013e34:	4603      	mov	r3, r0
 8013e36:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e3e:	8a7a      	ldrh	r2, [r7, #18]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d906      	bls.n	8013e52 <tcp_free_acked_segments+0x42>
 8013e44:	4b2a      	ldr	r3, [pc, #168]	; (8013ef0 <tcp_free_acked_segments+0xe0>)
 8013e46:	f240 4257 	movw	r2, #1111	; 0x457
 8013e4a:	492a      	ldr	r1, [pc, #168]	; (8013ef4 <tcp_free_acked_segments+0xe4>)
 8013e4c:	482a      	ldr	r0, [pc, #168]	; (8013ef8 <tcp_free_acked_segments+0xe8>)
 8013e4e:	f005 fe4f 	bl	8019af0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013e58:	8a7b      	ldrh	r3, [r7, #18]
 8013e5a:	1ad3      	subs	r3, r2, r3
 8013e5c:	b29a      	uxth	r2, r3
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	891a      	ldrh	r2, [r3, #8]
 8013e68:	4b24      	ldr	r3, [pc, #144]	; (8013efc <tcp_free_acked_segments+0xec>)
 8013e6a:	881b      	ldrh	r3, [r3, #0]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	b29a      	uxth	r2, r3
 8013e70:	4b22      	ldr	r3, [pc, #136]	; (8013efc <tcp_free_acked_segments+0xec>)
 8013e72:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013e74:	6978      	ldr	r0, [r7, #20]
 8013e76:	f7fe f9da 	bl	801222e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d00c      	beq.n	8013e9e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d109      	bne.n	8013e9e <tcp_free_acked_segments+0x8e>
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d106      	bne.n	8013e9e <tcp_free_acked_segments+0x8e>
 8013e90:	4b17      	ldr	r3, [pc, #92]	; (8013ef0 <tcp_free_acked_segments+0xe0>)
 8013e92:	f240 4261 	movw	r2, #1121	; 0x461
 8013e96:	491a      	ldr	r1, [pc, #104]	; (8013f00 <tcp_free_acked_segments+0xf0>)
 8013e98:	4817      	ldr	r0, [pc, #92]	; (8013ef8 <tcp_free_acked_segments+0xe8>)
 8013e9a:	f005 fe29 	bl	8019af0 <iprintf>
  while (seg_list != NULL &&
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d020      	beq.n	8013ee6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	68db      	ldr	r3, [r3, #12]
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7fb fb79 	bl	800f5a2 <lwip_htonl>
 8013eb0:	4604      	mov	r4, r0
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	891b      	ldrh	r3, [r3, #8]
 8013eb6:	461d      	mov	r5, r3
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	899b      	ldrh	r3, [r3, #12]
 8013ebe:	b29b      	uxth	r3, r3
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7fb fb59 	bl	800f578 <lwip_htons>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	b2db      	uxtb	r3, r3
 8013eca:	f003 0303 	and.w	r3, r3, #3
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d001      	beq.n	8013ed6 <tcp_free_acked_segments+0xc6>
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	e000      	b.n	8013ed8 <tcp_free_acked_segments+0xc8>
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	442b      	add	r3, r5
 8013eda:	18e2      	adds	r2, r4, r3
 8013edc:	4b09      	ldr	r3, [pc, #36]	; (8013f04 <tcp_free_acked_segments+0xf4>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	dd9c      	ble.n	8013e20 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013ee6:	68bb      	ldr	r3, [r7, #8]
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3718      	adds	r7, #24
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bdb0      	pop	{r4, r5, r7, pc}
 8013ef0:	0801d654 	.word	0x0801d654
 8013ef4:	0801d93c 	.word	0x0801d93c
 8013ef8:	0801d6a0 	.word	0x0801d6a0
 8013efc:	20007110 	.word	0x20007110
 8013f00:	0801d964 	.word	0x0801d964
 8013f04:	2000710c 	.word	0x2000710c

08013f08 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013f08:	b5b0      	push	{r4, r5, r7, lr}
 8013f0a:	b094      	sub	sp, #80	; 0x50
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013f10:	2300      	movs	r3, #0
 8013f12:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d106      	bne.n	8013f28 <tcp_receive+0x20>
 8013f1a:	4b91      	ldr	r3, [pc, #580]	; (8014160 <tcp_receive+0x258>)
 8013f1c:	f240 427b 	movw	r2, #1147	; 0x47b
 8013f20:	4990      	ldr	r1, [pc, #576]	; (8014164 <tcp_receive+0x25c>)
 8013f22:	4891      	ldr	r0, [pc, #580]	; (8014168 <tcp_receive+0x260>)
 8013f24:	f005 fde4 	bl	8019af0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	7d1b      	ldrb	r3, [r3, #20]
 8013f2c:	2b03      	cmp	r3, #3
 8013f2e:	d806      	bhi.n	8013f3e <tcp_receive+0x36>
 8013f30:	4b8b      	ldr	r3, [pc, #556]	; (8014160 <tcp_receive+0x258>)
 8013f32:	f240 427c 	movw	r2, #1148	; 0x47c
 8013f36:	498d      	ldr	r1, [pc, #564]	; (801416c <tcp_receive+0x264>)
 8013f38:	488b      	ldr	r0, [pc, #556]	; (8014168 <tcp_receive+0x260>)
 8013f3a:	f005 fdd9 	bl	8019af0 <iprintf>

  if (flags & TCP_ACK) {
 8013f3e:	4b8c      	ldr	r3, [pc, #560]	; (8014170 <tcp_receive+0x268>)
 8013f40:	781b      	ldrb	r3, [r3, #0]
 8013f42:	f003 0310 	and.w	r3, r3, #16
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	f000 8264 	beq.w	8014414 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f52:	461a      	mov	r2, r3
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f58:	4413      	add	r3, r2
 8013f5a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f60:	4b84      	ldr	r3, [pc, #528]	; (8014174 <tcp_receive+0x26c>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	1ad3      	subs	r3, r2, r3
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	db1b      	blt.n	8013fa2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f6e:	4b81      	ldr	r3, [pc, #516]	; (8014174 <tcp_receive+0x26c>)
 8013f70:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d106      	bne.n	8013f84 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013f7a:	4b7f      	ldr	r3, [pc, #508]	; (8014178 <tcp_receive+0x270>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	1ad3      	subs	r3, r2, r3
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	db0e      	blt.n	8013fa2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013f88:	4b7b      	ldr	r3, [pc, #492]	; (8014178 <tcp_receive+0x270>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013f8c:	429a      	cmp	r2, r3
 8013f8e:	d125      	bne.n	8013fdc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013f90:	4b7a      	ldr	r3, [pc, #488]	; (801417c <tcp_receive+0x274>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	89db      	ldrh	r3, [r3, #14]
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d91c      	bls.n	8013fdc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013fa2:	4b76      	ldr	r3, [pc, #472]	; (801417c <tcp_receive+0x274>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	89db      	ldrh	r3, [r3, #14]
 8013fa8:	b29a      	uxth	r2, r3
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d205      	bcs.n	8013fcc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013fcc:	4b69      	ldr	r3, [pc, #420]	; (8014174 <tcp_receive+0x26c>)
 8013fce:	681a      	ldr	r2, [r3, #0]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013fd4:	4b68      	ldr	r3, [pc, #416]	; (8014178 <tcp_receive+0x270>)
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013fdc:	4b66      	ldr	r3, [pc, #408]	; (8014178 <tcp_receive+0x270>)
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fe4:	1ad3      	subs	r3, r2, r3
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	dc58      	bgt.n	801409c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013fea:	4b65      	ldr	r3, [pc, #404]	; (8014180 <tcp_receive+0x278>)
 8013fec:	881b      	ldrh	r3, [r3, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d14b      	bne.n	801408a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013ffc:	4413      	add	r3, r2
 8013ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014000:	429a      	cmp	r2, r3
 8014002:	d142      	bne.n	801408a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801400a:	2b00      	cmp	r3, #0
 801400c:	db3d      	blt.n	801408a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014012:	4b59      	ldr	r3, [pc, #356]	; (8014178 <tcp_receive+0x270>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	429a      	cmp	r2, r3
 8014018:	d137      	bne.n	801408a <tcp_receive+0x182>
              found_dupack = 1;
 801401a:	2301      	movs	r3, #1
 801401c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014024:	2bff      	cmp	r3, #255	; 0xff
 8014026:	d007      	beq.n	8014038 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801402e:	3301      	adds	r3, #1
 8014030:	b2da      	uxtb	r2, r3
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801403e:	2b03      	cmp	r3, #3
 8014040:	d91b      	bls.n	801407a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801404c:	4413      	add	r3, r2
 801404e:	b29a      	uxth	r2, r3
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014056:	429a      	cmp	r2, r3
 8014058:	d30a      	bcc.n	8014070 <tcp_receive+0x168>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014064:	4413      	add	r3, r2
 8014066:	b29a      	uxth	r2, r3
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801406e:	e004      	b.n	801407a <tcp_receive+0x172>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014076:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014080:	2b02      	cmp	r3, #2
 8014082:	d902      	bls.n	801408a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f001 feed 	bl	8015e64 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801408a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801408c:	2b00      	cmp	r3, #0
 801408e:	f040 8161 	bne.w	8014354 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2200      	movs	r2, #0
 8014096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801409a:	e15b      	b.n	8014354 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801409c:	4b36      	ldr	r3, [pc, #216]	; (8014178 <tcp_receive+0x270>)
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140a4:	1ad3      	subs	r3, r2, r3
 80140a6:	3b01      	subs	r3, #1
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	f2c0 814e 	blt.w	801434a <tcp_receive+0x442>
 80140ae:	4b32      	ldr	r3, [pc, #200]	; (8014178 <tcp_receive+0x270>)
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140b6:	1ad3      	subs	r3, r2, r3
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	f300 8146 	bgt.w	801434a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	8b5b      	ldrh	r3, [r3, #26]
 80140c2:	f003 0304 	and.w	r3, r3, #4
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d010      	beq.n	80140ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	8b5b      	ldrh	r3, [r3, #26]
 80140ce:	f023 0304 	bic.w	r3, r3, #4
 80140d2:	b29a      	uxth	r2, r3
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2200      	movs	r2, #0
 80140e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2200      	movs	r2, #0
 80140f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140fa:	10db      	asrs	r3, r3, #3
 80140fc:	b21b      	sxth	r3, r3
 80140fe:	b29a      	uxth	r2, r3
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014106:	b29b      	uxth	r3, r3
 8014108:	4413      	add	r3, r2
 801410a:	b29b      	uxth	r3, r3
 801410c:	b21a      	sxth	r2, r3
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014114:	4b18      	ldr	r3, [pc, #96]	; (8014178 <tcp_receive+0x270>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	b29a      	uxth	r2, r3
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801411e:	b29b      	uxth	r3, r3
 8014120:	1ad3      	subs	r3, r2, r3
 8014122:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2200      	movs	r2, #0
 8014128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801412c:	4b12      	ldr	r3, [pc, #72]	; (8014178 <tcp_receive+0x270>)
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	7d1b      	ldrb	r3, [r3, #20]
 8014138:	2b03      	cmp	r3, #3
 801413a:	f240 8097 	bls.w	801426c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801414a:	429a      	cmp	r2, r3
 801414c:	d245      	bcs.n	80141da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	8b5b      	ldrh	r3, [r3, #26]
 8014152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014156:	2b00      	cmp	r3, #0
 8014158:	d014      	beq.n	8014184 <tcp_receive+0x27c>
 801415a:	2301      	movs	r3, #1
 801415c:	e013      	b.n	8014186 <tcp_receive+0x27e>
 801415e:	bf00      	nop
 8014160:	0801d654 	.word	0x0801d654
 8014164:	0801d984 	.word	0x0801d984
 8014168:	0801d6a0 	.word	0x0801d6a0
 801416c:	0801d9a0 	.word	0x0801d9a0
 8014170:	20007114 	.word	0x20007114
 8014174:	20007108 	.word	0x20007108
 8014178:	2000710c 	.word	0x2000710c
 801417c:	200070f8 	.word	0x200070f8
 8014180:	20007112 	.word	0x20007112
 8014184:	2302      	movs	r3, #2
 8014186:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801418a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801418e:	b29a      	uxth	r2, r3
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014194:	fb12 f303 	smulbb	r3, r2, r3
 8014198:	b29b      	uxth	r3, r3
 801419a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801419c:	4293      	cmp	r3, r2
 801419e:	bf28      	it	cs
 80141a0:	4613      	movcs	r3, r2
 80141a2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141ac:	4413      	add	r3, r2
 80141ae:	b29a      	uxth	r2, r3
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80141b6:	429a      	cmp	r2, r3
 80141b8:	d309      	bcc.n	80141ce <tcp_receive+0x2c6>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80141c2:	4413      	add	r3, r2
 80141c4:	b29a      	uxth	r2, r3
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80141cc:	e04e      	b.n	801426c <tcp_receive+0x364>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80141d8:	e048      	b.n	801426c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80141e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80141e2:	4413      	add	r3, r2
 80141e4:	b29a      	uxth	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d309      	bcc.n	8014204 <tcp_receive+0x2fc>
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80141f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80141f8:	4413      	add	r3, r2
 80141fa:	b29a      	uxth	r2, r3
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014202:	e004      	b.n	801420e <tcp_receive+0x306>
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801420a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801421a:	429a      	cmp	r2, r3
 801421c:	d326      	bcc.n	801426c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801422a:	1ad3      	subs	r3, r2, r3
 801422c:	b29a      	uxth	r2, r3
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801423e:	4413      	add	r3, r2
 8014240:	b29a      	uxth	r2, r3
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014248:	429a      	cmp	r2, r3
 801424a:	d30a      	bcc.n	8014262 <tcp_receive+0x35a>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014256:	4413      	add	r3, r2
 8014258:	b29a      	uxth	r2, r3
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014260:	e004      	b.n	801426c <tcp_receive+0x364>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014268:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014274:	4a98      	ldr	r2, [pc, #608]	; (80144d8 <tcp_receive+0x5d0>)
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	f7ff fdca 	bl	8013e10 <tcp_free_acked_segments>
 801427c:	4602      	mov	r2, r0
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801428a:	4a94      	ldr	r2, [pc, #592]	; (80144dc <tcp_receive+0x5d4>)
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7ff fdbf 	bl	8013e10 <tcp_free_acked_segments>
 8014292:	4602      	mov	r2, r0
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801429c:	2b00      	cmp	r3, #0
 801429e:	d104      	bne.n	80142aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80142a8:	e002      	b.n	80142b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2200      	movs	r2, #0
 80142ae:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2200      	movs	r2, #0
 80142b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d103      	bne.n	80142c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2200      	movs	r2, #0
 80142c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80142cc:	4b84      	ldr	r3, [pc, #528]	; (80144e0 <tcp_receive+0x5d8>)
 80142ce:	881b      	ldrh	r3, [r3, #0]
 80142d0:	4413      	add	r3, r2
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	8b5b      	ldrh	r3, [r3, #26]
 80142de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d035      	beq.n	8014352 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d118      	bne.n	8014320 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d00c      	beq.n	8014310 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	685b      	ldr	r3, [r3, #4]
 8014302:	4618      	mov	r0, r3
 8014304:	f7fb f94d 	bl	800f5a2 <lwip_htonl>
 8014308:	4603      	mov	r3, r0
 801430a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801430c:	2b00      	cmp	r3, #0
 801430e:	dc20      	bgt.n	8014352 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	8b5b      	ldrh	r3, [r3, #26]
 8014314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014318:	b29a      	uxth	r2, r3
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801431e:	e018      	b.n	8014352 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014328:	68db      	ldr	r3, [r3, #12]
 801432a:	685b      	ldr	r3, [r3, #4]
 801432c:	4618      	mov	r0, r3
 801432e:	f7fb f938 	bl	800f5a2 <lwip_htonl>
 8014332:	4603      	mov	r3, r0
 8014334:	1ae3      	subs	r3, r4, r3
 8014336:	2b00      	cmp	r3, #0
 8014338:	dc0b      	bgt.n	8014352 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	8b5b      	ldrh	r3, [r3, #26]
 801433e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014342:	b29a      	uxth	r2, r3
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014348:	e003      	b.n	8014352 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f001 ff76 	bl	801623c <tcp_send_empty_ack>
 8014350:	e000      	b.n	8014354 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014352:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014358:	2b00      	cmp	r3, #0
 801435a:	d05b      	beq.n	8014414 <tcp_receive+0x50c>
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014360:	4b60      	ldr	r3, [pc, #384]	; (80144e4 <tcp_receive+0x5dc>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	1ad3      	subs	r3, r2, r3
 8014366:	2b00      	cmp	r3, #0
 8014368:	da54      	bge.n	8014414 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801436a:	4b5f      	ldr	r3, [pc, #380]	; (80144e8 <tcp_receive+0x5e0>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	b29a      	uxth	r2, r3
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014374:	b29b      	uxth	r3, r3
 8014376:	1ad3      	subs	r3, r2, r3
 8014378:	b29b      	uxth	r3, r3
 801437a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801437e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014388:	10db      	asrs	r3, r3, #3
 801438a:	b21b      	sxth	r3, r3
 801438c:	b29b      	uxth	r3, r3
 801438e:	1ad3      	subs	r3, r2, r3
 8014390:	b29b      	uxth	r3, r3
 8014392:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801439c:	b29a      	uxth	r2, r3
 801439e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80143a2:	4413      	add	r3, r2
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	b21a      	sxth	r2, r3
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80143ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	da05      	bge.n	80143c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80143b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80143b8:	425b      	negs	r3, r3
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80143c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80143ca:	109b      	asrs	r3, r3, #2
 80143cc:	b21b      	sxth	r3, r3
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	1ad3      	subs	r3, r2, r3
 80143d2:	b29b      	uxth	r3, r3
 80143d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80143de:	b29a      	uxth	r2, r3
 80143e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80143e4:	4413      	add	r3, r2
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	b21a      	sxth	r2, r3
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143f4:	10db      	asrs	r3, r3, #3
 80143f6:	b21b      	sxth	r3, r3
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014400:	b29b      	uxth	r3, r3
 8014402:	4413      	add	r3, r2
 8014404:	b29b      	uxth	r3, r3
 8014406:	b21a      	sxth	r2, r3
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2200      	movs	r2, #0
 8014412:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014414:	4b35      	ldr	r3, [pc, #212]	; (80144ec <tcp_receive+0x5e4>)
 8014416:	881b      	ldrh	r3, [r3, #0]
 8014418:	2b00      	cmp	r3, #0
 801441a:	f000 84e2 	beq.w	8014de2 <tcp_receive+0xeda>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	7d1b      	ldrb	r3, [r3, #20]
 8014422:	2b06      	cmp	r3, #6
 8014424:	f200 84dd 	bhi.w	8014de2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801442c:	4b30      	ldr	r3, [pc, #192]	; (80144f0 <tcp_receive+0x5e8>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	1ad3      	subs	r3, r2, r3
 8014432:	3b01      	subs	r3, #1
 8014434:	2b00      	cmp	r3, #0
 8014436:	f2c0 808f 	blt.w	8014558 <tcp_receive+0x650>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801443e:	4b2b      	ldr	r3, [pc, #172]	; (80144ec <tcp_receive+0x5e4>)
 8014440:	881b      	ldrh	r3, [r3, #0]
 8014442:	4619      	mov	r1, r3
 8014444:	4b2a      	ldr	r3, [pc, #168]	; (80144f0 <tcp_receive+0x5e8>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	440b      	add	r3, r1
 801444a:	1ad3      	subs	r3, r2, r3
 801444c:	3301      	adds	r3, #1
 801444e:	2b00      	cmp	r3, #0
 8014450:	f300 8082 	bgt.w	8014558 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014454:	4b27      	ldr	r3, [pc, #156]	; (80144f4 <tcp_receive+0x5ec>)
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801445e:	4b24      	ldr	r3, [pc, #144]	; (80144f0 <tcp_receive+0x5e8>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	1ad3      	subs	r3, r2, r3
 8014464:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014466:	4b23      	ldr	r3, [pc, #140]	; (80144f4 <tcp_receive+0x5ec>)
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d106      	bne.n	801447c <tcp_receive+0x574>
 801446e:	4b22      	ldr	r3, [pc, #136]	; (80144f8 <tcp_receive+0x5f0>)
 8014470:	f240 5294 	movw	r2, #1428	; 0x594
 8014474:	4921      	ldr	r1, [pc, #132]	; (80144fc <tcp_receive+0x5f4>)
 8014476:	4822      	ldr	r0, [pc, #136]	; (8014500 <tcp_receive+0x5f8>)
 8014478:	f005 fb3a 	bl	8019af0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014482:	4293      	cmp	r3, r2
 8014484:	d906      	bls.n	8014494 <tcp_receive+0x58c>
 8014486:	4b1c      	ldr	r3, [pc, #112]	; (80144f8 <tcp_receive+0x5f0>)
 8014488:	f240 5295 	movw	r2, #1429	; 0x595
 801448c:	491d      	ldr	r1, [pc, #116]	; (8014504 <tcp_receive+0x5fc>)
 801448e:	481c      	ldr	r0, [pc, #112]	; (8014500 <tcp_receive+0x5f8>)
 8014490:	f005 fb2e 	bl	8019af0 <iprintf>
      off = (u16_t)off32;
 8014494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014496:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801449a:	4b16      	ldr	r3, [pc, #88]	; (80144f4 <tcp_receive+0x5ec>)
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	891b      	ldrh	r3, [r3, #8]
 80144a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d906      	bls.n	80144b6 <tcp_receive+0x5ae>
 80144a8:	4b13      	ldr	r3, [pc, #76]	; (80144f8 <tcp_receive+0x5f0>)
 80144aa:	f240 5297 	movw	r2, #1431	; 0x597
 80144ae:	4916      	ldr	r1, [pc, #88]	; (8014508 <tcp_receive+0x600>)
 80144b0:	4813      	ldr	r0, [pc, #76]	; (8014500 <tcp_receive+0x5f8>)
 80144b2:	f005 fb1d 	bl	8019af0 <iprintf>
      inseg.len -= off;
 80144b6:	4b0f      	ldr	r3, [pc, #60]	; (80144f4 <tcp_receive+0x5ec>)
 80144b8:	891a      	ldrh	r2, [r3, #8]
 80144ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80144be:	1ad3      	subs	r3, r2, r3
 80144c0:	b29a      	uxth	r2, r3
 80144c2:	4b0c      	ldr	r3, [pc, #48]	; (80144f4 <tcp_receive+0x5ec>)
 80144c4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80144c6:	4b0b      	ldr	r3, [pc, #44]	; (80144f4 <tcp_receive+0x5ec>)
 80144c8:	685b      	ldr	r3, [r3, #4]
 80144ca:	891a      	ldrh	r2, [r3, #8]
 80144cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80144d0:	1ad3      	subs	r3, r2, r3
 80144d2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80144d4:	e02a      	b.n	801452c <tcp_receive+0x624>
 80144d6:	bf00      	nop
 80144d8:	0801d9bc 	.word	0x0801d9bc
 80144dc:	0801d9c4 	.word	0x0801d9c4
 80144e0:	20007110 	.word	0x20007110
 80144e4:	2000710c 	.word	0x2000710c
 80144e8:	200070d0 	.word	0x200070d0
 80144ec:	20007112 	.word	0x20007112
 80144f0:	20007108 	.word	0x20007108
 80144f4:	200070e8 	.word	0x200070e8
 80144f8:	0801d654 	.word	0x0801d654
 80144fc:	0801d9cc 	.word	0x0801d9cc
 8014500:	0801d6a0 	.word	0x0801d6a0
 8014504:	0801d9dc 	.word	0x0801d9dc
 8014508:	0801d9ec 	.word	0x0801d9ec
        off -= p->len;
 801450c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801450e:	895b      	ldrh	r3, [r3, #10]
 8014510:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014514:	1ad3      	subs	r3, r2, r3
 8014516:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801451a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801451c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801451e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014522:	2200      	movs	r2, #0
 8014524:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801452c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801452e:	895b      	ldrh	r3, [r3, #10]
 8014530:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014534:	429a      	cmp	r2, r3
 8014536:	d8e9      	bhi.n	801450c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801453c:	4619      	mov	r1, r3
 801453e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014540:	f7fc fb78 	bl	8010c34 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014548:	4a91      	ldr	r2, [pc, #580]	; (8014790 <tcp_receive+0x888>)
 801454a:	6013      	str	r3, [r2, #0]
 801454c:	4b91      	ldr	r3, [pc, #580]	; (8014794 <tcp_receive+0x88c>)
 801454e:	68db      	ldr	r3, [r3, #12]
 8014550:	4a8f      	ldr	r2, [pc, #572]	; (8014790 <tcp_receive+0x888>)
 8014552:	6812      	ldr	r2, [r2, #0]
 8014554:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014556:	e00d      	b.n	8014574 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014558:	4b8d      	ldr	r3, [pc, #564]	; (8014790 <tcp_receive+0x888>)
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014560:	1ad3      	subs	r3, r2, r3
 8014562:	2b00      	cmp	r3, #0
 8014564:	da06      	bge.n	8014574 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	8b5b      	ldrh	r3, [r3, #26]
 801456a:	f043 0302 	orr.w	r3, r3, #2
 801456e:	b29a      	uxth	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014574:	4b86      	ldr	r3, [pc, #536]	; (8014790 <tcp_receive+0x888>)
 8014576:	681a      	ldr	r2, [r3, #0]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801457c:	1ad3      	subs	r3, r2, r3
 801457e:	2b00      	cmp	r3, #0
 8014580:	f2c0 842a 	blt.w	8014dd8 <tcp_receive+0xed0>
 8014584:	4b82      	ldr	r3, [pc, #520]	; (8014790 <tcp_receive+0x888>)
 8014586:	681a      	ldr	r2, [r3, #0]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801458c:	6879      	ldr	r1, [r7, #4]
 801458e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014590:	440b      	add	r3, r1
 8014592:	1ad3      	subs	r3, r2, r3
 8014594:	3301      	adds	r3, #1
 8014596:	2b00      	cmp	r3, #0
 8014598:	f300 841e 	bgt.w	8014dd8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145a0:	4b7b      	ldr	r3, [pc, #492]	; (8014790 <tcp_receive+0x888>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	f040 829a 	bne.w	8014ade <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80145aa:	4b7a      	ldr	r3, [pc, #488]	; (8014794 <tcp_receive+0x88c>)
 80145ac:	891c      	ldrh	r4, [r3, #8]
 80145ae:	4b79      	ldr	r3, [pc, #484]	; (8014794 <tcp_receive+0x88c>)
 80145b0:	68db      	ldr	r3, [r3, #12]
 80145b2:	899b      	ldrh	r3, [r3, #12]
 80145b4:	b29b      	uxth	r3, r3
 80145b6:	4618      	mov	r0, r3
 80145b8:	f7fa ffde 	bl	800f578 <lwip_htons>
 80145bc:	4603      	mov	r3, r0
 80145be:	b2db      	uxtb	r3, r3
 80145c0:	f003 0303 	and.w	r3, r3, #3
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d001      	beq.n	80145cc <tcp_receive+0x6c4>
 80145c8:	2301      	movs	r3, #1
 80145ca:	e000      	b.n	80145ce <tcp_receive+0x6c6>
 80145cc:	2300      	movs	r3, #0
 80145ce:	4423      	add	r3, r4
 80145d0:	b29a      	uxth	r2, r3
 80145d2:	4b71      	ldr	r3, [pc, #452]	; (8014798 <tcp_receive+0x890>)
 80145d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80145da:	4b6f      	ldr	r3, [pc, #444]	; (8014798 <tcp_receive+0x890>)
 80145dc:	881b      	ldrh	r3, [r3, #0]
 80145de:	429a      	cmp	r2, r3
 80145e0:	d275      	bcs.n	80146ce <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80145e2:	4b6c      	ldr	r3, [pc, #432]	; (8014794 <tcp_receive+0x88c>)
 80145e4:	68db      	ldr	r3, [r3, #12]
 80145e6:	899b      	ldrh	r3, [r3, #12]
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7fa ffc4 	bl	800f578 <lwip_htons>
 80145f0:	4603      	mov	r3, r0
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	f003 0301 	and.w	r3, r3, #1
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d01f      	beq.n	801463c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80145fc:	4b65      	ldr	r3, [pc, #404]	; (8014794 <tcp_receive+0x88c>)
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	899b      	ldrh	r3, [r3, #12]
 8014602:	b29b      	uxth	r3, r3
 8014604:	b21b      	sxth	r3, r3
 8014606:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801460a:	b21c      	sxth	r4, r3
 801460c:	4b61      	ldr	r3, [pc, #388]	; (8014794 <tcp_receive+0x88c>)
 801460e:	68db      	ldr	r3, [r3, #12]
 8014610:	899b      	ldrh	r3, [r3, #12]
 8014612:	b29b      	uxth	r3, r3
 8014614:	4618      	mov	r0, r3
 8014616:	f7fa ffaf 	bl	800f578 <lwip_htons>
 801461a:	4603      	mov	r3, r0
 801461c:	b2db      	uxtb	r3, r3
 801461e:	b29b      	uxth	r3, r3
 8014620:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014624:	b29b      	uxth	r3, r3
 8014626:	4618      	mov	r0, r3
 8014628:	f7fa ffa6 	bl	800f578 <lwip_htons>
 801462c:	4603      	mov	r3, r0
 801462e:	b21b      	sxth	r3, r3
 8014630:	4323      	orrs	r3, r4
 8014632:	b21a      	sxth	r2, r3
 8014634:	4b57      	ldr	r3, [pc, #348]	; (8014794 <tcp_receive+0x88c>)
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	b292      	uxth	r2, r2
 801463a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014640:	4b54      	ldr	r3, [pc, #336]	; (8014794 <tcp_receive+0x88c>)
 8014642:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014644:	4b53      	ldr	r3, [pc, #332]	; (8014794 <tcp_receive+0x88c>)
 8014646:	68db      	ldr	r3, [r3, #12]
 8014648:	899b      	ldrh	r3, [r3, #12]
 801464a:	b29b      	uxth	r3, r3
 801464c:	4618      	mov	r0, r3
 801464e:	f7fa ff93 	bl	800f578 <lwip_htons>
 8014652:	4603      	mov	r3, r0
 8014654:	b2db      	uxtb	r3, r3
 8014656:	f003 0302 	and.w	r3, r3, #2
 801465a:	2b00      	cmp	r3, #0
 801465c:	d005      	beq.n	801466a <tcp_receive+0x762>
            inseg.len -= 1;
 801465e:	4b4d      	ldr	r3, [pc, #308]	; (8014794 <tcp_receive+0x88c>)
 8014660:	891b      	ldrh	r3, [r3, #8]
 8014662:	3b01      	subs	r3, #1
 8014664:	b29a      	uxth	r2, r3
 8014666:	4b4b      	ldr	r3, [pc, #300]	; (8014794 <tcp_receive+0x88c>)
 8014668:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801466a:	4b4a      	ldr	r3, [pc, #296]	; (8014794 <tcp_receive+0x88c>)
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	4a49      	ldr	r2, [pc, #292]	; (8014794 <tcp_receive+0x88c>)
 8014670:	8912      	ldrh	r2, [r2, #8]
 8014672:	4611      	mov	r1, r2
 8014674:	4618      	mov	r0, r3
 8014676:	f7fc f9df 	bl	8010a38 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801467a:	4b46      	ldr	r3, [pc, #280]	; (8014794 <tcp_receive+0x88c>)
 801467c:	891c      	ldrh	r4, [r3, #8]
 801467e:	4b45      	ldr	r3, [pc, #276]	; (8014794 <tcp_receive+0x88c>)
 8014680:	68db      	ldr	r3, [r3, #12]
 8014682:	899b      	ldrh	r3, [r3, #12]
 8014684:	b29b      	uxth	r3, r3
 8014686:	4618      	mov	r0, r3
 8014688:	f7fa ff76 	bl	800f578 <lwip_htons>
 801468c:	4603      	mov	r3, r0
 801468e:	b2db      	uxtb	r3, r3
 8014690:	f003 0303 	and.w	r3, r3, #3
 8014694:	2b00      	cmp	r3, #0
 8014696:	d001      	beq.n	801469c <tcp_receive+0x794>
 8014698:	2301      	movs	r3, #1
 801469a:	e000      	b.n	801469e <tcp_receive+0x796>
 801469c:	2300      	movs	r3, #0
 801469e:	4423      	add	r3, r4
 80146a0:	b29a      	uxth	r2, r3
 80146a2:	4b3d      	ldr	r3, [pc, #244]	; (8014798 <tcp_receive+0x890>)
 80146a4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80146a6:	4b3c      	ldr	r3, [pc, #240]	; (8014798 <tcp_receive+0x890>)
 80146a8:	881b      	ldrh	r3, [r3, #0]
 80146aa:	461a      	mov	r2, r3
 80146ac:	4b38      	ldr	r3, [pc, #224]	; (8014790 <tcp_receive+0x888>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	441a      	add	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b6:	6879      	ldr	r1, [r7, #4]
 80146b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80146ba:	440b      	add	r3, r1
 80146bc:	429a      	cmp	r2, r3
 80146be:	d006      	beq.n	80146ce <tcp_receive+0x7c6>
 80146c0:	4b36      	ldr	r3, [pc, #216]	; (801479c <tcp_receive+0x894>)
 80146c2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80146c6:	4936      	ldr	r1, [pc, #216]	; (80147a0 <tcp_receive+0x898>)
 80146c8:	4836      	ldr	r0, [pc, #216]	; (80147a4 <tcp_receive+0x89c>)
 80146ca:	f005 fa11 	bl	8019af0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	f000 80e7 	beq.w	80148a6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80146d8:	4b2e      	ldr	r3, [pc, #184]	; (8014794 <tcp_receive+0x88c>)
 80146da:	68db      	ldr	r3, [r3, #12]
 80146dc:	899b      	ldrh	r3, [r3, #12]
 80146de:	b29b      	uxth	r3, r3
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7fa ff49 	bl	800f578 <lwip_htons>
 80146e6:	4603      	mov	r3, r0
 80146e8:	b2db      	uxtb	r3, r3
 80146ea:	f003 0301 	and.w	r3, r3, #1
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d010      	beq.n	8014714 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80146f2:	e00a      	b.n	801470a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146f8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014704:	68f8      	ldr	r0, [r7, #12]
 8014706:	f7fd fd92 	bl	801222e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801470e:	2b00      	cmp	r3, #0
 8014710:	d1f0      	bne.n	80146f4 <tcp_receive+0x7ec>
 8014712:	e0c8      	b.n	80148a6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014718:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801471a:	e052      	b.n	80147c2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801471c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801471e:	68db      	ldr	r3, [r3, #12]
 8014720:	899b      	ldrh	r3, [r3, #12]
 8014722:	b29b      	uxth	r3, r3
 8014724:	4618      	mov	r0, r3
 8014726:	f7fa ff27 	bl	800f578 <lwip_htons>
 801472a:	4603      	mov	r3, r0
 801472c:	b2db      	uxtb	r3, r3
 801472e:	f003 0301 	and.w	r3, r3, #1
 8014732:	2b00      	cmp	r3, #0
 8014734:	d03d      	beq.n	80147b2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014736:	4b17      	ldr	r3, [pc, #92]	; (8014794 <tcp_receive+0x88c>)
 8014738:	68db      	ldr	r3, [r3, #12]
 801473a:	899b      	ldrh	r3, [r3, #12]
 801473c:	b29b      	uxth	r3, r3
 801473e:	4618      	mov	r0, r3
 8014740:	f7fa ff1a 	bl	800f578 <lwip_htons>
 8014744:	4603      	mov	r3, r0
 8014746:	b2db      	uxtb	r3, r3
 8014748:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801474c:	2b00      	cmp	r3, #0
 801474e:	d130      	bne.n	80147b2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014750:	4b10      	ldr	r3, [pc, #64]	; (8014794 <tcp_receive+0x88c>)
 8014752:	68db      	ldr	r3, [r3, #12]
 8014754:	899b      	ldrh	r3, [r3, #12]
 8014756:	b29c      	uxth	r4, r3
 8014758:	2001      	movs	r0, #1
 801475a:	f7fa ff0d 	bl	800f578 <lwip_htons>
 801475e:	4603      	mov	r3, r0
 8014760:	461a      	mov	r2, r3
 8014762:	4b0c      	ldr	r3, [pc, #48]	; (8014794 <tcp_receive+0x88c>)
 8014764:	68db      	ldr	r3, [r3, #12]
 8014766:	4322      	orrs	r2, r4
 8014768:	b292      	uxth	r2, r2
 801476a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801476c:	4b09      	ldr	r3, [pc, #36]	; (8014794 <tcp_receive+0x88c>)
 801476e:	891c      	ldrh	r4, [r3, #8]
 8014770:	4b08      	ldr	r3, [pc, #32]	; (8014794 <tcp_receive+0x88c>)
 8014772:	68db      	ldr	r3, [r3, #12]
 8014774:	899b      	ldrh	r3, [r3, #12]
 8014776:	b29b      	uxth	r3, r3
 8014778:	4618      	mov	r0, r3
 801477a:	f7fa fefd 	bl	800f578 <lwip_htons>
 801477e:	4603      	mov	r3, r0
 8014780:	b2db      	uxtb	r3, r3
 8014782:	f003 0303 	and.w	r3, r3, #3
 8014786:	2b00      	cmp	r3, #0
 8014788:	d00e      	beq.n	80147a8 <tcp_receive+0x8a0>
 801478a:	2301      	movs	r3, #1
 801478c:	e00d      	b.n	80147aa <tcp_receive+0x8a2>
 801478e:	bf00      	nop
 8014790:	20007108 	.word	0x20007108
 8014794:	200070e8 	.word	0x200070e8
 8014798:	20007112 	.word	0x20007112
 801479c:	0801d654 	.word	0x0801d654
 80147a0:	0801d9fc 	.word	0x0801d9fc
 80147a4:	0801d6a0 	.word	0x0801d6a0
 80147a8:	2300      	movs	r3, #0
 80147aa:	4423      	add	r3, r4
 80147ac:	b29a      	uxth	r2, r3
 80147ae:	4b98      	ldr	r3, [pc, #608]	; (8014a10 <tcp_receive+0xb08>)
 80147b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80147b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80147b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80147bc:	6938      	ldr	r0, [r7, #16]
 80147be:	f7fd fd36 	bl	801222e <tcp_seg_free>
            while (next &&
 80147c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d00e      	beq.n	80147e6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80147c8:	4b91      	ldr	r3, [pc, #580]	; (8014a10 <tcp_receive+0xb08>)
 80147ca:	881b      	ldrh	r3, [r3, #0]
 80147cc:	461a      	mov	r2, r3
 80147ce:	4b91      	ldr	r3, [pc, #580]	; (8014a14 <tcp_receive+0xb0c>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	441a      	add	r2, r3
 80147d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80147dc:	8909      	ldrh	r1, [r1, #8]
 80147de:	440b      	add	r3, r1
 80147e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	da9a      	bge.n	801471c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80147e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d059      	beq.n	80148a0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80147ec:	4b88      	ldr	r3, [pc, #544]	; (8014a10 <tcp_receive+0xb08>)
 80147ee:	881b      	ldrh	r3, [r3, #0]
 80147f0:	461a      	mov	r2, r3
 80147f2:	4b88      	ldr	r3, [pc, #544]	; (8014a14 <tcp_receive+0xb0c>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	441a      	add	r2, r3
 80147f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147fa:	68db      	ldr	r3, [r3, #12]
 80147fc:	685b      	ldr	r3, [r3, #4]
 80147fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014800:	2b00      	cmp	r3, #0
 8014802:	dd4d      	ble.n	80148a0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014806:	68db      	ldr	r3, [r3, #12]
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	b29a      	uxth	r2, r3
 801480c:	4b81      	ldr	r3, [pc, #516]	; (8014a14 <tcp_receive+0xb0c>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	b29b      	uxth	r3, r3
 8014812:	1ad3      	subs	r3, r2, r3
 8014814:	b29a      	uxth	r2, r3
 8014816:	4b80      	ldr	r3, [pc, #512]	; (8014a18 <tcp_receive+0xb10>)
 8014818:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801481a:	4b7f      	ldr	r3, [pc, #508]	; (8014a18 <tcp_receive+0xb10>)
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	899b      	ldrh	r3, [r3, #12]
 8014820:	b29b      	uxth	r3, r3
 8014822:	4618      	mov	r0, r3
 8014824:	f7fa fea8 	bl	800f578 <lwip_htons>
 8014828:	4603      	mov	r3, r0
 801482a:	b2db      	uxtb	r3, r3
 801482c:	f003 0302 	and.w	r3, r3, #2
 8014830:	2b00      	cmp	r3, #0
 8014832:	d005      	beq.n	8014840 <tcp_receive+0x938>
                inseg.len -= 1;
 8014834:	4b78      	ldr	r3, [pc, #480]	; (8014a18 <tcp_receive+0xb10>)
 8014836:	891b      	ldrh	r3, [r3, #8]
 8014838:	3b01      	subs	r3, #1
 801483a:	b29a      	uxth	r2, r3
 801483c:	4b76      	ldr	r3, [pc, #472]	; (8014a18 <tcp_receive+0xb10>)
 801483e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014840:	4b75      	ldr	r3, [pc, #468]	; (8014a18 <tcp_receive+0xb10>)
 8014842:	685b      	ldr	r3, [r3, #4]
 8014844:	4a74      	ldr	r2, [pc, #464]	; (8014a18 <tcp_receive+0xb10>)
 8014846:	8912      	ldrh	r2, [r2, #8]
 8014848:	4611      	mov	r1, r2
 801484a:	4618      	mov	r0, r3
 801484c:	f7fc f8f4 	bl	8010a38 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014850:	4b71      	ldr	r3, [pc, #452]	; (8014a18 <tcp_receive+0xb10>)
 8014852:	891c      	ldrh	r4, [r3, #8]
 8014854:	4b70      	ldr	r3, [pc, #448]	; (8014a18 <tcp_receive+0xb10>)
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	899b      	ldrh	r3, [r3, #12]
 801485a:	b29b      	uxth	r3, r3
 801485c:	4618      	mov	r0, r3
 801485e:	f7fa fe8b 	bl	800f578 <lwip_htons>
 8014862:	4603      	mov	r3, r0
 8014864:	b2db      	uxtb	r3, r3
 8014866:	f003 0303 	and.w	r3, r3, #3
 801486a:	2b00      	cmp	r3, #0
 801486c:	d001      	beq.n	8014872 <tcp_receive+0x96a>
 801486e:	2301      	movs	r3, #1
 8014870:	e000      	b.n	8014874 <tcp_receive+0x96c>
 8014872:	2300      	movs	r3, #0
 8014874:	4423      	add	r3, r4
 8014876:	b29a      	uxth	r2, r3
 8014878:	4b65      	ldr	r3, [pc, #404]	; (8014a10 <tcp_receive+0xb08>)
 801487a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801487c:	4b64      	ldr	r3, [pc, #400]	; (8014a10 <tcp_receive+0xb08>)
 801487e:	881b      	ldrh	r3, [r3, #0]
 8014880:	461a      	mov	r2, r3
 8014882:	4b64      	ldr	r3, [pc, #400]	; (8014a14 <tcp_receive+0xb0c>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	441a      	add	r2, r3
 8014888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	429a      	cmp	r2, r3
 8014890:	d006      	beq.n	80148a0 <tcp_receive+0x998>
 8014892:	4b62      	ldr	r3, [pc, #392]	; (8014a1c <tcp_receive+0xb14>)
 8014894:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014898:	4961      	ldr	r1, [pc, #388]	; (8014a20 <tcp_receive+0xb18>)
 801489a:	4862      	ldr	r0, [pc, #392]	; (8014a24 <tcp_receive+0xb1c>)
 801489c:	f005 f928 	bl	8019af0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148a4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80148a6:	4b5a      	ldr	r3, [pc, #360]	; (8014a10 <tcp_receive+0xb08>)
 80148a8:	881b      	ldrh	r3, [r3, #0]
 80148aa:	461a      	mov	r2, r3
 80148ac:	4b59      	ldr	r3, [pc, #356]	; (8014a14 <tcp_receive+0xb0c>)
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	441a      	add	r2, r3
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148ba:	4b55      	ldr	r3, [pc, #340]	; (8014a10 <tcp_receive+0xb08>)
 80148bc:	881b      	ldrh	r3, [r3, #0]
 80148be:	429a      	cmp	r2, r3
 80148c0:	d206      	bcs.n	80148d0 <tcp_receive+0x9c8>
 80148c2:	4b56      	ldr	r3, [pc, #344]	; (8014a1c <tcp_receive+0xb14>)
 80148c4:	f240 6207 	movw	r2, #1543	; 0x607
 80148c8:	4957      	ldr	r1, [pc, #348]	; (8014a28 <tcp_receive+0xb20>)
 80148ca:	4856      	ldr	r0, [pc, #344]	; (8014a24 <tcp_receive+0xb1c>)
 80148cc:	f005 f910 	bl	8019af0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148d4:	4b4e      	ldr	r3, [pc, #312]	; (8014a10 <tcp_receive+0xb08>)
 80148d6:	881b      	ldrh	r3, [r3, #0]
 80148d8:	1ad3      	subs	r3, r2, r3
 80148da:	b29a      	uxth	r2, r3
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f7fc ffc1 	bl	8011868 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80148e6:	4b4c      	ldr	r3, [pc, #304]	; (8014a18 <tcp_receive+0xb10>)
 80148e8:	685b      	ldr	r3, [r3, #4]
 80148ea:	891b      	ldrh	r3, [r3, #8]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d006      	beq.n	80148fe <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80148f0:	4b49      	ldr	r3, [pc, #292]	; (8014a18 <tcp_receive+0xb10>)
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	4a4d      	ldr	r2, [pc, #308]	; (8014a2c <tcp_receive+0xb24>)
 80148f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80148f8:	4b47      	ldr	r3, [pc, #284]	; (8014a18 <tcp_receive+0xb10>)
 80148fa:	2200      	movs	r2, #0
 80148fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80148fe:	4b46      	ldr	r3, [pc, #280]	; (8014a18 <tcp_receive+0xb10>)
 8014900:	68db      	ldr	r3, [r3, #12]
 8014902:	899b      	ldrh	r3, [r3, #12]
 8014904:	b29b      	uxth	r3, r3
 8014906:	4618      	mov	r0, r3
 8014908:	f7fa fe36 	bl	800f578 <lwip_htons>
 801490c:	4603      	mov	r3, r0
 801490e:	b2db      	uxtb	r3, r3
 8014910:	f003 0301 	and.w	r3, r3, #1
 8014914:	2b00      	cmp	r3, #0
 8014916:	f000 80b8 	beq.w	8014a8a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801491a:	4b45      	ldr	r3, [pc, #276]	; (8014a30 <tcp_receive+0xb28>)
 801491c:	781b      	ldrb	r3, [r3, #0]
 801491e:	f043 0320 	orr.w	r3, r3, #32
 8014922:	b2da      	uxtb	r2, r3
 8014924:	4b42      	ldr	r3, [pc, #264]	; (8014a30 <tcp_receive+0xb28>)
 8014926:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014928:	e0af      	b.n	8014a8a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801492e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014934:	68db      	ldr	r3, [r3, #12]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	4a36      	ldr	r2, [pc, #216]	; (8014a14 <tcp_receive+0xb0c>)
 801493a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	891b      	ldrh	r3, [r3, #8]
 8014940:	461c      	mov	r4, r3
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	68db      	ldr	r3, [r3, #12]
 8014946:	899b      	ldrh	r3, [r3, #12]
 8014948:	b29b      	uxth	r3, r3
 801494a:	4618      	mov	r0, r3
 801494c:	f7fa fe14 	bl	800f578 <lwip_htons>
 8014950:	4603      	mov	r3, r0
 8014952:	b2db      	uxtb	r3, r3
 8014954:	f003 0303 	and.w	r3, r3, #3
 8014958:	2b00      	cmp	r3, #0
 801495a:	d001      	beq.n	8014960 <tcp_receive+0xa58>
 801495c:	2301      	movs	r3, #1
 801495e:	e000      	b.n	8014962 <tcp_receive+0xa5a>
 8014960:	2300      	movs	r3, #0
 8014962:	191a      	adds	r2, r3, r4
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014968:	441a      	add	r2, r3
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014972:	461c      	mov	r4, r3
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	891b      	ldrh	r3, [r3, #8]
 8014978:	461d      	mov	r5, r3
 801497a:	68bb      	ldr	r3, [r7, #8]
 801497c:	68db      	ldr	r3, [r3, #12]
 801497e:	899b      	ldrh	r3, [r3, #12]
 8014980:	b29b      	uxth	r3, r3
 8014982:	4618      	mov	r0, r3
 8014984:	f7fa fdf8 	bl	800f578 <lwip_htons>
 8014988:	4603      	mov	r3, r0
 801498a:	b2db      	uxtb	r3, r3
 801498c:	f003 0303 	and.w	r3, r3, #3
 8014990:	2b00      	cmp	r3, #0
 8014992:	d001      	beq.n	8014998 <tcp_receive+0xa90>
 8014994:	2301      	movs	r3, #1
 8014996:	e000      	b.n	801499a <tcp_receive+0xa92>
 8014998:	2300      	movs	r3, #0
 801499a:	442b      	add	r3, r5
 801499c:	429c      	cmp	r4, r3
 801499e:	d206      	bcs.n	80149ae <tcp_receive+0xaa6>
 80149a0:	4b1e      	ldr	r3, [pc, #120]	; (8014a1c <tcp_receive+0xb14>)
 80149a2:	f240 622b 	movw	r2, #1579	; 0x62b
 80149a6:	4923      	ldr	r1, [pc, #140]	; (8014a34 <tcp_receive+0xb2c>)
 80149a8:	481e      	ldr	r0, [pc, #120]	; (8014a24 <tcp_receive+0xb1c>)
 80149aa:	f005 f8a1 	bl	8019af0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	891b      	ldrh	r3, [r3, #8]
 80149b2:	461c      	mov	r4, r3
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	899b      	ldrh	r3, [r3, #12]
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	4618      	mov	r0, r3
 80149be:	f7fa fddb 	bl	800f578 <lwip_htons>
 80149c2:	4603      	mov	r3, r0
 80149c4:	b2db      	uxtb	r3, r3
 80149c6:	f003 0303 	and.w	r3, r3, #3
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d001      	beq.n	80149d2 <tcp_receive+0xaca>
 80149ce:	2301      	movs	r3, #1
 80149d0:	e000      	b.n	80149d4 <tcp_receive+0xacc>
 80149d2:	2300      	movs	r3, #0
 80149d4:	1919      	adds	r1, r3, r4
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80149da:	b28b      	uxth	r3, r1
 80149dc:	1ad3      	subs	r3, r2, r3
 80149de:	b29a      	uxth	r2, r3
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f7fc ff3f 	bl	8011868 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	685b      	ldr	r3, [r3, #4]
 80149ee:	891b      	ldrh	r3, [r3, #8]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d028      	beq.n	8014a46 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80149f4:	4b0d      	ldr	r3, [pc, #52]	; (8014a2c <tcp_receive+0xb24>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d01d      	beq.n	8014a38 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80149fc:	4b0b      	ldr	r3, [pc, #44]	; (8014a2c <tcp_receive+0xb24>)
 80149fe:	681a      	ldr	r2, [r3, #0]
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	685b      	ldr	r3, [r3, #4]
 8014a04:	4619      	mov	r1, r3
 8014a06:	4610      	mov	r0, r2
 8014a08:	f7fc fa5c 	bl	8010ec4 <pbuf_cat>
 8014a0c:	e018      	b.n	8014a40 <tcp_receive+0xb38>
 8014a0e:	bf00      	nop
 8014a10:	20007112 	.word	0x20007112
 8014a14:	20007108 	.word	0x20007108
 8014a18:	200070e8 	.word	0x200070e8
 8014a1c:	0801d654 	.word	0x0801d654
 8014a20:	0801da34 	.word	0x0801da34
 8014a24:	0801d6a0 	.word	0x0801d6a0
 8014a28:	0801da70 	.word	0x0801da70
 8014a2c:	20007118 	.word	0x20007118
 8014a30:	20007115 	.word	0x20007115
 8014a34:	0801da90 	.word	0x0801da90
            } else {
              recv_data = cseg->p;
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	685b      	ldr	r3, [r3, #4]
 8014a3c:	4a70      	ldr	r2, [pc, #448]	; (8014c00 <tcp_receive+0xcf8>)
 8014a3e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	2200      	movs	r2, #0
 8014a44:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a46:	68bb      	ldr	r3, [r7, #8]
 8014a48:	68db      	ldr	r3, [r3, #12]
 8014a4a:	899b      	ldrh	r3, [r3, #12]
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7fa fd92 	bl	800f578 <lwip_htons>
 8014a54:	4603      	mov	r3, r0
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	f003 0301 	and.w	r3, r3, #1
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00d      	beq.n	8014a7c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014a60:	4b68      	ldr	r3, [pc, #416]	; (8014c04 <tcp_receive+0xcfc>)
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	f043 0320 	orr.w	r3, r3, #32
 8014a68:	b2da      	uxtb	r2, r3
 8014a6a:	4b66      	ldr	r3, [pc, #408]	; (8014c04 <tcp_receive+0xcfc>)
 8014a6c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	7d1b      	ldrb	r3, [r3, #20]
 8014a72:	2b04      	cmp	r3, #4
 8014a74:	d102      	bne.n	8014a7c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2207      	movs	r2, #7
 8014a7a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	681a      	ldr	r2, [r3, #0]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014a84:	68b8      	ldr	r0, [r7, #8]
 8014a86:	f7fd fbd2 	bl	801222e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d008      	beq.n	8014aa4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a96:	68db      	ldr	r3, [r3, #12]
 8014a98:	685a      	ldr	r2, [r3, #4]
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	f43f af43 	beq.w	801492a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	8b5b      	ldrh	r3, [r3, #26]
 8014aa8:	f003 0301 	and.w	r3, r3, #1
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d00e      	beq.n	8014ace <tcp_receive+0xbc6>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	8b5b      	ldrh	r3, [r3, #26]
 8014ab4:	f023 0301 	bic.w	r3, r3, #1
 8014ab8:	b29a      	uxth	r2, r3
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	835a      	strh	r2, [r3, #26]
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	8b5b      	ldrh	r3, [r3, #26]
 8014ac2:	f043 0302 	orr.w	r3, r3, #2
 8014ac6:	b29a      	uxth	r2, r3
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014acc:	e188      	b.n	8014de0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	8b5b      	ldrh	r3, [r3, #26]
 8014ad2:	f043 0301 	orr.w	r3, r3, #1
 8014ad6:	b29a      	uxth	r2, r3
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014adc:	e180      	b.n	8014de0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d106      	bne.n	8014af4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014ae6:	4848      	ldr	r0, [pc, #288]	; (8014c08 <tcp_receive+0xd00>)
 8014ae8:	f7fd fbba 	bl	8012260 <tcp_seg_copy>
 8014aec:	4602      	mov	r2, r0
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	675a      	str	r2, [r3, #116]	; 0x74
 8014af2:	e16d      	b.n	8014dd0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014af4:	2300      	movs	r3, #0
 8014af6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014afc:	63bb      	str	r3, [r7, #56]	; 0x38
 8014afe:	e157      	b.n	8014db0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b02:	68db      	ldr	r3, [r3, #12]
 8014b04:	685a      	ldr	r2, [r3, #4]
 8014b06:	4b41      	ldr	r3, [pc, #260]	; (8014c0c <tcp_receive+0xd04>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	429a      	cmp	r2, r3
 8014b0c:	d11d      	bne.n	8014b4a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014b0e:	4b3e      	ldr	r3, [pc, #248]	; (8014c08 <tcp_receive+0xd00>)
 8014b10:	891a      	ldrh	r2, [r3, #8]
 8014b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b14:	891b      	ldrh	r3, [r3, #8]
 8014b16:	429a      	cmp	r2, r3
 8014b18:	f240 814f 	bls.w	8014dba <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b1c:	483a      	ldr	r0, [pc, #232]	; (8014c08 <tcp_receive+0xd00>)
 8014b1e:	f7fd fb9f 	bl	8012260 <tcp_seg_copy>
 8014b22:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	f000 8149 	beq.w	8014dbe <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d003      	beq.n	8014b3a <tcp_receive+0xc32>
                    prev->next = cseg;
 8014b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b34:	697a      	ldr	r2, [r7, #20]
 8014b36:	601a      	str	r2, [r3, #0]
 8014b38:	e002      	b.n	8014b40 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	697a      	ldr	r2, [r7, #20]
 8014b3e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014b40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014b42:	6978      	ldr	r0, [r7, #20]
 8014b44:	f7ff f8dc 	bl	8013d00 <tcp_oos_insert_segment>
                }
                break;
 8014b48:	e139      	b.n	8014dbe <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d117      	bne.n	8014b80 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014b50:	4b2e      	ldr	r3, [pc, #184]	; (8014c0c <tcp_receive+0xd04>)
 8014b52:	681a      	ldr	r2, [r3, #0]
 8014b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b56:	68db      	ldr	r3, [r3, #12]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	1ad3      	subs	r3, r2, r3
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	da57      	bge.n	8014c10 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014b60:	4829      	ldr	r0, [pc, #164]	; (8014c08 <tcp_receive+0xd00>)
 8014b62:	f7fd fb7d 	bl	8012260 <tcp_seg_copy>
 8014b66:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014b68:	69bb      	ldr	r3, [r7, #24]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	f000 8129 	beq.w	8014dc2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	69ba      	ldr	r2, [r7, #24]
 8014b74:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014b78:	69b8      	ldr	r0, [r7, #24]
 8014b7a:	f7ff f8c1 	bl	8013d00 <tcp_oos_insert_segment>
                  }
                  break;
 8014b7e:	e120      	b.n	8014dc2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014b80:	4b22      	ldr	r3, [pc, #136]	; (8014c0c <tcp_receive+0xd04>)
 8014b82:	681a      	ldr	r2, [r3, #0]
 8014b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b86:	68db      	ldr	r3, [r3, #12]
 8014b88:	685b      	ldr	r3, [r3, #4]
 8014b8a:	1ad3      	subs	r3, r2, r3
 8014b8c:	3b01      	subs	r3, #1
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	db3e      	blt.n	8014c10 <tcp_receive+0xd08>
 8014b92:	4b1e      	ldr	r3, [pc, #120]	; (8014c0c <tcp_receive+0xd04>)
 8014b94:	681a      	ldr	r2, [r3, #0]
 8014b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b98:	68db      	ldr	r3, [r3, #12]
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	1ad3      	subs	r3, r2, r3
 8014b9e:	3301      	adds	r3, #1
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	dc35      	bgt.n	8014c10 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014ba4:	4818      	ldr	r0, [pc, #96]	; (8014c08 <tcp_receive+0xd00>)
 8014ba6:	f7fd fb5b 	bl	8012260 <tcp_seg_copy>
 8014baa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014bac:	69fb      	ldr	r3, [r7, #28]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	f000 8109 	beq.w	8014dc6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bb6:	68db      	ldr	r3, [r3, #12]
 8014bb8:	685b      	ldr	r3, [r3, #4]
 8014bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014bbc:	8912      	ldrh	r2, [r2, #8]
 8014bbe:	441a      	add	r2, r3
 8014bc0:	4b12      	ldr	r3, [pc, #72]	; (8014c0c <tcp_receive+0xd04>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	1ad3      	subs	r3, r2, r3
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	dd12      	ble.n	8014bf0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014bca:	4b10      	ldr	r3, [pc, #64]	; (8014c0c <tcp_receive+0xd04>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	b29a      	uxth	r2, r3
 8014bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	1ad3      	subs	r3, r2, r3
 8014bda:	b29a      	uxth	r2, r3
 8014bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bde:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014be2:	685a      	ldr	r2, [r3, #4]
 8014be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014be6:	891b      	ldrh	r3, [r3, #8]
 8014be8:	4619      	mov	r1, r3
 8014bea:	4610      	mov	r0, r2
 8014bec:	f7fb ff24 	bl	8010a38 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bf2:	69fa      	ldr	r2, [r7, #28]
 8014bf4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014bf6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014bf8:	69f8      	ldr	r0, [r7, #28]
 8014bfa:	f7ff f881 	bl	8013d00 <tcp_oos_insert_segment>
                  }
                  break;
 8014bfe:	e0e2      	b.n	8014dc6 <tcp_receive+0xebe>
 8014c00:	20007118 	.word	0x20007118
 8014c04:	20007115 	.word	0x20007115
 8014c08:	200070e8 	.word	0x200070e8
 8014c0c:	20007108 	.word	0x20007108
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c12:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	f040 80c6 	bne.w	8014daa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014c1e:	4b80      	ldr	r3, [pc, #512]	; (8014e20 <tcp_receive+0xf18>)
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c24:	68db      	ldr	r3, [r3, #12]
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	f340 80bd 	ble.w	8014daa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c32:	68db      	ldr	r3, [r3, #12]
 8014c34:	899b      	ldrh	r3, [r3, #12]
 8014c36:	b29b      	uxth	r3, r3
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7fa fc9d 	bl	800f578 <lwip_htons>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	b2db      	uxtb	r3, r3
 8014c42:	f003 0301 	and.w	r3, r3, #1
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	f040 80bf 	bne.w	8014dca <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014c4c:	4875      	ldr	r0, [pc, #468]	; (8014e24 <tcp_receive+0xf1c>)
 8014c4e:	f7fd fb07 	bl	8012260 <tcp_seg_copy>
 8014c52:	4602      	mov	r2, r0
 8014c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c56:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	f000 80b6 	beq.w	8014dce <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	685b      	ldr	r3, [r3, #4]
 8014c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c6a:	8912      	ldrh	r2, [r2, #8]
 8014c6c:	441a      	add	r2, r3
 8014c6e:	4b6c      	ldr	r3, [pc, #432]	; (8014e20 <tcp_receive+0xf18>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	1ad3      	subs	r3, r2, r3
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	dd12      	ble.n	8014c9e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014c78:	4b69      	ldr	r3, [pc, #420]	; (8014e20 <tcp_receive+0xf18>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	b29a      	uxth	r2, r3
 8014c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c80:	68db      	ldr	r3, [r3, #12]
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	b29b      	uxth	r3, r3
 8014c86:	1ad3      	subs	r3, r2, r3
 8014c88:	b29a      	uxth	r2, r3
 8014c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c8c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c90:	685a      	ldr	r2, [r3, #4]
 8014c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c94:	891b      	ldrh	r3, [r3, #8]
 8014c96:	4619      	mov	r1, r3
 8014c98:	4610      	mov	r0, r2
 8014c9a:	f7fb fecd 	bl	8010a38 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014c9e:	4b62      	ldr	r3, [pc, #392]	; (8014e28 <tcp_receive+0xf20>)
 8014ca0:	881b      	ldrh	r3, [r3, #0]
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	4b5e      	ldr	r3, [pc, #376]	; (8014e20 <tcp_receive+0xf18>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	441a      	add	r2, r3
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cae:	6879      	ldr	r1, [r7, #4]
 8014cb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014cb2:	440b      	add	r3, r1
 8014cb4:	1ad3      	subs	r3, r2, r3
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	f340 8089 	ble.w	8014dce <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	68db      	ldr	r3, [r3, #12]
 8014cc2:	899b      	ldrh	r3, [r3, #12]
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7fa fc56 	bl	800f578 <lwip_htons>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	b2db      	uxtb	r3, r3
 8014cd0:	f003 0301 	and.w	r3, r3, #1
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d022      	beq.n	8014d1e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	68db      	ldr	r3, [r3, #12]
 8014cde:	899b      	ldrh	r3, [r3, #12]
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	b21b      	sxth	r3, r3
 8014ce4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014ce8:	b21c      	sxth	r4, r3
 8014cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	68db      	ldr	r3, [r3, #12]
 8014cf0:	899b      	ldrh	r3, [r3, #12]
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7fa fc3f 	bl	800f578 <lwip_htons>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	b29b      	uxth	r3, r3
 8014d00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014d04:	b29b      	uxth	r3, r3
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fa fc36 	bl	800f578 <lwip_htons>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	b21b      	sxth	r3, r3
 8014d10:	4323      	orrs	r3, r4
 8014d12:	b21a      	sxth	r2, r3
 8014d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	b292      	uxth	r2, r2
 8014d1c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d22:	b29a      	uxth	r2, r3
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d28:	4413      	add	r3, r2
 8014d2a:	b299      	uxth	r1, r3
 8014d2c:	4b3c      	ldr	r3, [pc, #240]	; (8014e20 <tcp_receive+0xf18>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	b29a      	uxth	r2, r3
 8014d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	1a8a      	subs	r2, r1, r2
 8014d38:	b292      	uxth	r2, r2
 8014d3a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	685a      	ldr	r2, [r3, #4]
 8014d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	891b      	ldrh	r3, [r3, #8]
 8014d48:	4619      	mov	r1, r3
 8014d4a:	4610      	mov	r0, r2
 8014d4c:	f7fb fe74 	bl	8010a38 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	891c      	ldrh	r4, [r3, #8]
 8014d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	899b      	ldrh	r3, [r3, #12]
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7fa fc09 	bl	800f578 <lwip_htons>
 8014d66:	4603      	mov	r3, r0
 8014d68:	b2db      	uxtb	r3, r3
 8014d6a:	f003 0303 	and.w	r3, r3, #3
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d001      	beq.n	8014d76 <tcp_receive+0xe6e>
 8014d72:	2301      	movs	r3, #1
 8014d74:	e000      	b.n	8014d78 <tcp_receive+0xe70>
 8014d76:	2300      	movs	r3, #0
 8014d78:	4423      	add	r3, r4
 8014d7a:	b29a      	uxth	r2, r3
 8014d7c:	4b2a      	ldr	r3, [pc, #168]	; (8014e28 <tcp_receive+0xf20>)
 8014d7e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014d80:	4b29      	ldr	r3, [pc, #164]	; (8014e28 <tcp_receive+0xf20>)
 8014d82:	881b      	ldrh	r3, [r3, #0]
 8014d84:	461a      	mov	r2, r3
 8014d86:	4b26      	ldr	r3, [pc, #152]	; (8014e20 <tcp_receive+0xf18>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	441a      	add	r2, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d90:	6879      	ldr	r1, [r7, #4]
 8014d92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014d94:	440b      	add	r3, r1
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d019      	beq.n	8014dce <tcp_receive+0xec6>
 8014d9a:	4b24      	ldr	r3, [pc, #144]	; (8014e2c <tcp_receive+0xf24>)
 8014d9c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014da0:	4923      	ldr	r1, [pc, #140]	; (8014e30 <tcp_receive+0xf28>)
 8014da2:	4824      	ldr	r0, [pc, #144]	; (8014e34 <tcp_receive+0xf2c>)
 8014da4:	f004 fea4 	bl	8019af0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014da8:	e011      	b.n	8014dce <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8014db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	f47f aea4 	bne.w	8014b00 <tcp_receive+0xbf8>
 8014db8:	e00a      	b.n	8014dd0 <tcp_receive+0xec8>
                break;
 8014dba:	bf00      	nop
 8014dbc:	e008      	b.n	8014dd0 <tcp_receive+0xec8>
                break;
 8014dbe:	bf00      	nop
 8014dc0:	e006      	b.n	8014dd0 <tcp_receive+0xec8>
                  break;
 8014dc2:	bf00      	nop
 8014dc4:	e004      	b.n	8014dd0 <tcp_receive+0xec8>
                  break;
 8014dc6:	bf00      	nop
 8014dc8:	e002      	b.n	8014dd0 <tcp_receive+0xec8>
                  break;
 8014dca:	bf00      	nop
 8014dcc:	e000      	b.n	8014dd0 <tcp_receive+0xec8>
                break;
 8014dce:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f001 fa33 	bl	801623c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014dd6:	e003      	b.n	8014de0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f001 fa2f 	bl	801623c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014dde:	e01a      	b.n	8014e16 <tcp_receive+0xf0e>
 8014de0:	e019      	b.n	8014e16 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014de2:	4b0f      	ldr	r3, [pc, #60]	; (8014e20 <tcp_receive+0xf18>)
 8014de4:	681a      	ldr	r2, [r3, #0]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dea:	1ad3      	subs	r3, r2, r3
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	db0a      	blt.n	8014e06 <tcp_receive+0xefe>
 8014df0:	4b0b      	ldr	r3, [pc, #44]	; (8014e20 <tcp_receive+0xf18>)
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014df8:	6879      	ldr	r1, [r7, #4]
 8014dfa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014dfc:	440b      	add	r3, r1
 8014dfe:	1ad3      	subs	r3, r2, r3
 8014e00:	3301      	adds	r3, #1
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	dd07      	ble.n	8014e16 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	8b5b      	ldrh	r3, [r3, #26]
 8014e0a:	f043 0302 	orr.w	r3, r3, #2
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014e14:	e7ff      	b.n	8014e16 <tcp_receive+0xf0e>
 8014e16:	bf00      	nop
 8014e18:	3750      	adds	r7, #80	; 0x50
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8014e1e:	bf00      	nop
 8014e20:	20007108 	.word	0x20007108
 8014e24:	200070e8 	.word	0x200070e8
 8014e28:	20007112 	.word	0x20007112
 8014e2c:	0801d654 	.word	0x0801d654
 8014e30:	0801d9fc 	.word	0x0801d9fc
 8014e34:	0801d6a0 	.word	0x0801d6a0

08014e38 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014e3e:	4b15      	ldr	r3, [pc, #84]	; (8014e94 <tcp_get_next_optbyte+0x5c>)
 8014e40:	881b      	ldrh	r3, [r3, #0]
 8014e42:	1c5a      	adds	r2, r3, #1
 8014e44:	b291      	uxth	r1, r2
 8014e46:	4a13      	ldr	r2, [pc, #76]	; (8014e94 <tcp_get_next_optbyte+0x5c>)
 8014e48:	8011      	strh	r1, [r2, #0]
 8014e4a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014e4c:	4b12      	ldr	r3, [pc, #72]	; (8014e98 <tcp_get_next_optbyte+0x60>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d004      	beq.n	8014e5e <tcp_get_next_optbyte+0x26>
 8014e54:	4b11      	ldr	r3, [pc, #68]	; (8014e9c <tcp_get_next_optbyte+0x64>)
 8014e56:	881b      	ldrh	r3, [r3, #0]
 8014e58:	88fa      	ldrh	r2, [r7, #6]
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d208      	bcs.n	8014e70 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014e5e:	4b10      	ldr	r3, [pc, #64]	; (8014ea0 <tcp_get_next_optbyte+0x68>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	3314      	adds	r3, #20
 8014e64:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014e66:	88fb      	ldrh	r3, [r7, #6]
 8014e68:	683a      	ldr	r2, [r7, #0]
 8014e6a:	4413      	add	r3, r2
 8014e6c:	781b      	ldrb	r3, [r3, #0]
 8014e6e:	e00b      	b.n	8014e88 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014e70:	88fb      	ldrh	r3, [r7, #6]
 8014e72:	b2da      	uxtb	r2, r3
 8014e74:	4b09      	ldr	r3, [pc, #36]	; (8014e9c <tcp_get_next_optbyte+0x64>)
 8014e76:	881b      	ldrh	r3, [r3, #0]
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	1ad3      	subs	r3, r2, r3
 8014e7c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014e7e:	4b06      	ldr	r3, [pc, #24]	; (8014e98 <tcp_get_next_optbyte+0x60>)
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	797b      	ldrb	r3, [r7, #5]
 8014e84:	4413      	add	r3, r2
 8014e86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	370c      	adds	r7, #12
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e92:	4770      	bx	lr
 8014e94:	20007104 	.word	0x20007104
 8014e98:	20007100 	.word	0x20007100
 8014e9c:	200070fe 	.word	0x200070fe
 8014ea0:	200070f8 	.word	0x200070f8

08014ea4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d106      	bne.n	8014ec0 <tcp_parseopt+0x1c>
 8014eb2:	4b32      	ldr	r3, [pc, #200]	; (8014f7c <tcp_parseopt+0xd8>)
 8014eb4:	f240 727d 	movw	r2, #1917	; 0x77d
 8014eb8:	4931      	ldr	r1, [pc, #196]	; (8014f80 <tcp_parseopt+0xdc>)
 8014eba:	4832      	ldr	r0, [pc, #200]	; (8014f84 <tcp_parseopt+0xe0>)
 8014ebc:	f004 fe18 	bl	8019af0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014ec0:	4b31      	ldr	r3, [pc, #196]	; (8014f88 <tcp_parseopt+0xe4>)
 8014ec2:	881b      	ldrh	r3, [r3, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d056      	beq.n	8014f76 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014ec8:	4b30      	ldr	r3, [pc, #192]	; (8014f8c <tcp_parseopt+0xe8>)
 8014eca:	2200      	movs	r2, #0
 8014ecc:	801a      	strh	r2, [r3, #0]
 8014ece:	e046      	b.n	8014f5e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014ed0:	f7ff ffb2 	bl	8014e38 <tcp_get_next_optbyte>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014ed8:	7bfb      	ldrb	r3, [r7, #15]
 8014eda:	2b02      	cmp	r3, #2
 8014edc:	d006      	beq.n	8014eec <tcp_parseopt+0x48>
 8014ede:	2b02      	cmp	r3, #2
 8014ee0:	dc2c      	bgt.n	8014f3c <tcp_parseopt+0x98>
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d042      	beq.n	8014f6c <tcp_parseopt+0xc8>
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	d128      	bne.n	8014f3c <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014eea:	e038      	b.n	8014f5e <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014eec:	f7ff ffa4 	bl	8014e38 <tcp_get_next_optbyte>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	2b04      	cmp	r3, #4
 8014ef4:	d13c      	bne.n	8014f70 <tcp_parseopt+0xcc>
 8014ef6:	4b25      	ldr	r3, [pc, #148]	; (8014f8c <tcp_parseopt+0xe8>)
 8014ef8:	881b      	ldrh	r3, [r3, #0]
 8014efa:	3301      	adds	r3, #1
 8014efc:	4a22      	ldr	r2, [pc, #136]	; (8014f88 <tcp_parseopt+0xe4>)
 8014efe:	8812      	ldrh	r2, [r2, #0]
 8014f00:	4293      	cmp	r3, r2
 8014f02:	da35      	bge.n	8014f70 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014f04:	f7ff ff98 	bl	8014e38 <tcp_get_next_optbyte>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	b29b      	uxth	r3, r3
 8014f0c:	021b      	lsls	r3, r3, #8
 8014f0e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014f10:	f7ff ff92 	bl	8014e38 <tcp_get_next_optbyte>
 8014f14:	4603      	mov	r3, r0
 8014f16:	b29a      	uxth	r2, r3
 8014f18:	89bb      	ldrh	r3, [r7, #12]
 8014f1a:	4313      	orrs	r3, r2
 8014f1c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014f1e:	89bb      	ldrh	r3, [r7, #12]
 8014f20:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014f24:	4293      	cmp	r3, r2
 8014f26:	d804      	bhi.n	8014f32 <tcp_parseopt+0x8e>
 8014f28:	89bb      	ldrh	r3, [r7, #12]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d001      	beq.n	8014f32 <tcp_parseopt+0x8e>
 8014f2e:	89ba      	ldrh	r2, [r7, #12]
 8014f30:	e001      	b.n	8014f36 <tcp_parseopt+0x92>
 8014f32:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014f3a:	e010      	b.n	8014f5e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014f3c:	f7ff ff7c 	bl	8014e38 <tcp_get_next_optbyte>
 8014f40:	4603      	mov	r3, r0
 8014f42:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014f44:	7afb      	ldrb	r3, [r7, #11]
 8014f46:	2b01      	cmp	r3, #1
 8014f48:	d914      	bls.n	8014f74 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014f4a:	7afb      	ldrb	r3, [r7, #11]
 8014f4c:	b29a      	uxth	r2, r3
 8014f4e:	4b0f      	ldr	r3, [pc, #60]	; (8014f8c <tcp_parseopt+0xe8>)
 8014f50:	881b      	ldrh	r3, [r3, #0]
 8014f52:	4413      	add	r3, r2
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	3b02      	subs	r3, #2
 8014f58:	b29a      	uxth	r2, r3
 8014f5a:	4b0c      	ldr	r3, [pc, #48]	; (8014f8c <tcp_parseopt+0xe8>)
 8014f5c:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014f5e:	4b0b      	ldr	r3, [pc, #44]	; (8014f8c <tcp_parseopt+0xe8>)
 8014f60:	881a      	ldrh	r2, [r3, #0]
 8014f62:	4b09      	ldr	r3, [pc, #36]	; (8014f88 <tcp_parseopt+0xe4>)
 8014f64:	881b      	ldrh	r3, [r3, #0]
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d3b2      	bcc.n	8014ed0 <tcp_parseopt+0x2c>
 8014f6a:	e004      	b.n	8014f76 <tcp_parseopt+0xd2>
          return;
 8014f6c:	bf00      	nop
 8014f6e:	e002      	b.n	8014f76 <tcp_parseopt+0xd2>
            return;
 8014f70:	bf00      	nop
 8014f72:	e000      	b.n	8014f76 <tcp_parseopt+0xd2>
            return;
 8014f74:	bf00      	nop
      }
    }
  }
}
 8014f76:	3710      	adds	r7, #16
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}
 8014f7c:	0801d654 	.word	0x0801d654
 8014f80:	0801dab8 	.word	0x0801dab8
 8014f84:	0801d6a0 	.word	0x0801d6a0
 8014f88:	200070fc 	.word	0x200070fc
 8014f8c:	20007104 	.word	0x20007104

08014f90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014f90:	b480      	push	{r7}
 8014f92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014f94:	4b05      	ldr	r3, [pc, #20]	; (8014fac <tcp_trigger_input_pcb_close+0x1c>)
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	f043 0310 	orr.w	r3, r3, #16
 8014f9c:	b2da      	uxtb	r2, r3
 8014f9e:	4b03      	ldr	r3, [pc, #12]	; (8014fac <tcp_trigger_input_pcb_close+0x1c>)
 8014fa0:	701a      	strb	r2, [r3, #0]
}
 8014fa2:	bf00      	nop
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014faa:	4770      	bx	lr
 8014fac:	20007115 	.word	0x20007115

08014fb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	60f8      	str	r0, [r7, #12]
 8014fb8:	60b9      	str	r1, [r7, #8]
 8014fba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d00a      	beq.n	8014fd8 <tcp_route+0x28>
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	7a1b      	ldrb	r3, [r3, #8]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d006      	beq.n	8014fd8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	7a1b      	ldrb	r3, [r3, #8]
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7fb fb76 	bl	80106c0 <netif_get_by_index>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	e003      	b.n	8014fe0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f002 fe61 	bl	8017ca0 <ip4_route>
 8014fde:	4603      	mov	r3, r0
  }
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3710      	adds	r7, #16
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014fe8:	b590      	push	{r4, r7, lr}
 8014fea:	b087      	sub	sp, #28
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	603b      	str	r3, [r7, #0]
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d105      	bne.n	801500a <tcp_create_segment+0x22>
 8014ffe:	4b44      	ldr	r3, [pc, #272]	; (8015110 <tcp_create_segment+0x128>)
 8015000:	22a3      	movs	r2, #163	; 0xa3
 8015002:	4944      	ldr	r1, [pc, #272]	; (8015114 <tcp_create_segment+0x12c>)
 8015004:	4844      	ldr	r0, [pc, #272]	; (8015118 <tcp_create_segment+0x130>)
 8015006:	f004 fd73 	bl	8019af0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d105      	bne.n	801501c <tcp_create_segment+0x34>
 8015010:	4b3f      	ldr	r3, [pc, #252]	; (8015110 <tcp_create_segment+0x128>)
 8015012:	22a4      	movs	r2, #164	; 0xa4
 8015014:	4941      	ldr	r1, [pc, #260]	; (801511c <tcp_create_segment+0x134>)
 8015016:	4840      	ldr	r0, [pc, #256]	; (8015118 <tcp_create_segment+0x130>)
 8015018:	f004 fd6a 	bl	8019af0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801501c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015020:	009b      	lsls	r3, r3, #2
 8015022:	b2db      	uxtb	r3, r3
 8015024:	f003 0304 	and.w	r3, r3, #4
 8015028:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801502a:	2003      	movs	r0, #3
 801502c:	f7fa ffc2 	bl	800ffb4 <memp_malloc>
 8015030:	6138      	str	r0, [r7, #16]
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d104      	bne.n	8015042 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015038:	68b8      	ldr	r0, [r7, #8]
 801503a:	f7fb fe81 	bl	8010d40 <pbuf_free>
    return NULL;
 801503e:	2300      	movs	r3, #0
 8015040:	e061      	b.n	8015106 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015048:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	2200      	movs	r2, #0
 801504e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015050:	693b      	ldr	r3, [r7, #16]
 8015052:	68ba      	ldr	r2, [r7, #8]
 8015054:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	891a      	ldrh	r2, [r3, #8]
 801505a:	7dfb      	ldrb	r3, [r7, #23]
 801505c:	b29b      	uxth	r3, r3
 801505e:	429a      	cmp	r2, r3
 8015060:	d205      	bcs.n	801506e <tcp_create_segment+0x86>
 8015062:	4b2b      	ldr	r3, [pc, #172]	; (8015110 <tcp_create_segment+0x128>)
 8015064:	22b0      	movs	r2, #176	; 0xb0
 8015066:	492e      	ldr	r1, [pc, #184]	; (8015120 <tcp_create_segment+0x138>)
 8015068:	482b      	ldr	r0, [pc, #172]	; (8015118 <tcp_create_segment+0x130>)
 801506a:	f004 fd41 	bl	8019af0 <iprintf>
  seg->len = p->tot_len - optlen;
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	891a      	ldrh	r2, [r3, #8]
 8015072:	7dfb      	ldrb	r3, [r7, #23]
 8015074:	b29b      	uxth	r3, r3
 8015076:	1ad3      	subs	r3, r2, r3
 8015078:	b29a      	uxth	r2, r3
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801507e:	2114      	movs	r1, #20
 8015080:	68b8      	ldr	r0, [r7, #8]
 8015082:	f7fb fdc7 	bl	8010c14 <pbuf_add_header>
 8015086:	4603      	mov	r3, r0
 8015088:	2b00      	cmp	r3, #0
 801508a:	d004      	beq.n	8015096 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801508c:	6938      	ldr	r0, [r7, #16]
 801508e:	f7fd f8ce 	bl	801222e <tcp_seg_free>
    return NULL;
 8015092:	2300      	movs	r3, #0
 8015094:	e037      	b.n	8015106 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015096:	693b      	ldr	r3, [r7, #16]
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	685a      	ldr	r2, [r3, #4]
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	8ada      	ldrh	r2, [r3, #22]
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	68dc      	ldr	r4, [r3, #12]
 80150a8:	4610      	mov	r0, r2
 80150aa:	f7fa fa65 	bl	800f578 <lwip_htons>
 80150ae:	4603      	mov	r3, r0
 80150b0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	8b1a      	ldrh	r2, [r3, #24]
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	68dc      	ldr	r4, [r3, #12]
 80150ba:	4610      	mov	r0, r2
 80150bc:	f7fa fa5c 	bl	800f578 <lwip_htons>
 80150c0:	4603      	mov	r3, r0
 80150c2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	68dc      	ldr	r4, [r3, #12]
 80150c8:	6838      	ldr	r0, [r7, #0]
 80150ca:	f7fa fa6a 	bl	800f5a2 <lwip_htonl>
 80150ce:	4603      	mov	r3, r0
 80150d0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80150d2:	7dfb      	ldrb	r3, [r7, #23]
 80150d4:	089b      	lsrs	r3, r3, #2
 80150d6:	b2db      	uxtb	r3, r3
 80150d8:	b29b      	uxth	r3, r3
 80150da:	3305      	adds	r3, #5
 80150dc:	b29b      	uxth	r3, r3
 80150de:	031b      	lsls	r3, r3, #12
 80150e0:	b29a      	uxth	r2, r3
 80150e2:	79fb      	ldrb	r3, [r7, #7]
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	4313      	orrs	r3, r2
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	693b      	ldr	r3, [r7, #16]
 80150ec:	68dc      	ldr	r4, [r3, #12]
 80150ee:	4610      	mov	r0, r2
 80150f0:	f7fa fa42 	bl	800f578 <lwip_htons>
 80150f4:	4603      	mov	r3, r0
 80150f6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80150f8:	693b      	ldr	r3, [r7, #16]
 80150fa:	68db      	ldr	r3, [r3, #12]
 80150fc:	2200      	movs	r2, #0
 80150fe:	749a      	strb	r2, [r3, #18]
 8015100:	2200      	movs	r2, #0
 8015102:	74da      	strb	r2, [r3, #19]
  return seg;
 8015104:	693b      	ldr	r3, [r7, #16]
}
 8015106:	4618      	mov	r0, r3
 8015108:	371c      	adds	r7, #28
 801510a:	46bd      	mov	sp, r7
 801510c:	bd90      	pop	{r4, r7, pc}
 801510e:	bf00      	nop
 8015110:	0801dad4 	.word	0x0801dad4
 8015114:	0801db08 	.word	0x0801db08
 8015118:	0801db28 	.word	0x0801db28
 801511c:	0801db50 	.word	0x0801db50
 8015120:	0801db74 	.word	0x0801db74

08015124 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015124:	b590      	push	{r4, r7, lr}
 8015126:	b08b      	sub	sp, #44	; 0x2c
 8015128:	af02      	add	r7, sp, #8
 801512a:	6078      	str	r0, [r7, #4]
 801512c:	460b      	mov	r3, r1
 801512e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015130:	2300      	movs	r3, #0
 8015132:	61fb      	str	r3, [r7, #28]
 8015134:	2300      	movs	r3, #0
 8015136:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015138:	2300      	movs	r3, #0
 801513a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d106      	bne.n	8015150 <tcp_split_unsent_seg+0x2c>
 8015142:	4b95      	ldr	r3, [pc, #596]	; (8015398 <tcp_split_unsent_seg+0x274>)
 8015144:	f240 324b 	movw	r2, #843	; 0x34b
 8015148:	4994      	ldr	r1, [pc, #592]	; (801539c <tcp_split_unsent_seg+0x278>)
 801514a:	4895      	ldr	r0, [pc, #596]	; (80153a0 <tcp_split_unsent_seg+0x27c>)
 801514c:	f004 fcd0 	bl	8019af0 <iprintf>

  useg = pcb->unsent;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015154:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d102      	bne.n	8015162 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801515c:	f04f 33ff 	mov.w	r3, #4294967295
 8015160:	e116      	b.n	8015390 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015162:	887b      	ldrh	r3, [r7, #2]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d109      	bne.n	801517c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015168:	4b8b      	ldr	r3, [pc, #556]	; (8015398 <tcp_split_unsent_seg+0x274>)
 801516a:	f240 3253 	movw	r2, #851	; 0x353
 801516e:	498d      	ldr	r1, [pc, #564]	; (80153a4 <tcp_split_unsent_seg+0x280>)
 8015170:	488b      	ldr	r0, [pc, #556]	; (80153a0 <tcp_split_unsent_seg+0x27c>)
 8015172:	f004 fcbd 	bl	8019af0 <iprintf>
    return ERR_VAL;
 8015176:	f06f 0305 	mvn.w	r3, #5
 801517a:	e109      	b.n	8015390 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801517c:	697b      	ldr	r3, [r7, #20]
 801517e:	891b      	ldrh	r3, [r3, #8]
 8015180:	887a      	ldrh	r2, [r7, #2]
 8015182:	429a      	cmp	r2, r3
 8015184:	d301      	bcc.n	801518a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015186:	2300      	movs	r3, #0
 8015188:	e102      	b.n	8015390 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801518e:	887a      	ldrh	r2, [r7, #2]
 8015190:	429a      	cmp	r2, r3
 8015192:	d906      	bls.n	80151a2 <tcp_split_unsent_seg+0x7e>
 8015194:	4b80      	ldr	r3, [pc, #512]	; (8015398 <tcp_split_unsent_seg+0x274>)
 8015196:	f240 325b 	movw	r2, #859	; 0x35b
 801519a:	4983      	ldr	r1, [pc, #524]	; (80153a8 <tcp_split_unsent_seg+0x284>)
 801519c:	4880      	ldr	r0, [pc, #512]	; (80153a0 <tcp_split_unsent_seg+0x27c>)
 801519e:	f004 fca7 	bl	8019af0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	891b      	ldrh	r3, [r3, #8]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d106      	bne.n	80151b8 <tcp_split_unsent_seg+0x94>
 80151aa:	4b7b      	ldr	r3, [pc, #492]	; (8015398 <tcp_split_unsent_seg+0x274>)
 80151ac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80151b0:	497e      	ldr	r1, [pc, #504]	; (80153ac <tcp_split_unsent_seg+0x288>)
 80151b2:	487b      	ldr	r0, [pc, #492]	; (80153a0 <tcp_split_unsent_seg+0x27c>)
 80151b4:	f004 fc9c 	bl	8019af0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	7a9b      	ldrb	r3, [r3, #10]
 80151bc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80151be:	7bfb      	ldrb	r3, [r7, #15]
 80151c0:	009b      	lsls	r3, r3, #2
 80151c2:	b2db      	uxtb	r3, r3
 80151c4:	f003 0304 	and.w	r3, r3, #4
 80151c8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	891a      	ldrh	r2, [r3, #8]
 80151ce:	887b      	ldrh	r3, [r7, #2]
 80151d0:	1ad3      	subs	r3, r2, r3
 80151d2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80151d4:	7bbb      	ldrb	r3, [r7, #14]
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	89bb      	ldrh	r3, [r7, #12]
 80151da:	4413      	add	r3, r2
 80151dc:	b29b      	uxth	r3, r3
 80151de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80151e2:	4619      	mov	r1, r3
 80151e4:	2036      	movs	r0, #54	; 0x36
 80151e6:	f7fb fac7 	bl	8010778 <pbuf_alloc>
 80151ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80151ec:	693b      	ldr	r3, [r7, #16]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f000 80b7 	beq.w	8015362 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	685b      	ldr	r3, [r3, #4]
 80151f8:	891a      	ldrh	r2, [r3, #8]
 80151fa:	697b      	ldr	r3, [r7, #20]
 80151fc:	891b      	ldrh	r3, [r3, #8]
 80151fe:	1ad3      	subs	r3, r2, r3
 8015200:	b29a      	uxth	r2, r3
 8015202:	887b      	ldrh	r3, [r7, #2]
 8015204:	4413      	add	r3, r2
 8015206:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	6858      	ldr	r0, [r3, #4]
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	685a      	ldr	r2, [r3, #4]
 8015210:	7bbb      	ldrb	r3, [r7, #14]
 8015212:	18d1      	adds	r1, r2, r3
 8015214:	897b      	ldrh	r3, [r7, #10]
 8015216:	89ba      	ldrh	r2, [r7, #12]
 8015218:	f7fb ff7c 	bl	8011114 <pbuf_copy_partial>
 801521c:	4603      	mov	r3, r0
 801521e:	461a      	mov	r2, r3
 8015220:	89bb      	ldrh	r3, [r7, #12]
 8015222:	4293      	cmp	r3, r2
 8015224:	f040 809f 	bne.w	8015366 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015228:	697b      	ldr	r3, [r7, #20]
 801522a:	68db      	ldr	r3, [r3, #12]
 801522c:	899b      	ldrh	r3, [r3, #12]
 801522e:	b29b      	uxth	r3, r3
 8015230:	4618      	mov	r0, r3
 8015232:	f7fa f9a1 	bl	800f578 <lwip_htons>
 8015236:	4603      	mov	r3, r0
 8015238:	b2db      	uxtb	r3, r3
 801523a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801523e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015240:	2300      	movs	r3, #0
 8015242:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015244:	7efb      	ldrb	r3, [r7, #27]
 8015246:	f003 0308 	and.w	r3, r3, #8
 801524a:	2b00      	cmp	r3, #0
 801524c:	d007      	beq.n	801525e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801524e:	7efb      	ldrb	r3, [r7, #27]
 8015250:	f023 0308 	bic.w	r3, r3, #8
 8015254:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015256:	7ebb      	ldrb	r3, [r7, #26]
 8015258:	f043 0308 	orr.w	r3, r3, #8
 801525c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801525e:	7efb      	ldrb	r3, [r7, #27]
 8015260:	f003 0301 	and.w	r3, r3, #1
 8015264:	2b00      	cmp	r3, #0
 8015266:	d007      	beq.n	8015278 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015268:	7efb      	ldrb	r3, [r7, #27]
 801526a:	f023 0301 	bic.w	r3, r3, #1
 801526e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015270:	7ebb      	ldrb	r3, [r7, #26]
 8015272:	f043 0301 	orr.w	r3, r3, #1
 8015276:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	68db      	ldr	r3, [r3, #12]
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	4618      	mov	r0, r3
 8015280:	f7fa f98f 	bl	800f5a2 <lwip_htonl>
 8015284:	4602      	mov	r2, r0
 8015286:	887b      	ldrh	r3, [r7, #2]
 8015288:	18d1      	adds	r1, r2, r3
 801528a:	7eba      	ldrb	r2, [r7, #26]
 801528c:	7bfb      	ldrb	r3, [r7, #15]
 801528e:	9300      	str	r3, [sp, #0]
 8015290:	460b      	mov	r3, r1
 8015292:	6939      	ldr	r1, [r7, #16]
 8015294:	6878      	ldr	r0, [r7, #4]
 8015296:	f7ff fea7 	bl	8014fe8 <tcp_create_segment>
 801529a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d063      	beq.n	801536a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	685b      	ldr	r3, [r3, #4]
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7fb fdd2 	bl	8010e50 <pbuf_clen>
 80152ac:	4603      	mov	r3, r0
 80152ae:	461a      	mov	r2, r3
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152b6:	1a9b      	subs	r3, r3, r2
 80152b8:	b29a      	uxth	r2, r3
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	6858      	ldr	r0, [r3, #4]
 80152c4:	697b      	ldr	r3, [r7, #20]
 80152c6:	685b      	ldr	r3, [r3, #4]
 80152c8:	891a      	ldrh	r2, [r3, #8]
 80152ca:	89bb      	ldrh	r3, [r7, #12]
 80152cc:	1ad3      	subs	r3, r2, r3
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	4619      	mov	r1, r3
 80152d2:	f7fb fbb1 	bl	8010a38 <pbuf_realloc>
  useg->len -= remainder;
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	891a      	ldrh	r2, [r3, #8]
 80152da:	89bb      	ldrh	r3, [r7, #12]
 80152dc:	1ad3      	subs	r3, r2, r3
 80152de:	b29a      	uxth	r2, r3
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80152e4:	697b      	ldr	r3, [r7, #20]
 80152e6:	68db      	ldr	r3, [r3, #12]
 80152e8:	899b      	ldrh	r3, [r3, #12]
 80152ea:	b29c      	uxth	r4, r3
 80152ec:	7efb      	ldrb	r3, [r7, #27]
 80152ee:	b29b      	uxth	r3, r3
 80152f0:	4618      	mov	r0, r3
 80152f2:	f7fa f941 	bl	800f578 <lwip_htons>
 80152f6:	4603      	mov	r3, r0
 80152f8:	461a      	mov	r2, r3
 80152fa:	697b      	ldr	r3, [r7, #20]
 80152fc:	68db      	ldr	r3, [r3, #12]
 80152fe:	4322      	orrs	r2, r4
 8015300:	b292      	uxth	r2, r2
 8015302:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	4618      	mov	r0, r3
 801530a:	f7fb fda1 	bl	8010e50 <pbuf_clen>
 801530e:	4603      	mov	r3, r0
 8015310:	461a      	mov	r2, r3
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015318:	4413      	add	r3, r2
 801531a:	b29a      	uxth	r2, r3
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	685b      	ldr	r3, [r3, #4]
 8015326:	4618      	mov	r0, r3
 8015328:	f7fb fd92 	bl	8010e50 <pbuf_clen>
 801532c:	4603      	mov	r3, r0
 801532e:	461a      	mov	r2, r3
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015336:	4413      	add	r3, r2
 8015338:	b29a      	uxth	r2, r3
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015340:	697b      	ldr	r3, [r7, #20]
 8015342:	681a      	ldr	r2, [r3, #0]
 8015344:	69fb      	ldr	r3, [r7, #28]
 8015346:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	69fa      	ldr	r2, [r7, #28]
 801534c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d103      	bne.n	801535e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2200      	movs	r2, #0
 801535a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801535e:	2300      	movs	r3, #0
 8015360:	e016      	b.n	8015390 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015362:	bf00      	nop
 8015364:	e002      	b.n	801536c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015366:	bf00      	nop
 8015368:	e000      	b.n	801536c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801536a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801536c:	69fb      	ldr	r3, [r7, #28]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d006      	beq.n	8015380 <tcp_split_unsent_seg+0x25c>
 8015372:	4b09      	ldr	r3, [pc, #36]	; (8015398 <tcp_split_unsent_seg+0x274>)
 8015374:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015378:	490d      	ldr	r1, [pc, #52]	; (80153b0 <tcp_split_unsent_seg+0x28c>)
 801537a:	4809      	ldr	r0, [pc, #36]	; (80153a0 <tcp_split_unsent_seg+0x27c>)
 801537c:	f004 fbb8 	bl	8019af0 <iprintf>
  if (p != NULL) {
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d002      	beq.n	801538c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015386:	6938      	ldr	r0, [r7, #16]
 8015388:	f7fb fcda 	bl	8010d40 <pbuf_free>
  }

  return ERR_MEM;
 801538c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015390:	4618      	mov	r0, r3
 8015392:	3724      	adds	r7, #36	; 0x24
 8015394:	46bd      	mov	sp, r7
 8015396:	bd90      	pop	{r4, r7, pc}
 8015398:	0801dad4 	.word	0x0801dad4
 801539c:	0801de68 	.word	0x0801de68
 80153a0:	0801db28 	.word	0x0801db28
 80153a4:	0801de8c 	.word	0x0801de8c
 80153a8:	0801deb0 	.word	0x0801deb0
 80153ac:	0801dec0 	.word	0x0801dec0
 80153b0:	0801ded0 	.word	0x0801ded0

080153b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80153b4:	b590      	push	{r4, r7, lr}
 80153b6:	b085      	sub	sp, #20
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d106      	bne.n	80153d0 <tcp_send_fin+0x1c>
 80153c2:	4b21      	ldr	r3, [pc, #132]	; (8015448 <tcp_send_fin+0x94>)
 80153c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80153c8:	4920      	ldr	r1, [pc, #128]	; (801544c <tcp_send_fin+0x98>)
 80153ca:	4821      	ldr	r0, [pc, #132]	; (8015450 <tcp_send_fin+0x9c>)
 80153cc:	f004 fb90 	bl	8019af0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d02e      	beq.n	8015436 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153dc:	60fb      	str	r3, [r7, #12]
 80153de:	e002      	b.n	80153e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d1f8      	bne.n	80153e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	899b      	ldrh	r3, [r3, #12]
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	4618      	mov	r0, r3
 80153f8:	f7fa f8be 	bl	800f578 <lwip_htons>
 80153fc:	4603      	mov	r3, r0
 80153fe:	b2db      	uxtb	r3, r3
 8015400:	f003 0307 	and.w	r3, r3, #7
 8015404:	2b00      	cmp	r3, #0
 8015406:	d116      	bne.n	8015436 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	68db      	ldr	r3, [r3, #12]
 801540c:	899b      	ldrh	r3, [r3, #12]
 801540e:	b29c      	uxth	r4, r3
 8015410:	2001      	movs	r0, #1
 8015412:	f7fa f8b1 	bl	800f578 <lwip_htons>
 8015416:	4603      	mov	r3, r0
 8015418:	461a      	mov	r2, r3
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	4322      	orrs	r2, r4
 8015420:	b292      	uxth	r2, r2
 8015422:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	8b5b      	ldrh	r3, [r3, #26]
 8015428:	f043 0320 	orr.w	r3, r3, #32
 801542c:	b29a      	uxth	r2, r3
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015432:	2300      	movs	r3, #0
 8015434:	e004      	b.n	8015440 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015436:	2101      	movs	r1, #1
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f000 f80b 	bl	8015454 <tcp_enqueue_flags>
 801543e:	4603      	mov	r3, r0
}
 8015440:	4618      	mov	r0, r3
 8015442:	3714      	adds	r7, #20
 8015444:	46bd      	mov	sp, r7
 8015446:	bd90      	pop	{r4, r7, pc}
 8015448:	0801dad4 	.word	0x0801dad4
 801544c:	0801dedc 	.word	0x0801dedc
 8015450:	0801db28 	.word	0x0801db28

08015454 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b08a      	sub	sp, #40	; 0x28
 8015458:	af02      	add	r7, sp, #8
 801545a:	6078      	str	r0, [r7, #4]
 801545c:	460b      	mov	r3, r1
 801545e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015460:	2300      	movs	r3, #0
 8015462:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015464:	2300      	movs	r3, #0
 8015466:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015468:	78fb      	ldrb	r3, [r7, #3]
 801546a:	f003 0303 	and.w	r3, r3, #3
 801546e:	2b00      	cmp	r3, #0
 8015470:	d106      	bne.n	8015480 <tcp_enqueue_flags+0x2c>
 8015472:	4b67      	ldr	r3, [pc, #412]	; (8015610 <tcp_enqueue_flags+0x1bc>)
 8015474:	f240 4211 	movw	r2, #1041	; 0x411
 8015478:	4966      	ldr	r1, [pc, #408]	; (8015614 <tcp_enqueue_flags+0x1c0>)
 801547a:	4867      	ldr	r0, [pc, #412]	; (8015618 <tcp_enqueue_flags+0x1c4>)
 801547c:	f004 fb38 	bl	8019af0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d106      	bne.n	8015494 <tcp_enqueue_flags+0x40>
 8015486:	4b62      	ldr	r3, [pc, #392]	; (8015610 <tcp_enqueue_flags+0x1bc>)
 8015488:	f240 4213 	movw	r2, #1043	; 0x413
 801548c:	4963      	ldr	r1, [pc, #396]	; (801561c <tcp_enqueue_flags+0x1c8>)
 801548e:	4862      	ldr	r0, [pc, #392]	; (8015618 <tcp_enqueue_flags+0x1c4>)
 8015490:	f004 fb2e 	bl	8019af0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015494:	78fb      	ldrb	r3, [r7, #3]
 8015496:	f003 0302 	and.w	r3, r3, #2
 801549a:	2b00      	cmp	r3, #0
 801549c:	d001      	beq.n	80154a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801549e:	2301      	movs	r3, #1
 80154a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80154a2:	7ffb      	ldrb	r3, [r7, #31]
 80154a4:	009b      	lsls	r3, r3, #2
 80154a6:	b2db      	uxtb	r3, r3
 80154a8:	f003 0304 	and.w	r3, r3, #4
 80154ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80154ae:	7dfb      	ldrb	r3, [r7, #23]
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154b6:	4619      	mov	r1, r3
 80154b8:	2036      	movs	r0, #54	; 0x36
 80154ba:	f7fb f95d 	bl	8010778 <pbuf_alloc>
 80154be:	6138      	str	r0, [r7, #16]
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d109      	bne.n	80154da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	8b5b      	ldrh	r3, [r3, #26]
 80154ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154ce:	b29a      	uxth	r2, r3
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80154d4:	f04f 33ff 	mov.w	r3, #4294967295
 80154d8:	e095      	b.n	8015606 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	895a      	ldrh	r2, [r3, #10]
 80154de:	7dfb      	ldrb	r3, [r7, #23]
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d206      	bcs.n	80154f4 <tcp_enqueue_flags+0xa0>
 80154e6:	4b4a      	ldr	r3, [pc, #296]	; (8015610 <tcp_enqueue_flags+0x1bc>)
 80154e8:	f240 4239 	movw	r2, #1081	; 0x439
 80154ec:	494c      	ldr	r1, [pc, #304]	; (8015620 <tcp_enqueue_flags+0x1cc>)
 80154ee:	484a      	ldr	r0, [pc, #296]	; (8015618 <tcp_enqueue_flags+0x1c4>)
 80154f0:	f004 fafe 	bl	8019af0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80154f8:	78fa      	ldrb	r2, [r7, #3]
 80154fa:	7ffb      	ldrb	r3, [r7, #31]
 80154fc:	9300      	str	r3, [sp, #0]
 80154fe:	460b      	mov	r3, r1
 8015500:	6939      	ldr	r1, [r7, #16]
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f7ff fd70 	bl	8014fe8 <tcp_create_segment>
 8015508:	60f8      	str	r0, [r7, #12]
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d109      	bne.n	8015524 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	8b5b      	ldrh	r3, [r3, #26]
 8015514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015518:	b29a      	uxth	r2, r3
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801551e:	f04f 33ff 	mov.w	r3, #4294967295
 8015522:	e070      	b.n	8015606 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	f003 0303 	and.w	r3, r3, #3
 801552c:	2b00      	cmp	r3, #0
 801552e:	d006      	beq.n	801553e <tcp_enqueue_flags+0xea>
 8015530:	4b37      	ldr	r3, [pc, #220]	; (8015610 <tcp_enqueue_flags+0x1bc>)
 8015532:	f240 4242 	movw	r2, #1090	; 0x442
 8015536:	493b      	ldr	r1, [pc, #236]	; (8015624 <tcp_enqueue_flags+0x1d0>)
 8015538:	4837      	ldr	r0, [pc, #220]	; (8015618 <tcp_enqueue_flags+0x1c4>)
 801553a:	f004 fad9 	bl	8019af0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	891b      	ldrh	r3, [r3, #8]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d006      	beq.n	8015554 <tcp_enqueue_flags+0x100>
 8015546:	4b32      	ldr	r3, [pc, #200]	; (8015610 <tcp_enqueue_flags+0x1bc>)
 8015548:	f240 4243 	movw	r2, #1091	; 0x443
 801554c:	4936      	ldr	r1, [pc, #216]	; (8015628 <tcp_enqueue_flags+0x1d4>)
 801554e:	4832      	ldr	r0, [pc, #200]	; (8015618 <tcp_enqueue_flags+0x1c4>)
 8015550:	f004 face 	bl	8019af0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015558:	2b00      	cmp	r3, #0
 801555a:	d103      	bne.n	8015564 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	68fa      	ldr	r2, [r7, #12]
 8015560:	66da      	str	r2, [r3, #108]	; 0x6c
 8015562:	e00d      	b.n	8015580 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015568:	61bb      	str	r3, [r7, #24]
 801556a:	e002      	b.n	8015572 <tcp_enqueue_flags+0x11e>
 801556c:	69bb      	ldr	r3, [r7, #24]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	61bb      	str	r3, [r7, #24]
 8015572:	69bb      	ldr	r3, [r7, #24]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d1f8      	bne.n	801556c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801557a:	69bb      	ldr	r3, [r7, #24]
 801557c:	68fa      	ldr	r2, [r7, #12]
 801557e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2200      	movs	r2, #0
 8015584:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015588:	78fb      	ldrb	r3, [r7, #3]
 801558a:	f003 0302 	and.w	r3, r3, #2
 801558e:	2b00      	cmp	r3, #0
 8015590:	d104      	bne.n	801559c <tcp_enqueue_flags+0x148>
 8015592:	78fb      	ldrb	r3, [r7, #3]
 8015594:	f003 0301 	and.w	r3, r3, #1
 8015598:	2b00      	cmp	r3, #0
 801559a:	d004      	beq.n	80155a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155a0:	1c5a      	adds	r2, r3, #1
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80155a6:	78fb      	ldrb	r3, [r7, #3]
 80155a8:	f003 0301 	and.w	r3, r3, #1
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d006      	beq.n	80155be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	8b5b      	ldrh	r3, [r3, #26]
 80155b4:	f043 0320 	orr.w	r3, r3, #32
 80155b8:	b29a      	uxth	r2, r3
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	685b      	ldr	r3, [r3, #4]
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7fb fc44 	bl	8010e50 <pbuf_clen>
 80155c8:	4603      	mov	r3, r0
 80155ca:	461a      	mov	r2, r3
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80155d2:	4413      	add	r3, r2
 80155d4:	b29a      	uxth	r2, r3
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d00e      	beq.n	8015604 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d10a      	bne.n	8015604 <tcp_enqueue_flags+0x1b0>
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d106      	bne.n	8015604 <tcp_enqueue_flags+0x1b0>
 80155f6:	4b06      	ldr	r3, [pc, #24]	; (8015610 <tcp_enqueue_flags+0x1bc>)
 80155f8:	f240 4265 	movw	r2, #1125	; 0x465
 80155fc:	490b      	ldr	r1, [pc, #44]	; (801562c <tcp_enqueue_flags+0x1d8>)
 80155fe:	4806      	ldr	r0, [pc, #24]	; (8015618 <tcp_enqueue_flags+0x1c4>)
 8015600:	f004 fa76 	bl	8019af0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015604:	2300      	movs	r3, #0
}
 8015606:	4618      	mov	r0, r3
 8015608:	3720      	adds	r7, #32
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
 801560e:	bf00      	nop
 8015610:	0801dad4 	.word	0x0801dad4
 8015614:	0801def8 	.word	0x0801def8
 8015618:	0801db28 	.word	0x0801db28
 801561c:	0801df50 	.word	0x0801df50
 8015620:	0801df70 	.word	0x0801df70
 8015624:	0801dfac 	.word	0x0801dfac
 8015628:	0801dfc4 	.word	0x0801dfc4
 801562c:	0801dff0 	.word	0x0801dff0

08015630 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015630:	b5b0      	push	{r4, r5, r7, lr}
 8015632:	b08a      	sub	sp, #40	; 0x28
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d106      	bne.n	801564c <tcp_output+0x1c>
 801563e:	4b8a      	ldr	r3, [pc, #552]	; (8015868 <tcp_output+0x238>)
 8015640:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015644:	4989      	ldr	r1, [pc, #548]	; (801586c <tcp_output+0x23c>)
 8015646:	488a      	ldr	r0, [pc, #552]	; (8015870 <tcp_output+0x240>)
 8015648:	f004 fa52 	bl	8019af0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	7d1b      	ldrb	r3, [r3, #20]
 8015650:	2b01      	cmp	r3, #1
 8015652:	d106      	bne.n	8015662 <tcp_output+0x32>
 8015654:	4b84      	ldr	r3, [pc, #528]	; (8015868 <tcp_output+0x238>)
 8015656:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801565a:	4986      	ldr	r1, [pc, #536]	; (8015874 <tcp_output+0x244>)
 801565c:	4884      	ldr	r0, [pc, #528]	; (8015870 <tcp_output+0x240>)
 801565e:	f004 fa47 	bl	8019af0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015662:	4b85      	ldr	r3, [pc, #532]	; (8015878 <tcp_output+0x248>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	687a      	ldr	r2, [r7, #4]
 8015668:	429a      	cmp	r2, r3
 801566a:	d101      	bne.n	8015670 <tcp_output+0x40>
    return ERR_OK;
 801566c:	2300      	movs	r3, #0
 801566e:	e1ce      	b.n	8015a0e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801567c:	4293      	cmp	r3, r2
 801567e:	bf28      	it	cs
 8015680:	4613      	movcs	r3, r2
 8015682:	b29b      	uxth	r3, r3
 8015684:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801568a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568e:	2b00      	cmp	r3, #0
 8015690:	d10b      	bne.n	80156aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	8b5b      	ldrh	r3, [r3, #26]
 8015696:	f003 0302 	and.w	r3, r3, #2
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 81aa 	beq.w	80159f4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f000 fdcb 	bl	801623c <tcp_send_empty_ack>
 80156a6:	4603      	mov	r3, r0
 80156a8:	e1b1      	b.n	8015a0e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80156aa:	6879      	ldr	r1, [r7, #4]
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	3304      	adds	r3, #4
 80156b0:	461a      	mov	r2, r3
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f7ff fc7c 	bl	8014fb0 <tcp_route>
 80156b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d102      	bne.n	80156c6 <tcp_output+0x96>
    return ERR_RTE;
 80156c0:	f06f 0303 	mvn.w	r3, #3
 80156c4:	e1a3      	b.n	8015a0e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d003      	beq.n	80156d4 <tcp_output+0xa4>
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d111      	bne.n	80156f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d002      	beq.n	80156e0 <tcp_output+0xb0>
 80156da:	697b      	ldr	r3, [r7, #20]
 80156dc:	3304      	adds	r3, #4
 80156de:	e000      	b.n	80156e2 <tcp_output+0xb2>
 80156e0:	2300      	movs	r3, #0
 80156e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80156e4:	693b      	ldr	r3, [r7, #16]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d102      	bne.n	80156f0 <tcp_output+0xc0>
      return ERR_RTE;
 80156ea:	f06f 0303 	mvn.w	r3, #3
 80156ee:	e18e      	b.n	8015a0e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80156f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156fa:	68db      	ldr	r3, [r3, #12]
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	4618      	mov	r0, r3
 8015700:	f7f9 ff4f 	bl	800f5a2 <lwip_htonl>
 8015704:	4602      	mov	r2, r0
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801570a:	1ad3      	subs	r3, r2, r3
 801570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801570e:	8912      	ldrh	r2, [r2, #8]
 8015710:	4413      	add	r3, r2
 8015712:	69ba      	ldr	r2, [r7, #24]
 8015714:	429a      	cmp	r2, r3
 8015716:	d227      	bcs.n	8015768 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801571e:	461a      	mov	r2, r3
 8015720:	69bb      	ldr	r3, [r7, #24]
 8015722:	4293      	cmp	r3, r2
 8015724:	d114      	bne.n	8015750 <tcp_output+0x120>
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801572a:	2b00      	cmp	r3, #0
 801572c:	d110      	bne.n	8015750 <tcp_output+0x120>
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015734:	2b00      	cmp	r3, #0
 8015736:	d10b      	bne.n	8015750 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2200      	movs	r2, #0
 801573c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2201      	movs	r2, #1
 8015744:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2200      	movs	r2, #0
 801574c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	8b5b      	ldrh	r3, [r3, #26]
 8015754:	f003 0302 	and.w	r3, r3, #2
 8015758:	2b00      	cmp	r3, #0
 801575a:	f000 814d 	beq.w	80159f8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f000 fd6c 	bl	801623c <tcp_send_empty_ack>
 8015764:	4603      	mov	r3, r0
 8015766:	e152      	b.n	8015a0e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2200      	movs	r2, #0
 801576c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015774:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015776:	6a3b      	ldr	r3, [r7, #32]
 8015778:	2b00      	cmp	r3, #0
 801577a:	f000 811c 	beq.w	80159b6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801577e:	e002      	b.n	8015786 <tcp_output+0x156>
 8015780:	6a3b      	ldr	r3, [r7, #32]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	623b      	str	r3, [r7, #32]
 8015786:	6a3b      	ldr	r3, [r7, #32]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d1f8      	bne.n	8015780 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801578e:	e112      	b.n	80159b6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015792:	68db      	ldr	r3, [r3, #12]
 8015794:	899b      	ldrh	r3, [r3, #12]
 8015796:	b29b      	uxth	r3, r3
 8015798:	4618      	mov	r0, r3
 801579a:	f7f9 feed 	bl	800f578 <lwip_htons>
 801579e:	4603      	mov	r3, r0
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	f003 0304 	and.w	r3, r3, #4
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d006      	beq.n	80157b8 <tcp_output+0x188>
 80157aa:	4b2f      	ldr	r3, [pc, #188]	; (8015868 <tcp_output+0x238>)
 80157ac:	f240 5236 	movw	r2, #1334	; 0x536
 80157b0:	4932      	ldr	r1, [pc, #200]	; (801587c <tcp_output+0x24c>)
 80157b2:	482f      	ldr	r0, [pc, #188]	; (8015870 <tcp_output+0x240>)
 80157b4:	f004 f99c 	bl	8019af0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d01f      	beq.n	8015800 <tcp_output+0x1d0>
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	8b5b      	ldrh	r3, [r3, #26]
 80157c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d119      	bne.n	8015800 <tcp_output+0x1d0>
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d00b      	beq.n	80157ec <tcp_output+0x1bc>
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d110      	bne.n	8015800 <tcp_output+0x1d0>
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157e2:	891a      	ldrh	r2, [r3, #8]
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d209      	bcs.n	8015800 <tcp_output+0x1d0>
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d004      	beq.n	8015800 <tcp_output+0x1d0>
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80157fc:	2b0f      	cmp	r3, #15
 80157fe:	d901      	bls.n	8015804 <tcp_output+0x1d4>
 8015800:	2301      	movs	r3, #1
 8015802:	e000      	b.n	8015806 <tcp_output+0x1d6>
 8015804:	2300      	movs	r3, #0
 8015806:	2b00      	cmp	r3, #0
 8015808:	d106      	bne.n	8015818 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	8b5b      	ldrh	r3, [r3, #26]
 801580e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015812:	2b00      	cmp	r3, #0
 8015814:	f000 80e4 	beq.w	80159e0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	7d1b      	ldrb	r3, [r3, #20]
 801581c:	2b02      	cmp	r3, #2
 801581e:	d00d      	beq.n	801583c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	899b      	ldrh	r3, [r3, #12]
 8015826:	b29c      	uxth	r4, r3
 8015828:	2010      	movs	r0, #16
 801582a:	f7f9 fea5 	bl	800f578 <lwip_htons>
 801582e:	4603      	mov	r3, r0
 8015830:	461a      	mov	r2, r3
 8015832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	4322      	orrs	r2, r4
 8015838:	b292      	uxth	r2, r2
 801583a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801583c:	697a      	ldr	r2, [r7, #20]
 801583e:	6879      	ldr	r1, [r7, #4]
 8015840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015842:	f000 f909 	bl	8015a58 <tcp_output_segment>
 8015846:	4603      	mov	r3, r0
 8015848:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801584a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d016      	beq.n	8015880 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	8b5b      	ldrh	r3, [r3, #26]
 8015856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801585a:	b29a      	uxth	r2, r3
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	835a      	strh	r2, [r3, #26]
      return err;
 8015860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015864:	e0d3      	b.n	8015a0e <tcp_output+0x3de>
 8015866:	bf00      	nop
 8015868:	0801dad4 	.word	0x0801dad4
 801586c:	0801e018 	.word	0x0801e018
 8015870:	0801db28 	.word	0x0801db28
 8015874:	0801e030 	.word	0x0801e030
 8015878:	2000711c 	.word	0x2000711c
 801587c:	0801e058 	.word	0x0801e058
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015882:	681a      	ldr	r2, [r3, #0]
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	7d1b      	ldrb	r3, [r3, #20]
 801588c:	2b02      	cmp	r3, #2
 801588e:	d006      	beq.n	801589e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	8b5b      	ldrh	r3, [r3, #26]
 8015894:	f023 0303 	bic.w	r3, r3, #3
 8015898:	b29a      	uxth	r2, r3
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7f9 fe7c 	bl	800f5a2 <lwip_htonl>
 80158aa:	4604      	mov	r4, r0
 80158ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ae:	891b      	ldrh	r3, [r3, #8]
 80158b0:	461d      	mov	r5, r3
 80158b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b4:	68db      	ldr	r3, [r3, #12]
 80158b6:	899b      	ldrh	r3, [r3, #12]
 80158b8:	b29b      	uxth	r3, r3
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7f9 fe5c 	bl	800f578 <lwip_htons>
 80158c0:	4603      	mov	r3, r0
 80158c2:	b2db      	uxtb	r3, r3
 80158c4:	f003 0303 	and.w	r3, r3, #3
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d001      	beq.n	80158d0 <tcp_output+0x2a0>
 80158cc:	2301      	movs	r3, #1
 80158ce:	e000      	b.n	80158d2 <tcp_output+0x2a2>
 80158d0:	2300      	movs	r3, #0
 80158d2:	442b      	add	r3, r5
 80158d4:	4423      	add	r3, r4
 80158d6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	1ad3      	subs	r3, r2, r3
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	da02      	bge.n	80158ea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	68ba      	ldr	r2, [r7, #8]
 80158e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80158ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ec:	891b      	ldrh	r3, [r3, #8]
 80158ee:	461c      	mov	r4, r3
 80158f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f2:	68db      	ldr	r3, [r3, #12]
 80158f4:	899b      	ldrh	r3, [r3, #12]
 80158f6:	b29b      	uxth	r3, r3
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7f9 fe3d 	bl	800f578 <lwip_htons>
 80158fe:	4603      	mov	r3, r0
 8015900:	b2db      	uxtb	r3, r3
 8015902:	f003 0303 	and.w	r3, r3, #3
 8015906:	2b00      	cmp	r3, #0
 8015908:	d001      	beq.n	801590e <tcp_output+0x2de>
 801590a:	2301      	movs	r3, #1
 801590c:	e000      	b.n	8015910 <tcp_output+0x2e0>
 801590e:	2300      	movs	r3, #0
 8015910:	4423      	add	r3, r4
 8015912:	2b00      	cmp	r3, #0
 8015914:	d049      	beq.n	80159aa <tcp_output+0x37a>
      seg->next = NULL;
 8015916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015918:	2200      	movs	r2, #0
 801591a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015920:	2b00      	cmp	r3, #0
 8015922:	d105      	bne.n	8015930 <tcp_output+0x300>
        pcb->unacked = seg;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015928:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592c:	623b      	str	r3, [r7, #32]
 801592e:	e03f      	b.n	80159b0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	4618      	mov	r0, r3
 8015938:	f7f9 fe33 	bl	800f5a2 <lwip_htonl>
 801593c:	4604      	mov	r4, r0
 801593e:	6a3b      	ldr	r3, [r7, #32]
 8015940:	68db      	ldr	r3, [r3, #12]
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	4618      	mov	r0, r3
 8015946:	f7f9 fe2c 	bl	800f5a2 <lwip_htonl>
 801594a:	4603      	mov	r3, r0
 801594c:	1ae3      	subs	r3, r4, r3
 801594e:	2b00      	cmp	r3, #0
 8015950:	da24      	bge.n	801599c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	3370      	adds	r3, #112	; 0x70
 8015956:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015958:	e002      	b.n	8015960 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801595a:	69fb      	ldr	r3, [r7, #28]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015960:	69fb      	ldr	r3, [r7, #28]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d011      	beq.n	801598c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015968:	69fb      	ldr	r3, [r7, #28]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	68db      	ldr	r3, [r3, #12]
 801596e:	685b      	ldr	r3, [r3, #4]
 8015970:	4618      	mov	r0, r3
 8015972:	f7f9 fe16 	bl	800f5a2 <lwip_htonl>
 8015976:	4604      	mov	r4, r0
 8015978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801597a:	68db      	ldr	r3, [r3, #12]
 801597c:	685b      	ldr	r3, [r3, #4]
 801597e:	4618      	mov	r0, r3
 8015980:	f7f9 fe0f 	bl	800f5a2 <lwip_htonl>
 8015984:	4603      	mov	r3, r0
 8015986:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015988:	2b00      	cmp	r3, #0
 801598a:	dbe6      	blt.n	801595a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	681a      	ldr	r2, [r3, #0]
 8015990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015992:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015998:	601a      	str	r2, [r3, #0]
 801599a:	e009      	b.n	80159b0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801599c:	6a3b      	ldr	r3, [r7, #32]
 801599e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159a0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80159a2:	6a3b      	ldr	r3, [r7, #32]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	623b      	str	r3, [r7, #32]
 80159a8:	e002      	b.n	80159b0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80159aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159ac:	f7fc fc3f 	bl	801222e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80159b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d012      	beq.n	80159e2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80159bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159be:	68db      	ldr	r3, [r3, #12]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7f9 fded 	bl	800f5a2 <lwip_htonl>
 80159c8:	4602      	mov	r2, r0
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159ce:	1ad3      	subs	r3, r2, r3
 80159d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159d2:	8912      	ldrh	r2, [r2, #8]
 80159d4:	4413      	add	r3, r2
  while (seg != NULL &&
 80159d6:	69ba      	ldr	r2, [r7, #24]
 80159d8:	429a      	cmp	r2, r3
 80159da:	f4bf aed9 	bcs.w	8015790 <tcp_output+0x160>
 80159de:	e000      	b.n	80159e2 <tcp_output+0x3b2>
      break;
 80159e0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d108      	bne.n	80159fc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	2200      	movs	r2, #0
 80159ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80159f2:	e004      	b.n	80159fe <tcp_output+0x3ce>
    goto output_done;
 80159f4:	bf00      	nop
 80159f6:	e002      	b.n	80159fe <tcp_output+0x3ce>
    goto output_done;
 80159f8:	bf00      	nop
 80159fa:	e000      	b.n	80159fe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80159fc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	8b5b      	ldrh	r3, [r3, #26]
 8015a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015a06:	b29a      	uxth	r2, r3
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015a0c:	2300      	movs	r3, #0
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3728      	adds	r7, #40	; 0x28
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bdb0      	pop	{r4, r5, r7, pc}
 8015a16:	bf00      	nop

08015a18 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d106      	bne.n	8015a34 <tcp_output_segment_busy+0x1c>
 8015a26:	4b09      	ldr	r3, [pc, #36]	; (8015a4c <tcp_output_segment_busy+0x34>)
 8015a28:	f240 529a 	movw	r2, #1434	; 0x59a
 8015a2c:	4908      	ldr	r1, [pc, #32]	; (8015a50 <tcp_output_segment_busy+0x38>)
 8015a2e:	4809      	ldr	r0, [pc, #36]	; (8015a54 <tcp_output_segment_busy+0x3c>)
 8015a30:	f004 f85e 	bl	8019af0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	685b      	ldr	r3, [r3, #4]
 8015a38:	7b9b      	ldrb	r3, [r3, #14]
 8015a3a:	2b01      	cmp	r3, #1
 8015a3c:	d001      	beq.n	8015a42 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015a3e:	2301      	movs	r3, #1
 8015a40:	e000      	b.n	8015a44 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015a42:	2300      	movs	r3, #0
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	3708      	adds	r7, #8
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}
 8015a4c:	0801dad4 	.word	0x0801dad4
 8015a50:	0801e070 	.word	0x0801e070
 8015a54:	0801db28 	.word	0x0801db28

08015a58 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015a58:	b5b0      	push	{r4, r5, r7, lr}
 8015a5a:	b08c      	sub	sp, #48	; 0x30
 8015a5c:	af04      	add	r7, sp, #16
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d106      	bne.n	8015a78 <tcp_output_segment+0x20>
 8015a6a:	4b64      	ldr	r3, [pc, #400]	; (8015bfc <tcp_output_segment+0x1a4>)
 8015a6c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015a70:	4963      	ldr	r1, [pc, #396]	; (8015c00 <tcp_output_segment+0x1a8>)
 8015a72:	4864      	ldr	r0, [pc, #400]	; (8015c04 <tcp_output_segment+0x1ac>)
 8015a74:	f004 f83c 	bl	8019af0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d106      	bne.n	8015a8c <tcp_output_segment+0x34>
 8015a7e:	4b5f      	ldr	r3, [pc, #380]	; (8015bfc <tcp_output_segment+0x1a4>)
 8015a80:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015a84:	4960      	ldr	r1, [pc, #384]	; (8015c08 <tcp_output_segment+0x1b0>)
 8015a86:	485f      	ldr	r0, [pc, #380]	; (8015c04 <tcp_output_segment+0x1ac>)
 8015a88:	f004 f832 	bl	8019af0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d106      	bne.n	8015aa0 <tcp_output_segment+0x48>
 8015a92:	4b5a      	ldr	r3, [pc, #360]	; (8015bfc <tcp_output_segment+0x1a4>)
 8015a94:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015a98:	495c      	ldr	r1, [pc, #368]	; (8015c0c <tcp_output_segment+0x1b4>)
 8015a9a:	485a      	ldr	r0, [pc, #360]	; (8015c04 <tcp_output_segment+0x1ac>)
 8015a9c:	f004 f828 	bl	8019af0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015aa0:	68f8      	ldr	r0, [r7, #12]
 8015aa2:	f7ff ffb9 	bl	8015a18 <tcp_output_segment_busy>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d001      	beq.n	8015ab0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015aac:	2300      	movs	r3, #0
 8015aae:	e0a1      	b.n	8015bf4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	68dc      	ldr	r4, [r3, #12]
 8015ab8:	4610      	mov	r0, r2
 8015aba:	f7f9 fd72 	bl	800f5a2 <lwip_htonl>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015ac2:	68bb      	ldr	r3, [r7, #8]
 8015ac4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	68dc      	ldr	r4, [r3, #12]
 8015aca:	4610      	mov	r0, r2
 8015acc:	f7f9 fd54 	bl	800f578 <lwip_htons>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ad8:	68ba      	ldr	r2, [r7, #8]
 8015ada:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015adc:	441a      	add	r2, r3
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	68db      	ldr	r3, [r3, #12]
 8015ae6:	3314      	adds	r3, #20
 8015ae8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	7a9b      	ldrb	r3, [r3, #10]
 8015aee:	f003 0301 	and.w	r3, r3, #1
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d015      	beq.n	8015b22 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	3304      	adds	r3, #4
 8015afa:	461a      	mov	r2, r3
 8015afc:	6879      	ldr	r1, [r7, #4]
 8015afe:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8015b02:	f7fc fe8b 	bl	801281c <tcp_eff_send_mss_netif>
 8015b06:	4603      	mov	r3, r0
 8015b08:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015b0a:	8b7b      	ldrh	r3, [r7, #26]
 8015b0c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015b10:	4618      	mov	r0, r3
 8015b12:	f7f9 fd46 	bl	800f5a2 <lwip_htonl>
 8015b16:	4602      	mov	r2, r0
 8015b18:	69fb      	ldr	r3, [r7, #28]
 8015b1a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	3304      	adds	r3, #4
 8015b20:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015b22:	68bb      	ldr	r3, [r7, #8]
 8015b24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	da02      	bge.n	8015b32 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015b2c:	68bb      	ldr	r3, [r7, #8]
 8015b2e:	2200      	movs	r2, #0
 8015b30:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d10c      	bne.n	8015b54 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015b3a:	4b35      	ldr	r3, [pc, #212]	; (8015c10 <tcp_output_segment+0x1b8>)
 8015b3c:	681a      	ldr	r2, [r3, #0]
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	68db      	ldr	r3, [r3, #12]
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7f9 fd2a 	bl	800f5a2 <lwip_htonl>
 8015b4e:	4602      	mov	r2, r0
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	68da      	ldr	r2, [r3, #12]
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	1ad3      	subs	r3, r2, r3
 8015b60:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	8959      	ldrh	r1, [r3, #10]
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	8b3a      	ldrh	r2, [r7, #24]
 8015b6e:	1a8a      	subs	r2, r1, r2
 8015b70:	b292      	uxth	r2, r2
 8015b72:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	685b      	ldr	r3, [r3, #4]
 8015b78:	8919      	ldrh	r1, [r3, #8]
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	8b3a      	ldrh	r2, [r7, #24]
 8015b80:	1a8a      	subs	r2, r1, r2
 8015b82:	b292      	uxth	r2, r2
 8015b84:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	68fa      	ldr	r2, [r7, #12]
 8015b8c:	68d2      	ldr	r2, [r2, #12]
 8015b8e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	2200      	movs	r2, #0
 8015b96:	741a      	strb	r2, [r3, #16]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	68da      	ldr	r2, [r3, #12]
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	7a9b      	ldrb	r3, [r3, #10]
 8015ba4:	f003 0301 	and.w	r3, r3, #1
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d001      	beq.n	8015bb0 <tcp_output_segment+0x158>
 8015bac:	2318      	movs	r3, #24
 8015bae:	e000      	b.n	8015bb2 <tcp_output_segment+0x15a>
 8015bb0:	2314      	movs	r3, #20
 8015bb2:	4413      	add	r3, r2
 8015bb4:	69fa      	ldr	r2, [r7, #28]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d006      	beq.n	8015bc8 <tcp_output_segment+0x170>
 8015bba:	4b10      	ldr	r3, [pc, #64]	; (8015bfc <tcp_output_segment+0x1a4>)
 8015bbc:	f240 621c 	movw	r2, #1564	; 0x61c
 8015bc0:	4914      	ldr	r1, [pc, #80]	; (8015c14 <tcp_output_segment+0x1bc>)
 8015bc2:	4810      	ldr	r0, [pc, #64]	; (8015c04 <tcp_output_segment+0x1ac>)
 8015bc4:	f003 ff94 	bl	8019af0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	6858      	ldr	r0, [r3, #4]
 8015bcc:	68b9      	ldr	r1, [r7, #8]
 8015bce:	68bb      	ldr	r3, [r7, #8]
 8015bd0:	1d1c      	adds	r4, r3, #4
 8015bd2:	68bb      	ldr	r3, [r7, #8]
 8015bd4:	7add      	ldrb	r5, [r3, #11]
 8015bd6:	68bb      	ldr	r3, [r7, #8]
 8015bd8:	7a9b      	ldrb	r3, [r3, #10]
 8015bda:	687a      	ldr	r2, [r7, #4]
 8015bdc:	9202      	str	r2, [sp, #8]
 8015bde:	2206      	movs	r2, #6
 8015be0:	9201      	str	r2, [sp, #4]
 8015be2:	9300      	str	r3, [sp, #0]
 8015be4:	462b      	mov	r3, r5
 8015be6:	4622      	mov	r2, r4
 8015be8:	f002 fa18 	bl	801801c <ip4_output_if>
 8015bec:	4603      	mov	r3, r0
 8015bee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3720      	adds	r7, #32
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8015bfc:	0801dad4 	.word	0x0801dad4
 8015c00:	0801e098 	.word	0x0801e098
 8015c04:	0801db28 	.word	0x0801db28
 8015c08:	0801e0b8 	.word	0x0801e0b8
 8015c0c:	0801e0d8 	.word	0x0801e0d8
 8015c10:	200070d0 	.word	0x200070d0
 8015c14:	0801e0fc 	.word	0x0801e0fc

08015c18 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015c18:	b5b0      	push	{r4, r5, r7, lr}
 8015c1a:	b084      	sub	sp, #16
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d106      	bne.n	8015c34 <tcp_rexmit_rto_prepare+0x1c>
 8015c26:	4b31      	ldr	r3, [pc, #196]	; (8015cec <tcp_rexmit_rto_prepare+0xd4>)
 8015c28:	f240 6263 	movw	r2, #1635	; 0x663
 8015c2c:	4930      	ldr	r1, [pc, #192]	; (8015cf0 <tcp_rexmit_rto_prepare+0xd8>)
 8015c2e:	4831      	ldr	r0, [pc, #196]	; (8015cf4 <tcp_rexmit_rto_prepare+0xdc>)
 8015c30:	f003 ff5e 	bl	8019af0 <iprintf>

  if (pcb->unacked == NULL) {
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d102      	bne.n	8015c42 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015c3c:	f06f 0305 	mvn.w	r3, #5
 8015c40:	e050      	b.n	8015ce4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c46:	60fb      	str	r3, [r7, #12]
 8015c48:	e00b      	b.n	8015c62 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015c4a:	68f8      	ldr	r0, [r7, #12]
 8015c4c:	f7ff fee4 	bl	8015a18 <tcp_output_segment_busy>
 8015c50:	4603      	mov	r3, r0
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d002      	beq.n	8015c5c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015c56:	f06f 0305 	mvn.w	r3, #5
 8015c5a:	e043      	b.n	8015ce4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	60fb      	str	r3, [r7, #12]
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d1ef      	bne.n	8015c4a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015c6a:	68f8      	ldr	r0, [r7, #12]
 8015c6c:	f7ff fed4 	bl	8015a18 <tcp_output_segment_busy>
 8015c70:	4603      	mov	r3, r0
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d002      	beq.n	8015c7c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015c76:	f06f 0305 	mvn.w	r3, #5
 8015c7a:	e033      	b.n	8015ce4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	8b5b      	ldrh	r3, [r3, #26]
 8015c96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015c9a:	b29a      	uxth	r2, r3
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	68db      	ldr	r3, [r3, #12]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7f9 fc7b 	bl	800f5a2 <lwip_htonl>
 8015cac:	4604      	mov	r4, r0
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	891b      	ldrh	r3, [r3, #8]
 8015cb2:	461d      	mov	r5, r3
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	68db      	ldr	r3, [r3, #12]
 8015cb8:	899b      	ldrh	r3, [r3, #12]
 8015cba:	b29b      	uxth	r3, r3
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f7f9 fc5b 	bl	800f578 <lwip_htons>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	b2db      	uxtb	r3, r3
 8015cc6:	f003 0303 	and.w	r3, r3, #3
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d001      	beq.n	8015cd2 <tcp_rexmit_rto_prepare+0xba>
 8015cce:	2301      	movs	r3, #1
 8015cd0:	e000      	b.n	8015cd4 <tcp_rexmit_rto_prepare+0xbc>
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	442b      	add	r3, r5
 8015cd6:	18e2      	adds	r2, r4, r3
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015ce2:	2300      	movs	r3, #0
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	3710      	adds	r7, #16
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bdb0      	pop	{r4, r5, r7, pc}
 8015cec:	0801dad4 	.word	0x0801dad4
 8015cf0:	0801e110 	.word	0x0801e110
 8015cf4:	0801db28 	.word	0x0801db28

08015cf8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d106      	bne.n	8015d14 <tcp_rexmit_rto_commit+0x1c>
 8015d06:	4b0d      	ldr	r3, [pc, #52]	; (8015d3c <tcp_rexmit_rto_commit+0x44>)
 8015d08:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015d0c:	490c      	ldr	r1, [pc, #48]	; (8015d40 <tcp_rexmit_rto_commit+0x48>)
 8015d0e:	480d      	ldr	r0, [pc, #52]	; (8015d44 <tcp_rexmit_rto_commit+0x4c>)
 8015d10:	f003 feee 	bl	8019af0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d1a:	2bff      	cmp	r3, #255	; 0xff
 8015d1c:	d007      	beq.n	8015d2e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d24:	3301      	adds	r3, #1
 8015d26:	b2da      	uxtb	r2, r3
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f7ff fc7e 	bl	8015630 <tcp_output>
}
 8015d34:	bf00      	nop
 8015d36:	3708      	adds	r7, #8
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	0801dad4 	.word	0x0801dad4
 8015d40:	0801e134 	.word	0x0801e134
 8015d44:	0801db28 	.word	0x0801db28

08015d48 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d106      	bne.n	8015d64 <tcp_rexmit_rto+0x1c>
 8015d56:	4b0a      	ldr	r3, [pc, #40]	; (8015d80 <tcp_rexmit_rto+0x38>)
 8015d58:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015d5c:	4909      	ldr	r1, [pc, #36]	; (8015d84 <tcp_rexmit_rto+0x3c>)
 8015d5e:	480a      	ldr	r0, [pc, #40]	; (8015d88 <tcp_rexmit_rto+0x40>)
 8015d60:	f003 fec6 	bl	8019af0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f7ff ff57 	bl	8015c18 <tcp_rexmit_rto_prepare>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d102      	bne.n	8015d76 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f7ff ffc1 	bl	8015cf8 <tcp_rexmit_rto_commit>
  }
}
 8015d76:	bf00      	nop
 8015d78:	3708      	adds	r7, #8
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	bd80      	pop	{r7, pc}
 8015d7e:	bf00      	nop
 8015d80:	0801dad4 	.word	0x0801dad4
 8015d84:	0801e158 	.word	0x0801e158
 8015d88:	0801db28 	.word	0x0801db28

08015d8c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015d8c:	b590      	push	{r4, r7, lr}
 8015d8e:	b085      	sub	sp, #20
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d106      	bne.n	8015da8 <tcp_rexmit+0x1c>
 8015d9a:	4b2f      	ldr	r3, [pc, #188]	; (8015e58 <tcp_rexmit+0xcc>)
 8015d9c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015da0:	492e      	ldr	r1, [pc, #184]	; (8015e5c <tcp_rexmit+0xd0>)
 8015da2:	482f      	ldr	r0, [pc, #188]	; (8015e60 <tcp_rexmit+0xd4>)
 8015da4:	f003 fea4 	bl	8019af0 <iprintf>

  if (pcb->unacked == NULL) {
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d102      	bne.n	8015db6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015db0:	f06f 0305 	mvn.w	r3, #5
 8015db4:	e04c      	b.n	8015e50 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015dbc:	68b8      	ldr	r0, [r7, #8]
 8015dbe:	f7ff fe2b 	bl	8015a18 <tcp_output_segment_busy>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d002      	beq.n	8015dce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015dc8:	f06f 0305 	mvn.w	r3, #5
 8015dcc:	e040      	b.n	8015e50 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015dce:	68bb      	ldr	r3, [r7, #8]
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	336c      	adds	r3, #108	; 0x6c
 8015dda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015ddc:	e002      	b.n	8015de4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d011      	beq.n	8015e10 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	68db      	ldr	r3, [r3, #12]
 8015df2:	685b      	ldr	r3, [r3, #4]
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7f9 fbd4 	bl	800f5a2 <lwip_htonl>
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	68db      	ldr	r3, [r3, #12]
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7f9 fbcd 	bl	800f5a2 <lwip_htonl>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	dbe6      	blt.n	8015dde <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	681a      	ldr	r2, [r3, #0]
 8015e14:	68bb      	ldr	r3, [r7, #8]
 8015e16:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	68ba      	ldr	r2, [r7, #8]
 8015e1c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d103      	bne.n	8015e2e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e34:	2bff      	cmp	r3, #255	; 0xff
 8015e36:	d007      	beq.n	8015e48 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015e3e:	3301      	adds	r3, #1
 8015e40:	b2da      	uxtb	r2, r3
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015e4e:	2300      	movs	r3, #0
}
 8015e50:	4618      	mov	r0, r3
 8015e52:	3714      	adds	r7, #20
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd90      	pop	{r4, r7, pc}
 8015e58:	0801dad4 	.word	0x0801dad4
 8015e5c:	0801e174 	.word	0x0801e174
 8015e60:	0801db28 	.word	0x0801db28

08015e64 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b082      	sub	sp, #8
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d106      	bne.n	8015e80 <tcp_rexmit_fast+0x1c>
 8015e72:	4b2a      	ldr	r3, [pc, #168]	; (8015f1c <tcp_rexmit_fast+0xb8>)
 8015e74:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015e78:	4929      	ldr	r1, [pc, #164]	; (8015f20 <tcp_rexmit_fast+0xbc>)
 8015e7a:	482a      	ldr	r0, [pc, #168]	; (8015f24 <tcp_rexmit_fast+0xc0>)
 8015e7c:	f003 fe38 	bl	8019af0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d045      	beq.n	8015f14 <tcp_rexmit_fast+0xb0>
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	8b5b      	ldrh	r3, [r3, #26]
 8015e8c:	f003 0304 	and.w	r3, r3, #4
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d13f      	bne.n	8015f14 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f7ff ff79 	bl	8015d8c <tcp_rexmit>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d139      	bne.n	8015f14 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015eac:	4293      	cmp	r3, r2
 8015eae:	bf28      	it	cs
 8015eb0:	4613      	movcs	r3, r2
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	da00      	bge.n	8015eba <tcp_rexmit_fast+0x56>
 8015eb8:	3301      	adds	r3, #1
 8015eba:	105b      	asrs	r3, r3, #1
 8015ebc:	b29a      	uxth	r2, r3
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015eca:	461a      	mov	r2, r3
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ed0:	005b      	lsls	r3, r3, #1
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	d206      	bcs.n	8015ee4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015eda:	005b      	lsls	r3, r3, #1
 8015edc:	b29a      	uxth	r2, r3
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015eee:	4619      	mov	r1, r3
 8015ef0:	0049      	lsls	r1, r1, #1
 8015ef2:	440b      	add	r3, r1
 8015ef4:	b29b      	uxth	r3, r3
 8015ef6:	4413      	add	r3, r2
 8015ef8:	b29a      	uxth	r2, r3
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	8b5b      	ldrh	r3, [r3, #26]
 8015f04:	f043 0304 	orr.w	r3, r3, #4
 8015f08:	b29a      	uxth	r2, r3
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2200      	movs	r2, #0
 8015f12:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015f14:	bf00      	nop
 8015f16:	3708      	adds	r7, #8
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	0801dad4 	.word	0x0801dad4
 8015f20:	0801e18c 	.word	0x0801e18c
 8015f24:	0801db28 	.word	0x0801db28

08015f28 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b086      	sub	sp, #24
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	60f8      	str	r0, [r7, #12]
 8015f30:	607b      	str	r3, [r7, #4]
 8015f32:	460b      	mov	r3, r1
 8015f34:	817b      	strh	r3, [r7, #10]
 8015f36:	4613      	mov	r3, r2
 8015f38:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015f3a:	897a      	ldrh	r2, [r7, #10]
 8015f3c:	893b      	ldrh	r3, [r7, #8]
 8015f3e:	4413      	add	r3, r2
 8015f40:	b29b      	uxth	r3, r3
 8015f42:	3314      	adds	r3, #20
 8015f44:	b29b      	uxth	r3, r3
 8015f46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f4a:	4619      	mov	r1, r3
 8015f4c:	2022      	movs	r0, #34	; 0x22
 8015f4e:	f7fa fc13 	bl	8010778 <pbuf_alloc>
 8015f52:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d04d      	beq.n	8015ff6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015f5a:	897b      	ldrh	r3, [r7, #10]
 8015f5c:	3313      	adds	r3, #19
 8015f5e:	697a      	ldr	r2, [r7, #20]
 8015f60:	8952      	ldrh	r2, [r2, #10]
 8015f62:	4293      	cmp	r3, r2
 8015f64:	db06      	blt.n	8015f74 <tcp_output_alloc_header_common+0x4c>
 8015f66:	4b26      	ldr	r3, [pc, #152]	; (8016000 <tcp_output_alloc_header_common+0xd8>)
 8015f68:	f240 7223 	movw	r2, #1827	; 0x723
 8015f6c:	4925      	ldr	r1, [pc, #148]	; (8016004 <tcp_output_alloc_header_common+0xdc>)
 8015f6e:	4826      	ldr	r0, [pc, #152]	; (8016008 <tcp_output_alloc_header_common+0xe0>)
 8015f70:	f003 fdbe 	bl	8019af0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015f7a:	8c3b      	ldrh	r3, [r7, #32]
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f7f9 fafb 	bl	800f578 <lwip_htons>
 8015f82:	4603      	mov	r3, r0
 8015f84:	461a      	mov	r2, r3
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f7f9 faf3 	bl	800f578 <lwip_htons>
 8015f92:	4603      	mov	r3, r0
 8015f94:	461a      	mov	r2, r3
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015f9a:	693b      	ldr	r3, [r7, #16]
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015fa0:	68f8      	ldr	r0, [r7, #12]
 8015fa2:	f7f9 fafe 	bl	800f5a2 <lwip_htonl>
 8015fa6:	4602      	mov	r2, r0
 8015fa8:	693b      	ldr	r3, [r7, #16]
 8015faa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015fac:	897b      	ldrh	r3, [r7, #10]
 8015fae:	089b      	lsrs	r3, r3, #2
 8015fb0:	b29b      	uxth	r3, r3
 8015fb2:	3305      	adds	r3, #5
 8015fb4:	b29b      	uxth	r3, r3
 8015fb6:	031b      	lsls	r3, r3, #12
 8015fb8:	b29a      	uxth	r2, r3
 8015fba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015fbe:	b29b      	uxth	r3, r3
 8015fc0:	4313      	orrs	r3, r2
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7f9 fad7 	bl	800f578 <lwip_htons>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	461a      	mov	r2, r3
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015fd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7f9 facf 	bl	800f578 <lwip_htons>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	461a      	mov	r2, r3
 8015fde:	693b      	ldr	r3, [r7, #16]
 8015fe0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015fe2:	693b      	ldr	r3, [r7, #16]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	741a      	strb	r2, [r3, #16]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015fec:	693b      	ldr	r3, [r7, #16]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	749a      	strb	r2, [r3, #18]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015ff6:	697b      	ldr	r3, [r7, #20]
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3718      	adds	r7, #24
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}
 8016000:	0801dad4 	.word	0x0801dad4
 8016004:	0801e1ac 	.word	0x0801e1ac
 8016008:	0801db28 	.word	0x0801db28

0801600c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801600c:	b5b0      	push	{r4, r5, r7, lr}
 801600e:	b08a      	sub	sp, #40	; 0x28
 8016010:	af04      	add	r7, sp, #16
 8016012:	60f8      	str	r0, [r7, #12]
 8016014:	607b      	str	r3, [r7, #4]
 8016016:	460b      	mov	r3, r1
 8016018:	817b      	strh	r3, [r7, #10]
 801601a:	4613      	mov	r3, r2
 801601c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d106      	bne.n	8016032 <tcp_output_alloc_header+0x26>
 8016024:	4b15      	ldr	r3, [pc, #84]	; (801607c <tcp_output_alloc_header+0x70>)
 8016026:	f240 7242 	movw	r2, #1858	; 0x742
 801602a:	4915      	ldr	r1, [pc, #84]	; (8016080 <tcp_output_alloc_header+0x74>)
 801602c:	4815      	ldr	r0, [pc, #84]	; (8016084 <tcp_output_alloc_header+0x78>)
 801602e:	f003 fd5f 	bl	8019af0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	8adb      	ldrh	r3, [r3, #22]
 801603a:	68fa      	ldr	r2, [r7, #12]
 801603c:	8b12      	ldrh	r2, [r2, #24]
 801603e:	68f9      	ldr	r1, [r7, #12]
 8016040:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8016042:	893d      	ldrh	r5, [r7, #8]
 8016044:	897c      	ldrh	r4, [r7, #10]
 8016046:	9103      	str	r1, [sp, #12]
 8016048:	2110      	movs	r1, #16
 801604a:	9102      	str	r1, [sp, #8]
 801604c:	9201      	str	r2, [sp, #4]
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	462a      	mov	r2, r5
 8016054:	4621      	mov	r1, r4
 8016056:	f7ff ff67 	bl	8015f28 <tcp_output_alloc_header_common>
 801605a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801605c:	697b      	ldr	r3, [r7, #20]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d006      	beq.n	8016070 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016066:	68fa      	ldr	r2, [r7, #12]
 8016068:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801606a:	441a      	add	r2, r3
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8016070:	697b      	ldr	r3, [r7, #20]
}
 8016072:	4618      	mov	r0, r3
 8016074:	3718      	adds	r7, #24
 8016076:	46bd      	mov	sp, r7
 8016078:	bdb0      	pop	{r4, r5, r7, pc}
 801607a:	bf00      	nop
 801607c:	0801dad4 	.word	0x0801dad4
 8016080:	0801e1dc 	.word	0x0801e1dc
 8016084:	0801db28 	.word	0x0801db28

08016088 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b088      	sub	sp, #32
 801608c:	af00      	add	r7, sp, #0
 801608e:	60f8      	str	r0, [r7, #12]
 8016090:	60b9      	str	r1, [r7, #8]
 8016092:	4611      	mov	r1, r2
 8016094:	461a      	mov	r2, r3
 8016096:	460b      	mov	r3, r1
 8016098:	71fb      	strb	r3, [r7, #7]
 801609a:	4613      	mov	r3, r2
 801609c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801609e:	2300      	movs	r3, #0
 80160a0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d106      	bne.n	80160b6 <tcp_output_fill_options+0x2e>
 80160a8:	4b12      	ldr	r3, [pc, #72]	; (80160f4 <tcp_output_fill_options+0x6c>)
 80160aa:	f240 7256 	movw	r2, #1878	; 0x756
 80160ae:	4912      	ldr	r1, [pc, #72]	; (80160f8 <tcp_output_fill_options+0x70>)
 80160b0:	4812      	ldr	r0, [pc, #72]	; (80160fc <tcp_output_fill_options+0x74>)
 80160b2:	f003 fd1d 	bl	8019af0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80160bc:	69bb      	ldr	r3, [r7, #24]
 80160be:	3314      	adds	r3, #20
 80160c0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80160c2:	8bfb      	ldrh	r3, [r7, #30]
 80160c4:	009b      	lsls	r3, r3, #2
 80160c6:	461a      	mov	r2, r3
 80160c8:	79fb      	ldrb	r3, [r7, #7]
 80160ca:	009b      	lsls	r3, r3, #2
 80160cc:	f003 0304 	and.w	r3, r3, #4
 80160d0:	4413      	add	r3, r2
 80160d2:	3314      	adds	r3, #20
 80160d4:	69ba      	ldr	r2, [r7, #24]
 80160d6:	4413      	add	r3, r2
 80160d8:	697a      	ldr	r2, [r7, #20]
 80160da:	429a      	cmp	r2, r3
 80160dc:	d006      	beq.n	80160ec <tcp_output_fill_options+0x64>
 80160de:	4b05      	ldr	r3, [pc, #20]	; (80160f4 <tcp_output_fill_options+0x6c>)
 80160e0:	f240 7275 	movw	r2, #1909	; 0x775
 80160e4:	4906      	ldr	r1, [pc, #24]	; (8016100 <tcp_output_fill_options+0x78>)
 80160e6:	4805      	ldr	r0, [pc, #20]	; (80160fc <tcp_output_fill_options+0x74>)
 80160e8:	f003 fd02 	bl	8019af0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80160ec:	bf00      	nop
 80160ee:	3720      	adds	r7, #32
 80160f0:	46bd      	mov	sp, r7
 80160f2:	bd80      	pop	{r7, pc}
 80160f4:	0801dad4 	.word	0x0801dad4
 80160f8:	0801e204 	.word	0x0801e204
 80160fc:	0801db28 	.word	0x0801db28
 8016100:	0801e0fc 	.word	0x0801e0fc

08016104 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b08a      	sub	sp, #40	; 0x28
 8016108:	af04      	add	r7, sp, #16
 801610a:	60f8      	str	r0, [r7, #12]
 801610c:	60b9      	str	r1, [r7, #8]
 801610e:	607a      	str	r2, [r7, #4]
 8016110:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d106      	bne.n	8016126 <tcp_output_control_segment+0x22>
 8016118:	4b1c      	ldr	r3, [pc, #112]	; (801618c <tcp_output_control_segment+0x88>)
 801611a:	f240 7287 	movw	r2, #1927	; 0x787
 801611e:	491c      	ldr	r1, [pc, #112]	; (8016190 <tcp_output_control_segment+0x8c>)
 8016120:	481c      	ldr	r0, [pc, #112]	; (8016194 <tcp_output_control_segment+0x90>)
 8016122:	f003 fce5 	bl	8019af0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016126:	683a      	ldr	r2, [r7, #0]
 8016128:	6879      	ldr	r1, [r7, #4]
 801612a:	68f8      	ldr	r0, [r7, #12]
 801612c:	f7fe ff40 	bl	8014fb0 <tcp_route>
 8016130:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016132:	693b      	ldr	r3, [r7, #16]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d102      	bne.n	801613e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016138:	23fc      	movs	r3, #252	; 0xfc
 801613a:	75fb      	strb	r3, [r7, #23]
 801613c:	e01c      	b.n	8016178 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d006      	beq.n	8016152 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	7adb      	ldrb	r3, [r3, #11]
 8016148:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	7a9b      	ldrb	r3, [r3, #10]
 801614e:	757b      	strb	r3, [r7, #21]
 8016150:	e003      	b.n	801615a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016152:	23ff      	movs	r3, #255	; 0xff
 8016154:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016156:	2300      	movs	r3, #0
 8016158:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801615a:	7dba      	ldrb	r2, [r7, #22]
 801615c:	693b      	ldr	r3, [r7, #16]
 801615e:	9302      	str	r3, [sp, #8]
 8016160:	2306      	movs	r3, #6
 8016162:	9301      	str	r3, [sp, #4]
 8016164:	7d7b      	ldrb	r3, [r7, #21]
 8016166:	9300      	str	r3, [sp, #0]
 8016168:	4613      	mov	r3, r2
 801616a:	683a      	ldr	r2, [r7, #0]
 801616c:	6879      	ldr	r1, [r7, #4]
 801616e:	68b8      	ldr	r0, [r7, #8]
 8016170:	f001 ff54 	bl	801801c <ip4_output_if>
 8016174:	4603      	mov	r3, r0
 8016176:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016178:	68b8      	ldr	r0, [r7, #8]
 801617a:	f7fa fde1 	bl	8010d40 <pbuf_free>
  return err;
 801617e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016182:	4618      	mov	r0, r3
 8016184:	3718      	adds	r7, #24
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop
 801618c:	0801dad4 	.word	0x0801dad4
 8016190:	0801e22c 	.word	0x0801e22c
 8016194:	0801db28 	.word	0x0801db28

08016198 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016198:	b590      	push	{r4, r7, lr}
 801619a:	b08b      	sub	sp, #44	; 0x2c
 801619c:	af04      	add	r7, sp, #16
 801619e:	60f8      	str	r0, [r7, #12]
 80161a0:	60b9      	str	r1, [r7, #8]
 80161a2:	607a      	str	r2, [r7, #4]
 80161a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d106      	bne.n	80161ba <tcp_rst+0x22>
 80161ac:	4b1f      	ldr	r3, [pc, #124]	; (801622c <tcp_rst+0x94>)
 80161ae:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80161b2:	491f      	ldr	r1, [pc, #124]	; (8016230 <tcp_rst+0x98>)
 80161b4:	481f      	ldr	r0, [pc, #124]	; (8016234 <tcp_rst+0x9c>)
 80161b6:	f003 fc9b 	bl	8019af0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80161ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d106      	bne.n	80161ce <tcp_rst+0x36>
 80161c0:	4b1a      	ldr	r3, [pc, #104]	; (801622c <tcp_rst+0x94>)
 80161c2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80161c6:	491c      	ldr	r1, [pc, #112]	; (8016238 <tcp_rst+0xa0>)
 80161c8:	481a      	ldr	r0, [pc, #104]	; (8016234 <tcp_rst+0x9c>)
 80161ca:	f003 fc91 	bl	8019af0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80161ce:	2300      	movs	r3, #0
 80161d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80161d2:	f24d 0316 	movw	r3, #53270	; 0xd016
 80161d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80161d8:	7dfb      	ldrb	r3, [r7, #23]
 80161da:	b29c      	uxth	r4, r3
 80161dc:	68b8      	ldr	r0, [r7, #8]
 80161de:	f7f9 f9e0 	bl	800f5a2 <lwip_htonl>
 80161e2:	4602      	mov	r2, r0
 80161e4:	8abb      	ldrh	r3, [r7, #20]
 80161e6:	9303      	str	r3, [sp, #12]
 80161e8:	2314      	movs	r3, #20
 80161ea:	9302      	str	r3, [sp, #8]
 80161ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80161ee:	9301      	str	r3, [sp, #4]
 80161f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80161f2:	9300      	str	r3, [sp, #0]
 80161f4:	4613      	mov	r3, r2
 80161f6:	2200      	movs	r2, #0
 80161f8:	4621      	mov	r1, r4
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f7ff fe94 	bl	8015f28 <tcp_output_alloc_header_common>
 8016200:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016202:	693b      	ldr	r3, [r7, #16]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d00c      	beq.n	8016222 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016208:	7dfb      	ldrb	r3, [r7, #23]
 801620a:	2200      	movs	r2, #0
 801620c:	6939      	ldr	r1, [r7, #16]
 801620e:	68f8      	ldr	r0, [r7, #12]
 8016210:	f7ff ff3a 	bl	8016088 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016216:	683a      	ldr	r2, [r7, #0]
 8016218:	6939      	ldr	r1, [r7, #16]
 801621a:	68f8      	ldr	r0, [r7, #12]
 801621c:	f7ff ff72 	bl	8016104 <tcp_output_control_segment>
 8016220:	e000      	b.n	8016224 <tcp_rst+0x8c>
    return;
 8016222:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016224:	371c      	adds	r7, #28
 8016226:	46bd      	mov	sp, r7
 8016228:	bd90      	pop	{r4, r7, pc}
 801622a:	bf00      	nop
 801622c:	0801dad4 	.word	0x0801dad4
 8016230:	0801e258 	.word	0x0801e258
 8016234:	0801db28 	.word	0x0801db28
 8016238:	0801e274 	.word	0x0801e274

0801623c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801623c:	b590      	push	{r4, r7, lr}
 801623e:	b087      	sub	sp, #28
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016244:	2300      	movs	r3, #0
 8016246:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016248:	2300      	movs	r3, #0
 801624a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d106      	bne.n	8016260 <tcp_send_empty_ack+0x24>
 8016252:	4b28      	ldr	r3, [pc, #160]	; (80162f4 <tcp_send_empty_ack+0xb8>)
 8016254:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016258:	4927      	ldr	r1, [pc, #156]	; (80162f8 <tcp_send_empty_ack+0xbc>)
 801625a:	4828      	ldr	r0, [pc, #160]	; (80162fc <tcp_send_empty_ack+0xc0>)
 801625c:	f003 fc48 	bl	8019af0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016260:	7dfb      	ldrb	r3, [r7, #23]
 8016262:	009b      	lsls	r3, r3, #2
 8016264:	b2db      	uxtb	r3, r3
 8016266:	f003 0304 	and.w	r3, r3, #4
 801626a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801626c:	7d7b      	ldrb	r3, [r7, #21]
 801626e:	b29c      	uxth	r4, r3
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016274:	4618      	mov	r0, r3
 8016276:	f7f9 f994 	bl	800f5a2 <lwip_htonl>
 801627a:	4603      	mov	r3, r0
 801627c:	2200      	movs	r2, #0
 801627e:	4621      	mov	r1, r4
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f7ff fec3 	bl	801600c <tcp_output_alloc_header>
 8016286:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d109      	bne.n	80162a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	8b5b      	ldrh	r3, [r3, #26]
 8016292:	f043 0303 	orr.w	r3, r3, #3
 8016296:	b29a      	uxth	r2, r3
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801629c:	f06f 0301 	mvn.w	r3, #1
 80162a0:	e023      	b.n	80162ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80162a2:	7dbb      	ldrb	r3, [r7, #22]
 80162a4:	7dfa      	ldrb	r2, [r7, #23]
 80162a6:	6939      	ldr	r1, [r7, #16]
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	f7ff feed 	bl	8016088 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80162ae:	687a      	ldr	r2, [r7, #4]
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	3304      	adds	r3, #4
 80162b4:	6939      	ldr	r1, [r7, #16]
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f7ff ff24 	bl	8016104 <tcp_output_control_segment>
 80162bc:	4603      	mov	r3, r0
 80162be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80162c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d007      	beq.n	80162d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	8b5b      	ldrh	r3, [r3, #26]
 80162cc:	f043 0303 	orr.w	r3, r3, #3
 80162d0:	b29a      	uxth	r2, r3
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	835a      	strh	r2, [r3, #26]
 80162d6:	e006      	b.n	80162e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	8b5b      	ldrh	r3, [r3, #26]
 80162dc:	f023 0303 	bic.w	r3, r3, #3
 80162e0:	b29a      	uxth	r2, r3
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80162e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80162ea:	4618      	mov	r0, r3
 80162ec:	371c      	adds	r7, #28
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd90      	pop	{r4, r7, pc}
 80162f2:	bf00      	nop
 80162f4:	0801dad4 	.word	0x0801dad4
 80162f8:	0801e290 	.word	0x0801e290
 80162fc:	0801db28 	.word	0x0801db28

08016300 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016300:	b590      	push	{r4, r7, lr}
 8016302:	b087      	sub	sp, #28
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016308:	2300      	movs	r3, #0
 801630a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d106      	bne.n	8016320 <tcp_keepalive+0x20>
 8016312:	4b18      	ldr	r3, [pc, #96]	; (8016374 <tcp_keepalive+0x74>)
 8016314:	f640 0224 	movw	r2, #2084	; 0x824
 8016318:	4917      	ldr	r1, [pc, #92]	; (8016378 <tcp_keepalive+0x78>)
 801631a:	4818      	ldr	r0, [pc, #96]	; (801637c <tcp_keepalive+0x7c>)
 801631c:	f003 fbe8 	bl	8019af0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016320:	7dfb      	ldrb	r3, [r7, #23]
 8016322:	b29c      	uxth	r4, r3
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016328:	3b01      	subs	r3, #1
 801632a:	4618      	mov	r0, r3
 801632c:	f7f9 f939 	bl	800f5a2 <lwip_htonl>
 8016330:	4603      	mov	r3, r0
 8016332:	2200      	movs	r2, #0
 8016334:	4621      	mov	r1, r4
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f7ff fe68 	bl	801600c <tcp_output_alloc_header>
 801633c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801633e:	693b      	ldr	r3, [r7, #16]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d102      	bne.n	801634a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016344:	f04f 33ff 	mov.w	r3, #4294967295
 8016348:	e010      	b.n	801636c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801634a:	7dfb      	ldrb	r3, [r7, #23]
 801634c:	2200      	movs	r2, #0
 801634e:	6939      	ldr	r1, [r7, #16]
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f7ff fe99 	bl	8016088 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016356:	687a      	ldr	r2, [r7, #4]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	3304      	adds	r3, #4
 801635c:	6939      	ldr	r1, [r7, #16]
 801635e:	6878      	ldr	r0, [r7, #4]
 8016360:	f7ff fed0 	bl	8016104 <tcp_output_control_segment>
 8016364:	4603      	mov	r3, r0
 8016366:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801636c:	4618      	mov	r0, r3
 801636e:	371c      	adds	r7, #28
 8016370:	46bd      	mov	sp, r7
 8016372:	bd90      	pop	{r4, r7, pc}
 8016374:	0801dad4 	.word	0x0801dad4
 8016378:	0801e2b0 	.word	0x0801e2b0
 801637c:	0801db28 	.word	0x0801db28

08016380 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016380:	b590      	push	{r4, r7, lr}
 8016382:	b08b      	sub	sp, #44	; 0x2c
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016388:	2300      	movs	r3, #0
 801638a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d106      	bne.n	80163a2 <tcp_zero_window_probe+0x22>
 8016394:	4b4c      	ldr	r3, [pc, #304]	; (80164c8 <tcp_zero_window_probe+0x148>)
 8016396:	f640 024f 	movw	r2, #2127	; 0x84f
 801639a:	494c      	ldr	r1, [pc, #304]	; (80164cc <tcp_zero_window_probe+0x14c>)
 801639c:	484c      	ldr	r0, [pc, #304]	; (80164d0 <tcp_zero_window_probe+0x150>)
 801639e:	f003 fba7 	bl	8019af0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80163a8:	6a3b      	ldr	r3, [r7, #32]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d101      	bne.n	80163b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80163ae:	2300      	movs	r3, #0
 80163b0:	e086      	b.n	80164c0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80163b8:	2bff      	cmp	r3, #255	; 0xff
 80163ba:	d007      	beq.n	80163cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80163c2:	3301      	adds	r3, #1
 80163c4:	b2da      	uxtb	r2, r3
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80163cc:	6a3b      	ldr	r3, [r7, #32]
 80163ce:	68db      	ldr	r3, [r3, #12]
 80163d0:	899b      	ldrh	r3, [r3, #12]
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7f9 f8cf 	bl	800f578 <lwip_htons>
 80163da:	4603      	mov	r3, r0
 80163dc:	b2db      	uxtb	r3, r3
 80163de:	f003 0301 	and.w	r3, r3, #1
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d005      	beq.n	80163f2 <tcp_zero_window_probe+0x72>
 80163e6:	6a3b      	ldr	r3, [r7, #32]
 80163e8:	891b      	ldrh	r3, [r3, #8]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d101      	bne.n	80163f2 <tcp_zero_window_probe+0x72>
 80163ee:	2301      	movs	r3, #1
 80163f0:	e000      	b.n	80163f4 <tcp_zero_window_probe+0x74>
 80163f2:	2300      	movs	r3, #0
 80163f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80163f6:	7ffb      	ldrb	r3, [r7, #31]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	bf0c      	ite	eq
 80163fc:	2301      	moveq	r3, #1
 80163fe:	2300      	movne	r3, #0
 8016400:	b2db      	uxtb	r3, r3
 8016402:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016408:	b299      	uxth	r1, r3
 801640a:	6a3b      	ldr	r3, [r7, #32]
 801640c:	68db      	ldr	r3, [r3, #12]
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	8bba      	ldrh	r2, [r7, #28]
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	f7ff fdfa 	bl	801600c <tcp_output_alloc_header>
 8016418:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801641a:	69bb      	ldr	r3, [r7, #24]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d102      	bne.n	8016426 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016420:	f04f 33ff 	mov.w	r3, #4294967295
 8016424:	e04c      	b.n	80164c0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016426:	69bb      	ldr	r3, [r7, #24]
 8016428:	685b      	ldr	r3, [r3, #4]
 801642a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801642c:	7ffb      	ldrb	r3, [r7, #31]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d011      	beq.n	8016456 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016432:	697b      	ldr	r3, [r7, #20]
 8016434:	899b      	ldrh	r3, [r3, #12]
 8016436:	b29b      	uxth	r3, r3
 8016438:	b21b      	sxth	r3, r3
 801643a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801643e:	b21c      	sxth	r4, r3
 8016440:	2011      	movs	r0, #17
 8016442:	f7f9 f899 	bl	800f578 <lwip_htons>
 8016446:	4603      	mov	r3, r0
 8016448:	b21b      	sxth	r3, r3
 801644a:	4323      	orrs	r3, r4
 801644c:	b21b      	sxth	r3, r3
 801644e:	b29a      	uxth	r2, r3
 8016450:	697b      	ldr	r3, [r7, #20]
 8016452:	819a      	strh	r2, [r3, #12]
 8016454:	e010      	b.n	8016478 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016456:	69bb      	ldr	r3, [r7, #24]
 8016458:	685b      	ldr	r3, [r3, #4]
 801645a:	3314      	adds	r3, #20
 801645c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801645e:	6a3b      	ldr	r3, [r7, #32]
 8016460:	6858      	ldr	r0, [r3, #4]
 8016462:	6a3b      	ldr	r3, [r7, #32]
 8016464:	685b      	ldr	r3, [r3, #4]
 8016466:	891a      	ldrh	r2, [r3, #8]
 8016468:	6a3b      	ldr	r3, [r7, #32]
 801646a:	891b      	ldrh	r3, [r3, #8]
 801646c:	1ad3      	subs	r3, r2, r3
 801646e:	b29b      	uxth	r3, r3
 8016470:	2201      	movs	r2, #1
 8016472:	6939      	ldr	r1, [r7, #16]
 8016474:	f7fa fe4e 	bl	8011114 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016478:	6a3b      	ldr	r3, [r7, #32]
 801647a:	68db      	ldr	r3, [r3, #12]
 801647c:	685b      	ldr	r3, [r3, #4]
 801647e:	4618      	mov	r0, r3
 8016480:	f7f9 f88f 	bl	800f5a2 <lwip_htonl>
 8016484:	4603      	mov	r3, r0
 8016486:	3301      	adds	r3, #1
 8016488:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	1ad3      	subs	r3, r2, r3
 8016492:	2b00      	cmp	r3, #0
 8016494:	da02      	bge.n	801649c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	68fa      	ldr	r2, [r7, #12]
 801649a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801649c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164a0:	2200      	movs	r2, #0
 80164a2:	69b9      	ldr	r1, [r7, #24]
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f7ff fdef 	bl	8016088 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80164aa:	687a      	ldr	r2, [r7, #4]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	3304      	adds	r3, #4
 80164b0:	69b9      	ldr	r1, [r7, #24]
 80164b2:	6878      	ldr	r0, [r7, #4]
 80164b4:	f7ff fe26 	bl	8016104 <tcp_output_control_segment>
 80164b8:	4603      	mov	r3, r0
 80164ba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80164bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80164c0:	4618      	mov	r0, r3
 80164c2:	372c      	adds	r7, #44	; 0x2c
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd90      	pop	{r4, r7, pc}
 80164c8:	0801dad4 	.word	0x0801dad4
 80164cc:	0801e2cc 	.word	0x0801e2cc
 80164d0:	0801db28 	.word	0x0801db28

080164d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b082      	sub	sp, #8
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80164dc:	f7fa ff08 	bl	80112f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80164e0:	4b0a      	ldr	r3, [pc, #40]	; (801650c <tcpip_tcp_timer+0x38>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d103      	bne.n	80164f0 <tcpip_tcp_timer+0x1c>
 80164e8:	4b09      	ldr	r3, [pc, #36]	; (8016510 <tcpip_tcp_timer+0x3c>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d005      	beq.n	80164fc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80164f0:	2200      	movs	r2, #0
 80164f2:	4908      	ldr	r1, [pc, #32]	; (8016514 <tcpip_tcp_timer+0x40>)
 80164f4:	20fa      	movs	r0, #250	; 0xfa
 80164f6:	f000 f8f3 	bl	80166e0 <sys_timeout>
 80164fa:	e003      	b.n	8016504 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80164fc:	4b06      	ldr	r3, [pc, #24]	; (8016518 <tcpip_tcp_timer+0x44>)
 80164fe:	2200      	movs	r2, #0
 8016500:	601a      	str	r2, [r3, #0]
  }
}
 8016502:	bf00      	nop
 8016504:	bf00      	nop
 8016506:	3708      	adds	r7, #8
 8016508:	46bd      	mov	sp, r7
 801650a:	bd80      	pop	{r7, pc}
 801650c:	200070dc 	.word	0x200070dc
 8016510:	200070e0 	.word	0x200070e0
 8016514:	080164d5 	.word	0x080164d5
 8016518:	20007128 	.word	0x20007128

0801651c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801651c:	b580      	push	{r7, lr}
 801651e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016520:	4b0a      	ldr	r3, [pc, #40]	; (801654c <tcp_timer_needed+0x30>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d10f      	bne.n	8016548 <tcp_timer_needed+0x2c>
 8016528:	4b09      	ldr	r3, [pc, #36]	; (8016550 <tcp_timer_needed+0x34>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d103      	bne.n	8016538 <tcp_timer_needed+0x1c>
 8016530:	4b08      	ldr	r3, [pc, #32]	; (8016554 <tcp_timer_needed+0x38>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d007      	beq.n	8016548 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016538:	4b04      	ldr	r3, [pc, #16]	; (801654c <tcp_timer_needed+0x30>)
 801653a:	2201      	movs	r2, #1
 801653c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801653e:	2200      	movs	r2, #0
 8016540:	4905      	ldr	r1, [pc, #20]	; (8016558 <tcp_timer_needed+0x3c>)
 8016542:	20fa      	movs	r0, #250	; 0xfa
 8016544:	f000 f8cc 	bl	80166e0 <sys_timeout>
  }
}
 8016548:	bf00      	nop
 801654a:	bd80      	pop	{r7, pc}
 801654c:	20007128 	.word	0x20007128
 8016550:	200070dc 	.word	0x200070dc
 8016554:	200070e0 	.word	0x200070e0
 8016558:	080164d5 	.word	0x080164d5

0801655c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b086      	sub	sp, #24
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016568:	2006      	movs	r0, #6
 801656a:	f7f9 fd23 	bl	800ffb4 <memp_malloc>
 801656e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016570:	693b      	ldr	r3, [r7, #16]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d109      	bne.n	801658a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d151      	bne.n	8016620 <sys_timeout_abs+0xc4>
 801657c:	4b2a      	ldr	r3, [pc, #168]	; (8016628 <sys_timeout_abs+0xcc>)
 801657e:	22be      	movs	r2, #190	; 0xbe
 8016580:	492a      	ldr	r1, [pc, #168]	; (801662c <sys_timeout_abs+0xd0>)
 8016582:	482b      	ldr	r0, [pc, #172]	; (8016630 <sys_timeout_abs+0xd4>)
 8016584:	f003 fab4 	bl	8019af0 <iprintf>
    return;
 8016588:	e04a      	b.n	8016620 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	2200      	movs	r2, #0
 801658e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016590:	693b      	ldr	r3, [r7, #16]
 8016592:	68ba      	ldr	r2, [r7, #8]
 8016594:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016596:	693b      	ldr	r3, [r7, #16]
 8016598:	687a      	ldr	r2, [r7, #4]
 801659a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801659c:	693b      	ldr	r3, [r7, #16]
 801659e:	68fa      	ldr	r2, [r7, #12]
 80165a0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80165a2:	4b24      	ldr	r3, [pc, #144]	; (8016634 <sys_timeout_abs+0xd8>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d103      	bne.n	80165b2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80165aa:	4a22      	ldr	r2, [pc, #136]	; (8016634 <sys_timeout_abs+0xd8>)
 80165ac:	693b      	ldr	r3, [r7, #16]
 80165ae:	6013      	str	r3, [r2, #0]
    return;
 80165b0:	e037      	b.n	8016622 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80165b2:	693b      	ldr	r3, [r7, #16]
 80165b4:	685a      	ldr	r2, [r3, #4]
 80165b6:	4b1f      	ldr	r3, [pc, #124]	; (8016634 <sys_timeout_abs+0xd8>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	685b      	ldr	r3, [r3, #4]
 80165bc:	1ad3      	subs	r3, r2, r3
 80165be:	0fdb      	lsrs	r3, r3, #31
 80165c0:	f003 0301 	and.w	r3, r3, #1
 80165c4:	b2db      	uxtb	r3, r3
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d007      	beq.n	80165da <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80165ca:	4b1a      	ldr	r3, [pc, #104]	; (8016634 <sys_timeout_abs+0xd8>)
 80165cc:	681a      	ldr	r2, [r3, #0]
 80165ce:	693b      	ldr	r3, [r7, #16]
 80165d0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80165d2:	4a18      	ldr	r2, [pc, #96]	; (8016634 <sys_timeout_abs+0xd8>)
 80165d4:	693b      	ldr	r3, [r7, #16]
 80165d6:	6013      	str	r3, [r2, #0]
 80165d8:	e023      	b.n	8016622 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80165da:	4b16      	ldr	r3, [pc, #88]	; (8016634 <sys_timeout_abs+0xd8>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	617b      	str	r3, [r7, #20]
 80165e0:	e01a      	b.n	8016618 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d00b      	beq.n	8016602 <sys_timeout_abs+0xa6>
 80165ea:	693b      	ldr	r3, [r7, #16]
 80165ec:	685a      	ldr	r2, [r3, #4]
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	685b      	ldr	r3, [r3, #4]
 80165f4:	1ad3      	subs	r3, r2, r3
 80165f6:	0fdb      	lsrs	r3, r3, #31
 80165f8:	f003 0301 	and.w	r3, r3, #1
 80165fc:	b2db      	uxtb	r3, r3
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d007      	beq.n	8016612 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	681a      	ldr	r2, [r3, #0]
 8016606:	693b      	ldr	r3, [r7, #16]
 8016608:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801660a:	697b      	ldr	r3, [r7, #20]
 801660c:	693a      	ldr	r2, [r7, #16]
 801660e:	601a      	str	r2, [r3, #0]
        break;
 8016610:	e007      	b.n	8016622 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016612:	697b      	ldr	r3, [r7, #20]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	617b      	str	r3, [r7, #20]
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d1e1      	bne.n	80165e2 <sys_timeout_abs+0x86>
 801661e:	e000      	b.n	8016622 <sys_timeout_abs+0xc6>
    return;
 8016620:	bf00      	nop
      }
    }
  }
}
 8016622:	3718      	adds	r7, #24
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
 8016628:	0801e2f0 	.word	0x0801e2f0
 801662c:	0801e324 	.word	0x0801e324
 8016630:	0801e364 	.word	0x0801e364
 8016634:	20007120 	.word	0x20007120

08016638 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b086      	sub	sp, #24
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	685b      	ldr	r3, [r3, #4]
 8016648:	4798      	blx	r3

  now = sys_now();
 801664a:	f7f8 fdb5 	bl	800f1b8 <sys_now>
 801664e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016650:	697b      	ldr	r3, [r7, #20]
 8016652:	681a      	ldr	r2, [r3, #0]
 8016654:	4b0f      	ldr	r3, [pc, #60]	; (8016694 <lwip_cyclic_timer+0x5c>)
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	4413      	add	r3, r2
 801665a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801665c:	68fa      	ldr	r2, [r7, #12]
 801665e:	693b      	ldr	r3, [r7, #16]
 8016660:	1ad3      	subs	r3, r2, r3
 8016662:	0fdb      	lsrs	r3, r3, #31
 8016664:	f003 0301 	and.w	r3, r3, #1
 8016668:	b2db      	uxtb	r3, r3
 801666a:	2b00      	cmp	r3, #0
 801666c:	d009      	beq.n	8016682 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801666e:	697b      	ldr	r3, [r7, #20]
 8016670:	681a      	ldr	r2, [r3, #0]
 8016672:	693b      	ldr	r3, [r7, #16]
 8016674:	4413      	add	r3, r2
 8016676:	687a      	ldr	r2, [r7, #4]
 8016678:	4907      	ldr	r1, [pc, #28]	; (8016698 <lwip_cyclic_timer+0x60>)
 801667a:	4618      	mov	r0, r3
 801667c:	f7ff ff6e 	bl	801655c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016680:	e004      	b.n	801668c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016682:	687a      	ldr	r2, [r7, #4]
 8016684:	4904      	ldr	r1, [pc, #16]	; (8016698 <lwip_cyclic_timer+0x60>)
 8016686:	68f8      	ldr	r0, [r7, #12]
 8016688:	f7ff ff68 	bl	801655c <sys_timeout_abs>
}
 801668c:	bf00      	nop
 801668e:	3718      	adds	r7, #24
 8016690:	46bd      	mov	sp, r7
 8016692:	bd80      	pop	{r7, pc}
 8016694:	20007124 	.word	0x20007124
 8016698:	08016639 	.word	0x08016639

0801669c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80166a2:	2301      	movs	r3, #1
 80166a4:	607b      	str	r3, [r7, #4]
 80166a6:	e00e      	b.n	80166c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80166a8:	4a0b      	ldr	r2, [pc, #44]	; (80166d8 <sys_timeouts_init+0x3c>)
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	00db      	lsls	r3, r3, #3
 80166b4:	4a08      	ldr	r2, [pc, #32]	; (80166d8 <sys_timeouts_init+0x3c>)
 80166b6:	4413      	add	r3, r2
 80166b8:	461a      	mov	r2, r3
 80166ba:	4908      	ldr	r1, [pc, #32]	; (80166dc <sys_timeouts_init+0x40>)
 80166bc:	f000 f810 	bl	80166e0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	3301      	adds	r3, #1
 80166c4:	607b      	str	r3, [r7, #4]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2b02      	cmp	r3, #2
 80166ca:	d9ed      	bls.n	80166a8 <sys_timeouts_init+0xc>
  }
}
 80166cc:	bf00      	nop
 80166ce:	bf00      	nop
 80166d0:	3708      	adds	r7, #8
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	0801eefc 	.word	0x0801eefc
 80166dc:	08016639 	.word	0x08016639

080166e0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b086      	sub	sp, #24
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	60f8      	str	r0, [r7, #12]
 80166e8:	60b9      	str	r1, [r7, #8]
 80166ea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80166f2:	d306      	bcc.n	8016702 <sys_timeout+0x22>
 80166f4:	4b0a      	ldr	r3, [pc, #40]	; (8016720 <sys_timeout+0x40>)
 80166f6:	f240 1229 	movw	r2, #297	; 0x129
 80166fa:	490a      	ldr	r1, [pc, #40]	; (8016724 <sys_timeout+0x44>)
 80166fc:	480a      	ldr	r0, [pc, #40]	; (8016728 <sys_timeout+0x48>)
 80166fe:	f003 f9f7 	bl	8019af0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016702:	f7f8 fd59 	bl	800f1b8 <sys_now>
 8016706:	4602      	mov	r2, r0
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	4413      	add	r3, r2
 801670c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	68b9      	ldr	r1, [r7, #8]
 8016712:	6978      	ldr	r0, [r7, #20]
 8016714:	f7ff ff22 	bl	801655c <sys_timeout_abs>
#endif
}
 8016718:	bf00      	nop
 801671a:	3718      	adds	r7, #24
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}
 8016720:	0801e2f0 	.word	0x0801e2f0
 8016724:	0801e38c 	.word	0x0801e38c
 8016728:	0801e364 	.word	0x0801e364

0801672c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016730:	f002 fca2 	bl	8019078 <rand>
 8016734:	4603      	mov	r3, r0
 8016736:	b29b      	uxth	r3, r3
 8016738:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801673c:	b29b      	uxth	r3, r3
 801673e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016742:	b29a      	uxth	r2, r3
 8016744:	4b01      	ldr	r3, [pc, #4]	; (801674c <udp_init+0x20>)
 8016746:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016748:	bf00      	nop
 801674a:	bd80      	pop	{r7, pc}
 801674c:	20000060 	.word	0x20000060

08016750 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af00      	add	r7, sp, #0
 8016756:	60f8      	str	r0, [r7, #12]
 8016758:	60b9      	str	r1, [r7, #8]
 801675a:	4613      	mov	r3, r2
 801675c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d105      	bne.n	8016770 <udp_input_local_match+0x20>
 8016764:	4b27      	ldr	r3, [pc, #156]	; (8016804 <udp_input_local_match+0xb4>)
 8016766:	2287      	movs	r2, #135	; 0x87
 8016768:	4927      	ldr	r1, [pc, #156]	; (8016808 <udp_input_local_match+0xb8>)
 801676a:	4828      	ldr	r0, [pc, #160]	; (801680c <udp_input_local_match+0xbc>)
 801676c:	f003 f9c0 	bl	8019af0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016770:	68bb      	ldr	r3, [r7, #8]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d105      	bne.n	8016782 <udp_input_local_match+0x32>
 8016776:	4b23      	ldr	r3, [pc, #140]	; (8016804 <udp_input_local_match+0xb4>)
 8016778:	2288      	movs	r2, #136	; 0x88
 801677a:	4925      	ldr	r1, [pc, #148]	; (8016810 <udp_input_local_match+0xc0>)
 801677c:	4823      	ldr	r0, [pc, #140]	; (801680c <udp_input_local_match+0xbc>)
 801677e:	f003 f9b7 	bl	8019af0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	7a1b      	ldrb	r3, [r3, #8]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d00b      	beq.n	80167a2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	7a1a      	ldrb	r2, [r3, #8]
 801678e:	4b21      	ldr	r3, [pc, #132]	; (8016814 <udp_input_local_match+0xc4>)
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016796:	3301      	adds	r3, #1
 8016798:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801679a:	429a      	cmp	r2, r3
 801679c:	d001      	beq.n	80167a2 <udp_input_local_match+0x52>
    return 0;
 801679e:	2300      	movs	r3, #0
 80167a0:	e02b      	b.n	80167fa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80167a2:	79fb      	ldrb	r3, [r7, #7]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d018      	beq.n	80167da <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d013      	beq.n	80167d6 <udp_input_local_match+0x86>
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d00f      	beq.n	80167d6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80167b6:	4b17      	ldr	r3, [pc, #92]	; (8016814 <udp_input_local_match+0xc4>)
 80167b8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80167ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167be:	d00a      	beq.n	80167d6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	681a      	ldr	r2, [r3, #0]
 80167c4:	4b13      	ldr	r3, [pc, #76]	; (8016814 <udp_input_local_match+0xc4>)
 80167c6:	695b      	ldr	r3, [r3, #20]
 80167c8:	405a      	eors	r2, r3
 80167ca:	68bb      	ldr	r3, [r7, #8]
 80167cc:	3308      	adds	r3, #8
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d110      	bne.n	80167f8 <udp_input_local_match+0xa8>
          return 1;
 80167d6:	2301      	movs	r3, #1
 80167d8:	e00f      	b.n	80167fa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d009      	beq.n	80167f4 <udp_input_local_match+0xa4>
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d005      	beq.n	80167f4 <udp_input_local_match+0xa4>
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	681a      	ldr	r2, [r3, #0]
 80167ec:	4b09      	ldr	r3, [pc, #36]	; (8016814 <udp_input_local_match+0xc4>)
 80167ee:	695b      	ldr	r3, [r3, #20]
 80167f0:	429a      	cmp	r2, r3
 80167f2:	d101      	bne.n	80167f8 <udp_input_local_match+0xa8>
        return 1;
 80167f4:	2301      	movs	r3, #1
 80167f6:	e000      	b.n	80167fa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80167f8:	2300      	movs	r3, #0
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	3710      	adds	r7, #16
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}
 8016802:	bf00      	nop
 8016804:	0801e3d8 	.word	0x0801e3d8
 8016808:	0801e408 	.word	0x0801e408
 801680c:	0801e42c 	.word	0x0801e42c
 8016810:	0801e454 	.word	0x0801e454
 8016814:	200007f4 	.word	0x200007f4

08016818 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016818:	b590      	push	{r4, r7, lr}
 801681a:	b08d      	sub	sp, #52	; 0x34
 801681c:	af02      	add	r7, sp, #8
 801681e:	6078      	str	r0, [r7, #4]
 8016820:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016822:	2300      	movs	r3, #0
 8016824:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d105      	bne.n	8016838 <udp_input+0x20>
 801682c:	4b7c      	ldr	r3, [pc, #496]	; (8016a20 <udp_input+0x208>)
 801682e:	22cf      	movs	r2, #207	; 0xcf
 8016830:	497c      	ldr	r1, [pc, #496]	; (8016a24 <udp_input+0x20c>)
 8016832:	487d      	ldr	r0, [pc, #500]	; (8016a28 <udp_input+0x210>)
 8016834:	f003 f95c 	bl	8019af0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d105      	bne.n	801684a <udp_input+0x32>
 801683e:	4b78      	ldr	r3, [pc, #480]	; (8016a20 <udp_input+0x208>)
 8016840:	22d0      	movs	r2, #208	; 0xd0
 8016842:	497a      	ldr	r1, [pc, #488]	; (8016a2c <udp_input+0x214>)
 8016844:	4878      	ldr	r0, [pc, #480]	; (8016a28 <udp_input+0x210>)
 8016846:	f003 f953 	bl	8019af0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	895b      	ldrh	r3, [r3, #10]
 801684e:	2b07      	cmp	r3, #7
 8016850:	d803      	bhi.n	801685a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	f7fa fa74 	bl	8010d40 <pbuf_free>
    goto end;
 8016858:	e0de      	b.n	8016a18 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	685b      	ldr	r3, [r3, #4]
 801685e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016860:	4b73      	ldr	r3, [pc, #460]	; (8016a30 <udp_input+0x218>)
 8016862:	695b      	ldr	r3, [r3, #20]
 8016864:	4a72      	ldr	r2, [pc, #456]	; (8016a30 <udp_input+0x218>)
 8016866:	6812      	ldr	r2, [r2, #0]
 8016868:	4611      	mov	r1, r2
 801686a:	4618      	mov	r0, r3
 801686c:	f001 fcae 	bl	80181cc <ip4_addr_isbroadcast_u32>
 8016870:	4603      	mov	r3, r0
 8016872:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	881b      	ldrh	r3, [r3, #0]
 8016878:	b29b      	uxth	r3, r3
 801687a:	4618      	mov	r0, r3
 801687c:	f7f8 fe7c 	bl	800f578 <lwip_htons>
 8016880:	4603      	mov	r3, r0
 8016882:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	885b      	ldrh	r3, [r3, #2]
 8016888:	b29b      	uxth	r3, r3
 801688a:	4618      	mov	r0, r3
 801688c:	f7f8 fe74 	bl	800f578 <lwip_htons>
 8016890:	4603      	mov	r3, r0
 8016892:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016894:	2300      	movs	r3, #0
 8016896:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016898:	2300      	movs	r3, #0
 801689a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801689c:	2300      	movs	r3, #0
 801689e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80168a0:	4b64      	ldr	r3, [pc, #400]	; (8016a34 <udp_input+0x21c>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	627b      	str	r3, [r7, #36]	; 0x24
 80168a6:	e054      	b.n	8016952 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80168a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168aa:	8a5b      	ldrh	r3, [r3, #18]
 80168ac:	89fa      	ldrh	r2, [r7, #14]
 80168ae:	429a      	cmp	r2, r3
 80168b0:	d14a      	bne.n	8016948 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80168b2:	7cfb      	ldrb	r3, [r7, #19]
 80168b4:	461a      	mov	r2, r3
 80168b6:	6839      	ldr	r1, [r7, #0]
 80168b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168ba:	f7ff ff49 	bl	8016750 <udp_input_local_match>
 80168be:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d041      	beq.n	8016948 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80168c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c6:	7c1b      	ldrb	r3, [r3, #16]
 80168c8:	f003 0304 	and.w	r3, r3, #4
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d11d      	bne.n	801690c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80168d0:	69fb      	ldr	r3, [r7, #28]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d102      	bne.n	80168dc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80168d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d8:	61fb      	str	r3, [r7, #28]
 80168da:	e017      	b.n	801690c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80168dc:	7cfb      	ldrb	r3, [r7, #19]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d014      	beq.n	801690c <udp_input+0xf4>
 80168e2:	4b53      	ldr	r3, [pc, #332]	; (8016a30 <udp_input+0x218>)
 80168e4:	695b      	ldr	r3, [r3, #20]
 80168e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ea:	d10f      	bne.n	801690c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80168ec:	69fb      	ldr	r3, [r7, #28]
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	3304      	adds	r3, #4
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	429a      	cmp	r2, r3
 80168f8:	d008      	beq.n	801690c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80168fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168fc:	681a      	ldr	r2, [r3, #0]
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	3304      	adds	r3, #4
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	429a      	cmp	r2, r3
 8016906:	d101      	bne.n	801690c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801690a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801690e:	8a9b      	ldrh	r3, [r3, #20]
 8016910:	8a3a      	ldrh	r2, [r7, #16]
 8016912:	429a      	cmp	r2, r3
 8016914:	d118      	bne.n	8016948 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016918:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801691a:	2b00      	cmp	r3, #0
 801691c:	d005      	beq.n	801692a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016920:	685a      	ldr	r2, [r3, #4]
 8016922:	4b43      	ldr	r3, [pc, #268]	; (8016a30 <udp_input+0x218>)
 8016924:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016926:	429a      	cmp	r2, r3
 8016928:	d10e      	bne.n	8016948 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801692a:	6a3b      	ldr	r3, [r7, #32]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d014      	beq.n	801695a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016932:	68da      	ldr	r2, [r3, #12]
 8016934:	6a3b      	ldr	r3, [r7, #32]
 8016936:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016938:	4b3e      	ldr	r3, [pc, #248]	; (8016a34 <udp_input+0x21c>)
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801693e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016940:	4a3c      	ldr	r2, [pc, #240]	; (8016a34 <udp_input+0x21c>)
 8016942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016944:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016946:	e008      	b.n	801695a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801694a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801694e:	68db      	ldr	r3, [r3, #12]
 8016950:	627b      	str	r3, [r7, #36]	; 0x24
 8016952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016954:	2b00      	cmp	r3, #0
 8016956:	d1a7      	bne.n	80168a8 <udp_input+0x90>
 8016958:	e000      	b.n	801695c <udp_input+0x144>
        break;
 801695a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801695e:	2b00      	cmp	r3, #0
 8016960:	d101      	bne.n	8016966 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016962:	69fb      	ldr	r3, [r7, #28]
 8016964:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016968:	2b00      	cmp	r3, #0
 801696a:	d002      	beq.n	8016972 <udp_input+0x15a>
    for_us = 1;
 801696c:	2301      	movs	r3, #1
 801696e:	76fb      	strb	r3, [r7, #27]
 8016970:	e00a      	b.n	8016988 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	3304      	adds	r3, #4
 8016976:	681a      	ldr	r2, [r3, #0]
 8016978:	4b2d      	ldr	r3, [pc, #180]	; (8016a30 <udp_input+0x218>)
 801697a:	695b      	ldr	r3, [r3, #20]
 801697c:	429a      	cmp	r2, r3
 801697e:	bf0c      	ite	eq
 8016980:	2301      	moveq	r3, #1
 8016982:	2300      	movne	r3, #0
 8016984:	b2db      	uxtb	r3, r3
 8016986:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016988:	7efb      	ldrb	r3, [r7, #27]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d041      	beq.n	8016a12 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801698e:	2108      	movs	r1, #8
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f7fa f94f 	bl	8010c34 <pbuf_remove_header>
 8016996:	4603      	mov	r3, r0
 8016998:	2b00      	cmp	r3, #0
 801699a:	d00a      	beq.n	80169b2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801699c:	4b20      	ldr	r3, [pc, #128]	; (8016a20 <udp_input+0x208>)
 801699e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80169a2:	4925      	ldr	r1, [pc, #148]	; (8016a38 <udp_input+0x220>)
 80169a4:	4820      	ldr	r0, [pc, #128]	; (8016a28 <udp_input+0x210>)
 80169a6:	f003 f8a3 	bl	8019af0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	f7fa f9c8 	bl	8010d40 <pbuf_free>
      goto end;
 80169b0:	e032      	b.n	8016a18 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80169b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d012      	beq.n	80169de <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80169b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ba:	699b      	ldr	r3, [r3, #24]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d00a      	beq.n	80169d6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80169c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c2:	699c      	ldr	r4, [r3, #24]
 80169c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c6:	69d8      	ldr	r0, [r3, #28]
 80169c8:	8a3b      	ldrh	r3, [r7, #16]
 80169ca:	9300      	str	r3, [sp, #0]
 80169cc:	4b1b      	ldr	r3, [pc, #108]	; (8016a3c <udp_input+0x224>)
 80169ce:	687a      	ldr	r2, [r7, #4]
 80169d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169d2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80169d4:	e021      	b.n	8016a1a <udp_input+0x202>
        pbuf_free(p);
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f7fa f9b2 	bl	8010d40 <pbuf_free>
        goto end;
 80169dc:	e01c      	b.n	8016a18 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80169de:	7cfb      	ldrb	r3, [r7, #19]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d112      	bne.n	8016a0a <udp_input+0x1f2>
 80169e4:	4b12      	ldr	r3, [pc, #72]	; (8016a30 <udp_input+0x218>)
 80169e6:	695b      	ldr	r3, [r3, #20]
 80169e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80169ec:	2be0      	cmp	r3, #224	; 0xe0
 80169ee:	d00c      	beq.n	8016a0a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80169f0:	4b0f      	ldr	r3, [pc, #60]	; (8016a30 <udp_input+0x218>)
 80169f2:	899b      	ldrh	r3, [r3, #12]
 80169f4:	3308      	adds	r3, #8
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	b21b      	sxth	r3, r3
 80169fa:	4619      	mov	r1, r3
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f7fa f98c 	bl	8010d1a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016a02:	2103      	movs	r1, #3
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f001 f8b7 	bl	8017b78 <icmp_dest_unreach>
      pbuf_free(p);
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f7fa f998 	bl	8010d40 <pbuf_free>
  return;
 8016a10:	e003      	b.n	8016a1a <udp_input+0x202>
    pbuf_free(p);
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f7fa f994 	bl	8010d40 <pbuf_free>
  return;
 8016a18:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016a1a:	372c      	adds	r7, #44	; 0x2c
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd90      	pop	{r4, r7, pc}
 8016a20:	0801e3d8 	.word	0x0801e3d8
 8016a24:	0801e47c 	.word	0x0801e47c
 8016a28:	0801e42c 	.word	0x0801e42c
 8016a2c:	0801e494 	.word	0x0801e494
 8016a30:	200007f4 	.word	0x200007f4
 8016a34:	2000712c 	.word	0x2000712c
 8016a38:	0801e4b0 	.word	0x0801e4b0
 8016a3c:	20000804 	.word	0x20000804

08016a40 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016a40:	b480      	push	{r7}
 8016a42:	b085      	sub	sp, #20
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d01e      	beq.n	8016a8e <udp_netif_ip_addr_changed+0x4e>
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d01a      	beq.n	8016a8e <udp_netif_ip_addr_changed+0x4e>
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d017      	beq.n	8016a8e <udp_netif_ip_addr_changed+0x4e>
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d013      	beq.n	8016a8e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016a66:	4b0d      	ldr	r3, [pc, #52]	; (8016a9c <udp_netif_ip_addr_changed+0x5c>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	60fb      	str	r3, [r7, #12]
 8016a6c:	e00c      	b.n	8016a88 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	681a      	ldr	r2, [r3, #0]
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	429a      	cmp	r2, r3
 8016a78:	d103      	bne.n	8016a82 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016a7a:	683b      	ldr	r3, [r7, #0]
 8016a7c:	681a      	ldr	r2, [r3, #0]
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	68db      	ldr	r3, [r3, #12]
 8016a86:	60fb      	str	r3, [r7, #12]
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d1ef      	bne.n	8016a6e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016a8e:	bf00      	nop
 8016a90:	3714      	adds	r7, #20
 8016a92:	46bd      	mov	sp, r7
 8016a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a98:	4770      	bx	lr
 8016a9a:	bf00      	nop
 8016a9c:	2000712c 	.word	0x2000712c

08016aa0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b082      	sub	sp, #8
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016aa8:	4915      	ldr	r1, [pc, #84]	; (8016b00 <etharp_free_entry+0x60>)
 8016aaa:	687a      	ldr	r2, [r7, #4]
 8016aac:	4613      	mov	r3, r2
 8016aae:	005b      	lsls	r3, r3, #1
 8016ab0:	4413      	add	r3, r2
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	440b      	add	r3, r1
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d013      	beq.n	8016ae4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016abc:	4910      	ldr	r1, [pc, #64]	; (8016b00 <etharp_free_entry+0x60>)
 8016abe:	687a      	ldr	r2, [r7, #4]
 8016ac0:	4613      	mov	r3, r2
 8016ac2:	005b      	lsls	r3, r3, #1
 8016ac4:	4413      	add	r3, r2
 8016ac6:	00db      	lsls	r3, r3, #3
 8016ac8:	440b      	add	r3, r1
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	4618      	mov	r0, r3
 8016ace:	f7fa f937 	bl	8010d40 <pbuf_free>
    arp_table[i].q = NULL;
 8016ad2:	490b      	ldr	r1, [pc, #44]	; (8016b00 <etharp_free_entry+0x60>)
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	005b      	lsls	r3, r3, #1
 8016ada:	4413      	add	r3, r2
 8016adc:	00db      	lsls	r3, r3, #3
 8016ade:	440b      	add	r3, r1
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016ae4:	4906      	ldr	r1, [pc, #24]	; (8016b00 <etharp_free_entry+0x60>)
 8016ae6:	687a      	ldr	r2, [r7, #4]
 8016ae8:	4613      	mov	r3, r2
 8016aea:	005b      	lsls	r3, r3, #1
 8016aec:	4413      	add	r3, r2
 8016aee:	00db      	lsls	r3, r3, #3
 8016af0:	440b      	add	r3, r1
 8016af2:	3314      	adds	r3, #20
 8016af4:	2200      	movs	r2, #0
 8016af6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016af8:	bf00      	nop
 8016afa:	3708      	adds	r7, #8
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}
 8016b00:	20007130 	.word	0x20007130

08016b04 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b082      	sub	sp, #8
 8016b08:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	607b      	str	r3, [r7, #4]
 8016b0e:	e096      	b.n	8016c3e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016b10:	494f      	ldr	r1, [pc, #316]	; (8016c50 <etharp_tmr+0x14c>)
 8016b12:	687a      	ldr	r2, [r7, #4]
 8016b14:	4613      	mov	r3, r2
 8016b16:	005b      	lsls	r3, r3, #1
 8016b18:	4413      	add	r3, r2
 8016b1a:	00db      	lsls	r3, r3, #3
 8016b1c:	440b      	add	r3, r1
 8016b1e:	3314      	adds	r3, #20
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016b24:	78fb      	ldrb	r3, [r7, #3]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	f000 8086 	beq.w	8016c38 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016b2c:	4948      	ldr	r1, [pc, #288]	; (8016c50 <etharp_tmr+0x14c>)
 8016b2e:	687a      	ldr	r2, [r7, #4]
 8016b30:	4613      	mov	r3, r2
 8016b32:	005b      	lsls	r3, r3, #1
 8016b34:	4413      	add	r3, r2
 8016b36:	00db      	lsls	r3, r3, #3
 8016b38:	440b      	add	r3, r1
 8016b3a:	3312      	adds	r3, #18
 8016b3c:	881b      	ldrh	r3, [r3, #0]
 8016b3e:	3301      	adds	r3, #1
 8016b40:	b298      	uxth	r0, r3
 8016b42:	4943      	ldr	r1, [pc, #268]	; (8016c50 <etharp_tmr+0x14c>)
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	4613      	mov	r3, r2
 8016b48:	005b      	lsls	r3, r3, #1
 8016b4a:	4413      	add	r3, r2
 8016b4c:	00db      	lsls	r3, r3, #3
 8016b4e:	440b      	add	r3, r1
 8016b50:	3312      	adds	r3, #18
 8016b52:	4602      	mov	r2, r0
 8016b54:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016b56:	493e      	ldr	r1, [pc, #248]	; (8016c50 <etharp_tmr+0x14c>)
 8016b58:	687a      	ldr	r2, [r7, #4]
 8016b5a:	4613      	mov	r3, r2
 8016b5c:	005b      	lsls	r3, r3, #1
 8016b5e:	4413      	add	r3, r2
 8016b60:	00db      	lsls	r3, r3, #3
 8016b62:	440b      	add	r3, r1
 8016b64:	3312      	adds	r3, #18
 8016b66:	881b      	ldrh	r3, [r3, #0]
 8016b68:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016b6c:	d215      	bcs.n	8016b9a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016b6e:	4938      	ldr	r1, [pc, #224]	; (8016c50 <etharp_tmr+0x14c>)
 8016b70:	687a      	ldr	r2, [r7, #4]
 8016b72:	4613      	mov	r3, r2
 8016b74:	005b      	lsls	r3, r3, #1
 8016b76:	4413      	add	r3, r2
 8016b78:	00db      	lsls	r3, r3, #3
 8016b7a:	440b      	add	r3, r1
 8016b7c:	3314      	adds	r3, #20
 8016b7e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016b80:	2b01      	cmp	r3, #1
 8016b82:	d10e      	bne.n	8016ba2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016b84:	4932      	ldr	r1, [pc, #200]	; (8016c50 <etharp_tmr+0x14c>)
 8016b86:	687a      	ldr	r2, [r7, #4]
 8016b88:	4613      	mov	r3, r2
 8016b8a:	005b      	lsls	r3, r3, #1
 8016b8c:	4413      	add	r3, r2
 8016b8e:	00db      	lsls	r3, r3, #3
 8016b90:	440b      	add	r3, r1
 8016b92:	3312      	adds	r3, #18
 8016b94:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016b96:	2b04      	cmp	r3, #4
 8016b98:	d903      	bls.n	8016ba2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f7ff ff80 	bl	8016aa0 <etharp_free_entry>
 8016ba0:	e04a      	b.n	8016c38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016ba2:	492b      	ldr	r1, [pc, #172]	; (8016c50 <etharp_tmr+0x14c>)
 8016ba4:	687a      	ldr	r2, [r7, #4]
 8016ba6:	4613      	mov	r3, r2
 8016ba8:	005b      	lsls	r3, r3, #1
 8016baa:	4413      	add	r3, r2
 8016bac:	00db      	lsls	r3, r3, #3
 8016bae:	440b      	add	r3, r1
 8016bb0:	3314      	adds	r3, #20
 8016bb2:	781b      	ldrb	r3, [r3, #0]
 8016bb4:	2b03      	cmp	r3, #3
 8016bb6:	d10a      	bne.n	8016bce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016bb8:	4925      	ldr	r1, [pc, #148]	; (8016c50 <etharp_tmr+0x14c>)
 8016bba:	687a      	ldr	r2, [r7, #4]
 8016bbc:	4613      	mov	r3, r2
 8016bbe:	005b      	lsls	r3, r3, #1
 8016bc0:	4413      	add	r3, r2
 8016bc2:	00db      	lsls	r3, r3, #3
 8016bc4:	440b      	add	r3, r1
 8016bc6:	3314      	adds	r3, #20
 8016bc8:	2204      	movs	r2, #4
 8016bca:	701a      	strb	r2, [r3, #0]
 8016bcc:	e034      	b.n	8016c38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016bce:	4920      	ldr	r1, [pc, #128]	; (8016c50 <etharp_tmr+0x14c>)
 8016bd0:	687a      	ldr	r2, [r7, #4]
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	005b      	lsls	r3, r3, #1
 8016bd6:	4413      	add	r3, r2
 8016bd8:	00db      	lsls	r3, r3, #3
 8016bda:	440b      	add	r3, r1
 8016bdc:	3314      	adds	r3, #20
 8016bde:	781b      	ldrb	r3, [r3, #0]
 8016be0:	2b04      	cmp	r3, #4
 8016be2:	d10a      	bne.n	8016bfa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016be4:	491a      	ldr	r1, [pc, #104]	; (8016c50 <etharp_tmr+0x14c>)
 8016be6:	687a      	ldr	r2, [r7, #4]
 8016be8:	4613      	mov	r3, r2
 8016bea:	005b      	lsls	r3, r3, #1
 8016bec:	4413      	add	r3, r2
 8016bee:	00db      	lsls	r3, r3, #3
 8016bf0:	440b      	add	r3, r1
 8016bf2:	3314      	adds	r3, #20
 8016bf4:	2202      	movs	r2, #2
 8016bf6:	701a      	strb	r2, [r3, #0]
 8016bf8:	e01e      	b.n	8016c38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016bfa:	4915      	ldr	r1, [pc, #84]	; (8016c50 <etharp_tmr+0x14c>)
 8016bfc:	687a      	ldr	r2, [r7, #4]
 8016bfe:	4613      	mov	r3, r2
 8016c00:	005b      	lsls	r3, r3, #1
 8016c02:	4413      	add	r3, r2
 8016c04:	00db      	lsls	r3, r3, #3
 8016c06:	440b      	add	r3, r1
 8016c08:	3314      	adds	r3, #20
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	2b01      	cmp	r3, #1
 8016c0e:	d113      	bne.n	8016c38 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016c10:	490f      	ldr	r1, [pc, #60]	; (8016c50 <etharp_tmr+0x14c>)
 8016c12:	687a      	ldr	r2, [r7, #4]
 8016c14:	4613      	mov	r3, r2
 8016c16:	005b      	lsls	r3, r3, #1
 8016c18:	4413      	add	r3, r2
 8016c1a:	00db      	lsls	r3, r3, #3
 8016c1c:	440b      	add	r3, r1
 8016c1e:	3308      	adds	r3, #8
 8016c20:	6818      	ldr	r0, [r3, #0]
 8016c22:	687a      	ldr	r2, [r7, #4]
 8016c24:	4613      	mov	r3, r2
 8016c26:	005b      	lsls	r3, r3, #1
 8016c28:	4413      	add	r3, r2
 8016c2a:	00db      	lsls	r3, r3, #3
 8016c2c:	4a08      	ldr	r2, [pc, #32]	; (8016c50 <etharp_tmr+0x14c>)
 8016c2e:	4413      	add	r3, r2
 8016c30:	3304      	adds	r3, #4
 8016c32:	4619      	mov	r1, r3
 8016c34:	f000 fe6e 	bl	8017914 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	607b      	str	r3, [r7, #4]
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	2b09      	cmp	r3, #9
 8016c42:	f77f af65 	ble.w	8016b10 <etharp_tmr+0xc>
      }
    }
  }
}
 8016c46:	bf00      	nop
 8016c48:	bf00      	nop
 8016c4a:	3708      	adds	r7, #8
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}
 8016c50:	20007130 	.word	0x20007130

08016c54 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b08a      	sub	sp, #40	; 0x28
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	60f8      	str	r0, [r7, #12]
 8016c5c:	460b      	mov	r3, r1
 8016c5e:	607a      	str	r2, [r7, #4]
 8016c60:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016c62:	230a      	movs	r3, #10
 8016c64:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016c66:	230a      	movs	r3, #10
 8016c68:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016c6a:	230a      	movs	r3, #10
 8016c6c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016c72:	230a      	movs	r3, #10
 8016c74:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016c76:	2300      	movs	r3, #0
 8016c78:	83bb      	strh	r3, [r7, #28]
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	837b      	strh	r3, [r7, #26]
 8016c7e:	2300      	movs	r3, #0
 8016c80:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c82:	2300      	movs	r3, #0
 8016c84:	843b      	strh	r3, [r7, #32]
 8016c86:	e0ae      	b.n	8016de6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016c88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c8c:	49a6      	ldr	r1, [pc, #664]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016c8e:	4613      	mov	r3, r2
 8016c90:	005b      	lsls	r3, r3, #1
 8016c92:	4413      	add	r3, r2
 8016c94:	00db      	lsls	r3, r3, #3
 8016c96:	440b      	add	r3, r1
 8016c98:	3314      	adds	r3, #20
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016c9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016ca2:	2b0a      	cmp	r3, #10
 8016ca4:	d105      	bne.n	8016cb2 <etharp_find_entry+0x5e>
 8016ca6:	7dfb      	ldrb	r3, [r7, #23]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d102      	bne.n	8016cb2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016cac:	8c3b      	ldrh	r3, [r7, #32]
 8016cae:	847b      	strh	r3, [r7, #34]	; 0x22
 8016cb0:	e095      	b.n	8016dde <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016cb2:	7dfb      	ldrb	r3, [r7, #23]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	f000 8092 	beq.w	8016dde <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016cba:	7dfb      	ldrb	r3, [r7, #23]
 8016cbc:	2b01      	cmp	r3, #1
 8016cbe:	d009      	beq.n	8016cd4 <etharp_find_entry+0x80>
 8016cc0:	7dfb      	ldrb	r3, [r7, #23]
 8016cc2:	2b01      	cmp	r3, #1
 8016cc4:	d806      	bhi.n	8016cd4 <etharp_find_entry+0x80>
 8016cc6:	4b99      	ldr	r3, [pc, #612]	; (8016f2c <etharp_find_entry+0x2d8>)
 8016cc8:	f240 1223 	movw	r2, #291	; 0x123
 8016ccc:	4998      	ldr	r1, [pc, #608]	; (8016f30 <etharp_find_entry+0x2dc>)
 8016cce:	4899      	ldr	r0, [pc, #612]	; (8016f34 <etharp_find_entry+0x2e0>)
 8016cd0:	f002 ff0e 	bl	8019af0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d020      	beq.n	8016d1c <etharp_find_entry+0xc8>
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	6819      	ldr	r1, [r3, #0]
 8016cde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ce2:	4891      	ldr	r0, [pc, #580]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	005b      	lsls	r3, r3, #1
 8016ce8:	4413      	add	r3, r2
 8016cea:	00db      	lsls	r3, r3, #3
 8016cec:	4403      	add	r3, r0
 8016cee:	3304      	adds	r3, #4
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	4299      	cmp	r1, r3
 8016cf4:	d112      	bne.n	8016d1c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d00c      	beq.n	8016d16 <etharp_find_entry+0xc2>
 8016cfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d00:	4989      	ldr	r1, [pc, #548]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016d02:	4613      	mov	r3, r2
 8016d04:	005b      	lsls	r3, r3, #1
 8016d06:	4413      	add	r3, r2
 8016d08:	00db      	lsls	r3, r3, #3
 8016d0a:	440b      	add	r3, r1
 8016d0c:	3308      	adds	r3, #8
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	687a      	ldr	r2, [r7, #4]
 8016d12:	429a      	cmp	r2, r3
 8016d14:	d102      	bne.n	8016d1c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016d16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d1a:	e100      	b.n	8016f1e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016d1c:	7dfb      	ldrb	r3, [r7, #23]
 8016d1e:	2b01      	cmp	r3, #1
 8016d20:	d140      	bne.n	8016da4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016d22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d26:	4980      	ldr	r1, [pc, #512]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016d28:	4613      	mov	r3, r2
 8016d2a:	005b      	lsls	r3, r3, #1
 8016d2c:	4413      	add	r3, r2
 8016d2e:	00db      	lsls	r3, r3, #3
 8016d30:	440b      	add	r3, r1
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d01a      	beq.n	8016d6e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016d38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d3c:	497a      	ldr	r1, [pc, #488]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016d3e:	4613      	mov	r3, r2
 8016d40:	005b      	lsls	r3, r3, #1
 8016d42:	4413      	add	r3, r2
 8016d44:	00db      	lsls	r3, r3, #3
 8016d46:	440b      	add	r3, r1
 8016d48:	3312      	adds	r3, #18
 8016d4a:	881b      	ldrh	r3, [r3, #0]
 8016d4c:	8bba      	ldrh	r2, [r7, #28]
 8016d4e:	429a      	cmp	r2, r3
 8016d50:	d845      	bhi.n	8016dde <etharp_find_entry+0x18a>
            old_queue = i;
 8016d52:	8c3b      	ldrh	r3, [r7, #32]
 8016d54:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016d56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d5a:	4973      	ldr	r1, [pc, #460]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	4413      	add	r3, r2
 8016d62:	00db      	lsls	r3, r3, #3
 8016d64:	440b      	add	r3, r1
 8016d66:	3312      	adds	r3, #18
 8016d68:	881b      	ldrh	r3, [r3, #0]
 8016d6a:	83bb      	strh	r3, [r7, #28]
 8016d6c:	e037      	b.n	8016dde <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016d6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d72:	496d      	ldr	r1, [pc, #436]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016d74:	4613      	mov	r3, r2
 8016d76:	005b      	lsls	r3, r3, #1
 8016d78:	4413      	add	r3, r2
 8016d7a:	00db      	lsls	r3, r3, #3
 8016d7c:	440b      	add	r3, r1
 8016d7e:	3312      	adds	r3, #18
 8016d80:	881b      	ldrh	r3, [r3, #0]
 8016d82:	8b7a      	ldrh	r2, [r7, #26]
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d82a      	bhi.n	8016dde <etharp_find_entry+0x18a>
            old_pending = i;
 8016d88:	8c3b      	ldrh	r3, [r7, #32]
 8016d8a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016d8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d90:	4965      	ldr	r1, [pc, #404]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016d92:	4613      	mov	r3, r2
 8016d94:	005b      	lsls	r3, r3, #1
 8016d96:	4413      	add	r3, r2
 8016d98:	00db      	lsls	r3, r3, #3
 8016d9a:	440b      	add	r3, r1
 8016d9c:	3312      	adds	r3, #18
 8016d9e:	881b      	ldrh	r3, [r3, #0]
 8016da0:	837b      	strh	r3, [r7, #26]
 8016da2:	e01c      	b.n	8016dde <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016da4:	7dfb      	ldrb	r3, [r7, #23]
 8016da6:	2b01      	cmp	r3, #1
 8016da8:	d919      	bls.n	8016dde <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016daa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dae:	495e      	ldr	r1, [pc, #376]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016db0:	4613      	mov	r3, r2
 8016db2:	005b      	lsls	r3, r3, #1
 8016db4:	4413      	add	r3, r2
 8016db6:	00db      	lsls	r3, r3, #3
 8016db8:	440b      	add	r3, r1
 8016dba:	3312      	adds	r3, #18
 8016dbc:	881b      	ldrh	r3, [r3, #0]
 8016dbe:	8b3a      	ldrh	r2, [r7, #24]
 8016dc0:	429a      	cmp	r2, r3
 8016dc2:	d80c      	bhi.n	8016dde <etharp_find_entry+0x18a>
            old_stable = i;
 8016dc4:	8c3b      	ldrh	r3, [r7, #32]
 8016dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016dc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dcc:	4956      	ldr	r1, [pc, #344]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016dce:	4613      	mov	r3, r2
 8016dd0:	005b      	lsls	r3, r3, #1
 8016dd2:	4413      	add	r3, r2
 8016dd4:	00db      	lsls	r3, r3, #3
 8016dd6:	440b      	add	r3, r1
 8016dd8:	3312      	adds	r3, #18
 8016dda:	881b      	ldrh	r3, [r3, #0]
 8016ddc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016dde:	8c3b      	ldrh	r3, [r7, #32]
 8016de0:	3301      	adds	r3, #1
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	843b      	strh	r3, [r7, #32]
 8016de6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016dea:	2b09      	cmp	r3, #9
 8016dec:	f77f af4c 	ble.w	8016c88 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016df0:	7afb      	ldrb	r3, [r7, #11]
 8016df2:	f003 0302 	and.w	r3, r3, #2
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d108      	bne.n	8016e0c <etharp_find_entry+0x1b8>
 8016dfa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016dfe:	2b0a      	cmp	r3, #10
 8016e00:	d107      	bne.n	8016e12 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016e02:	7afb      	ldrb	r3, [r7, #11]
 8016e04:	f003 0301 	and.w	r3, r3, #1
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d102      	bne.n	8016e12 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e10:	e085      	b.n	8016f1e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016e12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016e16:	2b09      	cmp	r3, #9
 8016e18:	dc02      	bgt.n	8016e20 <etharp_find_entry+0x1cc>
    i = empty;
 8016e1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e1c:	843b      	strh	r3, [r7, #32]
 8016e1e:	e039      	b.n	8016e94 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016e20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016e24:	2b09      	cmp	r3, #9
 8016e26:	dc14      	bgt.n	8016e52 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016e2a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016e2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e30:	493d      	ldr	r1, [pc, #244]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016e32:	4613      	mov	r3, r2
 8016e34:	005b      	lsls	r3, r3, #1
 8016e36:	4413      	add	r3, r2
 8016e38:	00db      	lsls	r3, r3, #3
 8016e3a:	440b      	add	r3, r1
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d018      	beq.n	8016e74 <etharp_find_entry+0x220>
 8016e42:	4b3a      	ldr	r3, [pc, #232]	; (8016f2c <etharp_find_entry+0x2d8>)
 8016e44:	f240 126d 	movw	r2, #365	; 0x16d
 8016e48:	493b      	ldr	r1, [pc, #236]	; (8016f38 <etharp_find_entry+0x2e4>)
 8016e4a:	483a      	ldr	r0, [pc, #232]	; (8016f34 <etharp_find_entry+0x2e0>)
 8016e4c:	f002 fe50 	bl	8019af0 <iprintf>
 8016e50:	e010      	b.n	8016e74 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016e52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016e56:	2b09      	cmp	r3, #9
 8016e58:	dc02      	bgt.n	8016e60 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016e5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016e5c:	843b      	strh	r3, [r7, #32]
 8016e5e:	e009      	b.n	8016e74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016e60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016e64:	2b09      	cmp	r3, #9
 8016e66:	dc02      	bgt.n	8016e6e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016e68:	8bfb      	ldrh	r3, [r7, #30]
 8016e6a:	843b      	strh	r3, [r7, #32]
 8016e6c:	e002      	b.n	8016e74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8016e72:	e054      	b.n	8016f1e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016e74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e78:	2b09      	cmp	r3, #9
 8016e7a:	dd06      	ble.n	8016e8a <etharp_find_entry+0x236>
 8016e7c:	4b2b      	ldr	r3, [pc, #172]	; (8016f2c <etharp_find_entry+0x2d8>)
 8016e7e:	f240 127f 	movw	r2, #383	; 0x17f
 8016e82:	492e      	ldr	r1, [pc, #184]	; (8016f3c <etharp_find_entry+0x2e8>)
 8016e84:	482b      	ldr	r0, [pc, #172]	; (8016f34 <etharp_find_entry+0x2e0>)
 8016e86:	f002 fe33 	bl	8019af0 <iprintf>
    etharp_free_entry(i);
 8016e8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7ff fe06 	bl	8016aa0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016e94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e98:	2b09      	cmp	r3, #9
 8016e9a:	dd06      	ble.n	8016eaa <etharp_find_entry+0x256>
 8016e9c:	4b23      	ldr	r3, [pc, #140]	; (8016f2c <etharp_find_entry+0x2d8>)
 8016e9e:	f240 1283 	movw	r2, #387	; 0x183
 8016ea2:	4926      	ldr	r1, [pc, #152]	; (8016f3c <etharp_find_entry+0x2e8>)
 8016ea4:	4823      	ldr	r0, [pc, #140]	; (8016f34 <etharp_find_entry+0x2e0>)
 8016ea6:	f002 fe23 	bl	8019af0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016eaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016eae:	491e      	ldr	r1, [pc, #120]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016eb0:	4613      	mov	r3, r2
 8016eb2:	005b      	lsls	r3, r3, #1
 8016eb4:	4413      	add	r3, r2
 8016eb6:	00db      	lsls	r3, r3, #3
 8016eb8:	440b      	add	r3, r1
 8016eba:	3314      	adds	r3, #20
 8016ebc:	781b      	ldrb	r3, [r3, #0]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d006      	beq.n	8016ed0 <etharp_find_entry+0x27c>
 8016ec2:	4b1a      	ldr	r3, [pc, #104]	; (8016f2c <etharp_find_entry+0x2d8>)
 8016ec4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016ec8:	491d      	ldr	r1, [pc, #116]	; (8016f40 <etharp_find_entry+0x2ec>)
 8016eca:	481a      	ldr	r0, [pc, #104]	; (8016f34 <etharp_find_entry+0x2e0>)
 8016ecc:	f002 fe10 	bl	8019af0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d00b      	beq.n	8016eee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016ed6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	6819      	ldr	r1, [r3, #0]
 8016ede:	4812      	ldr	r0, [pc, #72]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016ee0:	4613      	mov	r3, r2
 8016ee2:	005b      	lsls	r3, r3, #1
 8016ee4:	4413      	add	r3, r2
 8016ee6:	00db      	lsls	r3, r3, #3
 8016ee8:	4403      	add	r3, r0
 8016eea:	3304      	adds	r3, #4
 8016eec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016eee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ef2:	490d      	ldr	r1, [pc, #52]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016ef4:	4613      	mov	r3, r2
 8016ef6:	005b      	lsls	r3, r3, #1
 8016ef8:	4413      	add	r3, r2
 8016efa:	00db      	lsls	r3, r3, #3
 8016efc:	440b      	add	r3, r1
 8016efe:	3312      	adds	r3, #18
 8016f00:	2200      	movs	r2, #0
 8016f02:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016f04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f08:	4907      	ldr	r1, [pc, #28]	; (8016f28 <etharp_find_entry+0x2d4>)
 8016f0a:	4613      	mov	r3, r2
 8016f0c:	005b      	lsls	r3, r3, #1
 8016f0e:	4413      	add	r3, r2
 8016f10:	00db      	lsls	r3, r3, #3
 8016f12:	440b      	add	r3, r1
 8016f14:	3308      	adds	r3, #8
 8016f16:	687a      	ldr	r2, [r7, #4]
 8016f18:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016f1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016f1e:	4618      	mov	r0, r3
 8016f20:	3728      	adds	r7, #40	; 0x28
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}
 8016f26:	bf00      	nop
 8016f28:	20007130 	.word	0x20007130
 8016f2c:	0801e73c 	.word	0x0801e73c
 8016f30:	0801e774 	.word	0x0801e774
 8016f34:	0801e7b4 	.word	0x0801e7b4
 8016f38:	0801e7dc 	.word	0x0801e7dc
 8016f3c:	0801e7f4 	.word	0x0801e7f4
 8016f40:	0801e808 	.word	0x0801e808

08016f44 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016f44:	b580      	push	{r7, lr}
 8016f46:	b088      	sub	sp, #32
 8016f48:	af02      	add	r7, sp, #8
 8016f4a:	60f8      	str	r0, [r7, #12]
 8016f4c:	60b9      	str	r1, [r7, #8]
 8016f4e:	607a      	str	r2, [r7, #4]
 8016f50:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016f58:	2b06      	cmp	r3, #6
 8016f5a:	d006      	beq.n	8016f6a <etharp_update_arp_entry+0x26>
 8016f5c:	4b48      	ldr	r3, [pc, #288]	; (8017080 <etharp_update_arp_entry+0x13c>)
 8016f5e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016f62:	4948      	ldr	r1, [pc, #288]	; (8017084 <etharp_update_arp_entry+0x140>)
 8016f64:	4848      	ldr	r0, [pc, #288]	; (8017088 <etharp_update_arp_entry+0x144>)
 8016f66:	f002 fdc3 	bl	8019af0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016f6a:	68bb      	ldr	r3, [r7, #8]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d012      	beq.n	8016f96 <etharp_update_arp_entry+0x52>
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d00e      	beq.n	8016f96 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	68f9      	ldr	r1, [r7, #12]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f001 f924 	bl	80181cc <ip4_addr_isbroadcast_u32>
 8016f84:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d105      	bne.n	8016f96 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f92:	2be0      	cmp	r3, #224	; 0xe0
 8016f94:	d102      	bne.n	8016f9c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016f96:	f06f 030f 	mvn.w	r3, #15
 8016f9a:	e06c      	b.n	8017076 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016f9c:	78fb      	ldrb	r3, [r7, #3]
 8016f9e:	68fa      	ldr	r2, [r7, #12]
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	68b8      	ldr	r0, [r7, #8]
 8016fa4:	f7ff fe56 	bl	8016c54 <etharp_find_entry>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016fac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	da02      	bge.n	8016fba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016fb4:	8afb      	ldrh	r3, [r7, #22]
 8016fb6:	b25b      	sxtb	r3, r3
 8016fb8:	e05d      	b.n	8017076 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016fba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016fbe:	4933      	ldr	r1, [pc, #204]	; (801708c <etharp_update_arp_entry+0x148>)
 8016fc0:	4613      	mov	r3, r2
 8016fc2:	005b      	lsls	r3, r3, #1
 8016fc4:	4413      	add	r3, r2
 8016fc6:	00db      	lsls	r3, r3, #3
 8016fc8:	440b      	add	r3, r1
 8016fca:	3314      	adds	r3, #20
 8016fcc:	2202      	movs	r2, #2
 8016fce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016fd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016fd4:	492d      	ldr	r1, [pc, #180]	; (801708c <etharp_update_arp_entry+0x148>)
 8016fd6:	4613      	mov	r3, r2
 8016fd8:	005b      	lsls	r3, r3, #1
 8016fda:	4413      	add	r3, r2
 8016fdc:	00db      	lsls	r3, r3, #3
 8016fde:	440b      	add	r3, r1
 8016fe0:	3308      	adds	r3, #8
 8016fe2:	68fa      	ldr	r2, [r7, #12]
 8016fe4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016fe6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016fea:	4613      	mov	r3, r2
 8016fec:	005b      	lsls	r3, r3, #1
 8016fee:	4413      	add	r3, r2
 8016ff0:	00db      	lsls	r3, r3, #3
 8016ff2:	3308      	adds	r3, #8
 8016ff4:	4a25      	ldr	r2, [pc, #148]	; (801708c <etharp_update_arp_entry+0x148>)
 8016ff6:	4413      	add	r3, r2
 8016ff8:	3304      	adds	r3, #4
 8016ffa:	2206      	movs	r2, #6
 8016ffc:	6879      	ldr	r1, [r7, #4]
 8016ffe:	4618      	mov	r0, r3
 8017000:	f002 ff45 	bl	8019e8e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017004:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017008:	4920      	ldr	r1, [pc, #128]	; (801708c <etharp_update_arp_entry+0x148>)
 801700a:	4613      	mov	r3, r2
 801700c:	005b      	lsls	r3, r3, #1
 801700e:	4413      	add	r3, r2
 8017010:	00db      	lsls	r3, r3, #3
 8017012:	440b      	add	r3, r1
 8017014:	3312      	adds	r3, #18
 8017016:	2200      	movs	r2, #0
 8017018:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801701a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801701e:	491b      	ldr	r1, [pc, #108]	; (801708c <etharp_update_arp_entry+0x148>)
 8017020:	4613      	mov	r3, r2
 8017022:	005b      	lsls	r3, r3, #1
 8017024:	4413      	add	r3, r2
 8017026:	00db      	lsls	r3, r3, #3
 8017028:	440b      	add	r3, r1
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d021      	beq.n	8017074 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017034:	4915      	ldr	r1, [pc, #84]	; (801708c <etharp_update_arp_entry+0x148>)
 8017036:	4613      	mov	r3, r2
 8017038:	005b      	lsls	r3, r3, #1
 801703a:	4413      	add	r3, r2
 801703c:	00db      	lsls	r3, r3, #3
 801703e:	440b      	add	r3, r1
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017044:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017048:	4910      	ldr	r1, [pc, #64]	; (801708c <etharp_update_arp_entry+0x148>)
 801704a:	4613      	mov	r3, r2
 801704c:	005b      	lsls	r3, r3, #1
 801704e:	4413      	add	r3, r2
 8017050:	00db      	lsls	r3, r3, #3
 8017052:	440b      	add	r3, r1
 8017054:	2200      	movs	r2, #0
 8017056:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801705e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017062:	9300      	str	r3, [sp, #0]
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	6939      	ldr	r1, [r7, #16]
 8017068:	68f8      	ldr	r0, [r7, #12]
 801706a:	f001 ffbd 	bl	8018fe8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801706e:	6938      	ldr	r0, [r7, #16]
 8017070:	f7f9 fe66 	bl	8010d40 <pbuf_free>
  }
  return ERR_OK;
 8017074:	2300      	movs	r3, #0
}
 8017076:	4618      	mov	r0, r3
 8017078:	3718      	adds	r7, #24
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}
 801707e:	bf00      	nop
 8017080:	0801e73c 	.word	0x0801e73c
 8017084:	0801e834 	.word	0x0801e834
 8017088:	0801e7b4 	.word	0x0801e7b4
 801708c:	20007130 	.word	0x20007130

08017090 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b084      	sub	sp, #16
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017098:	2300      	movs	r3, #0
 801709a:	60fb      	str	r3, [r7, #12]
 801709c:	e01e      	b.n	80170dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801709e:	4913      	ldr	r1, [pc, #76]	; (80170ec <etharp_cleanup_netif+0x5c>)
 80170a0:	68fa      	ldr	r2, [r7, #12]
 80170a2:	4613      	mov	r3, r2
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	4413      	add	r3, r2
 80170a8:	00db      	lsls	r3, r3, #3
 80170aa:	440b      	add	r3, r1
 80170ac:	3314      	adds	r3, #20
 80170ae:	781b      	ldrb	r3, [r3, #0]
 80170b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80170b2:	7afb      	ldrb	r3, [r7, #11]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d00e      	beq.n	80170d6 <etharp_cleanup_netif+0x46>
 80170b8:	490c      	ldr	r1, [pc, #48]	; (80170ec <etharp_cleanup_netif+0x5c>)
 80170ba:	68fa      	ldr	r2, [r7, #12]
 80170bc:	4613      	mov	r3, r2
 80170be:	005b      	lsls	r3, r3, #1
 80170c0:	4413      	add	r3, r2
 80170c2:	00db      	lsls	r3, r3, #3
 80170c4:	440b      	add	r3, r1
 80170c6:	3308      	adds	r3, #8
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	687a      	ldr	r2, [r7, #4]
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d102      	bne.n	80170d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80170d0:	68f8      	ldr	r0, [r7, #12]
 80170d2:	f7ff fce5 	bl	8016aa0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	3301      	adds	r3, #1
 80170da:	60fb      	str	r3, [r7, #12]
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	2b09      	cmp	r3, #9
 80170e0:	dddd      	ble.n	801709e <etharp_cleanup_netif+0xe>
    }
  }
}
 80170e2:	bf00      	nop
 80170e4:	bf00      	nop
 80170e6:	3710      	adds	r7, #16
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}
 80170ec:	20007130 	.word	0x20007130

080170f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80170f0:	b5b0      	push	{r4, r5, r7, lr}
 80170f2:	b08a      	sub	sp, #40	; 0x28
 80170f4:	af04      	add	r7, sp, #16
 80170f6:	6078      	str	r0, [r7, #4]
 80170f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80170fa:	683b      	ldr	r3, [r7, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d107      	bne.n	8017110 <etharp_input+0x20>
 8017100:	4b3d      	ldr	r3, [pc, #244]	; (80171f8 <etharp_input+0x108>)
 8017102:	f240 228a 	movw	r2, #650	; 0x28a
 8017106:	493d      	ldr	r1, [pc, #244]	; (80171fc <etharp_input+0x10c>)
 8017108:	483d      	ldr	r0, [pc, #244]	; (8017200 <etharp_input+0x110>)
 801710a:	f002 fcf1 	bl	8019af0 <iprintf>
 801710e:	e06f      	b.n	80171f0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	685b      	ldr	r3, [r3, #4]
 8017114:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	881b      	ldrh	r3, [r3, #0]
 801711a:	b29b      	uxth	r3, r3
 801711c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017120:	d10c      	bne.n	801713c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017122:	693b      	ldr	r3, [r7, #16]
 8017124:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017126:	2b06      	cmp	r3, #6
 8017128:	d108      	bne.n	801713c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801712e:	2b04      	cmp	r3, #4
 8017130:	d104      	bne.n	801713c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	885b      	ldrh	r3, [r3, #2]
 8017136:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017138:	2b08      	cmp	r3, #8
 801713a:	d003      	beq.n	8017144 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801713c:	6878      	ldr	r0, [r7, #4]
 801713e:	f7f9 fdff 	bl	8010d40 <pbuf_free>
    return;
 8017142:	e055      	b.n	80171f0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017144:	693b      	ldr	r3, [r7, #16]
 8017146:	330e      	adds	r3, #14
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801714c:	693b      	ldr	r3, [r7, #16]
 801714e:	3318      	adds	r3, #24
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	3304      	adds	r3, #4
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d102      	bne.n	8017164 <etharp_input+0x74>
    for_us = 0;
 801715e:	2300      	movs	r3, #0
 8017160:	75fb      	strb	r3, [r7, #23]
 8017162:	e009      	b.n	8017178 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017164:	68ba      	ldr	r2, [r7, #8]
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	3304      	adds	r3, #4
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	429a      	cmp	r2, r3
 801716e:	bf0c      	ite	eq
 8017170:	2301      	moveq	r3, #1
 8017172:	2300      	movne	r3, #0
 8017174:	b2db      	uxtb	r3, r3
 8017176:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	f103 0208 	add.w	r2, r3, #8
 801717e:	7dfb      	ldrb	r3, [r7, #23]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d001      	beq.n	8017188 <etharp_input+0x98>
 8017184:	2301      	movs	r3, #1
 8017186:	e000      	b.n	801718a <etharp_input+0x9a>
 8017188:	2302      	movs	r3, #2
 801718a:	f107 010c 	add.w	r1, r7, #12
 801718e:	6838      	ldr	r0, [r7, #0]
 8017190:	f7ff fed8 	bl	8016f44 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017194:	693b      	ldr	r3, [r7, #16]
 8017196:	88db      	ldrh	r3, [r3, #6]
 8017198:	b29b      	uxth	r3, r3
 801719a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801719e:	d003      	beq.n	80171a8 <etharp_input+0xb8>
 80171a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80171a4:	d01e      	beq.n	80171e4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80171a6:	e020      	b.n	80171ea <etharp_input+0xfa>
      if (for_us) {
 80171a8:	7dfb      	ldrb	r3, [r7, #23]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d01c      	beq.n	80171e8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80171b4:	693b      	ldr	r3, [r7, #16]
 80171b6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80171c4:	693a      	ldr	r2, [r7, #16]
 80171c6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80171c8:	2102      	movs	r1, #2
 80171ca:	9103      	str	r1, [sp, #12]
 80171cc:	f107 010c 	add.w	r1, r7, #12
 80171d0:	9102      	str	r1, [sp, #8]
 80171d2:	9201      	str	r2, [sp, #4]
 80171d4:	9300      	str	r3, [sp, #0]
 80171d6:	462b      	mov	r3, r5
 80171d8:	4622      	mov	r2, r4
 80171da:	4601      	mov	r1, r0
 80171dc:	6838      	ldr	r0, [r7, #0]
 80171de:	f000 faeb 	bl	80177b8 <etharp_raw>
      break;
 80171e2:	e001      	b.n	80171e8 <etharp_input+0xf8>
      break;
 80171e4:	bf00      	nop
 80171e6:	e000      	b.n	80171ea <etharp_input+0xfa>
      break;
 80171e8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	f7f9 fda8 	bl	8010d40 <pbuf_free>
}
 80171f0:	3718      	adds	r7, #24
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bdb0      	pop	{r4, r5, r7, pc}
 80171f6:	bf00      	nop
 80171f8:	0801e73c 	.word	0x0801e73c
 80171fc:	0801e88c 	.word	0x0801e88c
 8017200:	0801e7b4 	.word	0x0801e7b4

08017204 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b086      	sub	sp, #24
 8017208:	af02      	add	r7, sp, #8
 801720a:	60f8      	str	r0, [r7, #12]
 801720c:	60b9      	str	r1, [r7, #8]
 801720e:	4613      	mov	r3, r2
 8017210:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017212:	79fa      	ldrb	r2, [r7, #7]
 8017214:	4944      	ldr	r1, [pc, #272]	; (8017328 <etharp_output_to_arp_index+0x124>)
 8017216:	4613      	mov	r3, r2
 8017218:	005b      	lsls	r3, r3, #1
 801721a:	4413      	add	r3, r2
 801721c:	00db      	lsls	r3, r3, #3
 801721e:	440b      	add	r3, r1
 8017220:	3314      	adds	r3, #20
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	2b01      	cmp	r3, #1
 8017226:	d806      	bhi.n	8017236 <etharp_output_to_arp_index+0x32>
 8017228:	4b40      	ldr	r3, [pc, #256]	; (801732c <etharp_output_to_arp_index+0x128>)
 801722a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801722e:	4940      	ldr	r1, [pc, #256]	; (8017330 <etharp_output_to_arp_index+0x12c>)
 8017230:	4840      	ldr	r0, [pc, #256]	; (8017334 <etharp_output_to_arp_index+0x130>)
 8017232:	f002 fc5d 	bl	8019af0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017236:	79fa      	ldrb	r2, [r7, #7]
 8017238:	493b      	ldr	r1, [pc, #236]	; (8017328 <etharp_output_to_arp_index+0x124>)
 801723a:	4613      	mov	r3, r2
 801723c:	005b      	lsls	r3, r3, #1
 801723e:	4413      	add	r3, r2
 8017240:	00db      	lsls	r3, r3, #3
 8017242:	440b      	add	r3, r1
 8017244:	3314      	adds	r3, #20
 8017246:	781b      	ldrb	r3, [r3, #0]
 8017248:	2b02      	cmp	r3, #2
 801724a:	d153      	bne.n	80172f4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801724c:	79fa      	ldrb	r2, [r7, #7]
 801724e:	4936      	ldr	r1, [pc, #216]	; (8017328 <etharp_output_to_arp_index+0x124>)
 8017250:	4613      	mov	r3, r2
 8017252:	005b      	lsls	r3, r3, #1
 8017254:	4413      	add	r3, r2
 8017256:	00db      	lsls	r3, r3, #3
 8017258:	440b      	add	r3, r1
 801725a:	3312      	adds	r3, #18
 801725c:	881b      	ldrh	r3, [r3, #0]
 801725e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017262:	d919      	bls.n	8017298 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017264:	79fa      	ldrb	r2, [r7, #7]
 8017266:	4613      	mov	r3, r2
 8017268:	005b      	lsls	r3, r3, #1
 801726a:	4413      	add	r3, r2
 801726c:	00db      	lsls	r3, r3, #3
 801726e:	4a2e      	ldr	r2, [pc, #184]	; (8017328 <etharp_output_to_arp_index+0x124>)
 8017270:	4413      	add	r3, r2
 8017272:	3304      	adds	r3, #4
 8017274:	4619      	mov	r1, r3
 8017276:	68f8      	ldr	r0, [r7, #12]
 8017278:	f000 fb4c 	bl	8017914 <etharp_request>
 801727c:	4603      	mov	r3, r0
 801727e:	2b00      	cmp	r3, #0
 8017280:	d138      	bne.n	80172f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017282:	79fa      	ldrb	r2, [r7, #7]
 8017284:	4928      	ldr	r1, [pc, #160]	; (8017328 <etharp_output_to_arp_index+0x124>)
 8017286:	4613      	mov	r3, r2
 8017288:	005b      	lsls	r3, r3, #1
 801728a:	4413      	add	r3, r2
 801728c:	00db      	lsls	r3, r3, #3
 801728e:	440b      	add	r3, r1
 8017290:	3314      	adds	r3, #20
 8017292:	2203      	movs	r2, #3
 8017294:	701a      	strb	r2, [r3, #0]
 8017296:	e02d      	b.n	80172f4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017298:	79fa      	ldrb	r2, [r7, #7]
 801729a:	4923      	ldr	r1, [pc, #140]	; (8017328 <etharp_output_to_arp_index+0x124>)
 801729c:	4613      	mov	r3, r2
 801729e:	005b      	lsls	r3, r3, #1
 80172a0:	4413      	add	r3, r2
 80172a2:	00db      	lsls	r3, r3, #3
 80172a4:	440b      	add	r3, r1
 80172a6:	3312      	adds	r3, #18
 80172a8:	881b      	ldrh	r3, [r3, #0]
 80172aa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80172ae:	d321      	bcc.n	80172f4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80172b0:	79fa      	ldrb	r2, [r7, #7]
 80172b2:	4613      	mov	r3, r2
 80172b4:	005b      	lsls	r3, r3, #1
 80172b6:	4413      	add	r3, r2
 80172b8:	00db      	lsls	r3, r3, #3
 80172ba:	4a1b      	ldr	r2, [pc, #108]	; (8017328 <etharp_output_to_arp_index+0x124>)
 80172bc:	4413      	add	r3, r2
 80172be:	1d19      	adds	r1, r3, #4
 80172c0:	79fa      	ldrb	r2, [r7, #7]
 80172c2:	4613      	mov	r3, r2
 80172c4:	005b      	lsls	r3, r3, #1
 80172c6:	4413      	add	r3, r2
 80172c8:	00db      	lsls	r3, r3, #3
 80172ca:	3308      	adds	r3, #8
 80172cc:	4a16      	ldr	r2, [pc, #88]	; (8017328 <etharp_output_to_arp_index+0x124>)
 80172ce:	4413      	add	r3, r2
 80172d0:	3304      	adds	r3, #4
 80172d2:	461a      	mov	r2, r3
 80172d4:	68f8      	ldr	r0, [r7, #12]
 80172d6:	f000 fafb 	bl	80178d0 <etharp_request_dst>
 80172da:	4603      	mov	r3, r0
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d109      	bne.n	80172f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80172e0:	79fa      	ldrb	r2, [r7, #7]
 80172e2:	4911      	ldr	r1, [pc, #68]	; (8017328 <etharp_output_to_arp_index+0x124>)
 80172e4:	4613      	mov	r3, r2
 80172e6:	005b      	lsls	r3, r3, #1
 80172e8:	4413      	add	r3, r2
 80172ea:	00db      	lsls	r3, r3, #3
 80172ec:	440b      	add	r3, r1
 80172ee:	3314      	adds	r3, #20
 80172f0:	2203      	movs	r2, #3
 80172f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80172fa:	79fa      	ldrb	r2, [r7, #7]
 80172fc:	4613      	mov	r3, r2
 80172fe:	005b      	lsls	r3, r3, #1
 8017300:	4413      	add	r3, r2
 8017302:	00db      	lsls	r3, r3, #3
 8017304:	3308      	adds	r3, #8
 8017306:	4a08      	ldr	r2, [pc, #32]	; (8017328 <etharp_output_to_arp_index+0x124>)
 8017308:	4413      	add	r3, r2
 801730a:	3304      	adds	r3, #4
 801730c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017310:	9200      	str	r2, [sp, #0]
 8017312:	460a      	mov	r2, r1
 8017314:	68b9      	ldr	r1, [r7, #8]
 8017316:	68f8      	ldr	r0, [r7, #12]
 8017318:	f001 fe66 	bl	8018fe8 <ethernet_output>
 801731c:	4603      	mov	r3, r0
}
 801731e:	4618      	mov	r0, r3
 8017320:	3710      	adds	r7, #16
 8017322:	46bd      	mov	sp, r7
 8017324:	bd80      	pop	{r7, pc}
 8017326:	bf00      	nop
 8017328:	20007130 	.word	0x20007130
 801732c:	0801e73c 	.word	0x0801e73c
 8017330:	0801e8ac 	.word	0x0801e8ac
 8017334:	0801e7b4 	.word	0x0801e7b4

08017338 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b08a      	sub	sp, #40	; 0x28
 801733c:	af02      	add	r7, sp, #8
 801733e:	60f8      	str	r0, [r7, #12]
 8017340:	60b9      	str	r1, [r7, #8]
 8017342:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d106      	bne.n	801735c <etharp_output+0x24>
 801734e:	4b73      	ldr	r3, [pc, #460]	; (801751c <etharp_output+0x1e4>)
 8017350:	f240 321e 	movw	r2, #798	; 0x31e
 8017354:	4972      	ldr	r1, [pc, #456]	; (8017520 <etharp_output+0x1e8>)
 8017356:	4873      	ldr	r0, [pc, #460]	; (8017524 <etharp_output+0x1ec>)
 8017358:	f002 fbca 	bl	8019af0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d106      	bne.n	8017370 <etharp_output+0x38>
 8017362:	4b6e      	ldr	r3, [pc, #440]	; (801751c <etharp_output+0x1e4>)
 8017364:	f240 321f 	movw	r2, #799	; 0x31f
 8017368:	496f      	ldr	r1, [pc, #444]	; (8017528 <etharp_output+0x1f0>)
 801736a:	486e      	ldr	r0, [pc, #440]	; (8017524 <etharp_output+0x1ec>)
 801736c:	f002 fbc0 	bl	8019af0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d106      	bne.n	8017384 <etharp_output+0x4c>
 8017376:	4b69      	ldr	r3, [pc, #420]	; (801751c <etharp_output+0x1e4>)
 8017378:	f44f 7248 	mov.w	r2, #800	; 0x320
 801737c:	496b      	ldr	r1, [pc, #428]	; (801752c <etharp_output+0x1f4>)
 801737e:	4869      	ldr	r0, [pc, #420]	; (8017524 <etharp_output+0x1ec>)
 8017380:	f002 fbb6 	bl	8019af0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	68f9      	ldr	r1, [r7, #12]
 801738a:	4618      	mov	r0, r3
 801738c:	f000 ff1e 	bl	80181cc <ip4_addr_isbroadcast_u32>
 8017390:	4603      	mov	r3, r0
 8017392:	2b00      	cmp	r3, #0
 8017394:	d002      	beq.n	801739c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017396:	4b66      	ldr	r3, [pc, #408]	; (8017530 <etharp_output+0x1f8>)
 8017398:	61fb      	str	r3, [r7, #28]
 801739a:	e0af      	b.n	80174fc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173a4:	2be0      	cmp	r3, #224	; 0xe0
 80173a6:	d118      	bne.n	80173da <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80173a8:	2301      	movs	r3, #1
 80173aa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80173ac:	2300      	movs	r3, #0
 80173ae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80173b0:	235e      	movs	r3, #94	; 0x5e
 80173b2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	3301      	adds	r3, #1
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80173be:	b2db      	uxtb	r3, r3
 80173c0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	3302      	adds	r3, #2
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	3303      	adds	r3, #3
 80173ce:	781b      	ldrb	r3, [r3, #0]
 80173d0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80173d2:	f107 0310 	add.w	r3, r7, #16
 80173d6:	61fb      	str	r3, [r7, #28]
 80173d8:	e090      	b.n	80174fc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	3304      	adds	r3, #4
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	405a      	eors	r2, r3
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	3308      	adds	r3, #8
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	4013      	ands	r3, r2
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d012      	beq.n	8017418 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80173f8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80173fc:	4293      	cmp	r3, r2
 80173fe:	d00b      	beq.n	8017418 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	330c      	adds	r3, #12
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d003      	beq.n	8017412 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	330c      	adds	r3, #12
 801740e:	61bb      	str	r3, [r7, #24]
 8017410:	e002      	b.n	8017418 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017412:	f06f 0303 	mvn.w	r3, #3
 8017416:	e07d      	b.n	8017514 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017418:	4b46      	ldr	r3, [pc, #280]	; (8017534 <etharp_output+0x1fc>)
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	4619      	mov	r1, r3
 801741e:	4a46      	ldr	r2, [pc, #280]	; (8017538 <etharp_output+0x200>)
 8017420:	460b      	mov	r3, r1
 8017422:	005b      	lsls	r3, r3, #1
 8017424:	440b      	add	r3, r1
 8017426:	00db      	lsls	r3, r3, #3
 8017428:	4413      	add	r3, r2
 801742a:	3314      	adds	r3, #20
 801742c:	781b      	ldrb	r3, [r3, #0]
 801742e:	2b01      	cmp	r3, #1
 8017430:	d925      	bls.n	801747e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017432:	4b40      	ldr	r3, [pc, #256]	; (8017534 <etharp_output+0x1fc>)
 8017434:	781b      	ldrb	r3, [r3, #0]
 8017436:	4619      	mov	r1, r3
 8017438:	4a3f      	ldr	r2, [pc, #252]	; (8017538 <etharp_output+0x200>)
 801743a:	460b      	mov	r3, r1
 801743c:	005b      	lsls	r3, r3, #1
 801743e:	440b      	add	r3, r1
 8017440:	00db      	lsls	r3, r3, #3
 8017442:	4413      	add	r3, r2
 8017444:	3308      	adds	r3, #8
 8017446:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017448:	68fa      	ldr	r2, [r7, #12]
 801744a:	429a      	cmp	r2, r3
 801744c:	d117      	bne.n	801747e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801744e:	69bb      	ldr	r3, [r7, #24]
 8017450:	681a      	ldr	r2, [r3, #0]
 8017452:	4b38      	ldr	r3, [pc, #224]	; (8017534 <etharp_output+0x1fc>)
 8017454:	781b      	ldrb	r3, [r3, #0]
 8017456:	4618      	mov	r0, r3
 8017458:	4937      	ldr	r1, [pc, #220]	; (8017538 <etharp_output+0x200>)
 801745a:	4603      	mov	r3, r0
 801745c:	005b      	lsls	r3, r3, #1
 801745e:	4403      	add	r3, r0
 8017460:	00db      	lsls	r3, r3, #3
 8017462:	440b      	add	r3, r1
 8017464:	3304      	adds	r3, #4
 8017466:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017468:	429a      	cmp	r2, r3
 801746a:	d108      	bne.n	801747e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801746c:	4b31      	ldr	r3, [pc, #196]	; (8017534 <etharp_output+0x1fc>)
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	461a      	mov	r2, r3
 8017472:	68b9      	ldr	r1, [r7, #8]
 8017474:	68f8      	ldr	r0, [r7, #12]
 8017476:	f7ff fec5 	bl	8017204 <etharp_output_to_arp_index>
 801747a:	4603      	mov	r3, r0
 801747c:	e04a      	b.n	8017514 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801747e:	2300      	movs	r3, #0
 8017480:	75fb      	strb	r3, [r7, #23]
 8017482:	e031      	b.n	80174e8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017484:	7dfa      	ldrb	r2, [r7, #23]
 8017486:	492c      	ldr	r1, [pc, #176]	; (8017538 <etharp_output+0x200>)
 8017488:	4613      	mov	r3, r2
 801748a:	005b      	lsls	r3, r3, #1
 801748c:	4413      	add	r3, r2
 801748e:	00db      	lsls	r3, r3, #3
 8017490:	440b      	add	r3, r1
 8017492:	3314      	adds	r3, #20
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	2b01      	cmp	r3, #1
 8017498:	d923      	bls.n	80174e2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801749a:	7dfa      	ldrb	r2, [r7, #23]
 801749c:	4926      	ldr	r1, [pc, #152]	; (8017538 <etharp_output+0x200>)
 801749e:	4613      	mov	r3, r2
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	4413      	add	r3, r2
 80174a4:	00db      	lsls	r3, r3, #3
 80174a6:	440b      	add	r3, r1
 80174a8:	3308      	adds	r3, #8
 80174aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80174ac:	68fa      	ldr	r2, [r7, #12]
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d117      	bne.n	80174e2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80174b2:	69bb      	ldr	r3, [r7, #24]
 80174b4:	6819      	ldr	r1, [r3, #0]
 80174b6:	7dfa      	ldrb	r2, [r7, #23]
 80174b8:	481f      	ldr	r0, [pc, #124]	; (8017538 <etharp_output+0x200>)
 80174ba:	4613      	mov	r3, r2
 80174bc:	005b      	lsls	r3, r3, #1
 80174be:	4413      	add	r3, r2
 80174c0:	00db      	lsls	r3, r3, #3
 80174c2:	4403      	add	r3, r0
 80174c4:	3304      	adds	r3, #4
 80174c6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80174c8:	4299      	cmp	r1, r3
 80174ca:	d10a      	bne.n	80174e2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80174cc:	4a19      	ldr	r2, [pc, #100]	; (8017534 <etharp_output+0x1fc>)
 80174ce:	7dfb      	ldrb	r3, [r7, #23]
 80174d0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80174d2:	7dfb      	ldrb	r3, [r7, #23]
 80174d4:	461a      	mov	r2, r3
 80174d6:	68b9      	ldr	r1, [r7, #8]
 80174d8:	68f8      	ldr	r0, [r7, #12]
 80174da:	f7ff fe93 	bl	8017204 <etharp_output_to_arp_index>
 80174de:	4603      	mov	r3, r0
 80174e0:	e018      	b.n	8017514 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80174e2:	7dfb      	ldrb	r3, [r7, #23]
 80174e4:	3301      	adds	r3, #1
 80174e6:	75fb      	strb	r3, [r7, #23]
 80174e8:	7dfb      	ldrb	r3, [r7, #23]
 80174ea:	2b09      	cmp	r3, #9
 80174ec:	d9ca      	bls.n	8017484 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80174ee:	68ba      	ldr	r2, [r7, #8]
 80174f0:	69b9      	ldr	r1, [r7, #24]
 80174f2:	68f8      	ldr	r0, [r7, #12]
 80174f4:	f000 f822 	bl	801753c <etharp_query>
 80174f8:	4603      	mov	r3, r0
 80174fa:	e00b      	b.n	8017514 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017506:	9300      	str	r3, [sp, #0]
 8017508:	69fb      	ldr	r3, [r7, #28]
 801750a:	68b9      	ldr	r1, [r7, #8]
 801750c:	68f8      	ldr	r0, [r7, #12]
 801750e:	f001 fd6b 	bl	8018fe8 <ethernet_output>
 8017512:	4603      	mov	r3, r0
}
 8017514:	4618      	mov	r0, r3
 8017516:	3720      	adds	r7, #32
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}
 801751c:	0801e73c 	.word	0x0801e73c
 8017520:	0801e88c 	.word	0x0801e88c
 8017524:	0801e7b4 	.word	0x0801e7b4
 8017528:	0801e8dc 	.word	0x0801e8dc
 801752c:	0801e87c 	.word	0x0801e87c
 8017530:	0801ef18 	.word	0x0801ef18
 8017534:	20007220 	.word	0x20007220
 8017538:	20007130 	.word	0x20007130

0801753c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b08c      	sub	sp, #48	; 0x30
 8017540:	af02      	add	r7, sp, #8
 8017542:	60f8      	str	r0, [r7, #12]
 8017544:	60b9      	str	r1, [r7, #8]
 8017546:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	3326      	adds	r3, #38	; 0x26
 801754c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801754e:	23ff      	movs	r3, #255	; 0xff
 8017550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017554:	2300      	movs	r3, #0
 8017556:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	68f9      	ldr	r1, [r7, #12]
 801755e:	4618      	mov	r0, r3
 8017560:	f000 fe34 	bl	80181cc <ip4_addr_isbroadcast_u32>
 8017564:	4603      	mov	r3, r0
 8017566:	2b00      	cmp	r3, #0
 8017568:	d10c      	bne.n	8017584 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801756a:	68bb      	ldr	r3, [r7, #8]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017572:	2be0      	cmp	r3, #224	; 0xe0
 8017574:	d006      	beq.n	8017584 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d003      	beq.n	8017584 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801757c:	68bb      	ldr	r3, [r7, #8]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d102      	bne.n	801758a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017584:	f06f 030f 	mvn.w	r3, #15
 8017588:	e101      	b.n	801778e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801758a:	68fa      	ldr	r2, [r7, #12]
 801758c:	2101      	movs	r1, #1
 801758e:	68b8      	ldr	r0, [r7, #8]
 8017590:	f7ff fb60 	bl	8016c54 <etharp_find_entry>
 8017594:	4603      	mov	r3, r0
 8017596:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017598:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801759c:	2b00      	cmp	r3, #0
 801759e:	da02      	bge.n	80175a6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80175a0:	8a7b      	ldrh	r3, [r7, #18]
 80175a2:	b25b      	sxtb	r3, r3
 80175a4:	e0f3      	b.n	801778e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80175a6:	8a7b      	ldrh	r3, [r7, #18]
 80175a8:	2b7e      	cmp	r3, #126	; 0x7e
 80175aa:	d906      	bls.n	80175ba <etharp_query+0x7e>
 80175ac:	4b7a      	ldr	r3, [pc, #488]	; (8017798 <etharp_query+0x25c>)
 80175ae:	f240 32c1 	movw	r2, #961	; 0x3c1
 80175b2:	497a      	ldr	r1, [pc, #488]	; (801779c <etharp_query+0x260>)
 80175b4:	487a      	ldr	r0, [pc, #488]	; (80177a0 <etharp_query+0x264>)
 80175b6:	f002 fa9b 	bl	8019af0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80175ba:	8a7b      	ldrh	r3, [r7, #18]
 80175bc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80175be:	7c7a      	ldrb	r2, [r7, #17]
 80175c0:	4978      	ldr	r1, [pc, #480]	; (80177a4 <etharp_query+0x268>)
 80175c2:	4613      	mov	r3, r2
 80175c4:	005b      	lsls	r3, r3, #1
 80175c6:	4413      	add	r3, r2
 80175c8:	00db      	lsls	r3, r3, #3
 80175ca:	440b      	add	r3, r1
 80175cc:	3314      	adds	r3, #20
 80175ce:	781b      	ldrb	r3, [r3, #0]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d115      	bne.n	8017600 <etharp_query+0xc4>
    is_new_entry = 1;
 80175d4:	2301      	movs	r3, #1
 80175d6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80175d8:	7c7a      	ldrb	r2, [r7, #17]
 80175da:	4972      	ldr	r1, [pc, #456]	; (80177a4 <etharp_query+0x268>)
 80175dc:	4613      	mov	r3, r2
 80175de:	005b      	lsls	r3, r3, #1
 80175e0:	4413      	add	r3, r2
 80175e2:	00db      	lsls	r3, r3, #3
 80175e4:	440b      	add	r3, r1
 80175e6:	3314      	adds	r3, #20
 80175e8:	2201      	movs	r2, #1
 80175ea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80175ec:	7c7a      	ldrb	r2, [r7, #17]
 80175ee:	496d      	ldr	r1, [pc, #436]	; (80177a4 <etharp_query+0x268>)
 80175f0:	4613      	mov	r3, r2
 80175f2:	005b      	lsls	r3, r3, #1
 80175f4:	4413      	add	r3, r2
 80175f6:	00db      	lsls	r3, r3, #3
 80175f8:	440b      	add	r3, r1
 80175fa:	3308      	adds	r3, #8
 80175fc:	68fa      	ldr	r2, [r7, #12]
 80175fe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017600:	7c7a      	ldrb	r2, [r7, #17]
 8017602:	4968      	ldr	r1, [pc, #416]	; (80177a4 <etharp_query+0x268>)
 8017604:	4613      	mov	r3, r2
 8017606:	005b      	lsls	r3, r3, #1
 8017608:	4413      	add	r3, r2
 801760a:	00db      	lsls	r3, r3, #3
 801760c:	440b      	add	r3, r1
 801760e:	3314      	adds	r3, #20
 8017610:	781b      	ldrb	r3, [r3, #0]
 8017612:	2b01      	cmp	r3, #1
 8017614:	d011      	beq.n	801763a <etharp_query+0xfe>
 8017616:	7c7a      	ldrb	r2, [r7, #17]
 8017618:	4962      	ldr	r1, [pc, #392]	; (80177a4 <etharp_query+0x268>)
 801761a:	4613      	mov	r3, r2
 801761c:	005b      	lsls	r3, r3, #1
 801761e:	4413      	add	r3, r2
 8017620:	00db      	lsls	r3, r3, #3
 8017622:	440b      	add	r3, r1
 8017624:	3314      	adds	r3, #20
 8017626:	781b      	ldrb	r3, [r3, #0]
 8017628:	2b01      	cmp	r3, #1
 801762a:	d806      	bhi.n	801763a <etharp_query+0xfe>
 801762c:	4b5a      	ldr	r3, [pc, #360]	; (8017798 <etharp_query+0x25c>)
 801762e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017632:	495d      	ldr	r1, [pc, #372]	; (80177a8 <etharp_query+0x26c>)
 8017634:	485a      	ldr	r0, [pc, #360]	; (80177a0 <etharp_query+0x264>)
 8017636:	f002 fa5b 	bl	8019af0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801763a:	6a3b      	ldr	r3, [r7, #32]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d102      	bne.n	8017646 <etharp_query+0x10a>
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d10c      	bne.n	8017660 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017646:	68b9      	ldr	r1, [r7, #8]
 8017648:	68f8      	ldr	r0, [r7, #12]
 801764a:	f000 f963 	bl	8017914 <etharp_request>
 801764e:	4603      	mov	r3, r0
 8017650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d102      	bne.n	8017660 <etharp_query+0x124>
      return result;
 801765a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801765e:	e096      	b.n	801778e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d106      	bne.n	8017674 <etharp_query+0x138>
 8017666:	4b4c      	ldr	r3, [pc, #304]	; (8017798 <etharp_query+0x25c>)
 8017668:	f240 32e1 	movw	r2, #993	; 0x3e1
 801766c:	494f      	ldr	r1, [pc, #316]	; (80177ac <etharp_query+0x270>)
 801766e:	484c      	ldr	r0, [pc, #304]	; (80177a0 <etharp_query+0x264>)
 8017670:	f002 fa3e 	bl	8019af0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017674:	7c7a      	ldrb	r2, [r7, #17]
 8017676:	494b      	ldr	r1, [pc, #300]	; (80177a4 <etharp_query+0x268>)
 8017678:	4613      	mov	r3, r2
 801767a:	005b      	lsls	r3, r3, #1
 801767c:	4413      	add	r3, r2
 801767e:	00db      	lsls	r3, r3, #3
 8017680:	440b      	add	r3, r1
 8017682:	3314      	adds	r3, #20
 8017684:	781b      	ldrb	r3, [r3, #0]
 8017686:	2b01      	cmp	r3, #1
 8017688:	d917      	bls.n	80176ba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801768a:	4a49      	ldr	r2, [pc, #292]	; (80177b0 <etharp_query+0x274>)
 801768c:	7c7b      	ldrb	r3, [r7, #17]
 801768e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017690:	7c7a      	ldrb	r2, [r7, #17]
 8017692:	4613      	mov	r3, r2
 8017694:	005b      	lsls	r3, r3, #1
 8017696:	4413      	add	r3, r2
 8017698:	00db      	lsls	r3, r3, #3
 801769a:	3308      	adds	r3, #8
 801769c:	4a41      	ldr	r2, [pc, #260]	; (80177a4 <etharp_query+0x268>)
 801769e:	4413      	add	r3, r2
 80176a0:	3304      	adds	r3, #4
 80176a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80176a6:	9200      	str	r2, [sp, #0]
 80176a8:	697a      	ldr	r2, [r7, #20]
 80176aa:	6879      	ldr	r1, [r7, #4]
 80176ac:	68f8      	ldr	r0, [r7, #12]
 80176ae:	f001 fc9b 	bl	8018fe8 <ethernet_output>
 80176b2:	4603      	mov	r3, r0
 80176b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80176b8:	e067      	b.n	801778a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80176ba:	7c7a      	ldrb	r2, [r7, #17]
 80176bc:	4939      	ldr	r1, [pc, #228]	; (80177a4 <etharp_query+0x268>)
 80176be:	4613      	mov	r3, r2
 80176c0:	005b      	lsls	r3, r3, #1
 80176c2:	4413      	add	r3, r2
 80176c4:	00db      	lsls	r3, r3, #3
 80176c6:	440b      	add	r3, r1
 80176c8:	3314      	adds	r3, #20
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	2b01      	cmp	r3, #1
 80176ce:	d15c      	bne.n	801778a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80176d0:	2300      	movs	r3, #0
 80176d2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80176d8:	e01c      	b.n	8017714 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80176da:	69fb      	ldr	r3, [r7, #28]
 80176dc:	895a      	ldrh	r2, [r3, #10]
 80176de:	69fb      	ldr	r3, [r7, #28]
 80176e0:	891b      	ldrh	r3, [r3, #8]
 80176e2:	429a      	cmp	r2, r3
 80176e4:	d10a      	bne.n	80176fc <etharp_query+0x1c0>
 80176e6:	69fb      	ldr	r3, [r7, #28]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d006      	beq.n	80176fc <etharp_query+0x1c0>
 80176ee:	4b2a      	ldr	r3, [pc, #168]	; (8017798 <etharp_query+0x25c>)
 80176f0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80176f4:	492f      	ldr	r1, [pc, #188]	; (80177b4 <etharp_query+0x278>)
 80176f6:	482a      	ldr	r0, [pc, #168]	; (80177a0 <etharp_query+0x264>)
 80176f8:	f002 f9fa 	bl	8019af0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80176fc:	69fb      	ldr	r3, [r7, #28]
 80176fe:	7b1b      	ldrb	r3, [r3, #12]
 8017700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017704:	2b00      	cmp	r3, #0
 8017706:	d002      	beq.n	801770e <etharp_query+0x1d2>
        copy_needed = 1;
 8017708:	2301      	movs	r3, #1
 801770a:	61bb      	str	r3, [r7, #24]
        break;
 801770c:	e005      	b.n	801771a <etharp_query+0x1de>
      }
      p = p->next;
 801770e:	69fb      	ldr	r3, [r7, #28]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017714:	69fb      	ldr	r3, [r7, #28]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d1df      	bne.n	80176da <etharp_query+0x19e>
    }
    if (copy_needed) {
 801771a:	69bb      	ldr	r3, [r7, #24]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d007      	beq.n	8017730 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017720:	687a      	ldr	r2, [r7, #4]
 8017722:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017726:	200e      	movs	r0, #14
 8017728:	f7f9 fd66 	bl	80111f8 <pbuf_clone>
 801772c:	61f8      	str	r0, [r7, #28]
 801772e:	e004      	b.n	801773a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017734:	69f8      	ldr	r0, [r7, #28]
 8017736:	f7f9 fba3 	bl	8010e80 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801773a:	69fb      	ldr	r3, [r7, #28]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d021      	beq.n	8017784 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017740:	7c7a      	ldrb	r2, [r7, #17]
 8017742:	4918      	ldr	r1, [pc, #96]	; (80177a4 <etharp_query+0x268>)
 8017744:	4613      	mov	r3, r2
 8017746:	005b      	lsls	r3, r3, #1
 8017748:	4413      	add	r3, r2
 801774a:	00db      	lsls	r3, r3, #3
 801774c:	440b      	add	r3, r1
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d00a      	beq.n	801776a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017754:	7c7a      	ldrb	r2, [r7, #17]
 8017756:	4913      	ldr	r1, [pc, #76]	; (80177a4 <etharp_query+0x268>)
 8017758:	4613      	mov	r3, r2
 801775a:	005b      	lsls	r3, r3, #1
 801775c:	4413      	add	r3, r2
 801775e:	00db      	lsls	r3, r3, #3
 8017760:	440b      	add	r3, r1
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	4618      	mov	r0, r3
 8017766:	f7f9 faeb 	bl	8010d40 <pbuf_free>
      }
      arp_table[i].q = p;
 801776a:	7c7a      	ldrb	r2, [r7, #17]
 801776c:	490d      	ldr	r1, [pc, #52]	; (80177a4 <etharp_query+0x268>)
 801776e:	4613      	mov	r3, r2
 8017770:	005b      	lsls	r3, r3, #1
 8017772:	4413      	add	r3, r2
 8017774:	00db      	lsls	r3, r3, #3
 8017776:	440b      	add	r3, r1
 8017778:	69fa      	ldr	r2, [r7, #28]
 801777a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801777c:	2300      	movs	r3, #0
 801777e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017782:	e002      	b.n	801778a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017784:	23ff      	movs	r3, #255	; 0xff
 8017786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801778a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801778e:	4618      	mov	r0, r3
 8017790:	3728      	adds	r7, #40	; 0x28
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}
 8017796:	bf00      	nop
 8017798:	0801e73c 	.word	0x0801e73c
 801779c:	0801e8e8 	.word	0x0801e8e8
 80177a0:	0801e7b4 	.word	0x0801e7b4
 80177a4:	20007130 	.word	0x20007130
 80177a8:	0801e8f8 	.word	0x0801e8f8
 80177ac:	0801e8dc 	.word	0x0801e8dc
 80177b0:	20007220 	.word	0x20007220
 80177b4:	0801e920 	.word	0x0801e920

080177b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b08a      	sub	sp, #40	; 0x28
 80177bc:	af02      	add	r7, sp, #8
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	60b9      	str	r1, [r7, #8]
 80177c2:	607a      	str	r2, [r7, #4]
 80177c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80177c6:	2300      	movs	r3, #0
 80177c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d106      	bne.n	80177de <etharp_raw+0x26>
 80177d0:	4b3a      	ldr	r3, [pc, #232]	; (80178bc <etharp_raw+0x104>)
 80177d2:	f240 4257 	movw	r2, #1111	; 0x457
 80177d6:	493a      	ldr	r1, [pc, #232]	; (80178c0 <etharp_raw+0x108>)
 80177d8:	483a      	ldr	r0, [pc, #232]	; (80178c4 <etharp_raw+0x10c>)
 80177da:	f002 f989 	bl	8019af0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80177de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80177e2:	211c      	movs	r1, #28
 80177e4:	200e      	movs	r0, #14
 80177e6:	f7f8 ffc7 	bl	8010778 <pbuf_alloc>
 80177ea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80177ec:	69bb      	ldr	r3, [r7, #24]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d102      	bne.n	80177f8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80177f2:	f04f 33ff 	mov.w	r3, #4294967295
 80177f6:	e05d      	b.n	80178b4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80177f8:	69bb      	ldr	r3, [r7, #24]
 80177fa:	895b      	ldrh	r3, [r3, #10]
 80177fc:	2b1b      	cmp	r3, #27
 80177fe:	d806      	bhi.n	801780e <etharp_raw+0x56>
 8017800:	4b2e      	ldr	r3, [pc, #184]	; (80178bc <etharp_raw+0x104>)
 8017802:	f240 4262 	movw	r2, #1122	; 0x462
 8017806:	4930      	ldr	r1, [pc, #192]	; (80178c8 <etharp_raw+0x110>)
 8017808:	482e      	ldr	r0, [pc, #184]	; (80178c4 <etharp_raw+0x10c>)
 801780a:	f002 f971 	bl	8019af0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801780e:	69bb      	ldr	r3, [r7, #24]
 8017810:	685b      	ldr	r3, [r3, #4]
 8017812:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017814:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017816:	4618      	mov	r0, r3
 8017818:	f7f7 feae 	bl	800f578 <lwip_htons>
 801781c:	4603      	mov	r3, r0
 801781e:	461a      	mov	r2, r3
 8017820:	697b      	ldr	r3, [r7, #20]
 8017822:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801782a:	2b06      	cmp	r3, #6
 801782c:	d006      	beq.n	801783c <etharp_raw+0x84>
 801782e:	4b23      	ldr	r3, [pc, #140]	; (80178bc <etharp_raw+0x104>)
 8017830:	f240 4269 	movw	r2, #1129	; 0x469
 8017834:	4925      	ldr	r1, [pc, #148]	; (80178cc <etharp_raw+0x114>)
 8017836:	4823      	ldr	r0, [pc, #140]	; (80178c4 <etharp_raw+0x10c>)
 8017838:	f002 f95a 	bl	8019af0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	3308      	adds	r3, #8
 8017840:	2206      	movs	r2, #6
 8017842:	6839      	ldr	r1, [r7, #0]
 8017844:	4618      	mov	r0, r3
 8017846:	f002 fb22 	bl	8019e8e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801784a:	697b      	ldr	r3, [r7, #20]
 801784c:	3312      	adds	r3, #18
 801784e:	2206      	movs	r2, #6
 8017850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017852:	4618      	mov	r0, r3
 8017854:	f002 fb1b 	bl	8019e8e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017858:	697b      	ldr	r3, [r7, #20]
 801785a:	330e      	adds	r3, #14
 801785c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801785e:	6812      	ldr	r2, [r2, #0]
 8017860:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017862:	697b      	ldr	r3, [r7, #20]
 8017864:	3318      	adds	r3, #24
 8017866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017868:	6812      	ldr	r2, [r2, #0]
 801786a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801786c:	697b      	ldr	r3, [r7, #20]
 801786e:	2200      	movs	r2, #0
 8017870:	701a      	strb	r2, [r3, #0]
 8017872:	2200      	movs	r2, #0
 8017874:	f042 0201 	orr.w	r2, r2, #1
 8017878:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	2200      	movs	r2, #0
 801787e:	f042 0208 	orr.w	r2, r2, #8
 8017882:	709a      	strb	r2, [r3, #2]
 8017884:	2200      	movs	r2, #0
 8017886:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017888:	697b      	ldr	r3, [r7, #20]
 801788a:	2206      	movs	r2, #6
 801788c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801788e:	697b      	ldr	r3, [r7, #20]
 8017890:	2204      	movs	r2, #4
 8017892:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017894:	f640 0306 	movw	r3, #2054	; 0x806
 8017898:	9300      	str	r3, [sp, #0]
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	68ba      	ldr	r2, [r7, #8]
 801789e:	69b9      	ldr	r1, [r7, #24]
 80178a0:	68f8      	ldr	r0, [r7, #12]
 80178a2:	f001 fba1 	bl	8018fe8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80178a6:	69b8      	ldr	r0, [r7, #24]
 80178a8:	f7f9 fa4a 	bl	8010d40 <pbuf_free>
  p = NULL;
 80178ac:	2300      	movs	r3, #0
 80178ae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80178b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3720      	adds	r7, #32
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}
 80178bc:	0801e73c 	.word	0x0801e73c
 80178c0:	0801e88c 	.word	0x0801e88c
 80178c4:	0801e7b4 	.word	0x0801e7b4
 80178c8:	0801e93c 	.word	0x0801e93c
 80178cc:	0801e970 	.word	0x0801e970

080178d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b088      	sub	sp, #32
 80178d4:	af04      	add	r7, sp, #16
 80178d6:	60f8      	str	r0, [r7, #12]
 80178d8:	60b9      	str	r1, [r7, #8]
 80178da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80178ec:	2201      	movs	r2, #1
 80178ee:	9203      	str	r2, [sp, #12]
 80178f0:	68ba      	ldr	r2, [r7, #8]
 80178f2:	9202      	str	r2, [sp, #8]
 80178f4:	4a06      	ldr	r2, [pc, #24]	; (8017910 <etharp_request_dst+0x40>)
 80178f6:	9201      	str	r2, [sp, #4]
 80178f8:	9300      	str	r3, [sp, #0]
 80178fa:	4603      	mov	r3, r0
 80178fc:	687a      	ldr	r2, [r7, #4]
 80178fe:	68f8      	ldr	r0, [r7, #12]
 8017900:	f7ff ff5a 	bl	80177b8 <etharp_raw>
 8017904:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017906:	4618      	mov	r0, r3
 8017908:	3710      	adds	r7, #16
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}
 801790e:	bf00      	nop
 8017910:	0801ef20 	.word	0x0801ef20

08017914 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b082      	sub	sp, #8
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
 801791c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801791e:	4a05      	ldr	r2, [pc, #20]	; (8017934 <etharp_request+0x20>)
 8017920:	6839      	ldr	r1, [r7, #0]
 8017922:	6878      	ldr	r0, [r7, #4]
 8017924:	f7ff ffd4 	bl	80178d0 <etharp_request_dst>
 8017928:	4603      	mov	r3, r0
}
 801792a:	4618      	mov	r0, r3
 801792c:	3708      	adds	r7, #8
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}
 8017932:	bf00      	nop
 8017934:	0801ef18 	.word	0x0801ef18

08017938 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b08e      	sub	sp, #56	; 0x38
 801793c:	af04      	add	r7, sp, #16
 801793e:	6078      	str	r0, [r7, #4]
 8017940:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017942:	4b87      	ldr	r3, [pc, #540]	; (8017b60 <icmp_input+0x228>)
 8017944:	689b      	ldr	r3, [r3, #8]
 8017946:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801794a:	781b      	ldrb	r3, [r3, #0]
 801794c:	f003 030f 	and.w	r3, r3, #15
 8017950:	b2db      	uxtb	r3, r3
 8017952:	009b      	lsls	r3, r3, #2
 8017954:	b2db      	uxtb	r3, r3
 8017956:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801795a:	2b13      	cmp	r3, #19
 801795c:	f240 80e8 	bls.w	8017b30 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	895b      	ldrh	r3, [r3, #10]
 8017964:	2b03      	cmp	r3, #3
 8017966:	f240 80e5 	bls.w	8017b34 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	685b      	ldr	r3, [r3, #4]
 801796e:	781b      	ldrb	r3, [r3, #0]
 8017970:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017974:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017978:	2b00      	cmp	r3, #0
 801797a:	f000 80d2 	beq.w	8017b22 <icmp_input+0x1ea>
 801797e:	2b08      	cmp	r3, #8
 8017980:	f040 80d2 	bne.w	8017b28 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017984:	4b77      	ldr	r3, [pc, #476]	; (8017b64 <icmp_input+0x22c>)
 8017986:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017988:	4b75      	ldr	r3, [pc, #468]	; (8017b60 <icmp_input+0x228>)
 801798a:	695b      	ldr	r3, [r3, #20]
 801798c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017990:	2be0      	cmp	r3, #224	; 0xe0
 8017992:	f000 80d6 	beq.w	8017b42 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017996:	4b72      	ldr	r3, [pc, #456]	; (8017b60 <icmp_input+0x228>)
 8017998:	695b      	ldr	r3, [r3, #20]
 801799a:	4a71      	ldr	r2, [pc, #452]	; (8017b60 <icmp_input+0x228>)
 801799c:	6812      	ldr	r2, [r2, #0]
 801799e:	4611      	mov	r1, r2
 80179a0:	4618      	mov	r0, r3
 80179a2:	f000 fc13 	bl	80181cc <ip4_addr_isbroadcast_u32>
 80179a6:	4603      	mov	r3, r0
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	f040 80cc 	bne.w	8017b46 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	891b      	ldrh	r3, [r3, #8]
 80179b2:	2b07      	cmp	r3, #7
 80179b4:	f240 80c0 	bls.w	8017b38 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80179b8:	6878      	ldr	r0, [r7, #4]
 80179ba:	f7f7 fe7a 	bl	800f6b2 <inet_chksum_pbuf>
 80179be:	4603      	mov	r3, r0
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d003      	beq.n	80179cc <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80179c4:	6878      	ldr	r0, [r7, #4]
 80179c6:	f7f9 f9bb 	bl	8010d40 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80179ca:	e0c5      	b.n	8017b58 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80179cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179ce:	330e      	adds	r3, #14
 80179d0:	4619      	mov	r1, r3
 80179d2:	6878      	ldr	r0, [r7, #4]
 80179d4:	f7f9 f91e 	bl	8010c14 <pbuf_add_header>
 80179d8:	4603      	mov	r3, r0
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d04b      	beq.n	8017a76 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	891a      	ldrh	r2, [r3, #8]
 80179e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179e4:	4413      	add	r3, r2
 80179e6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	891b      	ldrh	r3, [r3, #8]
 80179ec:	8b7a      	ldrh	r2, [r7, #26]
 80179ee:	429a      	cmp	r2, r3
 80179f0:	f0c0 80ab 	bcc.w	8017b4a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80179f4:	8b7b      	ldrh	r3, [r7, #26]
 80179f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80179fa:	4619      	mov	r1, r3
 80179fc:	200e      	movs	r0, #14
 80179fe:	f7f8 febb 	bl	8010778 <pbuf_alloc>
 8017a02:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017a04:	697b      	ldr	r3, [r7, #20]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	f000 80a1 	beq.w	8017b4e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017a0c:	697b      	ldr	r3, [r7, #20]
 8017a0e:	895b      	ldrh	r3, [r3, #10]
 8017a10:	461a      	mov	r2, r3
 8017a12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a14:	3308      	adds	r3, #8
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d203      	bcs.n	8017a22 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017a1a:	6978      	ldr	r0, [r7, #20]
 8017a1c:	f7f9 f990 	bl	8010d40 <pbuf_free>
          goto icmperr;
 8017a20:	e096      	b.n	8017b50 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017a22:	697b      	ldr	r3, [r7, #20]
 8017a24:	685b      	ldr	r3, [r3, #4]
 8017a26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f002 fa2f 	bl	8019e8e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a32:	4619      	mov	r1, r3
 8017a34:	6978      	ldr	r0, [r7, #20]
 8017a36:	f7f9 f8fd 	bl	8010c34 <pbuf_remove_header>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d009      	beq.n	8017a54 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017a40:	4b49      	ldr	r3, [pc, #292]	; (8017b68 <icmp_input+0x230>)
 8017a42:	22b6      	movs	r2, #182	; 0xb6
 8017a44:	4949      	ldr	r1, [pc, #292]	; (8017b6c <icmp_input+0x234>)
 8017a46:	484a      	ldr	r0, [pc, #296]	; (8017b70 <icmp_input+0x238>)
 8017a48:	f002 f852 	bl	8019af0 <iprintf>
          pbuf_free(r);
 8017a4c:	6978      	ldr	r0, [r7, #20]
 8017a4e:	f7f9 f977 	bl	8010d40 <pbuf_free>
          goto icmperr;
 8017a52:	e07d      	b.n	8017b50 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017a54:	6879      	ldr	r1, [r7, #4]
 8017a56:	6978      	ldr	r0, [r7, #20]
 8017a58:	f7f9 fa8a 	bl	8010f70 <pbuf_copy>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d003      	beq.n	8017a6a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017a62:	6978      	ldr	r0, [r7, #20]
 8017a64:	f7f9 f96c 	bl	8010d40 <pbuf_free>
          goto icmperr;
 8017a68:	e072      	b.n	8017b50 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017a6a:	6878      	ldr	r0, [r7, #4]
 8017a6c:	f7f9 f968 	bl	8010d40 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017a70:	697b      	ldr	r3, [r7, #20]
 8017a72:	607b      	str	r3, [r7, #4]
 8017a74:	e00f      	b.n	8017a96 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a78:	330e      	adds	r3, #14
 8017a7a:	4619      	mov	r1, r3
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7f9 f8d9 	bl	8010c34 <pbuf_remove_header>
 8017a82:	4603      	mov	r3, r0
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d006      	beq.n	8017a96 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017a88:	4b37      	ldr	r3, [pc, #220]	; (8017b68 <icmp_input+0x230>)
 8017a8a:	22c7      	movs	r2, #199	; 0xc7
 8017a8c:	4939      	ldr	r1, [pc, #228]	; (8017b74 <icmp_input+0x23c>)
 8017a8e:	4838      	ldr	r0, [pc, #224]	; (8017b70 <icmp_input+0x238>)
 8017a90:	f002 f82e 	bl	8019af0 <iprintf>
          goto icmperr;
 8017a94:	e05c      	b.n	8017b50 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	685b      	ldr	r3, [r3, #4]
 8017a9a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017a9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a9e:	4619      	mov	r1, r3
 8017aa0:	6878      	ldr	r0, [r7, #4]
 8017aa2:	f7f9 f8b7 	bl	8010c14 <pbuf_add_header>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d13c      	bne.n	8017b26 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	685b      	ldr	r3, [r3, #4]
 8017ab0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	681a      	ldr	r2, [r3, #0]
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017aba:	4b29      	ldr	r3, [pc, #164]	; (8017b60 <icmp_input+0x228>)
 8017abc:	691a      	ldr	r2, [r3, #16]
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017ac2:	693b      	ldr	r3, [r7, #16]
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017ac8:	693b      	ldr	r3, [r7, #16]
 8017aca:	885b      	ldrh	r3, [r3, #2]
 8017acc:	b29b      	uxth	r3, r3
 8017ace:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017ad2:	4293      	cmp	r3, r2
 8017ad4:	d907      	bls.n	8017ae6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017ad6:	693b      	ldr	r3, [r7, #16]
 8017ad8:	885b      	ldrh	r3, [r3, #2]
 8017ada:	b29b      	uxth	r3, r3
 8017adc:	3309      	adds	r3, #9
 8017ade:	b29a      	uxth	r2, r3
 8017ae0:	693b      	ldr	r3, [r7, #16]
 8017ae2:	805a      	strh	r2, [r3, #2]
 8017ae4:	e006      	b.n	8017af4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017ae6:	693b      	ldr	r3, [r7, #16]
 8017ae8:	885b      	ldrh	r3, [r3, #2]
 8017aea:	b29b      	uxth	r3, r3
 8017aec:	3308      	adds	r3, #8
 8017aee:	b29a      	uxth	r2, r3
 8017af0:	693b      	ldr	r3, [r7, #16]
 8017af2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	22ff      	movs	r2, #255	; 0xff
 8017af8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	2200      	movs	r2, #0
 8017afe:	729a      	strb	r2, [r3, #10]
 8017b00:	2200      	movs	r2, #0
 8017b02:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	9302      	str	r3, [sp, #8]
 8017b08:	2301      	movs	r3, #1
 8017b0a:	9301      	str	r3, [sp, #4]
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	9300      	str	r3, [sp, #0]
 8017b10:	23ff      	movs	r3, #255	; 0xff
 8017b12:	2200      	movs	r2, #0
 8017b14:	69f9      	ldr	r1, [r7, #28]
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	f000 fa80 	bl	801801c <ip4_output_if>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017b20:	e001      	b.n	8017b26 <icmp_input+0x1ee>
      break;
 8017b22:	bf00      	nop
 8017b24:	e000      	b.n	8017b28 <icmp_input+0x1f0>
      break;
 8017b26:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f7f9 f909 	bl	8010d40 <pbuf_free>
  return;
 8017b2e:	e013      	b.n	8017b58 <icmp_input+0x220>
    goto lenerr;
 8017b30:	bf00      	nop
 8017b32:	e002      	b.n	8017b3a <icmp_input+0x202>
    goto lenerr;
 8017b34:	bf00      	nop
 8017b36:	e000      	b.n	8017b3a <icmp_input+0x202>
        goto lenerr;
 8017b38:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017b3a:	6878      	ldr	r0, [r7, #4]
 8017b3c:	f7f9 f900 	bl	8010d40 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017b40:	e00a      	b.n	8017b58 <icmp_input+0x220>
        goto icmperr;
 8017b42:	bf00      	nop
 8017b44:	e004      	b.n	8017b50 <icmp_input+0x218>
        goto icmperr;
 8017b46:	bf00      	nop
 8017b48:	e002      	b.n	8017b50 <icmp_input+0x218>
          goto icmperr;
 8017b4a:	bf00      	nop
 8017b4c:	e000      	b.n	8017b50 <icmp_input+0x218>
          goto icmperr;
 8017b4e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017b50:	6878      	ldr	r0, [r7, #4]
 8017b52:	f7f9 f8f5 	bl	8010d40 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017b56:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017b58:	3728      	adds	r7, #40	; 0x28
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}
 8017b5e:	bf00      	nop
 8017b60:	200007f4 	.word	0x200007f4
 8017b64:	20000808 	.word	0x20000808
 8017b68:	0801e9b4 	.word	0x0801e9b4
 8017b6c:	0801e9ec 	.word	0x0801e9ec
 8017b70:	0801ea24 	.word	0x0801ea24
 8017b74:	0801ea4c 	.word	0x0801ea4c

08017b78 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b082      	sub	sp, #8
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
 8017b80:	460b      	mov	r3, r1
 8017b82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017b84:	78fb      	ldrb	r3, [r7, #3]
 8017b86:	461a      	mov	r2, r3
 8017b88:	2103      	movs	r1, #3
 8017b8a:	6878      	ldr	r0, [r7, #4]
 8017b8c:	f000 f814 	bl	8017bb8 <icmp_send_response>
}
 8017b90:	bf00      	nop
 8017b92:	3708      	adds	r7, #8
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}

08017b98 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b082      	sub	sp, #8
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	460b      	mov	r3, r1
 8017ba2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017ba4:	78fb      	ldrb	r3, [r7, #3]
 8017ba6:	461a      	mov	r2, r3
 8017ba8:	210b      	movs	r1, #11
 8017baa:	6878      	ldr	r0, [r7, #4]
 8017bac:	f000 f804 	bl	8017bb8 <icmp_send_response>
}
 8017bb0:	bf00      	nop
 8017bb2:	3708      	adds	r7, #8
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b08c      	sub	sp, #48	; 0x30
 8017bbc:	af04      	add	r7, sp, #16
 8017bbe:	6078      	str	r0, [r7, #4]
 8017bc0:	460b      	mov	r3, r1
 8017bc2:	70fb      	strb	r3, [r7, #3]
 8017bc4:	4613      	mov	r3, r2
 8017bc6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017bc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017bcc:	2124      	movs	r1, #36	; 0x24
 8017bce:	2022      	movs	r0, #34	; 0x22
 8017bd0:	f7f8 fdd2 	bl	8010778 <pbuf_alloc>
 8017bd4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017bd6:	69fb      	ldr	r3, [r7, #28]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d056      	beq.n	8017c8a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017bdc:	69fb      	ldr	r3, [r7, #28]
 8017bde:	895b      	ldrh	r3, [r3, #10]
 8017be0:	2b23      	cmp	r3, #35	; 0x23
 8017be2:	d806      	bhi.n	8017bf2 <icmp_send_response+0x3a>
 8017be4:	4b2b      	ldr	r3, [pc, #172]	; (8017c94 <icmp_send_response+0xdc>)
 8017be6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017bea:	492b      	ldr	r1, [pc, #172]	; (8017c98 <icmp_send_response+0xe0>)
 8017bec:	482b      	ldr	r0, [pc, #172]	; (8017c9c <icmp_send_response+0xe4>)
 8017bee:	f001 ff7f 	bl	8019af0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	685b      	ldr	r3, [r3, #4]
 8017bf6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017bf8:	69fb      	ldr	r3, [r7, #28]
 8017bfa:	685b      	ldr	r3, [r3, #4]
 8017bfc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017bfe:	697b      	ldr	r3, [r7, #20]
 8017c00:	78fa      	ldrb	r2, [r7, #3]
 8017c02:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017c04:	697b      	ldr	r3, [r7, #20]
 8017c06:	78ba      	ldrb	r2, [r7, #2]
 8017c08:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017c0a:	697b      	ldr	r3, [r7, #20]
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	711a      	strb	r2, [r3, #4]
 8017c10:	2200      	movs	r2, #0
 8017c12:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017c14:	697b      	ldr	r3, [r7, #20]
 8017c16:	2200      	movs	r2, #0
 8017c18:	719a      	strb	r2, [r3, #6]
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017c1e:	69fb      	ldr	r3, [r7, #28]
 8017c20:	685b      	ldr	r3, [r3, #4]
 8017c22:	f103 0008 	add.w	r0, r3, #8
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	685b      	ldr	r3, [r3, #4]
 8017c2a:	221c      	movs	r2, #28
 8017c2c:	4619      	mov	r1, r3
 8017c2e:	f002 f92e 	bl	8019e8e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017c32:	69bb      	ldr	r3, [r7, #24]
 8017c34:	68db      	ldr	r3, [r3, #12]
 8017c36:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017c38:	f107 030c 	add.w	r3, r7, #12
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f000 f82f 	bl	8017ca0 <ip4_route>
 8017c42:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017c44:	693b      	ldr	r3, [r7, #16]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d01b      	beq.n	8017c82 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017c4a:	697b      	ldr	r3, [r7, #20]
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	709a      	strb	r2, [r3, #2]
 8017c50:	2200      	movs	r2, #0
 8017c52:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017c54:	69fb      	ldr	r3, [r7, #28]
 8017c56:	895b      	ldrh	r3, [r3, #10]
 8017c58:	4619      	mov	r1, r3
 8017c5a:	6978      	ldr	r0, [r7, #20]
 8017c5c:	f7f7 fd17 	bl	800f68e <inet_chksum>
 8017c60:	4603      	mov	r3, r0
 8017c62:	461a      	mov	r2, r3
 8017c64:	697b      	ldr	r3, [r7, #20]
 8017c66:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017c68:	f107 020c 	add.w	r2, r7, #12
 8017c6c:	693b      	ldr	r3, [r7, #16]
 8017c6e:	9302      	str	r3, [sp, #8]
 8017c70:	2301      	movs	r3, #1
 8017c72:	9301      	str	r3, [sp, #4]
 8017c74:	2300      	movs	r3, #0
 8017c76:	9300      	str	r3, [sp, #0]
 8017c78:	23ff      	movs	r3, #255	; 0xff
 8017c7a:	2100      	movs	r1, #0
 8017c7c:	69f8      	ldr	r0, [r7, #28]
 8017c7e:	f000 f9cd 	bl	801801c <ip4_output_if>
  }
  pbuf_free(q);
 8017c82:	69f8      	ldr	r0, [r7, #28]
 8017c84:	f7f9 f85c 	bl	8010d40 <pbuf_free>
 8017c88:	e000      	b.n	8017c8c <icmp_send_response+0xd4>
    return;
 8017c8a:	bf00      	nop
}
 8017c8c:	3720      	adds	r7, #32
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	0801e9b4 	.word	0x0801e9b4
 8017c98:	0801ea80 	.word	0x0801ea80
 8017c9c:	0801ea24 	.word	0x0801ea24

08017ca0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017ca0:	b480      	push	{r7}
 8017ca2:	b085      	sub	sp, #20
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017ca8:	4b33      	ldr	r3, [pc, #204]	; (8017d78 <ip4_route+0xd8>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	60fb      	str	r3, [r7, #12]
 8017cae:	e036      	b.n	8017d1e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017cb6:	f003 0301 	and.w	r3, r3, #1
 8017cba:	b2db      	uxtb	r3, r3
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d02b      	beq.n	8017d18 <ip4_route+0x78>
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017cc6:	089b      	lsrs	r3, r3, #2
 8017cc8:	f003 0301 	and.w	r3, r3, #1
 8017ccc:	b2db      	uxtb	r3, r3
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d022      	beq.n	8017d18 <ip4_route+0x78>
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	3304      	adds	r3, #4
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d01d      	beq.n	8017d18 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681a      	ldr	r2, [r3, #0]
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	3304      	adds	r3, #4
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	405a      	eors	r2, r3
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	3308      	adds	r3, #8
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	4013      	ands	r3, r2
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d101      	bne.n	8017cf8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	e038      	b.n	8017d6a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017cfe:	f003 0302 	and.w	r3, r3, #2
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d108      	bne.n	8017d18 <ip4_route+0x78>
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681a      	ldr	r2, [r3, #0]
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	330c      	adds	r3, #12
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	429a      	cmp	r2, r3
 8017d12:	d101      	bne.n	8017d18 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	e028      	b.n	8017d6a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	60fb      	str	r3, [r7, #12]
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d1c5      	bne.n	8017cb0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017d24:	4b15      	ldr	r3, [pc, #84]	; (8017d7c <ip4_route+0xdc>)
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d01a      	beq.n	8017d62 <ip4_route+0xc2>
 8017d2c:	4b13      	ldr	r3, [pc, #76]	; (8017d7c <ip4_route+0xdc>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d34:	f003 0301 	and.w	r3, r3, #1
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d012      	beq.n	8017d62 <ip4_route+0xc2>
 8017d3c:	4b0f      	ldr	r3, [pc, #60]	; (8017d7c <ip4_route+0xdc>)
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d44:	f003 0304 	and.w	r3, r3, #4
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d00a      	beq.n	8017d62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017d4c:	4b0b      	ldr	r3, [pc, #44]	; (8017d7c <ip4_route+0xdc>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	3304      	adds	r3, #4
 8017d52:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d004      	beq.n	8017d62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	b2db      	uxtb	r3, r3
 8017d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8017d60:	d101      	bne.n	8017d66 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017d62:	2300      	movs	r3, #0
 8017d64:	e001      	b.n	8017d6a <ip4_route+0xca>
  }

  return netif_default;
 8017d66:	4b05      	ldr	r3, [pc, #20]	; (8017d7c <ip4_route+0xdc>)
 8017d68:	681b      	ldr	r3, [r3, #0]
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	3714      	adds	r7, #20
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d74:	4770      	bx	lr
 8017d76:	bf00      	nop
 8017d78:	200070c4 	.word	0x200070c4
 8017d7c:	200070c8 	.word	0x200070c8

08017d80 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b082      	sub	sp, #8
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d8e:	f003 0301 	and.w	r3, r3, #1
 8017d92:	b2db      	uxtb	r3, r3
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d016      	beq.n	8017dc6 <ip4_input_accept+0x46>
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	3304      	adds	r3, #4
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d011      	beq.n	8017dc6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017da2:	4b0b      	ldr	r3, [pc, #44]	; (8017dd0 <ip4_input_accept+0x50>)
 8017da4:	695a      	ldr	r2, [r3, #20]
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	3304      	adds	r3, #4
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	429a      	cmp	r2, r3
 8017dae:	d008      	beq.n	8017dc2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017db0:	4b07      	ldr	r3, [pc, #28]	; (8017dd0 <ip4_input_accept+0x50>)
 8017db2:	695b      	ldr	r3, [r3, #20]
 8017db4:	6879      	ldr	r1, [r7, #4]
 8017db6:	4618      	mov	r0, r3
 8017db8:	f000 fa08 	bl	80181cc <ip4_addr_isbroadcast_u32>
 8017dbc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d001      	beq.n	8017dc6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	e000      	b.n	8017dc8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017dc6:	2300      	movs	r3, #0
}
 8017dc8:	4618      	mov	r0, r3
 8017dca:	3708      	adds	r7, #8
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	bd80      	pop	{r7, pc}
 8017dd0:	200007f4 	.word	0x200007f4

08017dd4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b086      	sub	sp, #24
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
 8017ddc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	685b      	ldr	r3, [r3, #4]
 8017de2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017de4:	697b      	ldr	r3, [r7, #20]
 8017de6:	781b      	ldrb	r3, [r3, #0]
 8017de8:	091b      	lsrs	r3, r3, #4
 8017dea:	b2db      	uxtb	r3, r3
 8017dec:	2b04      	cmp	r3, #4
 8017dee:	d004      	beq.n	8017dfa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017df0:	6878      	ldr	r0, [r7, #4]
 8017df2:	f7f8 ffa5 	bl	8010d40 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017df6:	2300      	movs	r3, #0
 8017df8:	e107      	b.n	801800a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017dfa:	697b      	ldr	r3, [r7, #20]
 8017dfc:	781b      	ldrb	r3, [r3, #0]
 8017dfe:	f003 030f 	and.w	r3, r3, #15
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	009b      	lsls	r3, r3, #2
 8017e06:	b2db      	uxtb	r3, r3
 8017e08:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	885b      	ldrh	r3, [r3, #2]
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7f7 fbb1 	bl	800f578 <lwip_htons>
 8017e16:	4603      	mov	r3, r0
 8017e18:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	891b      	ldrh	r3, [r3, #8]
 8017e1e:	89ba      	ldrh	r2, [r7, #12]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d204      	bcs.n	8017e2e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017e24:	89bb      	ldrh	r3, [r7, #12]
 8017e26:	4619      	mov	r1, r3
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f7f8 fe05 	bl	8010a38 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	895b      	ldrh	r3, [r3, #10]
 8017e32:	89fa      	ldrh	r2, [r7, #14]
 8017e34:	429a      	cmp	r2, r3
 8017e36:	d807      	bhi.n	8017e48 <ip4_input+0x74>
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	891b      	ldrh	r3, [r3, #8]
 8017e3c:	89ba      	ldrh	r2, [r7, #12]
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	d802      	bhi.n	8017e48 <ip4_input+0x74>
 8017e42:	89fb      	ldrh	r3, [r7, #14]
 8017e44:	2b13      	cmp	r3, #19
 8017e46:	d804      	bhi.n	8017e52 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017e48:	6878      	ldr	r0, [r7, #4]
 8017e4a:	f7f8 ff79 	bl	8010d40 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	e0db      	b.n	801800a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	691b      	ldr	r3, [r3, #16]
 8017e56:	4a6f      	ldr	r2, [pc, #444]	; (8018014 <ip4_input+0x240>)
 8017e58:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017e5a:	697b      	ldr	r3, [r7, #20]
 8017e5c:	68db      	ldr	r3, [r3, #12]
 8017e5e:	4a6d      	ldr	r2, [pc, #436]	; (8018014 <ip4_input+0x240>)
 8017e60:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017e62:	4b6c      	ldr	r3, [pc, #432]	; (8018014 <ip4_input+0x240>)
 8017e64:	695b      	ldr	r3, [r3, #20]
 8017e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017e6a:	2be0      	cmp	r3, #224	; 0xe0
 8017e6c:	d112      	bne.n	8017e94 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017e6e:	683b      	ldr	r3, [r7, #0]
 8017e70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e74:	f003 0301 	and.w	r3, r3, #1
 8017e78:	b2db      	uxtb	r3, r3
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d007      	beq.n	8017e8e <ip4_input+0xba>
 8017e7e:	683b      	ldr	r3, [r7, #0]
 8017e80:	3304      	adds	r3, #4
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d002      	beq.n	8017e8e <ip4_input+0xba>
      netif = inp;
 8017e88:	683b      	ldr	r3, [r7, #0]
 8017e8a:	613b      	str	r3, [r7, #16]
 8017e8c:	e02a      	b.n	8017ee4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017e8e:	2300      	movs	r3, #0
 8017e90:	613b      	str	r3, [r7, #16]
 8017e92:	e027      	b.n	8017ee4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017e94:	6838      	ldr	r0, [r7, #0]
 8017e96:	f7ff ff73 	bl	8017d80 <ip4_input_accept>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d002      	beq.n	8017ea6 <ip4_input+0xd2>
      netif = inp;
 8017ea0:	683b      	ldr	r3, [r7, #0]
 8017ea2:	613b      	str	r3, [r7, #16]
 8017ea4:	e01e      	b.n	8017ee4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017eaa:	4b5a      	ldr	r3, [pc, #360]	; (8018014 <ip4_input+0x240>)
 8017eac:	695b      	ldr	r3, [r3, #20]
 8017eae:	b2db      	uxtb	r3, r3
 8017eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8017eb2:	d017      	beq.n	8017ee4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017eb4:	4b58      	ldr	r3, [pc, #352]	; (8018018 <ip4_input+0x244>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	613b      	str	r3, [r7, #16]
 8017eba:	e00e      	b.n	8017eda <ip4_input+0x106>
          if (netif == inp) {
 8017ebc:	693a      	ldr	r2, [r7, #16]
 8017ebe:	683b      	ldr	r3, [r7, #0]
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d006      	beq.n	8017ed2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017ec4:	6938      	ldr	r0, [r7, #16]
 8017ec6:	f7ff ff5b 	bl	8017d80 <ip4_input_accept>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d108      	bne.n	8017ee2 <ip4_input+0x10e>
 8017ed0:	e000      	b.n	8017ed4 <ip4_input+0x100>
            continue;
 8017ed2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017ed4:	693b      	ldr	r3, [r7, #16]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	613b      	str	r3, [r7, #16]
 8017eda:	693b      	ldr	r3, [r7, #16]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d1ed      	bne.n	8017ebc <ip4_input+0xe8>
 8017ee0:	e000      	b.n	8017ee4 <ip4_input+0x110>
            break;
 8017ee2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017ee4:	4b4b      	ldr	r3, [pc, #300]	; (8018014 <ip4_input+0x240>)
 8017ee6:	691b      	ldr	r3, [r3, #16]
 8017ee8:	6839      	ldr	r1, [r7, #0]
 8017eea:	4618      	mov	r0, r3
 8017eec:	f000 f96e 	bl	80181cc <ip4_addr_isbroadcast_u32>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d105      	bne.n	8017f02 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017ef6:	4b47      	ldr	r3, [pc, #284]	; (8018014 <ip4_input+0x240>)
 8017ef8:	691b      	ldr	r3, [r3, #16]
 8017efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017efe:	2be0      	cmp	r3, #224	; 0xe0
 8017f00:	d104      	bne.n	8017f0c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f7f8 ff1c 	bl	8010d40 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017f08:	2300      	movs	r3, #0
 8017f0a:	e07e      	b.n	801800a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d104      	bne.n	8017f1c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f7f8 ff14 	bl	8010d40 <pbuf_free>
    return ERR_OK;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	e076      	b.n	801800a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	88db      	ldrh	r3, [r3, #6]
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	461a      	mov	r2, r3
 8017f24:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017f28:	4013      	ands	r3, r2
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d00b      	beq.n	8017f46 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f000 fc92 	bl	8018858 <ip4_reass>
 8017f34:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d101      	bne.n	8017f40 <ip4_input+0x16c>
      return ERR_OK;
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	e064      	b.n	801800a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	685b      	ldr	r3, [r3, #4]
 8017f44:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017f46:	4a33      	ldr	r2, [pc, #204]	; (8018014 <ip4_input+0x240>)
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017f4c:	4a31      	ldr	r2, [pc, #196]	; (8018014 <ip4_input+0x240>)
 8017f4e:	683b      	ldr	r3, [r7, #0]
 8017f50:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017f52:	4a30      	ldr	r2, [pc, #192]	; (8018014 <ip4_input+0x240>)
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017f58:	697b      	ldr	r3, [r7, #20]
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	f003 030f 	and.w	r3, r3, #15
 8017f60:	b2db      	uxtb	r3, r3
 8017f62:	009b      	lsls	r3, r3, #2
 8017f64:	b2db      	uxtb	r3, r3
 8017f66:	b29a      	uxth	r2, r3
 8017f68:	4b2a      	ldr	r3, [pc, #168]	; (8018014 <ip4_input+0x240>)
 8017f6a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017f6c:	89fb      	ldrh	r3, [r7, #14]
 8017f6e:	4619      	mov	r1, r3
 8017f70:	6878      	ldr	r0, [r7, #4]
 8017f72:	f7f8 fe5f 	bl	8010c34 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017f76:	697b      	ldr	r3, [r7, #20]
 8017f78:	7a5b      	ldrb	r3, [r3, #9]
 8017f7a:	2b11      	cmp	r3, #17
 8017f7c:	d006      	beq.n	8017f8c <ip4_input+0x1b8>
 8017f7e:	2b11      	cmp	r3, #17
 8017f80:	dc13      	bgt.n	8017faa <ip4_input+0x1d6>
 8017f82:	2b01      	cmp	r3, #1
 8017f84:	d00c      	beq.n	8017fa0 <ip4_input+0x1cc>
 8017f86:	2b06      	cmp	r3, #6
 8017f88:	d005      	beq.n	8017f96 <ip4_input+0x1c2>
 8017f8a:	e00e      	b.n	8017faa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017f8c:	6839      	ldr	r1, [r7, #0]
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f7fe fc42 	bl	8016818 <udp_input>
        break;
 8017f94:	e026      	b.n	8017fe4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017f96:	6839      	ldr	r1, [r7, #0]
 8017f98:	6878      	ldr	r0, [r7, #4]
 8017f9a:	f7fa fcfd 	bl	8012998 <tcp_input>
        break;
 8017f9e:	e021      	b.n	8017fe4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017fa0:	6839      	ldr	r1, [r7, #0]
 8017fa2:	6878      	ldr	r0, [r7, #4]
 8017fa4:	f7ff fcc8 	bl	8017938 <icmp_input>
        break;
 8017fa8:	e01c      	b.n	8017fe4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017faa:	4b1a      	ldr	r3, [pc, #104]	; (8018014 <ip4_input+0x240>)
 8017fac:	695b      	ldr	r3, [r3, #20]
 8017fae:	6939      	ldr	r1, [r7, #16]
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f000 f90b 	bl	80181cc <ip4_addr_isbroadcast_u32>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d10f      	bne.n	8017fdc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017fbc:	4b15      	ldr	r3, [pc, #84]	; (8018014 <ip4_input+0x240>)
 8017fbe:	695b      	ldr	r3, [r3, #20]
 8017fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017fc4:	2be0      	cmp	r3, #224	; 0xe0
 8017fc6:	d009      	beq.n	8017fdc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017fc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017fcc:	4619      	mov	r1, r3
 8017fce:	6878      	ldr	r0, [r7, #4]
 8017fd0:	f7f8 fea3 	bl	8010d1a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017fd4:	2102      	movs	r1, #2
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f7ff fdce 	bl	8017b78 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017fdc:	6878      	ldr	r0, [r7, #4]
 8017fde:	f7f8 feaf 	bl	8010d40 <pbuf_free>
        break;
 8017fe2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017fe4:	4b0b      	ldr	r3, [pc, #44]	; (8018014 <ip4_input+0x240>)
 8017fe6:	2200      	movs	r2, #0
 8017fe8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017fea:	4b0a      	ldr	r3, [pc, #40]	; (8018014 <ip4_input+0x240>)
 8017fec:	2200      	movs	r2, #0
 8017fee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017ff0:	4b08      	ldr	r3, [pc, #32]	; (8018014 <ip4_input+0x240>)
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017ff6:	4b07      	ldr	r3, [pc, #28]	; (8018014 <ip4_input+0x240>)
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017ffc:	4b05      	ldr	r3, [pc, #20]	; (8018014 <ip4_input+0x240>)
 8017ffe:	2200      	movs	r2, #0
 8018000:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018002:	4b04      	ldr	r3, [pc, #16]	; (8018014 <ip4_input+0x240>)
 8018004:	2200      	movs	r2, #0
 8018006:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018008:	2300      	movs	r3, #0
}
 801800a:	4618      	mov	r0, r3
 801800c:	3718      	adds	r7, #24
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	200007f4 	.word	0x200007f4
 8018018:	200070c4 	.word	0x200070c4

0801801c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b08a      	sub	sp, #40	; 0x28
 8018020:	af04      	add	r7, sp, #16
 8018022:	60f8      	str	r0, [r7, #12]
 8018024:	60b9      	str	r1, [r7, #8]
 8018026:	607a      	str	r2, [r7, #4]
 8018028:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d009      	beq.n	8018048 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d003      	beq.n	8018042 <ip4_output_if+0x26>
 801803a:	68bb      	ldr	r3, [r7, #8]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d102      	bne.n	8018048 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018044:	3304      	adds	r3, #4
 8018046:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018048:	78fa      	ldrb	r2, [r7, #3]
 801804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801804c:	9302      	str	r3, [sp, #8]
 801804e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018052:	9301      	str	r3, [sp, #4]
 8018054:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018058:	9300      	str	r3, [sp, #0]
 801805a:	4613      	mov	r3, r2
 801805c:	687a      	ldr	r2, [r7, #4]
 801805e:	6979      	ldr	r1, [r7, #20]
 8018060:	68f8      	ldr	r0, [r7, #12]
 8018062:	f000 f805 	bl	8018070 <ip4_output_if_src>
 8018066:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018068:	4618      	mov	r0, r3
 801806a:	3718      	adds	r7, #24
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}

08018070 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b088      	sub	sp, #32
 8018074:	af00      	add	r7, sp, #0
 8018076:	60f8      	str	r0, [r7, #12]
 8018078:	60b9      	str	r1, [r7, #8]
 801807a:	607a      	str	r2, [r7, #4]
 801807c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	7b9b      	ldrb	r3, [r3, #14]
 8018082:	2b01      	cmp	r3, #1
 8018084:	d006      	beq.n	8018094 <ip4_output_if_src+0x24>
 8018086:	4b4b      	ldr	r3, [pc, #300]	; (80181b4 <ip4_output_if_src+0x144>)
 8018088:	f44f 7255 	mov.w	r2, #852	; 0x354
 801808c:	494a      	ldr	r1, [pc, #296]	; (80181b8 <ip4_output_if_src+0x148>)
 801808e:	484b      	ldr	r0, [pc, #300]	; (80181bc <ip4_output_if_src+0x14c>)
 8018090:	f001 fd2e 	bl	8019af0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	2b00      	cmp	r3, #0
 8018098:	d060      	beq.n	801815c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801809a:	2314      	movs	r3, #20
 801809c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801809e:	2114      	movs	r1, #20
 80180a0:	68f8      	ldr	r0, [r7, #12]
 80180a2:	f7f8 fdb7 	bl	8010c14 <pbuf_add_header>
 80180a6:	4603      	mov	r3, r0
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d002      	beq.n	80180b2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80180ac:	f06f 0301 	mvn.w	r3, #1
 80180b0:	e07c      	b.n	80181ac <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	685b      	ldr	r3, [r3, #4]
 80180b6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	895b      	ldrh	r3, [r3, #10]
 80180bc:	2b13      	cmp	r3, #19
 80180be:	d806      	bhi.n	80180ce <ip4_output_if_src+0x5e>
 80180c0:	4b3c      	ldr	r3, [pc, #240]	; (80181b4 <ip4_output_if_src+0x144>)
 80180c2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80180c6:	493e      	ldr	r1, [pc, #248]	; (80181c0 <ip4_output_if_src+0x150>)
 80180c8:	483c      	ldr	r0, [pc, #240]	; (80181bc <ip4_output_if_src+0x14c>)
 80180ca:	f001 fd11 	bl	8019af0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80180ce:	69fb      	ldr	r3, [r7, #28]
 80180d0:	78fa      	ldrb	r2, [r7, #3]
 80180d2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80180d4:	69fb      	ldr	r3, [r7, #28]
 80180d6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80180da:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	681a      	ldr	r2, [r3, #0]
 80180e0:	69fb      	ldr	r3, [r7, #28]
 80180e2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80180e4:	8b7b      	ldrh	r3, [r7, #26]
 80180e6:	089b      	lsrs	r3, r3, #2
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	b2db      	uxtb	r3, r3
 80180ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180f0:	b2da      	uxtb	r2, r3
 80180f2:	69fb      	ldr	r3, [r7, #28]
 80180f4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80180f6:	69fb      	ldr	r3, [r7, #28]
 80180f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80180fc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	891b      	ldrh	r3, [r3, #8]
 8018102:	4618      	mov	r0, r3
 8018104:	f7f7 fa38 	bl	800f578 <lwip_htons>
 8018108:	4603      	mov	r3, r0
 801810a:	461a      	mov	r2, r3
 801810c:	69fb      	ldr	r3, [r7, #28]
 801810e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018110:	69fb      	ldr	r3, [r7, #28]
 8018112:	2200      	movs	r2, #0
 8018114:	719a      	strb	r2, [r3, #6]
 8018116:	2200      	movs	r2, #0
 8018118:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801811a:	4b2a      	ldr	r3, [pc, #168]	; (80181c4 <ip4_output_if_src+0x154>)
 801811c:	881b      	ldrh	r3, [r3, #0]
 801811e:	4618      	mov	r0, r3
 8018120:	f7f7 fa2a 	bl	800f578 <lwip_htons>
 8018124:	4603      	mov	r3, r0
 8018126:	461a      	mov	r2, r3
 8018128:	69fb      	ldr	r3, [r7, #28]
 801812a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801812c:	4b25      	ldr	r3, [pc, #148]	; (80181c4 <ip4_output_if_src+0x154>)
 801812e:	881b      	ldrh	r3, [r3, #0]
 8018130:	3301      	adds	r3, #1
 8018132:	b29a      	uxth	r2, r3
 8018134:	4b23      	ldr	r3, [pc, #140]	; (80181c4 <ip4_output_if_src+0x154>)
 8018136:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018138:	68bb      	ldr	r3, [r7, #8]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d104      	bne.n	8018148 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801813e:	4b22      	ldr	r3, [pc, #136]	; (80181c8 <ip4_output_if_src+0x158>)
 8018140:	681a      	ldr	r2, [r3, #0]
 8018142:	69fb      	ldr	r3, [r7, #28]
 8018144:	60da      	str	r2, [r3, #12]
 8018146:	e003      	b.n	8018150 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	681a      	ldr	r2, [r3, #0]
 801814c:	69fb      	ldr	r3, [r7, #28]
 801814e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018150:	69fb      	ldr	r3, [r7, #28]
 8018152:	2200      	movs	r2, #0
 8018154:	729a      	strb	r2, [r3, #10]
 8018156:	2200      	movs	r2, #0
 8018158:	72da      	strb	r2, [r3, #11]
 801815a:	e00f      	b.n	801817c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	895b      	ldrh	r3, [r3, #10]
 8018160:	2b13      	cmp	r3, #19
 8018162:	d802      	bhi.n	801816a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018164:	f06f 0301 	mvn.w	r3, #1
 8018168:	e020      	b.n	80181ac <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	685b      	ldr	r3, [r3, #4]
 801816e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018170:	69fb      	ldr	r3, [r7, #28]
 8018172:	691b      	ldr	r3, [r3, #16]
 8018174:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018176:	f107 0314 	add.w	r3, r7, #20
 801817a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801817e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018180:	2b00      	cmp	r3, #0
 8018182:	d00c      	beq.n	801819e <ip4_output_if_src+0x12e>
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	891a      	ldrh	r2, [r3, #8]
 8018188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801818a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801818c:	429a      	cmp	r2, r3
 801818e:	d906      	bls.n	801819e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018190:	687a      	ldr	r2, [r7, #4]
 8018192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018194:	68f8      	ldr	r0, [r7, #12]
 8018196:	f000 fd53 	bl	8018c40 <ip4_frag>
 801819a:	4603      	mov	r3, r0
 801819c:	e006      	b.n	80181ac <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a0:	695b      	ldr	r3, [r3, #20]
 80181a2:	687a      	ldr	r2, [r7, #4]
 80181a4:	68f9      	ldr	r1, [r7, #12]
 80181a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181a8:	4798      	blx	r3
 80181aa:	4603      	mov	r3, r0
}
 80181ac:	4618      	mov	r0, r3
 80181ae:	3720      	adds	r7, #32
 80181b0:	46bd      	mov	sp, r7
 80181b2:	bd80      	pop	{r7, pc}
 80181b4:	0801eaac 	.word	0x0801eaac
 80181b8:	0801eae0 	.word	0x0801eae0
 80181bc:	0801eaec 	.word	0x0801eaec
 80181c0:	0801eb14 	.word	0x0801eb14
 80181c4:	20007222 	.word	0x20007222
 80181c8:	0801ef14 	.word	0x0801ef14

080181cc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80181cc:	b480      	push	{r7}
 80181ce:	b085      	sub	sp, #20
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181e0:	d002      	beq.n	80181e8 <ip4_addr_isbroadcast_u32+0x1c>
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d101      	bne.n	80181ec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80181e8:	2301      	movs	r3, #1
 80181ea:	e02a      	b.n	8018242 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80181ec:	683b      	ldr	r3, [r7, #0]
 80181ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80181f2:	f003 0302 	and.w	r3, r3, #2
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d101      	bne.n	80181fe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80181fa:	2300      	movs	r3, #0
 80181fc:	e021      	b.n	8018242 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	3304      	adds	r3, #4
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	687a      	ldr	r2, [r7, #4]
 8018206:	429a      	cmp	r2, r3
 8018208:	d101      	bne.n	801820e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801820a:	2300      	movs	r3, #0
 801820c:	e019      	b.n	8018242 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801820e:	68fa      	ldr	r2, [r7, #12]
 8018210:	683b      	ldr	r3, [r7, #0]
 8018212:	3304      	adds	r3, #4
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	405a      	eors	r2, r3
 8018218:	683b      	ldr	r3, [r7, #0]
 801821a:	3308      	adds	r3, #8
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	4013      	ands	r3, r2
 8018220:	2b00      	cmp	r3, #0
 8018222:	d10d      	bne.n	8018240 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018224:	683b      	ldr	r3, [r7, #0]
 8018226:	3308      	adds	r3, #8
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	43da      	mvns	r2, r3
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	3308      	adds	r3, #8
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018238:	429a      	cmp	r2, r3
 801823a:	d101      	bne.n	8018240 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801823c:	2301      	movs	r3, #1
 801823e:	e000      	b.n	8018242 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018240:	2300      	movs	r3, #0
  }
}
 8018242:	4618      	mov	r0, r3
 8018244:	3714      	adds	r7, #20
 8018246:	46bd      	mov	sp, r7
 8018248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824c:	4770      	bx	lr
	...

08018250 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b084      	sub	sp, #16
 8018254:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018256:	2300      	movs	r3, #0
 8018258:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801825a:	4b12      	ldr	r3, [pc, #72]	; (80182a4 <ip_reass_tmr+0x54>)
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018260:	e018      	b.n	8018294 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	7fdb      	ldrb	r3, [r3, #31]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d00b      	beq.n	8018282 <ip_reass_tmr+0x32>
      r->timer--;
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	7fdb      	ldrb	r3, [r3, #31]
 801826e:	3b01      	subs	r3, #1
 8018270:	b2da      	uxtb	r2, r3
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	60fb      	str	r3, [r7, #12]
 8018280:	e008      	b.n	8018294 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801828c:	68b9      	ldr	r1, [r7, #8]
 801828e:	6878      	ldr	r0, [r7, #4]
 8018290:	f000 f80a 	bl	80182a8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d1e3      	bne.n	8018262 <ip_reass_tmr+0x12>
    }
  }
}
 801829a:	bf00      	nop
 801829c:	bf00      	nop
 801829e:	3710      	adds	r7, #16
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}
 80182a4:	20007224 	.word	0x20007224

080182a8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b088      	sub	sp, #32
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
 80182b0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80182b2:	2300      	movs	r3, #0
 80182b4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80182b6:	683a      	ldr	r2, [r7, #0]
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	429a      	cmp	r2, r3
 80182bc:	d105      	bne.n	80182ca <ip_reass_free_complete_datagram+0x22>
 80182be:	4b45      	ldr	r3, [pc, #276]	; (80183d4 <ip_reass_free_complete_datagram+0x12c>)
 80182c0:	22ab      	movs	r2, #171	; 0xab
 80182c2:	4945      	ldr	r1, [pc, #276]	; (80183d8 <ip_reass_free_complete_datagram+0x130>)
 80182c4:	4845      	ldr	r0, [pc, #276]	; (80183dc <ip_reass_free_complete_datagram+0x134>)
 80182c6:	f001 fc13 	bl	8019af0 <iprintf>
  if (prev != NULL) {
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d00a      	beq.n	80182e6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	687a      	ldr	r2, [r7, #4]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d005      	beq.n	80182e6 <ip_reass_free_complete_datagram+0x3e>
 80182da:	4b3e      	ldr	r3, [pc, #248]	; (80183d4 <ip_reass_free_complete_datagram+0x12c>)
 80182dc:	22ad      	movs	r2, #173	; 0xad
 80182de:	4940      	ldr	r1, [pc, #256]	; (80183e0 <ip_reass_free_complete_datagram+0x138>)
 80182e0:	483e      	ldr	r0, [pc, #248]	; (80183dc <ip_reass_free_complete_datagram+0x134>)
 80182e2:	f001 fc05 	bl	8019af0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	685b      	ldr	r3, [r3, #4]
 80182ea:	685b      	ldr	r3, [r3, #4]
 80182ec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80182ee:	697b      	ldr	r3, [r7, #20]
 80182f0:	889b      	ldrh	r3, [r3, #4]
 80182f2:	b29b      	uxth	r3, r3
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d12a      	bne.n	801834e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	685b      	ldr	r3, [r3, #4]
 80182fc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80182fe:	697b      	ldr	r3, [r7, #20]
 8018300:	681a      	ldr	r2, [r3, #0]
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018306:	69bb      	ldr	r3, [r7, #24]
 8018308:	6858      	ldr	r0, [r3, #4]
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	3308      	adds	r3, #8
 801830e:	2214      	movs	r2, #20
 8018310:	4619      	mov	r1, r3
 8018312:	f001 fdbc 	bl	8019e8e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018316:	2101      	movs	r1, #1
 8018318:	69b8      	ldr	r0, [r7, #24]
 801831a:	f7ff fc3d 	bl	8017b98 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801831e:	69b8      	ldr	r0, [r7, #24]
 8018320:	f7f8 fd96 	bl	8010e50 <pbuf_clen>
 8018324:	4603      	mov	r3, r0
 8018326:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018328:	8bfa      	ldrh	r2, [r7, #30]
 801832a:	8a7b      	ldrh	r3, [r7, #18]
 801832c:	4413      	add	r3, r2
 801832e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018332:	db05      	blt.n	8018340 <ip_reass_free_complete_datagram+0x98>
 8018334:	4b27      	ldr	r3, [pc, #156]	; (80183d4 <ip_reass_free_complete_datagram+0x12c>)
 8018336:	22bc      	movs	r2, #188	; 0xbc
 8018338:	492a      	ldr	r1, [pc, #168]	; (80183e4 <ip_reass_free_complete_datagram+0x13c>)
 801833a:	4828      	ldr	r0, [pc, #160]	; (80183dc <ip_reass_free_complete_datagram+0x134>)
 801833c:	f001 fbd8 	bl	8019af0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018340:	8bfa      	ldrh	r2, [r7, #30]
 8018342:	8a7b      	ldrh	r3, [r7, #18]
 8018344:	4413      	add	r3, r2
 8018346:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018348:	69b8      	ldr	r0, [r7, #24]
 801834a:	f7f8 fcf9 	bl	8010d40 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	685b      	ldr	r3, [r3, #4]
 8018352:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018354:	e01f      	b.n	8018396 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018356:	69bb      	ldr	r3, [r7, #24]
 8018358:	685b      	ldr	r3, [r3, #4]
 801835a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801835c:	69bb      	ldr	r3, [r7, #24]
 801835e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018360:	697b      	ldr	r3, [r7, #20]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018366:	68f8      	ldr	r0, [r7, #12]
 8018368:	f7f8 fd72 	bl	8010e50 <pbuf_clen>
 801836c:	4603      	mov	r3, r0
 801836e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018370:	8bfa      	ldrh	r2, [r7, #30]
 8018372:	8a7b      	ldrh	r3, [r7, #18]
 8018374:	4413      	add	r3, r2
 8018376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801837a:	db05      	blt.n	8018388 <ip_reass_free_complete_datagram+0xe0>
 801837c:	4b15      	ldr	r3, [pc, #84]	; (80183d4 <ip_reass_free_complete_datagram+0x12c>)
 801837e:	22cc      	movs	r2, #204	; 0xcc
 8018380:	4918      	ldr	r1, [pc, #96]	; (80183e4 <ip_reass_free_complete_datagram+0x13c>)
 8018382:	4816      	ldr	r0, [pc, #88]	; (80183dc <ip_reass_free_complete_datagram+0x134>)
 8018384:	f001 fbb4 	bl	8019af0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018388:	8bfa      	ldrh	r2, [r7, #30]
 801838a:	8a7b      	ldrh	r3, [r7, #18]
 801838c:	4413      	add	r3, r2
 801838e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018390:	68f8      	ldr	r0, [r7, #12]
 8018392:	f7f8 fcd5 	bl	8010d40 <pbuf_free>
  while (p != NULL) {
 8018396:	69bb      	ldr	r3, [r7, #24]
 8018398:	2b00      	cmp	r3, #0
 801839a:	d1dc      	bne.n	8018356 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801839c:	6839      	ldr	r1, [r7, #0]
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f000 f8c2 	bl	8018528 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80183a4:	4b10      	ldr	r3, [pc, #64]	; (80183e8 <ip_reass_free_complete_datagram+0x140>)
 80183a6:	881b      	ldrh	r3, [r3, #0]
 80183a8:	8bfa      	ldrh	r2, [r7, #30]
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d905      	bls.n	80183ba <ip_reass_free_complete_datagram+0x112>
 80183ae:	4b09      	ldr	r3, [pc, #36]	; (80183d4 <ip_reass_free_complete_datagram+0x12c>)
 80183b0:	22d2      	movs	r2, #210	; 0xd2
 80183b2:	490e      	ldr	r1, [pc, #56]	; (80183ec <ip_reass_free_complete_datagram+0x144>)
 80183b4:	4809      	ldr	r0, [pc, #36]	; (80183dc <ip_reass_free_complete_datagram+0x134>)
 80183b6:	f001 fb9b 	bl	8019af0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80183ba:	4b0b      	ldr	r3, [pc, #44]	; (80183e8 <ip_reass_free_complete_datagram+0x140>)
 80183bc:	881a      	ldrh	r2, [r3, #0]
 80183be:	8bfb      	ldrh	r3, [r7, #30]
 80183c0:	1ad3      	subs	r3, r2, r3
 80183c2:	b29a      	uxth	r2, r3
 80183c4:	4b08      	ldr	r3, [pc, #32]	; (80183e8 <ip_reass_free_complete_datagram+0x140>)
 80183c6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80183c8:	8bfb      	ldrh	r3, [r7, #30]
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3720      	adds	r7, #32
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	0801eb44 	.word	0x0801eb44
 80183d8:	0801eb80 	.word	0x0801eb80
 80183dc:	0801eb8c 	.word	0x0801eb8c
 80183e0:	0801ebb4 	.word	0x0801ebb4
 80183e4:	0801ebc8 	.word	0x0801ebc8
 80183e8:	20007228 	.word	0x20007228
 80183ec:	0801ebe8 	.word	0x0801ebe8

080183f0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b08a      	sub	sp, #40	; 0x28
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
 80183f8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80183fa:	2300      	movs	r3, #0
 80183fc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80183fe:	2300      	movs	r3, #0
 8018400:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018402:	2300      	movs	r3, #0
 8018404:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018406:	2300      	movs	r3, #0
 8018408:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801840a:	2300      	movs	r3, #0
 801840c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801840e:	4b28      	ldr	r3, [pc, #160]	; (80184b0 <ip_reass_remove_oldest_datagram+0xc0>)
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018414:	e030      	b.n	8018478 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018418:	695a      	ldr	r2, [r3, #20]
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	68db      	ldr	r3, [r3, #12]
 801841e:	429a      	cmp	r2, r3
 8018420:	d10c      	bne.n	801843c <ip_reass_remove_oldest_datagram+0x4c>
 8018422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018424:	699a      	ldr	r2, [r3, #24]
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	691b      	ldr	r3, [r3, #16]
 801842a:	429a      	cmp	r2, r3
 801842c:	d106      	bne.n	801843c <ip_reass_remove_oldest_datagram+0x4c>
 801842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018430:	899a      	ldrh	r2, [r3, #12]
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	889b      	ldrh	r3, [r3, #4]
 8018436:	b29b      	uxth	r3, r3
 8018438:	429a      	cmp	r2, r3
 801843a:	d014      	beq.n	8018466 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801843c:	693b      	ldr	r3, [r7, #16]
 801843e:	3301      	adds	r3, #1
 8018440:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018442:	6a3b      	ldr	r3, [r7, #32]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d104      	bne.n	8018452 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801844a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801844c:	69fb      	ldr	r3, [r7, #28]
 801844e:	61bb      	str	r3, [r7, #24]
 8018450:	e009      	b.n	8018466 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018454:	7fda      	ldrb	r2, [r3, #31]
 8018456:	6a3b      	ldr	r3, [r7, #32]
 8018458:	7fdb      	ldrb	r3, [r3, #31]
 801845a:	429a      	cmp	r2, r3
 801845c:	d803      	bhi.n	8018466 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018460:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018462:	69fb      	ldr	r3, [r7, #28]
 8018464:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d001      	beq.n	8018472 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018470:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801847a:	2b00      	cmp	r3, #0
 801847c:	d1cb      	bne.n	8018416 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801847e:	6a3b      	ldr	r3, [r7, #32]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d008      	beq.n	8018496 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018484:	69b9      	ldr	r1, [r7, #24]
 8018486:	6a38      	ldr	r0, [r7, #32]
 8018488:	f7ff ff0e 	bl	80182a8 <ip_reass_free_complete_datagram>
 801848c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801848e:	697a      	ldr	r2, [r7, #20]
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	4413      	add	r3, r2
 8018494:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018496:	697a      	ldr	r2, [r7, #20]
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	429a      	cmp	r2, r3
 801849c:	da02      	bge.n	80184a4 <ip_reass_remove_oldest_datagram+0xb4>
 801849e:	693b      	ldr	r3, [r7, #16]
 80184a0:	2b01      	cmp	r3, #1
 80184a2:	dcac      	bgt.n	80183fe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80184a4:	697b      	ldr	r3, [r7, #20]
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3728      	adds	r7, #40	; 0x28
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}
 80184ae:	bf00      	nop
 80184b0:	20007224 	.word	0x20007224

080184b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b084      	sub	sp, #16
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
 80184bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80184be:	2004      	movs	r0, #4
 80184c0:	f7f7 fd78 	bl	800ffb4 <memp_malloc>
 80184c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d110      	bne.n	80184ee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80184cc:	6839      	ldr	r1, [r7, #0]
 80184ce:	6878      	ldr	r0, [r7, #4]
 80184d0:	f7ff ff8e 	bl	80183f0 <ip_reass_remove_oldest_datagram>
 80184d4:	4602      	mov	r2, r0
 80184d6:	683b      	ldr	r3, [r7, #0]
 80184d8:	4293      	cmp	r3, r2
 80184da:	dc03      	bgt.n	80184e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80184dc:	2004      	movs	r0, #4
 80184de:	f7f7 fd69 	bl	800ffb4 <memp_malloc>
 80184e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d101      	bne.n	80184ee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80184ea:	2300      	movs	r3, #0
 80184ec:	e016      	b.n	801851c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80184ee:	2220      	movs	r2, #32
 80184f0:	2100      	movs	r1, #0
 80184f2:	68f8      	ldr	r0, [r7, #12]
 80184f4:	f001 fc52 	bl	8019d9c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	220f      	movs	r2, #15
 80184fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80184fe:	4b09      	ldr	r3, [pc, #36]	; (8018524 <ip_reass_enqueue_new_datagram+0x70>)
 8018500:	681a      	ldr	r2, [r3, #0]
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018506:	4a07      	ldr	r2, [pc, #28]	; (8018524 <ip_reass_enqueue_new_datagram+0x70>)
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	3308      	adds	r3, #8
 8018510:	2214      	movs	r2, #20
 8018512:	6879      	ldr	r1, [r7, #4]
 8018514:	4618      	mov	r0, r3
 8018516:	f001 fcba 	bl	8019e8e <memcpy>
  return ipr;
 801851a:	68fb      	ldr	r3, [r7, #12]
}
 801851c:	4618      	mov	r0, r3
 801851e:	3710      	adds	r7, #16
 8018520:	46bd      	mov	sp, r7
 8018522:	bd80      	pop	{r7, pc}
 8018524:	20007224 	.word	0x20007224

08018528 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b082      	sub	sp, #8
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
 8018530:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018532:	4b10      	ldr	r3, [pc, #64]	; (8018574 <ip_reass_dequeue_datagram+0x4c>)
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	687a      	ldr	r2, [r7, #4]
 8018538:	429a      	cmp	r2, r3
 801853a:	d104      	bne.n	8018546 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	4a0c      	ldr	r2, [pc, #48]	; (8018574 <ip_reass_dequeue_datagram+0x4c>)
 8018542:	6013      	str	r3, [r2, #0]
 8018544:	e00d      	b.n	8018562 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d106      	bne.n	801855a <ip_reass_dequeue_datagram+0x32>
 801854c:	4b0a      	ldr	r3, [pc, #40]	; (8018578 <ip_reass_dequeue_datagram+0x50>)
 801854e:	f240 1245 	movw	r2, #325	; 0x145
 8018552:	490a      	ldr	r1, [pc, #40]	; (801857c <ip_reass_dequeue_datagram+0x54>)
 8018554:	480a      	ldr	r0, [pc, #40]	; (8018580 <ip_reass_dequeue_datagram+0x58>)
 8018556:	f001 facb 	bl	8019af0 <iprintf>
    prev->next = ipr->next;
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	681a      	ldr	r2, [r3, #0]
 801855e:	683b      	ldr	r3, [r7, #0]
 8018560:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018562:	6879      	ldr	r1, [r7, #4]
 8018564:	2004      	movs	r0, #4
 8018566:	f7f7 fd95 	bl	8010094 <memp_free>
}
 801856a:	bf00      	nop
 801856c:	3708      	adds	r7, #8
 801856e:	46bd      	mov	sp, r7
 8018570:	bd80      	pop	{r7, pc}
 8018572:	bf00      	nop
 8018574:	20007224 	.word	0x20007224
 8018578:	0801eb44 	.word	0x0801eb44
 801857c:	0801ec0c 	.word	0x0801ec0c
 8018580:	0801eb8c 	.word	0x0801eb8c

08018584 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b08c      	sub	sp, #48	; 0x30
 8018588:	af00      	add	r7, sp, #0
 801858a:	60f8      	str	r0, [r7, #12]
 801858c:	60b9      	str	r1, [r7, #8]
 801858e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018590:	2300      	movs	r3, #0
 8018592:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018594:	2301      	movs	r3, #1
 8018596:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018598:	68bb      	ldr	r3, [r7, #8]
 801859a:	685b      	ldr	r3, [r3, #4]
 801859c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801859e:	69fb      	ldr	r3, [r7, #28]
 80185a0:	885b      	ldrh	r3, [r3, #2]
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	4618      	mov	r0, r3
 80185a6:	f7f6 ffe7 	bl	800f578 <lwip_htons>
 80185aa:	4603      	mov	r3, r0
 80185ac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80185ae:	69fb      	ldr	r3, [r7, #28]
 80185b0:	781b      	ldrb	r3, [r3, #0]
 80185b2:	f003 030f 	and.w	r3, r3, #15
 80185b6:	b2db      	uxtb	r3, r3
 80185b8:	009b      	lsls	r3, r3, #2
 80185ba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80185bc:	7e7b      	ldrb	r3, [r7, #25]
 80185be:	b29b      	uxth	r3, r3
 80185c0:	8b7a      	ldrh	r2, [r7, #26]
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d202      	bcs.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80185c6:	f04f 33ff 	mov.w	r3, #4294967295
 80185ca:	e135      	b.n	8018838 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80185cc:	7e7b      	ldrb	r3, [r7, #25]
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	8b7a      	ldrh	r2, [r7, #26]
 80185d2:	1ad3      	subs	r3, r2, r3
 80185d4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80185d6:	69fb      	ldr	r3, [r7, #28]
 80185d8:	88db      	ldrh	r3, [r3, #6]
 80185da:	b29b      	uxth	r3, r3
 80185dc:	4618      	mov	r0, r3
 80185de:	f7f6 ffcb 	bl	800f578 <lwip_htons>
 80185e2:	4603      	mov	r3, r0
 80185e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80185e8:	b29b      	uxth	r3, r3
 80185ea:	00db      	lsls	r3, r3, #3
 80185ec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	685b      	ldr	r3, [r3, #4]
 80185f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80185f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185f6:	2200      	movs	r2, #0
 80185f8:	701a      	strb	r2, [r3, #0]
 80185fa:	2200      	movs	r2, #0
 80185fc:	705a      	strb	r2, [r3, #1]
 80185fe:	2200      	movs	r2, #0
 8018600:	709a      	strb	r2, [r3, #2]
 8018602:	2200      	movs	r2, #0
 8018604:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018608:	8afa      	ldrh	r2, [r7, #22]
 801860a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801860c:	8afa      	ldrh	r2, [r7, #22]
 801860e:	8b7b      	ldrh	r3, [r7, #26]
 8018610:	4413      	add	r3, r2
 8018612:	b29a      	uxth	r2, r3
 8018614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018616:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801861a:	88db      	ldrh	r3, [r3, #6]
 801861c:	b29b      	uxth	r3, r3
 801861e:	8afa      	ldrh	r2, [r7, #22]
 8018620:	429a      	cmp	r2, r3
 8018622:	d902      	bls.n	801862a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018624:	f04f 33ff 	mov.w	r3, #4294967295
 8018628:	e106      	b.n	8018838 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	685b      	ldr	r3, [r3, #4]
 801862e:	627b      	str	r3, [r7, #36]	; 0x24
 8018630:	e068      	b.n	8018704 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018634:	685b      	ldr	r3, [r3, #4]
 8018636:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801863a:	889b      	ldrh	r3, [r3, #4]
 801863c:	b29a      	uxth	r2, r3
 801863e:	693b      	ldr	r3, [r7, #16]
 8018640:	889b      	ldrh	r3, [r3, #4]
 8018642:	b29b      	uxth	r3, r3
 8018644:	429a      	cmp	r2, r3
 8018646:	d235      	bcs.n	80186b4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801864a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801864c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018650:	2b00      	cmp	r3, #0
 8018652:	d020      	beq.n	8018696 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018656:	889b      	ldrh	r3, [r3, #4]
 8018658:	b29a      	uxth	r2, r3
 801865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801865c:	88db      	ldrh	r3, [r3, #6]
 801865e:	b29b      	uxth	r3, r3
 8018660:	429a      	cmp	r2, r3
 8018662:	d307      	bcc.n	8018674 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018666:	88db      	ldrh	r3, [r3, #6]
 8018668:	b29a      	uxth	r2, r3
 801866a:	693b      	ldr	r3, [r7, #16]
 801866c:	889b      	ldrh	r3, [r3, #4]
 801866e:	b29b      	uxth	r3, r3
 8018670:	429a      	cmp	r2, r3
 8018672:	d902      	bls.n	801867a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018674:	f04f 33ff 	mov.w	r3, #4294967295
 8018678:	e0de      	b.n	8018838 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801867c:	68ba      	ldr	r2, [r7, #8]
 801867e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018682:	88db      	ldrh	r3, [r3, #6]
 8018684:	b29a      	uxth	r2, r3
 8018686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018688:	889b      	ldrh	r3, [r3, #4]
 801868a:	b29b      	uxth	r3, r3
 801868c:	429a      	cmp	r2, r3
 801868e:	d03d      	beq.n	801870c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018690:	2300      	movs	r3, #0
 8018692:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018694:	e03a      	b.n	801870c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018698:	88db      	ldrh	r3, [r3, #6]
 801869a:	b29a      	uxth	r2, r3
 801869c:	693b      	ldr	r3, [r7, #16]
 801869e:	889b      	ldrh	r3, [r3, #4]
 80186a0:	b29b      	uxth	r3, r3
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d902      	bls.n	80186ac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186a6:	f04f 33ff 	mov.w	r3, #4294967295
 80186aa:	e0c5      	b.n	8018838 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	68ba      	ldr	r2, [r7, #8]
 80186b0:	605a      	str	r2, [r3, #4]
      break;
 80186b2:	e02b      	b.n	801870c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80186b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186b6:	889b      	ldrh	r3, [r3, #4]
 80186b8:	b29a      	uxth	r2, r3
 80186ba:	693b      	ldr	r3, [r7, #16]
 80186bc:	889b      	ldrh	r3, [r3, #4]
 80186be:	b29b      	uxth	r3, r3
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d102      	bne.n	80186ca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186c4:	f04f 33ff 	mov.w	r3, #4294967295
 80186c8:	e0b6      	b.n	8018838 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80186ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186cc:	889b      	ldrh	r3, [r3, #4]
 80186ce:	b29a      	uxth	r2, r3
 80186d0:	693b      	ldr	r3, [r7, #16]
 80186d2:	88db      	ldrh	r3, [r3, #6]
 80186d4:	b29b      	uxth	r3, r3
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d202      	bcs.n	80186e0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186da:	f04f 33ff 	mov.w	r3, #4294967295
 80186de:	e0ab      	b.n	8018838 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80186e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d009      	beq.n	80186fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80186e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e8:	88db      	ldrh	r3, [r3, #6]
 80186ea:	b29a      	uxth	r2, r3
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	889b      	ldrh	r3, [r3, #4]
 80186f0:	b29b      	uxth	r3, r3
 80186f2:	429a      	cmp	r2, r3
 80186f4:	d001      	beq.n	80186fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80186f6:	2300      	movs	r3, #0
 80186f8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80186fa:	693b      	ldr	r3, [r7, #16]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018706:	2b00      	cmp	r3, #0
 8018708:	d193      	bne.n	8018632 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801870a:	e000      	b.n	801870e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801870c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018710:	2b00      	cmp	r3, #0
 8018712:	d12d      	bne.n	8018770 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018716:	2b00      	cmp	r3, #0
 8018718:	d01c      	beq.n	8018754 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801871c:	88db      	ldrh	r3, [r3, #6]
 801871e:	b29a      	uxth	r2, r3
 8018720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018722:	889b      	ldrh	r3, [r3, #4]
 8018724:	b29b      	uxth	r3, r3
 8018726:	429a      	cmp	r2, r3
 8018728:	d906      	bls.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801872a:	4b45      	ldr	r3, [pc, #276]	; (8018840 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801872c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018730:	4944      	ldr	r1, [pc, #272]	; (8018844 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018732:	4845      	ldr	r0, [pc, #276]	; (8018848 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018734:	f001 f9dc 	bl	8019af0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801873a:	68ba      	ldr	r2, [r7, #8]
 801873c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018740:	88db      	ldrh	r3, [r3, #6]
 8018742:	b29a      	uxth	r2, r3
 8018744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018746:	889b      	ldrh	r3, [r3, #4]
 8018748:	b29b      	uxth	r3, r3
 801874a:	429a      	cmp	r2, r3
 801874c:	d010      	beq.n	8018770 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801874e:	2300      	movs	r3, #0
 8018750:	623b      	str	r3, [r7, #32]
 8018752:	e00d      	b.n	8018770 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	685b      	ldr	r3, [r3, #4]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d006      	beq.n	801876a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801875c:	4b38      	ldr	r3, [pc, #224]	; (8018840 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801875e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018762:	493a      	ldr	r1, [pc, #232]	; (801884c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018764:	4838      	ldr	r0, [pc, #224]	; (8018848 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018766:	f001 f9c3 	bl	8019af0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	68ba      	ldr	r2, [r7, #8]
 801876e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d105      	bne.n	8018782 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	7f9b      	ldrb	r3, [r3, #30]
 801877a:	f003 0301 	and.w	r3, r3, #1
 801877e:	2b00      	cmp	r3, #0
 8018780:	d059      	beq.n	8018836 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018782:	6a3b      	ldr	r3, [r7, #32]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d04f      	beq.n	8018828 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	685b      	ldr	r3, [r3, #4]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d006      	beq.n	801879e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	685b      	ldr	r3, [r3, #4]
 8018794:	685b      	ldr	r3, [r3, #4]
 8018796:	889b      	ldrh	r3, [r3, #4]
 8018798:	b29b      	uxth	r3, r3
 801879a:	2b00      	cmp	r3, #0
 801879c:	d002      	beq.n	80187a4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801879e:	2300      	movs	r3, #0
 80187a0:	623b      	str	r3, [r7, #32]
 80187a2:	e041      	b.n	8018828 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80187a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80187a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80187ae:	e012      	b.n	80187d6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80187b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b2:	685b      	ldr	r3, [r3, #4]
 80187b4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80187b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b8:	88db      	ldrh	r3, [r3, #6]
 80187ba:	b29a      	uxth	r2, r3
 80187bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187be:	889b      	ldrh	r3, [r3, #4]
 80187c0:	b29b      	uxth	r3, r3
 80187c2:	429a      	cmp	r2, r3
 80187c4:	d002      	beq.n	80187cc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80187c6:	2300      	movs	r3, #0
 80187c8:	623b      	str	r3, [r7, #32]
            break;
 80187ca:	e007      	b.n	80187dc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80187cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ce:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80187d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80187d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d1e9      	bne.n	80187b0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80187dc:	6a3b      	ldr	r3, [r7, #32]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d022      	beq.n	8018828 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	685b      	ldr	r3, [r3, #4]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d106      	bne.n	80187f8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80187ea:	4b15      	ldr	r3, [pc, #84]	; (8018840 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80187ec:	f240 12df 	movw	r2, #479	; 0x1df
 80187f0:	4917      	ldr	r1, [pc, #92]	; (8018850 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80187f2:	4815      	ldr	r0, [pc, #84]	; (8018848 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80187f4:	f001 f97c 	bl	8019af0 <iprintf>
          LWIP_ASSERT("sanity check",
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	685b      	ldr	r3, [r3, #4]
 80187fc:	685b      	ldr	r3, [r3, #4]
 80187fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018800:	429a      	cmp	r2, r3
 8018802:	d106      	bne.n	8018812 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018804:	4b0e      	ldr	r3, [pc, #56]	; (8018840 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018806:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801880a:	4911      	ldr	r1, [pc, #68]	; (8018850 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801880c:	480e      	ldr	r0, [pc, #56]	; (8018848 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801880e:	f001 f96f 	bl	8019af0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d006      	beq.n	8018828 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801881a:	4b09      	ldr	r3, [pc, #36]	; (8018840 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801881c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018820:	490c      	ldr	r1, [pc, #48]	; (8018854 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018822:	4809      	ldr	r0, [pc, #36]	; (8018848 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018824:	f001 f964 	bl	8019af0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018828:	6a3b      	ldr	r3, [r7, #32]
 801882a:	2b00      	cmp	r3, #0
 801882c:	bf14      	ite	ne
 801882e:	2301      	movne	r3, #1
 8018830:	2300      	moveq	r3, #0
 8018832:	b2db      	uxtb	r3, r3
 8018834:	e000      	b.n	8018838 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018836:	2300      	movs	r3, #0
}
 8018838:	4618      	mov	r0, r3
 801883a:	3730      	adds	r7, #48	; 0x30
 801883c:	46bd      	mov	sp, r7
 801883e:	bd80      	pop	{r7, pc}
 8018840:	0801eb44 	.word	0x0801eb44
 8018844:	0801ec28 	.word	0x0801ec28
 8018848:	0801eb8c 	.word	0x0801eb8c
 801884c:	0801ec48 	.word	0x0801ec48
 8018850:	0801ec80 	.word	0x0801ec80
 8018854:	0801ec90 	.word	0x0801ec90

08018858 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b08e      	sub	sp, #56	; 0x38
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	685b      	ldr	r3, [r3, #4]
 8018864:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018868:	781b      	ldrb	r3, [r3, #0]
 801886a:	f003 030f 	and.w	r3, r3, #15
 801886e:	b2db      	uxtb	r3, r3
 8018870:	009b      	lsls	r3, r3, #2
 8018872:	b2db      	uxtb	r3, r3
 8018874:	2b14      	cmp	r3, #20
 8018876:	f040 8171 	bne.w	8018b5c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801887c:	88db      	ldrh	r3, [r3, #6]
 801887e:	b29b      	uxth	r3, r3
 8018880:	4618      	mov	r0, r3
 8018882:	f7f6 fe79 	bl	800f578 <lwip_htons>
 8018886:	4603      	mov	r3, r0
 8018888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801888c:	b29b      	uxth	r3, r3
 801888e:	00db      	lsls	r3, r3, #3
 8018890:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018894:	885b      	ldrh	r3, [r3, #2]
 8018896:	b29b      	uxth	r3, r3
 8018898:	4618      	mov	r0, r3
 801889a:	f7f6 fe6d 	bl	800f578 <lwip_htons>
 801889e:	4603      	mov	r3, r0
 80188a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80188a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188a4:	781b      	ldrb	r3, [r3, #0]
 80188a6:	f003 030f 	and.w	r3, r3, #15
 80188aa:	b2db      	uxtb	r3, r3
 80188ac:	009b      	lsls	r3, r3, #2
 80188ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80188b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80188b6:	b29b      	uxth	r3, r3
 80188b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80188ba:	429a      	cmp	r2, r3
 80188bc:	f0c0 8150 	bcc.w	8018b60 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80188c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80188c4:	b29b      	uxth	r3, r3
 80188c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80188c8:	1ad3      	subs	r3, r2, r3
 80188ca:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80188cc:	6878      	ldr	r0, [r7, #4]
 80188ce:	f7f8 fabf 	bl	8010e50 <pbuf_clen>
 80188d2:	4603      	mov	r3, r0
 80188d4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80188d6:	4b8c      	ldr	r3, [pc, #560]	; (8018b08 <ip4_reass+0x2b0>)
 80188d8:	881b      	ldrh	r3, [r3, #0]
 80188da:	461a      	mov	r2, r3
 80188dc:	8c3b      	ldrh	r3, [r7, #32]
 80188de:	4413      	add	r3, r2
 80188e0:	2b0a      	cmp	r3, #10
 80188e2:	dd10      	ble.n	8018906 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80188e4:	8c3b      	ldrh	r3, [r7, #32]
 80188e6:	4619      	mov	r1, r3
 80188e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188ea:	f7ff fd81 	bl	80183f0 <ip_reass_remove_oldest_datagram>
 80188ee:	4603      	mov	r3, r0
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	f000 8137 	beq.w	8018b64 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80188f6:	4b84      	ldr	r3, [pc, #528]	; (8018b08 <ip4_reass+0x2b0>)
 80188f8:	881b      	ldrh	r3, [r3, #0]
 80188fa:	461a      	mov	r2, r3
 80188fc:	8c3b      	ldrh	r3, [r7, #32]
 80188fe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018900:	2b0a      	cmp	r3, #10
 8018902:	f300 812f 	bgt.w	8018b64 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018906:	4b81      	ldr	r3, [pc, #516]	; (8018b0c <ip4_reass+0x2b4>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	633b      	str	r3, [r7, #48]	; 0x30
 801890c:	e015      	b.n	801893a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018910:	695a      	ldr	r2, [r3, #20]
 8018912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018914:	68db      	ldr	r3, [r3, #12]
 8018916:	429a      	cmp	r2, r3
 8018918:	d10c      	bne.n	8018934 <ip4_reass+0xdc>
 801891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801891c:	699a      	ldr	r2, [r3, #24]
 801891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018920:	691b      	ldr	r3, [r3, #16]
 8018922:	429a      	cmp	r2, r3
 8018924:	d106      	bne.n	8018934 <ip4_reass+0xdc>
 8018926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018928:	899a      	ldrh	r2, [r3, #12]
 801892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801892c:	889b      	ldrh	r3, [r3, #4]
 801892e:	b29b      	uxth	r3, r3
 8018930:	429a      	cmp	r2, r3
 8018932:	d006      	beq.n	8018942 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	633b      	str	r3, [r7, #48]	; 0x30
 801893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801893c:	2b00      	cmp	r3, #0
 801893e:	d1e6      	bne.n	801890e <ip4_reass+0xb6>
 8018940:	e000      	b.n	8018944 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018942:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018946:	2b00      	cmp	r3, #0
 8018948:	d109      	bne.n	801895e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801894a:	8c3b      	ldrh	r3, [r7, #32]
 801894c:	4619      	mov	r1, r3
 801894e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018950:	f7ff fdb0 	bl	80184b4 <ip_reass_enqueue_new_datagram>
 8018954:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018958:	2b00      	cmp	r3, #0
 801895a:	d11c      	bne.n	8018996 <ip4_reass+0x13e>
      goto nullreturn;
 801895c:	e105      	b.n	8018b6a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018960:	88db      	ldrh	r3, [r3, #6]
 8018962:	b29b      	uxth	r3, r3
 8018964:	4618      	mov	r0, r3
 8018966:	f7f6 fe07 	bl	800f578 <lwip_htons>
 801896a:	4603      	mov	r3, r0
 801896c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018970:	2b00      	cmp	r3, #0
 8018972:	d110      	bne.n	8018996 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018976:	89db      	ldrh	r3, [r3, #14]
 8018978:	4618      	mov	r0, r3
 801897a:	f7f6 fdfd 	bl	800f578 <lwip_htons>
 801897e:	4603      	mov	r3, r0
 8018980:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018984:	2b00      	cmp	r3, #0
 8018986:	d006      	beq.n	8018996 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801898a:	3308      	adds	r3, #8
 801898c:	2214      	movs	r2, #20
 801898e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018990:	4618      	mov	r0, r3
 8018992:	f001 fa7c 	bl	8019e8e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018998:	88db      	ldrh	r3, [r3, #6]
 801899a:	b29b      	uxth	r3, r3
 801899c:	f003 0320 	and.w	r3, r3, #32
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	bf0c      	ite	eq
 80189a4:	2301      	moveq	r3, #1
 80189a6:	2300      	movne	r3, #0
 80189a8:	b2db      	uxtb	r3, r3
 80189aa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80189ac:	69fb      	ldr	r3, [r7, #28]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d00e      	beq.n	80189d0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80189b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80189b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80189b6:	4413      	add	r3, r2
 80189b8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80189ba:	8b7a      	ldrh	r2, [r7, #26]
 80189bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80189be:	429a      	cmp	r2, r3
 80189c0:	f0c0 80a0 	bcc.w	8018b04 <ip4_reass+0x2ac>
 80189c4:	8b7b      	ldrh	r3, [r7, #26]
 80189c6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80189ca:	4293      	cmp	r3, r2
 80189cc:	f200 809a 	bhi.w	8018b04 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80189d0:	69fa      	ldr	r2, [r7, #28]
 80189d2:	6879      	ldr	r1, [r7, #4]
 80189d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80189d6:	f7ff fdd5 	bl	8018584 <ip_reass_chain_frag_into_datagram_and_validate>
 80189da:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80189dc:	697b      	ldr	r3, [r7, #20]
 80189de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189e2:	f000 809b 	beq.w	8018b1c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80189e6:	4b48      	ldr	r3, [pc, #288]	; (8018b08 <ip4_reass+0x2b0>)
 80189e8:	881a      	ldrh	r2, [r3, #0]
 80189ea:	8c3b      	ldrh	r3, [r7, #32]
 80189ec:	4413      	add	r3, r2
 80189ee:	b29a      	uxth	r2, r3
 80189f0:	4b45      	ldr	r3, [pc, #276]	; (8018b08 <ip4_reass+0x2b0>)
 80189f2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80189f4:	69fb      	ldr	r3, [r7, #28]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d00d      	beq.n	8018a16 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80189fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80189fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80189fe:	4413      	add	r3, r2
 8018a00:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a04:	8a7a      	ldrh	r2, [r7, #18]
 8018a06:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a0a:	7f9b      	ldrb	r3, [r3, #30]
 8018a0c:	f043 0301 	orr.w	r3, r3, #1
 8018a10:	b2da      	uxtb	r2, r3
 8018a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a14:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018a16:	697b      	ldr	r3, [r7, #20]
 8018a18:	2b01      	cmp	r3, #1
 8018a1a:	d171      	bne.n	8018b00 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a1e:	8b9b      	ldrh	r3, [r3, #28]
 8018a20:	3314      	adds	r3, #20
 8018a22:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a26:	685b      	ldr	r3, [r3, #4]
 8018a28:	685b      	ldr	r3, [r3, #4]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a30:	685b      	ldr	r3, [r3, #4]
 8018a32:	685b      	ldr	r3, [r3, #4]
 8018a34:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a38:	3308      	adds	r3, #8
 8018a3a:	2214      	movs	r2, #20
 8018a3c:	4619      	mov	r1, r3
 8018a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a40:	f001 fa25 	bl	8019e8e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018a44:	8a3b      	ldrh	r3, [r7, #16]
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7f6 fd96 	bl	800f578 <lwip_htons>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	461a      	mov	r2, r3
 8018a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a52:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a56:	2200      	movs	r2, #0
 8018a58:	719a      	strb	r2, [r3, #6]
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a60:	2200      	movs	r2, #0
 8018a62:	729a      	strb	r2, [r3, #10]
 8018a64:	2200      	movs	r2, #0
 8018a66:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a6a:	685b      	ldr	r3, [r3, #4]
 8018a6c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018a6e:	e00d      	b.n	8018a8c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a72:	685b      	ldr	r3, [r3, #4]
 8018a74:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018a76:	2114      	movs	r1, #20
 8018a78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018a7a:	f7f8 f8db 	bl	8010c34 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018a7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018a80:	6878      	ldr	r0, [r7, #4]
 8018a82:	f7f8 fa1f 	bl	8010ec4 <pbuf_cat>
      r = iprh->next_pbuf;
 8018a86:	68fb      	ldr	r3, [r7, #12]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d1ee      	bne.n	8018a70 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018a92:	4b1e      	ldr	r3, [pc, #120]	; (8018b0c <ip4_reass+0x2b4>)
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a98:	429a      	cmp	r2, r3
 8018a9a:	d102      	bne.n	8018aa2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018aa0:	e010      	b.n	8018ac4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018aa2:	4b1a      	ldr	r3, [pc, #104]	; (8018b0c <ip4_reass+0x2b4>)
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018aa8:	e007      	b.n	8018aba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ab0:	429a      	cmp	r2, r3
 8018ab2:	d006      	beq.n	8018ac2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d1f4      	bne.n	8018aaa <ip4_reass+0x252>
 8018ac0:	e000      	b.n	8018ac4 <ip4_reass+0x26c>
          break;
 8018ac2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ac8:	f7ff fd2e 	bl	8018528 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	f7f8 f9bf 	bl	8010e50 <pbuf_clen>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018ad6:	4b0c      	ldr	r3, [pc, #48]	; (8018b08 <ip4_reass+0x2b0>)
 8018ad8:	881b      	ldrh	r3, [r3, #0]
 8018ada:	8c3a      	ldrh	r2, [r7, #32]
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d906      	bls.n	8018aee <ip4_reass+0x296>
 8018ae0:	4b0b      	ldr	r3, [pc, #44]	; (8018b10 <ip4_reass+0x2b8>)
 8018ae2:	f240 229b 	movw	r2, #667	; 0x29b
 8018ae6:	490b      	ldr	r1, [pc, #44]	; (8018b14 <ip4_reass+0x2bc>)
 8018ae8:	480b      	ldr	r0, [pc, #44]	; (8018b18 <ip4_reass+0x2c0>)
 8018aea:	f001 f801 	bl	8019af0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018aee:	4b06      	ldr	r3, [pc, #24]	; (8018b08 <ip4_reass+0x2b0>)
 8018af0:	881a      	ldrh	r2, [r3, #0]
 8018af2:	8c3b      	ldrh	r3, [r7, #32]
 8018af4:	1ad3      	subs	r3, r2, r3
 8018af6:	b29a      	uxth	r2, r3
 8018af8:	4b03      	ldr	r3, [pc, #12]	; (8018b08 <ip4_reass+0x2b0>)
 8018afa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	e038      	b.n	8018b72 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018b00:	2300      	movs	r3, #0
 8018b02:	e036      	b.n	8018b72 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018b04:	bf00      	nop
 8018b06:	e00a      	b.n	8018b1e <ip4_reass+0x2c6>
 8018b08:	20007228 	.word	0x20007228
 8018b0c:	20007224 	.word	0x20007224
 8018b10:	0801eb44 	.word	0x0801eb44
 8018b14:	0801ecb4 	.word	0x0801ecb4
 8018b18:	0801eb8c 	.word	0x0801eb8c
    goto nullreturn_ipr;
 8018b1c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d106      	bne.n	8018b32 <ip4_reass+0x2da>
 8018b24:	4b15      	ldr	r3, [pc, #84]	; (8018b7c <ip4_reass+0x324>)
 8018b26:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018b2a:	4915      	ldr	r1, [pc, #84]	; (8018b80 <ip4_reass+0x328>)
 8018b2c:	4815      	ldr	r0, [pc, #84]	; (8018b84 <ip4_reass+0x32c>)
 8018b2e:	f000 ffdf 	bl	8019af0 <iprintf>
  if (ipr->p == NULL) {
 8018b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b34:	685b      	ldr	r3, [r3, #4]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d116      	bne.n	8018b68 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018b3a:	4b13      	ldr	r3, [pc, #76]	; (8018b88 <ip4_reass+0x330>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b40:	429a      	cmp	r2, r3
 8018b42:	d006      	beq.n	8018b52 <ip4_reass+0x2fa>
 8018b44:	4b0d      	ldr	r3, [pc, #52]	; (8018b7c <ip4_reass+0x324>)
 8018b46:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018b4a:	4910      	ldr	r1, [pc, #64]	; (8018b8c <ip4_reass+0x334>)
 8018b4c:	480d      	ldr	r0, [pc, #52]	; (8018b84 <ip4_reass+0x32c>)
 8018b4e:	f000 ffcf 	bl	8019af0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018b52:	2100      	movs	r1, #0
 8018b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b56:	f7ff fce7 	bl	8018528 <ip_reass_dequeue_datagram>
 8018b5a:	e006      	b.n	8018b6a <ip4_reass+0x312>
    goto nullreturn;
 8018b5c:	bf00      	nop
 8018b5e:	e004      	b.n	8018b6a <ip4_reass+0x312>
    goto nullreturn;
 8018b60:	bf00      	nop
 8018b62:	e002      	b.n	8018b6a <ip4_reass+0x312>
      goto nullreturn;
 8018b64:	bf00      	nop
 8018b66:	e000      	b.n	8018b6a <ip4_reass+0x312>
  }

nullreturn:
 8018b68:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018b6a:	6878      	ldr	r0, [r7, #4]
 8018b6c:	f7f8 f8e8 	bl	8010d40 <pbuf_free>
  return NULL;
 8018b70:	2300      	movs	r3, #0
}
 8018b72:	4618      	mov	r0, r3
 8018b74:	3738      	adds	r7, #56	; 0x38
 8018b76:	46bd      	mov	sp, r7
 8018b78:	bd80      	pop	{r7, pc}
 8018b7a:	bf00      	nop
 8018b7c:	0801eb44 	.word	0x0801eb44
 8018b80:	0801ecd0 	.word	0x0801ecd0
 8018b84:	0801eb8c 	.word	0x0801eb8c
 8018b88:	20007224 	.word	0x20007224
 8018b8c:	0801ecdc 	.word	0x0801ecdc

08018b90 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018b94:	2005      	movs	r0, #5
 8018b96:	f7f7 fa0d 	bl	800ffb4 <memp_malloc>
 8018b9a:	4603      	mov	r3, r0
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	bd80      	pop	{r7, pc}

08018ba0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b082      	sub	sp, #8
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d106      	bne.n	8018bbc <ip_frag_free_pbuf_custom_ref+0x1c>
 8018bae:	4b07      	ldr	r3, [pc, #28]	; (8018bcc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018bb0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018bb4:	4906      	ldr	r1, [pc, #24]	; (8018bd0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018bb6:	4807      	ldr	r0, [pc, #28]	; (8018bd4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018bb8:	f000 ff9a 	bl	8019af0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018bbc:	6879      	ldr	r1, [r7, #4]
 8018bbe:	2005      	movs	r0, #5
 8018bc0:	f7f7 fa68 	bl	8010094 <memp_free>
}
 8018bc4:	bf00      	nop
 8018bc6:	3708      	adds	r7, #8
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}
 8018bcc:	0801eb44 	.word	0x0801eb44
 8018bd0:	0801ecfc 	.word	0x0801ecfc
 8018bd4:	0801eb8c 	.word	0x0801eb8c

08018bd8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b084      	sub	sp, #16
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d106      	bne.n	8018bf8 <ipfrag_free_pbuf_custom+0x20>
 8018bea:	4b11      	ldr	r3, [pc, #68]	; (8018c30 <ipfrag_free_pbuf_custom+0x58>)
 8018bec:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018bf0:	4910      	ldr	r1, [pc, #64]	; (8018c34 <ipfrag_free_pbuf_custom+0x5c>)
 8018bf2:	4811      	ldr	r0, [pc, #68]	; (8018c38 <ipfrag_free_pbuf_custom+0x60>)
 8018bf4:	f000 ff7c 	bl	8019af0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018bf8:	68fa      	ldr	r2, [r7, #12]
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	429a      	cmp	r2, r3
 8018bfe:	d006      	beq.n	8018c0e <ipfrag_free_pbuf_custom+0x36>
 8018c00:	4b0b      	ldr	r3, [pc, #44]	; (8018c30 <ipfrag_free_pbuf_custom+0x58>)
 8018c02:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018c06:	490d      	ldr	r1, [pc, #52]	; (8018c3c <ipfrag_free_pbuf_custom+0x64>)
 8018c08:	480b      	ldr	r0, [pc, #44]	; (8018c38 <ipfrag_free_pbuf_custom+0x60>)
 8018c0a:	f000 ff71 	bl	8019af0 <iprintf>
  if (pcr->original != NULL) {
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	695b      	ldr	r3, [r3, #20]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d004      	beq.n	8018c20 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	695b      	ldr	r3, [r3, #20]
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	f7f8 f890 	bl	8010d40 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018c20:	68f8      	ldr	r0, [r7, #12]
 8018c22:	f7ff ffbd 	bl	8018ba0 <ip_frag_free_pbuf_custom_ref>
}
 8018c26:	bf00      	nop
 8018c28:	3710      	adds	r7, #16
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bd80      	pop	{r7, pc}
 8018c2e:	bf00      	nop
 8018c30:	0801eb44 	.word	0x0801eb44
 8018c34:	0801ed08 	.word	0x0801ed08
 8018c38:	0801eb8c 	.word	0x0801eb8c
 8018c3c:	0801ed14 	.word	0x0801ed14

08018c40 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b094      	sub	sp, #80	; 0x50
 8018c44:	af02      	add	r7, sp, #8
 8018c46:	60f8      	str	r0, [r7, #12]
 8018c48:	60b9      	str	r1, [r7, #8]
 8018c4a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018c52:	68bb      	ldr	r3, [r7, #8]
 8018c54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018c56:	3b14      	subs	r3, #20
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	da00      	bge.n	8018c5e <ip4_frag+0x1e>
 8018c5c:	3307      	adds	r3, #7
 8018c5e:	10db      	asrs	r3, r3, #3
 8018c60:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018c62:	2314      	movs	r3, #20
 8018c64:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	685b      	ldr	r3, [r3, #4]
 8018c6a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c72:	781b      	ldrb	r3, [r3, #0]
 8018c74:	f003 030f 	and.w	r3, r3, #15
 8018c78:	b2db      	uxtb	r3, r3
 8018c7a:	009b      	lsls	r3, r3, #2
 8018c7c:	b2db      	uxtb	r3, r3
 8018c7e:	2b14      	cmp	r3, #20
 8018c80:	d002      	beq.n	8018c88 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018c82:	f06f 0305 	mvn.w	r3, #5
 8018c86:	e110      	b.n	8018eaa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	895b      	ldrh	r3, [r3, #10]
 8018c8c:	2b13      	cmp	r3, #19
 8018c8e:	d809      	bhi.n	8018ca4 <ip4_frag+0x64>
 8018c90:	4b88      	ldr	r3, [pc, #544]	; (8018eb4 <ip4_frag+0x274>)
 8018c92:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018c96:	4988      	ldr	r1, [pc, #544]	; (8018eb8 <ip4_frag+0x278>)
 8018c98:	4888      	ldr	r0, [pc, #544]	; (8018ebc <ip4_frag+0x27c>)
 8018c9a:	f000 ff29 	bl	8019af0 <iprintf>
 8018c9e:	f06f 0305 	mvn.w	r3, #5
 8018ca2:	e102      	b.n	8018eaa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca6:	88db      	ldrh	r3, [r3, #6]
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	4618      	mov	r0, r3
 8018cac:	f7f6 fc64 	bl	800f578 <lwip_htons>
 8018cb0:	4603      	mov	r3, r0
 8018cb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018cb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018cb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018cba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018cbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	891b      	ldrh	r3, [r3, #8]
 8018cca:	3b14      	subs	r3, #20
 8018ccc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018cd0:	e0e1      	b.n	8018e96 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018cd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018cd4:	00db      	lsls	r3, r3, #3
 8018cd6:	b29b      	uxth	r3, r3
 8018cd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018cdc:	4293      	cmp	r3, r2
 8018cde:	bf28      	it	cs
 8018ce0:	4613      	movcs	r3, r2
 8018ce2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018ce4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018ce8:	2114      	movs	r1, #20
 8018cea:	200e      	movs	r0, #14
 8018cec:	f7f7 fd44 	bl	8010778 <pbuf_alloc>
 8018cf0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	f000 80d5 	beq.w	8018ea4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cfc:	895b      	ldrh	r3, [r3, #10]
 8018cfe:	2b13      	cmp	r3, #19
 8018d00:	d806      	bhi.n	8018d10 <ip4_frag+0xd0>
 8018d02:	4b6c      	ldr	r3, [pc, #432]	; (8018eb4 <ip4_frag+0x274>)
 8018d04:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018d08:	496d      	ldr	r1, [pc, #436]	; (8018ec0 <ip4_frag+0x280>)
 8018d0a:	486c      	ldr	r0, [pc, #432]	; (8018ebc <ip4_frag+0x27c>)
 8018d0c:	f000 fef0 	bl	8019af0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d12:	685b      	ldr	r3, [r3, #4]
 8018d14:	2214      	movs	r2, #20
 8018d16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018d18:	4618      	mov	r0, r3
 8018d1a:	f001 f8b8 	bl	8019e8e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d20:	685b      	ldr	r3, [r3, #4]
 8018d22:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018d24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018d26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018d2a:	e064      	b.n	8018df6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	895a      	ldrh	r2, [r3, #10]
 8018d30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d32:	1ad3      	subs	r3, r2, r3
 8018d34:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	895b      	ldrh	r3, [r3, #10]
 8018d3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d906      	bls.n	8018d4e <ip4_frag+0x10e>
 8018d40:	4b5c      	ldr	r3, [pc, #368]	; (8018eb4 <ip4_frag+0x274>)
 8018d42:	f240 322d 	movw	r2, #813	; 0x32d
 8018d46:	495f      	ldr	r1, [pc, #380]	; (8018ec4 <ip4_frag+0x284>)
 8018d48:	485c      	ldr	r0, [pc, #368]	; (8018ebc <ip4_frag+0x27c>)
 8018d4a:	f000 fed1 	bl	8019af0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018d4e:	8bfa      	ldrh	r2, [r7, #30]
 8018d50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018d54:	4293      	cmp	r3, r2
 8018d56:	bf28      	it	cs
 8018d58:	4613      	movcs	r3, r2
 8018d5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018d5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d105      	bne.n	8018d72 <ip4_frag+0x132>
        poff = 0;
 8018d66:	2300      	movs	r3, #0
 8018d68:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	60fb      	str	r3, [r7, #12]
        continue;
 8018d70:	e041      	b.n	8018df6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018d72:	f7ff ff0d 	bl	8018b90 <ip_frag_alloc_pbuf_custom_ref>
 8018d76:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018d78:	69bb      	ldr	r3, [r7, #24]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d103      	bne.n	8018d86 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d80:	f7f7 ffde 	bl	8010d40 <pbuf_free>
        goto memerr;
 8018d84:	e08f      	b.n	8018ea6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d86:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d8e:	4413      	add	r3, r2
 8018d90:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018d94:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018d98:	9201      	str	r2, [sp, #4]
 8018d9a:	9300      	str	r3, [sp, #0]
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	2241      	movs	r2, #65	; 0x41
 8018da0:	2000      	movs	r0, #0
 8018da2:	f7f7 fe15 	bl	80109d0 <pbuf_alloced_custom>
 8018da6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d106      	bne.n	8018dbc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018dae:	69b8      	ldr	r0, [r7, #24]
 8018db0:	f7ff fef6 	bl	8018ba0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018db6:	f7f7 ffc3 	bl	8010d40 <pbuf_free>
        goto memerr;
 8018dba:	e074      	b.n	8018ea6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018dbc:	68f8      	ldr	r0, [r7, #12]
 8018dbe:	f7f8 f85f 	bl	8010e80 <pbuf_ref>
      pcr->original = p;
 8018dc2:	69bb      	ldr	r3, [r7, #24]
 8018dc4:	68fa      	ldr	r2, [r7, #12]
 8018dc6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018dc8:	69bb      	ldr	r3, [r7, #24]
 8018dca:	4a3f      	ldr	r2, [pc, #252]	; (8018ec8 <ip4_frag+0x288>)
 8018dcc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018dce:	6979      	ldr	r1, [r7, #20]
 8018dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018dd2:	f7f8 f877 	bl	8010ec4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018dd6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018dda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018dde:	1ad3      	subs	r3, r2, r3
 8018de0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018de4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d004      	beq.n	8018df6 <ip4_frag+0x1b6>
        poff = 0;
 8018dec:	2300      	movs	r3, #0
 8018dee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018df6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d196      	bne.n	8018d2c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018dfe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018e00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018e04:	4413      	add	r3, r2
 8018e06:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018e0c:	f1a3 0213 	sub.w	r2, r3, #19
 8018e10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018e14:	429a      	cmp	r2, r3
 8018e16:	bfcc      	ite	gt
 8018e18:	2301      	movgt	r3, #1
 8018e1a:	2300      	movle	r3, #0
 8018e1c:	b2db      	uxtb	r3, r3
 8018e1e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018e20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018e2a:	6a3b      	ldr	r3, [r7, #32]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d002      	beq.n	8018e36 <ip4_frag+0x1f6>
 8018e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d003      	beq.n	8018e3e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018e36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018e3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018e3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e40:	4618      	mov	r0, r3
 8018e42:	f7f6 fb99 	bl	800f578 <lwip_htons>
 8018e46:	4603      	mov	r3, r0
 8018e48:	461a      	mov	r2, r3
 8018e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e4c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018e4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018e50:	3314      	adds	r3, #20
 8018e52:	b29b      	uxth	r3, r3
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7f6 fb8f 	bl	800f578 <lwip_htons>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	461a      	mov	r2, r3
 8018e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e60:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e64:	2200      	movs	r2, #0
 8018e66:	729a      	strb	r2, [r3, #10]
 8018e68:	2200      	movs	r2, #0
 8018e6a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	695b      	ldr	r3, [r3, #20]
 8018e70:	687a      	ldr	r2, [r7, #4]
 8018e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018e74:	68b8      	ldr	r0, [r7, #8]
 8018e76:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e7a:	f7f7 ff61 	bl	8010d40 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018e7e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018e82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018e84:	1ad3      	subs	r3, r2, r3
 8018e86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018e8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018e8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018e90:	4413      	add	r3, r2
 8018e92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018e96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	f47f af19 	bne.w	8018cd2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	e002      	b.n	8018eaa <ip4_frag+0x26a>
      goto memerr;
 8018ea4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3748      	adds	r7, #72	; 0x48
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}
 8018eb2:	bf00      	nop
 8018eb4:	0801eb44 	.word	0x0801eb44
 8018eb8:	0801ed20 	.word	0x0801ed20
 8018ebc:	0801eb8c 	.word	0x0801eb8c
 8018ec0:	0801ed3c 	.word	0x0801ed3c
 8018ec4:	0801ed5c 	.word	0x0801ed5c
 8018ec8:	08018bd9 	.word	0x08018bd9

08018ecc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018ecc:	b580      	push	{r7, lr}
 8018ece:	b086      	sub	sp, #24
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
 8018ed4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018ed6:	230e      	movs	r3, #14
 8018ed8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	895b      	ldrh	r3, [r3, #10]
 8018ede:	2b0e      	cmp	r3, #14
 8018ee0:	d96e      	bls.n	8018fc0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	7bdb      	ldrb	r3, [r3, #15]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d106      	bne.n	8018ef8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018eea:	683b      	ldr	r3, [r7, #0]
 8018eec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018ef0:	3301      	adds	r3, #1
 8018ef2:	b2da      	uxtb	r2, r3
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	685b      	ldr	r3, [r3, #4]
 8018efc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	7b1a      	ldrb	r2, [r3, #12]
 8018f02:	7b5b      	ldrb	r3, [r3, #13]
 8018f04:	021b      	lsls	r3, r3, #8
 8018f06:	4313      	orrs	r3, r2
 8018f08:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018f0a:	693b      	ldr	r3, [r7, #16]
 8018f0c:	781b      	ldrb	r3, [r3, #0]
 8018f0e:	f003 0301 	and.w	r3, r3, #1
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d023      	beq.n	8018f5e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018f16:	693b      	ldr	r3, [r7, #16]
 8018f18:	781b      	ldrb	r3, [r3, #0]
 8018f1a:	2b01      	cmp	r3, #1
 8018f1c:	d10f      	bne.n	8018f3e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018f1e:	693b      	ldr	r3, [r7, #16]
 8018f20:	785b      	ldrb	r3, [r3, #1]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d11b      	bne.n	8018f5e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018f26:	693b      	ldr	r3, [r7, #16]
 8018f28:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018f2a:	2b5e      	cmp	r3, #94	; 0x5e
 8018f2c:	d117      	bne.n	8018f5e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	7b5b      	ldrb	r3, [r3, #13]
 8018f32:	f043 0310 	orr.w	r3, r3, #16
 8018f36:	b2da      	uxtb	r2, r3
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	735a      	strb	r2, [r3, #13]
 8018f3c:	e00f      	b.n	8018f5e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018f3e:	693b      	ldr	r3, [r7, #16]
 8018f40:	2206      	movs	r2, #6
 8018f42:	4928      	ldr	r1, [pc, #160]	; (8018fe4 <ethernet_input+0x118>)
 8018f44:	4618      	mov	r0, r3
 8018f46:	f000 ff19 	bl	8019d7c <memcmp>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d106      	bne.n	8018f5e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	7b5b      	ldrb	r3, [r3, #13]
 8018f54:	f043 0308 	orr.w	r3, r3, #8
 8018f58:	b2da      	uxtb	r2, r3
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018f5e:	89fb      	ldrh	r3, [r7, #14]
 8018f60:	2b08      	cmp	r3, #8
 8018f62:	d003      	beq.n	8018f6c <ethernet_input+0xa0>
 8018f64:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018f68:	d014      	beq.n	8018f94 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018f6a:	e032      	b.n	8018fd2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f6c:	683b      	ldr	r3, [r7, #0]
 8018f6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018f72:	f003 0308 	and.w	r3, r3, #8
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d024      	beq.n	8018fc4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018f7a:	8afb      	ldrh	r3, [r7, #22]
 8018f7c:	4619      	mov	r1, r3
 8018f7e:	6878      	ldr	r0, [r7, #4]
 8018f80:	f7f7 fe58 	bl	8010c34 <pbuf_remove_header>
 8018f84:	4603      	mov	r3, r0
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d11e      	bne.n	8018fc8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018f8a:	6839      	ldr	r1, [r7, #0]
 8018f8c:	6878      	ldr	r0, [r7, #4]
 8018f8e:	f7fe ff21 	bl	8017dd4 <ip4_input>
      break;
 8018f92:	e013      	b.n	8018fbc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f94:	683b      	ldr	r3, [r7, #0]
 8018f96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018f9a:	f003 0308 	and.w	r3, r3, #8
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d014      	beq.n	8018fcc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018fa2:	8afb      	ldrh	r3, [r7, #22]
 8018fa4:	4619      	mov	r1, r3
 8018fa6:	6878      	ldr	r0, [r7, #4]
 8018fa8:	f7f7 fe44 	bl	8010c34 <pbuf_remove_header>
 8018fac:	4603      	mov	r3, r0
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d10e      	bne.n	8018fd0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018fb2:	6839      	ldr	r1, [r7, #0]
 8018fb4:	6878      	ldr	r0, [r7, #4]
 8018fb6:	f7fe f89b 	bl	80170f0 <etharp_input>
      break;
 8018fba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	e00c      	b.n	8018fda <ethernet_input+0x10e>
    goto free_and_return;
 8018fc0:	bf00      	nop
 8018fc2:	e006      	b.n	8018fd2 <ethernet_input+0x106>
        goto free_and_return;
 8018fc4:	bf00      	nop
 8018fc6:	e004      	b.n	8018fd2 <ethernet_input+0x106>
        goto free_and_return;
 8018fc8:	bf00      	nop
 8018fca:	e002      	b.n	8018fd2 <ethernet_input+0x106>
        goto free_and_return;
 8018fcc:	bf00      	nop
 8018fce:	e000      	b.n	8018fd2 <ethernet_input+0x106>
        goto free_and_return;
 8018fd0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018fd2:	6878      	ldr	r0, [r7, #4]
 8018fd4:	f7f7 feb4 	bl	8010d40 <pbuf_free>
  return ERR_OK;
 8018fd8:	2300      	movs	r3, #0
}
 8018fda:	4618      	mov	r0, r3
 8018fdc:	3718      	adds	r7, #24
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	bd80      	pop	{r7, pc}
 8018fe2:	bf00      	nop
 8018fe4:	0801ef18 	.word	0x0801ef18

08018fe8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b086      	sub	sp, #24
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	60f8      	str	r0, [r7, #12]
 8018ff0:	60b9      	str	r1, [r7, #8]
 8018ff2:	607a      	str	r2, [r7, #4]
 8018ff4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018ff6:	8c3b      	ldrh	r3, [r7, #32]
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7f6 fabd 	bl	800f578 <lwip_htons>
 8018ffe:	4603      	mov	r3, r0
 8019000:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019002:	210e      	movs	r1, #14
 8019004:	68b8      	ldr	r0, [r7, #8]
 8019006:	f7f7 fe05 	bl	8010c14 <pbuf_add_header>
 801900a:	4603      	mov	r3, r0
 801900c:	2b00      	cmp	r3, #0
 801900e:	d125      	bne.n	801905c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019010:	68bb      	ldr	r3, [r7, #8]
 8019012:	685b      	ldr	r3, [r3, #4]
 8019014:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019016:	693b      	ldr	r3, [r7, #16]
 8019018:	8afa      	ldrh	r2, [r7, #22]
 801901a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801901c:	693b      	ldr	r3, [r7, #16]
 801901e:	2206      	movs	r2, #6
 8019020:	6839      	ldr	r1, [r7, #0]
 8019022:	4618      	mov	r0, r3
 8019024:	f000 ff33 	bl	8019e8e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019028:	693b      	ldr	r3, [r7, #16]
 801902a:	3306      	adds	r3, #6
 801902c:	2206      	movs	r2, #6
 801902e:	6879      	ldr	r1, [r7, #4]
 8019030:	4618      	mov	r0, r3
 8019032:	f000 ff2c 	bl	8019e8e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801903c:	2b06      	cmp	r3, #6
 801903e:	d006      	beq.n	801904e <ethernet_output+0x66>
 8019040:	4b0a      	ldr	r3, [pc, #40]	; (801906c <ethernet_output+0x84>)
 8019042:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019046:	490a      	ldr	r1, [pc, #40]	; (8019070 <ethernet_output+0x88>)
 8019048:	480a      	ldr	r0, [pc, #40]	; (8019074 <ethernet_output+0x8c>)
 801904a:	f000 fd51 	bl	8019af0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	699b      	ldr	r3, [r3, #24]
 8019052:	68b9      	ldr	r1, [r7, #8]
 8019054:	68f8      	ldr	r0, [r7, #12]
 8019056:	4798      	blx	r3
 8019058:	4603      	mov	r3, r0
 801905a:	e002      	b.n	8019062 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801905c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801905e:	f06f 0301 	mvn.w	r3, #1
}
 8019062:	4618      	mov	r0, r3
 8019064:	3718      	adds	r7, #24
 8019066:	46bd      	mov	sp, r7
 8019068:	bd80      	pop	{r7, pc}
 801906a:	bf00      	nop
 801906c:	0801ed6c 	.word	0x0801ed6c
 8019070:	0801eda4 	.word	0x0801eda4
 8019074:	0801edd8 	.word	0x0801edd8

08019078 <rand>:
 8019078:	4b16      	ldr	r3, [pc, #88]	; (80190d4 <rand+0x5c>)
 801907a:	b510      	push	{r4, lr}
 801907c:	681c      	ldr	r4, [r3, #0]
 801907e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019080:	b9b3      	cbnz	r3, 80190b0 <rand+0x38>
 8019082:	2018      	movs	r0, #24
 8019084:	f001 fd70 	bl	801ab68 <malloc>
 8019088:	4602      	mov	r2, r0
 801908a:	6320      	str	r0, [r4, #48]	; 0x30
 801908c:	b920      	cbnz	r0, 8019098 <rand+0x20>
 801908e:	4b12      	ldr	r3, [pc, #72]	; (80190d8 <rand+0x60>)
 8019090:	4812      	ldr	r0, [pc, #72]	; (80190dc <rand+0x64>)
 8019092:	2152      	movs	r1, #82	; 0x52
 8019094:	f000 ff0a 	bl	8019eac <__assert_func>
 8019098:	4911      	ldr	r1, [pc, #68]	; (80190e0 <rand+0x68>)
 801909a:	4b12      	ldr	r3, [pc, #72]	; (80190e4 <rand+0x6c>)
 801909c:	e9c0 1300 	strd	r1, r3, [r0]
 80190a0:	4b11      	ldr	r3, [pc, #68]	; (80190e8 <rand+0x70>)
 80190a2:	6083      	str	r3, [r0, #8]
 80190a4:	230b      	movs	r3, #11
 80190a6:	8183      	strh	r3, [r0, #12]
 80190a8:	2100      	movs	r1, #0
 80190aa:	2001      	movs	r0, #1
 80190ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80190b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80190b2:	480e      	ldr	r0, [pc, #56]	; (80190ec <rand+0x74>)
 80190b4:	690b      	ldr	r3, [r1, #16]
 80190b6:	694c      	ldr	r4, [r1, #20]
 80190b8:	4a0d      	ldr	r2, [pc, #52]	; (80190f0 <rand+0x78>)
 80190ba:	4358      	muls	r0, r3
 80190bc:	fb02 0004 	mla	r0, r2, r4, r0
 80190c0:	fba3 3202 	umull	r3, r2, r3, r2
 80190c4:	3301      	adds	r3, #1
 80190c6:	eb40 0002 	adc.w	r0, r0, r2
 80190ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80190ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80190d2:	bd10      	pop	{r4, pc}
 80190d4:	200000bc 	.word	0x200000bc
 80190d8:	0801ef26 	.word	0x0801ef26
 80190dc:	0801ef3d 	.word	0x0801ef3d
 80190e0:	abcd330e 	.word	0xabcd330e
 80190e4:	e66d1234 	.word	0xe66d1234
 80190e8:	0005deec 	.word	0x0005deec
 80190ec:	5851f42d 	.word	0x5851f42d
 80190f0:	4c957f2d 	.word	0x4c957f2d

080190f4 <__cvt>:
 80190f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190f6:	ed2d 8b02 	vpush	{d8}
 80190fa:	eeb0 8b40 	vmov.f64	d8, d0
 80190fe:	b085      	sub	sp, #20
 8019100:	4617      	mov	r7, r2
 8019102:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019104:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019106:	ee18 2a90 	vmov	r2, s17
 801910a:	f025 0520 	bic.w	r5, r5, #32
 801910e:	2a00      	cmp	r2, #0
 8019110:	bfb6      	itet	lt
 8019112:	222d      	movlt	r2, #45	; 0x2d
 8019114:	2200      	movge	r2, #0
 8019116:	eeb1 8b40 	vneglt.f64	d8, d0
 801911a:	2d46      	cmp	r5, #70	; 0x46
 801911c:	460c      	mov	r4, r1
 801911e:	701a      	strb	r2, [r3, #0]
 8019120:	d004      	beq.n	801912c <__cvt+0x38>
 8019122:	2d45      	cmp	r5, #69	; 0x45
 8019124:	d100      	bne.n	8019128 <__cvt+0x34>
 8019126:	3401      	adds	r4, #1
 8019128:	2102      	movs	r1, #2
 801912a:	e000      	b.n	801912e <__cvt+0x3a>
 801912c:	2103      	movs	r1, #3
 801912e:	ab03      	add	r3, sp, #12
 8019130:	9301      	str	r3, [sp, #4]
 8019132:	ab02      	add	r3, sp, #8
 8019134:	9300      	str	r3, [sp, #0]
 8019136:	4622      	mov	r2, r4
 8019138:	4633      	mov	r3, r6
 801913a:	eeb0 0b48 	vmov.f64	d0, d8
 801913e:	f000 ff5b 	bl	8019ff8 <_dtoa_r>
 8019142:	2d47      	cmp	r5, #71	; 0x47
 8019144:	d101      	bne.n	801914a <__cvt+0x56>
 8019146:	07fb      	lsls	r3, r7, #31
 8019148:	d51a      	bpl.n	8019180 <__cvt+0x8c>
 801914a:	2d46      	cmp	r5, #70	; 0x46
 801914c:	eb00 0204 	add.w	r2, r0, r4
 8019150:	d10c      	bne.n	801916c <__cvt+0x78>
 8019152:	7803      	ldrb	r3, [r0, #0]
 8019154:	2b30      	cmp	r3, #48	; 0x30
 8019156:	d107      	bne.n	8019168 <__cvt+0x74>
 8019158:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801915c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019160:	bf1c      	itt	ne
 8019162:	f1c4 0401 	rsbne	r4, r4, #1
 8019166:	6034      	strne	r4, [r6, #0]
 8019168:	6833      	ldr	r3, [r6, #0]
 801916a:	441a      	add	r2, r3
 801916c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019174:	bf08      	it	eq
 8019176:	9203      	streq	r2, [sp, #12]
 8019178:	2130      	movs	r1, #48	; 0x30
 801917a:	9b03      	ldr	r3, [sp, #12]
 801917c:	4293      	cmp	r3, r2
 801917e:	d307      	bcc.n	8019190 <__cvt+0x9c>
 8019180:	9b03      	ldr	r3, [sp, #12]
 8019182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019184:	1a1b      	subs	r3, r3, r0
 8019186:	6013      	str	r3, [r2, #0]
 8019188:	b005      	add	sp, #20
 801918a:	ecbd 8b02 	vpop	{d8}
 801918e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019190:	1c5c      	adds	r4, r3, #1
 8019192:	9403      	str	r4, [sp, #12]
 8019194:	7019      	strb	r1, [r3, #0]
 8019196:	e7f0      	b.n	801917a <__cvt+0x86>

08019198 <__exponent>:
 8019198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801919a:	4603      	mov	r3, r0
 801919c:	2900      	cmp	r1, #0
 801919e:	bfb8      	it	lt
 80191a0:	4249      	neglt	r1, r1
 80191a2:	f803 2b02 	strb.w	r2, [r3], #2
 80191a6:	bfb4      	ite	lt
 80191a8:	222d      	movlt	r2, #45	; 0x2d
 80191aa:	222b      	movge	r2, #43	; 0x2b
 80191ac:	2909      	cmp	r1, #9
 80191ae:	7042      	strb	r2, [r0, #1]
 80191b0:	dd2a      	ble.n	8019208 <__exponent+0x70>
 80191b2:	f10d 0207 	add.w	r2, sp, #7
 80191b6:	4617      	mov	r7, r2
 80191b8:	260a      	movs	r6, #10
 80191ba:	4694      	mov	ip, r2
 80191bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80191c0:	fb06 1415 	mls	r4, r6, r5, r1
 80191c4:	3430      	adds	r4, #48	; 0x30
 80191c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80191ca:	460c      	mov	r4, r1
 80191cc:	2c63      	cmp	r4, #99	; 0x63
 80191ce:	f102 32ff 	add.w	r2, r2, #4294967295
 80191d2:	4629      	mov	r1, r5
 80191d4:	dcf1      	bgt.n	80191ba <__exponent+0x22>
 80191d6:	3130      	adds	r1, #48	; 0x30
 80191d8:	f1ac 0402 	sub.w	r4, ip, #2
 80191dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80191e0:	1c41      	adds	r1, r0, #1
 80191e2:	4622      	mov	r2, r4
 80191e4:	42ba      	cmp	r2, r7
 80191e6:	d30a      	bcc.n	80191fe <__exponent+0x66>
 80191e8:	f10d 0209 	add.w	r2, sp, #9
 80191ec:	eba2 020c 	sub.w	r2, r2, ip
 80191f0:	42bc      	cmp	r4, r7
 80191f2:	bf88      	it	hi
 80191f4:	2200      	movhi	r2, #0
 80191f6:	4413      	add	r3, r2
 80191f8:	1a18      	subs	r0, r3, r0
 80191fa:	b003      	add	sp, #12
 80191fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8019202:	f801 5f01 	strb.w	r5, [r1, #1]!
 8019206:	e7ed      	b.n	80191e4 <__exponent+0x4c>
 8019208:	2330      	movs	r3, #48	; 0x30
 801920a:	3130      	adds	r1, #48	; 0x30
 801920c:	7083      	strb	r3, [r0, #2]
 801920e:	70c1      	strb	r1, [r0, #3]
 8019210:	1d03      	adds	r3, r0, #4
 8019212:	e7f1      	b.n	80191f8 <__exponent+0x60>
 8019214:	0000      	movs	r0, r0
	...

08019218 <_printf_float>:
 8019218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801921c:	b08b      	sub	sp, #44	; 0x2c
 801921e:	460c      	mov	r4, r1
 8019220:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019224:	4616      	mov	r6, r2
 8019226:	461f      	mov	r7, r3
 8019228:	4605      	mov	r5, r0
 801922a:	f000 fdbf 	bl	8019dac <_localeconv_r>
 801922e:	f8d0 b000 	ldr.w	fp, [r0]
 8019232:	4658      	mov	r0, fp
 8019234:	f7e8 fd84 	bl	8001d40 <strlen>
 8019238:	2300      	movs	r3, #0
 801923a:	9308      	str	r3, [sp, #32]
 801923c:	f8d8 3000 	ldr.w	r3, [r8]
 8019240:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019244:	6822      	ldr	r2, [r4, #0]
 8019246:	3307      	adds	r3, #7
 8019248:	f023 0307 	bic.w	r3, r3, #7
 801924c:	f103 0108 	add.w	r1, r3, #8
 8019250:	f8c8 1000 	str.w	r1, [r8]
 8019254:	ed93 0b00 	vldr	d0, [r3]
 8019258:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80194b8 <_printf_float+0x2a0>
 801925c:	eeb0 7bc0 	vabs.f64	d7, d0
 8019260:	eeb4 7b46 	vcmp.f64	d7, d6
 8019264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019268:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801926c:	4682      	mov	sl, r0
 801926e:	dd24      	ble.n	80192ba <_printf_float+0xa2>
 8019270:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019278:	d502      	bpl.n	8019280 <_printf_float+0x68>
 801927a:	232d      	movs	r3, #45	; 0x2d
 801927c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019280:	498f      	ldr	r1, [pc, #572]	; (80194c0 <_printf_float+0x2a8>)
 8019282:	4b90      	ldr	r3, [pc, #576]	; (80194c4 <_printf_float+0x2ac>)
 8019284:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019288:	bf94      	ite	ls
 801928a:	4688      	movls	r8, r1
 801928c:	4698      	movhi	r8, r3
 801928e:	2303      	movs	r3, #3
 8019290:	6123      	str	r3, [r4, #16]
 8019292:	f022 0204 	bic.w	r2, r2, #4
 8019296:	2300      	movs	r3, #0
 8019298:	6022      	str	r2, [r4, #0]
 801929a:	9304      	str	r3, [sp, #16]
 801929c:	9700      	str	r7, [sp, #0]
 801929e:	4633      	mov	r3, r6
 80192a0:	aa09      	add	r2, sp, #36	; 0x24
 80192a2:	4621      	mov	r1, r4
 80192a4:	4628      	mov	r0, r5
 80192a6:	f000 f9d1 	bl	801964c <_printf_common>
 80192aa:	3001      	adds	r0, #1
 80192ac:	f040 808a 	bne.w	80193c4 <_printf_float+0x1ac>
 80192b0:	f04f 30ff 	mov.w	r0, #4294967295
 80192b4:	b00b      	add	sp, #44	; 0x2c
 80192b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80192be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192c2:	d709      	bvc.n	80192d8 <_printf_float+0xc0>
 80192c4:	ee10 3a90 	vmov	r3, s1
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	bfbc      	itt	lt
 80192cc:	232d      	movlt	r3, #45	; 0x2d
 80192ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80192d2:	497d      	ldr	r1, [pc, #500]	; (80194c8 <_printf_float+0x2b0>)
 80192d4:	4b7d      	ldr	r3, [pc, #500]	; (80194cc <_printf_float+0x2b4>)
 80192d6:	e7d5      	b.n	8019284 <_printf_float+0x6c>
 80192d8:	6863      	ldr	r3, [r4, #4]
 80192da:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80192de:	9104      	str	r1, [sp, #16]
 80192e0:	1c59      	adds	r1, r3, #1
 80192e2:	d13c      	bne.n	801935e <_printf_float+0x146>
 80192e4:	2306      	movs	r3, #6
 80192e6:	6063      	str	r3, [r4, #4]
 80192e8:	2300      	movs	r3, #0
 80192ea:	9303      	str	r3, [sp, #12]
 80192ec:	ab08      	add	r3, sp, #32
 80192ee:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80192f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80192f6:	ab07      	add	r3, sp, #28
 80192f8:	6861      	ldr	r1, [r4, #4]
 80192fa:	9300      	str	r3, [sp, #0]
 80192fc:	6022      	str	r2, [r4, #0]
 80192fe:	f10d 031b 	add.w	r3, sp, #27
 8019302:	4628      	mov	r0, r5
 8019304:	f7ff fef6 	bl	80190f4 <__cvt>
 8019308:	9b04      	ldr	r3, [sp, #16]
 801930a:	9907      	ldr	r1, [sp, #28]
 801930c:	2b47      	cmp	r3, #71	; 0x47
 801930e:	4680      	mov	r8, r0
 8019310:	d108      	bne.n	8019324 <_printf_float+0x10c>
 8019312:	1cc8      	adds	r0, r1, #3
 8019314:	db02      	blt.n	801931c <_printf_float+0x104>
 8019316:	6863      	ldr	r3, [r4, #4]
 8019318:	4299      	cmp	r1, r3
 801931a:	dd41      	ble.n	80193a0 <_printf_float+0x188>
 801931c:	f1a9 0902 	sub.w	r9, r9, #2
 8019320:	fa5f f989 	uxtb.w	r9, r9
 8019324:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019328:	d820      	bhi.n	801936c <_printf_float+0x154>
 801932a:	3901      	subs	r1, #1
 801932c:	464a      	mov	r2, r9
 801932e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019332:	9107      	str	r1, [sp, #28]
 8019334:	f7ff ff30 	bl	8019198 <__exponent>
 8019338:	9a08      	ldr	r2, [sp, #32]
 801933a:	9004      	str	r0, [sp, #16]
 801933c:	1813      	adds	r3, r2, r0
 801933e:	2a01      	cmp	r2, #1
 8019340:	6123      	str	r3, [r4, #16]
 8019342:	dc02      	bgt.n	801934a <_printf_float+0x132>
 8019344:	6822      	ldr	r2, [r4, #0]
 8019346:	07d2      	lsls	r2, r2, #31
 8019348:	d501      	bpl.n	801934e <_printf_float+0x136>
 801934a:	3301      	adds	r3, #1
 801934c:	6123      	str	r3, [r4, #16]
 801934e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d0a2      	beq.n	801929c <_printf_float+0x84>
 8019356:	232d      	movs	r3, #45	; 0x2d
 8019358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801935c:	e79e      	b.n	801929c <_printf_float+0x84>
 801935e:	9904      	ldr	r1, [sp, #16]
 8019360:	2947      	cmp	r1, #71	; 0x47
 8019362:	d1c1      	bne.n	80192e8 <_printf_float+0xd0>
 8019364:	2b00      	cmp	r3, #0
 8019366:	d1bf      	bne.n	80192e8 <_printf_float+0xd0>
 8019368:	2301      	movs	r3, #1
 801936a:	e7bc      	b.n	80192e6 <_printf_float+0xce>
 801936c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019370:	d118      	bne.n	80193a4 <_printf_float+0x18c>
 8019372:	2900      	cmp	r1, #0
 8019374:	6863      	ldr	r3, [r4, #4]
 8019376:	dd0b      	ble.n	8019390 <_printf_float+0x178>
 8019378:	6121      	str	r1, [r4, #16]
 801937a:	b913      	cbnz	r3, 8019382 <_printf_float+0x16a>
 801937c:	6822      	ldr	r2, [r4, #0]
 801937e:	07d0      	lsls	r0, r2, #31
 8019380:	d502      	bpl.n	8019388 <_printf_float+0x170>
 8019382:	3301      	adds	r3, #1
 8019384:	440b      	add	r3, r1
 8019386:	6123      	str	r3, [r4, #16]
 8019388:	2300      	movs	r3, #0
 801938a:	65a1      	str	r1, [r4, #88]	; 0x58
 801938c:	9304      	str	r3, [sp, #16]
 801938e:	e7de      	b.n	801934e <_printf_float+0x136>
 8019390:	b913      	cbnz	r3, 8019398 <_printf_float+0x180>
 8019392:	6822      	ldr	r2, [r4, #0]
 8019394:	07d2      	lsls	r2, r2, #31
 8019396:	d501      	bpl.n	801939c <_printf_float+0x184>
 8019398:	3302      	adds	r3, #2
 801939a:	e7f4      	b.n	8019386 <_printf_float+0x16e>
 801939c:	2301      	movs	r3, #1
 801939e:	e7f2      	b.n	8019386 <_printf_float+0x16e>
 80193a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80193a4:	9b08      	ldr	r3, [sp, #32]
 80193a6:	4299      	cmp	r1, r3
 80193a8:	db05      	blt.n	80193b6 <_printf_float+0x19e>
 80193aa:	6823      	ldr	r3, [r4, #0]
 80193ac:	6121      	str	r1, [r4, #16]
 80193ae:	07d8      	lsls	r0, r3, #31
 80193b0:	d5ea      	bpl.n	8019388 <_printf_float+0x170>
 80193b2:	1c4b      	adds	r3, r1, #1
 80193b4:	e7e7      	b.n	8019386 <_printf_float+0x16e>
 80193b6:	2900      	cmp	r1, #0
 80193b8:	bfd4      	ite	le
 80193ba:	f1c1 0202 	rsble	r2, r1, #2
 80193be:	2201      	movgt	r2, #1
 80193c0:	4413      	add	r3, r2
 80193c2:	e7e0      	b.n	8019386 <_printf_float+0x16e>
 80193c4:	6823      	ldr	r3, [r4, #0]
 80193c6:	055a      	lsls	r2, r3, #21
 80193c8:	d407      	bmi.n	80193da <_printf_float+0x1c2>
 80193ca:	6923      	ldr	r3, [r4, #16]
 80193cc:	4642      	mov	r2, r8
 80193ce:	4631      	mov	r1, r6
 80193d0:	4628      	mov	r0, r5
 80193d2:	47b8      	blx	r7
 80193d4:	3001      	adds	r0, #1
 80193d6:	d12a      	bne.n	801942e <_printf_float+0x216>
 80193d8:	e76a      	b.n	80192b0 <_printf_float+0x98>
 80193da:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80193de:	f240 80e0 	bls.w	80195a2 <_printf_float+0x38a>
 80193e2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80193e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80193ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ee:	d133      	bne.n	8019458 <_printf_float+0x240>
 80193f0:	4a37      	ldr	r2, [pc, #220]	; (80194d0 <_printf_float+0x2b8>)
 80193f2:	2301      	movs	r3, #1
 80193f4:	4631      	mov	r1, r6
 80193f6:	4628      	mov	r0, r5
 80193f8:	47b8      	blx	r7
 80193fa:	3001      	adds	r0, #1
 80193fc:	f43f af58 	beq.w	80192b0 <_printf_float+0x98>
 8019400:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019404:	429a      	cmp	r2, r3
 8019406:	db02      	blt.n	801940e <_printf_float+0x1f6>
 8019408:	6823      	ldr	r3, [r4, #0]
 801940a:	07d8      	lsls	r0, r3, #31
 801940c:	d50f      	bpl.n	801942e <_printf_float+0x216>
 801940e:	4653      	mov	r3, sl
 8019410:	465a      	mov	r2, fp
 8019412:	4631      	mov	r1, r6
 8019414:	4628      	mov	r0, r5
 8019416:	47b8      	blx	r7
 8019418:	3001      	adds	r0, #1
 801941a:	f43f af49 	beq.w	80192b0 <_printf_float+0x98>
 801941e:	f04f 0800 	mov.w	r8, #0
 8019422:	f104 091a 	add.w	r9, r4, #26
 8019426:	9b08      	ldr	r3, [sp, #32]
 8019428:	3b01      	subs	r3, #1
 801942a:	4543      	cmp	r3, r8
 801942c:	dc09      	bgt.n	8019442 <_printf_float+0x22a>
 801942e:	6823      	ldr	r3, [r4, #0]
 8019430:	079b      	lsls	r3, r3, #30
 8019432:	f100 8106 	bmi.w	8019642 <_printf_float+0x42a>
 8019436:	68e0      	ldr	r0, [r4, #12]
 8019438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801943a:	4298      	cmp	r0, r3
 801943c:	bfb8      	it	lt
 801943e:	4618      	movlt	r0, r3
 8019440:	e738      	b.n	80192b4 <_printf_float+0x9c>
 8019442:	2301      	movs	r3, #1
 8019444:	464a      	mov	r2, r9
 8019446:	4631      	mov	r1, r6
 8019448:	4628      	mov	r0, r5
 801944a:	47b8      	blx	r7
 801944c:	3001      	adds	r0, #1
 801944e:	f43f af2f 	beq.w	80192b0 <_printf_float+0x98>
 8019452:	f108 0801 	add.w	r8, r8, #1
 8019456:	e7e6      	b.n	8019426 <_printf_float+0x20e>
 8019458:	9b07      	ldr	r3, [sp, #28]
 801945a:	2b00      	cmp	r3, #0
 801945c:	dc3a      	bgt.n	80194d4 <_printf_float+0x2bc>
 801945e:	4a1c      	ldr	r2, [pc, #112]	; (80194d0 <_printf_float+0x2b8>)
 8019460:	2301      	movs	r3, #1
 8019462:	4631      	mov	r1, r6
 8019464:	4628      	mov	r0, r5
 8019466:	47b8      	blx	r7
 8019468:	3001      	adds	r0, #1
 801946a:	f43f af21 	beq.w	80192b0 <_printf_float+0x98>
 801946e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019472:	4313      	orrs	r3, r2
 8019474:	d102      	bne.n	801947c <_printf_float+0x264>
 8019476:	6823      	ldr	r3, [r4, #0]
 8019478:	07d9      	lsls	r1, r3, #31
 801947a:	d5d8      	bpl.n	801942e <_printf_float+0x216>
 801947c:	4653      	mov	r3, sl
 801947e:	465a      	mov	r2, fp
 8019480:	4631      	mov	r1, r6
 8019482:	4628      	mov	r0, r5
 8019484:	47b8      	blx	r7
 8019486:	3001      	adds	r0, #1
 8019488:	f43f af12 	beq.w	80192b0 <_printf_float+0x98>
 801948c:	f04f 0900 	mov.w	r9, #0
 8019490:	f104 0a1a 	add.w	sl, r4, #26
 8019494:	9b07      	ldr	r3, [sp, #28]
 8019496:	425b      	negs	r3, r3
 8019498:	454b      	cmp	r3, r9
 801949a:	dc01      	bgt.n	80194a0 <_printf_float+0x288>
 801949c:	9b08      	ldr	r3, [sp, #32]
 801949e:	e795      	b.n	80193cc <_printf_float+0x1b4>
 80194a0:	2301      	movs	r3, #1
 80194a2:	4652      	mov	r2, sl
 80194a4:	4631      	mov	r1, r6
 80194a6:	4628      	mov	r0, r5
 80194a8:	47b8      	blx	r7
 80194aa:	3001      	adds	r0, #1
 80194ac:	f43f af00 	beq.w	80192b0 <_printf_float+0x98>
 80194b0:	f109 0901 	add.w	r9, r9, #1
 80194b4:	e7ee      	b.n	8019494 <_printf_float+0x27c>
 80194b6:	bf00      	nop
 80194b8:	ffffffff 	.word	0xffffffff
 80194bc:	7fefffff 	.word	0x7fefffff
 80194c0:	0801f096 	.word	0x0801f096
 80194c4:	0801f09a 	.word	0x0801f09a
 80194c8:	0801f09e 	.word	0x0801f09e
 80194cc:	0801f0a2 	.word	0x0801f0a2
 80194d0:	0801f0a6 	.word	0x0801f0a6
 80194d4:	9a08      	ldr	r2, [sp, #32]
 80194d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80194d8:	429a      	cmp	r2, r3
 80194da:	bfa8      	it	ge
 80194dc:	461a      	movge	r2, r3
 80194de:	2a00      	cmp	r2, #0
 80194e0:	4691      	mov	r9, r2
 80194e2:	dc38      	bgt.n	8019556 <_printf_float+0x33e>
 80194e4:	2300      	movs	r3, #0
 80194e6:	9305      	str	r3, [sp, #20]
 80194e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80194ec:	f104 021a 	add.w	r2, r4, #26
 80194f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80194f2:	9905      	ldr	r1, [sp, #20]
 80194f4:	9304      	str	r3, [sp, #16]
 80194f6:	eba3 0309 	sub.w	r3, r3, r9
 80194fa:	428b      	cmp	r3, r1
 80194fc:	dc33      	bgt.n	8019566 <_printf_float+0x34e>
 80194fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019502:	429a      	cmp	r2, r3
 8019504:	db3c      	blt.n	8019580 <_printf_float+0x368>
 8019506:	6823      	ldr	r3, [r4, #0]
 8019508:	07da      	lsls	r2, r3, #31
 801950a:	d439      	bmi.n	8019580 <_printf_float+0x368>
 801950c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019510:	eba2 0903 	sub.w	r9, r2, r3
 8019514:	9b04      	ldr	r3, [sp, #16]
 8019516:	1ad2      	subs	r2, r2, r3
 8019518:	4591      	cmp	r9, r2
 801951a:	bfa8      	it	ge
 801951c:	4691      	movge	r9, r2
 801951e:	f1b9 0f00 	cmp.w	r9, #0
 8019522:	dc35      	bgt.n	8019590 <_printf_float+0x378>
 8019524:	f04f 0800 	mov.w	r8, #0
 8019528:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801952c:	f104 0a1a 	add.w	sl, r4, #26
 8019530:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019534:	1a9b      	subs	r3, r3, r2
 8019536:	eba3 0309 	sub.w	r3, r3, r9
 801953a:	4543      	cmp	r3, r8
 801953c:	f77f af77 	ble.w	801942e <_printf_float+0x216>
 8019540:	2301      	movs	r3, #1
 8019542:	4652      	mov	r2, sl
 8019544:	4631      	mov	r1, r6
 8019546:	4628      	mov	r0, r5
 8019548:	47b8      	blx	r7
 801954a:	3001      	adds	r0, #1
 801954c:	f43f aeb0 	beq.w	80192b0 <_printf_float+0x98>
 8019550:	f108 0801 	add.w	r8, r8, #1
 8019554:	e7ec      	b.n	8019530 <_printf_float+0x318>
 8019556:	4613      	mov	r3, r2
 8019558:	4631      	mov	r1, r6
 801955a:	4642      	mov	r2, r8
 801955c:	4628      	mov	r0, r5
 801955e:	47b8      	blx	r7
 8019560:	3001      	adds	r0, #1
 8019562:	d1bf      	bne.n	80194e4 <_printf_float+0x2cc>
 8019564:	e6a4      	b.n	80192b0 <_printf_float+0x98>
 8019566:	2301      	movs	r3, #1
 8019568:	4631      	mov	r1, r6
 801956a:	4628      	mov	r0, r5
 801956c:	9204      	str	r2, [sp, #16]
 801956e:	47b8      	blx	r7
 8019570:	3001      	adds	r0, #1
 8019572:	f43f ae9d 	beq.w	80192b0 <_printf_float+0x98>
 8019576:	9b05      	ldr	r3, [sp, #20]
 8019578:	9a04      	ldr	r2, [sp, #16]
 801957a:	3301      	adds	r3, #1
 801957c:	9305      	str	r3, [sp, #20]
 801957e:	e7b7      	b.n	80194f0 <_printf_float+0x2d8>
 8019580:	4653      	mov	r3, sl
 8019582:	465a      	mov	r2, fp
 8019584:	4631      	mov	r1, r6
 8019586:	4628      	mov	r0, r5
 8019588:	47b8      	blx	r7
 801958a:	3001      	adds	r0, #1
 801958c:	d1be      	bne.n	801950c <_printf_float+0x2f4>
 801958e:	e68f      	b.n	80192b0 <_printf_float+0x98>
 8019590:	9a04      	ldr	r2, [sp, #16]
 8019592:	464b      	mov	r3, r9
 8019594:	4442      	add	r2, r8
 8019596:	4631      	mov	r1, r6
 8019598:	4628      	mov	r0, r5
 801959a:	47b8      	blx	r7
 801959c:	3001      	adds	r0, #1
 801959e:	d1c1      	bne.n	8019524 <_printf_float+0x30c>
 80195a0:	e686      	b.n	80192b0 <_printf_float+0x98>
 80195a2:	9a08      	ldr	r2, [sp, #32]
 80195a4:	2a01      	cmp	r2, #1
 80195a6:	dc01      	bgt.n	80195ac <_printf_float+0x394>
 80195a8:	07db      	lsls	r3, r3, #31
 80195aa:	d537      	bpl.n	801961c <_printf_float+0x404>
 80195ac:	2301      	movs	r3, #1
 80195ae:	4642      	mov	r2, r8
 80195b0:	4631      	mov	r1, r6
 80195b2:	4628      	mov	r0, r5
 80195b4:	47b8      	blx	r7
 80195b6:	3001      	adds	r0, #1
 80195b8:	f43f ae7a 	beq.w	80192b0 <_printf_float+0x98>
 80195bc:	4653      	mov	r3, sl
 80195be:	465a      	mov	r2, fp
 80195c0:	4631      	mov	r1, r6
 80195c2:	4628      	mov	r0, r5
 80195c4:	47b8      	blx	r7
 80195c6:	3001      	adds	r0, #1
 80195c8:	f43f ae72 	beq.w	80192b0 <_printf_float+0x98>
 80195cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80195d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80195d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195d8:	9b08      	ldr	r3, [sp, #32]
 80195da:	d01a      	beq.n	8019612 <_printf_float+0x3fa>
 80195dc:	3b01      	subs	r3, #1
 80195de:	f108 0201 	add.w	r2, r8, #1
 80195e2:	4631      	mov	r1, r6
 80195e4:	4628      	mov	r0, r5
 80195e6:	47b8      	blx	r7
 80195e8:	3001      	adds	r0, #1
 80195ea:	d10e      	bne.n	801960a <_printf_float+0x3f2>
 80195ec:	e660      	b.n	80192b0 <_printf_float+0x98>
 80195ee:	2301      	movs	r3, #1
 80195f0:	464a      	mov	r2, r9
 80195f2:	4631      	mov	r1, r6
 80195f4:	4628      	mov	r0, r5
 80195f6:	47b8      	blx	r7
 80195f8:	3001      	adds	r0, #1
 80195fa:	f43f ae59 	beq.w	80192b0 <_printf_float+0x98>
 80195fe:	f108 0801 	add.w	r8, r8, #1
 8019602:	9b08      	ldr	r3, [sp, #32]
 8019604:	3b01      	subs	r3, #1
 8019606:	4543      	cmp	r3, r8
 8019608:	dcf1      	bgt.n	80195ee <_printf_float+0x3d6>
 801960a:	9b04      	ldr	r3, [sp, #16]
 801960c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019610:	e6dd      	b.n	80193ce <_printf_float+0x1b6>
 8019612:	f04f 0800 	mov.w	r8, #0
 8019616:	f104 091a 	add.w	r9, r4, #26
 801961a:	e7f2      	b.n	8019602 <_printf_float+0x3ea>
 801961c:	2301      	movs	r3, #1
 801961e:	4642      	mov	r2, r8
 8019620:	e7df      	b.n	80195e2 <_printf_float+0x3ca>
 8019622:	2301      	movs	r3, #1
 8019624:	464a      	mov	r2, r9
 8019626:	4631      	mov	r1, r6
 8019628:	4628      	mov	r0, r5
 801962a:	47b8      	blx	r7
 801962c:	3001      	adds	r0, #1
 801962e:	f43f ae3f 	beq.w	80192b0 <_printf_float+0x98>
 8019632:	f108 0801 	add.w	r8, r8, #1
 8019636:	68e3      	ldr	r3, [r4, #12]
 8019638:	9909      	ldr	r1, [sp, #36]	; 0x24
 801963a:	1a5b      	subs	r3, r3, r1
 801963c:	4543      	cmp	r3, r8
 801963e:	dcf0      	bgt.n	8019622 <_printf_float+0x40a>
 8019640:	e6f9      	b.n	8019436 <_printf_float+0x21e>
 8019642:	f04f 0800 	mov.w	r8, #0
 8019646:	f104 0919 	add.w	r9, r4, #25
 801964a:	e7f4      	b.n	8019636 <_printf_float+0x41e>

0801964c <_printf_common>:
 801964c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019650:	4616      	mov	r6, r2
 8019652:	4699      	mov	r9, r3
 8019654:	688a      	ldr	r2, [r1, #8]
 8019656:	690b      	ldr	r3, [r1, #16]
 8019658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801965c:	4293      	cmp	r3, r2
 801965e:	bfb8      	it	lt
 8019660:	4613      	movlt	r3, r2
 8019662:	6033      	str	r3, [r6, #0]
 8019664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019668:	4607      	mov	r7, r0
 801966a:	460c      	mov	r4, r1
 801966c:	b10a      	cbz	r2, 8019672 <_printf_common+0x26>
 801966e:	3301      	adds	r3, #1
 8019670:	6033      	str	r3, [r6, #0]
 8019672:	6823      	ldr	r3, [r4, #0]
 8019674:	0699      	lsls	r1, r3, #26
 8019676:	bf42      	ittt	mi
 8019678:	6833      	ldrmi	r3, [r6, #0]
 801967a:	3302      	addmi	r3, #2
 801967c:	6033      	strmi	r3, [r6, #0]
 801967e:	6825      	ldr	r5, [r4, #0]
 8019680:	f015 0506 	ands.w	r5, r5, #6
 8019684:	d106      	bne.n	8019694 <_printf_common+0x48>
 8019686:	f104 0a19 	add.w	sl, r4, #25
 801968a:	68e3      	ldr	r3, [r4, #12]
 801968c:	6832      	ldr	r2, [r6, #0]
 801968e:	1a9b      	subs	r3, r3, r2
 8019690:	42ab      	cmp	r3, r5
 8019692:	dc26      	bgt.n	80196e2 <_printf_common+0x96>
 8019694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019698:	1e13      	subs	r3, r2, #0
 801969a:	6822      	ldr	r2, [r4, #0]
 801969c:	bf18      	it	ne
 801969e:	2301      	movne	r3, #1
 80196a0:	0692      	lsls	r2, r2, #26
 80196a2:	d42b      	bmi.n	80196fc <_printf_common+0xb0>
 80196a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80196a8:	4649      	mov	r1, r9
 80196aa:	4638      	mov	r0, r7
 80196ac:	47c0      	blx	r8
 80196ae:	3001      	adds	r0, #1
 80196b0:	d01e      	beq.n	80196f0 <_printf_common+0xa4>
 80196b2:	6823      	ldr	r3, [r4, #0]
 80196b4:	6922      	ldr	r2, [r4, #16]
 80196b6:	f003 0306 	and.w	r3, r3, #6
 80196ba:	2b04      	cmp	r3, #4
 80196bc:	bf02      	ittt	eq
 80196be:	68e5      	ldreq	r5, [r4, #12]
 80196c0:	6833      	ldreq	r3, [r6, #0]
 80196c2:	1aed      	subeq	r5, r5, r3
 80196c4:	68a3      	ldr	r3, [r4, #8]
 80196c6:	bf0c      	ite	eq
 80196c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80196cc:	2500      	movne	r5, #0
 80196ce:	4293      	cmp	r3, r2
 80196d0:	bfc4      	itt	gt
 80196d2:	1a9b      	subgt	r3, r3, r2
 80196d4:	18ed      	addgt	r5, r5, r3
 80196d6:	2600      	movs	r6, #0
 80196d8:	341a      	adds	r4, #26
 80196da:	42b5      	cmp	r5, r6
 80196dc:	d11a      	bne.n	8019714 <_printf_common+0xc8>
 80196de:	2000      	movs	r0, #0
 80196e0:	e008      	b.n	80196f4 <_printf_common+0xa8>
 80196e2:	2301      	movs	r3, #1
 80196e4:	4652      	mov	r2, sl
 80196e6:	4649      	mov	r1, r9
 80196e8:	4638      	mov	r0, r7
 80196ea:	47c0      	blx	r8
 80196ec:	3001      	adds	r0, #1
 80196ee:	d103      	bne.n	80196f8 <_printf_common+0xac>
 80196f0:	f04f 30ff 	mov.w	r0, #4294967295
 80196f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196f8:	3501      	adds	r5, #1
 80196fa:	e7c6      	b.n	801968a <_printf_common+0x3e>
 80196fc:	18e1      	adds	r1, r4, r3
 80196fe:	1c5a      	adds	r2, r3, #1
 8019700:	2030      	movs	r0, #48	; 0x30
 8019702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019706:	4422      	add	r2, r4
 8019708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801970c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019710:	3302      	adds	r3, #2
 8019712:	e7c7      	b.n	80196a4 <_printf_common+0x58>
 8019714:	2301      	movs	r3, #1
 8019716:	4622      	mov	r2, r4
 8019718:	4649      	mov	r1, r9
 801971a:	4638      	mov	r0, r7
 801971c:	47c0      	blx	r8
 801971e:	3001      	adds	r0, #1
 8019720:	d0e6      	beq.n	80196f0 <_printf_common+0xa4>
 8019722:	3601      	adds	r6, #1
 8019724:	e7d9      	b.n	80196da <_printf_common+0x8e>
	...

08019728 <_printf_i>:
 8019728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801972c:	7e0f      	ldrb	r7, [r1, #24]
 801972e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019730:	2f78      	cmp	r7, #120	; 0x78
 8019732:	4691      	mov	r9, r2
 8019734:	4680      	mov	r8, r0
 8019736:	460c      	mov	r4, r1
 8019738:	469a      	mov	sl, r3
 801973a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801973e:	d807      	bhi.n	8019750 <_printf_i+0x28>
 8019740:	2f62      	cmp	r7, #98	; 0x62
 8019742:	d80a      	bhi.n	801975a <_printf_i+0x32>
 8019744:	2f00      	cmp	r7, #0
 8019746:	f000 80d4 	beq.w	80198f2 <_printf_i+0x1ca>
 801974a:	2f58      	cmp	r7, #88	; 0x58
 801974c:	f000 80c0 	beq.w	80198d0 <_printf_i+0x1a8>
 8019750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019758:	e03a      	b.n	80197d0 <_printf_i+0xa8>
 801975a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801975e:	2b15      	cmp	r3, #21
 8019760:	d8f6      	bhi.n	8019750 <_printf_i+0x28>
 8019762:	a101      	add	r1, pc, #4	; (adr r1, 8019768 <_printf_i+0x40>)
 8019764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019768:	080197c1 	.word	0x080197c1
 801976c:	080197d5 	.word	0x080197d5
 8019770:	08019751 	.word	0x08019751
 8019774:	08019751 	.word	0x08019751
 8019778:	08019751 	.word	0x08019751
 801977c:	08019751 	.word	0x08019751
 8019780:	080197d5 	.word	0x080197d5
 8019784:	08019751 	.word	0x08019751
 8019788:	08019751 	.word	0x08019751
 801978c:	08019751 	.word	0x08019751
 8019790:	08019751 	.word	0x08019751
 8019794:	080198d9 	.word	0x080198d9
 8019798:	08019801 	.word	0x08019801
 801979c:	08019893 	.word	0x08019893
 80197a0:	08019751 	.word	0x08019751
 80197a4:	08019751 	.word	0x08019751
 80197a8:	080198fb 	.word	0x080198fb
 80197ac:	08019751 	.word	0x08019751
 80197b0:	08019801 	.word	0x08019801
 80197b4:	08019751 	.word	0x08019751
 80197b8:	08019751 	.word	0x08019751
 80197bc:	0801989b 	.word	0x0801989b
 80197c0:	682b      	ldr	r3, [r5, #0]
 80197c2:	1d1a      	adds	r2, r3, #4
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	602a      	str	r2, [r5, #0]
 80197c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80197cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80197d0:	2301      	movs	r3, #1
 80197d2:	e09f      	b.n	8019914 <_printf_i+0x1ec>
 80197d4:	6820      	ldr	r0, [r4, #0]
 80197d6:	682b      	ldr	r3, [r5, #0]
 80197d8:	0607      	lsls	r7, r0, #24
 80197da:	f103 0104 	add.w	r1, r3, #4
 80197de:	6029      	str	r1, [r5, #0]
 80197e0:	d501      	bpl.n	80197e6 <_printf_i+0xbe>
 80197e2:	681e      	ldr	r6, [r3, #0]
 80197e4:	e003      	b.n	80197ee <_printf_i+0xc6>
 80197e6:	0646      	lsls	r6, r0, #25
 80197e8:	d5fb      	bpl.n	80197e2 <_printf_i+0xba>
 80197ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80197ee:	2e00      	cmp	r6, #0
 80197f0:	da03      	bge.n	80197fa <_printf_i+0xd2>
 80197f2:	232d      	movs	r3, #45	; 0x2d
 80197f4:	4276      	negs	r6, r6
 80197f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80197fa:	485a      	ldr	r0, [pc, #360]	; (8019964 <_printf_i+0x23c>)
 80197fc:	230a      	movs	r3, #10
 80197fe:	e012      	b.n	8019826 <_printf_i+0xfe>
 8019800:	682b      	ldr	r3, [r5, #0]
 8019802:	6820      	ldr	r0, [r4, #0]
 8019804:	1d19      	adds	r1, r3, #4
 8019806:	6029      	str	r1, [r5, #0]
 8019808:	0605      	lsls	r5, r0, #24
 801980a:	d501      	bpl.n	8019810 <_printf_i+0xe8>
 801980c:	681e      	ldr	r6, [r3, #0]
 801980e:	e002      	b.n	8019816 <_printf_i+0xee>
 8019810:	0641      	lsls	r1, r0, #25
 8019812:	d5fb      	bpl.n	801980c <_printf_i+0xe4>
 8019814:	881e      	ldrh	r6, [r3, #0]
 8019816:	4853      	ldr	r0, [pc, #332]	; (8019964 <_printf_i+0x23c>)
 8019818:	2f6f      	cmp	r7, #111	; 0x6f
 801981a:	bf0c      	ite	eq
 801981c:	2308      	moveq	r3, #8
 801981e:	230a      	movne	r3, #10
 8019820:	2100      	movs	r1, #0
 8019822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019826:	6865      	ldr	r5, [r4, #4]
 8019828:	60a5      	str	r5, [r4, #8]
 801982a:	2d00      	cmp	r5, #0
 801982c:	bfa2      	ittt	ge
 801982e:	6821      	ldrge	r1, [r4, #0]
 8019830:	f021 0104 	bicge.w	r1, r1, #4
 8019834:	6021      	strge	r1, [r4, #0]
 8019836:	b90e      	cbnz	r6, 801983c <_printf_i+0x114>
 8019838:	2d00      	cmp	r5, #0
 801983a:	d04b      	beq.n	80198d4 <_printf_i+0x1ac>
 801983c:	4615      	mov	r5, r2
 801983e:	fbb6 f1f3 	udiv	r1, r6, r3
 8019842:	fb03 6711 	mls	r7, r3, r1, r6
 8019846:	5dc7      	ldrb	r7, [r0, r7]
 8019848:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801984c:	4637      	mov	r7, r6
 801984e:	42bb      	cmp	r3, r7
 8019850:	460e      	mov	r6, r1
 8019852:	d9f4      	bls.n	801983e <_printf_i+0x116>
 8019854:	2b08      	cmp	r3, #8
 8019856:	d10b      	bne.n	8019870 <_printf_i+0x148>
 8019858:	6823      	ldr	r3, [r4, #0]
 801985a:	07de      	lsls	r6, r3, #31
 801985c:	d508      	bpl.n	8019870 <_printf_i+0x148>
 801985e:	6923      	ldr	r3, [r4, #16]
 8019860:	6861      	ldr	r1, [r4, #4]
 8019862:	4299      	cmp	r1, r3
 8019864:	bfde      	ittt	le
 8019866:	2330      	movle	r3, #48	; 0x30
 8019868:	f805 3c01 	strble.w	r3, [r5, #-1]
 801986c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019870:	1b52      	subs	r2, r2, r5
 8019872:	6122      	str	r2, [r4, #16]
 8019874:	f8cd a000 	str.w	sl, [sp]
 8019878:	464b      	mov	r3, r9
 801987a:	aa03      	add	r2, sp, #12
 801987c:	4621      	mov	r1, r4
 801987e:	4640      	mov	r0, r8
 8019880:	f7ff fee4 	bl	801964c <_printf_common>
 8019884:	3001      	adds	r0, #1
 8019886:	d14a      	bne.n	801991e <_printf_i+0x1f6>
 8019888:	f04f 30ff 	mov.w	r0, #4294967295
 801988c:	b004      	add	sp, #16
 801988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019892:	6823      	ldr	r3, [r4, #0]
 8019894:	f043 0320 	orr.w	r3, r3, #32
 8019898:	6023      	str	r3, [r4, #0]
 801989a:	4833      	ldr	r0, [pc, #204]	; (8019968 <_printf_i+0x240>)
 801989c:	2778      	movs	r7, #120	; 0x78
 801989e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80198a2:	6823      	ldr	r3, [r4, #0]
 80198a4:	6829      	ldr	r1, [r5, #0]
 80198a6:	061f      	lsls	r7, r3, #24
 80198a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80198ac:	d402      	bmi.n	80198b4 <_printf_i+0x18c>
 80198ae:	065f      	lsls	r7, r3, #25
 80198b0:	bf48      	it	mi
 80198b2:	b2b6      	uxthmi	r6, r6
 80198b4:	07df      	lsls	r7, r3, #31
 80198b6:	bf48      	it	mi
 80198b8:	f043 0320 	orrmi.w	r3, r3, #32
 80198bc:	6029      	str	r1, [r5, #0]
 80198be:	bf48      	it	mi
 80198c0:	6023      	strmi	r3, [r4, #0]
 80198c2:	b91e      	cbnz	r6, 80198cc <_printf_i+0x1a4>
 80198c4:	6823      	ldr	r3, [r4, #0]
 80198c6:	f023 0320 	bic.w	r3, r3, #32
 80198ca:	6023      	str	r3, [r4, #0]
 80198cc:	2310      	movs	r3, #16
 80198ce:	e7a7      	b.n	8019820 <_printf_i+0xf8>
 80198d0:	4824      	ldr	r0, [pc, #144]	; (8019964 <_printf_i+0x23c>)
 80198d2:	e7e4      	b.n	801989e <_printf_i+0x176>
 80198d4:	4615      	mov	r5, r2
 80198d6:	e7bd      	b.n	8019854 <_printf_i+0x12c>
 80198d8:	682b      	ldr	r3, [r5, #0]
 80198da:	6826      	ldr	r6, [r4, #0]
 80198dc:	6961      	ldr	r1, [r4, #20]
 80198de:	1d18      	adds	r0, r3, #4
 80198e0:	6028      	str	r0, [r5, #0]
 80198e2:	0635      	lsls	r5, r6, #24
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	d501      	bpl.n	80198ec <_printf_i+0x1c4>
 80198e8:	6019      	str	r1, [r3, #0]
 80198ea:	e002      	b.n	80198f2 <_printf_i+0x1ca>
 80198ec:	0670      	lsls	r0, r6, #25
 80198ee:	d5fb      	bpl.n	80198e8 <_printf_i+0x1c0>
 80198f0:	8019      	strh	r1, [r3, #0]
 80198f2:	2300      	movs	r3, #0
 80198f4:	6123      	str	r3, [r4, #16]
 80198f6:	4615      	mov	r5, r2
 80198f8:	e7bc      	b.n	8019874 <_printf_i+0x14c>
 80198fa:	682b      	ldr	r3, [r5, #0]
 80198fc:	1d1a      	adds	r2, r3, #4
 80198fe:	602a      	str	r2, [r5, #0]
 8019900:	681d      	ldr	r5, [r3, #0]
 8019902:	6862      	ldr	r2, [r4, #4]
 8019904:	2100      	movs	r1, #0
 8019906:	4628      	mov	r0, r5
 8019908:	f7e8 f9ca 	bl	8001ca0 <memchr>
 801990c:	b108      	cbz	r0, 8019912 <_printf_i+0x1ea>
 801990e:	1b40      	subs	r0, r0, r5
 8019910:	6060      	str	r0, [r4, #4]
 8019912:	6863      	ldr	r3, [r4, #4]
 8019914:	6123      	str	r3, [r4, #16]
 8019916:	2300      	movs	r3, #0
 8019918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801991c:	e7aa      	b.n	8019874 <_printf_i+0x14c>
 801991e:	6923      	ldr	r3, [r4, #16]
 8019920:	462a      	mov	r2, r5
 8019922:	4649      	mov	r1, r9
 8019924:	4640      	mov	r0, r8
 8019926:	47d0      	blx	sl
 8019928:	3001      	adds	r0, #1
 801992a:	d0ad      	beq.n	8019888 <_printf_i+0x160>
 801992c:	6823      	ldr	r3, [r4, #0]
 801992e:	079b      	lsls	r3, r3, #30
 8019930:	d413      	bmi.n	801995a <_printf_i+0x232>
 8019932:	68e0      	ldr	r0, [r4, #12]
 8019934:	9b03      	ldr	r3, [sp, #12]
 8019936:	4298      	cmp	r0, r3
 8019938:	bfb8      	it	lt
 801993a:	4618      	movlt	r0, r3
 801993c:	e7a6      	b.n	801988c <_printf_i+0x164>
 801993e:	2301      	movs	r3, #1
 8019940:	4632      	mov	r2, r6
 8019942:	4649      	mov	r1, r9
 8019944:	4640      	mov	r0, r8
 8019946:	47d0      	blx	sl
 8019948:	3001      	adds	r0, #1
 801994a:	d09d      	beq.n	8019888 <_printf_i+0x160>
 801994c:	3501      	adds	r5, #1
 801994e:	68e3      	ldr	r3, [r4, #12]
 8019950:	9903      	ldr	r1, [sp, #12]
 8019952:	1a5b      	subs	r3, r3, r1
 8019954:	42ab      	cmp	r3, r5
 8019956:	dcf2      	bgt.n	801993e <_printf_i+0x216>
 8019958:	e7eb      	b.n	8019932 <_printf_i+0x20a>
 801995a:	2500      	movs	r5, #0
 801995c:	f104 0619 	add.w	r6, r4, #25
 8019960:	e7f5      	b.n	801994e <_printf_i+0x226>
 8019962:	bf00      	nop
 8019964:	0801f0a8 	.word	0x0801f0a8
 8019968:	0801f0b9 	.word	0x0801f0b9

0801996c <std>:
 801996c:	2300      	movs	r3, #0
 801996e:	b510      	push	{r4, lr}
 8019970:	4604      	mov	r4, r0
 8019972:	e9c0 3300 	strd	r3, r3, [r0]
 8019976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801997a:	6083      	str	r3, [r0, #8]
 801997c:	8181      	strh	r1, [r0, #12]
 801997e:	6643      	str	r3, [r0, #100]	; 0x64
 8019980:	81c2      	strh	r2, [r0, #14]
 8019982:	6183      	str	r3, [r0, #24]
 8019984:	4619      	mov	r1, r3
 8019986:	2208      	movs	r2, #8
 8019988:	305c      	adds	r0, #92	; 0x5c
 801998a:	f000 fa07 	bl	8019d9c <memset>
 801998e:	4b0d      	ldr	r3, [pc, #52]	; (80199c4 <std+0x58>)
 8019990:	6263      	str	r3, [r4, #36]	; 0x24
 8019992:	4b0d      	ldr	r3, [pc, #52]	; (80199c8 <std+0x5c>)
 8019994:	62a3      	str	r3, [r4, #40]	; 0x28
 8019996:	4b0d      	ldr	r3, [pc, #52]	; (80199cc <std+0x60>)
 8019998:	62e3      	str	r3, [r4, #44]	; 0x2c
 801999a:	4b0d      	ldr	r3, [pc, #52]	; (80199d0 <std+0x64>)
 801999c:	6323      	str	r3, [r4, #48]	; 0x30
 801999e:	4b0d      	ldr	r3, [pc, #52]	; (80199d4 <std+0x68>)
 80199a0:	6224      	str	r4, [r4, #32]
 80199a2:	429c      	cmp	r4, r3
 80199a4:	d006      	beq.n	80199b4 <std+0x48>
 80199a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80199aa:	4294      	cmp	r4, r2
 80199ac:	d002      	beq.n	80199b4 <std+0x48>
 80199ae:	33d0      	adds	r3, #208	; 0xd0
 80199b0:	429c      	cmp	r4, r3
 80199b2:	d105      	bne.n	80199c0 <std+0x54>
 80199b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80199b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199bc:	f000 ba64 	b.w	8019e88 <__retarget_lock_init_recursive>
 80199c0:	bd10      	pop	{r4, pc}
 80199c2:	bf00      	nop
 80199c4:	08019bcd 	.word	0x08019bcd
 80199c8:	08019bef 	.word	0x08019bef
 80199cc:	08019c27 	.word	0x08019c27
 80199d0:	08019c4b 	.word	0x08019c4b
 80199d4:	2000722c 	.word	0x2000722c

080199d8 <stdio_exit_handler>:
 80199d8:	4a02      	ldr	r2, [pc, #8]	; (80199e4 <stdio_exit_handler+0xc>)
 80199da:	4903      	ldr	r1, [pc, #12]	; (80199e8 <stdio_exit_handler+0x10>)
 80199dc:	4803      	ldr	r0, [pc, #12]	; (80199ec <stdio_exit_handler+0x14>)
 80199de:	f000 b869 	b.w	8019ab4 <_fwalk_sglue>
 80199e2:	bf00      	nop
 80199e4:	20000064 	.word	0x20000064
 80199e8:	0801b75d 	.word	0x0801b75d
 80199ec:	20000070 	.word	0x20000070

080199f0 <cleanup_stdio>:
 80199f0:	6841      	ldr	r1, [r0, #4]
 80199f2:	4b0c      	ldr	r3, [pc, #48]	; (8019a24 <cleanup_stdio+0x34>)
 80199f4:	4299      	cmp	r1, r3
 80199f6:	b510      	push	{r4, lr}
 80199f8:	4604      	mov	r4, r0
 80199fa:	d001      	beq.n	8019a00 <cleanup_stdio+0x10>
 80199fc:	f001 feae 	bl	801b75c <_fflush_r>
 8019a00:	68a1      	ldr	r1, [r4, #8]
 8019a02:	4b09      	ldr	r3, [pc, #36]	; (8019a28 <cleanup_stdio+0x38>)
 8019a04:	4299      	cmp	r1, r3
 8019a06:	d002      	beq.n	8019a0e <cleanup_stdio+0x1e>
 8019a08:	4620      	mov	r0, r4
 8019a0a:	f001 fea7 	bl	801b75c <_fflush_r>
 8019a0e:	68e1      	ldr	r1, [r4, #12]
 8019a10:	4b06      	ldr	r3, [pc, #24]	; (8019a2c <cleanup_stdio+0x3c>)
 8019a12:	4299      	cmp	r1, r3
 8019a14:	d004      	beq.n	8019a20 <cleanup_stdio+0x30>
 8019a16:	4620      	mov	r0, r4
 8019a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a1c:	f001 be9e 	b.w	801b75c <_fflush_r>
 8019a20:	bd10      	pop	{r4, pc}
 8019a22:	bf00      	nop
 8019a24:	2000722c 	.word	0x2000722c
 8019a28:	20007294 	.word	0x20007294
 8019a2c:	200072fc 	.word	0x200072fc

08019a30 <global_stdio_init.part.0>:
 8019a30:	b510      	push	{r4, lr}
 8019a32:	4b0b      	ldr	r3, [pc, #44]	; (8019a60 <global_stdio_init.part.0+0x30>)
 8019a34:	4c0b      	ldr	r4, [pc, #44]	; (8019a64 <global_stdio_init.part.0+0x34>)
 8019a36:	4a0c      	ldr	r2, [pc, #48]	; (8019a68 <global_stdio_init.part.0+0x38>)
 8019a38:	601a      	str	r2, [r3, #0]
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	2104      	movs	r1, #4
 8019a40:	f7ff ff94 	bl	801996c <std>
 8019a44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019a48:	2201      	movs	r2, #1
 8019a4a:	2109      	movs	r1, #9
 8019a4c:	f7ff ff8e 	bl	801996c <std>
 8019a50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019a54:	2202      	movs	r2, #2
 8019a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a5a:	2112      	movs	r1, #18
 8019a5c:	f7ff bf86 	b.w	801996c <std>
 8019a60:	20007364 	.word	0x20007364
 8019a64:	2000722c 	.word	0x2000722c
 8019a68:	080199d9 	.word	0x080199d9

08019a6c <__sfp_lock_acquire>:
 8019a6c:	4801      	ldr	r0, [pc, #4]	; (8019a74 <__sfp_lock_acquire+0x8>)
 8019a6e:	f000 ba0c 	b.w	8019e8a <__retarget_lock_acquire_recursive>
 8019a72:	bf00      	nop
 8019a74:	2000736d 	.word	0x2000736d

08019a78 <__sfp_lock_release>:
 8019a78:	4801      	ldr	r0, [pc, #4]	; (8019a80 <__sfp_lock_release+0x8>)
 8019a7a:	f000 ba07 	b.w	8019e8c <__retarget_lock_release_recursive>
 8019a7e:	bf00      	nop
 8019a80:	2000736d 	.word	0x2000736d

08019a84 <__sinit>:
 8019a84:	b510      	push	{r4, lr}
 8019a86:	4604      	mov	r4, r0
 8019a88:	f7ff fff0 	bl	8019a6c <__sfp_lock_acquire>
 8019a8c:	6a23      	ldr	r3, [r4, #32]
 8019a8e:	b11b      	cbz	r3, 8019a98 <__sinit+0x14>
 8019a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a94:	f7ff bff0 	b.w	8019a78 <__sfp_lock_release>
 8019a98:	4b04      	ldr	r3, [pc, #16]	; (8019aac <__sinit+0x28>)
 8019a9a:	6223      	str	r3, [r4, #32]
 8019a9c:	4b04      	ldr	r3, [pc, #16]	; (8019ab0 <__sinit+0x2c>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d1f5      	bne.n	8019a90 <__sinit+0xc>
 8019aa4:	f7ff ffc4 	bl	8019a30 <global_stdio_init.part.0>
 8019aa8:	e7f2      	b.n	8019a90 <__sinit+0xc>
 8019aaa:	bf00      	nop
 8019aac:	080199f1 	.word	0x080199f1
 8019ab0:	20007364 	.word	0x20007364

08019ab4 <_fwalk_sglue>:
 8019ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ab8:	4607      	mov	r7, r0
 8019aba:	4688      	mov	r8, r1
 8019abc:	4614      	mov	r4, r2
 8019abe:	2600      	movs	r6, #0
 8019ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8019ac8:	d505      	bpl.n	8019ad6 <_fwalk_sglue+0x22>
 8019aca:	6824      	ldr	r4, [r4, #0]
 8019acc:	2c00      	cmp	r4, #0
 8019ace:	d1f7      	bne.n	8019ac0 <_fwalk_sglue+0xc>
 8019ad0:	4630      	mov	r0, r6
 8019ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ad6:	89ab      	ldrh	r3, [r5, #12]
 8019ad8:	2b01      	cmp	r3, #1
 8019ada:	d907      	bls.n	8019aec <_fwalk_sglue+0x38>
 8019adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019ae0:	3301      	adds	r3, #1
 8019ae2:	d003      	beq.n	8019aec <_fwalk_sglue+0x38>
 8019ae4:	4629      	mov	r1, r5
 8019ae6:	4638      	mov	r0, r7
 8019ae8:	47c0      	blx	r8
 8019aea:	4306      	orrs	r6, r0
 8019aec:	3568      	adds	r5, #104	; 0x68
 8019aee:	e7e9      	b.n	8019ac4 <_fwalk_sglue+0x10>

08019af0 <iprintf>:
 8019af0:	b40f      	push	{r0, r1, r2, r3}
 8019af2:	b507      	push	{r0, r1, r2, lr}
 8019af4:	4906      	ldr	r1, [pc, #24]	; (8019b10 <iprintf+0x20>)
 8019af6:	ab04      	add	r3, sp, #16
 8019af8:	6808      	ldr	r0, [r1, #0]
 8019afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8019afe:	6881      	ldr	r1, [r0, #8]
 8019b00:	9301      	str	r3, [sp, #4]
 8019b02:	f001 fc8b 	bl	801b41c <_vfiprintf_r>
 8019b06:	b003      	add	sp, #12
 8019b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b0c:	b004      	add	sp, #16
 8019b0e:	4770      	bx	lr
 8019b10:	200000bc 	.word	0x200000bc

08019b14 <_puts_r>:
 8019b14:	6a03      	ldr	r3, [r0, #32]
 8019b16:	b570      	push	{r4, r5, r6, lr}
 8019b18:	6884      	ldr	r4, [r0, #8]
 8019b1a:	4605      	mov	r5, r0
 8019b1c:	460e      	mov	r6, r1
 8019b1e:	b90b      	cbnz	r3, 8019b24 <_puts_r+0x10>
 8019b20:	f7ff ffb0 	bl	8019a84 <__sinit>
 8019b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b26:	07db      	lsls	r3, r3, #31
 8019b28:	d405      	bmi.n	8019b36 <_puts_r+0x22>
 8019b2a:	89a3      	ldrh	r3, [r4, #12]
 8019b2c:	0598      	lsls	r0, r3, #22
 8019b2e:	d402      	bmi.n	8019b36 <_puts_r+0x22>
 8019b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b32:	f000 f9aa 	bl	8019e8a <__retarget_lock_acquire_recursive>
 8019b36:	89a3      	ldrh	r3, [r4, #12]
 8019b38:	0719      	lsls	r1, r3, #28
 8019b3a:	d513      	bpl.n	8019b64 <_puts_r+0x50>
 8019b3c:	6923      	ldr	r3, [r4, #16]
 8019b3e:	b18b      	cbz	r3, 8019b64 <_puts_r+0x50>
 8019b40:	3e01      	subs	r6, #1
 8019b42:	68a3      	ldr	r3, [r4, #8]
 8019b44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019b48:	3b01      	subs	r3, #1
 8019b4a:	60a3      	str	r3, [r4, #8]
 8019b4c:	b9e9      	cbnz	r1, 8019b8a <_puts_r+0x76>
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	da2e      	bge.n	8019bb0 <_puts_r+0x9c>
 8019b52:	4622      	mov	r2, r4
 8019b54:	210a      	movs	r1, #10
 8019b56:	4628      	mov	r0, r5
 8019b58:	f000 f87b 	bl	8019c52 <__swbuf_r>
 8019b5c:	3001      	adds	r0, #1
 8019b5e:	d007      	beq.n	8019b70 <_puts_r+0x5c>
 8019b60:	250a      	movs	r5, #10
 8019b62:	e007      	b.n	8019b74 <_puts_r+0x60>
 8019b64:	4621      	mov	r1, r4
 8019b66:	4628      	mov	r0, r5
 8019b68:	f000 f8b0 	bl	8019ccc <__swsetup_r>
 8019b6c:	2800      	cmp	r0, #0
 8019b6e:	d0e7      	beq.n	8019b40 <_puts_r+0x2c>
 8019b70:	f04f 35ff 	mov.w	r5, #4294967295
 8019b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b76:	07da      	lsls	r2, r3, #31
 8019b78:	d405      	bmi.n	8019b86 <_puts_r+0x72>
 8019b7a:	89a3      	ldrh	r3, [r4, #12]
 8019b7c:	059b      	lsls	r3, r3, #22
 8019b7e:	d402      	bmi.n	8019b86 <_puts_r+0x72>
 8019b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b82:	f000 f983 	bl	8019e8c <__retarget_lock_release_recursive>
 8019b86:	4628      	mov	r0, r5
 8019b88:	bd70      	pop	{r4, r5, r6, pc}
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	da04      	bge.n	8019b98 <_puts_r+0x84>
 8019b8e:	69a2      	ldr	r2, [r4, #24]
 8019b90:	429a      	cmp	r2, r3
 8019b92:	dc06      	bgt.n	8019ba2 <_puts_r+0x8e>
 8019b94:	290a      	cmp	r1, #10
 8019b96:	d004      	beq.n	8019ba2 <_puts_r+0x8e>
 8019b98:	6823      	ldr	r3, [r4, #0]
 8019b9a:	1c5a      	adds	r2, r3, #1
 8019b9c:	6022      	str	r2, [r4, #0]
 8019b9e:	7019      	strb	r1, [r3, #0]
 8019ba0:	e7cf      	b.n	8019b42 <_puts_r+0x2e>
 8019ba2:	4622      	mov	r2, r4
 8019ba4:	4628      	mov	r0, r5
 8019ba6:	f000 f854 	bl	8019c52 <__swbuf_r>
 8019baa:	3001      	adds	r0, #1
 8019bac:	d1c9      	bne.n	8019b42 <_puts_r+0x2e>
 8019bae:	e7df      	b.n	8019b70 <_puts_r+0x5c>
 8019bb0:	6823      	ldr	r3, [r4, #0]
 8019bb2:	250a      	movs	r5, #10
 8019bb4:	1c5a      	adds	r2, r3, #1
 8019bb6:	6022      	str	r2, [r4, #0]
 8019bb8:	701d      	strb	r5, [r3, #0]
 8019bba:	e7db      	b.n	8019b74 <_puts_r+0x60>

08019bbc <puts>:
 8019bbc:	4b02      	ldr	r3, [pc, #8]	; (8019bc8 <puts+0xc>)
 8019bbe:	4601      	mov	r1, r0
 8019bc0:	6818      	ldr	r0, [r3, #0]
 8019bc2:	f7ff bfa7 	b.w	8019b14 <_puts_r>
 8019bc6:	bf00      	nop
 8019bc8:	200000bc 	.word	0x200000bc

08019bcc <__sread>:
 8019bcc:	b510      	push	{r4, lr}
 8019bce:	460c      	mov	r4, r1
 8019bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bd4:	f000 f910 	bl	8019df8 <_read_r>
 8019bd8:	2800      	cmp	r0, #0
 8019bda:	bfab      	itete	ge
 8019bdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019bde:	89a3      	ldrhlt	r3, [r4, #12]
 8019be0:	181b      	addge	r3, r3, r0
 8019be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019be6:	bfac      	ite	ge
 8019be8:	6563      	strge	r3, [r4, #84]	; 0x54
 8019bea:	81a3      	strhlt	r3, [r4, #12]
 8019bec:	bd10      	pop	{r4, pc}

08019bee <__swrite>:
 8019bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bf2:	461f      	mov	r7, r3
 8019bf4:	898b      	ldrh	r3, [r1, #12]
 8019bf6:	05db      	lsls	r3, r3, #23
 8019bf8:	4605      	mov	r5, r0
 8019bfa:	460c      	mov	r4, r1
 8019bfc:	4616      	mov	r6, r2
 8019bfe:	d505      	bpl.n	8019c0c <__swrite+0x1e>
 8019c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c04:	2302      	movs	r3, #2
 8019c06:	2200      	movs	r2, #0
 8019c08:	f000 f8e4 	bl	8019dd4 <_lseek_r>
 8019c0c:	89a3      	ldrh	r3, [r4, #12]
 8019c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019c16:	81a3      	strh	r3, [r4, #12]
 8019c18:	4632      	mov	r2, r6
 8019c1a:	463b      	mov	r3, r7
 8019c1c:	4628      	mov	r0, r5
 8019c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c22:	f000 b8fb 	b.w	8019e1c <_write_r>

08019c26 <__sseek>:
 8019c26:	b510      	push	{r4, lr}
 8019c28:	460c      	mov	r4, r1
 8019c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c2e:	f000 f8d1 	bl	8019dd4 <_lseek_r>
 8019c32:	1c43      	adds	r3, r0, #1
 8019c34:	89a3      	ldrh	r3, [r4, #12]
 8019c36:	bf15      	itete	ne
 8019c38:	6560      	strne	r0, [r4, #84]	; 0x54
 8019c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019c42:	81a3      	strheq	r3, [r4, #12]
 8019c44:	bf18      	it	ne
 8019c46:	81a3      	strhne	r3, [r4, #12]
 8019c48:	bd10      	pop	{r4, pc}

08019c4a <__sclose>:
 8019c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c4e:	f000 b8b1 	b.w	8019db4 <_close_r>

08019c52 <__swbuf_r>:
 8019c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c54:	460e      	mov	r6, r1
 8019c56:	4614      	mov	r4, r2
 8019c58:	4605      	mov	r5, r0
 8019c5a:	b118      	cbz	r0, 8019c64 <__swbuf_r+0x12>
 8019c5c:	6a03      	ldr	r3, [r0, #32]
 8019c5e:	b90b      	cbnz	r3, 8019c64 <__swbuf_r+0x12>
 8019c60:	f7ff ff10 	bl	8019a84 <__sinit>
 8019c64:	69a3      	ldr	r3, [r4, #24]
 8019c66:	60a3      	str	r3, [r4, #8]
 8019c68:	89a3      	ldrh	r3, [r4, #12]
 8019c6a:	071a      	lsls	r2, r3, #28
 8019c6c:	d525      	bpl.n	8019cba <__swbuf_r+0x68>
 8019c6e:	6923      	ldr	r3, [r4, #16]
 8019c70:	b31b      	cbz	r3, 8019cba <__swbuf_r+0x68>
 8019c72:	6823      	ldr	r3, [r4, #0]
 8019c74:	6922      	ldr	r2, [r4, #16]
 8019c76:	1a98      	subs	r0, r3, r2
 8019c78:	6963      	ldr	r3, [r4, #20]
 8019c7a:	b2f6      	uxtb	r6, r6
 8019c7c:	4283      	cmp	r3, r0
 8019c7e:	4637      	mov	r7, r6
 8019c80:	dc04      	bgt.n	8019c8c <__swbuf_r+0x3a>
 8019c82:	4621      	mov	r1, r4
 8019c84:	4628      	mov	r0, r5
 8019c86:	f001 fd69 	bl	801b75c <_fflush_r>
 8019c8a:	b9e0      	cbnz	r0, 8019cc6 <__swbuf_r+0x74>
 8019c8c:	68a3      	ldr	r3, [r4, #8]
 8019c8e:	3b01      	subs	r3, #1
 8019c90:	60a3      	str	r3, [r4, #8]
 8019c92:	6823      	ldr	r3, [r4, #0]
 8019c94:	1c5a      	adds	r2, r3, #1
 8019c96:	6022      	str	r2, [r4, #0]
 8019c98:	701e      	strb	r6, [r3, #0]
 8019c9a:	6962      	ldr	r2, [r4, #20]
 8019c9c:	1c43      	adds	r3, r0, #1
 8019c9e:	429a      	cmp	r2, r3
 8019ca0:	d004      	beq.n	8019cac <__swbuf_r+0x5a>
 8019ca2:	89a3      	ldrh	r3, [r4, #12]
 8019ca4:	07db      	lsls	r3, r3, #31
 8019ca6:	d506      	bpl.n	8019cb6 <__swbuf_r+0x64>
 8019ca8:	2e0a      	cmp	r6, #10
 8019caa:	d104      	bne.n	8019cb6 <__swbuf_r+0x64>
 8019cac:	4621      	mov	r1, r4
 8019cae:	4628      	mov	r0, r5
 8019cb0:	f001 fd54 	bl	801b75c <_fflush_r>
 8019cb4:	b938      	cbnz	r0, 8019cc6 <__swbuf_r+0x74>
 8019cb6:	4638      	mov	r0, r7
 8019cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cba:	4621      	mov	r1, r4
 8019cbc:	4628      	mov	r0, r5
 8019cbe:	f000 f805 	bl	8019ccc <__swsetup_r>
 8019cc2:	2800      	cmp	r0, #0
 8019cc4:	d0d5      	beq.n	8019c72 <__swbuf_r+0x20>
 8019cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8019cca:	e7f4      	b.n	8019cb6 <__swbuf_r+0x64>

08019ccc <__swsetup_r>:
 8019ccc:	b538      	push	{r3, r4, r5, lr}
 8019cce:	4b2a      	ldr	r3, [pc, #168]	; (8019d78 <__swsetup_r+0xac>)
 8019cd0:	4605      	mov	r5, r0
 8019cd2:	6818      	ldr	r0, [r3, #0]
 8019cd4:	460c      	mov	r4, r1
 8019cd6:	b118      	cbz	r0, 8019ce0 <__swsetup_r+0x14>
 8019cd8:	6a03      	ldr	r3, [r0, #32]
 8019cda:	b90b      	cbnz	r3, 8019ce0 <__swsetup_r+0x14>
 8019cdc:	f7ff fed2 	bl	8019a84 <__sinit>
 8019ce0:	89a3      	ldrh	r3, [r4, #12]
 8019ce2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ce6:	0718      	lsls	r0, r3, #28
 8019ce8:	d422      	bmi.n	8019d30 <__swsetup_r+0x64>
 8019cea:	06d9      	lsls	r1, r3, #27
 8019cec:	d407      	bmi.n	8019cfe <__swsetup_r+0x32>
 8019cee:	2309      	movs	r3, #9
 8019cf0:	602b      	str	r3, [r5, #0]
 8019cf2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019cf6:	81a3      	strh	r3, [r4, #12]
 8019cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8019cfc:	e034      	b.n	8019d68 <__swsetup_r+0x9c>
 8019cfe:	0758      	lsls	r0, r3, #29
 8019d00:	d512      	bpl.n	8019d28 <__swsetup_r+0x5c>
 8019d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d04:	b141      	cbz	r1, 8019d18 <__swsetup_r+0x4c>
 8019d06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d0a:	4299      	cmp	r1, r3
 8019d0c:	d002      	beq.n	8019d14 <__swsetup_r+0x48>
 8019d0e:	4628      	mov	r0, r5
 8019d10:	f000 fede 	bl	801aad0 <_free_r>
 8019d14:	2300      	movs	r3, #0
 8019d16:	6363      	str	r3, [r4, #52]	; 0x34
 8019d18:	89a3      	ldrh	r3, [r4, #12]
 8019d1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019d1e:	81a3      	strh	r3, [r4, #12]
 8019d20:	2300      	movs	r3, #0
 8019d22:	6063      	str	r3, [r4, #4]
 8019d24:	6923      	ldr	r3, [r4, #16]
 8019d26:	6023      	str	r3, [r4, #0]
 8019d28:	89a3      	ldrh	r3, [r4, #12]
 8019d2a:	f043 0308 	orr.w	r3, r3, #8
 8019d2e:	81a3      	strh	r3, [r4, #12]
 8019d30:	6923      	ldr	r3, [r4, #16]
 8019d32:	b94b      	cbnz	r3, 8019d48 <__swsetup_r+0x7c>
 8019d34:	89a3      	ldrh	r3, [r4, #12]
 8019d36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019d3e:	d003      	beq.n	8019d48 <__swsetup_r+0x7c>
 8019d40:	4621      	mov	r1, r4
 8019d42:	4628      	mov	r0, r5
 8019d44:	f001 fd6a 	bl	801b81c <__smakebuf_r>
 8019d48:	89a0      	ldrh	r0, [r4, #12]
 8019d4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019d4e:	f010 0301 	ands.w	r3, r0, #1
 8019d52:	d00a      	beq.n	8019d6a <__swsetup_r+0x9e>
 8019d54:	2300      	movs	r3, #0
 8019d56:	60a3      	str	r3, [r4, #8]
 8019d58:	6963      	ldr	r3, [r4, #20]
 8019d5a:	425b      	negs	r3, r3
 8019d5c:	61a3      	str	r3, [r4, #24]
 8019d5e:	6923      	ldr	r3, [r4, #16]
 8019d60:	b943      	cbnz	r3, 8019d74 <__swsetup_r+0xa8>
 8019d62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019d66:	d1c4      	bne.n	8019cf2 <__swsetup_r+0x26>
 8019d68:	bd38      	pop	{r3, r4, r5, pc}
 8019d6a:	0781      	lsls	r1, r0, #30
 8019d6c:	bf58      	it	pl
 8019d6e:	6963      	ldrpl	r3, [r4, #20]
 8019d70:	60a3      	str	r3, [r4, #8]
 8019d72:	e7f4      	b.n	8019d5e <__swsetup_r+0x92>
 8019d74:	2000      	movs	r0, #0
 8019d76:	e7f7      	b.n	8019d68 <__swsetup_r+0x9c>
 8019d78:	200000bc 	.word	0x200000bc

08019d7c <memcmp>:
 8019d7c:	b510      	push	{r4, lr}
 8019d7e:	3901      	subs	r1, #1
 8019d80:	4402      	add	r2, r0
 8019d82:	4290      	cmp	r0, r2
 8019d84:	d101      	bne.n	8019d8a <memcmp+0xe>
 8019d86:	2000      	movs	r0, #0
 8019d88:	e005      	b.n	8019d96 <memcmp+0x1a>
 8019d8a:	7803      	ldrb	r3, [r0, #0]
 8019d8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019d90:	42a3      	cmp	r3, r4
 8019d92:	d001      	beq.n	8019d98 <memcmp+0x1c>
 8019d94:	1b18      	subs	r0, r3, r4
 8019d96:	bd10      	pop	{r4, pc}
 8019d98:	3001      	adds	r0, #1
 8019d9a:	e7f2      	b.n	8019d82 <memcmp+0x6>

08019d9c <memset>:
 8019d9c:	4402      	add	r2, r0
 8019d9e:	4603      	mov	r3, r0
 8019da0:	4293      	cmp	r3, r2
 8019da2:	d100      	bne.n	8019da6 <memset+0xa>
 8019da4:	4770      	bx	lr
 8019da6:	f803 1b01 	strb.w	r1, [r3], #1
 8019daa:	e7f9      	b.n	8019da0 <memset+0x4>

08019dac <_localeconv_r>:
 8019dac:	4800      	ldr	r0, [pc, #0]	; (8019db0 <_localeconv_r+0x4>)
 8019dae:	4770      	bx	lr
 8019db0:	200001b0 	.word	0x200001b0

08019db4 <_close_r>:
 8019db4:	b538      	push	{r3, r4, r5, lr}
 8019db6:	4d06      	ldr	r5, [pc, #24]	; (8019dd0 <_close_r+0x1c>)
 8019db8:	2300      	movs	r3, #0
 8019dba:	4604      	mov	r4, r0
 8019dbc:	4608      	mov	r0, r1
 8019dbe:	602b      	str	r3, [r5, #0]
 8019dc0:	f7e9 fd49 	bl	8003856 <_close>
 8019dc4:	1c43      	adds	r3, r0, #1
 8019dc6:	d102      	bne.n	8019dce <_close_r+0x1a>
 8019dc8:	682b      	ldr	r3, [r5, #0]
 8019dca:	b103      	cbz	r3, 8019dce <_close_r+0x1a>
 8019dcc:	6023      	str	r3, [r4, #0]
 8019dce:	bd38      	pop	{r3, r4, r5, pc}
 8019dd0:	20007368 	.word	0x20007368

08019dd4 <_lseek_r>:
 8019dd4:	b538      	push	{r3, r4, r5, lr}
 8019dd6:	4d07      	ldr	r5, [pc, #28]	; (8019df4 <_lseek_r+0x20>)
 8019dd8:	4604      	mov	r4, r0
 8019dda:	4608      	mov	r0, r1
 8019ddc:	4611      	mov	r1, r2
 8019dde:	2200      	movs	r2, #0
 8019de0:	602a      	str	r2, [r5, #0]
 8019de2:	461a      	mov	r2, r3
 8019de4:	f7e9 fd5e 	bl	80038a4 <_lseek>
 8019de8:	1c43      	adds	r3, r0, #1
 8019dea:	d102      	bne.n	8019df2 <_lseek_r+0x1e>
 8019dec:	682b      	ldr	r3, [r5, #0]
 8019dee:	b103      	cbz	r3, 8019df2 <_lseek_r+0x1e>
 8019df0:	6023      	str	r3, [r4, #0]
 8019df2:	bd38      	pop	{r3, r4, r5, pc}
 8019df4:	20007368 	.word	0x20007368

08019df8 <_read_r>:
 8019df8:	b538      	push	{r3, r4, r5, lr}
 8019dfa:	4d07      	ldr	r5, [pc, #28]	; (8019e18 <_read_r+0x20>)
 8019dfc:	4604      	mov	r4, r0
 8019dfe:	4608      	mov	r0, r1
 8019e00:	4611      	mov	r1, r2
 8019e02:	2200      	movs	r2, #0
 8019e04:	602a      	str	r2, [r5, #0]
 8019e06:	461a      	mov	r2, r3
 8019e08:	f7e9 fcec 	bl	80037e4 <_read>
 8019e0c:	1c43      	adds	r3, r0, #1
 8019e0e:	d102      	bne.n	8019e16 <_read_r+0x1e>
 8019e10:	682b      	ldr	r3, [r5, #0]
 8019e12:	b103      	cbz	r3, 8019e16 <_read_r+0x1e>
 8019e14:	6023      	str	r3, [r4, #0]
 8019e16:	bd38      	pop	{r3, r4, r5, pc}
 8019e18:	20007368 	.word	0x20007368

08019e1c <_write_r>:
 8019e1c:	b538      	push	{r3, r4, r5, lr}
 8019e1e:	4d07      	ldr	r5, [pc, #28]	; (8019e3c <_write_r+0x20>)
 8019e20:	4604      	mov	r4, r0
 8019e22:	4608      	mov	r0, r1
 8019e24:	4611      	mov	r1, r2
 8019e26:	2200      	movs	r2, #0
 8019e28:	602a      	str	r2, [r5, #0]
 8019e2a:	461a      	mov	r2, r3
 8019e2c:	f7e9 fcf7 	bl	800381e <_write>
 8019e30:	1c43      	adds	r3, r0, #1
 8019e32:	d102      	bne.n	8019e3a <_write_r+0x1e>
 8019e34:	682b      	ldr	r3, [r5, #0]
 8019e36:	b103      	cbz	r3, 8019e3a <_write_r+0x1e>
 8019e38:	6023      	str	r3, [r4, #0]
 8019e3a:	bd38      	pop	{r3, r4, r5, pc}
 8019e3c:	20007368 	.word	0x20007368

08019e40 <__libc_init_array>:
 8019e40:	b570      	push	{r4, r5, r6, lr}
 8019e42:	4d0d      	ldr	r5, [pc, #52]	; (8019e78 <__libc_init_array+0x38>)
 8019e44:	4c0d      	ldr	r4, [pc, #52]	; (8019e7c <__libc_init_array+0x3c>)
 8019e46:	1b64      	subs	r4, r4, r5
 8019e48:	10a4      	asrs	r4, r4, #2
 8019e4a:	2600      	movs	r6, #0
 8019e4c:	42a6      	cmp	r6, r4
 8019e4e:	d109      	bne.n	8019e64 <__libc_init_array+0x24>
 8019e50:	4d0b      	ldr	r5, [pc, #44]	; (8019e80 <__libc_init_array+0x40>)
 8019e52:	4c0c      	ldr	r4, [pc, #48]	; (8019e84 <__libc_init_array+0x44>)
 8019e54:	f001 fdd0 	bl	801b9f8 <_init>
 8019e58:	1b64      	subs	r4, r4, r5
 8019e5a:	10a4      	asrs	r4, r4, #2
 8019e5c:	2600      	movs	r6, #0
 8019e5e:	42a6      	cmp	r6, r4
 8019e60:	d105      	bne.n	8019e6e <__libc_init_array+0x2e>
 8019e62:	bd70      	pop	{r4, r5, r6, pc}
 8019e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e68:	4798      	blx	r3
 8019e6a:	3601      	adds	r6, #1
 8019e6c:	e7ee      	b.n	8019e4c <__libc_init_array+0xc>
 8019e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019e72:	4798      	blx	r3
 8019e74:	3601      	adds	r6, #1
 8019e76:	e7f2      	b.n	8019e5e <__libc_init_array+0x1e>
 8019e78:	0801f2f8 	.word	0x0801f2f8
 8019e7c:	0801f2f8 	.word	0x0801f2f8
 8019e80:	0801f2f8 	.word	0x0801f2f8
 8019e84:	0801f2fc 	.word	0x0801f2fc

08019e88 <__retarget_lock_init_recursive>:
 8019e88:	4770      	bx	lr

08019e8a <__retarget_lock_acquire_recursive>:
 8019e8a:	4770      	bx	lr

08019e8c <__retarget_lock_release_recursive>:
 8019e8c:	4770      	bx	lr

08019e8e <memcpy>:
 8019e8e:	440a      	add	r2, r1
 8019e90:	4291      	cmp	r1, r2
 8019e92:	f100 33ff 	add.w	r3, r0, #4294967295
 8019e96:	d100      	bne.n	8019e9a <memcpy+0xc>
 8019e98:	4770      	bx	lr
 8019e9a:	b510      	push	{r4, lr}
 8019e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019ea4:	4291      	cmp	r1, r2
 8019ea6:	d1f9      	bne.n	8019e9c <memcpy+0xe>
 8019ea8:	bd10      	pop	{r4, pc}
	...

08019eac <__assert_func>:
 8019eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019eae:	4614      	mov	r4, r2
 8019eb0:	461a      	mov	r2, r3
 8019eb2:	4b09      	ldr	r3, [pc, #36]	; (8019ed8 <__assert_func+0x2c>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	4605      	mov	r5, r0
 8019eb8:	68d8      	ldr	r0, [r3, #12]
 8019eba:	b14c      	cbz	r4, 8019ed0 <__assert_func+0x24>
 8019ebc:	4b07      	ldr	r3, [pc, #28]	; (8019edc <__assert_func+0x30>)
 8019ebe:	9100      	str	r1, [sp, #0]
 8019ec0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019ec4:	4906      	ldr	r1, [pc, #24]	; (8019ee0 <__assert_func+0x34>)
 8019ec6:	462b      	mov	r3, r5
 8019ec8:	f001 fc70 	bl	801b7ac <fiprintf>
 8019ecc:	f001 fd14 	bl	801b8f8 <abort>
 8019ed0:	4b04      	ldr	r3, [pc, #16]	; (8019ee4 <__assert_func+0x38>)
 8019ed2:	461c      	mov	r4, r3
 8019ed4:	e7f3      	b.n	8019ebe <__assert_func+0x12>
 8019ed6:	bf00      	nop
 8019ed8:	200000bc 	.word	0x200000bc
 8019edc:	0801f0ca 	.word	0x0801f0ca
 8019ee0:	0801f0d7 	.word	0x0801f0d7
 8019ee4:	0801f105 	.word	0x0801f105

08019ee8 <quorem>:
 8019ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eec:	6903      	ldr	r3, [r0, #16]
 8019eee:	690c      	ldr	r4, [r1, #16]
 8019ef0:	42a3      	cmp	r3, r4
 8019ef2:	4607      	mov	r7, r0
 8019ef4:	db7e      	blt.n	8019ff4 <quorem+0x10c>
 8019ef6:	3c01      	subs	r4, #1
 8019ef8:	f101 0814 	add.w	r8, r1, #20
 8019efc:	f100 0514 	add.w	r5, r0, #20
 8019f00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019f04:	9301      	str	r3, [sp, #4]
 8019f06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019f0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019f0e:	3301      	adds	r3, #1
 8019f10:	429a      	cmp	r2, r3
 8019f12:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019f16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019f1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8019f1e:	d331      	bcc.n	8019f84 <quorem+0x9c>
 8019f20:	f04f 0e00 	mov.w	lr, #0
 8019f24:	4640      	mov	r0, r8
 8019f26:	46ac      	mov	ip, r5
 8019f28:	46f2      	mov	sl, lr
 8019f2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8019f2e:	b293      	uxth	r3, r2
 8019f30:	fb06 e303 	mla	r3, r6, r3, lr
 8019f34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019f38:	0c1a      	lsrs	r2, r3, #16
 8019f3a:	b29b      	uxth	r3, r3
 8019f3c:	ebaa 0303 	sub.w	r3, sl, r3
 8019f40:	f8dc a000 	ldr.w	sl, [ip]
 8019f44:	fa13 f38a 	uxtah	r3, r3, sl
 8019f48:	fb06 220e 	mla	r2, r6, lr, r2
 8019f4c:	9300      	str	r3, [sp, #0]
 8019f4e:	9b00      	ldr	r3, [sp, #0]
 8019f50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019f54:	b292      	uxth	r2, r2
 8019f56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019f5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019f5e:	f8bd 3000 	ldrh.w	r3, [sp]
 8019f62:	4581      	cmp	r9, r0
 8019f64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019f68:	f84c 3b04 	str.w	r3, [ip], #4
 8019f6c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019f70:	d2db      	bcs.n	8019f2a <quorem+0x42>
 8019f72:	f855 300b 	ldr.w	r3, [r5, fp]
 8019f76:	b92b      	cbnz	r3, 8019f84 <quorem+0x9c>
 8019f78:	9b01      	ldr	r3, [sp, #4]
 8019f7a:	3b04      	subs	r3, #4
 8019f7c:	429d      	cmp	r5, r3
 8019f7e:	461a      	mov	r2, r3
 8019f80:	d32c      	bcc.n	8019fdc <quorem+0xf4>
 8019f82:	613c      	str	r4, [r7, #16]
 8019f84:	4638      	mov	r0, r7
 8019f86:	f001 f91f 	bl	801b1c8 <__mcmp>
 8019f8a:	2800      	cmp	r0, #0
 8019f8c:	db22      	blt.n	8019fd4 <quorem+0xec>
 8019f8e:	3601      	adds	r6, #1
 8019f90:	4629      	mov	r1, r5
 8019f92:	2000      	movs	r0, #0
 8019f94:	f858 2b04 	ldr.w	r2, [r8], #4
 8019f98:	f8d1 c000 	ldr.w	ip, [r1]
 8019f9c:	b293      	uxth	r3, r2
 8019f9e:	1ac3      	subs	r3, r0, r3
 8019fa0:	0c12      	lsrs	r2, r2, #16
 8019fa2:	fa13 f38c 	uxtah	r3, r3, ip
 8019fa6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8019faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019fae:	b29b      	uxth	r3, r3
 8019fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019fb4:	45c1      	cmp	r9, r8
 8019fb6:	f841 3b04 	str.w	r3, [r1], #4
 8019fba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019fbe:	d2e9      	bcs.n	8019f94 <quorem+0xac>
 8019fc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019fc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019fc8:	b922      	cbnz	r2, 8019fd4 <quorem+0xec>
 8019fca:	3b04      	subs	r3, #4
 8019fcc:	429d      	cmp	r5, r3
 8019fce:	461a      	mov	r2, r3
 8019fd0:	d30a      	bcc.n	8019fe8 <quorem+0x100>
 8019fd2:	613c      	str	r4, [r7, #16]
 8019fd4:	4630      	mov	r0, r6
 8019fd6:	b003      	add	sp, #12
 8019fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fdc:	6812      	ldr	r2, [r2, #0]
 8019fde:	3b04      	subs	r3, #4
 8019fe0:	2a00      	cmp	r2, #0
 8019fe2:	d1ce      	bne.n	8019f82 <quorem+0x9a>
 8019fe4:	3c01      	subs	r4, #1
 8019fe6:	e7c9      	b.n	8019f7c <quorem+0x94>
 8019fe8:	6812      	ldr	r2, [r2, #0]
 8019fea:	3b04      	subs	r3, #4
 8019fec:	2a00      	cmp	r2, #0
 8019fee:	d1f0      	bne.n	8019fd2 <quorem+0xea>
 8019ff0:	3c01      	subs	r4, #1
 8019ff2:	e7eb      	b.n	8019fcc <quorem+0xe4>
 8019ff4:	2000      	movs	r0, #0
 8019ff6:	e7ee      	b.n	8019fd6 <quorem+0xee>

08019ff8 <_dtoa_r>:
 8019ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ffc:	ed2d 8b02 	vpush	{d8}
 801a000:	69c5      	ldr	r5, [r0, #28]
 801a002:	b091      	sub	sp, #68	; 0x44
 801a004:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a008:	ec59 8b10 	vmov	r8, r9, d0
 801a00c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a00e:	9106      	str	r1, [sp, #24]
 801a010:	4606      	mov	r6, r0
 801a012:	9208      	str	r2, [sp, #32]
 801a014:	930c      	str	r3, [sp, #48]	; 0x30
 801a016:	b975      	cbnz	r5, 801a036 <_dtoa_r+0x3e>
 801a018:	2010      	movs	r0, #16
 801a01a:	f000 fda5 	bl	801ab68 <malloc>
 801a01e:	4602      	mov	r2, r0
 801a020:	61f0      	str	r0, [r6, #28]
 801a022:	b920      	cbnz	r0, 801a02e <_dtoa_r+0x36>
 801a024:	4ba6      	ldr	r3, [pc, #664]	; (801a2c0 <_dtoa_r+0x2c8>)
 801a026:	21ef      	movs	r1, #239	; 0xef
 801a028:	48a6      	ldr	r0, [pc, #664]	; (801a2c4 <_dtoa_r+0x2cc>)
 801a02a:	f7ff ff3f 	bl	8019eac <__assert_func>
 801a02e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a032:	6005      	str	r5, [r0, #0]
 801a034:	60c5      	str	r5, [r0, #12]
 801a036:	69f3      	ldr	r3, [r6, #28]
 801a038:	6819      	ldr	r1, [r3, #0]
 801a03a:	b151      	cbz	r1, 801a052 <_dtoa_r+0x5a>
 801a03c:	685a      	ldr	r2, [r3, #4]
 801a03e:	604a      	str	r2, [r1, #4]
 801a040:	2301      	movs	r3, #1
 801a042:	4093      	lsls	r3, r2
 801a044:	608b      	str	r3, [r1, #8]
 801a046:	4630      	mov	r0, r6
 801a048:	f000 fe82 	bl	801ad50 <_Bfree>
 801a04c:	69f3      	ldr	r3, [r6, #28]
 801a04e:	2200      	movs	r2, #0
 801a050:	601a      	str	r2, [r3, #0]
 801a052:	f1b9 0300 	subs.w	r3, r9, #0
 801a056:	bfbb      	ittet	lt
 801a058:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a05c:	9303      	strlt	r3, [sp, #12]
 801a05e:	2300      	movge	r3, #0
 801a060:	2201      	movlt	r2, #1
 801a062:	bfac      	ite	ge
 801a064:	6023      	strge	r3, [r4, #0]
 801a066:	6022      	strlt	r2, [r4, #0]
 801a068:	4b97      	ldr	r3, [pc, #604]	; (801a2c8 <_dtoa_r+0x2d0>)
 801a06a:	9c03      	ldr	r4, [sp, #12]
 801a06c:	43a3      	bics	r3, r4
 801a06e:	d11c      	bne.n	801a0aa <_dtoa_r+0xb2>
 801a070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a072:	f242 730f 	movw	r3, #9999	; 0x270f
 801a076:	6013      	str	r3, [r2, #0]
 801a078:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a07c:	ea53 0308 	orrs.w	r3, r3, r8
 801a080:	f000 84fb 	beq.w	801aa7a <_dtoa_r+0xa82>
 801a084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a086:	b963      	cbnz	r3, 801a0a2 <_dtoa_r+0xaa>
 801a088:	4b90      	ldr	r3, [pc, #576]	; (801a2cc <_dtoa_r+0x2d4>)
 801a08a:	e020      	b.n	801a0ce <_dtoa_r+0xd6>
 801a08c:	4b90      	ldr	r3, [pc, #576]	; (801a2d0 <_dtoa_r+0x2d8>)
 801a08e:	9301      	str	r3, [sp, #4]
 801a090:	3308      	adds	r3, #8
 801a092:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a094:	6013      	str	r3, [r2, #0]
 801a096:	9801      	ldr	r0, [sp, #4]
 801a098:	b011      	add	sp, #68	; 0x44
 801a09a:	ecbd 8b02 	vpop	{d8}
 801a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0a2:	4b8a      	ldr	r3, [pc, #552]	; (801a2cc <_dtoa_r+0x2d4>)
 801a0a4:	9301      	str	r3, [sp, #4]
 801a0a6:	3303      	adds	r3, #3
 801a0a8:	e7f3      	b.n	801a092 <_dtoa_r+0x9a>
 801a0aa:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a0ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0b6:	d10c      	bne.n	801a0d2 <_dtoa_r+0xda>
 801a0b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a0ba:	2301      	movs	r3, #1
 801a0bc:	6013      	str	r3, [r2, #0]
 801a0be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	f000 84d7 	beq.w	801aa74 <_dtoa_r+0xa7c>
 801a0c6:	4b83      	ldr	r3, [pc, #524]	; (801a2d4 <_dtoa_r+0x2dc>)
 801a0c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a0ca:	6013      	str	r3, [r2, #0]
 801a0cc:	3b01      	subs	r3, #1
 801a0ce:	9301      	str	r3, [sp, #4]
 801a0d0:	e7e1      	b.n	801a096 <_dtoa_r+0x9e>
 801a0d2:	aa0e      	add	r2, sp, #56	; 0x38
 801a0d4:	a90f      	add	r1, sp, #60	; 0x3c
 801a0d6:	4630      	mov	r0, r6
 801a0d8:	eeb0 0b48 	vmov.f64	d0, d8
 801a0dc:	f001 f91a 	bl	801b314 <__d2b>
 801a0e0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a0e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a0e6:	4605      	mov	r5, r0
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d046      	beq.n	801a17a <_dtoa_r+0x182>
 801a0ec:	eeb0 7b48 	vmov.f64	d7, d8
 801a0f0:	ee18 1a90 	vmov	r1, s17
 801a0f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a0f8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a0fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a100:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a104:	2000      	movs	r0, #0
 801a106:	ee07 1a90 	vmov	s15, r1
 801a10a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801a10e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a2a8 <_dtoa_r+0x2b0>
 801a112:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a116:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a2b0 <_dtoa_r+0x2b8>
 801a11a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a11e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a2b8 <_dtoa_r+0x2c0>
 801a122:	ee07 3a90 	vmov	s15, r3
 801a126:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a12a:	eeb0 7b46 	vmov.f64	d7, d6
 801a12e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a132:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a136:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a13e:	ee16 ba90 	vmov	fp, s13
 801a142:	9009      	str	r0, [sp, #36]	; 0x24
 801a144:	d508      	bpl.n	801a158 <_dtoa_r+0x160>
 801a146:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a14a:	eeb4 6b47 	vcmp.f64	d6, d7
 801a14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a152:	bf18      	it	ne
 801a154:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a158:	f1bb 0f16 	cmp.w	fp, #22
 801a15c:	d82b      	bhi.n	801a1b6 <_dtoa_r+0x1be>
 801a15e:	495e      	ldr	r1, [pc, #376]	; (801a2d8 <_dtoa_r+0x2e0>)
 801a160:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a164:	ed91 7b00 	vldr	d7, [r1]
 801a168:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a170:	d501      	bpl.n	801a176 <_dtoa_r+0x17e>
 801a172:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a176:	2100      	movs	r1, #0
 801a178:	e01e      	b.n	801a1b8 <_dtoa_r+0x1c0>
 801a17a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a17c:	4413      	add	r3, r2
 801a17e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801a182:	2920      	cmp	r1, #32
 801a184:	bfc1      	itttt	gt
 801a186:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801a18a:	408c      	lslgt	r4, r1
 801a18c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801a190:	fa28 f101 	lsrgt.w	r1, r8, r1
 801a194:	bfd6      	itet	le
 801a196:	f1c1 0120 	rsble	r1, r1, #32
 801a19a:	4321      	orrgt	r1, r4
 801a19c:	fa08 f101 	lslle.w	r1, r8, r1
 801a1a0:	ee07 1a90 	vmov	s15, r1
 801a1a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a1a8:	3b01      	subs	r3, #1
 801a1aa:	ee17 1a90 	vmov	r1, s15
 801a1ae:	2001      	movs	r0, #1
 801a1b0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a1b4:	e7a7      	b.n	801a106 <_dtoa_r+0x10e>
 801a1b6:	2101      	movs	r1, #1
 801a1b8:	1ad2      	subs	r2, r2, r3
 801a1ba:	1e53      	subs	r3, r2, #1
 801a1bc:	9305      	str	r3, [sp, #20]
 801a1be:	bf45      	ittet	mi
 801a1c0:	f1c2 0301 	rsbmi	r3, r2, #1
 801a1c4:	9304      	strmi	r3, [sp, #16]
 801a1c6:	2300      	movpl	r3, #0
 801a1c8:	2300      	movmi	r3, #0
 801a1ca:	bf4c      	ite	mi
 801a1cc:	9305      	strmi	r3, [sp, #20]
 801a1ce:	9304      	strpl	r3, [sp, #16]
 801a1d0:	f1bb 0f00 	cmp.w	fp, #0
 801a1d4:	910b      	str	r1, [sp, #44]	; 0x2c
 801a1d6:	db18      	blt.n	801a20a <_dtoa_r+0x212>
 801a1d8:	9b05      	ldr	r3, [sp, #20]
 801a1da:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a1de:	445b      	add	r3, fp
 801a1e0:	9305      	str	r3, [sp, #20]
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	9a06      	ldr	r2, [sp, #24]
 801a1e6:	2a09      	cmp	r2, #9
 801a1e8:	d848      	bhi.n	801a27c <_dtoa_r+0x284>
 801a1ea:	2a05      	cmp	r2, #5
 801a1ec:	bfc4      	itt	gt
 801a1ee:	3a04      	subgt	r2, #4
 801a1f0:	9206      	strgt	r2, [sp, #24]
 801a1f2:	9a06      	ldr	r2, [sp, #24]
 801a1f4:	f1a2 0202 	sub.w	r2, r2, #2
 801a1f8:	bfcc      	ite	gt
 801a1fa:	2400      	movgt	r4, #0
 801a1fc:	2401      	movle	r4, #1
 801a1fe:	2a03      	cmp	r2, #3
 801a200:	d847      	bhi.n	801a292 <_dtoa_r+0x29a>
 801a202:	e8df f002 	tbb	[pc, r2]
 801a206:	2d0b      	.short	0x2d0b
 801a208:	392b      	.short	0x392b
 801a20a:	9b04      	ldr	r3, [sp, #16]
 801a20c:	2200      	movs	r2, #0
 801a20e:	eba3 030b 	sub.w	r3, r3, fp
 801a212:	9304      	str	r3, [sp, #16]
 801a214:	920a      	str	r2, [sp, #40]	; 0x28
 801a216:	f1cb 0300 	rsb	r3, fp, #0
 801a21a:	e7e3      	b.n	801a1e4 <_dtoa_r+0x1ec>
 801a21c:	2200      	movs	r2, #0
 801a21e:	9207      	str	r2, [sp, #28]
 801a220:	9a08      	ldr	r2, [sp, #32]
 801a222:	2a00      	cmp	r2, #0
 801a224:	dc38      	bgt.n	801a298 <_dtoa_r+0x2a0>
 801a226:	f04f 0a01 	mov.w	sl, #1
 801a22a:	46d1      	mov	r9, sl
 801a22c:	4652      	mov	r2, sl
 801a22e:	f8cd a020 	str.w	sl, [sp, #32]
 801a232:	69f7      	ldr	r7, [r6, #28]
 801a234:	2100      	movs	r1, #0
 801a236:	2004      	movs	r0, #4
 801a238:	f100 0c14 	add.w	ip, r0, #20
 801a23c:	4594      	cmp	ip, r2
 801a23e:	d930      	bls.n	801a2a2 <_dtoa_r+0x2aa>
 801a240:	6079      	str	r1, [r7, #4]
 801a242:	4630      	mov	r0, r6
 801a244:	930d      	str	r3, [sp, #52]	; 0x34
 801a246:	f000 fd43 	bl	801acd0 <_Balloc>
 801a24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a24c:	9001      	str	r0, [sp, #4]
 801a24e:	4602      	mov	r2, r0
 801a250:	2800      	cmp	r0, #0
 801a252:	d145      	bne.n	801a2e0 <_dtoa_r+0x2e8>
 801a254:	4b21      	ldr	r3, [pc, #132]	; (801a2dc <_dtoa_r+0x2e4>)
 801a256:	f240 11af 	movw	r1, #431	; 0x1af
 801a25a:	e6e5      	b.n	801a028 <_dtoa_r+0x30>
 801a25c:	2201      	movs	r2, #1
 801a25e:	e7de      	b.n	801a21e <_dtoa_r+0x226>
 801a260:	2200      	movs	r2, #0
 801a262:	9207      	str	r2, [sp, #28]
 801a264:	9a08      	ldr	r2, [sp, #32]
 801a266:	eb0b 0a02 	add.w	sl, fp, r2
 801a26a:	f10a 0901 	add.w	r9, sl, #1
 801a26e:	464a      	mov	r2, r9
 801a270:	2a01      	cmp	r2, #1
 801a272:	bfb8      	it	lt
 801a274:	2201      	movlt	r2, #1
 801a276:	e7dc      	b.n	801a232 <_dtoa_r+0x23a>
 801a278:	2201      	movs	r2, #1
 801a27a:	e7f2      	b.n	801a262 <_dtoa_r+0x26a>
 801a27c:	2401      	movs	r4, #1
 801a27e:	2200      	movs	r2, #0
 801a280:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a284:	f04f 3aff 	mov.w	sl, #4294967295
 801a288:	2100      	movs	r1, #0
 801a28a:	46d1      	mov	r9, sl
 801a28c:	2212      	movs	r2, #18
 801a28e:	9108      	str	r1, [sp, #32]
 801a290:	e7cf      	b.n	801a232 <_dtoa_r+0x23a>
 801a292:	2201      	movs	r2, #1
 801a294:	9207      	str	r2, [sp, #28]
 801a296:	e7f5      	b.n	801a284 <_dtoa_r+0x28c>
 801a298:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a29c:	46d1      	mov	r9, sl
 801a29e:	4652      	mov	r2, sl
 801a2a0:	e7c7      	b.n	801a232 <_dtoa_r+0x23a>
 801a2a2:	3101      	adds	r1, #1
 801a2a4:	0040      	lsls	r0, r0, #1
 801a2a6:	e7c7      	b.n	801a238 <_dtoa_r+0x240>
 801a2a8:	636f4361 	.word	0x636f4361
 801a2ac:	3fd287a7 	.word	0x3fd287a7
 801a2b0:	8b60c8b3 	.word	0x8b60c8b3
 801a2b4:	3fc68a28 	.word	0x3fc68a28
 801a2b8:	509f79fb 	.word	0x509f79fb
 801a2bc:	3fd34413 	.word	0x3fd34413
 801a2c0:	0801ef26 	.word	0x0801ef26
 801a2c4:	0801f113 	.word	0x0801f113
 801a2c8:	7ff00000 	.word	0x7ff00000
 801a2cc:	0801f10f 	.word	0x0801f10f
 801a2d0:	0801f106 	.word	0x0801f106
 801a2d4:	0801f0a7 	.word	0x0801f0a7
 801a2d8:	0801f200 	.word	0x0801f200
 801a2dc:	0801f16b 	.word	0x0801f16b
 801a2e0:	69f2      	ldr	r2, [r6, #28]
 801a2e2:	9901      	ldr	r1, [sp, #4]
 801a2e4:	6011      	str	r1, [r2, #0]
 801a2e6:	f1b9 0f0e 	cmp.w	r9, #14
 801a2ea:	d86c      	bhi.n	801a3c6 <_dtoa_r+0x3ce>
 801a2ec:	2c00      	cmp	r4, #0
 801a2ee:	d06a      	beq.n	801a3c6 <_dtoa_r+0x3ce>
 801a2f0:	f1bb 0f00 	cmp.w	fp, #0
 801a2f4:	f340 80a0 	ble.w	801a438 <_dtoa_r+0x440>
 801a2f8:	4ac1      	ldr	r2, [pc, #772]	; (801a600 <_dtoa_r+0x608>)
 801a2fa:	f00b 010f 	and.w	r1, fp, #15
 801a2fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a302:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a306:	ed92 7b00 	vldr	d7, [r2]
 801a30a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a30e:	f000 8087 	beq.w	801a420 <_dtoa_r+0x428>
 801a312:	49bc      	ldr	r1, [pc, #752]	; (801a604 <_dtoa_r+0x60c>)
 801a314:	ed91 6b08 	vldr	d6, [r1, #32]
 801a318:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a31c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a320:	f002 020f 	and.w	r2, r2, #15
 801a324:	2103      	movs	r1, #3
 801a326:	48b7      	ldr	r0, [pc, #732]	; (801a604 <_dtoa_r+0x60c>)
 801a328:	2a00      	cmp	r2, #0
 801a32a:	d17b      	bne.n	801a424 <_dtoa_r+0x42c>
 801a32c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a330:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a334:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a338:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a33a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a33e:	2a00      	cmp	r2, #0
 801a340:	f000 80a0 	beq.w	801a484 <_dtoa_r+0x48c>
 801a344:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a348:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a350:	f140 8098 	bpl.w	801a484 <_dtoa_r+0x48c>
 801a354:	f1b9 0f00 	cmp.w	r9, #0
 801a358:	f000 8094 	beq.w	801a484 <_dtoa_r+0x48c>
 801a35c:	f1ba 0f00 	cmp.w	sl, #0
 801a360:	dd2f      	ble.n	801a3c2 <_dtoa_r+0x3ca>
 801a362:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a366:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a36a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a36e:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a372:	3101      	adds	r1, #1
 801a374:	4654      	mov	r4, sl
 801a376:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a37a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a37e:	ee07 1a90 	vmov	s15, r1
 801a382:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a386:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a38a:	ee15 7a90 	vmov	r7, s11
 801a38e:	ec51 0b15 	vmov	r0, r1, d5
 801a392:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a396:	2c00      	cmp	r4, #0
 801a398:	d177      	bne.n	801a48a <_dtoa_r+0x492>
 801a39a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a39e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a3a2:	ec41 0b17 	vmov	d7, r0, r1
 801a3a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3ae:	f300 826a 	bgt.w	801a886 <_dtoa_r+0x88e>
 801a3b2:	eeb1 7b47 	vneg.f64	d7, d7
 801a3b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3be:	f100 8260 	bmi.w	801a882 <_dtoa_r+0x88a>
 801a3c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a3c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a3c8:	2a00      	cmp	r2, #0
 801a3ca:	f2c0 811d 	blt.w	801a608 <_dtoa_r+0x610>
 801a3ce:	f1bb 0f0e 	cmp.w	fp, #14
 801a3d2:	f300 8119 	bgt.w	801a608 <_dtoa_r+0x610>
 801a3d6:	4b8a      	ldr	r3, [pc, #552]	; (801a600 <_dtoa_r+0x608>)
 801a3d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a3dc:	ed93 6b00 	vldr	d6, [r3]
 801a3e0:	9b08      	ldr	r3, [sp, #32]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	f280 80b7 	bge.w	801a556 <_dtoa_r+0x55e>
 801a3e8:	f1b9 0f00 	cmp.w	r9, #0
 801a3ec:	f300 80b3 	bgt.w	801a556 <_dtoa_r+0x55e>
 801a3f0:	f040 8246 	bne.w	801a880 <_dtoa_r+0x888>
 801a3f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a3f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a3fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a400:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a408:	464c      	mov	r4, r9
 801a40a:	464f      	mov	r7, r9
 801a40c:	f280 821c 	bge.w	801a848 <_dtoa_r+0x850>
 801a410:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a414:	2331      	movs	r3, #49	; 0x31
 801a416:	f808 3b01 	strb.w	r3, [r8], #1
 801a41a:	f10b 0b01 	add.w	fp, fp, #1
 801a41e:	e218      	b.n	801a852 <_dtoa_r+0x85a>
 801a420:	2102      	movs	r1, #2
 801a422:	e780      	b.n	801a326 <_dtoa_r+0x32e>
 801a424:	07d4      	lsls	r4, r2, #31
 801a426:	d504      	bpl.n	801a432 <_dtoa_r+0x43a>
 801a428:	ed90 6b00 	vldr	d6, [r0]
 801a42c:	3101      	adds	r1, #1
 801a42e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a432:	1052      	asrs	r2, r2, #1
 801a434:	3008      	adds	r0, #8
 801a436:	e777      	b.n	801a328 <_dtoa_r+0x330>
 801a438:	d022      	beq.n	801a480 <_dtoa_r+0x488>
 801a43a:	f1cb 0200 	rsb	r2, fp, #0
 801a43e:	4970      	ldr	r1, [pc, #448]	; (801a600 <_dtoa_r+0x608>)
 801a440:	f002 000f 	and.w	r0, r2, #15
 801a444:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a448:	ed91 7b00 	vldr	d7, [r1]
 801a44c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a450:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a454:	486b      	ldr	r0, [pc, #428]	; (801a604 <_dtoa_r+0x60c>)
 801a456:	1112      	asrs	r2, r2, #4
 801a458:	2400      	movs	r4, #0
 801a45a:	2102      	movs	r1, #2
 801a45c:	b92a      	cbnz	r2, 801a46a <_dtoa_r+0x472>
 801a45e:	2c00      	cmp	r4, #0
 801a460:	f43f af6a 	beq.w	801a338 <_dtoa_r+0x340>
 801a464:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a468:	e766      	b.n	801a338 <_dtoa_r+0x340>
 801a46a:	07d7      	lsls	r7, r2, #31
 801a46c:	d505      	bpl.n	801a47a <_dtoa_r+0x482>
 801a46e:	ed90 6b00 	vldr	d6, [r0]
 801a472:	3101      	adds	r1, #1
 801a474:	2401      	movs	r4, #1
 801a476:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a47a:	1052      	asrs	r2, r2, #1
 801a47c:	3008      	adds	r0, #8
 801a47e:	e7ed      	b.n	801a45c <_dtoa_r+0x464>
 801a480:	2102      	movs	r1, #2
 801a482:	e759      	b.n	801a338 <_dtoa_r+0x340>
 801a484:	465a      	mov	r2, fp
 801a486:	464c      	mov	r4, r9
 801a488:	e775      	b.n	801a376 <_dtoa_r+0x37e>
 801a48a:	ec41 0b17 	vmov	d7, r0, r1
 801a48e:	495c      	ldr	r1, [pc, #368]	; (801a600 <_dtoa_r+0x608>)
 801a490:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801a494:	ed11 4b02 	vldr	d4, [r1, #-8]
 801a498:	9901      	ldr	r1, [sp, #4]
 801a49a:	440c      	add	r4, r1
 801a49c:	9907      	ldr	r1, [sp, #28]
 801a49e:	b351      	cbz	r1, 801a4f6 <_dtoa_r+0x4fe>
 801a4a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a4a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a4a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a4ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a4b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a4b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a4b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a4bc:	ee14 1a90 	vmov	r1, s9
 801a4c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a4c4:	3130      	adds	r1, #48	; 0x30
 801a4c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a4ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4d2:	f808 1b01 	strb.w	r1, [r8], #1
 801a4d6:	d439      	bmi.n	801a54c <_dtoa_r+0x554>
 801a4d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a4dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4e4:	d472      	bmi.n	801a5cc <_dtoa_r+0x5d4>
 801a4e6:	45a0      	cmp	r8, r4
 801a4e8:	f43f af6b 	beq.w	801a3c2 <_dtoa_r+0x3ca>
 801a4ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a4f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a4f4:	e7e0      	b.n	801a4b8 <_dtoa_r+0x4c0>
 801a4f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a4fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a4fe:	4620      	mov	r0, r4
 801a500:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a504:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a508:	ee14 1a90 	vmov	r1, s9
 801a50c:	3130      	adds	r1, #48	; 0x30
 801a50e:	f808 1b01 	strb.w	r1, [r8], #1
 801a512:	45a0      	cmp	r8, r4
 801a514:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a518:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a51c:	d118      	bne.n	801a550 <_dtoa_r+0x558>
 801a51e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a522:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a526:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a52e:	dc4d      	bgt.n	801a5cc <_dtoa_r+0x5d4>
 801a530:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a534:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a53c:	f57f af41 	bpl.w	801a3c2 <_dtoa_r+0x3ca>
 801a540:	4680      	mov	r8, r0
 801a542:	3801      	subs	r0, #1
 801a544:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a548:	2b30      	cmp	r3, #48	; 0x30
 801a54a:	d0f9      	beq.n	801a540 <_dtoa_r+0x548>
 801a54c:	4693      	mov	fp, r2
 801a54e:	e02a      	b.n	801a5a6 <_dtoa_r+0x5ae>
 801a550:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a554:	e7d6      	b.n	801a504 <_dtoa_r+0x50c>
 801a556:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a55a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a55e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a562:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a566:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a56a:	ee15 3a10 	vmov	r3, s10
 801a56e:	3330      	adds	r3, #48	; 0x30
 801a570:	f808 3b01 	strb.w	r3, [r8], #1
 801a574:	9b01      	ldr	r3, [sp, #4]
 801a576:	eba8 0303 	sub.w	r3, r8, r3
 801a57a:	4599      	cmp	r9, r3
 801a57c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a580:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a584:	d133      	bne.n	801a5ee <_dtoa_r+0x5f6>
 801a586:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a58a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a592:	dc1a      	bgt.n	801a5ca <_dtoa_r+0x5d2>
 801a594:	eeb4 7b46 	vcmp.f64	d7, d6
 801a598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a59c:	d103      	bne.n	801a5a6 <_dtoa_r+0x5ae>
 801a59e:	ee15 3a10 	vmov	r3, s10
 801a5a2:	07d9      	lsls	r1, r3, #31
 801a5a4:	d411      	bmi.n	801a5ca <_dtoa_r+0x5d2>
 801a5a6:	4629      	mov	r1, r5
 801a5a8:	4630      	mov	r0, r6
 801a5aa:	f000 fbd1 	bl	801ad50 <_Bfree>
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a5b2:	f888 3000 	strb.w	r3, [r8]
 801a5b6:	f10b 0301 	add.w	r3, fp, #1
 801a5ba:	6013      	str	r3, [r2, #0]
 801a5bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	f43f ad69 	beq.w	801a096 <_dtoa_r+0x9e>
 801a5c4:	f8c3 8000 	str.w	r8, [r3]
 801a5c8:	e565      	b.n	801a096 <_dtoa_r+0x9e>
 801a5ca:	465a      	mov	r2, fp
 801a5cc:	4643      	mov	r3, r8
 801a5ce:	4698      	mov	r8, r3
 801a5d0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a5d4:	2939      	cmp	r1, #57	; 0x39
 801a5d6:	d106      	bne.n	801a5e6 <_dtoa_r+0x5ee>
 801a5d8:	9901      	ldr	r1, [sp, #4]
 801a5da:	4299      	cmp	r1, r3
 801a5dc:	d1f7      	bne.n	801a5ce <_dtoa_r+0x5d6>
 801a5de:	9801      	ldr	r0, [sp, #4]
 801a5e0:	2130      	movs	r1, #48	; 0x30
 801a5e2:	3201      	adds	r2, #1
 801a5e4:	7001      	strb	r1, [r0, #0]
 801a5e6:	7819      	ldrb	r1, [r3, #0]
 801a5e8:	3101      	adds	r1, #1
 801a5ea:	7019      	strb	r1, [r3, #0]
 801a5ec:	e7ae      	b.n	801a54c <_dtoa_r+0x554>
 801a5ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a5f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5fa:	d1b2      	bne.n	801a562 <_dtoa_r+0x56a>
 801a5fc:	e7d3      	b.n	801a5a6 <_dtoa_r+0x5ae>
 801a5fe:	bf00      	nop
 801a600:	0801f200 	.word	0x0801f200
 801a604:	0801f1d8 	.word	0x0801f1d8
 801a608:	9907      	ldr	r1, [sp, #28]
 801a60a:	2900      	cmp	r1, #0
 801a60c:	f000 80d0 	beq.w	801a7b0 <_dtoa_r+0x7b8>
 801a610:	9906      	ldr	r1, [sp, #24]
 801a612:	2901      	cmp	r1, #1
 801a614:	f300 80b4 	bgt.w	801a780 <_dtoa_r+0x788>
 801a618:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a61a:	2900      	cmp	r1, #0
 801a61c:	f000 80ac 	beq.w	801a778 <_dtoa_r+0x780>
 801a620:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a624:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a628:	461c      	mov	r4, r3
 801a62a:	9309      	str	r3, [sp, #36]	; 0x24
 801a62c:	9b04      	ldr	r3, [sp, #16]
 801a62e:	4413      	add	r3, r2
 801a630:	9304      	str	r3, [sp, #16]
 801a632:	9b05      	ldr	r3, [sp, #20]
 801a634:	2101      	movs	r1, #1
 801a636:	4413      	add	r3, r2
 801a638:	4630      	mov	r0, r6
 801a63a:	9305      	str	r3, [sp, #20]
 801a63c:	f000 fc3e 	bl	801aebc <__i2b>
 801a640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a642:	4607      	mov	r7, r0
 801a644:	f1b8 0f00 	cmp.w	r8, #0
 801a648:	d00d      	beq.n	801a666 <_dtoa_r+0x66e>
 801a64a:	9a05      	ldr	r2, [sp, #20]
 801a64c:	2a00      	cmp	r2, #0
 801a64e:	dd0a      	ble.n	801a666 <_dtoa_r+0x66e>
 801a650:	4542      	cmp	r2, r8
 801a652:	9904      	ldr	r1, [sp, #16]
 801a654:	bfa8      	it	ge
 801a656:	4642      	movge	r2, r8
 801a658:	1a89      	subs	r1, r1, r2
 801a65a:	9104      	str	r1, [sp, #16]
 801a65c:	9905      	ldr	r1, [sp, #20]
 801a65e:	eba8 0802 	sub.w	r8, r8, r2
 801a662:	1a8a      	subs	r2, r1, r2
 801a664:	9205      	str	r2, [sp, #20]
 801a666:	b303      	cbz	r3, 801a6aa <_dtoa_r+0x6b2>
 801a668:	9a07      	ldr	r2, [sp, #28]
 801a66a:	2a00      	cmp	r2, #0
 801a66c:	f000 80a5 	beq.w	801a7ba <_dtoa_r+0x7c2>
 801a670:	2c00      	cmp	r4, #0
 801a672:	dd13      	ble.n	801a69c <_dtoa_r+0x6a4>
 801a674:	4639      	mov	r1, r7
 801a676:	4622      	mov	r2, r4
 801a678:	4630      	mov	r0, r6
 801a67a:	930d      	str	r3, [sp, #52]	; 0x34
 801a67c:	f000 fcde 	bl	801b03c <__pow5mult>
 801a680:	462a      	mov	r2, r5
 801a682:	4601      	mov	r1, r0
 801a684:	4607      	mov	r7, r0
 801a686:	4630      	mov	r0, r6
 801a688:	f000 fc2e 	bl	801aee8 <__multiply>
 801a68c:	4629      	mov	r1, r5
 801a68e:	9009      	str	r0, [sp, #36]	; 0x24
 801a690:	4630      	mov	r0, r6
 801a692:	f000 fb5d 	bl	801ad50 <_Bfree>
 801a696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a69a:	4615      	mov	r5, r2
 801a69c:	1b1a      	subs	r2, r3, r4
 801a69e:	d004      	beq.n	801a6aa <_dtoa_r+0x6b2>
 801a6a0:	4629      	mov	r1, r5
 801a6a2:	4630      	mov	r0, r6
 801a6a4:	f000 fcca 	bl	801b03c <__pow5mult>
 801a6a8:	4605      	mov	r5, r0
 801a6aa:	2101      	movs	r1, #1
 801a6ac:	4630      	mov	r0, r6
 801a6ae:	f000 fc05 	bl	801aebc <__i2b>
 801a6b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	4604      	mov	r4, r0
 801a6b8:	f340 8081 	ble.w	801a7be <_dtoa_r+0x7c6>
 801a6bc:	461a      	mov	r2, r3
 801a6be:	4601      	mov	r1, r0
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	f000 fcbb 	bl	801b03c <__pow5mult>
 801a6c6:	9b06      	ldr	r3, [sp, #24]
 801a6c8:	2b01      	cmp	r3, #1
 801a6ca:	4604      	mov	r4, r0
 801a6cc:	dd7a      	ble.n	801a7c4 <_dtoa_r+0x7cc>
 801a6ce:	2300      	movs	r3, #0
 801a6d0:	9309      	str	r3, [sp, #36]	; 0x24
 801a6d2:	6922      	ldr	r2, [r4, #16]
 801a6d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a6d8:	6910      	ldr	r0, [r2, #16]
 801a6da:	f000 fba1 	bl	801ae20 <__hi0bits>
 801a6de:	f1c0 0020 	rsb	r0, r0, #32
 801a6e2:	9b05      	ldr	r3, [sp, #20]
 801a6e4:	4418      	add	r0, r3
 801a6e6:	f010 001f 	ands.w	r0, r0, #31
 801a6ea:	f000 8093 	beq.w	801a814 <_dtoa_r+0x81c>
 801a6ee:	f1c0 0220 	rsb	r2, r0, #32
 801a6f2:	2a04      	cmp	r2, #4
 801a6f4:	f340 8085 	ble.w	801a802 <_dtoa_r+0x80a>
 801a6f8:	9b04      	ldr	r3, [sp, #16]
 801a6fa:	f1c0 001c 	rsb	r0, r0, #28
 801a6fe:	4403      	add	r3, r0
 801a700:	9304      	str	r3, [sp, #16]
 801a702:	9b05      	ldr	r3, [sp, #20]
 801a704:	4480      	add	r8, r0
 801a706:	4403      	add	r3, r0
 801a708:	9305      	str	r3, [sp, #20]
 801a70a:	9b04      	ldr	r3, [sp, #16]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	dd05      	ble.n	801a71c <_dtoa_r+0x724>
 801a710:	4629      	mov	r1, r5
 801a712:	461a      	mov	r2, r3
 801a714:	4630      	mov	r0, r6
 801a716:	f000 fceb 	bl	801b0f0 <__lshift>
 801a71a:	4605      	mov	r5, r0
 801a71c:	9b05      	ldr	r3, [sp, #20]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	dd05      	ble.n	801a72e <_dtoa_r+0x736>
 801a722:	4621      	mov	r1, r4
 801a724:	461a      	mov	r2, r3
 801a726:	4630      	mov	r0, r6
 801a728:	f000 fce2 	bl	801b0f0 <__lshift>
 801a72c:	4604      	mov	r4, r0
 801a72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a730:	2b00      	cmp	r3, #0
 801a732:	d071      	beq.n	801a818 <_dtoa_r+0x820>
 801a734:	4621      	mov	r1, r4
 801a736:	4628      	mov	r0, r5
 801a738:	f000 fd46 	bl	801b1c8 <__mcmp>
 801a73c:	2800      	cmp	r0, #0
 801a73e:	da6b      	bge.n	801a818 <_dtoa_r+0x820>
 801a740:	2300      	movs	r3, #0
 801a742:	4629      	mov	r1, r5
 801a744:	220a      	movs	r2, #10
 801a746:	4630      	mov	r0, r6
 801a748:	f000 fb24 	bl	801ad94 <__multadd>
 801a74c:	9b07      	ldr	r3, [sp, #28]
 801a74e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a752:	4605      	mov	r5, r0
 801a754:	2b00      	cmp	r3, #0
 801a756:	f000 8197 	beq.w	801aa88 <_dtoa_r+0xa90>
 801a75a:	4639      	mov	r1, r7
 801a75c:	2300      	movs	r3, #0
 801a75e:	220a      	movs	r2, #10
 801a760:	4630      	mov	r0, r6
 801a762:	f000 fb17 	bl	801ad94 <__multadd>
 801a766:	f1ba 0f00 	cmp.w	sl, #0
 801a76a:	4607      	mov	r7, r0
 801a76c:	f300 8093 	bgt.w	801a896 <_dtoa_r+0x89e>
 801a770:	9b06      	ldr	r3, [sp, #24]
 801a772:	2b02      	cmp	r3, #2
 801a774:	dc57      	bgt.n	801a826 <_dtoa_r+0x82e>
 801a776:	e08e      	b.n	801a896 <_dtoa_r+0x89e>
 801a778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a77a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a77e:	e751      	b.n	801a624 <_dtoa_r+0x62c>
 801a780:	f109 34ff 	add.w	r4, r9, #4294967295
 801a784:	42a3      	cmp	r3, r4
 801a786:	bfbf      	itttt	lt
 801a788:	1ae2      	sublt	r2, r4, r3
 801a78a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801a78c:	189b      	addlt	r3, r3, r2
 801a78e:	930a      	strlt	r3, [sp, #40]	; 0x28
 801a790:	bfae      	itee	ge
 801a792:	1b1c      	subge	r4, r3, r4
 801a794:	4623      	movlt	r3, r4
 801a796:	2400      	movlt	r4, #0
 801a798:	f1b9 0f00 	cmp.w	r9, #0
 801a79c:	bfb5      	itete	lt
 801a79e:	9a04      	ldrlt	r2, [sp, #16]
 801a7a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801a7a4:	eba2 0809 	sublt.w	r8, r2, r9
 801a7a8:	464a      	movge	r2, r9
 801a7aa:	bfb8      	it	lt
 801a7ac:	2200      	movlt	r2, #0
 801a7ae:	e73c      	b.n	801a62a <_dtoa_r+0x632>
 801a7b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a7b4:	9f07      	ldr	r7, [sp, #28]
 801a7b6:	461c      	mov	r4, r3
 801a7b8:	e744      	b.n	801a644 <_dtoa_r+0x64c>
 801a7ba:	461a      	mov	r2, r3
 801a7bc:	e770      	b.n	801a6a0 <_dtoa_r+0x6a8>
 801a7be:	9b06      	ldr	r3, [sp, #24]
 801a7c0:	2b01      	cmp	r3, #1
 801a7c2:	dc18      	bgt.n	801a7f6 <_dtoa_r+0x7fe>
 801a7c4:	9b02      	ldr	r3, [sp, #8]
 801a7c6:	b9b3      	cbnz	r3, 801a7f6 <_dtoa_r+0x7fe>
 801a7c8:	9b03      	ldr	r3, [sp, #12]
 801a7ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a7ce:	b9a2      	cbnz	r2, 801a7fa <_dtoa_r+0x802>
 801a7d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a7d4:	0d12      	lsrs	r2, r2, #20
 801a7d6:	0512      	lsls	r2, r2, #20
 801a7d8:	b18a      	cbz	r2, 801a7fe <_dtoa_r+0x806>
 801a7da:	9b04      	ldr	r3, [sp, #16]
 801a7dc:	3301      	adds	r3, #1
 801a7de:	9304      	str	r3, [sp, #16]
 801a7e0:	9b05      	ldr	r3, [sp, #20]
 801a7e2:	3301      	adds	r3, #1
 801a7e4:	9305      	str	r3, [sp, #20]
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	9309      	str	r3, [sp, #36]	; 0x24
 801a7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	f47f af70 	bne.w	801a6d2 <_dtoa_r+0x6da>
 801a7f2:	2001      	movs	r0, #1
 801a7f4:	e775      	b.n	801a6e2 <_dtoa_r+0x6ea>
 801a7f6:	2300      	movs	r3, #0
 801a7f8:	e7f6      	b.n	801a7e8 <_dtoa_r+0x7f0>
 801a7fa:	9b02      	ldr	r3, [sp, #8]
 801a7fc:	e7f4      	b.n	801a7e8 <_dtoa_r+0x7f0>
 801a7fe:	9209      	str	r2, [sp, #36]	; 0x24
 801a800:	e7f3      	b.n	801a7ea <_dtoa_r+0x7f2>
 801a802:	d082      	beq.n	801a70a <_dtoa_r+0x712>
 801a804:	9b04      	ldr	r3, [sp, #16]
 801a806:	321c      	adds	r2, #28
 801a808:	4413      	add	r3, r2
 801a80a:	9304      	str	r3, [sp, #16]
 801a80c:	9b05      	ldr	r3, [sp, #20]
 801a80e:	4490      	add	r8, r2
 801a810:	4413      	add	r3, r2
 801a812:	e779      	b.n	801a708 <_dtoa_r+0x710>
 801a814:	4602      	mov	r2, r0
 801a816:	e7f5      	b.n	801a804 <_dtoa_r+0x80c>
 801a818:	f1b9 0f00 	cmp.w	r9, #0
 801a81c:	dc36      	bgt.n	801a88c <_dtoa_r+0x894>
 801a81e:	9b06      	ldr	r3, [sp, #24]
 801a820:	2b02      	cmp	r3, #2
 801a822:	dd33      	ble.n	801a88c <_dtoa_r+0x894>
 801a824:	46ca      	mov	sl, r9
 801a826:	f1ba 0f00 	cmp.w	sl, #0
 801a82a:	d10d      	bne.n	801a848 <_dtoa_r+0x850>
 801a82c:	4621      	mov	r1, r4
 801a82e:	4653      	mov	r3, sl
 801a830:	2205      	movs	r2, #5
 801a832:	4630      	mov	r0, r6
 801a834:	f000 faae 	bl	801ad94 <__multadd>
 801a838:	4601      	mov	r1, r0
 801a83a:	4604      	mov	r4, r0
 801a83c:	4628      	mov	r0, r5
 801a83e:	f000 fcc3 	bl	801b1c8 <__mcmp>
 801a842:	2800      	cmp	r0, #0
 801a844:	f73f ade4 	bgt.w	801a410 <_dtoa_r+0x418>
 801a848:	9b08      	ldr	r3, [sp, #32]
 801a84a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a84e:	ea6f 0b03 	mvn.w	fp, r3
 801a852:	f04f 0900 	mov.w	r9, #0
 801a856:	4621      	mov	r1, r4
 801a858:	4630      	mov	r0, r6
 801a85a:	f000 fa79 	bl	801ad50 <_Bfree>
 801a85e:	2f00      	cmp	r7, #0
 801a860:	f43f aea1 	beq.w	801a5a6 <_dtoa_r+0x5ae>
 801a864:	f1b9 0f00 	cmp.w	r9, #0
 801a868:	d005      	beq.n	801a876 <_dtoa_r+0x87e>
 801a86a:	45b9      	cmp	r9, r7
 801a86c:	d003      	beq.n	801a876 <_dtoa_r+0x87e>
 801a86e:	4649      	mov	r1, r9
 801a870:	4630      	mov	r0, r6
 801a872:	f000 fa6d 	bl	801ad50 <_Bfree>
 801a876:	4639      	mov	r1, r7
 801a878:	4630      	mov	r0, r6
 801a87a:	f000 fa69 	bl	801ad50 <_Bfree>
 801a87e:	e692      	b.n	801a5a6 <_dtoa_r+0x5ae>
 801a880:	2400      	movs	r4, #0
 801a882:	4627      	mov	r7, r4
 801a884:	e7e0      	b.n	801a848 <_dtoa_r+0x850>
 801a886:	4693      	mov	fp, r2
 801a888:	4627      	mov	r7, r4
 801a88a:	e5c1      	b.n	801a410 <_dtoa_r+0x418>
 801a88c:	9b07      	ldr	r3, [sp, #28]
 801a88e:	46ca      	mov	sl, r9
 801a890:	2b00      	cmp	r3, #0
 801a892:	f000 8100 	beq.w	801aa96 <_dtoa_r+0xa9e>
 801a896:	f1b8 0f00 	cmp.w	r8, #0
 801a89a:	dd05      	ble.n	801a8a8 <_dtoa_r+0x8b0>
 801a89c:	4639      	mov	r1, r7
 801a89e:	4642      	mov	r2, r8
 801a8a0:	4630      	mov	r0, r6
 801a8a2:	f000 fc25 	bl	801b0f0 <__lshift>
 801a8a6:	4607      	mov	r7, r0
 801a8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d05d      	beq.n	801a96a <_dtoa_r+0x972>
 801a8ae:	6879      	ldr	r1, [r7, #4]
 801a8b0:	4630      	mov	r0, r6
 801a8b2:	f000 fa0d 	bl	801acd0 <_Balloc>
 801a8b6:	4680      	mov	r8, r0
 801a8b8:	b928      	cbnz	r0, 801a8c6 <_dtoa_r+0x8ce>
 801a8ba:	4b82      	ldr	r3, [pc, #520]	; (801aac4 <_dtoa_r+0xacc>)
 801a8bc:	4602      	mov	r2, r0
 801a8be:	f240 21ef 	movw	r1, #751	; 0x2ef
 801a8c2:	f7ff bbb1 	b.w	801a028 <_dtoa_r+0x30>
 801a8c6:	693a      	ldr	r2, [r7, #16]
 801a8c8:	3202      	adds	r2, #2
 801a8ca:	0092      	lsls	r2, r2, #2
 801a8cc:	f107 010c 	add.w	r1, r7, #12
 801a8d0:	300c      	adds	r0, #12
 801a8d2:	f7ff fadc 	bl	8019e8e <memcpy>
 801a8d6:	2201      	movs	r2, #1
 801a8d8:	4641      	mov	r1, r8
 801a8da:	4630      	mov	r0, r6
 801a8dc:	f000 fc08 	bl	801b0f0 <__lshift>
 801a8e0:	9b01      	ldr	r3, [sp, #4]
 801a8e2:	3301      	adds	r3, #1
 801a8e4:	9304      	str	r3, [sp, #16]
 801a8e6:	9b01      	ldr	r3, [sp, #4]
 801a8e8:	4453      	add	r3, sl
 801a8ea:	9308      	str	r3, [sp, #32]
 801a8ec:	9b02      	ldr	r3, [sp, #8]
 801a8ee:	f003 0301 	and.w	r3, r3, #1
 801a8f2:	46b9      	mov	r9, r7
 801a8f4:	9307      	str	r3, [sp, #28]
 801a8f6:	4607      	mov	r7, r0
 801a8f8:	9b04      	ldr	r3, [sp, #16]
 801a8fa:	4621      	mov	r1, r4
 801a8fc:	3b01      	subs	r3, #1
 801a8fe:	4628      	mov	r0, r5
 801a900:	9302      	str	r3, [sp, #8]
 801a902:	f7ff faf1 	bl	8019ee8 <quorem>
 801a906:	4603      	mov	r3, r0
 801a908:	3330      	adds	r3, #48	; 0x30
 801a90a:	9005      	str	r0, [sp, #20]
 801a90c:	4649      	mov	r1, r9
 801a90e:	4628      	mov	r0, r5
 801a910:	9309      	str	r3, [sp, #36]	; 0x24
 801a912:	f000 fc59 	bl	801b1c8 <__mcmp>
 801a916:	463a      	mov	r2, r7
 801a918:	4682      	mov	sl, r0
 801a91a:	4621      	mov	r1, r4
 801a91c:	4630      	mov	r0, r6
 801a91e:	f000 fc6f 	bl	801b200 <__mdiff>
 801a922:	68c2      	ldr	r2, [r0, #12]
 801a924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a926:	4680      	mov	r8, r0
 801a928:	bb0a      	cbnz	r2, 801a96e <_dtoa_r+0x976>
 801a92a:	4601      	mov	r1, r0
 801a92c:	4628      	mov	r0, r5
 801a92e:	f000 fc4b 	bl	801b1c8 <__mcmp>
 801a932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a934:	4602      	mov	r2, r0
 801a936:	4641      	mov	r1, r8
 801a938:	4630      	mov	r0, r6
 801a93a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801a93e:	f000 fa07 	bl	801ad50 <_Bfree>
 801a942:	9b06      	ldr	r3, [sp, #24]
 801a944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a946:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a94a:	ea43 0102 	orr.w	r1, r3, r2
 801a94e:	9b07      	ldr	r3, [sp, #28]
 801a950:	4319      	orrs	r1, r3
 801a952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a954:	d10d      	bne.n	801a972 <_dtoa_r+0x97a>
 801a956:	2b39      	cmp	r3, #57	; 0x39
 801a958:	d029      	beq.n	801a9ae <_dtoa_r+0x9b6>
 801a95a:	f1ba 0f00 	cmp.w	sl, #0
 801a95e:	dd01      	ble.n	801a964 <_dtoa_r+0x96c>
 801a960:	9b05      	ldr	r3, [sp, #20]
 801a962:	3331      	adds	r3, #49	; 0x31
 801a964:	9a02      	ldr	r2, [sp, #8]
 801a966:	7013      	strb	r3, [r2, #0]
 801a968:	e775      	b.n	801a856 <_dtoa_r+0x85e>
 801a96a:	4638      	mov	r0, r7
 801a96c:	e7b8      	b.n	801a8e0 <_dtoa_r+0x8e8>
 801a96e:	2201      	movs	r2, #1
 801a970:	e7e1      	b.n	801a936 <_dtoa_r+0x93e>
 801a972:	f1ba 0f00 	cmp.w	sl, #0
 801a976:	db06      	blt.n	801a986 <_dtoa_r+0x98e>
 801a978:	9906      	ldr	r1, [sp, #24]
 801a97a:	ea41 0a0a 	orr.w	sl, r1, sl
 801a97e:	9907      	ldr	r1, [sp, #28]
 801a980:	ea5a 0a01 	orrs.w	sl, sl, r1
 801a984:	d120      	bne.n	801a9c8 <_dtoa_r+0x9d0>
 801a986:	2a00      	cmp	r2, #0
 801a988:	ddec      	ble.n	801a964 <_dtoa_r+0x96c>
 801a98a:	4629      	mov	r1, r5
 801a98c:	2201      	movs	r2, #1
 801a98e:	4630      	mov	r0, r6
 801a990:	9304      	str	r3, [sp, #16]
 801a992:	f000 fbad 	bl	801b0f0 <__lshift>
 801a996:	4621      	mov	r1, r4
 801a998:	4605      	mov	r5, r0
 801a99a:	f000 fc15 	bl	801b1c8 <__mcmp>
 801a99e:	2800      	cmp	r0, #0
 801a9a0:	9b04      	ldr	r3, [sp, #16]
 801a9a2:	dc02      	bgt.n	801a9aa <_dtoa_r+0x9b2>
 801a9a4:	d1de      	bne.n	801a964 <_dtoa_r+0x96c>
 801a9a6:	07da      	lsls	r2, r3, #31
 801a9a8:	d5dc      	bpl.n	801a964 <_dtoa_r+0x96c>
 801a9aa:	2b39      	cmp	r3, #57	; 0x39
 801a9ac:	d1d8      	bne.n	801a960 <_dtoa_r+0x968>
 801a9ae:	9a02      	ldr	r2, [sp, #8]
 801a9b0:	2339      	movs	r3, #57	; 0x39
 801a9b2:	7013      	strb	r3, [r2, #0]
 801a9b4:	4643      	mov	r3, r8
 801a9b6:	4698      	mov	r8, r3
 801a9b8:	3b01      	subs	r3, #1
 801a9ba:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801a9be:	2a39      	cmp	r2, #57	; 0x39
 801a9c0:	d051      	beq.n	801aa66 <_dtoa_r+0xa6e>
 801a9c2:	3201      	adds	r2, #1
 801a9c4:	701a      	strb	r2, [r3, #0]
 801a9c6:	e746      	b.n	801a856 <_dtoa_r+0x85e>
 801a9c8:	2a00      	cmp	r2, #0
 801a9ca:	dd03      	ble.n	801a9d4 <_dtoa_r+0x9dc>
 801a9cc:	2b39      	cmp	r3, #57	; 0x39
 801a9ce:	d0ee      	beq.n	801a9ae <_dtoa_r+0x9b6>
 801a9d0:	3301      	adds	r3, #1
 801a9d2:	e7c7      	b.n	801a964 <_dtoa_r+0x96c>
 801a9d4:	9a04      	ldr	r2, [sp, #16]
 801a9d6:	9908      	ldr	r1, [sp, #32]
 801a9d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a9dc:	428a      	cmp	r2, r1
 801a9de:	d02b      	beq.n	801aa38 <_dtoa_r+0xa40>
 801a9e0:	4629      	mov	r1, r5
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	220a      	movs	r2, #10
 801a9e6:	4630      	mov	r0, r6
 801a9e8:	f000 f9d4 	bl	801ad94 <__multadd>
 801a9ec:	45b9      	cmp	r9, r7
 801a9ee:	4605      	mov	r5, r0
 801a9f0:	f04f 0300 	mov.w	r3, #0
 801a9f4:	f04f 020a 	mov.w	r2, #10
 801a9f8:	4649      	mov	r1, r9
 801a9fa:	4630      	mov	r0, r6
 801a9fc:	d107      	bne.n	801aa0e <_dtoa_r+0xa16>
 801a9fe:	f000 f9c9 	bl	801ad94 <__multadd>
 801aa02:	4681      	mov	r9, r0
 801aa04:	4607      	mov	r7, r0
 801aa06:	9b04      	ldr	r3, [sp, #16]
 801aa08:	3301      	adds	r3, #1
 801aa0a:	9304      	str	r3, [sp, #16]
 801aa0c:	e774      	b.n	801a8f8 <_dtoa_r+0x900>
 801aa0e:	f000 f9c1 	bl	801ad94 <__multadd>
 801aa12:	4639      	mov	r1, r7
 801aa14:	4681      	mov	r9, r0
 801aa16:	2300      	movs	r3, #0
 801aa18:	220a      	movs	r2, #10
 801aa1a:	4630      	mov	r0, r6
 801aa1c:	f000 f9ba 	bl	801ad94 <__multadd>
 801aa20:	4607      	mov	r7, r0
 801aa22:	e7f0      	b.n	801aa06 <_dtoa_r+0xa0e>
 801aa24:	f1ba 0f00 	cmp.w	sl, #0
 801aa28:	9a01      	ldr	r2, [sp, #4]
 801aa2a:	bfcc      	ite	gt
 801aa2c:	46d0      	movgt	r8, sl
 801aa2e:	f04f 0801 	movle.w	r8, #1
 801aa32:	4490      	add	r8, r2
 801aa34:	f04f 0900 	mov.w	r9, #0
 801aa38:	4629      	mov	r1, r5
 801aa3a:	2201      	movs	r2, #1
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	9302      	str	r3, [sp, #8]
 801aa40:	f000 fb56 	bl	801b0f0 <__lshift>
 801aa44:	4621      	mov	r1, r4
 801aa46:	4605      	mov	r5, r0
 801aa48:	f000 fbbe 	bl	801b1c8 <__mcmp>
 801aa4c:	2800      	cmp	r0, #0
 801aa4e:	dcb1      	bgt.n	801a9b4 <_dtoa_r+0x9bc>
 801aa50:	d102      	bne.n	801aa58 <_dtoa_r+0xa60>
 801aa52:	9b02      	ldr	r3, [sp, #8]
 801aa54:	07db      	lsls	r3, r3, #31
 801aa56:	d4ad      	bmi.n	801a9b4 <_dtoa_r+0x9bc>
 801aa58:	4643      	mov	r3, r8
 801aa5a:	4698      	mov	r8, r3
 801aa5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801aa60:	2a30      	cmp	r2, #48	; 0x30
 801aa62:	d0fa      	beq.n	801aa5a <_dtoa_r+0xa62>
 801aa64:	e6f7      	b.n	801a856 <_dtoa_r+0x85e>
 801aa66:	9a01      	ldr	r2, [sp, #4]
 801aa68:	429a      	cmp	r2, r3
 801aa6a:	d1a4      	bne.n	801a9b6 <_dtoa_r+0x9be>
 801aa6c:	f10b 0b01 	add.w	fp, fp, #1
 801aa70:	2331      	movs	r3, #49	; 0x31
 801aa72:	e778      	b.n	801a966 <_dtoa_r+0x96e>
 801aa74:	4b14      	ldr	r3, [pc, #80]	; (801aac8 <_dtoa_r+0xad0>)
 801aa76:	f7ff bb2a 	b.w	801a0ce <_dtoa_r+0xd6>
 801aa7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	f47f ab05 	bne.w	801a08c <_dtoa_r+0x94>
 801aa82:	4b12      	ldr	r3, [pc, #72]	; (801aacc <_dtoa_r+0xad4>)
 801aa84:	f7ff bb23 	b.w	801a0ce <_dtoa_r+0xd6>
 801aa88:	f1ba 0f00 	cmp.w	sl, #0
 801aa8c:	dc03      	bgt.n	801aa96 <_dtoa_r+0xa9e>
 801aa8e:	9b06      	ldr	r3, [sp, #24]
 801aa90:	2b02      	cmp	r3, #2
 801aa92:	f73f aec8 	bgt.w	801a826 <_dtoa_r+0x82e>
 801aa96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aa9a:	4621      	mov	r1, r4
 801aa9c:	4628      	mov	r0, r5
 801aa9e:	f7ff fa23 	bl	8019ee8 <quorem>
 801aaa2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801aaa6:	f808 3b01 	strb.w	r3, [r8], #1
 801aaaa:	9a01      	ldr	r2, [sp, #4]
 801aaac:	eba8 0202 	sub.w	r2, r8, r2
 801aab0:	4592      	cmp	sl, r2
 801aab2:	ddb7      	ble.n	801aa24 <_dtoa_r+0xa2c>
 801aab4:	4629      	mov	r1, r5
 801aab6:	2300      	movs	r3, #0
 801aab8:	220a      	movs	r2, #10
 801aaba:	4630      	mov	r0, r6
 801aabc:	f000 f96a 	bl	801ad94 <__multadd>
 801aac0:	4605      	mov	r5, r0
 801aac2:	e7ea      	b.n	801aa9a <_dtoa_r+0xaa2>
 801aac4:	0801f16b 	.word	0x0801f16b
 801aac8:	0801f0a6 	.word	0x0801f0a6
 801aacc:	0801f106 	.word	0x0801f106

0801aad0 <_free_r>:
 801aad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aad2:	2900      	cmp	r1, #0
 801aad4:	d044      	beq.n	801ab60 <_free_r+0x90>
 801aad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aada:	9001      	str	r0, [sp, #4]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	f1a1 0404 	sub.w	r4, r1, #4
 801aae2:	bfb8      	it	lt
 801aae4:	18e4      	addlt	r4, r4, r3
 801aae6:	f000 f8e7 	bl	801acb8 <__malloc_lock>
 801aaea:	4a1e      	ldr	r2, [pc, #120]	; (801ab64 <_free_r+0x94>)
 801aaec:	9801      	ldr	r0, [sp, #4]
 801aaee:	6813      	ldr	r3, [r2, #0]
 801aaf0:	b933      	cbnz	r3, 801ab00 <_free_r+0x30>
 801aaf2:	6063      	str	r3, [r4, #4]
 801aaf4:	6014      	str	r4, [r2, #0]
 801aaf6:	b003      	add	sp, #12
 801aaf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aafc:	f000 b8e2 	b.w	801acc4 <__malloc_unlock>
 801ab00:	42a3      	cmp	r3, r4
 801ab02:	d908      	bls.n	801ab16 <_free_r+0x46>
 801ab04:	6825      	ldr	r5, [r4, #0]
 801ab06:	1961      	adds	r1, r4, r5
 801ab08:	428b      	cmp	r3, r1
 801ab0a:	bf01      	itttt	eq
 801ab0c:	6819      	ldreq	r1, [r3, #0]
 801ab0e:	685b      	ldreq	r3, [r3, #4]
 801ab10:	1949      	addeq	r1, r1, r5
 801ab12:	6021      	streq	r1, [r4, #0]
 801ab14:	e7ed      	b.n	801aaf2 <_free_r+0x22>
 801ab16:	461a      	mov	r2, r3
 801ab18:	685b      	ldr	r3, [r3, #4]
 801ab1a:	b10b      	cbz	r3, 801ab20 <_free_r+0x50>
 801ab1c:	42a3      	cmp	r3, r4
 801ab1e:	d9fa      	bls.n	801ab16 <_free_r+0x46>
 801ab20:	6811      	ldr	r1, [r2, #0]
 801ab22:	1855      	adds	r5, r2, r1
 801ab24:	42a5      	cmp	r5, r4
 801ab26:	d10b      	bne.n	801ab40 <_free_r+0x70>
 801ab28:	6824      	ldr	r4, [r4, #0]
 801ab2a:	4421      	add	r1, r4
 801ab2c:	1854      	adds	r4, r2, r1
 801ab2e:	42a3      	cmp	r3, r4
 801ab30:	6011      	str	r1, [r2, #0]
 801ab32:	d1e0      	bne.n	801aaf6 <_free_r+0x26>
 801ab34:	681c      	ldr	r4, [r3, #0]
 801ab36:	685b      	ldr	r3, [r3, #4]
 801ab38:	6053      	str	r3, [r2, #4]
 801ab3a:	440c      	add	r4, r1
 801ab3c:	6014      	str	r4, [r2, #0]
 801ab3e:	e7da      	b.n	801aaf6 <_free_r+0x26>
 801ab40:	d902      	bls.n	801ab48 <_free_r+0x78>
 801ab42:	230c      	movs	r3, #12
 801ab44:	6003      	str	r3, [r0, #0]
 801ab46:	e7d6      	b.n	801aaf6 <_free_r+0x26>
 801ab48:	6825      	ldr	r5, [r4, #0]
 801ab4a:	1961      	adds	r1, r4, r5
 801ab4c:	428b      	cmp	r3, r1
 801ab4e:	bf04      	itt	eq
 801ab50:	6819      	ldreq	r1, [r3, #0]
 801ab52:	685b      	ldreq	r3, [r3, #4]
 801ab54:	6063      	str	r3, [r4, #4]
 801ab56:	bf04      	itt	eq
 801ab58:	1949      	addeq	r1, r1, r5
 801ab5a:	6021      	streq	r1, [r4, #0]
 801ab5c:	6054      	str	r4, [r2, #4]
 801ab5e:	e7ca      	b.n	801aaf6 <_free_r+0x26>
 801ab60:	b003      	add	sp, #12
 801ab62:	bd30      	pop	{r4, r5, pc}
 801ab64:	20007370 	.word	0x20007370

0801ab68 <malloc>:
 801ab68:	4b02      	ldr	r3, [pc, #8]	; (801ab74 <malloc+0xc>)
 801ab6a:	4601      	mov	r1, r0
 801ab6c:	6818      	ldr	r0, [r3, #0]
 801ab6e:	f000 b823 	b.w	801abb8 <_malloc_r>
 801ab72:	bf00      	nop
 801ab74:	200000bc 	.word	0x200000bc

0801ab78 <sbrk_aligned>:
 801ab78:	b570      	push	{r4, r5, r6, lr}
 801ab7a:	4e0e      	ldr	r6, [pc, #56]	; (801abb4 <sbrk_aligned+0x3c>)
 801ab7c:	460c      	mov	r4, r1
 801ab7e:	6831      	ldr	r1, [r6, #0]
 801ab80:	4605      	mov	r5, r0
 801ab82:	b911      	cbnz	r1, 801ab8a <sbrk_aligned+0x12>
 801ab84:	f000 fea8 	bl	801b8d8 <_sbrk_r>
 801ab88:	6030      	str	r0, [r6, #0]
 801ab8a:	4621      	mov	r1, r4
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	f000 fea3 	bl	801b8d8 <_sbrk_r>
 801ab92:	1c43      	adds	r3, r0, #1
 801ab94:	d00a      	beq.n	801abac <sbrk_aligned+0x34>
 801ab96:	1cc4      	adds	r4, r0, #3
 801ab98:	f024 0403 	bic.w	r4, r4, #3
 801ab9c:	42a0      	cmp	r0, r4
 801ab9e:	d007      	beq.n	801abb0 <sbrk_aligned+0x38>
 801aba0:	1a21      	subs	r1, r4, r0
 801aba2:	4628      	mov	r0, r5
 801aba4:	f000 fe98 	bl	801b8d8 <_sbrk_r>
 801aba8:	3001      	adds	r0, #1
 801abaa:	d101      	bne.n	801abb0 <sbrk_aligned+0x38>
 801abac:	f04f 34ff 	mov.w	r4, #4294967295
 801abb0:	4620      	mov	r0, r4
 801abb2:	bd70      	pop	{r4, r5, r6, pc}
 801abb4:	20007374 	.word	0x20007374

0801abb8 <_malloc_r>:
 801abb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abbc:	1ccd      	adds	r5, r1, #3
 801abbe:	f025 0503 	bic.w	r5, r5, #3
 801abc2:	3508      	adds	r5, #8
 801abc4:	2d0c      	cmp	r5, #12
 801abc6:	bf38      	it	cc
 801abc8:	250c      	movcc	r5, #12
 801abca:	2d00      	cmp	r5, #0
 801abcc:	4607      	mov	r7, r0
 801abce:	db01      	blt.n	801abd4 <_malloc_r+0x1c>
 801abd0:	42a9      	cmp	r1, r5
 801abd2:	d905      	bls.n	801abe0 <_malloc_r+0x28>
 801abd4:	230c      	movs	r3, #12
 801abd6:	603b      	str	r3, [r7, #0]
 801abd8:	2600      	movs	r6, #0
 801abda:	4630      	mov	r0, r6
 801abdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abe0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801acb4 <_malloc_r+0xfc>
 801abe4:	f000 f868 	bl	801acb8 <__malloc_lock>
 801abe8:	f8d8 3000 	ldr.w	r3, [r8]
 801abec:	461c      	mov	r4, r3
 801abee:	bb5c      	cbnz	r4, 801ac48 <_malloc_r+0x90>
 801abf0:	4629      	mov	r1, r5
 801abf2:	4638      	mov	r0, r7
 801abf4:	f7ff ffc0 	bl	801ab78 <sbrk_aligned>
 801abf8:	1c43      	adds	r3, r0, #1
 801abfa:	4604      	mov	r4, r0
 801abfc:	d155      	bne.n	801acaa <_malloc_r+0xf2>
 801abfe:	f8d8 4000 	ldr.w	r4, [r8]
 801ac02:	4626      	mov	r6, r4
 801ac04:	2e00      	cmp	r6, #0
 801ac06:	d145      	bne.n	801ac94 <_malloc_r+0xdc>
 801ac08:	2c00      	cmp	r4, #0
 801ac0a:	d048      	beq.n	801ac9e <_malloc_r+0xe6>
 801ac0c:	6823      	ldr	r3, [r4, #0]
 801ac0e:	4631      	mov	r1, r6
 801ac10:	4638      	mov	r0, r7
 801ac12:	eb04 0903 	add.w	r9, r4, r3
 801ac16:	f000 fe5f 	bl	801b8d8 <_sbrk_r>
 801ac1a:	4581      	cmp	r9, r0
 801ac1c:	d13f      	bne.n	801ac9e <_malloc_r+0xe6>
 801ac1e:	6821      	ldr	r1, [r4, #0]
 801ac20:	1a6d      	subs	r5, r5, r1
 801ac22:	4629      	mov	r1, r5
 801ac24:	4638      	mov	r0, r7
 801ac26:	f7ff ffa7 	bl	801ab78 <sbrk_aligned>
 801ac2a:	3001      	adds	r0, #1
 801ac2c:	d037      	beq.n	801ac9e <_malloc_r+0xe6>
 801ac2e:	6823      	ldr	r3, [r4, #0]
 801ac30:	442b      	add	r3, r5
 801ac32:	6023      	str	r3, [r4, #0]
 801ac34:	f8d8 3000 	ldr.w	r3, [r8]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d038      	beq.n	801acae <_malloc_r+0xf6>
 801ac3c:	685a      	ldr	r2, [r3, #4]
 801ac3e:	42a2      	cmp	r2, r4
 801ac40:	d12b      	bne.n	801ac9a <_malloc_r+0xe2>
 801ac42:	2200      	movs	r2, #0
 801ac44:	605a      	str	r2, [r3, #4]
 801ac46:	e00f      	b.n	801ac68 <_malloc_r+0xb0>
 801ac48:	6822      	ldr	r2, [r4, #0]
 801ac4a:	1b52      	subs	r2, r2, r5
 801ac4c:	d41f      	bmi.n	801ac8e <_malloc_r+0xd6>
 801ac4e:	2a0b      	cmp	r2, #11
 801ac50:	d917      	bls.n	801ac82 <_malloc_r+0xca>
 801ac52:	1961      	adds	r1, r4, r5
 801ac54:	42a3      	cmp	r3, r4
 801ac56:	6025      	str	r5, [r4, #0]
 801ac58:	bf18      	it	ne
 801ac5a:	6059      	strne	r1, [r3, #4]
 801ac5c:	6863      	ldr	r3, [r4, #4]
 801ac5e:	bf08      	it	eq
 801ac60:	f8c8 1000 	streq.w	r1, [r8]
 801ac64:	5162      	str	r2, [r4, r5]
 801ac66:	604b      	str	r3, [r1, #4]
 801ac68:	4638      	mov	r0, r7
 801ac6a:	f104 060b 	add.w	r6, r4, #11
 801ac6e:	f000 f829 	bl	801acc4 <__malloc_unlock>
 801ac72:	f026 0607 	bic.w	r6, r6, #7
 801ac76:	1d23      	adds	r3, r4, #4
 801ac78:	1af2      	subs	r2, r6, r3
 801ac7a:	d0ae      	beq.n	801abda <_malloc_r+0x22>
 801ac7c:	1b9b      	subs	r3, r3, r6
 801ac7e:	50a3      	str	r3, [r4, r2]
 801ac80:	e7ab      	b.n	801abda <_malloc_r+0x22>
 801ac82:	42a3      	cmp	r3, r4
 801ac84:	6862      	ldr	r2, [r4, #4]
 801ac86:	d1dd      	bne.n	801ac44 <_malloc_r+0x8c>
 801ac88:	f8c8 2000 	str.w	r2, [r8]
 801ac8c:	e7ec      	b.n	801ac68 <_malloc_r+0xb0>
 801ac8e:	4623      	mov	r3, r4
 801ac90:	6864      	ldr	r4, [r4, #4]
 801ac92:	e7ac      	b.n	801abee <_malloc_r+0x36>
 801ac94:	4634      	mov	r4, r6
 801ac96:	6876      	ldr	r6, [r6, #4]
 801ac98:	e7b4      	b.n	801ac04 <_malloc_r+0x4c>
 801ac9a:	4613      	mov	r3, r2
 801ac9c:	e7cc      	b.n	801ac38 <_malloc_r+0x80>
 801ac9e:	230c      	movs	r3, #12
 801aca0:	603b      	str	r3, [r7, #0]
 801aca2:	4638      	mov	r0, r7
 801aca4:	f000 f80e 	bl	801acc4 <__malloc_unlock>
 801aca8:	e797      	b.n	801abda <_malloc_r+0x22>
 801acaa:	6025      	str	r5, [r4, #0]
 801acac:	e7dc      	b.n	801ac68 <_malloc_r+0xb0>
 801acae:	605b      	str	r3, [r3, #4]
 801acb0:	deff      	udf	#255	; 0xff
 801acb2:	bf00      	nop
 801acb4:	20007370 	.word	0x20007370

0801acb8 <__malloc_lock>:
 801acb8:	4801      	ldr	r0, [pc, #4]	; (801acc0 <__malloc_lock+0x8>)
 801acba:	f7ff b8e6 	b.w	8019e8a <__retarget_lock_acquire_recursive>
 801acbe:	bf00      	nop
 801acc0:	2000736c 	.word	0x2000736c

0801acc4 <__malloc_unlock>:
 801acc4:	4801      	ldr	r0, [pc, #4]	; (801accc <__malloc_unlock+0x8>)
 801acc6:	f7ff b8e1 	b.w	8019e8c <__retarget_lock_release_recursive>
 801acca:	bf00      	nop
 801accc:	2000736c 	.word	0x2000736c

0801acd0 <_Balloc>:
 801acd0:	b570      	push	{r4, r5, r6, lr}
 801acd2:	69c6      	ldr	r6, [r0, #28]
 801acd4:	4604      	mov	r4, r0
 801acd6:	460d      	mov	r5, r1
 801acd8:	b976      	cbnz	r6, 801acf8 <_Balloc+0x28>
 801acda:	2010      	movs	r0, #16
 801acdc:	f7ff ff44 	bl	801ab68 <malloc>
 801ace0:	4602      	mov	r2, r0
 801ace2:	61e0      	str	r0, [r4, #28]
 801ace4:	b920      	cbnz	r0, 801acf0 <_Balloc+0x20>
 801ace6:	4b18      	ldr	r3, [pc, #96]	; (801ad48 <_Balloc+0x78>)
 801ace8:	4818      	ldr	r0, [pc, #96]	; (801ad4c <_Balloc+0x7c>)
 801acea:	216b      	movs	r1, #107	; 0x6b
 801acec:	f7ff f8de 	bl	8019eac <__assert_func>
 801acf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801acf4:	6006      	str	r6, [r0, #0]
 801acf6:	60c6      	str	r6, [r0, #12]
 801acf8:	69e6      	ldr	r6, [r4, #28]
 801acfa:	68f3      	ldr	r3, [r6, #12]
 801acfc:	b183      	cbz	r3, 801ad20 <_Balloc+0x50>
 801acfe:	69e3      	ldr	r3, [r4, #28]
 801ad00:	68db      	ldr	r3, [r3, #12]
 801ad02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ad06:	b9b8      	cbnz	r0, 801ad38 <_Balloc+0x68>
 801ad08:	2101      	movs	r1, #1
 801ad0a:	fa01 f605 	lsl.w	r6, r1, r5
 801ad0e:	1d72      	adds	r2, r6, #5
 801ad10:	0092      	lsls	r2, r2, #2
 801ad12:	4620      	mov	r0, r4
 801ad14:	f000 fdf7 	bl	801b906 <_calloc_r>
 801ad18:	b160      	cbz	r0, 801ad34 <_Balloc+0x64>
 801ad1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ad1e:	e00e      	b.n	801ad3e <_Balloc+0x6e>
 801ad20:	2221      	movs	r2, #33	; 0x21
 801ad22:	2104      	movs	r1, #4
 801ad24:	4620      	mov	r0, r4
 801ad26:	f000 fdee 	bl	801b906 <_calloc_r>
 801ad2a:	69e3      	ldr	r3, [r4, #28]
 801ad2c:	60f0      	str	r0, [r6, #12]
 801ad2e:	68db      	ldr	r3, [r3, #12]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d1e4      	bne.n	801acfe <_Balloc+0x2e>
 801ad34:	2000      	movs	r0, #0
 801ad36:	bd70      	pop	{r4, r5, r6, pc}
 801ad38:	6802      	ldr	r2, [r0, #0]
 801ad3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ad3e:	2300      	movs	r3, #0
 801ad40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ad44:	e7f7      	b.n	801ad36 <_Balloc+0x66>
 801ad46:	bf00      	nop
 801ad48:	0801ef26 	.word	0x0801ef26
 801ad4c:	0801f17c 	.word	0x0801f17c

0801ad50 <_Bfree>:
 801ad50:	b570      	push	{r4, r5, r6, lr}
 801ad52:	69c6      	ldr	r6, [r0, #28]
 801ad54:	4605      	mov	r5, r0
 801ad56:	460c      	mov	r4, r1
 801ad58:	b976      	cbnz	r6, 801ad78 <_Bfree+0x28>
 801ad5a:	2010      	movs	r0, #16
 801ad5c:	f7ff ff04 	bl	801ab68 <malloc>
 801ad60:	4602      	mov	r2, r0
 801ad62:	61e8      	str	r0, [r5, #28]
 801ad64:	b920      	cbnz	r0, 801ad70 <_Bfree+0x20>
 801ad66:	4b09      	ldr	r3, [pc, #36]	; (801ad8c <_Bfree+0x3c>)
 801ad68:	4809      	ldr	r0, [pc, #36]	; (801ad90 <_Bfree+0x40>)
 801ad6a:	218f      	movs	r1, #143	; 0x8f
 801ad6c:	f7ff f89e 	bl	8019eac <__assert_func>
 801ad70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ad74:	6006      	str	r6, [r0, #0]
 801ad76:	60c6      	str	r6, [r0, #12]
 801ad78:	b13c      	cbz	r4, 801ad8a <_Bfree+0x3a>
 801ad7a:	69eb      	ldr	r3, [r5, #28]
 801ad7c:	6862      	ldr	r2, [r4, #4]
 801ad7e:	68db      	ldr	r3, [r3, #12]
 801ad80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ad84:	6021      	str	r1, [r4, #0]
 801ad86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ad8a:	bd70      	pop	{r4, r5, r6, pc}
 801ad8c:	0801ef26 	.word	0x0801ef26
 801ad90:	0801f17c 	.word	0x0801f17c

0801ad94 <__multadd>:
 801ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad98:	690d      	ldr	r5, [r1, #16]
 801ad9a:	4607      	mov	r7, r0
 801ad9c:	460c      	mov	r4, r1
 801ad9e:	461e      	mov	r6, r3
 801ada0:	f101 0c14 	add.w	ip, r1, #20
 801ada4:	2000      	movs	r0, #0
 801ada6:	f8dc 3000 	ldr.w	r3, [ip]
 801adaa:	b299      	uxth	r1, r3
 801adac:	fb02 6101 	mla	r1, r2, r1, r6
 801adb0:	0c1e      	lsrs	r6, r3, #16
 801adb2:	0c0b      	lsrs	r3, r1, #16
 801adb4:	fb02 3306 	mla	r3, r2, r6, r3
 801adb8:	b289      	uxth	r1, r1
 801adba:	3001      	adds	r0, #1
 801adbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801adc0:	4285      	cmp	r5, r0
 801adc2:	f84c 1b04 	str.w	r1, [ip], #4
 801adc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801adca:	dcec      	bgt.n	801ada6 <__multadd+0x12>
 801adcc:	b30e      	cbz	r6, 801ae12 <__multadd+0x7e>
 801adce:	68a3      	ldr	r3, [r4, #8]
 801add0:	42ab      	cmp	r3, r5
 801add2:	dc19      	bgt.n	801ae08 <__multadd+0x74>
 801add4:	6861      	ldr	r1, [r4, #4]
 801add6:	4638      	mov	r0, r7
 801add8:	3101      	adds	r1, #1
 801adda:	f7ff ff79 	bl	801acd0 <_Balloc>
 801adde:	4680      	mov	r8, r0
 801ade0:	b928      	cbnz	r0, 801adee <__multadd+0x5a>
 801ade2:	4602      	mov	r2, r0
 801ade4:	4b0c      	ldr	r3, [pc, #48]	; (801ae18 <__multadd+0x84>)
 801ade6:	480d      	ldr	r0, [pc, #52]	; (801ae1c <__multadd+0x88>)
 801ade8:	21ba      	movs	r1, #186	; 0xba
 801adea:	f7ff f85f 	bl	8019eac <__assert_func>
 801adee:	6922      	ldr	r2, [r4, #16]
 801adf0:	3202      	adds	r2, #2
 801adf2:	f104 010c 	add.w	r1, r4, #12
 801adf6:	0092      	lsls	r2, r2, #2
 801adf8:	300c      	adds	r0, #12
 801adfa:	f7ff f848 	bl	8019e8e <memcpy>
 801adfe:	4621      	mov	r1, r4
 801ae00:	4638      	mov	r0, r7
 801ae02:	f7ff ffa5 	bl	801ad50 <_Bfree>
 801ae06:	4644      	mov	r4, r8
 801ae08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ae0c:	3501      	adds	r5, #1
 801ae0e:	615e      	str	r6, [r3, #20]
 801ae10:	6125      	str	r5, [r4, #16]
 801ae12:	4620      	mov	r0, r4
 801ae14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae18:	0801f16b 	.word	0x0801f16b
 801ae1c:	0801f17c 	.word	0x0801f17c

0801ae20 <__hi0bits>:
 801ae20:	0c03      	lsrs	r3, r0, #16
 801ae22:	041b      	lsls	r3, r3, #16
 801ae24:	b9d3      	cbnz	r3, 801ae5c <__hi0bits+0x3c>
 801ae26:	0400      	lsls	r0, r0, #16
 801ae28:	2310      	movs	r3, #16
 801ae2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ae2e:	bf04      	itt	eq
 801ae30:	0200      	lsleq	r0, r0, #8
 801ae32:	3308      	addeq	r3, #8
 801ae34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ae38:	bf04      	itt	eq
 801ae3a:	0100      	lsleq	r0, r0, #4
 801ae3c:	3304      	addeq	r3, #4
 801ae3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ae42:	bf04      	itt	eq
 801ae44:	0080      	lsleq	r0, r0, #2
 801ae46:	3302      	addeq	r3, #2
 801ae48:	2800      	cmp	r0, #0
 801ae4a:	db05      	blt.n	801ae58 <__hi0bits+0x38>
 801ae4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ae50:	f103 0301 	add.w	r3, r3, #1
 801ae54:	bf08      	it	eq
 801ae56:	2320      	moveq	r3, #32
 801ae58:	4618      	mov	r0, r3
 801ae5a:	4770      	bx	lr
 801ae5c:	2300      	movs	r3, #0
 801ae5e:	e7e4      	b.n	801ae2a <__hi0bits+0xa>

0801ae60 <__lo0bits>:
 801ae60:	6803      	ldr	r3, [r0, #0]
 801ae62:	f013 0207 	ands.w	r2, r3, #7
 801ae66:	d00c      	beq.n	801ae82 <__lo0bits+0x22>
 801ae68:	07d9      	lsls	r1, r3, #31
 801ae6a:	d422      	bmi.n	801aeb2 <__lo0bits+0x52>
 801ae6c:	079a      	lsls	r2, r3, #30
 801ae6e:	bf49      	itett	mi
 801ae70:	085b      	lsrmi	r3, r3, #1
 801ae72:	089b      	lsrpl	r3, r3, #2
 801ae74:	6003      	strmi	r3, [r0, #0]
 801ae76:	2201      	movmi	r2, #1
 801ae78:	bf5c      	itt	pl
 801ae7a:	6003      	strpl	r3, [r0, #0]
 801ae7c:	2202      	movpl	r2, #2
 801ae7e:	4610      	mov	r0, r2
 801ae80:	4770      	bx	lr
 801ae82:	b299      	uxth	r1, r3
 801ae84:	b909      	cbnz	r1, 801ae8a <__lo0bits+0x2a>
 801ae86:	0c1b      	lsrs	r3, r3, #16
 801ae88:	2210      	movs	r2, #16
 801ae8a:	b2d9      	uxtb	r1, r3
 801ae8c:	b909      	cbnz	r1, 801ae92 <__lo0bits+0x32>
 801ae8e:	3208      	adds	r2, #8
 801ae90:	0a1b      	lsrs	r3, r3, #8
 801ae92:	0719      	lsls	r1, r3, #28
 801ae94:	bf04      	itt	eq
 801ae96:	091b      	lsreq	r3, r3, #4
 801ae98:	3204      	addeq	r2, #4
 801ae9a:	0799      	lsls	r1, r3, #30
 801ae9c:	bf04      	itt	eq
 801ae9e:	089b      	lsreq	r3, r3, #2
 801aea0:	3202      	addeq	r2, #2
 801aea2:	07d9      	lsls	r1, r3, #31
 801aea4:	d403      	bmi.n	801aeae <__lo0bits+0x4e>
 801aea6:	085b      	lsrs	r3, r3, #1
 801aea8:	f102 0201 	add.w	r2, r2, #1
 801aeac:	d003      	beq.n	801aeb6 <__lo0bits+0x56>
 801aeae:	6003      	str	r3, [r0, #0]
 801aeb0:	e7e5      	b.n	801ae7e <__lo0bits+0x1e>
 801aeb2:	2200      	movs	r2, #0
 801aeb4:	e7e3      	b.n	801ae7e <__lo0bits+0x1e>
 801aeb6:	2220      	movs	r2, #32
 801aeb8:	e7e1      	b.n	801ae7e <__lo0bits+0x1e>
	...

0801aebc <__i2b>:
 801aebc:	b510      	push	{r4, lr}
 801aebe:	460c      	mov	r4, r1
 801aec0:	2101      	movs	r1, #1
 801aec2:	f7ff ff05 	bl	801acd0 <_Balloc>
 801aec6:	4602      	mov	r2, r0
 801aec8:	b928      	cbnz	r0, 801aed6 <__i2b+0x1a>
 801aeca:	4b05      	ldr	r3, [pc, #20]	; (801aee0 <__i2b+0x24>)
 801aecc:	4805      	ldr	r0, [pc, #20]	; (801aee4 <__i2b+0x28>)
 801aece:	f240 1145 	movw	r1, #325	; 0x145
 801aed2:	f7fe ffeb 	bl	8019eac <__assert_func>
 801aed6:	2301      	movs	r3, #1
 801aed8:	6144      	str	r4, [r0, #20]
 801aeda:	6103      	str	r3, [r0, #16]
 801aedc:	bd10      	pop	{r4, pc}
 801aede:	bf00      	nop
 801aee0:	0801f16b 	.word	0x0801f16b
 801aee4:	0801f17c 	.word	0x0801f17c

0801aee8 <__multiply>:
 801aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeec:	4691      	mov	r9, r2
 801aeee:	690a      	ldr	r2, [r1, #16]
 801aef0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801aef4:	429a      	cmp	r2, r3
 801aef6:	bfb8      	it	lt
 801aef8:	460b      	movlt	r3, r1
 801aefa:	460c      	mov	r4, r1
 801aefc:	bfbc      	itt	lt
 801aefe:	464c      	movlt	r4, r9
 801af00:	4699      	movlt	r9, r3
 801af02:	6927      	ldr	r7, [r4, #16]
 801af04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801af08:	68a3      	ldr	r3, [r4, #8]
 801af0a:	6861      	ldr	r1, [r4, #4]
 801af0c:	eb07 060a 	add.w	r6, r7, sl
 801af10:	42b3      	cmp	r3, r6
 801af12:	b085      	sub	sp, #20
 801af14:	bfb8      	it	lt
 801af16:	3101      	addlt	r1, #1
 801af18:	f7ff feda 	bl	801acd0 <_Balloc>
 801af1c:	b930      	cbnz	r0, 801af2c <__multiply+0x44>
 801af1e:	4602      	mov	r2, r0
 801af20:	4b44      	ldr	r3, [pc, #272]	; (801b034 <__multiply+0x14c>)
 801af22:	4845      	ldr	r0, [pc, #276]	; (801b038 <__multiply+0x150>)
 801af24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801af28:	f7fe ffc0 	bl	8019eac <__assert_func>
 801af2c:	f100 0514 	add.w	r5, r0, #20
 801af30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801af34:	462b      	mov	r3, r5
 801af36:	2200      	movs	r2, #0
 801af38:	4543      	cmp	r3, r8
 801af3a:	d321      	bcc.n	801af80 <__multiply+0x98>
 801af3c:	f104 0314 	add.w	r3, r4, #20
 801af40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801af44:	f109 0314 	add.w	r3, r9, #20
 801af48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801af4c:	9202      	str	r2, [sp, #8]
 801af4e:	1b3a      	subs	r2, r7, r4
 801af50:	3a15      	subs	r2, #21
 801af52:	f022 0203 	bic.w	r2, r2, #3
 801af56:	3204      	adds	r2, #4
 801af58:	f104 0115 	add.w	r1, r4, #21
 801af5c:	428f      	cmp	r7, r1
 801af5e:	bf38      	it	cc
 801af60:	2204      	movcc	r2, #4
 801af62:	9201      	str	r2, [sp, #4]
 801af64:	9a02      	ldr	r2, [sp, #8]
 801af66:	9303      	str	r3, [sp, #12]
 801af68:	429a      	cmp	r2, r3
 801af6a:	d80c      	bhi.n	801af86 <__multiply+0x9e>
 801af6c:	2e00      	cmp	r6, #0
 801af6e:	dd03      	ble.n	801af78 <__multiply+0x90>
 801af70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801af74:	2b00      	cmp	r3, #0
 801af76:	d05b      	beq.n	801b030 <__multiply+0x148>
 801af78:	6106      	str	r6, [r0, #16]
 801af7a:	b005      	add	sp, #20
 801af7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af80:	f843 2b04 	str.w	r2, [r3], #4
 801af84:	e7d8      	b.n	801af38 <__multiply+0x50>
 801af86:	f8b3 a000 	ldrh.w	sl, [r3]
 801af8a:	f1ba 0f00 	cmp.w	sl, #0
 801af8e:	d024      	beq.n	801afda <__multiply+0xf2>
 801af90:	f104 0e14 	add.w	lr, r4, #20
 801af94:	46a9      	mov	r9, r5
 801af96:	f04f 0c00 	mov.w	ip, #0
 801af9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801af9e:	f8d9 1000 	ldr.w	r1, [r9]
 801afa2:	fa1f fb82 	uxth.w	fp, r2
 801afa6:	b289      	uxth	r1, r1
 801afa8:	fb0a 110b 	mla	r1, sl, fp, r1
 801afac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801afb0:	f8d9 2000 	ldr.w	r2, [r9]
 801afb4:	4461      	add	r1, ip
 801afb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801afba:	fb0a c20b 	mla	r2, sl, fp, ip
 801afbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801afc2:	b289      	uxth	r1, r1
 801afc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801afc8:	4577      	cmp	r7, lr
 801afca:	f849 1b04 	str.w	r1, [r9], #4
 801afce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801afd2:	d8e2      	bhi.n	801af9a <__multiply+0xb2>
 801afd4:	9a01      	ldr	r2, [sp, #4]
 801afd6:	f845 c002 	str.w	ip, [r5, r2]
 801afda:	9a03      	ldr	r2, [sp, #12]
 801afdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801afe0:	3304      	adds	r3, #4
 801afe2:	f1b9 0f00 	cmp.w	r9, #0
 801afe6:	d021      	beq.n	801b02c <__multiply+0x144>
 801afe8:	6829      	ldr	r1, [r5, #0]
 801afea:	f104 0c14 	add.w	ip, r4, #20
 801afee:	46ae      	mov	lr, r5
 801aff0:	f04f 0a00 	mov.w	sl, #0
 801aff4:	f8bc b000 	ldrh.w	fp, [ip]
 801aff8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801affc:	fb09 220b 	mla	r2, r9, fp, r2
 801b000:	4452      	add	r2, sl
 801b002:	b289      	uxth	r1, r1
 801b004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b008:	f84e 1b04 	str.w	r1, [lr], #4
 801b00c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b010:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b014:	f8be 1000 	ldrh.w	r1, [lr]
 801b018:	fb09 110a 	mla	r1, r9, sl, r1
 801b01c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b020:	4567      	cmp	r7, ip
 801b022:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b026:	d8e5      	bhi.n	801aff4 <__multiply+0x10c>
 801b028:	9a01      	ldr	r2, [sp, #4]
 801b02a:	50a9      	str	r1, [r5, r2]
 801b02c:	3504      	adds	r5, #4
 801b02e:	e799      	b.n	801af64 <__multiply+0x7c>
 801b030:	3e01      	subs	r6, #1
 801b032:	e79b      	b.n	801af6c <__multiply+0x84>
 801b034:	0801f16b 	.word	0x0801f16b
 801b038:	0801f17c 	.word	0x0801f17c

0801b03c <__pow5mult>:
 801b03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b040:	4615      	mov	r5, r2
 801b042:	f012 0203 	ands.w	r2, r2, #3
 801b046:	4606      	mov	r6, r0
 801b048:	460f      	mov	r7, r1
 801b04a:	d007      	beq.n	801b05c <__pow5mult+0x20>
 801b04c:	4c25      	ldr	r4, [pc, #148]	; (801b0e4 <__pow5mult+0xa8>)
 801b04e:	3a01      	subs	r2, #1
 801b050:	2300      	movs	r3, #0
 801b052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b056:	f7ff fe9d 	bl	801ad94 <__multadd>
 801b05a:	4607      	mov	r7, r0
 801b05c:	10ad      	asrs	r5, r5, #2
 801b05e:	d03d      	beq.n	801b0dc <__pow5mult+0xa0>
 801b060:	69f4      	ldr	r4, [r6, #28]
 801b062:	b97c      	cbnz	r4, 801b084 <__pow5mult+0x48>
 801b064:	2010      	movs	r0, #16
 801b066:	f7ff fd7f 	bl	801ab68 <malloc>
 801b06a:	4602      	mov	r2, r0
 801b06c:	61f0      	str	r0, [r6, #28]
 801b06e:	b928      	cbnz	r0, 801b07c <__pow5mult+0x40>
 801b070:	4b1d      	ldr	r3, [pc, #116]	; (801b0e8 <__pow5mult+0xac>)
 801b072:	481e      	ldr	r0, [pc, #120]	; (801b0ec <__pow5mult+0xb0>)
 801b074:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b078:	f7fe ff18 	bl	8019eac <__assert_func>
 801b07c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b080:	6004      	str	r4, [r0, #0]
 801b082:	60c4      	str	r4, [r0, #12]
 801b084:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b08c:	b94c      	cbnz	r4, 801b0a2 <__pow5mult+0x66>
 801b08e:	f240 2171 	movw	r1, #625	; 0x271
 801b092:	4630      	mov	r0, r6
 801b094:	f7ff ff12 	bl	801aebc <__i2b>
 801b098:	2300      	movs	r3, #0
 801b09a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b09e:	4604      	mov	r4, r0
 801b0a0:	6003      	str	r3, [r0, #0]
 801b0a2:	f04f 0900 	mov.w	r9, #0
 801b0a6:	07eb      	lsls	r3, r5, #31
 801b0a8:	d50a      	bpl.n	801b0c0 <__pow5mult+0x84>
 801b0aa:	4639      	mov	r1, r7
 801b0ac:	4622      	mov	r2, r4
 801b0ae:	4630      	mov	r0, r6
 801b0b0:	f7ff ff1a 	bl	801aee8 <__multiply>
 801b0b4:	4639      	mov	r1, r7
 801b0b6:	4680      	mov	r8, r0
 801b0b8:	4630      	mov	r0, r6
 801b0ba:	f7ff fe49 	bl	801ad50 <_Bfree>
 801b0be:	4647      	mov	r7, r8
 801b0c0:	106d      	asrs	r5, r5, #1
 801b0c2:	d00b      	beq.n	801b0dc <__pow5mult+0xa0>
 801b0c4:	6820      	ldr	r0, [r4, #0]
 801b0c6:	b938      	cbnz	r0, 801b0d8 <__pow5mult+0x9c>
 801b0c8:	4622      	mov	r2, r4
 801b0ca:	4621      	mov	r1, r4
 801b0cc:	4630      	mov	r0, r6
 801b0ce:	f7ff ff0b 	bl	801aee8 <__multiply>
 801b0d2:	6020      	str	r0, [r4, #0]
 801b0d4:	f8c0 9000 	str.w	r9, [r0]
 801b0d8:	4604      	mov	r4, r0
 801b0da:	e7e4      	b.n	801b0a6 <__pow5mult+0x6a>
 801b0dc:	4638      	mov	r0, r7
 801b0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0e2:	bf00      	nop
 801b0e4:	0801f2c8 	.word	0x0801f2c8
 801b0e8:	0801ef26 	.word	0x0801ef26
 801b0ec:	0801f17c 	.word	0x0801f17c

0801b0f0 <__lshift>:
 801b0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0f4:	460c      	mov	r4, r1
 801b0f6:	6849      	ldr	r1, [r1, #4]
 801b0f8:	6923      	ldr	r3, [r4, #16]
 801b0fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b0fe:	68a3      	ldr	r3, [r4, #8]
 801b100:	4607      	mov	r7, r0
 801b102:	4691      	mov	r9, r2
 801b104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b108:	f108 0601 	add.w	r6, r8, #1
 801b10c:	42b3      	cmp	r3, r6
 801b10e:	db0b      	blt.n	801b128 <__lshift+0x38>
 801b110:	4638      	mov	r0, r7
 801b112:	f7ff fddd 	bl	801acd0 <_Balloc>
 801b116:	4605      	mov	r5, r0
 801b118:	b948      	cbnz	r0, 801b12e <__lshift+0x3e>
 801b11a:	4602      	mov	r2, r0
 801b11c:	4b28      	ldr	r3, [pc, #160]	; (801b1c0 <__lshift+0xd0>)
 801b11e:	4829      	ldr	r0, [pc, #164]	; (801b1c4 <__lshift+0xd4>)
 801b120:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b124:	f7fe fec2 	bl	8019eac <__assert_func>
 801b128:	3101      	adds	r1, #1
 801b12a:	005b      	lsls	r3, r3, #1
 801b12c:	e7ee      	b.n	801b10c <__lshift+0x1c>
 801b12e:	2300      	movs	r3, #0
 801b130:	f100 0114 	add.w	r1, r0, #20
 801b134:	f100 0210 	add.w	r2, r0, #16
 801b138:	4618      	mov	r0, r3
 801b13a:	4553      	cmp	r3, sl
 801b13c:	db33      	blt.n	801b1a6 <__lshift+0xb6>
 801b13e:	6920      	ldr	r0, [r4, #16]
 801b140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b144:	f104 0314 	add.w	r3, r4, #20
 801b148:	f019 091f 	ands.w	r9, r9, #31
 801b14c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b154:	d02b      	beq.n	801b1ae <__lshift+0xbe>
 801b156:	f1c9 0e20 	rsb	lr, r9, #32
 801b15a:	468a      	mov	sl, r1
 801b15c:	2200      	movs	r2, #0
 801b15e:	6818      	ldr	r0, [r3, #0]
 801b160:	fa00 f009 	lsl.w	r0, r0, r9
 801b164:	4310      	orrs	r0, r2
 801b166:	f84a 0b04 	str.w	r0, [sl], #4
 801b16a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b16e:	459c      	cmp	ip, r3
 801b170:	fa22 f20e 	lsr.w	r2, r2, lr
 801b174:	d8f3      	bhi.n	801b15e <__lshift+0x6e>
 801b176:	ebac 0304 	sub.w	r3, ip, r4
 801b17a:	3b15      	subs	r3, #21
 801b17c:	f023 0303 	bic.w	r3, r3, #3
 801b180:	3304      	adds	r3, #4
 801b182:	f104 0015 	add.w	r0, r4, #21
 801b186:	4584      	cmp	ip, r0
 801b188:	bf38      	it	cc
 801b18a:	2304      	movcc	r3, #4
 801b18c:	50ca      	str	r2, [r1, r3]
 801b18e:	b10a      	cbz	r2, 801b194 <__lshift+0xa4>
 801b190:	f108 0602 	add.w	r6, r8, #2
 801b194:	3e01      	subs	r6, #1
 801b196:	4638      	mov	r0, r7
 801b198:	612e      	str	r6, [r5, #16]
 801b19a:	4621      	mov	r1, r4
 801b19c:	f7ff fdd8 	bl	801ad50 <_Bfree>
 801b1a0:	4628      	mov	r0, r5
 801b1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1a6:	f842 0f04 	str.w	r0, [r2, #4]!
 801b1aa:	3301      	adds	r3, #1
 801b1ac:	e7c5      	b.n	801b13a <__lshift+0x4a>
 801b1ae:	3904      	subs	r1, #4
 801b1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1b4:	f841 2f04 	str.w	r2, [r1, #4]!
 801b1b8:	459c      	cmp	ip, r3
 801b1ba:	d8f9      	bhi.n	801b1b0 <__lshift+0xc0>
 801b1bc:	e7ea      	b.n	801b194 <__lshift+0xa4>
 801b1be:	bf00      	nop
 801b1c0:	0801f16b 	.word	0x0801f16b
 801b1c4:	0801f17c 	.word	0x0801f17c

0801b1c8 <__mcmp>:
 801b1c8:	b530      	push	{r4, r5, lr}
 801b1ca:	6902      	ldr	r2, [r0, #16]
 801b1cc:	690c      	ldr	r4, [r1, #16]
 801b1ce:	1b12      	subs	r2, r2, r4
 801b1d0:	d10e      	bne.n	801b1f0 <__mcmp+0x28>
 801b1d2:	f100 0314 	add.w	r3, r0, #20
 801b1d6:	3114      	adds	r1, #20
 801b1d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b1dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b1e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b1e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b1e8:	42a5      	cmp	r5, r4
 801b1ea:	d003      	beq.n	801b1f4 <__mcmp+0x2c>
 801b1ec:	d305      	bcc.n	801b1fa <__mcmp+0x32>
 801b1ee:	2201      	movs	r2, #1
 801b1f0:	4610      	mov	r0, r2
 801b1f2:	bd30      	pop	{r4, r5, pc}
 801b1f4:	4283      	cmp	r3, r0
 801b1f6:	d3f3      	bcc.n	801b1e0 <__mcmp+0x18>
 801b1f8:	e7fa      	b.n	801b1f0 <__mcmp+0x28>
 801b1fa:	f04f 32ff 	mov.w	r2, #4294967295
 801b1fe:	e7f7      	b.n	801b1f0 <__mcmp+0x28>

0801b200 <__mdiff>:
 801b200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b204:	460c      	mov	r4, r1
 801b206:	4606      	mov	r6, r0
 801b208:	4611      	mov	r1, r2
 801b20a:	4620      	mov	r0, r4
 801b20c:	4690      	mov	r8, r2
 801b20e:	f7ff ffdb 	bl	801b1c8 <__mcmp>
 801b212:	1e05      	subs	r5, r0, #0
 801b214:	d110      	bne.n	801b238 <__mdiff+0x38>
 801b216:	4629      	mov	r1, r5
 801b218:	4630      	mov	r0, r6
 801b21a:	f7ff fd59 	bl	801acd0 <_Balloc>
 801b21e:	b930      	cbnz	r0, 801b22e <__mdiff+0x2e>
 801b220:	4b3a      	ldr	r3, [pc, #232]	; (801b30c <__mdiff+0x10c>)
 801b222:	4602      	mov	r2, r0
 801b224:	f240 2137 	movw	r1, #567	; 0x237
 801b228:	4839      	ldr	r0, [pc, #228]	; (801b310 <__mdiff+0x110>)
 801b22a:	f7fe fe3f 	bl	8019eac <__assert_func>
 801b22e:	2301      	movs	r3, #1
 801b230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b234:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b238:	bfa4      	itt	ge
 801b23a:	4643      	movge	r3, r8
 801b23c:	46a0      	movge	r8, r4
 801b23e:	4630      	mov	r0, r6
 801b240:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b244:	bfa6      	itte	ge
 801b246:	461c      	movge	r4, r3
 801b248:	2500      	movge	r5, #0
 801b24a:	2501      	movlt	r5, #1
 801b24c:	f7ff fd40 	bl	801acd0 <_Balloc>
 801b250:	b920      	cbnz	r0, 801b25c <__mdiff+0x5c>
 801b252:	4b2e      	ldr	r3, [pc, #184]	; (801b30c <__mdiff+0x10c>)
 801b254:	4602      	mov	r2, r0
 801b256:	f240 2145 	movw	r1, #581	; 0x245
 801b25a:	e7e5      	b.n	801b228 <__mdiff+0x28>
 801b25c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b260:	6926      	ldr	r6, [r4, #16]
 801b262:	60c5      	str	r5, [r0, #12]
 801b264:	f104 0914 	add.w	r9, r4, #20
 801b268:	f108 0514 	add.w	r5, r8, #20
 801b26c:	f100 0e14 	add.w	lr, r0, #20
 801b270:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b274:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b278:	f108 0210 	add.w	r2, r8, #16
 801b27c:	46f2      	mov	sl, lr
 801b27e:	2100      	movs	r1, #0
 801b280:	f859 3b04 	ldr.w	r3, [r9], #4
 801b284:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b288:	fa11 f88b 	uxtah	r8, r1, fp
 801b28c:	b299      	uxth	r1, r3
 801b28e:	0c1b      	lsrs	r3, r3, #16
 801b290:	eba8 0801 	sub.w	r8, r8, r1
 801b294:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b298:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b29c:	fa1f f888 	uxth.w	r8, r8
 801b2a0:	1419      	asrs	r1, r3, #16
 801b2a2:	454e      	cmp	r6, r9
 801b2a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b2a8:	f84a 3b04 	str.w	r3, [sl], #4
 801b2ac:	d8e8      	bhi.n	801b280 <__mdiff+0x80>
 801b2ae:	1b33      	subs	r3, r6, r4
 801b2b0:	3b15      	subs	r3, #21
 801b2b2:	f023 0303 	bic.w	r3, r3, #3
 801b2b6:	3304      	adds	r3, #4
 801b2b8:	3415      	adds	r4, #21
 801b2ba:	42a6      	cmp	r6, r4
 801b2bc:	bf38      	it	cc
 801b2be:	2304      	movcc	r3, #4
 801b2c0:	441d      	add	r5, r3
 801b2c2:	4473      	add	r3, lr
 801b2c4:	469e      	mov	lr, r3
 801b2c6:	462e      	mov	r6, r5
 801b2c8:	4566      	cmp	r6, ip
 801b2ca:	d30e      	bcc.n	801b2ea <__mdiff+0xea>
 801b2cc:	f10c 0203 	add.w	r2, ip, #3
 801b2d0:	1b52      	subs	r2, r2, r5
 801b2d2:	f022 0203 	bic.w	r2, r2, #3
 801b2d6:	3d03      	subs	r5, #3
 801b2d8:	45ac      	cmp	ip, r5
 801b2da:	bf38      	it	cc
 801b2dc:	2200      	movcc	r2, #0
 801b2de:	4413      	add	r3, r2
 801b2e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b2e4:	b17a      	cbz	r2, 801b306 <__mdiff+0x106>
 801b2e6:	6107      	str	r7, [r0, #16]
 801b2e8:	e7a4      	b.n	801b234 <__mdiff+0x34>
 801b2ea:	f856 8b04 	ldr.w	r8, [r6], #4
 801b2ee:	fa11 f288 	uxtah	r2, r1, r8
 801b2f2:	1414      	asrs	r4, r2, #16
 801b2f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b2f8:	b292      	uxth	r2, r2
 801b2fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b2fe:	f84e 2b04 	str.w	r2, [lr], #4
 801b302:	1421      	asrs	r1, r4, #16
 801b304:	e7e0      	b.n	801b2c8 <__mdiff+0xc8>
 801b306:	3f01      	subs	r7, #1
 801b308:	e7ea      	b.n	801b2e0 <__mdiff+0xe0>
 801b30a:	bf00      	nop
 801b30c:	0801f16b 	.word	0x0801f16b
 801b310:	0801f17c 	.word	0x0801f17c

0801b314 <__d2b>:
 801b314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b318:	460f      	mov	r7, r1
 801b31a:	2101      	movs	r1, #1
 801b31c:	ec59 8b10 	vmov	r8, r9, d0
 801b320:	4616      	mov	r6, r2
 801b322:	f7ff fcd5 	bl	801acd0 <_Balloc>
 801b326:	4604      	mov	r4, r0
 801b328:	b930      	cbnz	r0, 801b338 <__d2b+0x24>
 801b32a:	4602      	mov	r2, r0
 801b32c:	4b24      	ldr	r3, [pc, #144]	; (801b3c0 <__d2b+0xac>)
 801b32e:	4825      	ldr	r0, [pc, #148]	; (801b3c4 <__d2b+0xb0>)
 801b330:	f240 310f 	movw	r1, #783	; 0x30f
 801b334:	f7fe fdba 	bl	8019eac <__assert_func>
 801b338:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b33c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b340:	bb2d      	cbnz	r5, 801b38e <__d2b+0x7a>
 801b342:	9301      	str	r3, [sp, #4]
 801b344:	f1b8 0300 	subs.w	r3, r8, #0
 801b348:	d026      	beq.n	801b398 <__d2b+0x84>
 801b34a:	4668      	mov	r0, sp
 801b34c:	9300      	str	r3, [sp, #0]
 801b34e:	f7ff fd87 	bl	801ae60 <__lo0bits>
 801b352:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b356:	b1e8      	cbz	r0, 801b394 <__d2b+0x80>
 801b358:	f1c0 0320 	rsb	r3, r0, #32
 801b35c:	fa02 f303 	lsl.w	r3, r2, r3
 801b360:	430b      	orrs	r3, r1
 801b362:	40c2      	lsrs	r2, r0
 801b364:	6163      	str	r3, [r4, #20]
 801b366:	9201      	str	r2, [sp, #4]
 801b368:	9b01      	ldr	r3, [sp, #4]
 801b36a:	61a3      	str	r3, [r4, #24]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	bf14      	ite	ne
 801b370:	2202      	movne	r2, #2
 801b372:	2201      	moveq	r2, #1
 801b374:	6122      	str	r2, [r4, #16]
 801b376:	b1bd      	cbz	r5, 801b3a8 <__d2b+0x94>
 801b378:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b37c:	4405      	add	r5, r0
 801b37e:	603d      	str	r5, [r7, #0]
 801b380:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b384:	6030      	str	r0, [r6, #0]
 801b386:	4620      	mov	r0, r4
 801b388:	b003      	add	sp, #12
 801b38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b38e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b392:	e7d6      	b.n	801b342 <__d2b+0x2e>
 801b394:	6161      	str	r1, [r4, #20]
 801b396:	e7e7      	b.n	801b368 <__d2b+0x54>
 801b398:	a801      	add	r0, sp, #4
 801b39a:	f7ff fd61 	bl	801ae60 <__lo0bits>
 801b39e:	9b01      	ldr	r3, [sp, #4]
 801b3a0:	6163      	str	r3, [r4, #20]
 801b3a2:	3020      	adds	r0, #32
 801b3a4:	2201      	movs	r2, #1
 801b3a6:	e7e5      	b.n	801b374 <__d2b+0x60>
 801b3a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b3ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b3b0:	6038      	str	r0, [r7, #0]
 801b3b2:	6918      	ldr	r0, [r3, #16]
 801b3b4:	f7ff fd34 	bl	801ae20 <__hi0bits>
 801b3b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b3bc:	e7e2      	b.n	801b384 <__d2b+0x70>
 801b3be:	bf00      	nop
 801b3c0:	0801f16b 	.word	0x0801f16b
 801b3c4:	0801f17c 	.word	0x0801f17c

0801b3c8 <__sfputc_r>:
 801b3c8:	6893      	ldr	r3, [r2, #8]
 801b3ca:	3b01      	subs	r3, #1
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	b410      	push	{r4}
 801b3d0:	6093      	str	r3, [r2, #8]
 801b3d2:	da08      	bge.n	801b3e6 <__sfputc_r+0x1e>
 801b3d4:	6994      	ldr	r4, [r2, #24]
 801b3d6:	42a3      	cmp	r3, r4
 801b3d8:	db01      	blt.n	801b3de <__sfputc_r+0x16>
 801b3da:	290a      	cmp	r1, #10
 801b3dc:	d103      	bne.n	801b3e6 <__sfputc_r+0x1e>
 801b3de:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3e2:	f7fe bc36 	b.w	8019c52 <__swbuf_r>
 801b3e6:	6813      	ldr	r3, [r2, #0]
 801b3e8:	1c58      	adds	r0, r3, #1
 801b3ea:	6010      	str	r0, [r2, #0]
 801b3ec:	7019      	strb	r1, [r3, #0]
 801b3ee:	4608      	mov	r0, r1
 801b3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3f4:	4770      	bx	lr

0801b3f6 <__sfputs_r>:
 801b3f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3f8:	4606      	mov	r6, r0
 801b3fa:	460f      	mov	r7, r1
 801b3fc:	4614      	mov	r4, r2
 801b3fe:	18d5      	adds	r5, r2, r3
 801b400:	42ac      	cmp	r4, r5
 801b402:	d101      	bne.n	801b408 <__sfputs_r+0x12>
 801b404:	2000      	movs	r0, #0
 801b406:	e007      	b.n	801b418 <__sfputs_r+0x22>
 801b408:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b40c:	463a      	mov	r2, r7
 801b40e:	4630      	mov	r0, r6
 801b410:	f7ff ffda 	bl	801b3c8 <__sfputc_r>
 801b414:	1c43      	adds	r3, r0, #1
 801b416:	d1f3      	bne.n	801b400 <__sfputs_r+0xa>
 801b418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b41c <_vfiprintf_r>:
 801b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b420:	460d      	mov	r5, r1
 801b422:	b09d      	sub	sp, #116	; 0x74
 801b424:	4614      	mov	r4, r2
 801b426:	4698      	mov	r8, r3
 801b428:	4606      	mov	r6, r0
 801b42a:	b118      	cbz	r0, 801b434 <_vfiprintf_r+0x18>
 801b42c:	6a03      	ldr	r3, [r0, #32]
 801b42e:	b90b      	cbnz	r3, 801b434 <_vfiprintf_r+0x18>
 801b430:	f7fe fb28 	bl	8019a84 <__sinit>
 801b434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b436:	07d9      	lsls	r1, r3, #31
 801b438:	d405      	bmi.n	801b446 <_vfiprintf_r+0x2a>
 801b43a:	89ab      	ldrh	r3, [r5, #12]
 801b43c:	059a      	lsls	r2, r3, #22
 801b43e:	d402      	bmi.n	801b446 <_vfiprintf_r+0x2a>
 801b440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b442:	f7fe fd22 	bl	8019e8a <__retarget_lock_acquire_recursive>
 801b446:	89ab      	ldrh	r3, [r5, #12]
 801b448:	071b      	lsls	r3, r3, #28
 801b44a:	d501      	bpl.n	801b450 <_vfiprintf_r+0x34>
 801b44c:	692b      	ldr	r3, [r5, #16]
 801b44e:	b99b      	cbnz	r3, 801b478 <_vfiprintf_r+0x5c>
 801b450:	4629      	mov	r1, r5
 801b452:	4630      	mov	r0, r6
 801b454:	f7fe fc3a 	bl	8019ccc <__swsetup_r>
 801b458:	b170      	cbz	r0, 801b478 <_vfiprintf_r+0x5c>
 801b45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b45c:	07dc      	lsls	r4, r3, #31
 801b45e:	d504      	bpl.n	801b46a <_vfiprintf_r+0x4e>
 801b460:	f04f 30ff 	mov.w	r0, #4294967295
 801b464:	b01d      	add	sp, #116	; 0x74
 801b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b46a:	89ab      	ldrh	r3, [r5, #12]
 801b46c:	0598      	lsls	r0, r3, #22
 801b46e:	d4f7      	bmi.n	801b460 <_vfiprintf_r+0x44>
 801b470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b472:	f7fe fd0b 	bl	8019e8c <__retarget_lock_release_recursive>
 801b476:	e7f3      	b.n	801b460 <_vfiprintf_r+0x44>
 801b478:	2300      	movs	r3, #0
 801b47a:	9309      	str	r3, [sp, #36]	; 0x24
 801b47c:	2320      	movs	r3, #32
 801b47e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b482:	f8cd 800c 	str.w	r8, [sp, #12]
 801b486:	2330      	movs	r3, #48	; 0x30
 801b488:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b63c <_vfiprintf_r+0x220>
 801b48c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b490:	f04f 0901 	mov.w	r9, #1
 801b494:	4623      	mov	r3, r4
 801b496:	469a      	mov	sl, r3
 801b498:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b49c:	b10a      	cbz	r2, 801b4a2 <_vfiprintf_r+0x86>
 801b49e:	2a25      	cmp	r2, #37	; 0x25
 801b4a0:	d1f9      	bne.n	801b496 <_vfiprintf_r+0x7a>
 801b4a2:	ebba 0b04 	subs.w	fp, sl, r4
 801b4a6:	d00b      	beq.n	801b4c0 <_vfiprintf_r+0xa4>
 801b4a8:	465b      	mov	r3, fp
 801b4aa:	4622      	mov	r2, r4
 801b4ac:	4629      	mov	r1, r5
 801b4ae:	4630      	mov	r0, r6
 801b4b0:	f7ff ffa1 	bl	801b3f6 <__sfputs_r>
 801b4b4:	3001      	adds	r0, #1
 801b4b6:	f000 80a9 	beq.w	801b60c <_vfiprintf_r+0x1f0>
 801b4ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4bc:	445a      	add	r2, fp
 801b4be:	9209      	str	r2, [sp, #36]	; 0x24
 801b4c0:	f89a 3000 	ldrb.w	r3, [sl]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	f000 80a1 	beq.w	801b60c <_vfiprintf_r+0x1f0>
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	f04f 32ff 	mov.w	r2, #4294967295
 801b4d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b4d4:	f10a 0a01 	add.w	sl, sl, #1
 801b4d8:	9304      	str	r3, [sp, #16]
 801b4da:	9307      	str	r3, [sp, #28]
 801b4dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b4e0:	931a      	str	r3, [sp, #104]	; 0x68
 801b4e2:	4654      	mov	r4, sl
 801b4e4:	2205      	movs	r2, #5
 801b4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4ea:	4854      	ldr	r0, [pc, #336]	; (801b63c <_vfiprintf_r+0x220>)
 801b4ec:	f7e6 fbd8 	bl	8001ca0 <memchr>
 801b4f0:	9a04      	ldr	r2, [sp, #16]
 801b4f2:	b9d8      	cbnz	r0, 801b52c <_vfiprintf_r+0x110>
 801b4f4:	06d1      	lsls	r1, r2, #27
 801b4f6:	bf44      	itt	mi
 801b4f8:	2320      	movmi	r3, #32
 801b4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b4fe:	0713      	lsls	r3, r2, #28
 801b500:	bf44      	itt	mi
 801b502:	232b      	movmi	r3, #43	; 0x2b
 801b504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b508:	f89a 3000 	ldrb.w	r3, [sl]
 801b50c:	2b2a      	cmp	r3, #42	; 0x2a
 801b50e:	d015      	beq.n	801b53c <_vfiprintf_r+0x120>
 801b510:	9a07      	ldr	r2, [sp, #28]
 801b512:	4654      	mov	r4, sl
 801b514:	2000      	movs	r0, #0
 801b516:	f04f 0c0a 	mov.w	ip, #10
 801b51a:	4621      	mov	r1, r4
 801b51c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b520:	3b30      	subs	r3, #48	; 0x30
 801b522:	2b09      	cmp	r3, #9
 801b524:	d94d      	bls.n	801b5c2 <_vfiprintf_r+0x1a6>
 801b526:	b1b0      	cbz	r0, 801b556 <_vfiprintf_r+0x13a>
 801b528:	9207      	str	r2, [sp, #28]
 801b52a:	e014      	b.n	801b556 <_vfiprintf_r+0x13a>
 801b52c:	eba0 0308 	sub.w	r3, r0, r8
 801b530:	fa09 f303 	lsl.w	r3, r9, r3
 801b534:	4313      	orrs	r3, r2
 801b536:	9304      	str	r3, [sp, #16]
 801b538:	46a2      	mov	sl, r4
 801b53a:	e7d2      	b.n	801b4e2 <_vfiprintf_r+0xc6>
 801b53c:	9b03      	ldr	r3, [sp, #12]
 801b53e:	1d19      	adds	r1, r3, #4
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	9103      	str	r1, [sp, #12]
 801b544:	2b00      	cmp	r3, #0
 801b546:	bfbb      	ittet	lt
 801b548:	425b      	neglt	r3, r3
 801b54a:	f042 0202 	orrlt.w	r2, r2, #2
 801b54e:	9307      	strge	r3, [sp, #28]
 801b550:	9307      	strlt	r3, [sp, #28]
 801b552:	bfb8      	it	lt
 801b554:	9204      	strlt	r2, [sp, #16]
 801b556:	7823      	ldrb	r3, [r4, #0]
 801b558:	2b2e      	cmp	r3, #46	; 0x2e
 801b55a:	d10c      	bne.n	801b576 <_vfiprintf_r+0x15a>
 801b55c:	7863      	ldrb	r3, [r4, #1]
 801b55e:	2b2a      	cmp	r3, #42	; 0x2a
 801b560:	d134      	bne.n	801b5cc <_vfiprintf_r+0x1b0>
 801b562:	9b03      	ldr	r3, [sp, #12]
 801b564:	1d1a      	adds	r2, r3, #4
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	9203      	str	r2, [sp, #12]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	bfb8      	it	lt
 801b56e:	f04f 33ff 	movlt.w	r3, #4294967295
 801b572:	3402      	adds	r4, #2
 801b574:	9305      	str	r3, [sp, #20]
 801b576:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b64c <_vfiprintf_r+0x230>
 801b57a:	7821      	ldrb	r1, [r4, #0]
 801b57c:	2203      	movs	r2, #3
 801b57e:	4650      	mov	r0, sl
 801b580:	f7e6 fb8e 	bl	8001ca0 <memchr>
 801b584:	b138      	cbz	r0, 801b596 <_vfiprintf_r+0x17a>
 801b586:	9b04      	ldr	r3, [sp, #16]
 801b588:	eba0 000a 	sub.w	r0, r0, sl
 801b58c:	2240      	movs	r2, #64	; 0x40
 801b58e:	4082      	lsls	r2, r0
 801b590:	4313      	orrs	r3, r2
 801b592:	3401      	adds	r4, #1
 801b594:	9304      	str	r3, [sp, #16]
 801b596:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b59a:	4829      	ldr	r0, [pc, #164]	; (801b640 <_vfiprintf_r+0x224>)
 801b59c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b5a0:	2206      	movs	r2, #6
 801b5a2:	f7e6 fb7d 	bl	8001ca0 <memchr>
 801b5a6:	2800      	cmp	r0, #0
 801b5a8:	d03f      	beq.n	801b62a <_vfiprintf_r+0x20e>
 801b5aa:	4b26      	ldr	r3, [pc, #152]	; (801b644 <_vfiprintf_r+0x228>)
 801b5ac:	bb1b      	cbnz	r3, 801b5f6 <_vfiprintf_r+0x1da>
 801b5ae:	9b03      	ldr	r3, [sp, #12]
 801b5b0:	3307      	adds	r3, #7
 801b5b2:	f023 0307 	bic.w	r3, r3, #7
 801b5b6:	3308      	adds	r3, #8
 801b5b8:	9303      	str	r3, [sp, #12]
 801b5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5bc:	443b      	add	r3, r7
 801b5be:	9309      	str	r3, [sp, #36]	; 0x24
 801b5c0:	e768      	b.n	801b494 <_vfiprintf_r+0x78>
 801b5c2:	fb0c 3202 	mla	r2, ip, r2, r3
 801b5c6:	460c      	mov	r4, r1
 801b5c8:	2001      	movs	r0, #1
 801b5ca:	e7a6      	b.n	801b51a <_vfiprintf_r+0xfe>
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	3401      	adds	r4, #1
 801b5d0:	9305      	str	r3, [sp, #20]
 801b5d2:	4619      	mov	r1, r3
 801b5d4:	f04f 0c0a 	mov.w	ip, #10
 801b5d8:	4620      	mov	r0, r4
 801b5da:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b5de:	3a30      	subs	r2, #48	; 0x30
 801b5e0:	2a09      	cmp	r2, #9
 801b5e2:	d903      	bls.n	801b5ec <_vfiprintf_r+0x1d0>
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d0c6      	beq.n	801b576 <_vfiprintf_r+0x15a>
 801b5e8:	9105      	str	r1, [sp, #20]
 801b5ea:	e7c4      	b.n	801b576 <_vfiprintf_r+0x15a>
 801b5ec:	fb0c 2101 	mla	r1, ip, r1, r2
 801b5f0:	4604      	mov	r4, r0
 801b5f2:	2301      	movs	r3, #1
 801b5f4:	e7f0      	b.n	801b5d8 <_vfiprintf_r+0x1bc>
 801b5f6:	ab03      	add	r3, sp, #12
 801b5f8:	9300      	str	r3, [sp, #0]
 801b5fa:	462a      	mov	r2, r5
 801b5fc:	4b12      	ldr	r3, [pc, #72]	; (801b648 <_vfiprintf_r+0x22c>)
 801b5fe:	a904      	add	r1, sp, #16
 801b600:	4630      	mov	r0, r6
 801b602:	f7fd fe09 	bl	8019218 <_printf_float>
 801b606:	4607      	mov	r7, r0
 801b608:	1c78      	adds	r0, r7, #1
 801b60a:	d1d6      	bne.n	801b5ba <_vfiprintf_r+0x19e>
 801b60c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b60e:	07d9      	lsls	r1, r3, #31
 801b610:	d405      	bmi.n	801b61e <_vfiprintf_r+0x202>
 801b612:	89ab      	ldrh	r3, [r5, #12]
 801b614:	059a      	lsls	r2, r3, #22
 801b616:	d402      	bmi.n	801b61e <_vfiprintf_r+0x202>
 801b618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b61a:	f7fe fc37 	bl	8019e8c <__retarget_lock_release_recursive>
 801b61e:	89ab      	ldrh	r3, [r5, #12]
 801b620:	065b      	lsls	r3, r3, #25
 801b622:	f53f af1d 	bmi.w	801b460 <_vfiprintf_r+0x44>
 801b626:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b628:	e71c      	b.n	801b464 <_vfiprintf_r+0x48>
 801b62a:	ab03      	add	r3, sp, #12
 801b62c:	9300      	str	r3, [sp, #0]
 801b62e:	462a      	mov	r2, r5
 801b630:	4b05      	ldr	r3, [pc, #20]	; (801b648 <_vfiprintf_r+0x22c>)
 801b632:	a904      	add	r1, sp, #16
 801b634:	4630      	mov	r0, r6
 801b636:	f7fe f877 	bl	8019728 <_printf_i>
 801b63a:	e7e4      	b.n	801b606 <_vfiprintf_r+0x1ea>
 801b63c:	0801f2d4 	.word	0x0801f2d4
 801b640:	0801f2de 	.word	0x0801f2de
 801b644:	08019219 	.word	0x08019219
 801b648:	0801b3f7 	.word	0x0801b3f7
 801b64c:	0801f2da 	.word	0x0801f2da

0801b650 <__sflush_r>:
 801b650:	898a      	ldrh	r2, [r1, #12]
 801b652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b656:	4605      	mov	r5, r0
 801b658:	0710      	lsls	r0, r2, #28
 801b65a:	460c      	mov	r4, r1
 801b65c:	d458      	bmi.n	801b710 <__sflush_r+0xc0>
 801b65e:	684b      	ldr	r3, [r1, #4]
 801b660:	2b00      	cmp	r3, #0
 801b662:	dc05      	bgt.n	801b670 <__sflush_r+0x20>
 801b664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b666:	2b00      	cmp	r3, #0
 801b668:	dc02      	bgt.n	801b670 <__sflush_r+0x20>
 801b66a:	2000      	movs	r0, #0
 801b66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b672:	2e00      	cmp	r6, #0
 801b674:	d0f9      	beq.n	801b66a <__sflush_r+0x1a>
 801b676:	2300      	movs	r3, #0
 801b678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b67c:	682f      	ldr	r7, [r5, #0]
 801b67e:	6a21      	ldr	r1, [r4, #32]
 801b680:	602b      	str	r3, [r5, #0]
 801b682:	d032      	beq.n	801b6ea <__sflush_r+0x9a>
 801b684:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b686:	89a3      	ldrh	r3, [r4, #12]
 801b688:	075a      	lsls	r2, r3, #29
 801b68a:	d505      	bpl.n	801b698 <__sflush_r+0x48>
 801b68c:	6863      	ldr	r3, [r4, #4]
 801b68e:	1ac0      	subs	r0, r0, r3
 801b690:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b692:	b10b      	cbz	r3, 801b698 <__sflush_r+0x48>
 801b694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b696:	1ac0      	subs	r0, r0, r3
 801b698:	2300      	movs	r3, #0
 801b69a:	4602      	mov	r2, r0
 801b69c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b69e:	6a21      	ldr	r1, [r4, #32]
 801b6a0:	4628      	mov	r0, r5
 801b6a2:	47b0      	blx	r6
 801b6a4:	1c43      	adds	r3, r0, #1
 801b6a6:	89a3      	ldrh	r3, [r4, #12]
 801b6a8:	d106      	bne.n	801b6b8 <__sflush_r+0x68>
 801b6aa:	6829      	ldr	r1, [r5, #0]
 801b6ac:	291d      	cmp	r1, #29
 801b6ae:	d82b      	bhi.n	801b708 <__sflush_r+0xb8>
 801b6b0:	4a29      	ldr	r2, [pc, #164]	; (801b758 <__sflush_r+0x108>)
 801b6b2:	410a      	asrs	r2, r1
 801b6b4:	07d6      	lsls	r6, r2, #31
 801b6b6:	d427      	bmi.n	801b708 <__sflush_r+0xb8>
 801b6b8:	2200      	movs	r2, #0
 801b6ba:	6062      	str	r2, [r4, #4]
 801b6bc:	04d9      	lsls	r1, r3, #19
 801b6be:	6922      	ldr	r2, [r4, #16]
 801b6c0:	6022      	str	r2, [r4, #0]
 801b6c2:	d504      	bpl.n	801b6ce <__sflush_r+0x7e>
 801b6c4:	1c42      	adds	r2, r0, #1
 801b6c6:	d101      	bne.n	801b6cc <__sflush_r+0x7c>
 801b6c8:	682b      	ldr	r3, [r5, #0]
 801b6ca:	b903      	cbnz	r3, 801b6ce <__sflush_r+0x7e>
 801b6cc:	6560      	str	r0, [r4, #84]	; 0x54
 801b6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b6d0:	602f      	str	r7, [r5, #0]
 801b6d2:	2900      	cmp	r1, #0
 801b6d4:	d0c9      	beq.n	801b66a <__sflush_r+0x1a>
 801b6d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b6da:	4299      	cmp	r1, r3
 801b6dc:	d002      	beq.n	801b6e4 <__sflush_r+0x94>
 801b6de:	4628      	mov	r0, r5
 801b6e0:	f7ff f9f6 	bl	801aad0 <_free_r>
 801b6e4:	2000      	movs	r0, #0
 801b6e6:	6360      	str	r0, [r4, #52]	; 0x34
 801b6e8:	e7c0      	b.n	801b66c <__sflush_r+0x1c>
 801b6ea:	2301      	movs	r3, #1
 801b6ec:	4628      	mov	r0, r5
 801b6ee:	47b0      	blx	r6
 801b6f0:	1c41      	adds	r1, r0, #1
 801b6f2:	d1c8      	bne.n	801b686 <__sflush_r+0x36>
 801b6f4:	682b      	ldr	r3, [r5, #0]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d0c5      	beq.n	801b686 <__sflush_r+0x36>
 801b6fa:	2b1d      	cmp	r3, #29
 801b6fc:	d001      	beq.n	801b702 <__sflush_r+0xb2>
 801b6fe:	2b16      	cmp	r3, #22
 801b700:	d101      	bne.n	801b706 <__sflush_r+0xb6>
 801b702:	602f      	str	r7, [r5, #0]
 801b704:	e7b1      	b.n	801b66a <__sflush_r+0x1a>
 801b706:	89a3      	ldrh	r3, [r4, #12]
 801b708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b70c:	81a3      	strh	r3, [r4, #12]
 801b70e:	e7ad      	b.n	801b66c <__sflush_r+0x1c>
 801b710:	690f      	ldr	r7, [r1, #16]
 801b712:	2f00      	cmp	r7, #0
 801b714:	d0a9      	beq.n	801b66a <__sflush_r+0x1a>
 801b716:	0793      	lsls	r3, r2, #30
 801b718:	680e      	ldr	r6, [r1, #0]
 801b71a:	bf08      	it	eq
 801b71c:	694b      	ldreq	r3, [r1, #20]
 801b71e:	600f      	str	r7, [r1, #0]
 801b720:	bf18      	it	ne
 801b722:	2300      	movne	r3, #0
 801b724:	eba6 0807 	sub.w	r8, r6, r7
 801b728:	608b      	str	r3, [r1, #8]
 801b72a:	f1b8 0f00 	cmp.w	r8, #0
 801b72e:	dd9c      	ble.n	801b66a <__sflush_r+0x1a>
 801b730:	6a21      	ldr	r1, [r4, #32]
 801b732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b734:	4643      	mov	r3, r8
 801b736:	463a      	mov	r2, r7
 801b738:	4628      	mov	r0, r5
 801b73a:	47b0      	blx	r6
 801b73c:	2800      	cmp	r0, #0
 801b73e:	dc06      	bgt.n	801b74e <__sflush_r+0xfe>
 801b740:	89a3      	ldrh	r3, [r4, #12]
 801b742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b746:	81a3      	strh	r3, [r4, #12]
 801b748:	f04f 30ff 	mov.w	r0, #4294967295
 801b74c:	e78e      	b.n	801b66c <__sflush_r+0x1c>
 801b74e:	4407      	add	r7, r0
 801b750:	eba8 0800 	sub.w	r8, r8, r0
 801b754:	e7e9      	b.n	801b72a <__sflush_r+0xda>
 801b756:	bf00      	nop
 801b758:	dfbffffe 	.word	0xdfbffffe

0801b75c <_fflush_r>:
 801b75c:	b538      	push	{r3, r4, r5, lr}
 801b75e:	690b      	ldr	r3, [r1, #16]
 801b760:	4605      	mov	r5, r0
 801b762:	460c      	mov	r4, r1
 801b764:	b913      	cbnz	r3, 801b76c <_fflush_r+0x10>
 801b766:	2500      	movs	r5, #0
 801b768:	4628      	mov	r0, r5
 801b76a:	bd38      	pop	{r3, r4, r5, pc}
 801b76c:	b118      	cbz	r0, 801b776 <_fflush_r+0x1a>
 801b76e:	6a03      	ldr	r3, [r0, #32]
 801b770:	b90b      	cbnz	r3, 801b776 <_fflush_r+0x1a>
 801b772:	f7fe f987 	bl	8019a84 <__sinit>
 801b776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d0f3      	beq.n	801b766 <_fflush_r+0xa>
 801b77e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b780:	07d0      	lsls	r0, r2, #31
 801b782:	d404      	bmi.n	801b78e <_fflush_r+0x32>
 801b784:	0599      	lsls	r1, r3, #22
 801b786:	d402      	bmi.n	801b78e <_fflush_r+0x32>
 801b788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b78a:	f7fe fb7e 	bl	8019e8a <__retarget_lock_acquire_recursive>
 801b78e:	4628      	mov	r0, r5
 801b790:	4621      	mov	r1, r4
 801b792:	f7ff ff5d 	bl	801b650 <__sflush_r>
 801b796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b798:	07da      	lsls	r2, r3, #31
 801b79a:	4605      	mov	r5, r0
 801b79c:	d4e4      	bmi.n	801b768 <_fflush_r+0xc>
 801b79e:	89a3      	ldrh	r3, [r4, #12]
 801b7a0:	059b      	lsls	r3, r3, #22
 801b7a2:	d4e1      	bmi.n	801b768 <_fflush_r+0xc>
 801b7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b7a6:	f7fe fb71 	bl	8019e8c <__retarget_lock_release_recursive>
 801b7aa:	e7dd      	b.n	801b768 <_fflush_r+0xc>

0801b7ac <fiprintf>:
 801b7ac:	b40e      	push	{r1, r2, r3}
 801b7ae:	b503      	push	{r0, r1, lr}
 801b7b0:	4601      	mov	r1, r0
 801b7b2:	ab03      	add	r3, sp, #12
 801b7b4:	4805      	ldr	r0, [pc, #20]	; (801b7cc <fiprintf+0x20>)
 801b7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b7ba:	6800      	ldr	r0, [r0, #0]
 801b7bc:	9301      	str	r3, [sp, #4]
 801b7be:	f7ff fe2d 	bl	801b41c <_vfiprintf_r>
 801b7c2:	b002      	add	sp, #8
 801b7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b7c8:	b003      	add	sp, #12
 801b7ca:	4770      	bx	lr
 801b7cc:	200000bc 	.word	0x200000bc

0801b7d0 <__swhatbuf_r>:
 801b7d0:	b570      	push	{r4, r5, r6, lr}
 801b7d2:	460c      	mov	r4, r1
 801b7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7d8:	2900      	cmp	r1, #0
 801b7da:	b096      	sub	sp, #88	; 0x58
 801b7dc:	4615      	mov	r5, r2
 801b7de:	461e      	mov	r6, r3
 801b7e0:	da0d      	bge.n	801b7fe <__swhatbuf_r+0x2e>
 801b7e2:	89a3      	ldrh	r3, [r4, #12]
 801b7e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b7e8:	f04f 0100 	mov.w	r1, #0
 801b7ec:	bf0c      	ite	eq
 801b7ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b7f2:	2340      	movne	r3, #64	; 0x40
 801b7f4:	2000      	movs	r0, #0
 801b7f6:	6031      	str	r1, [r6, #0]
 801b7f8:	602b      	str	r3, [r5, #0]
 801b7fa:	b016      	add	sp, #88	; 0x58
 801b7fc:	bd70      	pop	{r4, r5, r6, pc}
 801b7fe:	466a      	mov	r2, sp
 801b800:	f000 f848 	bl	801b894 <_fstat_r>
 801b804:	2800      	cmp	r0, #0
 801b806:	dbec      	blt.n	801b7e2 <__swhatbuf_r+0x12>
 801b808:	9901      	ldr	r1, [sp, #4]
 801b80a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b80e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b812:	4259      	negs	r1, r3
 801b814:	4159      	adcs	r1, r3
 801b816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b81a:	e7eb      	b.n	801b7f4 <__swhatbuf_r+0x24>

0801b81c <__smakebuf_r>:
 801b81c:	898b      	ldrh	r3, [r1, #12]
 801b81e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b820:	079d      	lsls	r5, r3, #30
 801b822:	4606      	mov	r6, r0
 801b824:	460c      	mov	r4, r1
 801b826:	d507      	bpl.n	801b838 <__smakebuf_r+0x1c>
 801b828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b82c:	6023      	str	r3, [r4, #0]
 801b82e:	6123      	str	r3, [r4, #16]
 801b830:	2301      	movs	r3, #1
 801b832:	6163      	str	r3, [r4, #20]
 801b834:	b002      	add	sp, #8
 801b836:	bd70      	pop	{r4, r5, r6, pc}
 801b838:	ab01      	add	r3, sp, #4
 801b83a:	466a      	mov	r2, sp
 801b83c:	f7ff ffc8 	bl	801b7d0 <__swhatbuf_r>
 801b840:	9900      	ldr	r1, [sp, #0]
 801b842:	4605      	mov	r5, r0
 801b844:	4630      	mov	r0, r6
 801b846:	f7ff f9b7 	bl	801abb8 <_malloc_r>
 801b84a:	b948      	cbnz	r0, 801b860 <__smakebuf_r+0x44>
 801b84c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b850:	059a      	lsls	r2, r3, #22
 801b852:	d4ef      	bmi.n	801b834 <__smakebuf_r+0x18>
 801b854:	f023 0303 	bic.w	r3, r3, #3
 801b858:	f043 0302 	orr.w	r3, r3, #2
 801b85c:	81a3      	strh	r3, [r4, #12]
 801b85e:	e7e3      	b.n	801b828 <__smakebuf_r+0xc>
 801b860:	89a3      	ldrh	r3, [r4, #12]
 801b862:	6020      	str	r0, [r4, #0]
 801b864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b868:	81a3      	strh	r3, [r4, #12]
 801b86a:	9b00      	ldr	r3, [sp, #0]
 801b86c:	6163      	str	r3, [r4, #20]
 801b86e:	9b01      	ldr	r3, [sp, #4]
 801b870:	6120      	str	r0, [r4, #16]
 801b872:	b15b      	cbz	r3, 801b88c <__smakebuf_r+0x70>
 801b874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b878:	4630      	mov	r0, r6
 801b87a:	f000 f81d 	bl	801b8b8 <_isatty_r>
 801b87e:	b128      	cbz	r0, 801b88c <__smakebuf_r+0x70>
 801b880:	89a3      	ldrh	r3, [r4, #12]
 801b882:	f023 0303 	bic.w	r3, r3, #3
 801b886:	f043 0301 	orr.w	r3, r3, #1
 801b88a:	81a3      	strh	r3, [r4, #12]
 801b88c:	89a3      	ldrh	r3, [r4, #12]
 801b88e:	431d      	orrs	r5, r3
 801b890:	81a5      	strh	r5, [r4, #12]
 801b892:	e7cf      	b.n	801b834 <__smakebuf_r+0x18>

0801b894 <_fstat_r>:
 801b894:	b538      	push	{r3, r4, r5, lr}
 801b896:	4d07      	ldr	r5, [pc, #28]	; (801b8b4 <_fstat_r+0x20>)
 801b898:	2300      	movs	r3, #0
 801b89a:	4604      	mov	r4, r0
 801b89c:	4608      	mov	r0, r1
 801b89e:	4611      	mov	r1, r2
 801b8a0:	602b      	str	r3, [r5, #0]
 801b8a2:	f7e7 ffe4 	bl	800386e <_fstat>
 801b8a6:	1c43      	adds	r3, r0, #1
 801b8a8:	d102      	bne.n	801b8b0 <_fstat_r+0x1c>
 801b8aa:	682b      	ldr	r3, [r5, #0]
 801b8ac:	b103      	cbz	r3, 801b8b0 <_fstat_r+0x1c>
 801b8ae:	6023      	str	r3, [r4, #0]
 801b8b0:	bd38      	pop	{r3, r4, r5, pc}
 801b8b2:	bf00      	nop
 801b8b4:	20007368 	.word	0x20007368

0801b8b8 <_isatty_r>:
 801b8b8:	b538      	push	{r3, r4, r5, lr}
 801b8ba:	4d06      	ldr	r5, [pc, #24]	; (801b8d4 <_isatty_r+0x1c>)
 801b8bc:	2300      	movs	r3, #0
 801b8be:	4604      	mov	r4, r0
 801b8c0:	4608      	mov	r0, r1
 801b8c2:	602b      	str	r3, [r5, #0]
 801b8c4:	f7e7 ffe3 	bl	800388e <_isatty>
 801b8c8:	1c43      	adds	r3, r0, #1
 801b8ca:	d102      	bne.n	801b8d2 <_isatty_r+0x1a>
 801b8cc:	682b      	ldr	r3, [r5, #0]
 801b8ce:	b103      	cbz	r3, 801b8d2 <_isatty_r+0x1a>
 801b8d0:	6023      	str	r3, [r4, #0]
 801b8d2:	bd38      	pop	{r3, r4, r5, pc}
 801b8d4:	20007368 	.word	0x20007368

0801b8d8 <_sbrk_r>:
 801b8d8:	b538      	push	{r3, r4, r5, lr}
 801b8da:	4d06      	ldr	r5, [pc, #24]	; (801b8f4 <_sbrk_r+0x1c>)
 801b8dc:	2300      	movs	r3, #0
 801b8de:	4604      	mov	r4, r0
 801b8e0:	4608      	mov	r0, r1
 801b8e2:	602b      	str	r3, [r5, #0]
 801b8e4:	f7e7 ffec 	bl	80038c0 <_sbrk>
 801b8e8:	1c43      	adds	r3, r0, #1
 801b8ea:	d102      	bne.n	801b8f2 <_sbrk_r+0x1a>
 801b8ec:	682b      	ldr	r3, [r5, #0]
 801b8ee:	b103      	cbz	r3, 801b8f2 <_sbrk_r+0x1a>
 801b8f0:	6023      	str	r3, [r4, #0]
 801b8f2:	bd38      	pop	{r3, r4, r5, pc}
 801b8f4:	20007368 	.word	0x20007368

0801b8f8 <abort>:
 801b8f8:	b508      	push	{r3, lr}
 801b8fa:	2006      	movs	r0, #6
 801b8fc:	f000 f860 	bl	801b9c0 <raise>
 801b900:	2001      	movs	r0, #1
 801b902:	f7e7 ff65 	bl	80037d0 <_exit>

0801b906 <_calloc_r>:
 801b906:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b908:	fba1 2402 	umull	r2, r4, r1, r2
 801b90c:	b94c      	cbnz	r4, 801b922 <_calloc_r+0x1c>
 801b90e:	4611      	mov	r1, r2
 801b910:	9201      	str	r2, [sp, #4]
 801b912:	f7ff f951 	bl	801abb8 <_malloc_r>
 801b916:	9a01      	ldr	r2, [sp, #4]
 801b918:	4605      	mov	r5, r0
 801b91a:	b930      	cbnz	r0, 801b92a <_calloc_r+0x24>
 801b91c:	4628      	mov	r0, r5
 801b91e:	b003      	add	sp, #12
 801b920:	bd30      	pop	{r4, r5, pc}
 801b922:	220c      	movs	r2, #12
 801b924:	6002      	str	r2, [r0, #0]
 801b926:	2500      	movs	r5, #0
 801b928:	e7f8      	b.n	801b91c <_calloc_r+0x16>
 801b92a:	4621      	mov	r1, r4
 801b92c:	f7fe fa36 	bl	8019d9c <memset>
 801b930:	e7f4      	b.n	801b91c <_calloc_r+0x16>

0801b932 <__ascii_mbtowc>:
 801b932:	b082      	sub	sp, #8
 801b934:	b901      	cbnz	r1, 801b938 <__ascii_mbtowc+0x6>
 801b936:	a901      	add	r1, sp, #4
 801b938:	b142      	cbz	r2, 801b94c <__ascii_mbtowc+0x1a>
 801b93a:	b14b      	cbz	r3, 801b950 <__ascii_mbtowc+0x1e>
 801b93c:	7813      	ldrb	r3, [r2, #0]
 801b93e:	600b      	str	r3, [r1, #0]
 801b940:	7812      	ldrb	r2, [r2, #0]
 801b942:	1e10      	subs	r0, r2, #0
 801b944:	bf18      	it	ne
 801b946:	2001      	movne	r0, #1
 801b948:	b002      	add	sp, #8
 801b94a:	4770      	bx	lr
 801b94c:	4610      	mov	r0, r2
 801b94e:	e7fb      	b.n	801b948 <__ascii_mbtowc+0x16>
 801b950:	f06f 0001 	mvn.w	r0, #1
 801b954:	e7f8      	b.n	801b948 <__ascii_mbtowc+0x16>

0801b956 <__ascii_wctomb>:
 801b956:	b149      	cbz	r1, 801b96c <__ascii_wctomb+0x16>
 801b958:	2aff      	cmp	r2, #255	; 0xff
 801b95a:	bf85      	ittet	hi
 801b95c:	238a      	movhi	r3, #138	; 0x8a
 801b95e:	6003      	strhi	r3, [r0, #0]
 801b960:	700a      	strbls	r2, [r1, #0]
 801b962:	f04f 30ff 	movhi.w	r0, #4294967295
 801b966:	bf98      	it	ls
 801b968:	2001      	movls	r0, #1
 801b96a:	4770      	bx	lr
 801b96c:	4608      	mov	r0, r1
 801b96e:	4770      	bx	lr

0801b970 <_raise_r>:
 801b970:	291f      	cmp	r1, #31
 801b972:	b538      	push	{r3, r4, r5, lr}
 801b974:	4604      	mov	r4, r0
 801b976:	460d      	mov	r5, r1
 801b978:	d904      	bls.n	801b984 <_raise_r+0x14>
 801b97a:	2316      	movs	r3, #22
 801b97c:	6003      	str	r3, [r0, #0]
 801b97e:	f04f 30ff 	mov.w	r0, #4294967295
 801b982:	bd38      	pop	{r3, r4, r5, pc}
 801b984:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b986:	b112      	cbz	r2, 801b98e <_raise_r+0x1e>
 801b988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b98c:	b94b      	cbnz	r3, 801b9a2 <_raise_r+0x32>
 801b98e:	4620      	mov	r0, r4
 801b990:	f000 f830 	bl	801b9f4 <_getpid_r>
 801b994:	462a      	mov	r2, r5
 801b996:	4601      	mov	r1, r0
 801b998:	4620      	mov	r0, r4
 801b99a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b99e:	f000 b817 	b.w	801b9d0 <_kill_r>
 801b9a2:	2b01      	cmp	r3, #1
 801b9a4:	d00a      	beq.n	801b9bc <_raise_r+0x4c>
 801b9a6:	1c59      	adds	r1, r3, #1
 801b9a8:	d103      	bne.n	801b9b2 <_raise_r+0x42>
 801b9aa:	2316      	movs	r3, #22
 801b9ac:	6003      	str	r3, [r0, #0]
 801b9ae:	2001      	movs	r0, #1
 801b9b0:	e7e7      	b.n	801b982 <_raise_r+0x12>
 801b9b2:	2400      	movs	r4, #0
 801b9b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b9b8:	4628      	mov	r0, r5
 801b9ba:	4798      	blx	r3
 801b9bc:	2000      	movs	r0, #0
 801b9be:	e7e0      	b.n	801b982 <_raise_r+0x12>

0801b9c0 <raise>:
 801b9c0:	4b02      	ldr	r3, [pc, #8]	; (801b9cc <raise+0xc>)
 801b9c2:	4601      	mov	r1, r0
 801b9c4:	6818      	ldr	r0, [r3, #0]
 801b9c6:	f7ff bfd3 	b.w	801b970 <_raise_r>
 801b9ca:	bf00      	nop
 801b9cc:	200000bc 	.word	0x200000bc

0801b9d0 <_kill_r>:
 801b9d0:	b538      	push	{r3, r4, r5, lr}
 801b9d2:	4d07      	ldr	r5, [pc, #28]	; (801b9f0 <_kill_r+0x20>)
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	4604      	mov	r4, r0
 801b9d8:	4608      	mov	r0, r1
 801b9da:	4611      	mov	r1, r2
 801b9dc:	602b      	str	r3, [r5, #0]
 801b9de:	f7e7 fee5 	bl	80037ac <_kill>
 801b9e2:	1c43      	adds	r3, r0, #1
 801b9e4:	d102      	bne.n	801b9ec <_kill_r+0x1c>
 801b9e6:	682b      	ldr	r3, [r5, #0]
 801b9e8:	b103      	cbz	r3, 801b9ec <_kill_r+0x1c>
 801b9ea:	6023      	str	r3, [r4, #0]
 801b9ec:	bd38      	pop	{r3, r4, r5, pc}
 801b9ee:	bf00      	nop
 801b9f0:	20007368 	.word	0x20007368

0801b9f4 <_getpid_r>:
 801b9f4:	f7e7 bed2 	b.w	800379c <_getpid>

0801b9f8 <_init>:
 801b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9fa:	bf00      	nop
 801b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b9fe:	bc08      	pop	{r3}
 801ba00:	469e      	mov	lr, r3
 801ba02:	4770      	bx	lr

0801ba04 <_fini>:
 801ba04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba06:	bf00      	nop
 801ba08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ba0a:	bc08      	pop	{r3}
 801ba0c:	469e      	mov	lr, r3
 801ba0e:	4770      	bx	lr

0801ba10 <__start_laser_ramp_veneer>:
 801ba10:	f85f f000 	ldr.w	pc, [pc]	; 801ba14 <__start_laser_ramp_veneer+0x4>
 801ba14:	00000081 	.word	0x00000081

0801ba18 <__MW_update_veneer>:
 801ba18:	f85f f000 	ldr.w	pc, [pc]	; 801ba1c <__MW_update_veneer+0x4>
 801ba1c:	00001435 	.word	0x00001435

0801ba20 <__laser_update_veneer>:
 801ba20:	f85f f000 	ldr.w	pc, [pc]	; 801ba24 <__laser_update_veneer+0x4>
 801ba24:	0000014d 	.word	0x0000014d

0801ba28 <__init_synthesiser_veneer>:
 801ba28:	f85f f000 	ldr.w	pc, [pc]	; 801ba2c <__init_synthesiser_veneer+0x4>
 801ba2c:	00000879 	.word	0x00000879

0801ba30 <__measure_POP_cycle_time_veneer>:
 801ba30:	f85f f000 	ldr.w	pc, [pc]	; 801ba34 <__measure_POP_cycle_time_veneer+0x4>
 801ba34:	00000639 	.word	0x00000639

0801ba38 <__timer_delay_veneer>:
 801ba38:	f85f f000 	ldr.w	pc, [pc]	; 801ba3c <__timer_delay_veneer+0x4>
 801ba3c:	0000195d 	.word	0x0000195d

0801ba40 <__calc_fixed_time_MW_sweep_veneer>:
 801ba40:	f85f f000 	ldr.w	pc, [pc]	; 801ba44 <__calc_fixed_time_MW_sweep_veneer+0x4>
 801ba44:	00000e71 	.word	0x00000e71
