
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000b70  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ece0  08000e10  08000e10  00020e10  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000402d0  2**0
                  CONTENTS
  4 .rodata       00000924  0800faf0  0800faf0  0002faf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08010414  08010414  00030414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801041c  0801041c  0003041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010420  08010420  00030420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08010424  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  20000210  08010634  00040210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  20000270  08010694  00040270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000003f4  200002d0  080106f4  000402d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200006c4  080106f4  000406c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000294cd  00000000  00000000  000402fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a30  00000000  00000000  000697cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e50  00000000  00000000  0006d200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001cf8  00000000  00000000  0006f050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000058f8  00000000  00000000  00070d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000236c4  00000000  00000000  00076640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00197959  00000000  00000000  00099d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0023165d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009420  00000000  00000000  002316b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
}
#endif //ATTENUATOR_CODE

uint32_t start_timer(TIM_TypeDef * timer) {
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
   8:	687b      	ldr	r3, [r7, #4]
   a:	681b      	ldr	r3, [r3, #0]
   c:	f023 0201 	bic.w	r2, r3, #1
  10:	687b      	ldr	r3, [r7, #4]
  12:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  14:	687b      	ldr	r3, [r7, #4]
  16:	695b      	ldr	r3, [r3, #20]
  18:	f043 0201 	orr.w	r2, r3, #1
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
  20:	687b      	ldr	r3, [r7, #4]
  22:	681b      	ldr	r3, [r3, #0]
  24:	f043 0201 	orr.w	r2, r3, #1
  28:	687b      	ldr	r3, [r7, #4]
  2a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
  30:	4618      	mov	r0, r3
  32:	370c      	adds	r7, #12
  34:	46bd      	mov	sp, r7
  36:	f85d 7b04 	ldr.w	r7, [sp], #4
  3a:	4770      	bx	lr

0000003c <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
  3c:	b480      	push	{r7}
  3e:	b083      	sub	sp, #12
  40:	af00      	add	r7, sp, #0
  42:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
  44:	687b      	ldr	r3, [r7, #4]
  46:	681b      	ldr	r3, [r3, #0]
  48:	f023 0201 	bic.w	r2, r3, #1
  4c:	687b      	ldr	r3, [r7, #4]
  4e:	601a      	str	r2, [r3, #0]
	return timer->CNT;
  50:	687b      	ldr	r3, [r7, #4]
  52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  54:	4618      	mov	r0, r3
  56:	370c      	adds	r7, #12
  58:	46bd      	mov	sp, r7
  5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  5e:	4770      	bx	lr

00000060 <timer_delay>:

void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
  60:	b480      	push	{r7}
  62:	b085      	sub	sp, #20
  64:	af00      	add	r7, sp, #0
  66:	6078      	str	r0, [r7, #4]
  68:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  6a:	687b      	ldr	r3, [r7, #4]
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f023 0201 	bic.w	r2, r3, #1
  72:	687b      	ldr	r3, [r7, #4]
  74:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
  76:	687b      	ldr	r3, [r7, #4]
  78:	695b      	ldr	r3, [r3, #20]
  7a:	f043 0201 	orr.w	r2, r3, #1
  7e:	687b      	ldr	r3, [r7, #4]
  80:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
  82:	687b      	ldr	r3, [r7, #4]
  84:	681b      	ldr	r3, [r3, #0]
  86:	f043 0201 	orr.w	r2, r3, #1
  8a:	687b      	ldr	r3, [r7, #4]
  8c:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
  8e:	687b      	ldr	r3, [r7, #4]
  90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  92:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
  94:	bf00      	nop
  96:	687b      	ldr	r3, [r7, #4]
  98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  9a:	68fb      	ldr	r3, [r7, #12]
  9c:	1ad3      	subs	r3, r2, r3
  9e:	683a      	ldr	r2, [r7, #0]
  a0:	429a      	cmp	r2, r3
  a2:	d8f8      	bhi.n	96 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
  a4:	687b      	ldr	r3, [r7, #4]
  a6:	681b      	ldr	r3, [r3, #0]
  a8:	f023 0201 	bic.w	r2, r3, #1
  ac:	687b      	ldr	r3, [r7, #4]
  ae:	601a      	str	r2, [r3, #0]

}
  b0:	bf00      	nop
  b2:	3714      	adds	r7, #20
  b4:	46bd      	mov	sp, r7
  b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  ba:	4770      	bx	lr

000000bc <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
  bc:	b580      	push	{r7, lr}
  be:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
  c0:	f240 1103 	movw	r1, #259	; 0x103
  c4:	4821      	ldr	r0, [pc, #132]	; (14c <start_pop+0x90>)
  c6:	f000 fd4f 	bl	b68 <__HAL_HRTIM_WaveformOutputStart_veneer>
  ca:	4603      	mov	r3, r0
  cc:	2b00      	cmp	r3, #0
  ce:	d004      	beq.n	da <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
  d0:	481f      	ldr	r0, [pc, #124]	; (150 <start_pop+0x94>)
  d2:	f000 fd39 	bl	b48 <__puts_veneer>
		Error_Handler();
  d6:	f000 fd3b 	bl	b50 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
  da:	2302      	movs	r3, #2
  dc:	2202      	movs	r2, #2
  de:	2100      	movs	r1, #0
  e0:	481a      	ldr	r0, [pc, #104]	; (14c <start_pop+0x90>)
  e2:	f000 fd21 	bl	b28 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
  e6:	4603      	mov	r3, r0
  e8:	2b00      	cmp	r3, #0
  ea:	d004      	beq.n	f6 <start_pop+0x3a>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		printf("POP failure point C!\r\n");
  ec:	4819      	ldr	r0, [pc, #100]	; (154 <start_pop+0x98>)
  ee:	f000 fd2b 	bl	b48 <__puts_veneer>
		Error_Handler();
  f2:	f000 fd2d 	bl	b50 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000); //100ms delay
  f6:	4b18      	ldr	r3, [pc, #96]	; (158 <start_pop+0x9c>)
  f8:	681b      	ldr	r3, [r3, #0]
  fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  fe:	4618      	mov	r0, r3
 100:	f7ff ffae 	bl	60 <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 104:	2301      	movs	r3, #1
 106:	2202      	movs	r2, #2
 108:	2100      	movs	r1, #0
 10a:	4810      	ldr	r0, [pc, #64]	; (14c <start_pop+0x90>)
 10c:	f000 fd0c 	bl	b28 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 110:	4603      	mov	r3, r0
 112:	2b00      	cmp	r3, #0
 114:	d004      	beq.n	120 <start_pop+0x64>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		printf("POP failure point D!\r\n");
 116:	4811      	ldr	r0, [pc, #68]	; (15c <start_pop+0xa0>)
 118:	f000 fd16 	bl	b48 <__puts_veneer>
		Error_Handler();
 11c:	f000 fd18 	bl	b50 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 120:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 124:	4809      	ldr	r0, [pc, #36]	; (14c <start_pop+0x90>)
 126:	f000 fd07 	bl	b38 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 12a:	4603      	mov	r3, r0
 12c:	2b00      	cmp	r3, #0
 12e:	d004      	beq.n	13a <start_pop+0x7e>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 130:	480b      	ldr	r0, [pc, #44]	; (160 <start_pop+0xa4>)
 132:	f000 fd09 	bl	b48 <__puts_veneer>
		Error_Handler();
 136:	f000 fd0b 	bl	b50 <__Error_Handler_veneer>
	}

	pop_running = true;
 13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <start_pop+0xa8>)
 13c:	2201      	movs	r2, #1
 13e:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 140:	4809      	ldr	r0, [pc, #36]	; (168 <start_pop+0xac>)
 142:	f000 fd01 	bl	b48 <__puts_veneer>

}
 146:	bf00      	nop
 148:	bd80      	pop	{r7, pc}
 14a:	bf00      	nop
 14c:	2000044c 	.word	0x2000044c
 150:	0800faf0 	.word	0x0800faf0
 154:	0800fb08 	.word	0x0800fb08
 158:	20000000 	.word	0x20000000
 15c:	0800fb20 	.word	0x0800fb20
 160:	0800fb38 	.word	0x0800fb38
 164:	2000068c 	.word	0x2000068c
 168:	0800fb50 	.word	0x0800fb50

0000016c <stop_pop>:
static void stop_pop() {
 16c:	b580      	push	{r7, lr}
 16e:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 170:	f240 1103 	movw	r1, #259	; 0x103
 174:	4813      	ldr	r0, [pc, #76]	; (1c4 <stop_pop+0x58>)
 176:	f000 fcdb 	bl	b30 <__HAL_HRTIM_WaveformOutputStop_veneer>
 17a:	4603      	mov	r3, r0
 17c:	2b00      	cmp	r3, #0
 17e:	d004      	beq.n	18a <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 180:	4811      	ldr	r0, [pc, #68]	; (1c8 <stop_pop+0x5c>)
 182:	f000 fce1 	bl	b48 <__puts_veneer>
		Error_Handler();
 186:	f000 fce3 	bl	b50 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 18a:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 18e:	480d      	ldr	r0, [pc, #52]	; (1c4 <stop_pop+0x58>)
 190:	f000 fce2 	bl	b58 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 194:	4603      	mov	r3, r0
 196:	2b00      	cmp	r3, #0
 198:	d004      	beq.n	1a4 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 19a:	480c      	ldr	r0, [pc, #48]	; (1cc <stop_pop+0x60>)
 19c:	f000 fcd4 	bl	b48 <__puts_veneer>
		Error_Handler();
 1a0:	f000 fcd6 	bl	b50 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 1a4:	4b0a      	ldr	r3, [pc, #40]	; (1d0 <stop_pop+0x64>)
 1a6:	2200      	movs	r2, #0
 1a8:	601a      	str	r2, [r3, #0]
	pop_running = false;
 1aa:	4b0a      	ldr	r3, [pc, #40]	; (1d4 <stop_pop+0x68>)
 1ac:	2200      	movs	r2, #0
 1ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
 1b0:	2200      	movs	r2, #0
 1b2:	2102      	movs	r1, #2
 1b4:	4808      	ldr	r0, [pc, #32]	; (1d8 <stop_pop+0x6c>)
 1b6:	f000 fcc3 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 1ba:	4808      	ldr	r0, [pc, #32]	; (1dc <stop_pop+0x70>)
 1bc:	f000 fcc4 	bl	b48 <__puts_veneer>
}
 1c0:	bf00      	nop
 1c2:	bd80      	pop	{r7, pc}
 1c4:	2000044c 	.word	0x2000044c
 1c8:	0800fb64 	.word	0x0800fb64
 1cc:	0800fb7c 	.word	0x0800fb7c
 1d0:	20000690 	.word	0x20000690
 1d4:	2000068c 	.word	0x2000068c
 1d8:	58021000 	.word	0x58021000
 1dc:	0800fb94 	.word	0x0800fb94

000001e0 <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 1e0:	b580      	push	{r7, lr}
 1e2:	b082      	sub	sp, #8
 1e4:	af00      	add	r7, sp, #0
 1e6:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 1e8:	2201      	movs	r2, #1
 1ea:	2180      	movs	r1, #128	; 0x80
 1ec:	4822      	ldr	r0, [pc, #136]	; (278 <_Min_Heap_Size+0x78>)
 1ee:	f000 fca7 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 1f2:	793b      	ldrb	r3, [r7, #4]
 1f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 1f8:	b2db      	uxtb	r3, r3
 1fa:	461a      	mov	r2, r3
 1fc:	2140      	movs	r1, #64	; 0x40
 1fe:	481e      	ldr	r0, [pc, #120]	; (278 <_Min_Heap_Size+0x78>)
 200:	f000 fc9e 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 204:	793b      	ldrb	r3, [r7, #4]
 206:	f3c3 0340 	ubfx	r3, r3, #1, #1
 20a:	b2db      	uxtb	r3, r3
 20c:	461a      	mov	r2, r3
 20e:	2120      	movs	r1, #32
 210:	4819      	ldr	r0, [pc, #100]	; (278 <_Min_Heap_Size+0x78>)
 212:	f000 fc95 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 216:	793b      	ldrb	r3, [r7, #4]
 218:	f3c3 0380 	ubfx	r3, r3, #2, #1
 21c:	b2db      	uxtb	r3, r3
 21e:	461a      	mov	r2, r3
 220:	2110      	movs	r1, #16
 222:	4815      	ldr	r0, [pc, #84]	; (278 <_Min_Heap_Size+0x78>)
 224:	f000 fc8c 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 228:	793b      	ldrb	r3, [r7, #4]
 22a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 22e:	b2db      	uxtb	r3, r3
 230:	461a      	mov	r2, r3
 232:	2108      	movs	r1, #8
 234:	4810      	ldr	r0, [pc, #64]	; (278 <_Min_Heap_Size+0x78>)
 236:	f000 fc83 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 23a:	793b      	ldrb	r3, [r7, #4]
 23c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 240:	b2db      	uxtb	r3, r3
 242:	461a      	mov	r2, r3
 244:	2104      	movs	r1, #4
 246:	480d      	ldr	r0, [pc, #52]	; (27c <_Min_Heap_Size+0x7c>)
 248:	f000 fc7a 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 24c:	793b      	ldrb	r3, [r7, #4]
 24e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 252:	b2db      	uxtb	r3, r3
 254:	461a      	mov	r2, r3
 256:	2110      	movs	r1, #16
 258:	4808      	ldr	r0, [pc, #32]	; (27c <_Min_Heap_Size+0x7c>)
 25a:	f000 fc71 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 25e:	793b      	ldrb	r3, [r7, #4]
 260:	f3c3 1380 	ubfx	r3, r3, #6, #1
 264:	b2db      	uxtb	r3, r3
 266:	461a      	mov	r2, r3
 268:	2120      	movs	r1, #32
 26a:	4804      	ldr	r0, [pc, #16]	; (27c <_Min_Heap_Size+0x7c>)
 26c:	f000 fc68 	bl	b40 <__HAL_GPIO_WritePin_veneer>
}
 270:	bf00      	nop
 272:	3708      	adds	r7, #8
 274:	46bd      	mov	sp, r7
 276:	bd80      	pop	{r7, pc}
 278:	58020c00 	.word	0x58020c00
 27c:	58021000 	.word	0x58021000

00000280 <synth_writereg>:
extern uint32_t start_timer(TIM_TypeDef * timer);
extern uint32_t stop_timer(TIM_TypeDef * timer);
extern void timer_delay(TIM_TypeDef *timer, uint32_t delay_us);
extern void Error_Handler(void);

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
 280:	b580      	push	{r7, lr}
 282:	b08a      	sub	sp, #40	; 0x28
 284:	af00      	add	r7, sp, #0
 286:	60f8      	str	r0, [r7, #12]
 288:	60b9      	str	r1, [r7, #8]
 28a:	607a      	str	r2, [r7, #4]
 28c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
 28e:	2300      	movs	r3, #0
 290:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
 292:	68fb      	ldr	r3, [r7, #12]
 294:	021a      	lsls	r2, r3, #8
 296:	68bb      	ldr	r3, [r7, #8]
 298:	00db      	lsls	r3, r3, #3
 29a:	4313      	orrs	r3, r2
 29c:	687a      	ldr	r2, [r7, #4]
 29e:	4313      	orrs	r3, r2
 2a0:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2a2:	2200      	movs	r2, #0
 2a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 2a8:	4830      	ldr	r0, [pc, #192]	; (36c <synth_writereg+0xec>)
 2aa:	f000 fc49 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
 2ae:	2200      	movs	r2, #0
 2b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 2b4:	482d      	ldr	r0, [pc, #180]	; (36c <synth_writereg+0xec>)
 2b6:	f000 fc43 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 2ba:	2300      	movs	r3, #0
 2bc:	623b      	str	r3, [r7, #32]
 2be:	e036      	b.n	32e <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
 2c0:	2220      	movs	r2, #32
 2c2:	6a3b      	ldr	r3, [r7, #32]
 2c4:	1ad3      	subs	r3, r2, r3
 2c6:	3b01      	subs	r3, #1
 2c8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
 2ca:	2201      	movs	r2, #1
 2cc:	697b      	ldr	r3, [r7, #20]
 2ce:	fa02 f303 	lsl.w	r3, r2, r3
 2d2:	461a      	mov	r2, r3
 2d4:	69fb      	ldr	r3, [r7, #28]
 2d6:	4013      	ands	r3, r2
 2d8:	2b00      	cmp	r3, #0
 2da:	bf14      	ite	ne
 2dc:	2301      	movne	r3, #1
 2de:	2300      	moveq	r3, #0
 2e0:	b2db      	uxtb	r3, r3
 2e2:	461a      	mov	r2, r3
 2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 2e8:	4820      	ldr	r0, [pc, #128]	; (36c <synth_writereg+0xec>)
 2ea:	f000 fc29 	bl	b40 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
 2ee:	2201      	movs	r2, #1
 2f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 2f4:	481d      	ldr	r0, [pc, #116]	; (36c <synth_writereg+0xec>)
 2f6:	f000 fc23 	bl	b40 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 2fa:	2200      	movs	r2, #0
 2fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 300:	481a      	ldr	r0, [pc, #104]	; (36c <synth_writereg+0xec>)
 302:	f000 fc1d 	bl	b40 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
 306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 30a:	4818      	ldr	r0, [pc, #96]	; (36c <synth_writereg+0xec>)
 30c:	f000 fc04 	bl	b18 <__HAL_GPIO_ReadPin_veneer>
 310:	4603      	mov	r3, r0
 312:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
 314:	2220      	movs	r2, #32
 316:	6a3b      	ldr	r3, [r7, #32]
 318:	1ad3      	subs	r3, r2, r3
 31a:	3b01      	subs	r3, #1
 31c:	fa01 f303 	lsl.w	r3, r1, r3
 320:	461a      	mov	r2, r3
		read_data = read_data
 322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 324:	4313      	orrs	r3, r2
 326:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
 328:	6a3b      	ldr	r3, [r7, #32]
 32a:	3301      	adds	r3, #1
 32c:	623b      	str	r3, [r7, #32]
 32e:	2220      	movs	r2, #32
 330:	6a3b      	ldr	r3, [r7, #32]
 332:	4293      	cmp	r3, r2
 334:	d3c4      	bcc.n	2c0 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
 336:	2201      	movs	r2, #1
 338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 33c:	480b      	ldr	r0, [pc, #44]	; (36c <synth_writereg+0xec>)
 33e:	f000 fbff 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
 342:	78fb      	ldrb	r3, [r7, #3]
 344:	2b00      	cmp	r3, #0
 346:	d00c      	beq.n	362 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
 348:	68b8      	ldr	r0, [r7, #8]
 34a:	f000 f813 	bl	374 <synth_readreg>
 34e:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
 350:	69ba      	ldr	r2, [r7, #24]
 352:	68fb      	ldr	r3, [r7, #12]
 354:	429a      	cmp	r2, r3
 356:	d004      	beq.n	362 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
 358:	4805      	ldr	r0, [pc, #20]	; (370 <synth_writereg+0xf0>)
 35a:	f000 fbf5 	bl	b48 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
 35e:	f000 fbf7 	bl	b50 <__Error_Handler_veneer>
		}
	}

	return read_data;
 362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 364:	4618      	mov	r0, r3
 366:	3728      	adds	r7, #40	; 0x28
 368:	46bd      	mov	sp, r7
 36a:	bd80      	pop	{r7, pc}
 36c:	58020800 	.word	0x58020800
 370:	0800fe24 	.word	0x0800fe24

00000374 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
 374:	b580      	push	{r7, lr}
 376:	b084      	sub	sp, #16
 378:	af00      	add	r7, sp, #0
 37a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
 37c:	2300      	movs	r3, #0
 37e:	2200      	movs	r2, #0
 380:	2100      	movs	r1, #0
 382:	6878      	ldr	r0, [r7, #4]
 384:	f7ff ff7c 	bl	280 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
 388:	2300      	movs	r3, #0
 38a:	2200      	movs	r2, #0
 38c:	2100      	movs	r1, #0
 38e:	6878      	ldr	r0, [r7, #4]
 390:	f7ff ff76 	bl	280 <synth_writereg>
 394:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 396:	68fb      	ldr	r3, [r7, #12]
 398:	0a1b      	lsrs	r3, r3, #8

}
 39a:	4618      	mov	r0, r3
 39c:	3710      	adds	r7, #16
 39e:	46bd      	mov	sp, r7
 3a0:	bd80      	pop	{r7, pc}

000003a2 <set_MW_power>:

/* Program LO2 output gain */
uint32_t set_MW_power (const uint8_t mw_power) {
 3a2:	b580      	push	{r7, lr}
 3a4:	b084      	sub	sp, #16
 3a6:	af00      	add	r7, sp, #0
 3a8:	4603      	mov	r3, r0
 3aa:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 3ac:	79fb      	ldrb	r3, [r7, #7]
 3ae:	2b03      	cmp	r3, #3
 3b0:	d904      	bls.n	3bc <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 3b2:	4811      	ldr	r0, [pc, #68]	; (3f8 <set_MW_power+0x56>)
 3b4:	f000 fbc8 	bl	b48 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 3b8:	f000 fbca 	bl	b50 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 3bc:	2016      	movs	r0, #22
 3be:	f7ff ffd9 	bl	374 <synth_readreg>
 3c2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 3c4:	68fb      	ldr	r3, [r7, #12]
 3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 3ca:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 3cc:	79fb      	ldrb	r3, [r7, #7]
 3ce:	021b      	lsls	r3, r3, #8
 3d0:	461a      	mov	r2, r3
 3d2:	68fb      	ldr	r3, [r7, #12]
 3d4:	4313      	orrs	r3, r2
 3d6:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 3d8:	2301      	movs	r3, #1
 3da:	2200      	movs	r2, #0
 3dc:	2116      	movs	r1, #22
 3de:	68f8      	ldr	r0, [r7, #12]
 3e0:	f7ff ff4e 	bl	280 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
 3e4:	79fb      	ldrb	r3, [r7, #7]
 3e6:	4619      	mov	r1, r3
 3e8:	4804      	ldr	r0, [pc, #16]	; (3fc <set_MW_power+0x5a>)
 3ea:	f000 fbb9 	bl	b60 <__printf_veneer>
	return SUCCESS;
 3ee:	2300      	movs	r3, #0
}
 3f0:	4618      	mov	r0, r3
 3f2:	3710      	adds	r7, #16
 3f4:	46bd      	mov	sp, r7
 3f6:	bd80      	pop	{r7, pc}
 3f8:	0800fe3c 	.word	0x0800fe3c
 3fc:	0800fe70 	.word	0x0800fe70

00000400 <init_synthesiser>:

uint32_t init_synthesiser(const uint8_t mw_power) {
 400:	b580      	push	{r7, lr}
 402:	b084      	sub	sp, #16
 404:	af00      	add	r7, sp, #0
 406:	4603      	mov	r3, r0
 408:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
 40a:	2200      	movs	r2, #0
 40c:	2102      	movs	r1, #2
 40e:	4854      	ldr	r0, [pc, #336]	; (560 <init_synthesiser+0x160>)
 410:	f000 fb96 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 414:	2201      	movs	r2, #1
 416:	2101      	movs	r1, #1
 418:	4852      	ldr	r0, [pc, #328]	; (564 <init_synthesiser+0x164>)
 41a:	f000 fb91 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 41e:	2200      	movs	r2, #0
 420:	f44f 7180 	mov.w	r1, #256	; 0x100
 424:	4850      	ldr	r0, [pc, #320]	; (568 <init_synthesiser+0x168>)
 426:	f000 fb8b 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 42a:	2201      	movs	r2, #1
 42c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 430:	484d      	ldr	r0, [pc, #308]	; (568 <init_synthesiser+0x168>)
 432:	f000 fb85 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 436:	2201      	movs	r2, #1
 438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 43c:	484a      	ldr	r0, [pc, #296]	; (568 <init_synthesiser+0x168>)
 43e:	f000 fb7f 	bl	b40 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 442:	2064      	movs	r0, #100	; 0x64
 444:	f000 fb6c 	bl	b20 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
 448:	2300      	movs	r3, #0
 44a:	2200      	movs	r2, #0
 44c:	2100      	movs	r1, #0
 44e:	2020      	movs	r0, #32
 450:	f7ff ff16 	bl	280 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
 454:	2301      	movs	r3, #1
 456:	2200      	movs	r2, #0
 458:	2108      	movs	r1, #8
 45a:	4844      	ldr	r0, [pc, #272]	; (56c <init_synthesiser+0x16c>)
 45c:	f7ff ff10 	bl	280 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
 460:	2000      	movs	r0, #0
 462:	f7ff ff87 	bl	374 <synth_readreg>
 466:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 468:	4a41      	ldr	r2, [pc, #260]	; (570 <init_synthesiser+0x170>)
 46a:	68fb      	ldr	r3, [r7, #12]
 46c:	4293      	cmp	r3, r2
 46e:	d00a      	beq.n	486 <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 470:	2200      	movs	r2, #0
 472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 476:	483c      	ldr	r0, [pc, #240]	; (568 <init_synthesiser+0x168>)
 478:	f000 fb62 	bl	b40 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 47c:	483d      	ldr	r0, [pc, #244]	; (574 <init_synthesiser+0x174>)
 47e:	f000 fb63 	bl	b48 <__puts_veneer>
		return ERROR;
 482:	2301      	movs	r3, #1
 484:	e062      	b.n	54c <init_synthesiser+0x14c>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 486:	483c      	ldr	r0, [pc, #240]	; (578 <init_synthesiser+0x178>)
 488:	f000 fb5e 	bl	b48 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
 48c:	2017      	movs	r0, #23
 48e:	f7ff ff71 	bl	374 <synth_readreg>
 492:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 494:	68fb      	ldr	r3, [r7, #12]
 496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 49a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
 49c:	2301      	movs	r3, #1
 49e:	f083 0301 	eor.w	r3, r3, #1
 4a2:	b2db      	uxtb	r3, r3
 4a4:	01db      	lsls	r3, r3, #7
 4a6:	43db      	mvns	r3, r3
 4a8:	461a      	mov	r2, r3
 4aa:	68fb      	ldr	r3, [r7, #12]
 4ac:	4013      	ands	r3, r2
 4ae:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
 4b0:	2301      	movs	r3, #1
 4b2:	2200      	movs	r2, #0
 4b4:	2117      	movs	r1, #23
 4b6:	68f8      	ldr	r0, [r7, #12]
 4b8:	f7ff fee2 	bl	280 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
 4bc:	2301      	movs	r3, #1
 4be:	2200      	movs	r2, #0
 4c0:	2102      	movs	r1, #2
 4c2:	2001      	movs	r0, #1
 4c4:	f7ff fedc 	bl	280 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
 4c8:	2007      	movs	r0, #7
 4ca:	f7ff ff53 	bl	374 <synth_readreg>
 4ce:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 4d0:	68fb      	ldr	r3, [r7, #12]
 4d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 4d6:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 4d8:	68fb      	ldr	r3, [r7, #12]
 4da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 4de:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 4e0:	68fb      	ldr	r3, [r7, #12]
 4e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 4e6:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
 4e8:	2301      	movs	r3, #1
 4ea:	2200      	movs	r2, #0
 4ec:	2107      	movs	r1, #7
 4ee:	68f8      	ldr	r0, [r7, #12]
 4f0:	f7ff fec6 	bl	280 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 4f4:	200a      	movs	r0, #10
 4f6:	f000 fb13 	bl	b20 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 4fa:	79fb      	ldrb	r3, [r7, #7]
 4fc:	2b03      	cmp	r3, #3
 4fe:	d904      	bls.n	50a <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 500:	481e      	ldr	r0, [pc, #120]	; (57c <init_synthesiser+0x17c>)
 502:	f000 fb21 	bl	b48 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 506:	f000 fb23 	bl	b50 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 50a:	2016      	movs	r0, #22
 50c:	f7ff ff32 	bl	374 <synth_readreg>
 510:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 512:	68fb      	ldr	r3, [r7, #12]
 514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 518:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 51a:	79fb      	ldrb	r3, [r7, #7]
 51c:	021b      	lsls	r3, r3, #8
 51e:	461a      	mov	r2, r3
 520:	68fb      	ldr	r3, [r7, #12]
 522:	4313      	orrs	r3, r2
 524:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 526:	2301      	movs	r3, #1
 528:	2200      	movs	r2, #0
 52a:	2116      	movs	r1, #22
 52c:	68f8      	ldr	r0, [r7, #12]
 52e:	f7ff fea7 	bl	280 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
 532:	ed9f 7b09 	vldr	d7, [pc, #36]	; 558 <init_synthesiser+0x158>
 536:	eeb0 0b47 	vmov.f64	d0, d7
 53a:	f000 f8e3 	bl	704 <set_frequency_hz>
	printf("Single frequency output: %f Hz \r\n", HYPERFINE);
 53e:	a306      	add	r3, pc, #24	; (adr r3, 558 <init_synthesiser+0x158>)
 540:	e9d3 2300 	ldrd	r2, r3, [r3]
 544:	480e      	ldr	r0, [pc, #56]	; (580 <init_synthesiser+0x180>)
 546:	f000 fb0b 	bl	b60 <__printf_veneer>
	return SUCCESS;
 54a:	2300      	movs	r3, #0
}
 54c:	4618      	mov	r0, r3
 54e:	3710      	adds	r7, #16
 550:	46bd      	mov	sp, r7
 552:	bd80      	pop	{r7, pc}
 554:	f3af 8000 	nop.w
 558:	6d600000 	.word	0x6d600000
 55c:	41e69e35 	.word	0x41e69e35
 560:	58021000 	.word	0x58021000
 564:	58021800 	.word	0x58021800
 568:	58020800 	.word	0x58020800
 56c:	0041bfff 	.word	0x0041bfff
 570:	00c7701a 	.word	0x00c7701a
 574:	0800fe88 	.word	0x0800fe88
 578:	0800fea4 	.word	0x0800fea4
 57c:	0800fe3c 	.word	0x0800fe3c
 580:	0800feb8 	.word	0x0800feb8

00000584 <poll_until_locked>:

static const bool poll_until_locked(uint32_t timeout) {
 584:	b580      	push	{r7, lr}
 586:	b084      	sub	sp, #16
 588:	af00      	add	r7, sp, #0
 58a:	6078      	str	r0, [r7, #4]

	bool locked = false;
 58c:	2300      	movs	r3, #0
 58e:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 590:	4b16      	ldr	r3, [pc, #88]	; (5ec <poll_until_locked+0x68>)
 592:	681b      	ldr	r3, [r3, #0]
 594:	4618      	mov	r0, r3
 596:	f7ff fd33 	bl	0 <start_timer>
 59a:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 59c:	e014      	b.n	5c8 <poll_until_locked+0x44>
		//printf("Debug lock while condition\r\n");
		locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 59e:	2012      	movs	r0, #18
 5a0:	f7ff fee8 	bl	374 <synth_readreg>
 5a4:	4603      	mov	r3, r0
 5a6:	f003 0302 	and.w	r3, r3, #2
 5aa:	2b00      	cmp	r3, #0
 5ac:	bf14      	ite	ne
 5ae:	2301      	movne	r3, #1
 5b0:	2300      	moveq	r3, #0
 5b2:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 5b4:	7bfb      	ldrb	r3, [r7, #15]
 5b6:	2b00      	cmp	r3, #0
 5b8:	d006      	beq.n	5c8 <poll_until_locked+0x44>
			stop_timer(FAST_TIMER);
 5ba:	4b0c      	ldr	r3, [pc, #48]	; (5ec <poll_until_locked+0x68>)
 5bc:	681b      	ldr	r3, [r3, #0]
 5be:	4618      	mov	r0, r3
 5c0:	f7ff fd3c 	bl	3c <stop_timer>
			return true;
 5c4:	2301      	movs	r3, #1
 5c6:	e00d      	b.n	5e4 <poll_until_locked+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 5c8:	4b08      	ldr	r3, [pc, #32]	; (5ec <poll_until_locked+0x68>)
 5ca:	681b      	ldr	r3, [r3, #0]
 5cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 5ce:	68bb      	ldr	r3, [r7, #8]
 5d0:	1ad3      	subs	r3, r2, r3
 5d2:	687a      	ldr	r2, [r7, #4]
 5d4:	429a      	cmp	r2, r3
 5d6:	d8e2      	bhi.n	59e <poll_until_locked+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 5d8:	4b04      	ldr	r3, [pc, #16]	; (5ec <poll_until_locked+0x68>)
 5da:	681b      	ldr	r3, [r3, #0]
 5dc:	4618      	mov	r0, r3
 5de:	f7ff fd2d 	bl	3c <stop_timer>
	return false;
 5e2:	2300      	movs	r3, #0
}
 5e4:	4618      	mov	r0, r3
 5e6:	3710      	adds	r7, #16
 5e8:	46bd      	mov	sp, r7
 5ea:	bd80      	pop	{r7, pc}
 5ec:	20000004 	.word	0x20000004

000005f0 <lock_status>:

static const bool lock_status(void) {
 5f0:	b580      	push	{r7, lr}
 5f2:	b082      	sub	sp, #8
 5f4:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 5f6:	2012      	movs	r0, #18
 5f8:	f7ff febc 	bl	374 <synth_readreg>
 5fc:	4603      	mov	r3, r0
 5fe:	f003 0302 	and.w	r3, r3, #2
 602:	2b00      	cmp	r3, #0
 604:	bf14      	ite	ne
 606:	2301      	movne	r3, #1
 608:	2300      	moveq	r3, #0
 60a:	71fb      	strb	r3, [r7, #7]
	return locked;
 60c:	79fb      	ldrb	r3, [r7, #7]

}
 60e:	4618      	mov	r0, r3
 610:	3708      	adds	r7, #8
 612:	46bd      	mov	sp, r7
 614:	bd80      	pop	{r7, pc}

00000616 <mute_mw_outputs>:

static void mute_mw_outputs() {
 616:	b580      	push	{r7, lr}
 618:	b082      	sub	sp, #8
 61a:	af00      	add	r7, sp, #0
	uint32_t read_data = 0x0;
 61c:	2300      	movs	r3, #0
 61e:	607b      	str	r3, [r7, #4]

	/* Mute the outputs by setting k value to zero */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 620:	2016      	movs	r0, #22
 622:	f7ff fea7 	bl	374 <synth_readreg>
 626:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 628:	687b      	ldr	r3, [r7, #4]
 62a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 62e:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 630:	2301      	movs	r3, #1
 632:	2200      	movs	r2, #0
 634:	2116      	movs	r1, #22
 636:	6878      	ldr	r0, [r7, #4]
 638:	f7ff fe22 	bl	280 <synth_writereg>
}
 63c:	bf00      	nop
 63e:	3708      	adds	r7, #8
 640:	46bd      	mov	sp, r7
 642:	bd80      	pop	{r7, pc}

00000644 <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 644:	b580      	push	{r7, lr}
 646:	b086      	sub	sp, #24
 648:	af00      	add	r7, sp, #0
 64a:	60f8      	str	r0, [r7, #12]
 64c:	60b9      	str	r1, [r7, #8]
 64e:	607a      	str	r2, [r7, #4]
 650:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 652:	2300      	movs	r3, #0
 654:	617b      	str	r3, [r7, #20]

	if (mute) {
 656:	78fb      	ldrb	r3, [r7, #3]
 658:	2b00      	cmp	r3, #0
 65a:	d001      	beq.n	660 <set_frequency+0x1c>
		mute_mw_outputs();
 65c:	f7ff ffdb 	bl	616 <mute_mw_outputs>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 660:	4b25      	ldr	r3, [pc, #148]	; (6f8 <set_frequency+0xb4>)
 662:	681b      	ldr	r3, [r3, #0]
 664:	f1b3 3fff 	cmp.w	r3, #4294967295
 668:	d004      	beq.n	674 <set_frequency+0x30>
 66a:	4b23      	ldr	r3, [pc, #140]	; (6f8 <set_frequency+0xb4>)
 66c:	681b      	ldr	r3, [r3, #0]
 66e:	68fa      	ldr	r2, [r7, #12]
 670:	429a      	cmp	r2, r3
 672:	d008      	beq.n	686 <set_frequency+0x42>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
 674:	2301      	movs	r3, #1
 676:	2200      	movs	r2, #0
 678:	2103      	movs	r1, #3
 67a:	68f8      	ldr	r0, [r7, #12]
 67c:	f7ff fe00 	bl	280 <synth_writereg>
		last_integer = integer;
 680:	4a1d      	ldr	r2, [pc, #116]	; (6f8 <set_frequency+0xb4>)
 682:	68fb      	ldr	r3, [r7, #12]
 684:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 686:	4b1d      	ldr	r3, [pc, #116]	; (6fc <set_frequency+0xb8>)
 688:	681b      	ldr	r3, [r3, #0]
 68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 68e:	d004      	beq.n	69a <set_frequency+0x56>
 690:	4b1a      	ldr	r3, [pc, #104]	; (6fc <set_frequency+0xb8>)
 692:	681b      	ldr	r3, [r3, #0]
 694:	68ba      	ldr	r2, [r7, #8]
 696:	429a      	cmp	r2, r3
 698:	d008      	beq.n	6ac <set_frequency+0x68>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
 69a:	2301      	movs	r3, #1
 69c:	2200      	movs	r2, #0
 69e:	2104      	movs	r1, #4
 6a0:	68b8      	ldr	r0, [r7, #8]
 6a2:	f7ff fded 	bl	280 <synth_writereg>
		last_fraction = fraction;
 6a6:	4a15      	ldr	r2, [pc, #84]	; (6fc <set_frequency+0xb8>)
 6a8:	68bb      	ldr	r3, [r7, #8]
 6aa:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider) || mute) {
 6ac:	4b14      	ldr	r3, [pc, #80]	; (700 <set_frequency+0xbc>)
 6ae:	681b      	ldr	r3, [r3, #0]
 6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 6b4:	d007      	beq.n	6c6 <set_frequency+0x82>
 6b6:	4b12      	ldr	r3, [pc, #72]	; (700 <set_frequency+0xbc>)
 6b8:	681b      	ldr	r3, [r3, #0]
 6ba:	687a      	ldr	r2, [r7, #4]
 6bc:	429a      	cmp	r2, r3
 6be:	d102      	bne.n	6c6 <set_frequency+0x82>
 6c0:	78fb      	ldrb	r3, [r7, #3]
 6c2:	2b00      	cmp	r3, #0
 6c4:	d014      	beq.n	6f0 <set_frequency+0xac>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 6c6:	2016      	movs	r0, #22
 6c8:	f7ff fe54 	bl	374 <synth_readreg>
 6cc:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 6ce:	697b      	ldr	r3, [r7, #20]
 6d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 6d4:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
 6d6:	697a      	ldr	r2, [r7, #20]
 6d8:	687b      	ldr	r3, [r7, #4]
 6da:	4313      	orrs	r3, r2
 6dc:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 6de:	2301      	movs	r3, #1
 6e0:	2200      	movs	r2, #0
 6e2:	2116      	movs	r1, #22
 6e4:	6978      	ldr	r0, [r7, #20]
 6e6:	f7ff fdcb 	bl	280 <synth_writereg>
		last_vcodiv = vco_divider;
 6ea:	4a05      	ldr	r2, [pc, #20]	; (700 <set_frequency+0xbc>)
 6ec:	687b      	ldr	r3, [r7, #4]
 6ee:	6013      	str	r3, [r2, #0]
	}

}
 6f0:	bf00      	nop
 6f2:	3718      	adds	r7, #24
 6f4:	46bd      	mov	sp, r7
 6f6:	bd80      	pop	{r7, pc}
 6f8:	2000000c 	.word	0x2000000c
 6fc:	20000010 	.word	0x20000010
 700:	20000014 	.word	0x20000014

00000704 <set_frequency_hz>:

void set_frequency_hz(const double fo) {
 704:	b580      	push	{r7, lr}
 706:	b088      	sub	sp, #32
 708:	af00      	add	r7, sp, #0
 70a:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 70e:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 800 <set_frequency_hz+0xfc>
 712:	ed97 6b00 	vldr	d6, [r7]
 716:	ee85 7b06 	vdiv.f64	d7, d5, d6
 71a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 71e:	ee17 3a90 	vmov	r3, s15
 722:	61fb      	str	r3, [r7, #28]

	if (k != 1) {
 724:	69fb      	ldr	r3, [r7, #28]
 726:	2b01      	cmp	r3, #1
 728:	d00b      	beq.n	742 <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 72a:	e002      	b.n	732 <set_frequency_hz+0x2e>
			k = k - 1;
 72c:	69fb      	ldr	r3, [r7, #28]
 72e:	3b01      	subs	r3, #1
 730:	61fb      	str	r3, [r7, #28]
		while (k > 62 || k % 2) {
 732:	69fb      	ldr	r3, [r7, #28]
 734:	2b3e      	cmp	r3, #62	; 0x3e
 736:	d8f9      	bhi.n	72c <set_frequency_hz+0x28>
 738:	69fb      	ldr	r3, [r7, #28]
 73a:	f003 0301 	and.w	r3, r3, #1
 73e:	2b00      	cmp	r3, #0
 740:	d1f4      	bne.n	72c <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 742:	69fb      	ldr	r3, [r7, #28]
 744:	ee07 3a90 	vmov	s15, r3
 748:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 74c:	ed97 7b00 	vldr	d7, [r7]
 750:	ee26 6b07 	vmul.f64	d6, d6, d7
 754:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 808 <set_frequency_hz+0x104>
 758:	ee86 7b05 	vdiv.f64	d7, d6, d5
 75c:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 760:	ed97 7b04 	vldr	d7, [r7, #16]
 764:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 768:	ee17 3a90 	vmov	r3, s15
 76c:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 76e:	68fb      	ldr	r3, [r7, #12]
 770:	ee07 3a90 	vmov	s15, r3
 774:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 778:	ed97 6b04 	vldr	d6, [r7, #16]
 77c:	ee36 7b47 	vsub.f64	d7, d6, d7
 780:	ed9f 6b23 	vldr	d6, [pc, #140]	; 810 <set_frequency_hz+0x10c>
 784:	ee27 7b06 	vmul.f64	d7, d7, d6
 788:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 78c:	ee37 7b06 	vadd.f64	d7, d7, d6
 790:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 794:	ee17 3a90 	vmov	r3, s15
 798:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
 79a:	2201      	movs	r2, #1
 79c:	2102      	movs	r1, #2
 79e:	481e      	ldr	r0, [pc, #120]	; (818 <set_frequency_hz+0x114>)
 7a0:	f000 f9ce 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
 7a4:	2301      	movs	r3, #1
 7a6:	69fa      	ldr	r2, [r7, #28]
 7a8:	68b9      	ldr	r1, [r7, #8]
 7aa:	68f8      	ldr	r0, [r7, #12]
 7ac:	f7ff ff4a 	bl	644 <set_frequency>

	//MW stabilisation delay and check for lock
	timer_delay(FAST_TIMER, MW_STABILISE_TIME_US);
 7b0:	4b1a      	ldr	r3, [pc, #104]	; (81c <set_frequency_hz+0x118>)
 7b2:	681b      	ldr	r3, [r3, #0]
 7b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 7b8:	4611      	mov	r1, r2
 7ba:	4618      	mov	r0, r3
 7bc:	f7ff fc50 	bl	60 <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
 7c0:	f7ff ff16 	bl	5f0 <lock_status>
 7c4:	4603      	mov	r3, r0
 7c6:	f083 0301 	eor.w	r3, r3, #1
 7ca:	b2db      	uxtb	r3, r3
 7cc:	2b00      	cmp	r3, #0
 7ce:	d011      	beq.n	7f4 <set_frequency_hz+0xf0>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
 7d0:	2200      	movs	r2, #0
 7d2:	2102      	movs	r1, #2
 7d4:	4812      	ldr	r0, [pc, #72]	; (820 <set_frequency_hz+0x11c>)
 7d6:	f000 f9b3 	bl	b40 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
 7da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 7de:	4619      	mov	r1, r3
 7e0:	4810      	ldr	r0, [pc, #64]	; (824 <set_frequency_hz+0x120>)
 7e2:	f000 f9bd 	bl	b60 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
 7e6:	f000 f9b3 	bl	b50 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
 7ea:	2200      	movs	r2, #0
 7ec:	2102      	movs	r1, #2
 7ee:	480a      	ldr	r0, [pc, #40]	; (818 <set_frequency_hz+0x114>)
 7f0:	f000 f9a6 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	}

}
 7f4:	bf00      	nop
 7f6:	3720      	adds	r7, #32
 7f8:	46bd      	mov	sp, r7
 7fa:	bd80      	pop	{r7, pc}
 7fc:	f3af 8000 	nop.w
 800:	20000000 	.word	0x20000000
 804:	41ee8c21 	.word	0x41ee8c21
 808:	00000000 	.word	0x00000000
 80c:	4187d784 	.word	0x4187d784
 810:	00000000 	.word	0x00000000
 814:	41700000 	.word	0x41700000
 818:	58020400 	.word	0x58020400
 81c:	20000004 	.word	0x20000004
 820:	58021000 	.word	0x58021000
 824:	0800fedc 	.word	0x0800fedc

00000828 <run_sweep>:

void run_sweep() {
 828:	b580      	push	{r7, lr}
 82a:	b084      	sub	sp, #16
 82c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 82e:	2201      	movs	r2, #1
 830:	2102      	movs	r1, #2
 832:	482f      	ldr	r0, [pc, #188]	; (8f0 <run_sweep+0xc8>)
 834:	f000 f984 	bl	b40 <__HAL_GPIO_WritePin_veneer>
#endif

	//__disable_irq(); //Simon's code had IRQs disabled

	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 838:	2200      	movs	r2, #0
 83a:	2101      	movs	r1, #1
 83c:	482d      	ldr	r0, [pc, #180]	; (8f4 <run_sweep+0xcc>)
 83e:	f000 f97f 	bl	b40 <__HAL_GPIO_WritePin_veneer>
#ifdef MW_VERBOSE
	printf("Setting trigger output low \r\n");
#endif

	for (uint32_t i = 0; i < num_points; i++) {
 842:	2300      	movs	r3, #0
 844:	60fb      	str	r3, [r7, #12]
 846:	e039      	b.n	8bc <run_sweep+0x94>

		double fo = start_freq + (i * sweep_settings.step_size);
 848:	68fb      	ldr	r3, [r7, #12]
 84a:	ee07 3a90 	vmov	s15, r3
 84e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 852:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8e8 <run_sweep+0xc0>
 856:	ee27 6b06 	vmul.f64	d6, d7, d6
 85a:	4b27      	ldr	r3, [pc, #156]	; (8f8 <run_sweep+0xd0>)
 85c:	ed93 7b00 	vldr	d7, [r3]
 860:	ee36 7b07 	vadd.f64	d7, d6, d7
 864:	ed87 7b00 	vstr	d7, [r7]
		set_frequency_hz(fo);
 868:	ed97 0b00 	vldr	d0, [r7]
 86c:	f7ff ff4a 	bl	704 <set_frequency_hz>
			printf("Failure to program value to DAC \r\n");
			Error_Handler();
		}
#endif

		timer_delay(FAST_TIMER, DWELL_TIME_US);
 870:	4b22      	ldr	r3, [pc, #136]	; (8fc <run_sweep+0xd4>)
 872:	681b      	ldr	r3, [r3, #0]
 874:	f240 429c 	movw	r2, #1180	; 0x49c
 878:	4611      	mov	r1, r2
 87a:	4618      	mov	r0, r3
 87c:	f7ff fbf0 	bl	60 <timer_delay>

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 884:	481e      	ldr	r0, [pc, #120]	; (900 <run_sweep+0xd8>)
 886:	f000 f947 	bl	b18 <__HAL_GPIO_ReadPin_veneer>
 88a:	4603      	mov	r3, r0
 88c:	2b00      	cmp	r3, #0
 88e:	bf14      	ite	ne
 890:	2301      	movne	r3, #1
 892:	2300      	moveq	r3, #0
 894:	b2da      	uxtb	r2, r3
 896:	4b1b      	ldr	r3, [pc, #108]	; (904 <run_sweep+0xdc>)
 898:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 89a:	4b1a      	ldr	r3, [pc, #104]	; (904 <run_sweep+0xdc>)
 89c:	781b      	ldrb	r3, [r3, #0]
 89e:	b2db      	uxtb	r3, r3
 8a0:	2b00      	cmp	r3, #0
 8a2:	d008      	beq.n	8b6 <run_sweep+0x8e>
			printf("Terminating sweep early as blue button pressed \r\n");
 8a4:	4818      	ldr	r0, [pc, #96]	; (908 <run_sweep+0xe0>)
 8a6:	f000 f94f 	bl	b48 <__puts_veneer>
			HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 8aa:	2201      	movs	r2, #1
 8ac:	2101      	movs	r1, #1
 8ae:	4811      	ldr	r0, [pc, #68]	; (8f4 <run_sweep+0xcc>)
 8b0:	f000 f946 	bl	b40 <__HAL_GPIO_WritePin_veneer>
			break;
 8b4:	e007      	b.n	8c6 <run_sweep+0x9e>
	for (uint32_t i = 0; i < num_points; i++) {
 8b6:	68fb      	ldr	r3, [r7, #12]
 8b8:	3301      	adds	r3, #1
 8ba:	60fb      	str	r3, [r7, #12]
 8bc:	4b13      	ldr	r3, [pc, #76]	; (90c <run_sweep+0xe4>)
 8be:	681b      	ldr	r3, [r3, #0]
 8c0:	68fa      	ldr	r2, [r7, #12]
 8c2:	429a      	cmp	r2, r3
 8c4:	d3c0      	bcc.n	848 <run_sweep+0x20>
		}
	}

	//__enable_irq(); //Simon's code had IRQs disabled

	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 8c6:	2201      	movs	r2, #1
 8c8:	2101      	movs	r1, #1
 8ca:	480a      	ldr	r0, [pc, #40]	; (8f4 <run_sweep+0xcc>)
 8cc:	f000 f938 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	printf("Sweep complete: %lu points\r\n", num_points);
 8d0:	4b0e      	ldr	r3, [pc, #56]	; (90c <run_sweep+0xe4>)
 8d2:	681b      	ldr	r3, [r3, #0]
 8d4:	4619      	mov	r1, r3
 8d6:	480e      	ldr	r0, [pc, #56]	; (910 <run_sweep+0xe8>)
 8d8:	f000 f942 	bl	b60 <__printf_veneer>
	/* Zero and stop the DAC */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}
 8dc:	bf00      	nop
 8de:	3710      	adds	r7, #16
 8e0:	46bd      	mov	sp, r7
 8e2:	bd80      	pop	{r7, pc}
 8e4:	f3af 8000 	nop.w
 8e8:	00000000 	.word	0x00000000
 8ec:	4007d784 	.word	0x4007d784
 8f0:	58021000 	.word	0x58021000
 8f4:	58021800 	.word	0x58021800
 8f8:	0800fff8 	.word	0x0800fff8
 8fc:	20000004 	.word	0x20000004
 900:	58020800 	.word	0x58020800
 904:	20000694 	.word	0x20000694
 908:	0800ff20 	.word	0x0800ff20
 90c:	08010000 	.word	0x08010000
 910:	0800ff54 	.word	0x0800ff54

00000914 <MW_frequency_toggle>:

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
 914:	b580      	push	{r7, lr}
 916:	b090      	sub	sp, #64	; 0x40
 918:	af02      	add	r7, sp, #8
 91a:	ed87 0b02 	vstr	d0, [r7, #8]
 91e:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
 922:	4865      	ldr	r0, [pc, #404]	; (ab8 <MW_frequency_toggle+0x1a4>)
 924:	f000 f910 	bl	b48 <__puts_veneer>
	printf("Toggling between %f and %f Hz\r\n", f_one, f_two);
 928:	e9d7 2300 	ldrd	r2, r3, [r7]
 92c:	e9cd 2300 	strd	r2, r3, [sp]
 930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 934:	4861      	ldr	r0, [pc, #388]	; (abc <MW_frequency_toggle+0x1a8>)
 936:	f000 f913 	bl	b60 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
 93a:	ed9f 5b59 	vldr	d5, [pc, #356]	; aa0 <MW_frequency_toggle+0x18c>
 93e:	ed97 6b02 	vldr	d6, [r7, #8]
 942:	ee85 7b06 	vdiv.f64	d7, d5, d6
 946:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 94a:	ee17 3a90 	vmov	r3, s15
 94e:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
 950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 952:	2b01      	cmp	r3, #1
 954:	d00b      	beq.n	96e <MW_frequency_toggle+0x5a>
		while (k_one > 62 || k_one % 2) {
 956:	e002      	b.n	95e <MW_frequency_toggle+0x4a>
			k_one--;
 958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 95a:	3b01      	subs	r3, #1
 95c:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
 95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 960:	2b3e      	cmp	r3, #62	; 0x3e
 962:	d8f9      	bhi.n	958 <MW_frequency_toggle+0x44>
 964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 966:	f003 0301 	and.w	r3, r3, #1
 96a:	2b00      	cmp	r3, #0
 96c:	d1f4      	bne.n	958 <MW_frequency_toggle+0x44>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
 96e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; aa0 <MW_frequency_toggle+0x18c>
 972:	ed97 6b00 	vldr	d6, [r7]
 976:	ee85 7b06 	vdiv.f64	d7, d5, d6
 97a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 97e:	ee17 3a90 	vmov	r3, s15
 982:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
 984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 986:	2b01      	cmp	r3, #1
 988:	d00b      	beq.n	9a2 <MW_frequency_toggle+0x8e>
		while (k_two > 62 || k_two % 2) {
 98a:	e002      	b.n	992 <MW_frequency_toggle+0x7e>
			k_two--;
 98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 98e:	3b01      	subs	r3, #1
 990:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
 992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 994:	2b3e      	cmp	r3, #62	; 0x3e
 996:	d8f9      	bhi.n	98c <MW_frequency_toggle+0x78>
 998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 99a:	f003 0301 	and.w	r3, r3, #1
 99e:	2b00      	cmp	r3, #0
 9a0:	d1f4      	bne.n	98c <MW_frequency_toggle+0x78>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
 9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 9a4:	ee07 3a90 	vmov	s15, r3
 9a8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 9ac:	ed97 7b02 	vldr	d7, [r7, #8]
 9b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 9b4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; aa8 <MW_frequency_toggle+0x194>
 9b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 9bc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
 9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 9c2:	ee07 3a90 	vmov	s15, r3
 9c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 9ca:	ed97 7b00 	vldr	d7, [r7]
 9ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 9d2:	ed9f 5b35 	vldr	d5, [pc, #212]	; aa8 <MW_frequency_toggle+0x194>
 9d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 9da:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
 9de:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 9e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 9e6:	ee17 3a90 	vmov	r3, s15
 9ea:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
 9ec:	69fb      	ldr	r3, [r7, #28]
 9ee:	ee07 3a90 	vmov	s15, r3
 9f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 9f6:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 9fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 9fe:	ed9f 6b2c 	vldr	d6, [pc, #176]	; ab0 <MW_frequency_toggle+0x19c>
 a02:	ee27 7b06 	vmul.f64	d7, d7, d6
 a06:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 a0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 a0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 a12:	ee17 3a90 	vmov	r3, s15
 a16:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
 a18:	ed97 7b08 	vldr	d7, [r7, #32]
 a1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 a20:	ee17 3a90 	vmov	r3, s15
 a24:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
 a26:	697b      	ldr	r3, [r7, #20]
 a28:	ee07 3a90 	vmov	s15, r3
 a2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 a30:	ed97 6b08 	vldr	d6, [r7, #32]
 a34:	ee36 7b47 	vsub.f64	d7, d6, d7
 a38:	ed9f 6b1d 	vldr	d6, [pc, #116]	; ab0 <MW_frequency_toggle+0x19c>
 a3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 a40:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 a44:	ee37 7b06 	vadd.f64	d7, d7, d6
 a48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 a4c:	ee17 3a90 	vmov	r3, s15
 a50:	613b      	str	r3, [r7, #16]

	while (1) {
	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
 a52:	2301      	movs	r3, #1
 a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 a56:	69b9      	ldr	r1, [r7, #24]
 a58:	69f8      	ldr	r0, [r7, #28]
 a5a:	f7ff fdf3 	bl	644 <set_frequency>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 a5e:	2200      	movs	r2, #0
 a60:	2101      	movs	r1, #1
 a62:	4817      	ldr	r0, [pc, #92]	; (ac0 <MW_frequency_toggle+0x1ac>)
 a64:	f000 f86c 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
 a68:	4b16      	ldr	r3, [pc, #88]	; (ac4 <MW_frequency_toggle+0x1b0>)
 a6a:	681b      	ldr	r3, [r3, #0]
 a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 a70:	4618      	mov	r0, r3
 a72:	f7ff faf5 	bl	60 <timer_delay>
	set_frequency(N_two_INT, N_two_FRAC, k_two, MANUAL_MUTE); //Program necessary values for f_two
 a76:	2301      	movs	r3, #1
 a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 a7a:	6939      	ldr	r1, [r7, #16]
 a7c:	6978      	ldr	r0, [r7, #20]
 a7e:	f7ff fde1 	bl	644 <set_frequency>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 a82:	2201      	movs	r2, #1
 a84:	2101      	movs	r1, #1
 a86:	480e      	ldr	r0, [pc, #56]	; (ac0 <MW_frequency_toggle+0x1ac>)
 a88:	f000 f85a 	bl	b40 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
 a8c:	4b0d      	ldr	r3, [pc, #52]	; (ac4 <MW_frequency_toggle+0x1b0>)
 a8e:	681b      	ldr	r3, [r3, #0]
 a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 a94:	4618      	mov	r0, r3
 a96:	f7ff fae3 	bl	60 <timer_delay>
	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
 a9a:	e7da      	b.n	a52 <MW_frequency_toggle+0x13e>
 a9c:	f3af 8000 	nop.w
 aa0:	20000000 	.word	0x20000000
 aa4:	41ee8c21 	.word	0x41ee8c21
 aa8:	00000000 	.word	0x00000000
 aac:	4187d784 	.word	0x4187d784
 ab0:	00000000 	.word	0x00000000
 ab4:	41700000 	.word	0x41700000
 ab8:	0800ff74 	.word	0x0800ff74
 abc:	0800ff98 	.word	0x0800ff98
 ac0:	58021800 	.word	0x58021800
 ac4:	20000000 	.word	0x20000000

00000ac8 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
 ac8:	b580      	push	{r7, lr}
 aca:	b084      	sub	sp, #16
 acc:	af00      	add	r7, sp, #0
 ace:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
 ad0:	2300      	movs	r3, #0
 ad2:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
 ad4:	687b      	ldr	r3, [r7, #4]
 ad6:	2b1f      	cmp	r3, #31
 ad8:	d904      	bls.n	ae4 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
 ada:	480d      	ldr	r0, [pc, #52]	; (b10 <set_SDO_output+0x48>)
 adc:	f000 f834 	bl	b48 <__puts_veneer>
		Error_Handler();
 ae0:	f000 f836 	bl	b50 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
 ae4:	200f      	movs	r0, #15
 ae6:	f7ff fc45 	bl	374 <synth_readreg>
 aea:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
 aec:	68fb      	ldr	r3, [r7, #12]
 aee:	f023 031f 	bic.w	r3, r3, #31
 af2:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
 af4:	68fa      	ldr	r2, [r7, #12]
 af6:	687b      	ldr	r3, [r7, #4]
 af8:	4313      	orrs	r3, r2
 afa:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
 afc:	2301      	movs	r3, #1
 afe:	2200      	movs	r2, #0
 b00:	210f      	movs	r1, #15
 b02:	68f8      	ldr	r0, [r7, #12]
 b04:	f7ff fbbc 	bl	280 <synth_writereg>
}
 b08:	bf00      	nop
 b0a:	3710      	adds	r7, #16
 b0c:	46bd      	mov	sp, r7
 b0e:	bd80      	pop	{r7, pc}
 b10:	0800ffb8 	.word	0x0800ffb8
 b14:	00000000 	.word	0x00000000

00000b18 <__HAL_GPIO_ReadPin_veneer>:
 b18:	f85f f000 	ldr.w	pc, [pc]	; b1c <__HAL_GPIO_ReadPin_veneer+0x4>
 b1c:	08005acd 	.word	0x08005acd

00000b20 <__HAL_Delay_veneer>:
 b20:	f85f f000 	ldr.w	pc, [pc]	; b24 <__HAL_Delay_veneer+0x4>
 b24:	08002dd5 	.word	0x08002dd5

00000b28 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 b28:	f85f f000 	ldr.w	pc, [pc]	; b2c <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 b2c:	080061c1 	.word	0x080061c1

00000b30 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 b30:	f85f f000 	ldr.w	pc, [pc]	; b34 <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 b34:	08006407 	.word	0x08006407

00000b38 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 b38:	f85f f000 	ldr.w	pc, [pc]	; b3c <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 b3c:	08006461 	.word	0x08006461

00000b40 <__HAL_GPIO_WritePin_veneer>:
 b40:	f85f f000 	ldr.w	pc, [pc]	; b44 <__HAL_GPIO_WritePin_veneer+0x4>
 b44:	08005afd 	.word	0x08005afd

00000b48 <__puts_veneer>:
 b48:	f85f f000 	ldr.w	pc, [pc]	; b4c <__puts_veneer+0x4>
 b4c:	0800da51 	.word	0x0800da51

00000b50 <__Error_Handler_veneer>:
 b50:	f85f f000 	ldr.w	pc, [pc]	; b54 <__Error_Handler_veneer+0x4>
 b54:	08002245 	.word	0x08002245

00000b58 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 b58:	f85f f000 	ldr.w	pc, [pc]	; b5c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 b5c:	08006541 	.word	0x08006541

00000b60 <__printf_veneer>:
 b60:	f85f f000 	ldr.w	pc, [pc]	; b64 <__printf_veneer+0x4>
 b64:	0800d945 	.word	0x0800d945

00000b68 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 b68:	f85f f000 	ldr.w	pc, [pc]	; b6c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 b6c:	080063ad 	.word	0x080063ad

Disassembly of section .text:

08000e10 <__do_global_dtors_aux>:
 8000e10:	b510      	push	{r4, lr}
 8000e12:	4c05      	ldr	r4, [pc, #20]	; (8000e28 <__do_global_dtors_aux+0x18>)
 8000e14:	7823      	ldrb	r3, [r4, #0]
 8000e16:	b933      	cbnz	r3, 8000e26 <__do_global_dtors_aux+0x16>
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__do_global_dtors_aux+0x1c>)
 8000e1a:	b113      	cbz	r3, 8000e22 <__do_global_dtors_aux+0x12>
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <__do_global_dtors_aux+0x20>)
 8000e1e:	f3af 8000 	nop.w
 8000e22:	2301      	movs	r3, #1
 8000e24:	7023      	strb	r3, [r4, #0]
 8000e26:	bd10      	pop	{r4, pc}
 8000e28:	200002d0 	.word	0x200002d0
 8000e2c:	00000000 	.word	0x00000000
 8000e30:	0800fa98 	.word	0x0800fa98

08000e34 <frame_dummy>:
 8000e34:	b508      	push	{r3, lr}
 8000e36:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <frame_dummy+0x10>)
 8000e38:	b11b      	cbz	r3, 8000e42 <frame_dummy+0xe>
 8000e3a:	4903      	ldr	r1, [pc, #12]	; (8000e48 <frame_dummy+0x14>)
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <frame_dummy+0x18>)
 8000e3e:	f3af 8000 	nop.w
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	00000000 	.word	0x00000000
 8000e48:	200002d4 	.word	0x200002d4
 8000e4c:	0800fa98 	.word	0x0800fa98

08000e50 <strlen>:
 8000e50:	4603      	mov	r3, r0
 8000e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d1fb      	bne.n	8000e52 <strlen+0x2>
 8000e5a:	1a18      	subs	r0, r3, r0
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4770      	bx	lr

08000e60 <memchr>:
 8000e60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e64:	2a10      	cmp	r2, #16
 8000e66:	db2b      	blt.n	8000ec0 <memchr+0x60>
 8000e68:	f010 0f07 	tst.w	r0, #7
 8000e6c:	d008      	beq.n	8000e80 <memchr+0x20>
 8000e6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000e72:	3a01      	subs	r2, #1
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d02d      	beq.n	8000ed4 <memchr+0x74>
 8000e78:	f010 0f07 	tst.w	r0, #7
 8000e7c:	b342      	cbz	r2, 8000ed0 <memchr+0x70>
 8000e7e:	d1f6      	bne.n	8000e6e <memchr+0xe>
 8000e80:	b4f0      	push	{r4, r5, r6, r7}
 8000e82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000e86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000e8a:	f022 0407 	bic.w	r4, r2, #7
 8000e8e:	f07f 0700 	mvns.w	r7, #0
 8000e92:	2300      	movs	r3, #0
 8000e94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000e98:	3c08      	subs	r4, #8
 8000e9a:	ea85 0501 	eor.w	r5, r5, r1
 8000e9e:	ea86 0601 	eor.w	r6, r6, r1
 8000ea2:	fa85 f547 	uadd8	r5, r5, r7
 8000ea6:	faa3 f587 	sel	r5, r3, r7
 8000eaa:	fa86 f647 	uadd8	r6, r6, r7
 8000eae:	faa5 f687 	sel	r6, r5, r7
 8000eb2:	b98e      	cbnz	r6, 8000ed8 <memchr+0x78>
 8000eb4:	d1ee      	bne.n	8000e94 <memchr+0x34>
 8000eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000ebc:	f002 0207 	and.w	r2, r2, #7
 8000ec0:	b132      	cbz	r2, 8000ed0 <memchr+0x70>
 8000ec2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ec6:	3a01      	subs	r2, #1
 8000ec8:	ea83 0301 	eor.w	r3, r3, r1
 8000ecc:	b113      	cbz	r3, 8000ed4 <memchr+0x74>
 8000ece:	d1f8      	bne.n	8000ec2 <memchr+0x62>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	4770      	bx	lr
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	bf06      	itte	eq
 8000edc:	4635      	moveq	r5, r6
 8000ede:	3803      	subeq	r0, #3
 8000ee0:	3807      	subne	r0, #7
 8000ee2:	f015 0f01 	tst.w	r5, #1
 8000ee6:	d107      	bne.n	8000ef8 <memchr+0x98>
 8000ee8:	3001      	adds	r0, #1
 8000eea:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000eee:	bf02      	ittt	eq
 8000ef0:	3001      	addeq	r0, #1
 8000ef2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000ef6:	3001      	addeq	r0, #1
 8000ef8:	bcf0      	pop	{r4, r5, r6, r7}
 8000efa:	3801      	subs	r0, #1
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__aeabi_uldivmod>:
 8000f00:	b953      	cbnz	r3, 8000f18 <__aeabi_uldivmod+0x18>
 8000f02:	b94a      	cbnz	r2, 8000f18 <__aeabi_uldivmod+0x18>
 8000f04:	2900      	cmp	r1, #0
 8000f06:	bf08      	it	eq
 8000f08:	2800      	cmpeq	r0, #0
 8000f0a:	bf1c      	itt	ne
 8000f0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000f10:	f04f 30ff 	movne.w	r0, #4294967295
 8000f14:	f000 b974 	b.w	8001200 <__aeabi_idiv0>
 8000f18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f20:	f000 f806 	bl	8000f30 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4770      	bx	lr

08000f30 <__udivmoddi4>:
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	9d08      	ldr	r5, [sp, #32]
 8000f36:	4604      	mov	r4, r0
 8000f38:	468e      	mov	lr, r1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d14d      	bne.n	8000fda <__udivmoddi4+0xaa>
 8000f3e:	428a      	cmp	r2, r1
 8000f40:	4694      	mov	ip, r2
 8000f42:	d969      	bls.n	8001018 <__udivmoddi4+0xe8>
 8000f44:	fab2 f282 	clz	r2, r2
 8000f48:	b152      	cbz	r2, 8000f60 <__udivmoddi4+0x30>
 8000f4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f4e:	f1c2 0120 	rsb	r1, r2, #32
 8000f52:	fa20 f101 	lsr.w	r1, r0, r1
 8000f56:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f5a:	ea41 0e03 	orr.w	lr, r1, r3
 8000f5e:	4094      	lsls	r4, r2
 8000f60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f64:	0c21      	lsrs	r1, r4, #16
 8000f66:	fbbe f6f8 	udiv	r6, lr, r8
 8000f6a:	fa1f f78c 	uxth.w	r7, ip
 8000f6e:	fb08 e316 	mls	r3, r8, r6, lr
 8000f72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f76:	fb06 f107 	mul.w	r1, r6, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d90a      	bls.n	8000f94 <__udivmoddi4+0x64>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f86:	f080 811f 	bcs.w	80011c8 <__udivmoddi4+0x298>
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	f240 811c 	bls.w	80011c8 <__udivmoddi4+0x298>
 8000f90:	3e02      	subs	r6, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000fa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa4:	fb00 f707 	mul.w	r7, r0, r7
 8000fa8:	42a7      	cmp	r7, r4
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x92>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fb4:	f080 810a 	bcs.w	80011cc <__udivmoddi4+0x29c>
 8000fb8:	42a7      	cmp	r7, r4
 8000fba:	f240 8107 	bls.w	80011cc <__udivmoddi4+0x29c>
 8000fbe:	4464      	add	r4, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fc6:	1be4      	subs	r4, r4, r7
 8000fc8:	2600      	movs	r6, #0
 8000fca:	b11d      	cbz	r5, 8000fd4 <__udivmoddi4+0xa4>
 8000fcc:	40d4      	lsrs	r4, r2
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d909      	bls.n	8000ff2 <__udivmoddi4+0xc2>
 8000fde:	2d00      	cmp	r5, #0
 8000fe0:	f000 80ef 	beq.w	80011c2 <__udivmoddi4+0x292>
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	e9c5 0100 	strd	r0, r1, [r5]
 8000fea:	4630      	mov	r0, r6
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	fab3 f683 	clz	r6, r3
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d14a      	bne.n	8001090 <__udivmoddi4+0x160>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d302      	bcc.n	8001004 <__udivmoddi4+0xd4>
 8000ffe:	4282      	cmp	r2, r0
 8001000:	f200 80f9 	bhi.w	80011f6 <__udivmoddi4+0x2c6>
 8001004:	1a84      	subs	r4, r0, r2
 8001006:	eb61 0303 	sbc.w	r3, r1, r3
 800100a:	2001      	movs	r0, #1
 800100c:	469e      	mov	lr, r3
 800100e:	2d00      	cmp	r5, #0
 8001010:	d0e0      	beq.n	8000fd4 <__udivmoddi4+0xa4>
 8001012:	e9c5 4e00 	strd	r4, lr, [r5]
 8001016:	e7dd      	b.n	8000fd4 <__udivmoddi4+0xa4>
 8001018:	b902      	cbnz	r2, 800101c <__udivmoddi4+0xec>
 800101a:	deff      	udf	#255	; 0xff
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	2a00      	cmp	r2, #0
 8001022:	f040 8092 	bne.w	800114a <__udivmoddi4+0x21a>
 8001026:	eba1 010c 	sub.w	r1, r1, ip
 800102a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102e:	fa1f fe8c 	uxth.w	lr, ip
 8001032:	2601      	movs	r6, #1
 8001034:	0c20      	lsrs	r0, r4, #16
 8001036:	fbb1 f3f7 	udiv	r3, r1, r7
 800103a:	fb07 1113 	mls	r1, r7, r3, r1
 800103e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001042:	fb0e f003 	mul.w	r0, lr, r3
 8001046:	4288      	cmp	r0, r1
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x12c>
 800104a:	eb1c 0101 	adds.w	r1, ip, r1
 800104e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001052:	d202      	bcs.n	800105a <__udivmoddi4+0x12a>
 8001054:	4288      	cmp	r0, r1
 8001056:	f200 80cb 	bhi.w	80011f0 <__udivmoddi4+0x2c0>
 800105a:	4643      	mov	r3, r8
 800105c:	1a09      	subs	r1, r1, r0
 800105e:	b2a4      	uxth	r4, r4
 8001060:	fbb1 f0f7 	udiv	r0, r1, r7
 8001064:	fb07 1110 	mls	r1, r7, r0, r1
 8001068:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800106c:	fb0e fe00 	mul.w	lr, lr, r0
 8001070:	45a6      	cmp	lr, r4
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x156>
 8001074:	eb1c 0404 	adds.w	r4, ip, r4
 8001078:	f100 31ff 	add.w	r1, r0, #4294967295
 800107c:	d202      	bcs.n	8001084 <__udivmoddi4+0x154>
 800107e:	45a6      	cmp	lr, r4
 8001080:	f200 80bb 	bhi.w	80011fa <__udivmoddi4+0x2ca>
 8001084:	4608      	mov	r0, r1
 8001086:	eba4 040e 	sub.w	r4, r4, lr
 800108a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800108e:	e79c      	b.n	8000fca <__udivmoddi4+0x9a>
 8001090:	f1c6 0720 	rsb	r7, r6, #32
 8001094:	40b3      	lsls	r3, r6
 8001096:	fa22 fc07 	lsr.w	ip, r2, r7
 800109a:	ea4c 0c03 	orr.w	ip, ip, r3
 800109e:	fa20 f407 	lsr.w	r4, r0, r7
 80010a2:	fa01 f306 	lsl.w	r3, r1, r6
 80010a6:	431c      	orrs	r4, r3
 80010a8:	40f9      	lsrs	r1, r7
 80010aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010ae:	fa00 f306 	lsl.w	r3, r0, r6
 80010b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80010b6:	0c20      	lsrs	r0, r4, #16
 80010b8:	fa1f fe8c 	uxth.w	lr, ip
 80010bc:	fb09 1118 	mls	r1, r9, r8, r1
 80010c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010c4:	fb08 f00e 	mul.w	r0, r8, lr
 80010c8:	4288      	cmp	r0, r1
 80010ca:	fa02 f206 	lsl.w	r2, r2, r6
 80010ce:	d90b      	bls.n	80010e8 <__udivmoddi4+0x1b8>
 80010d0:	eb1c 0101 	adds.w	r1, ip, r1
 80010d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80010d8:	f080 8088 	bcs.w	80011ec <__udivmoddi4+0x2bc>
 80010dc:	4288      	cmp	r0, r1
 80010de:	f240 8085 	bls.w	80011ec <__udivmoddi4+0x2bc>
 80010e2:	f1a8 0802 	sub.w	r8, r8, #2
 80010e6:	4461      	add	r1, ip
 80010e8:	1a09      	subs	r1, r1, r0
 80010ea:	b2a4      	uxth	r4, r4
 80010ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80010f0:	fb09 1110 	mls	r1, r9, r0, r1
 80010f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80010f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80010fc:	458e      	cmp	lr, r1
 80010fe:	d908      	bls.n	8001112 <__udivmoddi4+0x1e2>
 8001100:	eb1c 0101 	adds.w	r1, ip, r1
 8001104:	f100 34ff 	add.w	r4, r0, #4294967295
 8001108:	d26c      	bcs.n	80011e4 <__udivmoddi4+0x2b4>
 800110a:	458e      	cmp	lr, r1
 800110c:	d96a      	bls.n	80011e4 <__udivmoddi4+0x2b4>
 800110e:	3802      	subs	r0, #2
 8001110:	4461      	add	r1, ip
 8001112:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001116:	fba0 9402 	umull	r9, r4, r0, r2
 800111a:	eba1 010e 	sub.w	r1, r1, lr
 800111e:	42a1      	cmp	r1, r4
 8001120:	46c8      	mov	r8, r9
 8001122:	46a6      	mov	lr, r4
 8001124:	d356      	bcc.n	80011d4 <__udivmoddi4+0x2a4>
 8001126:	d053      	beq.n	80011d0 <__udivmoddi4+0x2a0>
 8001128:	b15d      	cbz	r5, 8001142 <__udivmoddi4+0x212>
 800112a:	ebb3 0208 	subs.w	r2, r3, r8
 800112e:	eb61 010e 	sbc.w	r1, r1, lr
 8001132:	fa01 f707 	lsl.w	r7, r1, r7
 8001136:	fa22 f306 	lsr.w	r3, r2, r6
 800113a:	40f1      	lsrs	r1, r6
 800113c:	431f      	orrs	r7, r3
 800113e:	e9c5 7100 	strd	r7, r1, [r5]
 8001142:	2600      	movs	r6, #0
 8001144:	4631      	mov	r1, r6
 8001146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800114a:	f1c2 0320 	rsb	r3, r2, #32
 800114e:	40d8      	lsrs	r0, r3
 8001150:	fa0c fc02 	lsl.w	ip, ip, r2
 8001154:	fa21 f303 	lsr.w	r3, r1, r3
 8001158:	4091      	lsls	r1, r2
 800115a:	4301      	orrs	r1, r0
 800115c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001160:	fa1f fe8c 	uxth.w	lr, ip
 8001164:	fbb3 f0f7 	udiv	r0, r3, r7
 8001168:	fb07 3610 	mls	r6, r7, r0, r3
 800116c:	0c0b      	lsrs	r3, r1, #16
 800116e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001172:	fb00 f60e 	mul.w	r6, r0, lr
 8001176:	429e      	cmp	r6, r3
 8001178:	fa04 f402 	lsl.w	r4, r4, r2
 800117c:	d908      	bls.n	8001190 <__udivmoddi4+0x260>
 800117e:	eb1c 0303 	adds.w	r3, ip, r3
 8001182:	f100 38ff 	add.w	r8, r0, #4294967295
 8001186:	d22f      	bcs.n	80011e8 <__udivmoddi4+0x2b8>
 8001188:	429e      	cmp	r6, r3
 800118a:	d92d      	bls.n	80011e8 <__udivmoddi4+0x2b8>
 800118c:	3802      	subs	r0, #2
 800118e:	4463      	add	r3, ip
 8001190:	1b9b      	subs	r3, r3, r6
 8001192:	b289      	uxth	r1, r1
 8001194:	fbb3 f6f7 	udiv	r6, r3, r7
 8001198:	fb07 3316 	mls	r3, r7, r6, r3
 800119c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011a0:	fb06 f30e 	mul.w	r3, r6, lr
 80011a4:	428b      	cmp	r3, r1
 80011a6:	d908      	bls.n	80011ba <__udivmoddi4+0x28a>
 80011a8:	eb1c 0101 	adds.w	r1, ip, r1
 80011ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80011b0:	d216      	bcs.n	80011e0 <__udivmoddi4+0x2b0>
 80011b2:	428b      	cmp	r3, r1
 80011b4:	d914      	bls.n	80011e0 <__udivmoddi4+0x2b0>
 80011b6:	3e02      	subs	r6, #2
 80011b8:	4461      	add	r1, ip
 80011ba:	1ac9      	subs	r1, r1, r3
 80011bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80011c0:	e738      	b.n	8001034 <__udivmoddi4+0x104>
 80011c2:	462e      	mov	r6, r5
 80011c4:	4628      	mov	r0, r5
 80011c6:	e705      	b.n	8000fd4 <__udivmoddi4+0xa4>
 80011c8:	4606      	mov	r6, r0
 80011ca:	e6e3      	b.n	8000f94 <__udivmoddi4+0x64>
 80011cc:	4618      	mov	r0, r3
 80011ce:	e6f8      	b.n	8000fc2 <__udivmoddi4+0x92>
 80011d0:	454b      	cmp	r3, r9
 80011d2:	d2a9      	bcs.n	8001128 <__udivmoddi4+0x1f8>
 80011d4:	ebb9 0802 	subs.w	r8, r9, r2
 80011d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011dc:	3801      	subs	r0, #1
 80011de:	e7a3      	b.n	8001128 <__udivmoddi4+0x1f8>
 80011e0:	4646      	mov	r6, r8
 80011e2:	e7ea      	b.n	80011ba <__udivmoddi4+0x28a>
 80011e4:	4620      	mov	r0, r4
 80011e6:	e794      	b.n	8001112 <__udivmoddi4+0x1e2>
 80011e8:	4640      	mov	r0, r8
 80011ea:	e7d1      	b.n	8001190 <__udivmoddi4+0x260>
 80011ec:	46d0      	mov	r8, sl
 80011ee:	e77b      	b.n	80010e8 <__udivmoddi4+0x1b8>
 80011f0:	3b02      	subs	r3, #2
 80011f2:	4461      	add	r1, ip
 80011f4:	e732      	b.n	800105c <__udivmoddi4+0x12c>
 80011f6:	4630      	mov	r0, r6
 80011f8:	e709      	b.n	800100e <__udivmoddi4+0xde>
 80011fa:	4464      	add	r4, ip
 80011fc:	3802      	subs	r0, #2
 80011fe:	e742      	b.n	8001086 <__udivmoddi4+0x156>

08001200 <__aeabi_idiv0>:
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 800120c:	1d39      	adds	r1, r7, #4
 800120e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001212:	2201      	movs	r2, #1
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <__io_putchar+0x20>)
 8001216:	f00a fdff 	bl	800be18 <HAL_UART_Transmit>
	return ch;
 800121a:	687b      	ldr	r3, [r7, #4]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200005f8 	.word	0x200005f8

08001228 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8001230:	2101      	movs	r1, #1
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8001234:	f004 fc7b 	bl	8005b2e <HAL_GPIO_TogglePin>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	58020400 	.word	0x58020400

08001244 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d11e      	bne.n	8001292 <HAL_HRTIM_Compare2EventCallback+0x4e>
#ifdef ATTENUATOR_CODE
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8001254:	7b3b      	ldrb	r3, [r7, #12]
 8001256:	f36f 0300 	bfc	r3, #0, #1
 800125a:	733b      	strb	r3, [r7, #12]
 800125c:	7b3b      	ldrb	r3, [r7, #12]
 800125e:	f36f 0341 	bfc	r3, #1, #1
 8001262:	733b      	strb	r3, [r7, #12]
 8001264:	7b3b      	ldrb	r3, [r7, #12]
 8001266:	f36f 0382 	bfc	r3, #2, #1
 800126a:	733b      	strb	r3, [r7, #12]
 800126c:	7b3b      	ldrb	r3, [r7, #12]
 800126e:	f36f 03c3 	bfc	r3, #3, #1
 8001272:	733b      	strb	r3, [r7, #12]
 8001274:	7b3b      	ldrb	r3, [r7, #12]
 8001276:	f36f 1304 	bfc	r3, #4, #1
 800127a:	733b      	strb	r3, [r7, #12]
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	733b      	strb	r3, [r7, #12]
 8001284:	7b3b      	ldrb	r3, [r7, #12]
 8001286:	f36f 1386 	bfc	r3, #6, #1
 800128a:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 800128c:	7b38      	ldrb	r0, [r7, #12]
 800128e:	f00e fc2b 	bl	800fae8 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE
	}

}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d175      	bne.n	8001398 <HAL_HRTIM_Compare3EventCallback+0xfc>
#ifdef ATTENUATOR_CODE
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 80012ac:	2300      	movs	r3, #0
 80012ae:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 80012b0:	7a38      	ldrb	r0, [r7, #8]
 80012b2:	f00e fc19 	bl	800fae8 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012b8:	ed93 5b00 	vldr	d5, [r3]
 80012bc:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012be:	ed93 6b04 	vldr	d6, [r3, #16]
 80012c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80012c6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012d0:	ed93 7b04 	vldr	d7, [r3, #16]
 80012d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012d8:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012de:	ed93 5b02 	vldr	d5, [r3, #8]
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012e4:	ed93 6b04 	vldr	d6, [r3, #16]
 80012e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80012ec:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80012f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 80012fe:	ed93 7b04 	vldr	d7, [r3, #16]
 8001302:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001306:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 800130a:	ed97 6b04 	vldr	d6, [r7, #16]
 800130e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001312:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001318:	ed93 6b04 	vldr	d6, [r3, #16]
 800131c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001320:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001324:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001328:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800132c:	ee17 3a90 	vmov	r3, s15
 8001330:	60fb      	str	r3, [r7, #12]
//		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
//		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 800133c:	f00e fbb8 	bl	800fab0 <__stop_pop_veneer>
			i = 0;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
			start_pop();
 8001346:	f00e fbbf 	bl	800fac8 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_HRTIM_Compare3EventCallback+0x104>)
 8001358:	ed93 7b04 	vldr	d7, [r3, #16]
 800135c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001360:	ed97 7b06 	vldr	d7, [r7, #24]
 8001364:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001368:	eeb0 0b47 	vmov.f64	d0, d7
 800136c:	f00e fba4 	bl	800fab8 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_HRTIM_Compare3EventCallback+0x108>)
 8001378:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 8001382:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8001384:	2102      	movs	r1, #2
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <HAL_HRTIM_Compare3EventCallback+0x110>)
 8001388:	f004 fbd1 	bl	8005b2e <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_HRTIM_Compare3EventCallback+0x10c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <HAL_HRTIM_Compare3EventCallback+0x114>)
 8001394:	f00c fad6 	bl	800d944 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	0800ffe0 	.word	0x0800ffe0
 80013a4:	200006a0 	.word	0x200006a0
 80013a8:	20000690 	.word	0x20000690
 80013ac:	58021000 	.word	0x58021000
 80013b0:	0800fba8 	.word	0x0800fba8

080013b4 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80013d2:	4ab5      	ldr	r2, [pc, #724]	; (80016a8 <main+0x2dc>)
 80013d4:	4bb5      	ldr	r3, [pc, #724]	; (80016ac <main+0x2e0>)
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	49b5      	ldr	r1, [pc, #724]	; (80016b0 <main+0x2e4>)
 80013dc:	48b3      	ldr	r0, [pc, #716]	; (80016ac <main+0x2e0>)
 80013de:	f00b fe59 	bl	800d094 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80013e2:	4bb4      	ldr	r3, [pc, #720]	; (80016b4 <main+0x2e8>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d11b      	bne.n	8001426 <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013ee:	f3bf 8f4f 	dsb	sy
}
 80013f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013f4:	f3bf 8f6f 	isb	sy
}
 80013f8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013fa:	4bae      	ldr	r3, [pc, #696]	; (80016b4 <main+0x2e8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001402:	f3bf 8f4f 	dsb	sy
}
 8001406:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001408:	f3bf 8f6f 	isb	sy
}
 800140c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800140e:	4ba9      	ldr	r3, [pc, #676]	; (80016b4 <main+0x2e8>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4aa8      	ldr	r2, [pc, #672]	; (80016b4 <main+0x2e8>)
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800141a:	f3bf 8f4f 	dsb	sy
}
 800141e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001420:	f3bf 8f6f 	isb	sy
}
 8001424:	e000      	b.n	8001428 <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001426:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001428:	4ba2      	ldr	r3, [pc, #648]	; (80016b4 <main+0x2e8>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d138      	bne.n	80014a6 <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001434:	4b9f      	ldr	r3, [pc, #636]	; (80016b4 <main+0x2e8>)
 8001436:	2200      	movs	r2, #0
 8001438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800143c:	f3bf 8f4f 	dsb	sy
}
 8001440:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001442:	4b9c      	ldr	r3, [pc, #624]	; (80016b4 <main+0x2e8>)
 8001444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001448:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	0b5b      	lsrs	r3, r3, #13
 800144e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001452:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800145c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001466:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800146c:	4991      	ldr	r1, [pc, #580]	; (80016b4 <main+0x2e8>)
 800146e:	4313      	orrs	r3, r2
 8001470:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1e5a      	subs	r2, r3, #1
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ef      	bne.n	800145e <main+0x92>
    } while(sets-- != 0U);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	60ba      	str	r2, [r7, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e5      	bne.n	8001454 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001488:	f3bf 8f4f 	dsb	sy
}
 800148c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800148e:	4b89      	ldr	r3, [pc, #548]	; (80016b4 <main+0x2e8>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a88      	ldr	r2, [pc, #544]	; (80016b4 <main+0x2e8>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800149a:	f3bf 8f4f 	dsb	sy
}
 800149e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014a0:	f3bf 8f6f 	isb	sy
}
 80014a4:	e000      	b.n	80014a8 <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014a6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f001 fc02 	bl	8002cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f000 f93e 	bl	800172c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f000 fd4a 	bl	8001f48 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80014b4:	f000 fc2a 	bl	8001d0c <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80014b8:	f000 fa58 	bl	800196c <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80014bc:	f000 fcf6 	bl	8001eac <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80014c0:	f000 fca6 	bl	8001e10 <MX_TIM3_Init>
  MX_TIM1_Init();
 80014c4:	f000 fc50 	bl	8001d68 <MX_TIM1_Init>
  MX_HRTIM_Init();
 80014c8:	f000 face 	bl	8001a68 <MX_HRTIM_Init>
  MX_ADC3_Init();
 80014cc:	f000 f9ec 	bl	80018a8 <MX_ADC3_Init>
  MX_ETH_Init();
 80014d0:	f000 fa7e 	bl	80019d0 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 80014d4:	4878      	ldr	r0, [pc, #480]	; (80016b8 <main+0x2ec>)
 80014d6:	f00c fa35 	bl	800d944 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80014da:	4978      	ldr	r1, [pc, #480]	; (80016bc <main+0x2f0>)
 80014dc:	4878      	ldr	r0, [pc, #480]	; (80016c0 <main+0x2f4>)
 80014de:	f00c fa31 	bl	800d944 <iprintf>

#ifdef SYNTH_ENABLE
	if (init_synthesiser(MW_power) != SUCCESS) {
 80014e2:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <main+0x2f8>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f00e faf6 	bl	800fad8 <__init_synthesiser_veneer>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <main+0x130>
		printf("Synthesiser initialisation failed!\r\n");
 80014f2:	4875      	ldr	r0, [pc, #468]	; (80016c8 <main+0x2fc>)
 80014f4:	f00c faac 	bl	800da50 <puts>
		Error_Handler();
 80014f8:	f000 fea4 	bl	8002244 <Error_Handler>
	}
#ifdef MW_VERBOSE
	printf("LO2GAIN set at: 0x%x \r\n", MW_power);
 80014fc:	4b71      	ldr	r3, [pc, #452]	; (80016c4 <main+0x2f8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	4872      	ldr	r0, [pc, #456]	; (80016cc <main+0x300>)
 8001504:	f00c fa1e 	bl	800d944 <iprintf>
#endif	//MW_VERBOSE
#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 8001508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150c:	4870      	ldr	r0, [pc, #448]	; (80016d0 <main+0x304>)
 800150e:	f006 f81d 	bl	800754c <HAL_LPTIM_Counter_Start_IT>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <main+0x156>
		printf("Failed to start slow flashing LED!\r\n");
 8001518:	486e      	ldr	r0, [pc, #440]	; (80016d4 <main+0x308>)
 800151a:	f00c fa99 	bl	800da50 <puts>
		Error_Handler();
 800151e:	f000 fe91 	bl	8002244 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001522:	2100      	movs	r1, #0
 8001524:	486c      	ldr	r0, [pc, #432]	; (80016d8 <main+0x30c>)
 8001526:	f003 fb48 	bl	8004bba <HAL_DAC_Start>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d004      	beq.n	800153a <main+0x16e>
		printf("Failure to initialise DAC \r\n");
 8001530:	486a      	ldr	r0, [pc, #424]	; (80016dc <main+0x310>)
 8001532:	f00c fa8d 	bl	800da50 <puts>
		Error_Handler();
 8001536:	f000 fe85 	bl	8002244 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 800153a:	4869      	ldr	r0, [pc, #420]	; (80016e0 <main+0x314>)
 800153c:	f00c fa88 	bl	800da50 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001540:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	4863      	ldr	r0, [pc, #396]	; (80016d8 <main+0x30c>)
 800154a:	f003 fb88 	bl	8004c5e <HAL_DAC_SetValue>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <main+0x192>
			printf("DAC setup failed!\r\n");
 8001554:	4863      	ldr	r0, [pc, #396]	; (80016e4 <main+0x318>)
 8001556:	f00c fa7b 	bl	800da50 <puts>
		Error_Handler();
 800155a:	f000 fe73 	bl	8002244 <Error_Handler>
//	printf("Setting spare SMA output high \r\n");
//	HAL_GPIO_WritePin(SPARE_OUT_GPIO_Port, SPARE_OUT_Pin, GPIO_PIN_RESET); // Sets spare SMA output low

	/* Laser tuning pin */
//	LASER_TUNING_GPIO_Port, LASER_TUNING_Pin
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001564:	4860      	ldr	r0, [pc, #384]	; (80016e8 <main+0x31c>)
 8001566:	f004 fac9 	bl	8005afc <HAL_GPIO_WritePin>
	printf("Requesting FPGA CW absorption \r\n");
 800156a:	4860      	ldr	r0, [pc, #384]	; (80016ec <main+0x320>)
 800156c:	f00c fa70 	bl	800da50 <puts>
//	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low

	/* MW invalid */
//	MW_INVALID_GPIO_Port, MW_INVALID_Pin
//	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); // MW_invalid output high
	printf("Setting MW invalid output low \r\n");
 8001570:	485f      	ldr	r0, [pc, #380]	; (80016f0 <main+0x324>)
 8001572:	f00c fa6d 	bl	800da50 <puts>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
 8001576:	2200      	movs	r2, #0
 8001578:	2102      	movs	r1, #2
 800157a:	485b      	ldr	r0, [pc, #364]	; (80016e8 <main+0x31c>)
 800157c:	f004 fabe 	bl	8005afc <HAL_GPIO_WritePin>

	/* Fire up the ADC */
	// external trigger, single conversion selected in ioc file
	// calibrate ADC for better accuracy and start it w/ interrupt
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001580:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001584:	2100      	movs	r1, #0
 8001586:	485b      	ldr	r0, [pc, #364]	; (80016f4 <main+0x328>)
 8001588:	f003 f950 	bl	800482c <HAL_ADCEx_Calibration_Start>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <main+0x1d0>
		printf("ADC calibration failure \r\n");
 8001592:	4859      	ldr	r0, [pc, #356]	; (80016f8 <main+0x32c>)
 8001594:	f00c fa5c 	bl	800da50 <puts>
		Error_Handler();
 8001598:	f000 fe54 	bl	8002244 <Error_Handler>
	}
	printf("ADC calibrated successfully \r\n");
 800159c:	4857      	ldr	r0, [pc, #348]	; (80016fc <main+0x330>)
 800159e:	f00c fa57 	bl	800da50 <puts>
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80015a2:	4854      	ldr	r0, [pc, #336]	; (80016f4 <main+0x328>)
 80015a4:	f002 f82e 	bl	8003604 <HAL_ADC_Start_IT>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <main+0x1ec>
		printf("Failed to start ADC with interrupt capability \r\n");
 80015ae:	4854      	ldr	r0, [pc, #336]	; (8001700 <main+0x334>)
 80015b0:	f00c fa4e 	bl	800da50 <puts>
	                Error_Handler();
 80015b4:	f000 fe46 	bl	8002244 <Error_Handler>
	}
	printf("ADC interrupt callback enabled \r\n");
 80015b8:	4852      	ldr	r0, [pc, #328]	; (8001704 <main+0x338>)
 80015ba:	f00c fa49 	bl	800da50 <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80015be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c2:	4851      	ldr	r0, [pc, #324]	; (8001708 <main+0x33c>)
 80015c4:	f004 fa82 	bl	8005acc <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <main+0x340>)
 80015d6:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <main+0x340>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d048      	beq.n	8001674 <main+0x2a8>
			printf("Blue button pressed....\r\n");
 80015e2:	484b      	ldr	r0, [pc, #300]	; (8001710 <main+0x344>)
 80015e4:	f00c fa34 	bl	800da50 <puts>
			printf("Requesting FPGA POP \r\n");
 80015e8:	484a      	ldr	r0, [pc, #296]	; (8001714 <main+0x348>)
 80015ea:	f00c fa31 	bl	800da50 <puts>
			HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f4:	483c      	ldr	r0, [pc, #240]	; (80016e8 <main+0x31c>)
 80015f6:	f004 fa81 	bl	8005afc <HAL_GPIO_WritePin>
			//set_MW_power(0x03); //set maximum MW power to improve contrast
			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
			//MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip

			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <main+0x34c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d018      	beq.n	8001636 <main+0x26a>
				++MW_power; //increase MW_power value by 1
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <main+0x2f8>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <main+0x2f8>)
 800160e:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <main+0x2f8>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d902      	bls.n	800161e <main+0x252>
					MW_power = 0;
 8001618:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <main+0x2f8>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <main+0x2f8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f00e fa4c 	bl	800fac0 <__set_MW_power_veneer>
#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <main+0x2f8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	483b      	ldr	r0, [pc, #236]	; (800171c <main+0x350>)
 8001630:	f00c f988 	bl	800d944 <iprintf>
 8001634:	e019      	b.n	800166a <main+0x29e>
#endif //MW_VERBOSE
			} else {
					printf("Initiating sweep.\r\n");
 8001636:	483a      	ldr	r0, [pc, #232]	; (8001720 <main+0x354>)
 8001638:	f00c fa0a 	bl	800da50 <puts>
					mw_sweep_started = true;
 800163c:	4b36      	ldr	r3, [pc, #216]	; (8001718 <main+0x34c>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
			}
			while(blue_button_status) {//remain here polling button until it is released
 8001642:	e012      	b.n	800166a <main+0x29e>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 8001644:	4b37      	ldr	r3, [pc, #220]	; (8001724 <main+0x358>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2164      	movs	r1, #100	; 0x64
 800164a:	4618      	mov	r0, r3
 800164c:	f00e fa40 	bl	800fad0 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001654:	482c      	ldr	r0, [pc, #176]	; (8001708 <main+0x33c>)
 8001656:	f004 fa39 	bl	8005acc <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <main+0x340>)
 8001668:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <main+0x340>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e7      	bne.n	8001644 <main+0x278>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <main+0x34c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d09f      	beq.n	80015be <main+0x1f2>
			/* Run the frequency sweep */
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); //turn on red LED
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001684:	4818      	ldr	r0, [pc, #96]	; (80016e8 <main+0x31c>)
 8001686:	f004 fa39 	bl	8005afc <HAL_GPIO_WritePin>
			run_sweep();
 800168a:	f00e fa29 	bl	800fae0 <__run_sweep_veneer>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001694:	4814      	ldr	r0, [pc, #80]	; (80016e8 <main+0x31c>)
 8001696:	f004 fa31 	bl	8005afc <HAL_GPIO_WritePin>
			//printf("Sweep complete.\r\n");
			printf("LO2GAIN: 0x%x \r\n", MW_power);
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <main+0x2f8>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	4821      	ldr	r0, [pc, #132]	; (8001728 <main+0x35c>)
 80016a2:	f00c f94f 	bl	800d944 <iprintf>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80016a6:	e78a      	b.n	80015be <main+0x1f2>
 80016a8:	00000b70 	.word	0x00000b70
 80016ac:	00000000 	.word	0x00000000
 80016b0:	08000298 	.word	0x08000298
 80016b4:	e000ed00 	.word	0xe000ed00
 80016b8:	0800fbc0 	.word	0x0800fbc0
 80016bc:	0800fbc4 	.word	0x0800fbc4
 80016c0:	0800fbe0 	.word	0x0800fbe0
 80016c4:	20000008 	.word	0x20000008
 80016c8:	0800fc0c 	.word	0x0800fc0c
 80016cc:	0800fc30 	.word	0x0800fc30
 80016d0:	20000528 	.word	0x20000528
 80016d4:	0800fc48 	.word	0x0800fc48
 80016d8:	20000388 	.word	0x20000388
 80016dc:	0800fc6c 	.word	0x0800fc6c
 80016e0:	0800fc88 	.word	0x0800fc88
 80016e4:	0800fca8 	.word	0x0800fca8
 80016e8:	58020400 	.word	0x58020400
 80016ec:	0800fcbc 	.word	0x0800fcbc
 80016f0:	0800fcdc 	.word	0x0800fcdc
 80016f4:	20000324 	.word	0x20000324
 80016f8:	0800fcfc 	.word	0x0800fcfc
 80016fc:	0800fd18 	.word	0x0800fd18
 8001700:	0800fd38 	.word	0x0800fd38
 8001704:	0800fd68 	.word	0x0800fd68
 8001708:	58020800 	.word	0x58020800
 800170c:	20000694 	.word	0x20000694
 8001710:	0800fd8c 	.word	0x0800fd8c
 8001714:	0800fda8 	.word	0x0800fda8
 8001718:	2000068d 	.word	0x2000068d
 800171c:	0800fdc0 	.word	0x0800fdc0
 8001720:	0800fddc 	.word	0x0800fddc
 8001724:	20000000 	.word	0x20000000
 8001728:	0800fdf0 	.word	0x0800fdf0

0800172c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0a4      	sub	sp, #144	; 0x90
 8001730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001732:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001736:	224c      	movs	r2, #76	; 0x4c
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f00b fcb8 	bl	800d0b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	2220      	movs	r2, #32
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00b fcb1 	bl	800d0b0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001760:	2002      	movs	r0, #2
 8001762:	f006 fa53 	bl	8007c0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b4c      	ldr	r3, [pc, #304]	; (800189c <SystemClock_Config+0x170>)
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	4a4b      	ldr	r2, [pc, #300]	; (800189c <SystemClock_Config+0x170>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001776:	4b49      	ldr	r3, [pc, #292]	; (800189c <SystemClock_Config+0x170>)
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <SystemClock_Config+0x174>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a46      	ldr	r2, [pc, #280]	; (80018a0 <SystemClock_Config+0x174>)
 8001786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <SystemClock_Config+0x174>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001798:	bf00      	nop
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <SystemClock_Config+0x174>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a6:	d1f8      	bne.n	800179a <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017a8:	f006 fa20 	bl	8007bec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017ac:	f001 fb36 	bl	8002e1c <HAL_GetREVID>
 80017b0:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <SystemClock_Config+0x178>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	4a3b      	ldr	r2, [pc, #236]	; (80018a4 <SystemClock_Config+0x178>)
 80017b6:	f023 0318 	bic.w	r3, r3, #24
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80017bc:	2325      	movs	r3, #37	; 0x25
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017c6:	2301      	movs	r3, #1
 80017c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017ca:	2301      	movs	r3, #1
 80017cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ce:	2302      	movs	r3, #2
 80017d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d2:	2302      	movs	r3, #2
 80017d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017d6:	2301      	movs	r3, #1
 80017d8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 80017da:	2350      	movs	r3, #80	; 0x50
 80017dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017de:	2302      	movs	r3, #2
 80017e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017e2:	2304      	movs	r3, #4
 80017e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80017ec:	230c      	movs	r3, #12
 80017ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001802:	4618      	mov	r0, r3
 8001804:	f006 fa3c 	bl	8007c80 <HAL_RCC_OscConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800180e:	f000 fd19 	bl	8002244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001812:	233f      	movs	r3, #63	; 0x3f
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2303      	movs	r3, #3
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800181e:	2309      	movs	r3, #9
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800182a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	2101      	movs	r1, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f006 fe7a 	bl	8008534 <HAL_RCC_ClockConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001846:	f000 fcfd 	bl	8002244 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800184a:	f007 f829 	bl	80088a0 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <SystemClock_Config+0x178>)
 8001850:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001854:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <SystemClock_Config+0x178>)
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <SystemClock_Config+0x178>)
 8001860:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001874:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800187a:	f240 53b7 	movw	r3, #1463	; 0x5b7
 800187e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001880:	2322      	movs	r3, #34	; 0x22
 8001882:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001884:	2320      	movs	r3, #32
 8001886:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4618      	mov	r0, r3
 800188e:	f009 fda3 	bl	800b3d8 <HAL_RCCEx_CRSConfig>
}
 8001892:	bf00      	nop
 8001894:	3790      	adds	r7, #144	; 0x90
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	58000400 	.word	0x58000400
 80018a0:	58024800 	.word	0x58024800
 80018a4:	58024400 	.word	0x58024400

080018a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
 80018bc:	615a      	str	r2, [r3, #20]
 80018be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018c2:	4a29      	ldr	r2, [pc, #164]	; (8001968 <MX_ADC3_Init+0xc0>)
 80018c4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018d4:	2204      	movs	r2, #4
 80018d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018da:	2200      	movs	r2, #0
 80018dc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018de:	4b21      	ldr	r3, [pc, #132]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018f2:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_ADC3_Init+0xbc>)
 80018fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_ADC3_Init+0xbc>)
 8001902:	2200      	movs	r2, #0
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_ADC3_Init+0xbc>)
 8001908:	2200      	movs	r2, #0
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_ADC3_Init+0xbc>)
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_ADC3_Init+0xbc>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800191a:	4812      	ldr	r0, [pc, #72]	; (8001964 <MX_ADC3_Init+0xbc>)
 800191c:	f001 fcd0 	bl	80032c0 <HAL_ADC_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8001926:	f000 fc8d 	bl	8002244 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800192a:	2301      	movs	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800192e:	2306      	movs	r3, #6
 8001930:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001936:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800193a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800193c:	2304      	movs	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_ADC3_Init+0xbc>)
 800194e:	f002 f9f5 	bl	8003d3c <HAL_ADC_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001958:	f000 fc74 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000324 	.word	0x20000324
 8001968:	58026000 	.word	0x58026000

0800196c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2224      	movs	r2, #36	; 0x24
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f00b fb99 	bl	800d0b0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_DAC1_Init+0x5c>)
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <MX_DAC1_Init+0x60>)
 8001982:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001984:	4810      	ldr	r0, [pc, #64]	; (80019c8 <MX_DAC1_Init+0x5c>)
 8001986:	f003 f8f6 	bl	8004b76 <HAL_DAC_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001990:	f000 fc58 	bl	8002244 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_DAC1_Init+0x5c>)
 80019b0:	f003 f97a 	bl	8004ca8 <HAL_DAC_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80019ba:	f000 fc43 	bl	8002244 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000388 	.word	0x20000388
 80019cc:	40007400 	.word	0x40007400

080019d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80019d4:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <MX_ETH_Init+0x80>)
 80019d6:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <MX_ETH_Init+0x84>)
 80019d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80019da:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_ETH_Init+0x88>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <MX_ETH_Init+0x88>)
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_ETH_Init+0x88>)
 80019e8:	22e1      	movs	r2, #225	; 0xe1
 80019ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_ETH_Init+0x88>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <MX_ETH_Init+0x88>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_ETH_Init+0x88>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_ETH_Init+0x80>)
 8001a00:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <MX_ETH_Init+0x88>)
 8001a02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_ETH_Init+0x80>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_ETH_Init+0x80>)
 8001a0c:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <MX_ETH_Init+0x8c>)
 8001a0e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_ETH_Init+0x80>)
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <MX_ETH_Init+0x90>)
 8001a14:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_ETH_Init+0x80>)
 8001a18:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a1c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001a1e:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_ETH_Init+0x80>)
 8001a20:	f003 fa80 	bl	8004f24 <HAL_ETH_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001a2a:	f000 fc0b 	bl	8002244 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001a2e:	2238      	movs	r2, #56	; 0x38
 8001a30:	2100      	movs	r1, #0
 8001a32:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_ETH_Init+0x94>)
 8001a34:	f00b fb3c 	bl	800d0b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_ETH_Init+0x94>)
 8001a3a:	2221      	movs	r2, #33	; 0x21
 8001a3c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_ETH_Init+0x94>)
 8001a40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a44:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <MX_ETH_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000039c 	.word	0x2000039c
 8001a54:	40028000 	.word	0x40028000
 8001a58:	200006a4 	.word	0x200006a4
 8001a5c:	20000270 	.word	0x20000270
 8001a60:	20000210 	.word	0x20000210
 8001a64:	200002ec 	.word	0x200002ec

08001a68 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0a4      	sub	sp, #144	; 0x90
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001a6e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a80:	2254      	movs	r2, #84	; 0x54
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f00b fb13 	bl	800d0b0 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2220      	movs	r2, #32
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00b fb07 	bl	800d0b0 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001aa2:	4b98      	ldr	r3, [pc, #608]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001aa4:	4a98      	ldr	r2, [pc, #608]	; (8001d08 <MX_HRTIM_Init+0x2a0>)
 8001aa6:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001aa8:	4b96      	ldr	r3, [pc, #600]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8001aae:	4b95      	ldr	r3, [pc, #596]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001ab4:	4893      	ldr	r0, [pc, #588]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001ab6:	f004 f879 	bl	8005bac <HAL_HRTIM_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8001ac0:	f000 fbc0 	bl	8002244 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001ac4:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001ade:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4887      	ldr	r0, [pc, #540]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001ae8:	f004 f930 	bl	8005d4c <HAL_HRTIM_TimeBaseConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8001af2:	f000 fba7 	bl	8002244 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8001af6:	2314      	movs	r3, #20
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8001b02:	2300      	movs	r3, #0
 8001b04:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001b12:	2300      	movs	r3, #0
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001b26:	2300      	movs	r3, #0
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001b36:	2300      	movs	r3, #0
 8001b38:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001b46:	2300      	movs	r3, #0
 8001b48:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2100      	movs	r1, #0
 8001b52:	486c      	ldr	r0, [pc, #432]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001b54:	f004 f922 	bl	8005d9c <HAL_HRTIM_WaveformTimerConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8001b5e:	f000 fb71 	bl	8002244 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8001b62:	2306      	movs	r3, #6
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001b66:	2300      	movs	r3, #0
 8001b68:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8001b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2104      	movs	r1, #4
 8001b72:	4864      	ldr	r0, [pc, #400]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001b74:	f004 f912 	bl	8005d9c <HAL_HRTIM_WaveformTimerConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8001b7e:	f000 fb61 	bl	8002244 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8001b82:	f240 631b 	movw	r3, #1563	; 0x61b
 8001b86:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001b88:	f107 0320 	add.w	r3, r7, #32
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2100      	movs	r1, #0
 8001b90:	485c      	ldr	r0, [pc, #368]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001b92:	f004 f975 	bl	8005e80 <HAL_HRTIM_WaveformCompareConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8001b9c:	f000 fb52 	bl	8002244 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8001ba0:	f244 5395 	movw	r3, #17813	; 0x4595
 8001ba4:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001bae:	f107 0320 	add.w	r3, r7, #32
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4853      	ldr	r0, [pc, #332]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001bb8:	f004 f962 	bl	8005e80 <HAL_HRTIM_WaveformCompareConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8001bc2:	f000 fb3f 	bl	8002244 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8001bc6:	f640 536e 	movw	r3, #3438	; 0xd6e
 8001bca:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001bcc:	f107 0320 	add.w	r3, r7, #32
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	484b      	ldr	r0, [pc, #300]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001bd6:	f004 f953 	bl	8005e80 <HAL_HRTIM_WaveformCompareConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8001be0:	f000 fb30 	bl	8002244 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8001be4:	f644 0306 	movw	r3, #18438	; 0x4806
 8001be8:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001bea:	f107 0320 	add.w	r3, r7, #32
 8001bee:	2204      	movs	r2, #4
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4844      	ldr	r0, [pc, #272]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001bf4:	f004 f944 	bl	8005e80 <HAL_HRTIM_WaveformCompareConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8001bfe:	f000 fb21 	bl	8002244 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8001c02:	f244 435d 	movw	r3, #17501	; 0x445d
 8001c06:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001c08:	f107 0320 	add.w	r3, r7, #32
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	2104      	movs	r1, #4
 8001c10:	483c      	ldr	r0, [pc, #240]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001c12:	f004 f935 	bl	8005e80 <HAL_HRTIM_WaveformCompareConfig>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001c1c:	f000 fb12 	bl	8002244 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001c20:	2302      	movs	r3, #2
 8001c22:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8001c24:	2328      	movs	r3, #40	; 0x28
 8001c26:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8001c28:	2314      	movs	r3, #20
 8001c2a:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001c30:	2308      	movs	r3, #8
 8001c32:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001c40:	463b      	mov	r3, r7
 8001c42:	2201      	movs	r2, #1
 8001c44:	2100      	movs	r1, #0
 8001c46:	482f      	ldr	r0, [pc, #188]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001c48:	f004 fa88 	bl	800615c <HAL_HRTIM_WaveformOutputConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8001c52:	f000 faf7 	bl	8002244 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8001c5a:	2350      	movs	r3, #80	; 0x50
 8001c5c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001c62:	463b      	mov	r3, r7
 8001c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c68:	2104      	movs	r1, #4
 8001c6a:	4826      	ldr	r0, [pc, #152]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001c6c:	f004 fa76 	bl	800615c <HAL_HRTIM_WaveformOutputConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8001c76:	f000 fae5 	bl	8002244 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8001c82:	2310      	movs	r3, #16
 8001c84:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001c86:	2308      	movs	r3, #8
 8001c88:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	2100      	movs	r1, #0
 8001c90:	481c      	ldr	r0, [pc, #112]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001c92:	f004 fa63 	bl	800615c <HAL_HRTIM_WaveformOutputConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8001c9c:	f000 fad2 	bl	8002244 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001ca0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	4816      	ldr	r0, [pc, #88]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001caa:	f004 f84f 	bl	8005d4c <HAL_HRTIM_TimeBaseConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8001cb4:	f000 fac6 	bl	8002244 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8001cb8:	f240 7353 	movw	r3, #1875	; 0x753
 8001cbc:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	480f      	ldr	r0, [pc, #60]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001cc8:	f004 f8da 	bl	8005e80 <HAL_HRTIM_WaveformCompareConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8001cd2:	f000 fab7 	bl	8002244 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8001cd6:	f643 6342 	movw	r3, #15938	; 0x3e42
 8001cda:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	4807      	ldr	r0, [pc, #28]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001ce6:	f004 f8cb 	bl	8005e80 <HAL_HRTIM_WaveformCompareConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8001cf0:	f000 faa8 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8001cf4:	4803      	ldr	r0, [pc, #12]	; (8001d04 <MX_HRTIM_Init+0x29c>)
 8001cf6:	f000 fcb5 	bl	8002664 <HAL_HRTIM_MspPostInit>

}
 8001cfa:	bf00      	nop
 8001cfc:	3790      	adds	r7, #144	; 0x90
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000044c 	.word	0x2000044c
 8001d08:	40017400 	.word	0x40017400

08001d0c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d12:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <MX_LPTIM1_Init+0x58>)
 8001d14:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d1e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001d22:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_LPTIM1_Init+0x54>)
 8001d4c:	f005 fb4e 	bl	80073ec <HAL_LPTIM_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001d56:	f000 fa75 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000528 	.word	0x20000528
 8001d64:	40002400 	.word	0x40002400

08001d68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001d88:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <MX_TIM1_Init+0xa4>)
 8001d8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001d8e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001d92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001db4:	4814      	ldr	r0, [pc, #80]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001db6:	f009 fcc9 	bl	800b74c <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001dc0:	f000 fa40 	bl	8002244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001dd2:	f009 fd13 	bl	800b7fc <HAL_TIM_ConfigClockSource>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001ddc:	f000 fa32 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_TIM1_Init+0xa0>)
 8001df2:	f009 ff33 	bl	800bc5c <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001dfc:	f000 fa22 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000560 	.word	0x20000560
 8001e0c:	40010000 	.word	0x40010000

08001e10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MX_TIM3_Init+0x94>)
 8001e30:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <MX_TIM3_Init+0x98>)
 8001e32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <MX_TIM3_Init+0x94>)
 8001e36:	227c      	movs	r2, #124	; 0x7c
 8001e38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <MX_TIM3_Init+0x94>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <MX_TIM3_Init+0x94>)
 8001e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_TIM3_Init+0x94>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MX_TIM3_Init+0x94>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e54:	4813      	ldr	r0, [pc, #76]	; (8001ea4 <MX_TIM3_Init+0x94>)
 8001e56:	f009 fc79 	bl	800b74c <HAL_TIM_Base_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e60:	f000 f9f0 	bl	8002244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <MX_TIM3_Init+0x94>)
 8001e72:	f009 fcc3 	bl	800b7fc <HAL_TIM_ConfigClockSource>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e7c:	f000 f9e2 	bl	8002244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_TIM3_Init+0x94>)
 8001e8e:	f009 fee5 	bl	800bc5c <HAL_TIMEx_MasterConfigSynchronization>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e98:	f000 f9d4 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200005ac 	.word	0x200005ac
 8001ea8:	40000400 	.word	0x40000400

08001eac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eb2:	4a23      	ldr	r2, [pc, #140]	; (8001f40 <MX_USART3_UART_Init+0x94>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eb8:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <MX_USART3_UART_Init+0x98>)
 8001eba:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ed0:	220c      	movs	r2, #12
 8001ed2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee0:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef2:	4812      	ldr	r0, [pc, #72]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001ef4:	f009 ff40 	bl	800bd78 <HAL_UART_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001efe:	f000 f9a1 	bl	8002244 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f02:	2100      	movs	r1, #0
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001f06:	f00a ffd0 	bl	800ceaa <HAL_UARTEx_SetTxFifoThreshold>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001f10:	f000 f998 	bl	8002244 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f14:	2100      	movs	r1, #0
 8001f16:	4809      	ldr	r0, [pc, #36]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001f18:	f00b f805 	bl	800cf26 <HAL_UARTEx_SetRxFifoThreshold>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001f22:	f000 f98f 	bl	8002244 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_USART3_UART_Init+0x90>)
 8001f28:	f00a ff86 	bl	800ce38 <HAL_UARTEx_DisableFifoMode>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001f32:	f000 f987 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200005f8 	.word	0x200005f8
 8001f40:	40004800 	.word	0x40004800
 8001f44:	000f4240 	.word	0x000f4240

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5e:	4ba0      	ldr	r3, [pc, #640]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	4a9e      	ldr	r2, [pc, #632]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6e:	4b9c      	ldr	r3, [pc, #624]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7c:	4b98      	ldr	r3, [pc, #608]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f82:	4a97      	ldr	r2, [pc, #604]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f8c:	4b94      	ldr	r3, [pc, #592]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9a:	4b91      	ldr	r3, [pc, #580]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa0:	4a8f      	ldr	r2, [pc, #572]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001faa:	4b8d      	ldr	r3, [pc, #564]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	4a88      	ldr	r2, [pc, #544]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc8:	4b85      	ldr	r3, [pc, #532]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fdc:	4a80      	ldr	r2, [pc, #512]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe6:	4b7e      	ldr	r3, [pc, #504]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff4:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	4a79      	ldr	r2, [pc, #484]	; (80021e0 <MX_GPIO_Init+0x298>)
 8001ffc:	f043 0320 	orr.w	r3, r3, #32
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002004:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <MX_GPIO_Init+0x298>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002012:	4b73      	ldr	r3, [pc, #460]	; (80021e0 <MX_GPIO_Init+0x298>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002018:	4a71      	ldr	r2, [pc, #452]	; (80021e0 <MX_GPIO_Init+0x298>)
 800201a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002022:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <MX_GPIO_Init+0x298>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002030:	4b6b      	ldr	r3, [pc, #428]	; (80021e0 <MX_GPIO_Init+0x298>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <MX_GPIO_Init+0x298>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002040:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <MX_GPIO_Init+0x298>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	2134      	movs	r1, #52	; 0x34
 8002052:	4864      	ldr	r0, [pc, #400]	; (80021e4 <MX_GPIO_Init+0x29c>)
 8002054:	f003 fd52 	bl	8005afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8002058:	2200      	movs	r2, #0
 800205a:	f245 1103 	movw	r1, #20739	; 0x5103
 800205e:	4862      	ldr	r0, [pc, #392]	; (80021e8 <MX_GPIO_Init+0x2a0>)
 8002060:	f003 fd4c 	bl	8005afc <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	2101      	movs	r1, #1
 8002068:	4860      	ldr	r0, [pc, #384]	; (80021ec <MX_GPIO_Init+0x2a4>)
 800206a:	f003 fd47 	bl	8005afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002074:	485e      	ldr	r0, [pc, #376]	; (80021f0 <MX_GPIO_Init+0x2a8>)
 8002076:	f003 fd41 	bl	8005afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002080:	485c      	ldr	r0, [pc, #368]	; (80021f4 <MX_GPIO_Init+0x2ac>)
 8002082:	f003 fd3b 	bl	8005afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208c:	4859      	ldr	r0, [pc, #356]	; (80021f4 <MX_GPIO_Init+0x2ac>)
 800208e:	f003 fd35 	bl	8005afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8002092:	2201      	movs	r2, #1
 8002094:	21f8      	movs	r1, #248	; 0xf8
 8002096:	4856      	ldr	r0, [pc, #344]	; (80021f0 <MX_GPIO_Init+0x2a8>)
 8002098:	f003 fd30 	bl	8005afc <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	2102      	movs	r1, #2
 80020a0:	4850      	ldr	r0, [pc, #320]	; (80021e4 <MX_GPIO_Init+0x29c>)
 80020a2:	f003 fd2b 	bl	8005afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 80020a6:	2336      	movs	r3, #54	; 0x36
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	4619      	mov	r1, r3
 80020bc:	4849      	ldr	r0, [pc, #292]	; (80021e4 <MX_GPIO_Init+0x29c>)
 80020be:	f003 fb55 	bl	800576c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80020c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	4619      	mov	r1, r3
 80020d8:	4846      	ldr	r0, [pc, #280]	; (80021f4 <MX_GPIO_Init+0x2ac>)
 80020da:	f003 fb47 	bl	800576c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 80020de:	f245 1303 	movw	r3, #20739	; 0x5103
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f4:	4619      	mov	r1, r3
 80020f6:	483c      	ldr	r0, [pc, #240]	; (80021e8 <MX_GPIO_Init+0x2a0>)
 80020f8:	f003 fb38 	bl	800576c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002102:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4839      	ldr	r0, [pc, #228]	; (80021f8 <MX_GPIO_Init+0x2b0>)
 8002114:	f003 fb2a 	bl	800576c <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8002118:	2301      	movs	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	4619      	mov	r1, r3
 800212e:	482f      	ldr	r0, [pc, #188]	; (80021ec <MX_GPIO_Init+0x2a4>)
 8002130:	f003 fb1c 	bl	800576c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8002134:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	4828      	ldr	r0, [pc, #160]	; (80021f0 <MX_GPIO_Init+0x2a8>)
 800214e:	f003 fb0d 	bl	800576c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002156:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002164:	4619      	mov	r1, r3
 8002166:	4821      	ldr	r0, [pc, #132]	; (80021ec <MX_GPIO_Init+0x2a4>)
 8002168:	f003 fb00 	bl	800576c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 800216c:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002176:	2302      	movs	r3, #2
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	481b      	ldr	r0, [pc, #108]	; (80021f4 <MX_GPIO_Init+0x2ac>)
 8002186:	f003 faf1 	bl	800576c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800218a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800219c:	230a      	movs	r3, #10
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4815      	ldr	r0, [pc, #84]	; (80021fc <MX_GPIO_Init+0x2b4>)
 80021a8:	f003 fae0 	bl	800576c <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 80021ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021be:	4619      	mov	r1, r3
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <MX_GPIO_Init+0x2ac>)
 80021c2:	f003 fad3 	bl	800576c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2028      	movs	r0, #40	; 0x28
 80021cc:	f002 fc9f 	bl	8004b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021d0:	2028      	movs	r0, #40	; 0x28
 80021d2:	f002 fcb6 	bl	8004b42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021d6:	bf00      	nop
 80021d8:	3738      	adds	r7, #56	; 0x38
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	58024400 	.word	0x58024400
 80021e4:	58021000 	.word	0x58021000
 80021e8:	58020400 	.word	0x58020400
 80021ec:	58021800 	.word	0x58021800
 80021f0:	58020c00 	.word	0x58020c00
 80021f4:	58020800 	.word	0x58020800
 80021f8:	58021400 	.word	0x58021400
 80021fc:	58020000 	.word	0x58020000

08002200 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8002208:	480a      	ldr	r0, [pc, #40]	; (8002234 <HAL_ADC_ConvCpltCallback+0x34>)
 800220a:	f001 fb3b 	bl	8003884 <HAL_ADC_GetValue>
 800220e:	4603      	mov	r3, r0
 8002210:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_ADC_ConvCpltCallback+0x38>)
 8002212:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_ADC_ConvCpltCallback+0x38>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_ADC_ConvCpltCallback+0x3c>)
 800221c:	6013      	str	r3, [r2, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_ADC_ConvCpltCallback+0x3c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	4806      	ldr	r0, [pc, #24]	; (8002240 <HAL_ADC_ConvCpltCallback+0x40>)
 8002228:	f002 fd19 	bl	8004c5e <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000324 	.word	0x20000324
 8002238:	20000698 	.word	0x20000698
 800223c:	2000069c 	.word	0x2000069c
 8002240:	20000388 	.word	0x20000388

08002244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 800224c:	4810      	ldr	r0, [pc, #64]	; (8002290 <Error_Handler+0x4c>)
 800224e:	f00b fbff 	bl	800da50 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8002252:	f240 1103 	movw	r1, #259	; 0x103
 8002256:	480f      	ldr	r0, [pc, #60]	; (8002294 <Error_Handler+0x50>)
 8002258:	f004 f8d5 	bl	8006406 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 800225c:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8002260:	480c      	ldr	r0, [pc, #48]	; (8002294 <Error_Handler+0x50>)
 8002262:	f004 f96d 	bl	8006540 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	480a      	ldr	r0, [pc, #40]	; (8002298 <Error_Handler+0x54>)
 800226e:	f003 fc45 	bl	8005afc <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8002272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002276:	4809      	ldr	r0, [pc, #36]	; (800229c <Error_Handler+0x58>)
 8002278:	f003 fc59 	bl	8005b2e <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <Error_Handler+0x5c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f00d fc22 	bl	800fad0 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 800228c:	e7f1      	b.n	8002272 <Error_Handler+0x2e>
 800228e:	bf00      	nop
 8002290:	0800fe04 	.word	0x0800fe04
 8002294:	2000044c 	.word	0x2000044c
 8002298:	58020800 	.word	0x58020800
 800229c:	58020400 	.word	0x58020400
 80022a0:	20000000 	.word	0x20000000

080022a4 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_MspInit+0x30>)
 80022ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_MspInit+0x30>)
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_MspInit+0x30>)
 80022bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	58024400 	.word	0x58024400

080022d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0b4      	sub	sp, #208	; 0xd0
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	22c0      	movs	r2, #192	; 0xc0
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f00a fee1 	bl	800d0b0 <memset>
  if(hadc->Instance==ADC3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2b      	ldr	r2, [pc, #172]	; (80023a0 <HAL_ADC_MspInit+0xc8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d14e      	bne.n	8002396 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002304:	2301      	movs	r3, #1
 8002306:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002308:	2313      	movs	r3, #19
 800230a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 800230c:	234f      	movs	r3, #79	; 0x4f
 800230e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002310:	2302      	movs	r3, #2
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002314:	2302      	movs	r3, #2
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002318:	23c0      	movs	r3, #192	; 0xc0
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800231c:	2320      	movs	r3, #32
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	4618      	mov	r0, r3
 8002330:	f006 fcb8 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 800233a:	f7ff ff83 	bl	8002244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 8002340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002344:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 8002350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002362:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 800236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800237a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800237e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002382:	f000 fd6b 	bl	8002e5c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	207f      	movs	r0, #127	; 0x7f
 800238c:	f002 fbbf 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002390:	207f      	movs	r0, #127	; 0x7f
 8002392:	f002 fbd6 	bl	8004b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	37d0      	adds	r7, #208	; 0xd0
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	58026000 	.word	0x58026000
 80023a4:	58024400 	.word	0x58024400

080023a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <HAL_DAC_MspInit+0x80>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d129      	bne.n	800241e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_DAC_MspInit+0x84>)
 80023cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_DAC_MspInit+0x84>)
 80023d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023da:	4b14      	ldr	r3, [pc, #80]	; (800242c <HAL_DAC_MspInit+0x84>)
 80023dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_DAC_MspInit+0x84>)
 80023ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ee:	4a0f      	ldr	r2, [pc, #60]	; (800242c <HAL_DAC_MspInit+0x84>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <HAL_DAC_MspInit+0x84>)
 80023fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002406:	2310      	movs	r3, #16
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800240a:	2303      	movs	r3, #3
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_DAC_MspInit+0x88>)
 800241a:	f003 f9a7 	bl	800576c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40007400 	.word	0x40007400
 800242c:	58024400 	.word	0x58024400
 8002430:	58020000 	.word	0x58020000

08002434 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	; 0x38
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a59      	ldr	r2, [pc, #356]	; (80025b8 <HAL_ETH_MspInit+0x184>)
 8002452:	4293      	cmp	r3, r2
 8002454:	f040 80ab 	bne.w	80025ae <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002458:	4b58      	ldr	r3, [pc, #352]	; (80025bc <HAL_ETH_MspInit+0x188>)
 800245a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800245e:	4a57      	ldr	r2, [pc, #348]	; (80025bc <HAL_ETH_MspInit+0x188>)
 8002460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002464:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002468:	4b54      	ldr	r3, [pc, #336]	; (80025bc <HAL_ETH_MspInit+0x188>)
 800246a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800246e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <HAL_ETH_MspInit+0x188>)
 8002478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800247c:	4a4f      	ldr	r2, [pc, #316]	; (80025bc <HAL_ETH_MspInit+0x188>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002486:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_ETH_MspInit+0x188>)
 8002488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800248c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002494:	4b49      	ldr	r3, [pc, #292]	; (80025bc <HAL_ETH_MspInit+0x188>)
 8002496:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800249a:	4a48      	ldr	r2, [pc, #288]	; (80025bc <HAL_ETH_MspInit+0x188>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024a4:	4b45      	ldr	r3, [pc, #276]	; (80025bc <HAL_ETH_MspInit+0x188>)
 80024a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024b2:	4b42      	ldr	r3, [pc, #264]	; (80025bc <HAL_ETH_MspInit+0x188>)
 80024b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b8:	4a40      	ldr	r2, [pc, #256]	; (80025bc <HAL_ETH_MspInit+0x188>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c2:	4b3e      	ldr	r3, [pc, #248]	; (80025bc <HAL_ETH_MspInit+0x188>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <HAL_ETH_MspInit+0x188>)
 80024d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d6:	4a39      	ldr	r2, [pc, #228]	; (80025bc <HAL_ETH_MspInit+0x188>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_ETH_MspInit+0x188>)
 80024e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	4b33      	ldr	r3, [pc, #204]	; (80025bc <HAL_ETH_MspInit+0x188>)
 80024f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f4:	4a31      	ldr	r2, [pc, #196]	; (80025bc <HAL_ETH_MspInit+0x188>)
 80024f6:	f043 0302 	orr.w	r3, r3, #2
 80024fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_ETH_MspInit+0x188>)
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800250c:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_ETH_MspInit+0x188>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002512:	4a2a      	ldr	r2, [pc, #168]	; (80025bc <HAL_ETH_MspInit+0x188>)
 8002514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_ETH_MspInit+0x188>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800252a:	2332      	movs	r3, #50	; 0x32
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800253a:	230b      	movs	r3, #11
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002542:	4619      	mov	r1, r3
 8002544:	481e      	ldr	r0, [pc, #120]	; (80025c0 <HAL_ETH_MspInit+0x18c>)
 8002546:	f003 f911 	bl	800576c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800254a:	2386      	movs	r3, #134	; 0x86
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800255a:	230b      	movs	r3, #11
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002562:	4619      	mov	r1, r3
 8002564:	4817      	ldr	r0, [pc, #92]	; (80025c4 <HAL_ETH_MspInit+0x190>)
 8002566:	f003 f901 	bl	800576c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800256a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800257c:	230b      	movs	r3, #11
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002584:	4619      	mov	r1, r3
 8002586:	4810      	ldr	r0, [pc, #64]	; (80025c8 <HAL_ETH_MspInit+0x194>)
 8002588:	f003 f8f0 	bl	800576c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800258c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800259e:	230b      	movs	r3, #11
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a6:	4619      	mov	r1, r3
 80025a8:	4808      	ldr	r0, [pc, #32]	; (80025cc <HAL_ETH_MspInit+0x198>)
 80025aa:	f003 f8df 	bl	800576c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80025ae:	bf00      	nop
 80025b0:	3738      	adds	r7, #56	; 0x38
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40028000 	.word	0x40028000
 80025bc:	58024400 	.word	0x58024400
 80025c0:	58020800 	.word	0x58020800
 80025c4:	58020000 	.word	0x58020000
 80025c8:	58020400 	.word	0x58020400
 80025cc:	58021800 	.word	0x58021800

080025d0 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b0b4      	sub	sp, #208	; 0xd0
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	22c0      	movs	r2, #192	; 0xc0
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00a fd65 	bl	800d0b0 <memset>
  if(hhrtim->Instance==HRTIM1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <HAL_HRTIM_MspInit+0x8c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d131      	bne.n	8002654 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80025f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4618      	mov	r0, r3
 8002608:	f006 fb4c 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8002612:	f7ff fe17 	bl	8002244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_HRTIM_MspInit+0x90>)
 8002618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800261c:	4a10      	ldr	r2, [pc, #64]	; (8002660 <HAL_HRTIM_MspInit+0x90>)
 800261e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002622:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_HRTIM_MspInit+0x90>)
 8002628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800262c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	2100      	movs	r1, #0
 8002638:	2068      	movs	r0, #104	; 0x68
 800263a:	f002 fa68 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 800263e:	2068      	movs	r0, #104	; 0x68
 8002640:	f002 fa7f 	bl	8004b42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	206c      	movs	r0, #108	; 0x6c
 800264a:	f002 fa60 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 800264e:	206c      	movs	r0, #108	; 0x6c
 8002650:	f002 fa77 	bl	8004b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002654:	bf00      	nop
 8002656:	37d0      	adds	r7, #208	; 0xd0
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40017400 	.word	0x40017400
 8002660:	58024400 	.word	0x58024400

08002664 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a22      	ldr	r2, [pc, #136]	; (800270c <HAL_HRTIM_MspPostInit+0xa8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d13d      	bne.n	8002702 <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002686:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_HRTIM_MspPostInit+0xac>)
 8002688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268c:	4a20      	ldr	r2, [pc, #128]	; (8002710 <HAL_HRTIM_MspPostInit+0xac>)
 800268e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_HRTIM_MspPostInit+0xac>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_HRTIM_MspPostInit+0xac>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026aa:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_HRTIM_MspPostInit+0xac>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_HRTIM_MspPostInit+0xac>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80026d2:	2302      	movs	r3, #2
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	480d      	ldr	r0, [pc, #52]	; (8002714 <HAL_HRTIM_MspPostInit+0xb0>)
 80026de:	f003 f845 	bl	800576c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026e2:	23c0      	movs	r3, #192	; 0xc0
 80026e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80026f2:	2301      	movs	r3, #1
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4806      	ldr	r0, [pc, #24]	; (8002718 <HAL_HRTIM_MspPostInit+0xb4>)
 80026fe:	f003 f835 	bl	800576c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8002702:	bf00      	nop
 8002704:	3728      	adds	r7, #40	; 0x28
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40017400 	.word	0x40017400
 8002710:	58024400 	.word	0x58024400
 8002714:	58021800 	.word	0x58021800
 8002718:	58020800 	.word	0x58020800

0800271c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b0b4      	sub	sp, #208	; 0xd0
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	22c0      	movs	r2, #192	; 0xc0
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f00a fcbf 	bl	800d0b0 <memset>
  if(hlptim->Instance==LPTIM1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a19      	ldr	r2, [pc, #100]	; (800279c <HAL_LPTIM_MspInit+0x80>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d12a      	bne.n	8002792 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800273c:	f04f 0220 	mov.w	r2, #32
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002748:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800274c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	4618      	mov	r0, r3
 8002756:	f006 faa5 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002760:	f7ff fd70 	bl	8002244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <HAL_LPTIM_MspInit+0x84>)
 8002766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800276a:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <HAL_LPTIM_MspInit+0x84>)
 800276c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002770:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_LPTIM_MspInit+0x84>)
 8002776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800277a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	205d      	movs	r0, #93	; 0x5d
 8002788:	f002 f9c1 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800278c:	205d      	movs	r0, #93	; 0x5d
 800278e:	f002 f9d8 	bl	8004b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002792:	bf00      	nop
 8002794:	37d0      	adds	r7, #208	; 0xd0
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40002400 	.word	0x40002400
 80027a0:	58024400 	.word	0x58024400

080027a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a16      	ldr	r2, [pc, #88]	; (800280c <HAL_TIM_Base_MspInit+0x68>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10f      	bne.n	80027d6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_TIM_Base_MspInit+0x6c>)
 80027b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_TIM_Base_MspInit+0x6c>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_TIM_Base_MspInit+0x6c>)
 80027c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027d4:	e013      	b.n	80027fe <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_TIM_Base_MspInit+0x70>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10e      	bne.n	80027fe <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_TIM_Base_MspInit+0x6c>)
 80027e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <HAL_TIM_Base_MspInit+0x6c>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_TIM_Base_MspInit+0x6c>)
 80027f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40010000 	.word	0x40010000
 8002810:	58024400 	.word	0x58024400
 8002814:	40000400 	.word	0x40000400

08002818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0ba      	sub	sp, #232	; 0xe8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	22c0      	movs	r2, #192	; 0xc0
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f00a fc39 	bl	800d0b0 <memset>
  if(huart->Instance==USART3)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <HAL_UART_MspInit+0xc8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d146      	bne.n	80028d6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002848:	f04f 0202 	mov.w	r2, #2
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002854:	2300      	movs	r3, #0
 8002856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4618      	mov	r0, r3
 8002860:	f006 fa20 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800286a:	f7ff fceb 	bl	8002244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_UART_MspInit+0xcc>)
 8002870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002874:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_UART_MspInit+0xcc>)
 8002876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_UART_MspInit+0xcc>)
 8002880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800288c:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_UART_MspInit+0xcc>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002892:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_UART_MspInit+0xcc>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_UART_MspInit+0xcc>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028c4:	2307      	movs	r3, #7
 80028c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028ce:	4619      	mov	r1, r3
 80028d0:	4805      	ldr	r0, [pc, #20]	; (80028e8 <HAL_UART_MspInit+0xd0>)
 80028d2:	f002 ff4b 	bl	800576c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028d6:	bf00      	nop
 80028d8:	37e8      	adds	r7, #232	; 0xe8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40004800 	.word	0x40004800
 80028e4:	58024400 	.word	0x58024400
 80028e8:	58020c00 	.word	0x58020c00

080028ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80028f0:	f006 f9bc 	bl	8008c6c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 80028f4:	f7ff fca6 	bl	8002244 <Error_Handler>
 80028f8:	e7fc      	b.n	80028f4 <NMI_Handler+0x8>

080028fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80028fe:	f7ff fca1 	bl	8002244 <Error_Handler>
 8002902:	e7fc      	b.n	80028fe <HardFault_Handler+0x4>

08002904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 8002908:	f7ff fc9c 	bl	8002244 <Error_Handler>
 800290c:	e7fc      	b.n	8002908 <MemManage_Handler+0x4>

0800290e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 8002912:	f7ff fc97 	bl	8002244 <Error_Handler>
 8002916:	e7fc      	b.n	8002912 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 800291c:	f7ff fc92 	bl	8002244 <Error_Handler>
 8002920:	e7fc      	b.n	800291c <UsageFault_Handler+0x4>

08002922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002950:	f000 fa20 	bl	8002d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800295c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002960:	f003 f8ff 	bl	8005b62 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8002964:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002968:	f003 f8fb 	bl	8005b62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <LPTIM1_IRQHandler+0x10>)
 8002976:	f004 fe50 	bl	800761a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000528 	.word	0x20000528

08002984 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8002988:	2100      	movs	r1, #0
 800298a:	4802      	ldr	r0, [pc, #8]	; (8002994 <HRTIM1_TIMA_IRQHandler+0x10>)
 800298c:	f003 fe56 	bl	800663c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000044c 	.word	0x2000044c

08002998 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 800299c:	2104      	movs	r1, #4
 800299e:	4802      	ldr	r0, [pc, #8]	; (80029a8 <HRTIM1_TIME_IRQHandler+0x10>)
 80029a0:	f003 fe4c 	bl	800663c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	2000044c 	.word	0x2000044c

080029ac <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <ADC3_IRQHandler+0x10>)
 80029b2:	f000 ff75 	bl	80038a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000324 	.word	0x20000324

080029c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
	return 1;
 80029c4:	2301      	movs	r3, #1
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <_kill>:

int _kill(int pid, int sig)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029da:	f00a fb31 	bl	800d040 <__errno>
 80029de:	4603      	mov	r3, r0
 80029e0:	2216      	movs	r2, #22
 80029e2:	601a      	str	r2, [r3, #0]
	return -1;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_exit>:

void _exit (int status)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ffe7 	bl	80029d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a02:	e7fe      	b.n	8002a02 <_exit+0x12>

08002a04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e00a      	b.n	8002a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a16:	f3af 8000 	nop.w
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	60ba      	str	r2, [r7, #8]
 8002a22:	b2ca      	uxtb	r2, r1
 8002a24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	dbf0      	blt.n	8002a16 <_read+0x12>
	}

return len;
 8002a34:	687b      	ldr	r3, [r7, #4]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b086      	sub	sp, #24
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e009      	b.n	8002a64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	60ba      	str	r2, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fbd3 	bl	8001204 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	3301      	adds	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	dbf1      	blt.n	8002a50 <_write+0x12>
	}
	return len;
 8002a6c:	687b      	ldr	r3, [r7, #4]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_close>:

int _close(int file)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_isatty>:

int _isatty(int file)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ab6:	2301      	movs	r3, #1
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <_sbrk+0x5c>)
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <_sbrk+0x60>)
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <_sbrk+0x64>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <_sbrk+0x64>)
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <_sbrk+0x68>)
 8002b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <_sbrk+0x64>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d207      	bcs.n	8002b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b10:	f00a fa96 	bl	800d040 <__errno>
 8002b14:	4603      	mov	r3, r0
 8002b16:	220c      	movs	r2, #12
 8002b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1e:	e009      	b.n	8002b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <_sbrk+0x64>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <_sbrk+0x64>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <_sbrk+0x64>)
 8002b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20020000 	.word	0x20020000
 8002b40:	00000400 	.word	0x00000400
 8002b44:	200006ac 	.word	0x200006ac
 8002b48:	200006c8 	.word	0x200006c8

08002b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b50:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <SystemInit+0xe4>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	4a36      	ldr	r2, [pc, #216]	; (8002c30 <SystemInit+0xe4>)
 8002b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b60:	4b34      	ldr	r3, [pc, #208]	; (8002c34 <SystemInit+0xe8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	2b06      	cmp	r3, #6
 8002b6a:	d807      	bhi.n	8002b7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <SystemInit+0xe8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 030f 	bic.w	r3, r3, #15
 8002b74:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <SystemInit+0xe8>)
 8002b76:	f043 0307 	orr.w	r3, r3, #7
 8002b7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <SystemInit+0xec>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2d      	ldr	r2, [pc, #180]	; (8002c38 <SystemInit+0xec>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b88:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <SystemInit+0xec>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b8e:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <SystemInit+0xec>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4929      	ldr	r1, [pc, #164]	; (8002c38 <SystemInit+0xec>)
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <SystemInit+0xf0>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <SystemInit+0xe8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <SystemInit+0xe8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 030f 	bic.w	r3, r3, #15
 8002bae:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <SystemInit+0xe8>)
 8002bb0:	f043 0307 	orr.w	r3, r3, #7
 8002bb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <SystemInit+0xec>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <SystemInit+0xec>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <SystemInit+0xec>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <SystemInit+0xec>)
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <SystemInit+0xf4>)
 8002bcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <SystemInit+0xec>)
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <SystemInit+0xf8>)
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <SystemInit+0xec>)
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <SystemInit+0xfc>)
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <SystemInit+0xec>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <SystemInit+0xec>)
 8002be2:	4a19      	ldr	r2, [pc, #100]	; (8002c48 <SystemInit+0xfc>)
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <SystemInit+0xec>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <SystemInit+0xec>)
 8002bee:	4a16      	ldr	r2, [pc, #88]	; (8002c48 <SystemInit+0xfc>)
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <SystemInit+0xec>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <SystemInit+0xec>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <SystemInit+0xec>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <SystemInit+0xec>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <SystemInit+0x100>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <SystemInit+0x104>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c16:	d202      	bcs.n	8002c1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <SystemInit+0x108>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <SystemInit+0x10c>)
 8002c20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002c24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00
 8002c34:	52002000 	.word	0x52002000
 8002c38:	58024400 	.word	0x58024400
 8002c3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c40:	02020200 	.word	0x02020200
 8002c44:	01ff0000 	.word	0x01ff0000
 8002c48:	01010280 	.word	0x01010280
 8002c4c:	5c001000 	.word	0x5c001000
 8002c50:	ffff0000 	.word	0xffff0000
 8002c54:	51008108 	.word	0x51008108
 8002c58:	52004000 	.word	0x52004000

08002c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c60:	f7ff ff74 	bl	8002b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c64:	480c      	ldr	r0, [pc, #48]	; (8002c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c66:	490d      	ldr	r1, [pc, #52]	; (8002c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c6c:	e002      	b.n	8002c74 <LoopCopyDataInit>

08002c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c72:	3304      	adds	r3, #4

08002c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c78:	d3f9      	bcc.n	8002c6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c80:	e001      	b.n	8002c86 <LoopFillZerobss>

08002c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c84:	3204      	adds	r2, #4

08002c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c88:	d3fb      	bcc.n	8002c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c8a:	f00a f9df 	bl	800d04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c8e:	f7fe fb9d 	bl	80013cc <main>
  bx  lr
 8002c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c9c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002ca0:	08010424 	.word	0x08010424
  ldr r2, =_sbss
 8002ca4:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002ca8:	200006c4 	.word	0x200006c4

08002cac <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cac:	e7fe      	b.n	8002cac <ADC_IRQHandler>
	...

08002cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb6:	2003      	movs	r0, #3
 8002cb8:	f001 ff1e 	bl	8004af8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cbc:	f005 fe00 	bl	80088c0 <HAL_RCC_GetSysClockFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_Init+0x68>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	4913      	ldr	r1, [pc, #76]	; (8002d1c <HAL_Init+0x6c>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_Init+0x68>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_Init+0x6c>)
 8002ce4:	5cd3      	ldrb	r3, [r2, r3]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <HAL_Init+0x70>)
 8002cf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cf4:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <HAL_Init+0x74>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f000 f814 	bl	8002d28 <HAL_InitTick>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e002      	b.n	8002d10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0a:	f7ff facb 	bl	80022a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	08010004 	.word	0x08010004
 8002d20:	2000001c 	.word	0x2000001c
 8002d24:	20000018 	.word	0x20000018

08002d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d30:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <HAL_InitTick+0x60>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e021      	b.n	8002d80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <HAL_InitTick+0x64>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_InitTick+0x60>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 ff03 	bl	8004b5e <HAL_SYSTICK_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00e      	b.n	8002d80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b0f      	cmp	r3, #15
 8002d66:	d80a      	bhi.n	8002d7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f001 fecd 	bl	8004b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d74:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <HAL_InitTick+0x68>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000024 	.word	0x20000024
 8002d8c:	20000018 	.word	0x20000018
 8002d90:	20000020 	.word	0x20000020

08002d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_IncTick+0x20>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_IncTick+0x24>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_IncTick+0x24>)
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000024 	.word	0x20000024
 8002db8:	200006b0 	.word	0x200006b0

08002dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <HAL_GetTick+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	200006b0 	.word	0x200006b0

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff ffee 	bl	8002dbc <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d005      	beq.n	8002dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_Delay+0x44>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dfa:	bf00      	nop
 8002dfc:	f7ff ffde 	bl	8002dbc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8f7      	bhi.n	8002dfc <HAL_Delay+0x28>
  {
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000024 	.word	0x20000024

08002e1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <HAL_GetREVID+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0c1b      	lsrs	r3, r3, #16
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	5c001000 	.word	0x5c001000

08002e34 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e44:	4904      	ldr	r1, [pc, #16]	; (8002e58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	58000400 	.word	0x58000400

08002e5c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	4904      	ldr	r1, [pc, #16]	; (8002e84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	58000400 	.word	0x58000400

08002e88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3360      	adds	r3, #96	; 0x60
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	611a      	str	r2, [r3, #16]
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b087      	sub	sp, #28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3360      	adds	r3, #96	; 0x60
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	601a      	str	r2, [r3, #0]
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	371c      	adds	r7, #28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3330      	adds	r3, #48	; 0x30
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	4413      	add	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	211f      	movs	r1, #31
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	f003 011f 	and.w	r1, r3, #31
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	431a      	orrs	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3314      	adds	r3, #20
 800304c:	461a      	mov	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	0e5b      	lsrs	r3, r3, #25
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	4413      	add	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	0d1b      	lsrs	r3, r3, #20
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2107      	movs	r1, #7
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43db      	mvns	r3, r3
 8003070:	401a      	ands	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	0d1b      	lsrs	r3, r3, #20
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	431a      	orrs	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030ac:	43db      	mvns	r3, r3
 80030ae:	401a      	ands	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0318 	and.w	r3, r3, #24
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030b8:	40d9      	lsrs	r1, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	400b      	ands	r3, r1
 80030be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c2:	431a      	orrs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	000fffff 	.word	0x000fffff

080030dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 031f 	and.w	r3, r3, #31
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003122:	4013      	ands	r3, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6093      	str	r3, [r2, #8]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	5fffffc0 	.word	0x5fffffc0

08003138 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314c:	d101      	bne.n	8003152 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <LL_ADC_EnableInternalRegulator+0x24>)
 800316e:	4013      	ands	r3, r2
 8003170:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	6fffffc0 	.word	0x6fffffc0

08003188 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319c:	d101      	bne.n	80031a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <LL_ADC_Enable+0x24>)
 80031be:	4013      	ands	r3, r2
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	7fffffc0 	.word	0x7fffffc0

080031d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <LL_ADC_Disable+0x24>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	f043 0202 	orr.w	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	7fffffc0 	.word	0x7fffffc0

08003200 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <LL_ADC_IsEnabled+0x18>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <LL_ADC_IsEnabled+0x1a>
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	d101      	bne.n	800323e <LL_ADC_IsDisableOngoing+0x18>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <LL_ADC_IsDisableOngoing+0x1a>
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <LL_ADC_REG_StartConversion+0x24>)
 800325a:	4013      	ands	r3, r2
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	7fffffc0 	.word	0x7fffffc0

08003274 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b04      	cmp	r3, #4
 8003286:	d101      	bne.n	800328c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d101      	bne.n	80032b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e18f      	b.n	80035fa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fe fff5 	bl	80022d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff19 	bl	8003138 <LL_ADC_IsDeepPowerDownEnabled>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff feff 	bl	8003114 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff34 	bl	8003188 <LL_ADC_IsInternalRegulatorEnabled>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d114      	bne.n	8003350 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ff18 	bl	8003160 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003330:	4b87      	ldr	r3, [pc, #540]	; (8003550 <HAL_ADC_Init+0x290>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	4a87      	ldr	r2, [pc, #540]	; (8003554 <HAL_ADC_Init+0x294>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	3301      	adds	r3, #1
 8003340:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003342:	e002      	b.n	800334a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	3b01      	subs	r3, #1
 8003348:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f9      	bne.n	8003344 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff17 	bl	8003188 <LL_ADC_IsInternalRegulatorEnabled>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	f043 0210 	orr.w	r2, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff77 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8003386:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	f040 8129 	bne.w	80035e8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f040 8125 	bne.w	80035e8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033a6:	f043 0202 	orr.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff24 	bl	8003200 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d136      	bne.n	800342c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a65      	ldr	r2, [pc, #404]	; (8003558 <HAL_ADC_Init+0x298>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_ADC_Init+0x112>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a63      	ldr	r2, [pc, #396]	; (800355c <HAL_ADC_Init+0x29c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10e      	bne.n	80033f0 <HAL_ADC_Init+0x130>
 80033d2:	4861      	ldr	r0, [pc, #388]	; (8003558 <HAL_ADC_Init+0x298>)
 80033d4:	f7ff ff14 	bl	8003200 <LL_ADC_IsEnabled>
 80033d8:	4604      	mov	r4, r0
 80033da:	4860      	ldr	r0, [pc, #384]	; (800355c <HAL_ADC_Init+0x29c>)
 80033dc:	f7ff ff10 	bl	8003200 <LL_ADC_IsEnabled>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4323      	orrs	r3, r4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e008      	b.n	8003402 <HAL_ADC_Init+0x142>
 80033f0:	485b      	ldr	r0, [pc, #364]	; (8003560 <HAL_ADC_Init+0x2a0>)
 80033f2:	f7ff ff05 	bl	8003200 <LL_ADC_IsEnabled>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d012      	beq.n	800342c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a53      	ldr	r2, [pc, #332]	; (8003558 <HAL_ADC_Init+0x298>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_ADC_Init+0x15a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a51      	ldr	r2, [pc, #324]	; (800355c <HAL_ADC_Init+0x29c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_ADC_Init+0x15e>
 800341a:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_ADC_Init+0x2a4>)
 800341c:	e000      	b.n	8003420 <HAL_ADC_Init+0x160>
 800341e:	4a52      	ldr	r2, [pc, #328]	; (8003568 <HAL_ADC_Init+0x2a8>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f7ff fd2e 	bl	8002e88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800342c:	f7ff fcf6 	bl	8002e1c <HAL_GetREVID>
 8003430:	4603      	mov	r3, r0
 8003432:	f241 0203 	movw	r2, #4099	; 0x1003
 8003436:	4293      	cmp	r3, r2
 8003438:	d914      	bls.n	8003464 <HAL_ADC_Init+0x1a4>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b10      	cmp	r3, #16
 8003440:	d110      	bne.n	8003464 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7d5b      	ldrb	r3, [r3, #21]
 8003446:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800344c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003452:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7f1b      	ldrb	r3, [r3, #28]
 8003458:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800345a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800345c:	f043 030c 	orr.w	r3, r3, #12
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e00d      	b.n	8003480 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7d5b      	ldrb	r3, [r3, #21]
 8003468:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800346e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003474:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7f1b      	ldrb	r3, [r3, #28]
 800347a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7f1b      	ldrb	r3, [r3, #28]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d106      	bne.n	8003496 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	3b01      	subs	r3, #1
 800348e:	045b      	lsls	r3, r3, #17
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	4b2c      	ldr	r3, [pc, #176]	; (800356c <HAL_ADC_Init+0x2ac>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	69b9      	ldr	r1, [r7, #24]
 80034c2:	430b      	orrs	r3, r1
 80034c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fed2 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 80034d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fedf 	bl	800329a <LL_ADC_INJ_IsConversionOngoing>
 80034dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d15f      	bne.n	80035a4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d15c      	bne.n	80035a4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7d1b      	ldrb	r3, [r3, #20]
 80034ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <HAL_ADC_Init+0x2b0>)
 8003500:	4013      	ands	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	430b      	orrs	r3, r1
 800350a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003512:	2b01      	cmp	r3, #1
 8003514:	d130      	bne.n	8003578 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <HAL_ADC_Init+0x2b4>)
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800352a:	3a01      	subs	r2, #1
 800352c:	0411      	lsls	r1, r2, #16
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003538:	4311      	orrs	r1, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800353e:	430a      	orrs	r2, r1
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	611a      	str	r2, [r3, #16]
 800354c:	e01c      	b.n	8003588 <HAL_ADC_Init+0x2c8>
 800354e:	bf00      	nop
 8003550:	20000018 	.word	0x20000018
 8003554:	053e2d63 	.word	0x053e2d63
 8003558:	40022000 	.word	0x40022000
 800355c:	40022100 	.word	0x40022100
 8003560:	58026000 	.word	0x58026000
 8003564:	40022300 	.word	0x40022300
 8003568:	58026300 	.word	0x58026300
 800356c:	fff0c003 	.word	0xfff0c003
 8003570:	ffffbffc 	.word	0xffffbffc
 8003574:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f001 f806 	bl	80045b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10c      	bne.n	80035c6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	f023 010f 	bic.w	r1, r3, #15
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
 80035c4:	e007      	b.n	80035d6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 020f 	bic.w	r2, r2, #15
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
 80035e6:	e007      	b.n	80035f8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f043 0210 	orr.w	r2, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3724      	adds	r7, #36	; 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}
 8003602:	bf00      	nop

08003604 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a90      	ldr	r2, [pc, #576]	; (8003854 <HAL_ADC_Start_IT+0x250>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <HAL_ADC_Start_IT+0x1c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a8f      	ldr	r2, [pc, #572]	; (8003858 <HAL_ADC_Start_IT+0x254>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_ADC_Start_IT+0x20>
 8003620:	4b8e      	ldr	r3, [pc, #568]	; (800385c <HAL_ADC_Start_IT+0x258>)
 8003622:	e000      	b.n	8003626 <HAL_ADC_Start_IT+0x22>
 8003624:	4b8e      	ldr	r3, [pc, #568]	; (8003860 <HAL_ADC_Start_IT+0x25c>)
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fd58 	bl	80030dc <LL_ADC_GetMultimode>
 800362c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fe1e 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	f040 8119 	bne.w	8003872 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_ADC_Start_IT+0x4a>
 800364a:	2302      	movs	r3, #2
 800364c:	e116      	b.n	800387c <HAL_ADC_Start_IT+0x278>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fec0 	bl	80043dc <ADC_Enable>
 800365c:	4603      	mov	r3, r0
 800365e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003660:	7dfb      	ldrb	r3, [r7, #23]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8100 	bne.w	8003868 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800366c:	4b7d      	ldr	r3, [pc, #500]	; (8003864 <HAL_ADC_Start_IT+0x260>)
 800366e:	4013      	ands	r3, r2
 8003670:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a76      	ldr	r2, [pc, #472]	; (8003858 <HAL_ADC_Start_IT+0x254>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d002      	beq.n	8003688 <HAL_ADC_Start_IT+0x84>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	e000      	b.n	800368a <HAL_ADC_Start_IT+0x86>
 8003688:	4b72      	ldr	r3, [pc, #456]	; (8003854 <HAL_ADC_Start_IT+0x250>)
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	4293      	cmp	r3, r2
 8003690:	d002      	beq.n	8003698 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d006      	beq.n	80036be <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	f023 0206 	bic.w	r2, r3, #6
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	659a      	str	r2, [r3, #88]	; 0x58
 80036bc:	e002      	b.n	80036c4 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	221c      	movs	r2, #28
 80036ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 021c 	bic.w	r2, r2, #28
 80036e2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d108      	bne.n	80036fe <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	605a      	str	r2, [r3, #4]
          break;
 80036fc:	e008      	b.n	8003710 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0204 	orr.w	r2, r2, #4
 800370c:	605a      	str	r2, [r3, #4]
          break;
 800370e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	2b00      	cmp	r3, #0
 8003716:	d107      	bne.n	8003728 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0210 	orr.w	r2, r2, #16
 8003726:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <HAL_ADC_Start_IT+0x254>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d002      	beq.n	8003738 <HAL_ADC_Start_IT+0x134>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	e000      	b.n	800373a <HAL_ADC_Start_IT+0x136>
 8003738:	4b46      	ldr	r3, [pc, #280]	; (8003854 <HAL_ADC_Start_IT+0x250>)
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	4293      	cmp	r3, r2
 8003740:	d008      	beq.n	8003754 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b05      	cmp	r3, #5
 800374c:	d002      	beq.n	8003754 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b09      	cmp	r3, #9
 8003752:	d13b      	bne.n	80037cc <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d02d      	beq.n	80037be <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800376a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b08      	cmp	r3, #8
 8003778:	d110      	bne.n	800379c <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0220 	bic.w	r2, r2, #32
 8003788:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003798:	605a      	str	r2, [r3, #4]
              break;
 800379a:	e011      	b.n	80037c0 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037aa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	605a      	str	r2, [r3, #4]
              break;
 80037bc:	e000      	b.n	80037c0 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80037be:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fd41 	bl	800324c <LL_ADC_REG_StartConversion>
 80037ca:	e056      	b.n	800387a <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_ADC_Start_IT+0x254>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d002      	beq.n	80037e8 <HAL_ADC_Start_IT+0x1e4>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	e000      	b.n	80037ea <HAL_ADC_Start_IT+0x1e6>
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_ADC_Start_IT+0x250>)
 80037ea:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03f      	beq.n	8003878 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003800:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d110      	bne.n	8003832 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0220 	bic.w	r2, r2, #32
 800381e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800382e:	605a      	str	r2, [r3, #4]
              break;
 8003830:	e023      	b.n	800387a <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003840:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0220 	orr.w	r2, r2, #32
 8003850:	605a      	str	r2, [r3, #4]
              break;
 8003852:	e012      	b.n	800387a <HAL_ADC_Start_IT+0x276>
 8003854:	40022000 	.word	0x40022000
 8003858:	40022100 	.word	0x40022100
 800385c:	40022300 	.word	0x40022300
 8003860:	58026300 	.word	0x58026300
 8003864:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003870:	e003      	b.n	800387a <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003872:	2302      	movs	r3, #2
 8003874:	75fb      	strb	r3, [r7, #23]
 8003876:	e000      	b.n	800387a <HAL_ADC_Start_IT+0x276>
        }
 8003878:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800387a:	7dfb      	ldrb	r3, [r7, #23]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a87      	ldr	r2, [pc, #540]	; (8003ae0 <HAL_ADC_IRQHandler+0x240>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x30>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a86      	ldr	r2, [pc, #536]	; (8003ae4 <HAL_ADC_IRQHandler+0x244>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d101      	bne.n	80038d4 <HAL_ADC_IRQHandler+0x34>
 80038d0:	4b85      	ldr	r3, [pc, #532]	; (8003ae8 <HAL_ADC_IRQHandler+0x248>)
 80038d2:	e000      	b.n	80038d6 <HAL_ADC_IRQHandler+0x36>
 80038d4:	4b85      	ldr	r3, [pc, #532]	; (8003aec <HAL_ADC_IRQHandler+0x24c>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fc00 	bl	80030dc <LL_ADC_GetMultimode>
 80038dc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d017      	beq.n	8003918 <HAL_ADC_IRQHandler+0x78>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d012      	beq.n	8003918 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f001 f81a 	bl	8004944 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2202      	movs	r2, #2
 8003916:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <HAL_ADC_IRQHandler+0x8c>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8083 	beq.w	8003a3e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d07d      	beq.n	8003a3e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	d105      	bne.n	800395a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fb1a 	bl	8002f98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d062      	beq.n	8003a30 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a5d      	ldr	r2, [pc, #372]	; (8003ae4 <HAL_ADC_IRQHandler+0x244>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d002      	beq.n	800397a <HAL_ADC_IRQHandler+0xda>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	e000      	b.n	800397c <HAL_ADC_IRQHandler+0xdc>
 800397a:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_ADC_IRQHandler+0x240>)
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	4293      	cmp	r3, r2
 8003982:	d008      	beq.n	8003996 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b05      	cmp	r3, #5
 800398e:	d002      	beq.n	8003996 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b09      	cmp	r3, #9
 8003994:	d104      	bne.n	80039a0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	e00c      	b.n	80039ba <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a4f      	ldr	r2, [pc, #316]	; (8003ae4 <HAL_ADC_IRQHandler+0x244>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d002      	beq.n	80039b0 <HAL_ADC_IRQHandler+0x110>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	e000      	b.n	80039b2 <HAL_ADC_IRQHandler+0x112>
 80039b0:	4b4b      	ldr	r3, [pc, #300]	; (8003ae0 <HAL_ADC_IRQHandler+0x240>)
 80039b2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d135      	bne.n	8003a30 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d12e      	bne.n	8003a30 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fc4c 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d11a      	bne.n	8003a18 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 020c 	bic.w	r2, r2, #12
 80039f0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d112      	bne.n	8003a30 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	f043 0201 	orr.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
 8003a16:	e00b      	b.n	8003a30 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	f043 0210 	orr.w	r2, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7fe fbe5 	bl	8002200 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	220c      	movs	r2, #12
 8003a3c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_ADC_IRQHandler+0x1b2>
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a0 	beq.w	8003b9e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 809a 	beq.w	8003b9e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d105      	bne.n	8003a82 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fac5 	bl	8003016 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003a8c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fa80 	bl	8002f98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a98:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <HAL_ADC_IRQHandler+0x244>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d002      	beq.n	8003aaa <HAL_ADC_IRQHandler+0x20a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	e000      	b.n	8003aac <HAL_ADC_IRQHandler+0x20c>
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <HAL_ADC_IRQHandler+0x240>)
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d008      	beq.n	8003ac6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d002      	beq.n	8003ac6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b07      	cmp	r3, #7
 8003ac4:	d104      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	e014      	b.n	8003afa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a03      	ldr	r2, [pc, #12]	; (8003ae4 <HAL_ADC_IRQHandler+0x244>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00a      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x250>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	e008      	b.n	8003af2 <HAL_ADC_IRQHandler+0x252>
 8003ae0:	40022000 	.word	0x40022000
 8003ae4:	40022100 	.word	0x40022100
 8003ae8:	40022300 	.word	0x40022300
 8003aec:	58026300 	.word	0x58026300
 8003af0:	4b84      	ldr	r3, [pc, #528]	; (8003d04 <HAL_ADC_IRQHandler+0x464>)
 8003af2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d047      	beq.n	8003b90 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <HAL_ADC_IRQHandler+0x27a>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d03f      	beq.n	8003b90 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d13a      	bne.n	8003b90 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d133      	bne.n	8003b90 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d12e      	bne.n	8003b90 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fbaf 	bl	800329a <LL_ADC_INJ_IsConversionOngoing>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11a      	bne.n	8003b78 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b50:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d112      	bne.n	8003b90 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
 8003b76:	e00b      	b.n	8003b90 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	f043 0210 	orr.w	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 feaf 	bl	80048f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2260      	movs	r2, #96	; 0x60
 8003b9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d011      	beq.n	8003bcc <HAL_ADC_IRQHandler+0x32c>
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00c      	beq.n	8003bcc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8a8 	bl	8003d14 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d012      	beq.n	8003bfc <HAL_ADC_IRQHandler+0x35c>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fe95 	bl	800491c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d012      	beq.n	8003c2c <HAL_ADC_IRQHandler+0x38c>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fe87 	bl	8004930 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d043      	beq.n	8003cbe <HAL_ADC_IRQHandler+0x41e>
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d03e      	beq.n	8003cbe <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4c:	e021      	b.n	8003c92 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <HAL_ADC_IRQHandler+0x464>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_ADC_IRQHandler+0x3c8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <HAL_ADC_IRQHandler+0x468>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_ADC_IRQHandler+0x3cc>
 8003c68:	4b28      	ldr	r3, [pc, #160]	; (8003d0c <HAL_ADC_IRQHandler+0x46c>)
 8003c6a:	e000      	b.n	8003c6e <HAL_ADC_IRQHandler+0x3ce>
 8003c6c:	4b28      	ldr	r3, [pc, #160]	; (8003d10 <HAL_ADC_IRQHandler+0x470>)
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fa42 	bl	80030f8 <LL_ADC_GetMultiDMATransfer>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	e008      	b.n	8003c92 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10e      	bne.n	8003cb6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f043 0202 	orr.w	r2, r3, #2
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f839 	bl	8003d28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2210      	movs	r2, #16
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d018      	beq.n	8003cfa <HAL_ADC_IRQHandler+0x45a>
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d013      	beq.n	8003cfa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	f043 0208 	orr.w	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cf2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fe07 	bl	8004908 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003cfa:	bf00      	nop
 8003cfc:	3728      	adds	r7, #40	; 0x28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40022000 	.word	0x40022000
 8003d08:	40022100 	.word	0x40022100
 8003d0c:	40022300 	.word	0x40022300
 8003d10:	58026300 	.word	0x58026300

08003d14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b0a1      	sub	sp, #132	; 0x84
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a9d      	ldr	r2, [pc, #628]	; (8003fcc <HAL_ADC_ConfigChannel+0x290>)
 8003d56:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x2a>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e321      	b.n	80043aa <HAL_ADC_ConfigChannel+0x66e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fa7e 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 8306 	bne.w	800438c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x62>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2201      	movs	r2, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	e016      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x90>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003da6:	fa93 f3a3 	rbit	r3, r3
 8003daa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dae:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003db6:	2320      	movs	r3, #32
 8003db8:	e003      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	69d1      	ldr	r1, [r2, #28]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f7ff f8e9 	bl	8002fbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fa3f 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8003df6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fa4c 	bl	800329a <LL_ADC_INJ_IsConversionOngoing>
 8003e02:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 80b3 	bne.w	8003f72 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80af 	bne.w	8003f72 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	461a      	mov	r2, r3
 8003e22:	f7ff f90b 	bl	800303c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e26:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <HAL_ADC_ConfigChannel+0x294>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e32:	d10b      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x110>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	e01d      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x14c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x136>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	e00a      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x14c>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d027      	beq.n	8003ee2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea0:	f7ff f826 	bl	8002ef0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6919      	ldr	r1, [r3, #16]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	7e5b      	ldrb	r3, [r3, #25]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d102      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x17e>
 8003eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003eb8:	e000      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x180>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f7ff f850 	bl	8002f62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6919      	ldr	r1, [r3, #16]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	7e1b      	ldrb	r3, [r3, #24]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x19c>
 8003ed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ed6:	e000      	b.n	8003eda <HAL_ADC_ConfigChannel+0x19e>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	461a      	mov	r2, r3
 8003edc:	f7ff f828 	bl	8002f30 <LL_ADC_SetDataRightShift>
 8003ee0:	e047      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	069b      	lsls	r3, r3, #26
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d107      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f04:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	069b      	lsls	r3, r3, #26
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d107      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f28:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	069b      	lsls	r3, r3, #26
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d107      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f4c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	069b      	lsls	r3, r3, #26
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d107      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f70:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff f942 	bl	8003200 <LL_ADC_IsEnabled>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 820d 	bne.w	800439e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f7ff f87f 	bl	8003094 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <HAL_ADC_ConfigChannel+0x290>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	f040 8133 	bne.w	8004208 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d110      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x298>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	0e9b      	lsrs	r3, r3, #26
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2b09      	cmp	r3, #9
 8003fc0:	bf94      	ite	ls
 8003fc2:	2301      	movls	r3, #1
 8003fc4:	2300      	movhi	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e01e      	b.n	8004008 <HAL_ADC_ConfigChannel+0x2cc>
 8003fca:	bf00      	nop
 8003fcc:	47ff0000 	.word	0x47ff0000
 8003fd0:	5c001000 	.word	0x5c001000
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003fec:	2320      	movs	r3, #32
 8003fee:	e003      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2b09      	cmp	r3, #9
 8004000:	bf94      	ite	ls
 8004002:	2301      	movls	r3, #1
 8004004:	2300      	movhi	r3, #0
 8004006:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004008:	2b00      	cmp	r3, #0
 800400a:	d079      	beq.n	8004100 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x2ec>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	3301      	adds	r3, #1
 8004020:	069b      	lsls	r3, r3, #26
 8004022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004026:	e015      	b.n	8004054 <HAL_ADC_ConfigChannel+0x318>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	fa93 f3a3 	rbit	r3, r3
 8004034:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004038:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800403a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e003      	b.n	800404c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	3301      	adds	r3, #1
 800404e:	069b      	lsls	r3, r3, #26
 8004050:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x338>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0e9b      	lsrs	r3, r3, #26
 8004066:	3301      	adds	r3, #1
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	e017      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x368>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800408c:	2320      	movs	r3, #32
 800408e:	e003      	b.n	8004098 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	2101      	movs	r1, #1
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	ea42 0103 	orr.w	r1, r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x38e>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	0e9b      	lsrs	r3, r3, #26
 80040ba:	3301      	adds	r3, #1
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	051b      	lsls	r3, r3, #20
 80040c8:	e018      	b.n	80040fc <HAL_ADC_ConfigChannel+0x3c0>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80040dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80040e2:	2320      	movs	r3, #32
 80040e4:	e003      	b.n	80040ee <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040fc:	430b      	orrs	r3, r1
 80040fe:	e07e      	b.n	80041fe <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004108:	2b00      	cmp	r3, #0
 800410a:	d107      	bne.n	800411c <HAL_ADC_ConfigChannel+0x3e0>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	3301      	adds	r3, #1
 8004114:	069b      	lsls	r3, r3, #26
 8004116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800411a:	e015      	b.n	8004148 <HAL_ADC_ConfigChannel+0x40c>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004134:	2320      	movs	r3, #32
 8004136:	e003      	b.n	8004140 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3301      	adds	r3, #1
 8004142:	069b      	lsls	r3, r3, #26
 8004144:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x42c>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0e9b      	lsrs	r3, r3, #26
 800415a:	3301      	adds	r3, #1
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	e017      	b.n	8004198 <HAL_ADC_ConfigChannel+0x45c>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	61bb      	str	r3, [r7, #24]
  return result;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004180:	2320      	movs	r3, #32
 8004182:	e003      	b.n	800418c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	3301      	adds	r3, #1
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	ea42 0103 	orr.w	r1, r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x488>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0e9b      	lsrs	r3, r3, #26
 80041ae:	3301      	adds	r3, #1
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	4613      	mov	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4413      	add	r3, r2
 80041ba:	3b1e      	subs	r3, #30
 80041bc:	051b      	lsls	r3, r3, #20
 80041be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041c2:	e01b      	b.n	80041fc <HAL_ADC_ConfigChannel+0x4c0>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	fa93 f3a3 	rbit	r3, r3
 80041d0:	60fb      	str	r3, [r7, #12]
  return result;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80041dc:	2320      	movs	r3, #32
 80041de:	e003      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fab3 f383 	clz	r3, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	3301      	adds	r3, #1
 80041ea:	f003 021f 	and.w	r2, r3, #31
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	3b1e      	subs	r3, #30
 80041f6:	051b      	lsls	r3, r3, #20
 80041f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041fc:	430b      	orrs	r3, r1
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	4619      	mov	r1, r3
 8004204:	f7fe ff1a 	bl	800303c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f280 80c6 	bge.w	800439e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a67      	ldr	r2, [pc, #412]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_ADC_ConfigChannel+0x4ea>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a65      	ldr	r2, [pc, #404]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_ADC_ConfigChannel+0x4ee>
 8004226:	4b65      	ldr	r3, [pc, #404]	; (80043bc <HAL_ADC_ConfigChannel+0x680>)
 8004228:	e000      	b.n	800422c <HAL_ADC_ConfigChannel+0x4f0>
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_ADC_ConfigChannel+0x684>)
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe fe51 	bl	8002ed4 <LL_ADC_GetCommonPathInternalCh>
 8004232:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a5e      	ldr	r2, [pc, #376]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_ADC_ConfigChannel+0x50c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a5d      	ldr	r2, [pc, #372]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10e      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x52a>
 8004248:	485a      	ldr	r0, [pc, #360]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 800424a:	f7fe ffd9 	bl	8003200 <LL_ADC_IsEnabled>
 800424e:	4604      	mov	r4, r0
 8004250:	4859      	ldr	r0, [pc, #356]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004252:	f7fe ffd5 	bl	8003200 <LL_ADC_IsEnabled>
 8004256:	4603      	mov	r3, r0
 8004258:	4323      	orrs	r3, r4
 800425a:	2b00      	cmp	r3, #0
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e008      	b.n	8004278 <HAL_ADC_ConfigChannel+0x53c>
 8004266:	4857      	ldr	r0, [pc, #348]	; (80043c4 <HAL_ADC_ConfigChannel+0x688>)
 8004268:	f7fe ffca 	bl	8003200 <LL_ADC_IsEnabled>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d07d      	beq.n	8004378 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a51      	ldr	r2, [pc, #324]	; (80043c8 <HAL_ADC_ConfigChannel+0x68c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d130      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x5ac>
 8004286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d12b      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a4b      	ldr	r2, [pc, #300]	; (80043c4 <HAL_ADC_ConfigChannel+0x688>)
 8004296:	4293      	cmp	r3, r2
 8004298:	f040 8081 	bne.w	800439e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a44      	ldr	r2, [pc, #272]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_ADC_ConfigChannel+0x574>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a43      	ldr	r2, [pc, #268]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x578>
 80042b0:	4a42      	ldr	r2, [pc, #264]	; (80043bc <HAL_ADC_ConfigChannel+0x680>)
 80042b2:	e000      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x57a>
 80042b4:	4a42      	ldr	r2, [pc, #264]	; (80043c0 <HAL_ADC_ConfigChannel+0x684>)
 80042b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7fe fdf5 	bl	8002eae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042c4:	4b41      	ldr	r3, [pc, #260]	; (80043cc <HAL_ADC_ConfigChannel+0x690>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <HAL_ADC_ConfigChannel+0x694>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042d8:	e002      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f9      	bne.n	80042da <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e6:	e05a      	b.n	800439e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <HAL_ADC_ConfigChannel+0x698>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d11e      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x5f4>
 80042f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d119      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a30      	ldr	r2, [pc, #192]	; (80043c4 <HAL_ADC_ConfigChannel+0x688>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d14b      	bne.n	800439e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2a      	ldr	r2, [pc, #168]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_ADC_ConfigChannel+0x5de>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a28      	ldr	r2, [pc, #160]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d101      	bne.n	800431e <HAL_ADC_ConfigChannel+0x5e2>
 800431a:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_ADC_ConfigChannel+0x680>)
 800431c:	e000      	b.n	8004320 <HAL_ADC_ConfigChannel+0x5e4>
 800431e:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <HAL_ADC_ConfigChannel+0x684>)
 8004320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7fe fdc0 	bl	8002eae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800432e:	e036      	b.n	800439e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <HAL_ADC_ConfigChannel+0x69c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d131      	bne.n	800439e <HAL_ADC_ConfigChannel+0x662>
 800433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d12c      	bne.n	800439e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <HAL_ADC_ConfigChannel+0x688>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d127      	bne.n	800439e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_ADC_ConfigChannel+0x678>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_ADC_ConfigChannel+0x626>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <HAL_ADC_ConfigChannel+0x67c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x62a>
 8004362:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_ADC_ConfigChannel+0x680>)
 8004364:	e000      	b.n	8004368 <HAL_ADC_ConfigChannel+0x62c>
 8004366:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <HAL_ADC_ConfigChannel+0x684>)
 8004368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f7fe fd9c 	bl	8002eae <LL_ADC_SetCommonPathInternalCh>
 8004376:	e012      	b.n	800439e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800438a:	e008      	b.n	800439e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3784      	adds	r7, #132	; 0x84
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40022000 	.word	0x40022000
 80043b8:	40022100 	.word	0x40022100
 80043bc:	40022300 	.word	0x40022300
 80043c0:	58026300 	.word	0x58026300
 80043c4:	58026000 	.word	0x58026000
 80043c8:	cb840000 	.word	0xcb840000
 80043cc:	20000018 	.word	0x20000018
 80043d0:	053e2d63 	.word	0x053e2d63
 80043d4:	c7520000 	.word	0xc7520000
 80043d8:	cfb80000 	.word	0xcfb80000

080043dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe ff09 	bl	8003200 <LL_ADC_IsEnabled>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d16e      	bne.n	80044d2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	4b38      	ldr	r3, [pc, #224]	; (80044dc <ADC_Enable+0x100>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	f043 0210 	orr.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f043 0201 	orr.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e05a      	b.n	80044d4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fec4 	bl	80031b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004428:	f7fe fcc8 	bl	8002dbc <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <ADC_Enable+0x104>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <ADC_Enable+0x66>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a29      	ldr	r2, [pc, #164]	; (80044e4 <ADC_Enable+0x108>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <ADC_Enable+0x6a>
 8004442:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <ADC_Enable+0x10c>)
 8004444:	e000      	b.n	8004448 <ADC_Enable+0x6c>
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <ADC_Enable+0x110>)
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fe47 	bl	80030dc <LL_ADC_GetMultimode>
 800444e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a23      	ldr	r2, [pc, #140]	; (80044e4 <ADC_Enable+0x108>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d002      	beq.n	8004460 <ADC_Enable+0x84>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	e000      	b.n	8004462 <ADC_Enable+0x86>
 8004460:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <ADC_Enable+0x104>)
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d130      	bne.n	80044d2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004470:	e028      	b.n	80044c4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fec2 	bl	8003200 <LL_ADC_IsEnabled>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fe92 	bl	80031b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800448c:	f7fe fc96 	bl	8002dbc <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d914      	bls.n	80044c4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d00d      	beq.n	80044c4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	f043 0210 	orr.w	r2, r3, #16
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	f043 0201 	orr.w	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e007      	b.n	80044d4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d1cf      	bne.n	8004472 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	8000003f 	.word	0x8000003f
 80044e0:	40022000 	.word	0x40022000
 80044e4:	40022100 	.word	0x40022100
 80044e8:	40022300 	.word	0x40022300
 80044ec:	58026300 	.word	0x58026300

080044f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fe92 	bl	8003226 <LL_ADC_IsDisableOngoing>
 8004502:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe fe79 	bl	8003200 <LL_ADC_IsEnabled>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d047      	beq.n	80045a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d144      	bne.n	80045a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030d 	and.w	r3, r3, #13
 8004524:	2b01      	cmp	r3, #1
 8004526:	d10c      	bne.n	8004542 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fe53 	bl	80031d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2203      	movs	r2, #3
 8004538:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800453a:	f7fe fc3f 	bl	8002dbc <HAL_GetTick>
 800453e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004540:	e029      	b.n	8004596 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f043 0210 	orr.w	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	f043 0201 	orr.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e023      	b.n	80045a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800455e:	f7fe fc2d 	bl	8002dbc <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d914      	bls.n	8004596 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	f043 0210 	orr.w	r2, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e007      	b.n	80045a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1dc      	bne.n	800455e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a7a      	ldr	r2, [pc, #488]	; (80047a8 <ADC_ConfigureBoostMode+0x1f8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <ADC_ConfigureBoostMode+0x1c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a79      	ldr	r2, [pc, #484]	; (80047ac <ADC_ConfigureBoostMode+0x1fc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d109      	bne.n	80045e0 <ADC_ConfigureBoostMode+0x30>
 80045cc:	4b78      	ldr	r3, [pc, #480]	; (80047b0 <ADC_ConfigureBoostMode+0x200>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e008      	b.n	80045f2 <ADC_ConfigureBoostMode+0x42>
 80045e0:	4b74      	ldr	r3, [pc, #464]	; (80047b4 <ADC_ConfigureBoostMode+0x204>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01c      	beq.n	8004630 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80045f6:	f004 fadd 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 80045fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004604:	d010      	beq.n	8004628 <ADC_ConfigureBoostMode+0x78>
 8004606:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800460a:	d873      	bhi.n	80046f4 <ADC_ConfigureBoostMode+0x144>
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d002      	beq.n	8004618 <ADC_ConfigureBoostMode+0x68>
 8004612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004616:	d16d      	bne.n	80046f4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	60fb      	str	r3, [r7, #12]
        break;
 8004626:	e068      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	60fb      	str	r3, [r7, #12]
        break;
 800462e:	e064      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004630:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	f005 fd3e 	bl	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800463c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004646:	d051      	beq.n	80046ec <ADC_ConfigureBoostMode+0x13c>
 8004648:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800464c:	d854      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 800464e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004652:	d047      	beq.n	80046e4 <ADC_ConfigureBoostMode+0x134>
 8004654:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004658:	d84e      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 800465a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800465e:	d03d      	beq.n	80046dc <ADC_ConfigureBoostMode+0x12c>
 8004660:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004664:	d848      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 8004666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800466a:	d033      	beq.n	80046d4 <ADC_ConfigureBoostMode+0x124>
 800466c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004670:	d842      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 8004672:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004676:	d029      	beq.n	80046cc <ADC_ConfigureBoostMode+0x11c>
 8004678:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800467c:	d83c      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 800467e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004682:	d01a      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 8004684:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004688:	d836      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 800468a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800468e:	d014      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 8004690:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004694:	d830      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 8004696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469a:	d00e      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 800469c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a0:	d82a      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 80046a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046a6:	d008      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 80046a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046ac:	d824      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x148>
 80046ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046b2:	d002      	beq.n	80046ba <ADC_ConfigureBoostMode+0x10a>
 80046b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046b8:	d11e      	bne.n	80046f8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	0c9b      	lsrs	r3, r3, #18
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	60fb      	str	r3, [r7, #12]
        break;
 80046ca:	e016      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]
        break;
 80046d2:	e012      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	60fb      	str	r3, [r7, #12]
        break;
 80046da:	e00e      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	099b      	lsrs	r3, r3, #6
 80046e0:	60fb      	str	r3, [r7, #12]
        break;
 80046e2:	e00a      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	09db      	lsrs	r3, r3, #7
 80046e8:	60fb      	str	r3, [r7, #12]
        break;
 80046ea:	e006      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	60fb      	str	r3, [r7, #12]
        break;
 80046f2:	e002      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
        break;
 80046f4:	bf00      	nop
 80046f6:	e000      	b.n	80046fa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80046f8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80046fa:	f7fe fb8f 	bl	8002e1c <HAL_GetREVID>
 80046fe:	4603      	mov	r3, r0
 8004700:	f241 0203 	movw	r2, #4099	; 0x1003
 8004704:	4293      	cmp	r3, r2
 8004706:	d815      	bhi.n	8004734 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a2b      	ldr	r2, [pc, #172]	; (80047b8 <ADC_ConfigureBoostMode+0x208>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d908      	bls.n	8004722 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004720:	e03e      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004730:	609a      	str	r2, [r3, #8]
}
 8004732:	e035      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a1f      	ldr	r2, [pc, #124]	; (80047bc <ADC_ConfigureBoostMode+0x20c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d808      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	e025      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <ADC_ConfigureBoostMode+0x210>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d80a      	bhi.n	8004772 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	e016      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <ADC_ConfigureBoostMode+0x214>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d80a      	bhi.n	8004790 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478c:	609a      	str	r2, [r3, #8]
}
 800478e:	e007      	b.n	80047a0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800479e:	609a      	str	r2, [r3, #8]
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40022000 	.word	0x40022000
 80047ac:	40022100 	.word	0x40022100
 80047b0:	40022300 	.word	0x40022300
 80047b4:	58026300 	.word	0x58026300
 80047b8:	01312d00 	.word	0x01312d00
 80047bc:	005f5e10 	.word	0x005f5e10
 80047c0:	00bebc20 	.word	0x00bebc20
 80047c4:	017d7840 	.word	0x017d7840

080047c8 <LL_ADC_StartCalibration>:
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	4b09      	ldr	r3, [pc, #36]	; (8004800 <LL_ADC_StartCalibration+0x38>)
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80047e8:	430a      	orrs	r2, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	609a      	str	r2, [r3, #8]
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	3ffeffc0 	.word	0x3ffeffc0

08004804 <LL_ADC_IsCalibrationOnGoing>:
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004818:	d101      	bne.n	800481e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_ADCEx_Calibration_Start+0x1e>
 8004846:	2302      	movs	r3, #2
 8004848:	e04c      	b.n	80048e4 <HAL_ADCEx_Calibration_Start+0xb8>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff fe4c 	bl	80044f0 <ADC_Disable>
 8004858:	4603      	mov	r3, r0
 800485a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800485c:	7dfb      	ldrb	r3, [r7, #23]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d135      	bne.n	80048ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004866:	4b21      	ldr	r3, [pc, #132]	; (80048ec <HAL_ADCEx_Calibration_Start+0xc0>)
 8004868:	4013      	ands	r3, r2
 800486a:	f043 0202 	orr.w	r2, r3, #2
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ffa4 	bl	80047c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004880:	e014      	b.n	80048ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	3301      	adds	r3, #1
 8004886:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d30d      	bcc.n	80048ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f023 0312 	bic.w	r3, r3, #18
 8004898:	f043 0210 	orr.w	r2, r3, #16
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e01b      	b.n	80048e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff ffa7 	bl	8004804 <LL_ADC_IsCalibrationOnGoing>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e2      	bne.n	8004882 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f023 0303 	bic.w	r3, r3, #3
 80048c4:	f043 0201 	orr.w	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	655a      	str	r2, [r3, #84]	; 0x54
 80048cc:	e005      	b.n	80048da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f043 0210 	orr.w	r2, r3, #16
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	ffffeefd 	.word	0xffffeefd
 80048f0:	25c3f800 	.word	0x25c3f800

080048f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <__NVIC_SetPriorityGrouping>:
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <__NVIC_SetPriorityGrouping+0x40>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 8004982:	4313      	orrs	r3, r2
 8004984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <__NVIC_SetPriorityGrouping+0x40>)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	60d3      	str	r3, [r2, #12]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00
 800499c:	05fa0000 	.word	0x05fa0000

080049a0 <__NVIC_GetPriorityGrouping>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <__NVIC_EnableIRQ+0x38>)
 80049d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <__NVIC_SetPriority>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	6039      	str	r1, [r7, #0]
 8004a02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	db0a      	blt.n	8004a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	490c      	ldr	r1, [pc, #48]	; (8004a44 <__NVIC_SetPriority+0x4c>)
 8004a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a16:	0112      	lsls	r2, r2, #4
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a20:	e00a      	b.n	8004a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	4908      	ldr	r1, [pc, #32]	; (8004a48 <__NVIC_SetPriority+0x50>)
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	0112      	lsls	r2, r2, #4
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	440b      	add	r3, r1
 8004a36:	761a      	strb	r2, [r3, #24]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000e100 	.word	0xe000e100
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <NVIC_EncodePriority>:
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f1c3 0307 	rsb	r3, r3, #7
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	bf28      	it	cs
 8004a6a:	2304      	movcs	r3, #4
 8004a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3304      	adds	r3, #4
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d902      	bls.n	8004a7c <NVIC_EncodePriority+0x30>
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3b03      	subs	r3, #3
 8004a7a:	e000      	b.n	8004a7e <NVIC_EncodePriority+0x32>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	401a      	ands	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a94:	f04f 31ff 	mov.w	r1, #4294967295
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	43d9      	mvns	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	4313      	orrs	r3, r2
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac4:	d301      	bcc.n	8004aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e00f      	b.n	8004aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <SysTick_Config+0x40>)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad2:	210f      	movs	r1, #15
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	f7ff ff8e 	bl	80049f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <SysTick_Config+0x40>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <SysTick_Config+0x40>)
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	e000e010 	.word	0xe000e010

08004af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff29 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	4603      	mov	r3, r0
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b1c:	f7ff ff40 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004b20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	6978      	ldr	r0, [r7, #20]
 8004b28:	f7ff ff90 	bl	8004a4c <NVIC_EncodePriority>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b32:	4611      	mov	r1, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ff5f 	bl	80049f8 <__NVIC_SetPriority>
}
 8004b3a:	bf00      	nop
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	4603      	mov	r3, r0
 8004b4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff33 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff ffa4 	bl	8004ab4 <SysTick_Config>
 8004b6c:	4603      	mov	r3, r0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e014      	b.n	8004bb2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	791b      	ldrb	r3, [r3, #4]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fd fc05 	bl	80023a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	795b      	ldrb	r3, [r3, #5]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_DAC_Start+0x16>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e040      	b.n	8004c52 <HAL_DAC_Start+0x98>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6819      	ldr	r1, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2201      	movs	r2, #1
 8004bea:	409a      	lsls	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d11d      	bne.n	8004c44 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	605a      	str	r2, [r3, #4]
 8004c18:	e014      	b.n	8004c44 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2102      	movs	r1, #2
 8004c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d107      	bne.n	8004c44 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0202 	orr.w	r2, r2, #2
 8004c42:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b087      	sub	sp, #28
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	3308      	adds	r3, #8
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e004      	b.n	8004c92 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3314      	adds	r3, #20
 8004c90:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	461a      	mov	r2, r3
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	795b      	ldrb	r3, [r3, #5]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_DAC_ConfigChannel+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e12a      	b.n	8004f16 <HAL_DAC_ConfigChannel+0x26e>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	f040 8081 	bne.w	8004dd8 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004cd6:	f7fe f871 	bl	8002dbc <HAL_GetTick>
 8004cda:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d140      	bne.n	8004d64 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ce2:	e018      	b.n	8004d16 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ce4:	f7fe f86a 	bl	8002dbc <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d911      	bls.n	8004d16 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf8:	4b89      	ldr	r3, [pc, #548]	; (8004f20 <HAL_DAC_ConfigChannel+0x278>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f043 0208 	orr.w	r2, r3, #8
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2203      	movs	r2, #3
 8004d10:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e0ff      	b.n	8004f16 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1c:	4b80      	ldr	r3, [pc, #512]	; (8004f20 <HAL_DAC_ConfigChannel+0x278>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1df      	bne.n	8004ce4 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8004d24:	2001      	movs	r0, #1
 8004d26:	f7fe f855 	bl	8002dd4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	6992      	ldr	r2, [r2, #24]
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
 8004d34:	e023      	b.n	8004d7e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d36:	f7fe f841 	bl	8002dbc <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d90f      	bls.n	8004d64 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	da0a      	bge.n	8004d64 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f043 0208 	orr.w	r2, r3, #8
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e0d8      	b.n	8004f16 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	dbe3      	blt.n	8004d36 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f7fe f830 	bl	8002dd4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	6992      	ldr	r2, [r2, #24]
 8004d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	ea02 0103 	and.w	r1, r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	409a      	lsls	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	21ff      	movs	r1, #255	; 0xff
 8004dba:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	ea02 0103 	and.w	r1, r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d11d      	bne.n	8004e1c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	221f      	movs	r2, #31
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	2207      	movs	r2, #7
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43db      	mvns	r3, r3
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4013      	ands	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d102      	bne.n	8004e46 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	e00f      	b.n	8004e66 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d102      	bne.n	8004e54 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	e008      	b.n	8004e66 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	e001      	b.n	8004e66 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6819      	ldr	r1, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43da      	mvns	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	400a      	ands	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6819      	ldr	r1, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	22c0      	movs	r2, #192	; 0xc0
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43da      	mvns	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	400a      	ands	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20008000 	.word	0x20008000

08004f24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e0cf      	b.n	80050d6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2223      	movs	r2, #35	; 0x23
 8004f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fd fa73 	bl	8002434 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4e:	4b64      	ldr	r3, [pc, #400]	; (80050e0 <HAL_ETH_Init+0x1bc>)
 8004f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f54:	4a62      	ldr	r2, [pc, #392]	; (80050e0 <HAL_ETH_Init+0x1bc>)
 8004f56:	f043 0302 	orr.w	r3, r3, #2
 8004f5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f5e:	4b60      	ldr	r3, [pc, #384]	; (80050e0 <HAL_ETH_Init+0x1bc>)
 8004f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	7a1b      	ldrb	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f7fd ff5d 	bl	8002e34 <HAL_SYSCFG_ETHInterfaceSelect>
 8004f7a:	e003      	b.n	8004f84 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004f7c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004f80:	f7fd ff58 	bl	8002e34 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004f84:	4b57      	ldr	r3, [pc, #348]	; (80050e4 <HAL_ETH_Init+0x1c0>)
 8004f86:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa0:	f7fd ff0c 	bl	8002dbc <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fa6:	e011      	b.n	8004fcc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004fa8:	f7fd ff08 	bl	8002dbc <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fb6:	d909      	bls.n	8004fcc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	22e0      	movs	r2, #224	; 0xe0
 8004fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e084      	b.n	80050d6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e4      	bne.n	8004fa8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f886 	bl	80050f0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004fe4:	f003 fde6 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4a3f      	ldr	r2, [pc, #252]	; (80050e8 <HAL_ETH_Init+0x1c4>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	0c9a      	lsrs	r2, r3, #18
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3a01      	subs	r2, #1
 8004ff8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa71 	bl	80054e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800500e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800501a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800501e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	22e0      	movs	r2, #224	; 0xe0
 800503a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e049      	b.n	80050d6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800504e:	4b27      	ldr	r3, [pc, #156]	; (80050ec <HAL_ETH_Init+0x1c8>)
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6952      	ldr	r2, [r2, #20]
 8005056:	0051      	lsls	r1, r2, #1
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	430b      	orrs	r3, r1
 800505e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005062:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fad9 	bl	800561e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fb1f 	bl	80056b0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	3305      	adds	r3, #5
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	021a      	lsls	r2, r3, #8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	3303      	adds	r3, #3
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	061a      	lsls	r2, r3, #24
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	3302      	adds	r3, #2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	3301      	adds	r3, #1
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2210      	movs	r2, #16
 80050d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
 80050e4:	58000400 	.word	0x58000400
 80050e8:	431bde83 	.word	0x431bde83
 80050ec:	ffff8001 	.word	0xffff8001

080050f0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005100:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005108:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800510a:	f003 fd53 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 800510e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4a1e      	ldr	r2, [pc, #120]	; (800518c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d908      	bls.n	800512a <HAL_ETH_SetMDIOClockRange+0x3a>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d804      	bhi.n	800512a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e027      	b.n	800517a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4a18      	ldr	r2, [pc, #96]	; (8005190 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d908      	bls.n	8005144 <HAL_ETH_SetMDIOClockRange+0x54>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4a17      	ldr	r2, [pc, #92]	; (8005194 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d204      	bcs.n	8005144 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e01a      	b.n	800517a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4a13      	ldr	r2, [pc, #76]	; (8005194 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d303      	bcc.n	8005154 <HAL_ETH_SetMDIOClockRange+0x64>
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4a12      	ldr	r2, [pc, #72]	; (8005198 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d911      	bls.n	8005178 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4a10      	ldr	r2, [pc, #64]	; (8005198 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d908      	bls.n	800516e <HAL_ETH_SetMDIOClockRange+0x7e>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4a0f      	ldr	r2, [pc, #60]	; (800519c <HAL_ETH_SetMDIOClockRange+0xac>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d804      	bhi.n	800516e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e005      	b.n	800517a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e000      	b.n	800517a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005178:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	01312cff 	.word	0x01312cff
 8005190:	02160ebf 	.word	0x02160ebf
 8005194:	03938700 	.word	0x03938700
 8005198:	05f5e0ff 	.word	0x05f5e0ff
 800519c:	08f0d17f 	.word	0x08f0d17f

080051a0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80051b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	791b      	ldrb	r3, [r3, #4]
 80051b8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80051ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	7b1b      	ldrb	r3, [r3, #12]
 80051c0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	7b5b      	ldrb	r3, [r3, #13]
 80051c8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7b9b      	ldrb	r3, [r3, #14]
 80051d0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	7bdb      	ldrb	r3, [r3, #15]
 80051d8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	7c12      	ldrb	r2, [r2, #16]
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d102      	bne.n	80051ea <ETH_SetMACConfig+0x4a>
 80051e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051e8:	e000      	b.n	80051ec <ETH_SetMACConfig+0x4c>
 80051ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	7c52      	ldrb	r2, [r2, #17]
 80051f2:	2a00      	cmp	r2, #0
 80051f4:	d102      	bne.n	80051fc <ETH_SetMACConfig+0x5c>
 80051f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051fa:	e000      	b.n	80051fe <ETH_SetMACConfig+0x5e>
 80051fc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80051fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	7c9b      	ldrb	r3, [r3, #18]
 8005204:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005206:	431a      	orrs	r2, r3
               macconf->Speed |
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800520c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005212:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	7f1b      	ldrb	r3, [r3, #28]
 8005218:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800521a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	7f5b      	ldrb	r3, [r3, #29]
 8005220:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005222:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	7f92      	ldrb	r2, [r2, #30]
 8005228:	2a00      	cmp	r2, #0
 800522a:	d102      	bne.n	8005232 <ETH_SetMACConfig+0x92>
 800522c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005230:	e000      	b.n	8005234 <ETH_SetMACConfig+0x94>
 8005232:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005234:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	7fdb      	ldrb	r3, [r3, #31]
 800523a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800523c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005244:	2a00      	cmp	r2, #0
 8005246:	d102      	bne.n	800524e <ETH_SetMACConfig+0xae>
 8005248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800524c:	e000      	b.n	8005250 <ETH_SetMACConfig+0xb0>
 800524e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005250:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005256:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800525e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005260:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4b56      	ldr	r3, [pc, #344]	; (80053cc <ETH_SetMACConfig+0x22c>)
 8005272:	4013      	ands	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	430b      	orrs	r3, r1
 800527c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800528a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800528c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005294:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005296:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800529e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	d102      	bne.n	80052b2 <ETH_SetMACConfig+0x112>
 80052ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052b0:	e000      	b.n	80052b4 <ETH_SetMACConfig+0x114>
 80052b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052b4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4b42      	ldr	r3, [pc, #264]	; (80053d0 <ETH_SetMACConfig+0x230>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	68f9      	ldr	r1, [r7, #12]
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <ETH_SetMACConfig+0x234>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	68f9      	ldr	r1, [r7, #12]
 80052f2:	430b      	orrs	r3, r1
 80052f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80052fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005302:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800530a:	2a00      	cmp	r2, #0
 800530c:	d101      	bne.n	8005312 <ETH_SetMACConfig+0x172>
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	e000      	b.n	8005314 <ETH_SetMACConfig+0x174>
 8005312:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005314:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005326:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800532a:	4013      	ands	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	430b      	orrs	r3, r1
 8005334:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800533c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005344:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f023 0103 	bic.w	r1, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	430a      	orrs	r2, r1
 800535e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800536a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005386:	2a00      	cmp	r2, #0
 8005388:	d101      	bne.n	800538e <ETH_SetMACConfig+0x1ee>
 800538a:	2240      	movs	r2, #64	; 0x40
 800538c:	e000      	b.n	8005390 <ETH_SetMACConfig+0x1f0>
 800538e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005390:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005398:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800539a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80053a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80053b0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	00048083 	.word	0x00048083
 80053d0:	c0f88000 	.word	0xc0f88000
 80053d4:	fffffef0 	.word	0xfffffef0

080053d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b38      	ldr	r3, [pc, #224]	; (80054d0 <ETH_SetDMAConfig+0xf8>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	6811      	ldr	r1, [r2, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	430b      	orrs	r3, r1
 80053fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053fe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	791b      	ldrb	r3, [r3, #4]
 8005404:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800540a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	7b1b      	ldrb	r3, [r3, #12]
 8005410:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <ETH_SetDMAConfig+0xfc>)
 8005422:	4013      	ands	r3, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	430b      	orrs	r3, r1
 800542c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005430:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	7b5b      	ldrb	r3, [r3, #13]
 8005436:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005448:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800544c:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <ETH_SetDMAConfig+0x100>)
 800544e:	4013      	ands	r3, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	430b      	orrs	r3, r1
 8005458:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800545c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	7d1b      	ldrb	r3, [r3, #20]
 8005468:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800546a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	7f5b      	ldrb	r3, [r3, #29]
 8005470:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800547e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005482:	4b16      	ldr	r3, [pc, #88]	; (80054dc <ETH_SetDMAConfig+0x104>)
 8005484:	4013      	ands	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	430b      	orrs	r3, r1
 800548e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005492:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	7f1b      	ldrb	r3, [r3, #28]
 800549a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <ETH_SetDMAConfig+0x108>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	68f9      	ldr	r1, [r7, #12]
 80054ba:	430b      	orrs	r3, r1
 80054bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054c0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	ffff87fd 	.word	0xffff87fd
 80054d4:	ffff2ffe 	.word	0xffff2ffe
 80054d8:	fffec000 	.word	0xfffec000
 80054dc:	ffc0efef 	.word	0xffc0efef
 80054e0:	7fc0ffff 	.word	0x7fc0ffff

080054e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b0a4      	sub	sp, #144	; 0x90
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054f2:	2300      	movs	r3, #0
 80054f4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005524:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005526:	2300      	movs	r3, #0
 8005528:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800552c:	2300      	movs	r3, #0
 800552e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005530:	2300      	movs	r3, #0
 8005532:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800553c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005540:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005542:	2300      	movs	r3, #0
 8005544:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005548:	2300      	movs	r3, #0
 800554a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005552:	2300      	movs	r3, #0
 8005554:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005558:	2300      	movs	r3, #0
 800555a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800555e:	2300      	movs	r3, #0
 8005560:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005562:	2300      	movs	r3, #0
 8005564:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005566:	2300      	movs	r3, #0
 8005568:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800556a:	2300      	movs	r3, #0
 800556c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005570:	2300      	movs	r3, #0
 8005572:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800557c:	2320      	movs	r3, #32
 800557e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005588:	2300      	movs	r3, #0
 800558a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800558e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005594:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005598:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80055a0:	2302      	movs	r3, #2
 80055a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80055be:	2300      	movs	r3, #0
 80055c0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80055c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fde6 	bl	80051a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80055d4:	2301      	movs	r3, #1
 80055d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80055d8:	2301      	movs	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80055f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005604:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800560a:	f107 0308 	add.w	r3, r7, #8
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fee1 	bl	80053d8 <ETH_SetDMAConfig>
}
 8005616:	bf00      	nop
 8005618:	3790      	adds	r7, #144	; 0x90
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	e01d      	b.n	8005668 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68d9      	ldr	r1, [r3, #12]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4613      	mov	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4413      	add	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	440b      	add	r3, r1
 800563c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2200      	movs	r2, #0
 800564e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2200      	movs	r2, #0
 8005654:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005656:	68b9      	ldr	r1, [r7, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	3206      	adds	r2, #6
 800565e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b03      	cmp	r3, #3
 800566c:	d9de      	bls.n	800562c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567c:	461a      	mov	r2, r3
 800567e:	2303      	movs	r3, #3
 8005680:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005690:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e023      	b.n	8005706 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6919      	ldr	r1, [r3, #16]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	440b      	add	r3, r1
 80056ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2200      	movs	r2, #0
 80056da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2200      	movs	r2, #0
 80056e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2200      	movs	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2200      	movs	r2, #0
 80056f2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	3212      	adds	r2, #18
 80056fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d9d8      	bls.n	80056be <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005732:	461a      	mov	r2, r3
 8005734:	2303      	movs	r3, #3
 8005736:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005746:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800576c:	b480      	push	{r7}
 800576e:	b089      	sub	sp, #36	; 0x24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800577a:	4b89      	ldr	r3, [pc, #548]	; (80059a0 <HAL_GPIO_Init+0x234>)
 800577c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800577e:	e194      	b.n	8005aaa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	2101      	movs	r1, #1
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	fa01 f303 	lsl.w	r3, r1, r3
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8186 	beq.w	8005aa4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d005      	beq.n	80057b0 <HAL_GPIO_Init+0x44>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d130      	bne.n	8005812 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	2203      	movs	r2, #3
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	43db      	mvns	r3, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4013      	ands	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057e6:	2201      	movs	r2, #1
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	43db      	mvns	r3, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4013      	ands	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	f003 0201 	and.w	r2, r3, #1
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4313      	orrs	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b03      	cmp	r3, #3
 800581c:	d017      	beq.n	800584e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	2203      	movs	r2, #3
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4313      	orrs	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d123      	bne.n	80058a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	08da      	lsrs	r2, r3, #3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3208      	adds	r2, #8
 8005862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	220f      	movs	r2, #15
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4313      	orrs	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	08da      	lsrs	r2, r3, #3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3208      	adds	r2, #8
 800589c:	69b9      	ldr	r1, [r7, #24]
 800589e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	2203      	movs	r2, #3
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4013      	ands	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 0203 	and.w	r2, r3, #3
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80e0 	beq.w	8005aa4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058e4:	4b2f      	ldr	r3, [pc, #188]	; (80059a4 <HAL_GPIO_Init+0x238>)
 80058e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058ea:	4a2e      	ldr	r2, [pc, #184]	; (80059a4 <HAL_GPIO_Init+0x238>)
 80058ec:	f043 0302 	orr.w	r3, r3, #2
 80058f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058f4:	4b2b      	ldr	r3, [pc, #172]	; (80059a4 <HAL_GPIO_Init+0x238>)
 80058f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005902:	4a29      	ldr	r2, [pc, #164]	; (80059a8 <HAL_GPIO_Init+0x23c>)
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	089b      	lsrs	r3, r3, #2
 8005908:	3302      	adds	r3, #2
 800590a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	220f      	movs	r2, #15
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	43db      	mvns	r3, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4013      	ands	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a20      	ldr	r2, [pc, #128]	; (80059ac <HAL_GPIO_Init+0x240>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d052      	beq.n	80059d4 <HAL_GPIO_Init+0x268>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <HAL_GPIO_Init+0x244>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d031      	beq.n	800599a <HAL_GPIO_Init+0x22e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <HAL_GPIO_Init+0x248>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d02b      	beq.n	8005996 <HAL_GPIO_Init+0x22a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <HAL_GPIO_Init+0x24c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d025      	beq.n	8005992 <HAL_GPIO_Init+0x226>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_GPIO_Init+0x250>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01f      	beq.n	800598e <HAL_GPIO_Init+0x222>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <HAL_GPIO_Init+0x254>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d019      	beq.n	800598a <HAL_GPIO_Init+0x21e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1a      	ldr	r2, [pc, #104]	; (80059c4 <HAL_GPIO_Init+0x258>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <HAL_GPIO_Init+0x21a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <HAL_GPIO_Init+0x25c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00d      	beq.n	8005982 <HAL_GPIO_Init+0x216>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_GPIO_Init+0x260>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d007      	beq.n	800597e <HAL_GPIO_Init+0x212>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_GPIO_Init+0x264>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d101      	bne.n	800597a <HAL_GPIO_Init+0x20e>
 8005976:	2309      	movs	r3, #9
 8005978:	e02d      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 800597a:	230a      	movs	r3, #10
 800597c:	e02b      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 800597e:	2308      	movs	r3, #8
 8005980:	e029      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 8005982:	2307      	movs	r3, #7
 8005984:	e027      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 8005986:	2306      	movs	r3, #6
 8005988:	e025      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 800598a:	2305      	movs	r3, #5
 800598c:	e023      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 800598e:	2304      	movs	r3, #4
 8005990:	e021      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 8005992:	2303      	movs	r3, #3
 8005994:	e01f      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 8005996:	2302      	movs	r3, #2
 8005998:	e01d      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 800599a:	2301      	movs	r3, #1
 800599c:	e01b      	b.n	80059d6 <HAL_GPIO_Init+0x26a>
 800599e:	bf00      	nop
 80059a0:	58000080 	.word	0x58000080
 80059a4:	58024400 	.word	0x58024400
 80059a8:	58000400 	.word	0x58000400
 80059ac:	58020000 	.word	0x58020000
 80059b0:	58020400 	.word	0x58020400
 80059b4:	58020800 	.word	0x58020800
 80059b8:	58020c00 	.word	0x58020c00
 80059bc:	58021000 	.word	0x58021000
 80059c0:	58021400 	.word	0x58021400
 80059c4:	58021800 	.word	0x58021800
 80059c8:	58021c00 	.word	0x58021c00
 80059cc:	58022000 	.word	0x58022000
 80059d0:	58022400 	.word	0x58022400
 80059d4:	2300      	movs	r3, #0
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	f002 0203 	and.w	r2, r2, #3
 80059dc:	0092      	lsls	r2, r2, #2
 80059de:	4093      	lsls	r3, r2
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059e6:	4938      	ldr	r1, [pc, #224]	; (8005ac8 <HAL_GPIO_Init+0x35c>)
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	3302      	adds	r3, #2
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	43db      	mvns	r3, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	4013      	ands	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	43db      	mvns	r3, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4013      	ands	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f47f ae63 	bne.w	8005780 <HAL_GPIO_Init+0x14>
  }
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	3724      	adds	r7, #36	; 0x24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	58000400 	.word	0x58000400

08005acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	887b      	ldrh	r3, [r7, #2]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
 8005ae8:	e001      	b.n	8005aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	807b      	strh	r3, [r7, #2]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b0c:	787b      	ldrb	r3, [r7, #1]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b12:	887a      	ldrh	r2, [r7, #2]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b18:	e003      	b.n	8005b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b1a:	887b      	ldrh	r3, [r7, #2]
 8005b1c:	041a      	lsls	r2, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	619a      	str	r2, [r3, #24]
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b40:	887a      	ldrh	r2, [r7, #2]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4013      	ands	r3, r2
 8005b46:	041a      	lsls	r2, r3, #16
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	43d9      	mvns	r1, r3
 8005b4c:	887b      	ldrh	r3, [r7, #2]
 8005b4e:	400b      	ands	r3, r1
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	619a      	str	r2, [r3, #24]
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	4603      	mov	r3, r0
 8005b6a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f804 	bl	8005b96 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e0bd      	b.n	8005d3a <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d031      	beq.n	8005c66 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a4f      	ldr	r2, [pc, #316]	; (8005d44 <HAL_HRTIM_Init+0x198>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d10e      	bne.n	8005c2a <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005c0c:	4b4e      	ldr	r3, [pc, #312]	; (8005d48 <HAL_HRTIM_Init+0x19c>)
 8005c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c12:	4a4d      	ldr	r2, [pc, #308]	; (8005d48 <HAL_HRTIM_Init+0x19c>)
 8005c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005c1c:	4b4a      	ldr	r3, [pc, #296]	; (8005d48 <HAL_HRTIM_Init+0x19c>)
 8005c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005c38:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c4e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc fcb2 	bl	80025d0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d012      	beq.n	8005c9e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c86:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]
 8005cb2:	e03e      	b.n	8005d32 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005cb4:	7dfa      	ldrb	r2, [r7, #23]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	1a9b      	subs	r3, r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8005cc8:	7dfa      	ldrb	r2, [r7, #23]
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	331c      	adds	r3, #28
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8005cdc:	7dfa      	ldrb	r2, [r7, #23]
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	440b      	add	r3, r1
 8005cea:	3320      	adds	r3, #32
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8005cf0:	7dfa      	ldrb	r2, [r7, #23]
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	3324      	adds	r3, #36	; 0x24
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8005d04:	7dfa      	ldrb	r2, [r7, #23]
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	3328      	adds	r3, #40	; 0x28
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8005d18:	7dfa      	ldrb	r2, [r7, #23]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	3330      	adds	r3, #48	; 0x30
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
 8005d34:	2b05      	cmp	r3, #5
 8005d36:	d9bd      	bls.n	8005cb4 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40017400 	.word	0x40017400
 8005d48:	58024400 	.word	0x58024400

08005d4c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d101      	bne.n	8005d68 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8005d64:	2302      	movs	r3, #2
 8005d66:	e015      	b.n	8005d94 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b05      	cmp	r3, #5
 8005d74:	d104      	bne.n	8005d80 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fd43 	bl	8006804 <HRTIM_MasterBase_Config>
 8005d7e:	e004      	b.n	8005d8a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fd6c 	bl	8006862 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d101      	bne.n	8005db8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
 8005db6:	e05f      	b.n	8005e78 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e058      	b.n	8005e78 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b05      	cmp	r3, #5
 8005dda:	d104      	bne.n	8005de6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fd7f 	bl	80068e2 <HRTIM_MasterWaveform_Config>
 8005de4:	e004      	b.n	8005df0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fde0 	bl	80069b0 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4403      	add	r3, r0
 8005e02:	3320      	adds	r3, #32
 8005e04:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6859      	ldr	r1, [r3, #4]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4403      	add	r3, r0
 8005e18:	3324      	adds	r3, #36	; 0x24
 8005e1a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6899      	ldr	r1, [r3, #8]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4613      	mov	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4403      	add	r3, r0
 8005e2e:	3328      	adds	r3, #40	; 0x28
 8005e30:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68d9      	ldr	r1, [r3, #12]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4403      	add	r3, r0
 8005e44:	332c      	adds	r3, #44	; 0x2c
 8005e46:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6919      	ldr	r1, [r3, #16]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4403      	add	r3, r0
 8005e5a:	3330      	adds	r3, #48	; 0x30
 8005e5c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 ffe3 	bl	8006e2c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d101      	bne.n	8005e9e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e157      	b.n	800614e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e150      	b.n	800614e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b05      	cmp	r3, #5
 8005ec0:	d140      	bne.n	8005f44 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	2b07      	cmp	r3, #7
 8005ec8:	d82a      	bhi.n	8005f20 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ef1 	.word	0x08005ef1
 8005ed4:	08005efd 	.word	0x08005efd
 8005ed8:	08005f21 	.word	0x08005f21
 8005edc:	08005f09 	.word	0x08005f09
 8005ee0:	08005f21 	.word	0x08005f21
 8005ee4:	08005f21 	.word	0x08005f21
 8005ee8:	08005f21 	.word	0x08005f21
 8005eec:	08005f15 	.word	0x08005f15
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	61da      	str	r2, [r3, #28]
        break;
 8005efa:	e01a      	b.n	8005f32 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	6812      	ldr	r2, [r2, #0]
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8005f06:	e014      	b.n	8005f32 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005f12:	e00e      	b.n	8005f32 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005f1e:	e008      	b.n	8005f32 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2207      	movs	r2, #7
 8005f24:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8005f30:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b07      	cmp	r3, #7
 8005f3c:	f040 80fe 	bne.w	800613c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e104      	b.n	800614e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	2b07      	cmp	r3, #7
 8005f4a:	f200 80e3 	bhi.w	8006114 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f75 	.word	0x08005f75
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08006115 	.word	0x08006115
 8005f60:	08006045 	.word	0x08006045
 8005f64:	08006115 	.word	0x08006115
 8005f68:	08006115 	.word	0x08006115
 8005f6c:	08006115 	.word	0x08006115
 8005f70:	08006059 	.word	0x08006059
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6819      	ldr	r1, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	01db      	lsls	r3, r3, #7
 8005f80:	440b      	add	r3, r1
 8005f82:	339c      	adds	r3, #156	; 0x9c
 8005f84:	601a      	str	r2, [r3, #0]
        break;
 8005f86:	e0d1      	b.n	800612c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6819      	ldr	r1, [r3, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	01db      	lsls	r3, r3, #7
 8005f94:	440b      	add	r3, r1
 8005f96:	33a4      	adds	r3, #164	; 0xa4
 8005f98:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d03f      	beq.n	8006022 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	01db      	lsls	r3, r3, #7
 8005fac:	4413      	add	r3, r2
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	6811      	ldr	r1, [r2, #0]
 8005fb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	01db      	lsls	r3, r3, #7
 8005fbe:	440b      	add	r3, r1
 8005fc0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	01db      	lsls	r3, r3, #7
 8005fcc:	4413      	add	r3, r2
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	68f9      	ldr	r1, [r7, #12]
 8005fd6:	6809      	ldr	r1, [r1, #0]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	01db      	lsls	r3, r3, #7
 8005fe0:	440b      	add	r3, r1
 8005fe2:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fec:	d109      	bne.n	8006002 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6819      	ldr	r1, [r3, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	01db      	lsls	r3, r3, #7
 8005ffa:	440b      	add	r3, r1
 8005ffc:	339c      	adds	r3, #156	; 0x9c
 8005ffe:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8006000:	e091      	b.n	8006126 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800600a:	f040 808c 	bne.w	8006126 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6819      	ldr	r1, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	01db      	lsls	r3, r3, #7
 800601a:	440b      	add	r3, r1
 800601c:	33a8      	adds	r3, #168	; 0xa8
 800601e:	601a      	str	r2, [r3, #0]
         break;
 8006020:	e081      	b.n	8006126 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	3301      	adds	r3, #1
 800602a:	01db      	lsls	r3, r3, #7
 800602c:	4413      	add	r3, r2
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	6811      	ldr	r1, [r2, #0]
 8006034:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	3301      	adds	r3, #1
 800603c:	01db      	lsls	r3, r3, #7
 800603e:	440b      	add	r3, r1
 8006040:	601a      	str	r2, [r3, #0]
         break;
 8006042:	e070      	b.n	8006126 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6819      	ldr	r1, [r3, #0]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	01db      	lsls	r3, r3, #7
 8006050:	440b      	add	r3, r1
 8006052:	33a8      	adds	r3, #168	; 0xa8
 8006054:	601a      	str	r2, [r3, #0]
        break;
 8006056:	e069      	b.n	800612c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6819      	ldr	r1, [r3, #0]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	440b      	add	r3, r1
 8006066:	33ac      	adds	r3, #172	; 0xac
 8006068:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d03f      	beq.n	80060f2 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	3301      	adds	r3, #1
 800607a:	01db      	lsls	r3, r3, #7
 800607c:	4413      	add	r3, r2
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	6811      	ldr	r1, [r2, #0]
 8006084:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	3301      	adds	r3, #1
 800608c:	01db      	lsls	r3, r3, #7
 800608e:	440b      	add	r3, r1
 8006090:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	3301      	adds	r3, #1
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	4413      	add	r3, r2
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	68f9      	ldr	r1, [r7, #12]
 80060a8:	6809      	ldr	r1, [r1, #0]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	3301      	adds	r3, #1
 80060b0:	01db      	lsls	r3, r3, #7
 80060b2:	440b      	add	r3, r1
 80060b4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060be:	d109      	bne.n	80060d4 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	01db      	lsls	r3, r3, #7
 80060cc:	440b      	add	r3, r1
 80060ce:	339c      	adds	r3, #156	; 0x9c
 80060d0:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80060d2:	e02a      	b.n	800612a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060dc:	d125      	bne.n	800612a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6819      	ldr	r1, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	01db      	lsls	r3, r3, #7
 80060ea:	440b      	add	r3, r1
 80060ec:	33a8      	adds	r3, #168	; 0xa8
 80060ee:	601a      	str	r2, [r3, #0]
         break;
 80060f0:	e01b      	b.n	800612a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	3301      	adds	r3, #1
 80060fa:	01db      	lsls	r3, r3, #7
 80060fc:	4413      	add	r3, r2
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	6811      	ldr	r1, [r2, #0]
 8006104:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	3301      	adds	r3, #1
 800610c:	01db      	lsls	r3, r3, #7
 800610e:	440b      	add	r3, r1
 8006110:	601a      	str	r2, [r3, #0]
         break;
 8006112:	e00a      	b.n	800612a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2207      	movs	r2, #7
 8006118:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8006124:	e002      	b.n	800612c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800612a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b07      	cmp	r3, #7
 8006136:	d101      	bne.n	800613c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e008      	b.n	800614e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop

0800615c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d101      	bne.n	800617a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8006176:	2302      	movs	r3, #2
 8006178:	e01d      	b.n	80061b6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8006184:	2302      	movs	r3, #2
 8006186:	e016      	b.n	80061b6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fd46 	bl	8006c30 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d101      	bne.n	80061de <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
 80061dc:	e0df      	b.n	800639e <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e0d8      	b.n	800639e <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006202:	f000 808d 	beq.w	8006320 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620c:	f200 80ad 	bhi.w	800636a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006216:	d05e      	beq.n	80062d6 <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621e:	f200 80a4 	bhi.w	800636a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b80      	cmp	r3, #128	; 0x80
 8006226:	d07b      	beq.n	8006320 <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b80      	cmp	r3, #128	; 0x80
 800622c:	f200 809d 	bhi.w	800636a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b20      	cmp	r3, #32
 8006234:	d84c      	bhi.n	80062d0 <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8096 	beq.w	800636a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3b01      	subs	r3, #1
 8006242:	2b1f      	cmp	r3, #31
 8006244:	f200 8091 	bhi.w	800636a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	080062d7 	.word	0x080062d7
 8006254:	08006321 	.word	0x08006321
 8006258:	0800636b 	.word	0x0800636b
 800625c:	080062d7 	.word	0x080062d7
 8006260:	0800636b 	.word	0x0800636b
 8006264:	0800636b 	.word	0x0800636b
 8006268:	0800636b 	.word	0x0800636b
 800626c:	08006321 	.word	0x08006321
 8006270:	0800636b 	.word	0x0800636b
 8006274:	0800636b 	.word	0x0800636b
 8006278:	0800636b 	.word	0x0800636b
 800627c:	0800636b 	.word	0x0800636b
 8006280:	0800636b 	.word	0x0800636b
 8006284:	0800636b 	.word	0x0800636b
 8006288:	0800636b 	.word	0x0800636b
 800628c:	080062d7 	.word	0x080062d7
 8006290:	0800636b 	.word	0x0800636b
 8006294:	0800636b 	.word	0x0800636b
 8006298:	0800636b 	.word	0x0800636b
 800629c:	0800636b 	.word	0x0800636b
 80062a0:	0800636b 	.word	0x0800636b
 80062a4:	0800636b 	.word	0x0800636b
 80062a8:	0800636b 	.word	0x0800636b
 80062ac:	0800636b 	.word	0x0800636b
 80062b0:	0800636b 	.word	0x0800636b
 80062b4:	0800636b 	.word	0x0800636b
 80062b8:	0800636b 	.word	0x0800636b
 80062bc:	0800636b 	.word	0x0800636b
 80062c0:	0800636b 	.word	0x0800636b
 80062c4:	0800636b 	.word	0x0800636b
 80062c8:	0800636b 	.word	0x0800636b
 80062cc:	08006321 	.word	0x08006321
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d149      	bne.n	800636a <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d110      	bne.n	80062fe <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	4413      	add	r3, r2
 80062e6:	33bc      	adds	r3, #188	; 0xbc
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	6811      	ldr	r1, [r2, #0]
 80062ee:	f043 0201 	orr.w	r2, r3, #1
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	01db      	lsls	r3, r3, #7
 80062f6:	440b      	add	r3, r1
 80062f8:	33bc      	adds	r3, #188	; 0xbc
 80062fa:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 80062fc:	e03e      	b.n	800637c <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	01db      	lsls	r3, r3, #7
 8006306:	4413      	add	r3, r2
 8006308:	33c0      	adds	r3, #192	; 0xc0
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	6811      	ldr	r1, [r2, #0]
 8006310:	f043 0201 	orr.w	r2, r3, #1
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	01db      	lsls	r3, r3, #7
 8006318:	440b      	add	r3, r1
 800631a:	33c0      	adds	r3, #192	; 0xc0
 800631c:	601a      	str	r2, [r3, #0]
      break;
 800631e:	e02d      	b.n	800637c <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d110      	bne.n	8006348 <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	01db      	lsls	r3, r3, #7
 800632e:	4413      	add	r3, r2
 8006330:	33c4      	adds	r3, #196	; 0xc4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	6811      	ldr	r1, [r2, #0]
 8006338:	f043 0201 	orr.w	r2, r3, #1
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	01db      	lsls	r3, r3, #7
 8006340:	440b      	add	r3, r1
 8006342:	33c4      	adds	r3, #196	; 0xc4
 8006344:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 8006346:	e019      	b.n	800637c <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	01db      	lsls	r3, r3, #7
 8006350:	4413      	add	r3, r2
 8006352:	33c8      	adds	r3, #200	; 0xc8
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	6811      	ldr	r1, [r2, #0]
 800635a:	f043 0201 	orr.w	r2, r3, #1
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	01db      	lsls	r3, r3, #7
 8006362:	440b      	add	r3, r1
 8006364:	33c8      	adds	r3, #200	; 0xc8
 8006366:	601a      	str	r2, [r3, #0]
      break;
 8006368:	e008      	b.n	800637c <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2207      	movs	r2, #7
 800636e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 800637a:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b07      	cmp	r3, #7
 8006386:	d101      	bne.n	800638c <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e008      	b.n	800639e <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop

080063ac <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_HRTIM_WaveformOutputStart+0x18>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e01a      	b.n	80063fa <HAL_HRTIM_WaveformOutputStart+0x4e>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_HRTIM_WaveformOutputStop+0x18>
 800641a:	2302      	movs	r3, #2
 800641c:	e01a      	b.n	8006454 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2202      	movs	r2, #2
 800642a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e05b      	b.n	8006530 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68d9      	ldr	r1, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
 80064c0:	e022      	b.n	8006508 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	4a1d      	ldr	r2, [pc, #116]	; (800653c <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 80064c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d017      	beq.n	8006502 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	01db      	lsls	r3, r3, #7
 80064da:	4413      	add	r3, r2
 80064dc:	338c      	adds	r3, #140	; 0x8c
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	7bfa      	ldrb	r2, [r7, #15]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	3320      	adds	r3, #32
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6819      	ldr	r1, [r3, #0]
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	4302      	orrs	r2, r0
 80064fa:	01db      	lsls	r3, r3, #7
 80064fc:	440b      	add	r3, r1
 80064fe:	338c      	adds	r3, #140	; 0x8c
 8006500:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	3301      	adds	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b04      	cmp	r3, #4
 800650c:	d9d9      	bls.n	80064c2 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 800652e:	2300      	movs	r3, #0
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	20000028 	.word	0x20000028

08006540 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 800654a:	f240 137f 	movw	r3, #383	; 0x17f
 800654e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 800655a:	2302      	movs	r3, #2
 800655c:	e065      	b.n	800662a <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	43da      	mvns	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	400a      	ands	r2, r1
 8006582:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68d9      	ldr	r1, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800659c:	43da      	mvns	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	400a      	ands	r2, r1
 80065a4:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
 80065aa:	e023      	b.n	80065f4 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	4a22      	ldr	r2, [pc, #136]	; (8006638 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80065b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	4013      	ands	r3, r2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d018      	beq.n	80065ee <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	01db      	lsls	r3, r3, #7
 80065c4:	4413      	add	r3, r2
 80065c6:	338c      	adds	r3, #140	; 0x8c
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	7bfa      	ldrb	r2, [r7, #15]
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	3320      	adds	r3, #32
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	43da      	mvns	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6819      	ldr	r1, [r3, #0]
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	4002      	ands	r2, r0
 80065e6:	01db      	lsls	r3, r3, #7
 80065e8:	440b      	add	r3, r1
 80065ea:	338c      	adds	r3, #140	; 0x8c
 80065ec:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	3301      	adds	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d9d8      	bls.n	80065ac <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f9      	bne.n	80065fa <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6819      	ldr	r1, [r3, #0]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	43da      	mvns	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	400a      	ands	r2, r1
 8006616:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000028 	.word	0x20000028

0800663c <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2bff      	cmp	r3, #255	; 0xff
 800664a:	d103      	bne.n	8006654 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fc4f 	bl	8006ef0 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8006652:	e00a      	b.n	800666a <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d103      	bne.n	8006662 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fcc6 	bl	8006fec <HRTIM_Master_ISR>
}
 8006660:	e003      	b.n	800666a <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fd6b 	bl	8007140 <HRTIM_Timer_ISR>
}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f023 0307 	bic.w	r3, r3, #7
 800681c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0318 	bic.w	r3, r3, #24
 800682e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	6852      	ldr	r2, [r2, #4]
 8006854:	619a      	str	r2, [r3, #24]
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006862:	b480      	push	{r7}
 8006864:	b087      	sub	sp, #28
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	3301      	adds	r3, #1
 8006876:	01db      	lsls	r3, r3, #7
 8006878:	4413      	add	r3, r2
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f023 0307 	bic.w	r3, r3, #7
 8006884:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 0318 	bic.w	r3, r3, #24
 8006896:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	3301      	adds	r3, #1
 80068aa:	01db      	lsls	r3, r3, #7
 80068ac:	4413      	add	r3, r2
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6819      	ldr	r1, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	01db      	lsls	r3, r3, #7
 80068be:	440b      	add	r3, r1
 80068c0:	3394      	adds	r3, #148	; 0x94
 80068c2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6819      	ldr	r1, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	01db      	lsls	r3, r3, #7
 80068d0:	440b      	add	r3, r1
 80068d2:	3398      	adds	r3, #152	; 0x98
 80068d4:	601a      	str	r2, [r3, #0]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80068fc:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f023 0320 	bic.w	r3, r3, #32
 8006904:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006916:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006928:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800693a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800694c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800695e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006972:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006984:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	4313      	orrs	r3, r2
 800698e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b08b      	sub	sp, #44	; 0x2c
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3301      	adds	r3, #1
 80069c4:	01db      	lsls	r3, r3, #7
 80069c6:	4413      	add	r3, r2
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	6811      	ldr	r1, [r2, #0]
 80069ce:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	3301      	adds	r3, #1
 80069d6:	01db      	lsls	r3, r3, #7
 80069d8:	440b      	add	r3, r1
 80069da:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	3301      	adds	r3, #1
 80069e4:	01db      	lsls	r3, r3, #7
 80069e6:	4413      	add	r3, r2
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	01db      	lsls	r3, r3, #7
 80069f4:	4413      	add	r3, r2
 80069f6:	33e8      	adds	r3, #232	; 0xe8
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	01db      	lsls	r3, r3, #7
 8006a04:	4413      	add	r3, r2
 8006a06:	33e4      	adds	r3, #228	; 0xe4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8006a14:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	f023 0320 	bic.w	r3, r3, #32
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a24:	4313      	orrs	r3, r2
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a36:	4313      	orrs	r3, r2
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a92:	d103      	bne.n	8006a9c <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abc:	4313      	orrs	r3, r2
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f023 031f 	bic.w	r3, r3, #31
 8006ad8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	f003 031f 	and.w	r3, r3, #31
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aee:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d108      	bne.n	8006b14 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b08:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	6a3a      	ldr	r2, [r7, #32]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b18:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8006b1c:	d004      	beq.n	8006b28 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8006b26:	d103      	bne.n	8006b30 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d108      	bne.n	8006b42 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8006b36:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3c:	6a3a      	ldr	r2, [r7, #32]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b46:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d843      	bhi.n	8006bd6 <HRTIM_TimingUnitWaveform_Config+0x226>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b69 	.word	0x08006b69
 8006b58:	08006b7f 	.word	0x08006b7f
 8006b5c:	08006b95 	.word	0x08006b95
 8006b60:	08006bab 	.word	0x08006bab
 8006b64:	08006bc1 	.word	0x08006bc1
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b6e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	61fb      	str	r3, [r7, #28]
      break;
 8006b7c:	e02c      	b.n	8006bd8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b84:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	61fb      	str	r3, [r7, #28]
      break;
 8006b92:	e021      	b.n	8006bd8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006b9a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	61fb      	str	r3, [r7, #28]
      break;
 8006ba8:	e016      	b.n	8006bd8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bb0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	61fb      	str	r3, [r7, #28]
      break;
 8006bbe:	e00b      	b.n	8006bd8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bc6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	015b      	lsls	r3, r3, #5
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	61fb      	str	r3, [r7, #28]
      break;
 8006bd4:	e000      	b.n	8006bd8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8006bd6:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	3301      	adds	r3, #1
 8006be0:	01db      	lsls	r3, r3, #7
 8006be2:	4413      	add	r3, r2
 8006be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	01db      	lsls	r3, r3, #7
 8006bf0:	4413      	add	r3, r2
 8006bf2:	33e8      	adds	r3, #232	; 0xe8
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	01db      	lsls	r3, r3, #7
 8006c00:	4413      	add	r3, r2
 8006c02:	33e4      	adds	r3, #228	; 0xe4
 8006c04:	6a3a      	ldr	r2, [r7, #32]
 8006c06:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	01db      	lsls	r3, r3, #7
 8006c10:	4413      	add	r3, r2
 8006c12:	33d4      	adds	r3, #212	; 0xd4
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006c22:	bf00      	nop
 8006c24:	372c      	adds	r7, #44	; 0x2c
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop

08006c30 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b089      	sub	sp, #36	; 0x24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	01db      	lsls	r3, r3, #7
 8006c4a:	4413      	add	r3, r2
 8006c4c:	33e4      	adds	r3, #228	; 0xe4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	01db      	lsls	r3, r3, #7
 8006c5a:	4413      	add	r3, r2
 8006c5c:	33b8      	adds	r3, #184	; 0xb8
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	617b      	str	r3, [r7, #20]

  switch (Output)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c68:	d076      	beq.n	8006d58 <HRTIM_OutputConfig+0x128>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c70:	f200 8087 	bhi.w	8006d82 <HRTIM_OutputConfig+0x152>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7a:	d05a      	beq.n	8006d32 <HRTIM_OutputConfig+0x102>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c82:	d87e      	bhi.n	8006d82 <HRTIM_OutputConfig+0x152>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b80      	cmp	r3, #128	; 0x80
 8006c88:	d066      	beq.n	8006d58 <HRTIM_OutputConfig+0x128>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b80      	cmp	r3, #128	; 0x80
 8006c8e:	d878      	bhi.n	8006d82 <HRTIM_OutputConfig+0x152>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d84a      	bhi.n	8006d2c <HRTIM_OutputConfig+0xfc>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d072      	beq.n	8006d82 <HRTIM_OutputConfig+0x152>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	2b1f      	cmp	r3, #31
 8006ca2:	d86e      	bhi.n	8006d82 <HRTIM_OutputConfig+0x152>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <HRTIM_OutputConfig+0x7c>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006d33 	.word	0x08006d33
 8006cb0:	08006d59 	.word	0x08006d59
 8006cb4:	08006d83 	.word	0x08006d83
 8006cb8:	08006d33 	.word	0x08006d33
 8006cbc:	08006d83 	.word	0x08006d83
 8006cc0:	08006d83 	.word	0x08006d83
 8006cc4:	08006d83 	.word	0x08006d83
 8006cc8:	08006d59 	.word	0x08006d59
 8006ccc:	08006d83 	.word	0x08006d83
 8006cd0:	08006d83 	.word	0x08006d83
 8006cd4:	08006d83 	.word	0x08006d83
 8006cd8:	08006d83 	.word	0x08006d83
 8006cdc:	08006d83 	.word	0x08006d83
 8006ce0:	08006d83 	.word	0x08006d83
 8006ce4:	08006d83 	.word	0x08006d83
 8006ce8:	08006d33 	.word	0x08006d33
 8006cec:	08006d83 	.word	0x08006d83
 8006cf0:	08006d83 	.word	0x08006d83
 8006cf4:	08006d83 	.word	0x08006d83
 8006cf8:	08006d83 	.word	0x08006d83
 8006cfc:	08006d83 	.word	0x08006d83
 8006d00:	08006d83 	.word	0x08006d83
 8006d04:	08006d83 	.word	0x08006d83
 8006d08:	08006d83 	.word	0x08006d83
 8006d0c:	08006d83 	.word	0x08006d83
 8006d10:	08006d83 	.word	0x08006d83
 8006d14:	08006d83 	.word	0x08006d83
 8006d18:	08006d83 	.word	0x08006d83
 8006d1c:	08006d83 	.word	0x08006d83
 8006d20:	08006d83 	.word	0x08006d83
 8006d24:	08006d83 	.word	0x08006d83
 8006d28:	08006d59 	.word	0x08006d59
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d127      	bne.n	8006d82 <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6819      	ldr	r1, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	01db      	lsls	r3, r3, #7
 8006d3e:	440b      	add	r3, r1
 8006d40:	33bc      	adds	r3, #188	; 0xbc
 8006d42:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6819      	ldr	r1, [r3, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	01db      	lsls	r3, r3, #7
 8006d50:	440b      	add	r3, r1
 8006d52:	33c0      	adds	r3, #192	; 0xc0
 8006d54:	601a      	str	r2, [r3, #0]
      break;
 8006d56:	e015      	b.n	8006d84 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6819      	ldr	r1, [r3, #0]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	01db      	lsls	r3, r3, #7
 8006d64:	440b      	add	r3, r1
 8006d66:	33c4      	adds	r3, #196	; 0xc4
 8006d68:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6819      	ldr	r1, [r3, #0]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	01db      	lsls	r3, r3, #7
 8006d76:	440b      	add	r3, r1
 8006d78:	33c8      	adds	r3, #200	; 0xc8
 8006d7a:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	61bb      	str	r3, [r7, #24]
      break;
 8006d80:	e000      	b.n	8006d84 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 8006d82:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8006d84:	22fe      	movs	r2, #254	; 0xfe
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	4013      	ands	r3, r2
 8006d92:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	695a      	ldr	r2, [r3, #20]
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d111      	bne.n	8006e10 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10c      	bne.n	8006e10 <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d107      	bne.n	8006e10 <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	69da      	ldr	r2, [r3, #28]
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	01db      	lsls	r3, r3, #7
 8006e18:	4413      	add	r3, r2
 8006e1a:	33e4      	adds	r3, #228	; 0xe4
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	601a      	str	r2, [r3, #0]
}
 8006e20:	bf00      	nop
 8006e22:	3724      	adds	r7, #36	; 0x24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b05      	cmp	r3, #5
 8006e3a:	d851      	bhi.n	8006ee0 <HRTIM_ForceRegistersUpdate+0xb4>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HRTIM_ForceRegistersUpdate+0x18>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e73 	.word	0x08006e73
 8006e48:	08006e89 	.word	0x08006e89
 8006e4c:	08006e9f 	.word	0x08006e9f
 8006e50:	08006eb5 	.word	0x08006eb5
 8006e54:	08006ecb 	.word	0x08006ecb
 8006e58:	08006e5d 	.word	0x08006e5d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0201 	orr.w	r2, r2, #1
 8006e6c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006e70:	e037      	b.n	8006ee2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0202 	orr.w	r2, r2, #2
 8006e82:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006e86:	e02c      	b.n	8006ee2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0204 	orr.w	r2, r2, #4
 8006e98:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006e9c:	e021      	b.n	8006ee2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0208 	orr.w	r2, r2, #8
 8006eae:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006eb2:	e016      	b.n	8006ee2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0210 	orr.w	r2, r2, #16
 8006ec4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006ec8:	e00b      	b.n	8006ee2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0220 	orr.w	r2, r2, #32
 8006eda:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006ede:	e000      	b.n	8006ee2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8006ee0:	bf00      	nop
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop

08006ef0 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006f00:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8006f0a:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00c      	beq.n	8006f30 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d007      	beq.n	8006f30 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fba1 	bl	8006672 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00c      	beq.n	8006f54 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff fb99 	bl	8006686 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00c      	beq.n	8006f78 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fb91 	bl	800669a <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2208      	movs	r2, #8
 8006f92:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fb89 	bl	80066ae <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00c      	beq.n	8006fc0 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2210      	movs	r2, #16
 8006fb6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fb81 	bl	80066c2 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fb79 	bl	80066d6 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006ffc:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8007006:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d008      	beq.n	800703e <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007034:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fb56 	bl	80066ea <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2201      	movs	r2, #1
 8007058:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800705a:	2105      	movs	r1, #5
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fb63 	bl	8006728 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2202      	movs	r2, #2
 800707c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800707e:	2105      	movs	r1, #5
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fa f8df 	bl	8001244 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2204      	movs	r2, #4
 80070a0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80070a2:	2105      	movs	r1, #5
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fa f8f9 	bl	800129c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00c      	beq.n	80070ce <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2208      	movs	r2, #8
 80070c4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80070c6:	2105      	movs	r1, #5
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff fb38 	bl	800673e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f003 0310 	and.w	r3, r3, #16
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2210      	movs	r2, #16
 80070e8:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80070ea:	2105      	movs	r1, #5
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7fa f961 	bl	80013b4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d006      	beq.n	8007114 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2220      	movs	r2, #32
 800710c:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff faf5 	bl	80066fe <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2240      	movs	r2, #64	; 0x40
 800712e:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007130:	2105      	movs	r1, #5
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff faed 	bl	8006712 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007138:	bf00      	nop
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	01db      	lsls	r3, r3, #7
 8007154:	4413      	add	r3, r2
 8007156:	3304      	adds	r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	4413      	add	r3, r2
 8007166:	338c      	adds	r3, #140	; 0x8c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d010      	beq.n	8007198 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	01db      	lsls	r3, r3, #7
 8007188:	4413      	add	r3, r2
 800718a:	3388      	adds	r3, #136	; 0x88
 800718c:	2201      	movs	r2, #1
 800718e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fac8 	bl	8006728 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d010      	beq.n	80071c4 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	01db      	lsls	r3, r3, #7
 80071b4:	4413      	add	r3, r2
 80071b6:	3388      	adds	r3, #136	; 0x88
 80071b8:	2202      	movs	r2, #2
 80071ba:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fa f840 	bl	8001244 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d010      	beq.n	80071f0 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	01db      	lsls	r3, r3, #7
 80071e0:	4413      	add	r3, r2
 80071e2:	3388      	adds	r3, #136	; 0x88
 80071e4:	2204      	movs	r2, #4
 80071e6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fa f856 	bl	800129c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d010      	beq.n	800721c <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	01db      	lsls	r3, r3, #7
 800720c:	4413      	add	r3, r2
 800720e:	3388      	adds	r3, #136	; 0x88
 8007210:	2208      	movs	r2, #8
 8007212:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff fa91 	bl	800673e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b00      	cmp	r3, #0
 8007224:	d010      	beq.n	8007248 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	01db      	lsls	r3, r3, #7
 8007238:	4413      	add	r3, r2
 800723a:	3388      	adds	r3, #136	; 0x88
 800723c:	2210      	movs	r2, #16
 800723e:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fa f8b6 	bl	80013b4 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d010      	beq.n	8007274 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	4413      	add	r3, r2
 8007266:	3388      	adds	r3, #136	; 0x88
 8007268:	2240      	movs	r2, #64	; 0x40
 800726a:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fa4f 	bl	8006712 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727a:	2b00      	cmp	r3, #0
 800727c:	d010      	beq.n	80072a0 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	01db      	lsls	r3, r3, #7
 8007290:	4413      	add	r3, r2
 8007292:	3388      	adds	r3, #136	; 0x88
 8007294:	2280      	movs	r2, #128	; 0x80
 8007296:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff fa5a 	bl	8006754 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d011      	beq.n	80072ce <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00c      	beq.n	80072ce <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	01db      	lsls	r3, r3, #7
 80072bc:	4413      	add	r3, r2
 80072be:	3388      	adds	r3, #136	; 0x88
 80072c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072c4:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff fa4e 	bl	800676a <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d011      	beq.n	80072fc <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00c      	beq.n	80072fc <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	01db      	lsls	r3, r3, #7
 80072ea:	4413      	add	r3, r2
 80072ec:	3388      	adds	r3, #136	; 0x88
 80072ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f2:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff fa58 	bl	80067ac <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007302:	2b00      	cmp	r3, #0
 8007304:	d011      	beq.n	800732a <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	01db      	lsls	r3, r3, #7
 8007318:	4413      	add	r3, r2
 800731a:	3388      	adds	r3, #136	; 0x88
 800731c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007320:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff fa4c 	bl	80067c2 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007330:	2b00      	cmp	r3, #0
 8007332:	d011      	beq.n	8007358 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00c      	beq.n	8007358 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	01db      	lsls	r3, r3, #7
 8007346:	4413      	add	r3, r2
 8007348:	3388      	adds	r3, #136	; 0x88
 800734a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800734e:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff fa40 	bl	80067d8 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d011      	beq.n	8007386 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00c      	beq.n	8007386 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	01db      	lsls	r3, r3, #7
 8007374:	4413      	add	r3, r2
 8007376:	3388      	adds	r3, #136	; 0x88
 8007378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800737c:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff fa34 	bl	80067ee <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d011      	beq.n	80073b4 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00c      	beq.n	80073b4 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	01db      	lsls	r3, r3, #7
 80073a2:	4413      	add	r3, r2
 80073a4:	3388      	adds	r3, #136	; 0x88
 80073a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073aa:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff f9f1 	bl	8006796 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d011      	beq.n	80073e2 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00c      	beq.n	80073e2 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	01db      	lsls	r3, r3, #7
 80073d0:	4413      	add	r3, r2
 80073d2:	3388      	adds	r3, #136	; 0x88
 80073d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073d8:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff f9cf 	bl	8006780 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e097      	b.n	800752e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d106      	bne.n	800741e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7fb f97f 	bl	800271c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2202      	movs	r2, #2
 8007422:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d004      	beq.n	8007440 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800743e:	d103      	bne.n	8007448 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 031e 	bic.w	r3, r3, #30
 8007446:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4b38      	ldr	r3, [pc, #224]	; (8007538 <HAL_LPTIM_Init+0x14c>)
 8007458:	4013      	ands	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4b37      	ldr	r3, [pc, #220]	; (800753c <HAL_LPTIM_Init+0x150>)
 8007460:	4013      	ands	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800746c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007472:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007478:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800747e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d107      	bne.n	800749e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007496:	4313      	orrs	r3, r2
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d004      	beq.n	80074b0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074ae:	d107      	bne.n	80074c0 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80074b8:	4313      	orrs	r3, r2
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00a      	beq.n	80074e2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80074d4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80074da:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a14      	ldr	r2, [pc, #80]	; (8007540 <HAL_LPTIM_Init+0x154>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d004      	beq.n	80074fe <HAL_LPTIM_Init+0x112>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a12      	ldr	r2, [pc, #72]	; (8007544 <HAL_LPTIM_Init+0x158>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d108      	bne.n	8007510 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	625a      	str	r2, [r3, #36]	; 0x24
 800750e:	e009      	b.n	8007524 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <HAL_LPTIM_Init+0x15c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d104      	bne.n	8007524 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007522:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	ffff1f3f 	.word	0xffff1f3f
 800753c:	ff19f1fe 	.word	0xff19f1fe
 8007540:	40002400 	.word	0x40002400
 8007544:	58002400 	.word	0x58002400
 8007548:	58002800 	.word	0x58002800

0800754c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2202      	movs	r2, #2
 800755a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d00c      	beq.n	8007580 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800756e:	d107      	bne.n	8007580 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800757e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691a      	ldr	r2, [r3, #16]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0201 	orr.w	r2, r2, #1
 800758e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2210      	movs	r2, #16
 8007596:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80075a0:	2110      	movs	r1, #16
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f91e 	bl	80077e4 <LPTIM_WaitForFlag>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d101      	bne.n	80075b2 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e02f      	b.n	8007612 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f946 	bl	8007844 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f905 	bl	80077c8 <HAL_LPTIM_GetState>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d101      	bne.n	80075c8 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e024      	b.n	8007612 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0210 	orr.w	r2, r2, #16
 80075d6:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0202 	orr.w	r2, r2, #2
 80075e6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0204 	orr.w	r2, r2, #4
 8007606:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b01      	cmp	r3, #1
 800762e:	d10d      	bne.n	800764c <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b01      	cmp	r3, #1
 800763c:	d106      	bne.n	800764c <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2201      	movs	r2, #1
 8007644:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f882 	bl	8007750 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b02      	cmp	r3, #2
 8007658:	d10d      	bne.n	8007676 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b02      	cmp	r3, #2
 8007666:	d106      	bne.n	8007676 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2202      	movs	r2, #2
 800766e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7f9 fdd9 	bl	8001228 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b04      	cmp	r3, #4
 8007682:	d10d      	bne.n	80076a0 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b04      	cmp	r3, #4
 8007690:	d106      	bne.n	80076a0 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2204      	movs	r2, #4
 8007698:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f862 	bl	8007764 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0308 	and.w	r3, r3, #8
 80076aa:	2b08      	cmp	r3, #8
 80076ac:	d10d      	bne.n	80076ca <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d106      	bne.n	80076ca <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2208      	movs	r2, #8
 80076c2:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f857 	bl	8007778 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0310 	and.w	r3, r3, #16
 80076d4:	2b10      	cmp	r3, #16
 80076d6:	d10d      	bne.n	80076f4 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 0310 	and.w	r3, r3, #16
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d106      	bne.n	80076f4 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2210      	movs	r2, #16
 80076ec:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f84c 	bl	800778c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d10d      	bne.n	800771e <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0320 	and.w	r3, r3, #32
 800770c:	2b20      	cmp	r3, #32
 800770e:	d106      	bne.n	800771e <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2220      	movs	r2, #32
 8007716:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f841 	bl	80077a0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007728:	2b40      	cmp	r3, #64	; 0x40
 800772a:	d10d      	bne.n	8007748 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d106      	bne.n	8007748 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2240      	movs	r2, #64	; 0x40
 8007740:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f836 	bl	80077b4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80077d6:	b2db      	uxtb	r3, r3
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80077f2:	4b12      	ldr	r3, [pc, #72]	; (800783c <LPTIM_WaitForFlag+0x58>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a12      	ldr	r2, [pc, #72]	; (8007840 <LPTIM_WaitForFlag+0x5c>)
 80077f8:	fba2 2303 	umull	r2, r3, r2, r3
 80077fc:	0b9b      	lsrs	r3, r3, #14
 80077fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	3b01      	subs	r3, #1
 800780c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	4013      	ands	r3, r2
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d002      	beq.n	800782e <LPTIM_WaitForFlag+0x4a>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1ec      	bne.n	8007808 <LPTIM_WaitForFlag+0x24>

  return result;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20000018 	.word	0x20000018
 8007840:	d1b71759 	.word	0xd1b71759

08007844 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b08c      	sub	sp, #48	; 0x30
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007850:	f3ef 8310 	mrs	r3, PRIMASK
 8007854:	60fb      	str	r3, [r7, #12]
  return(result);
 8007856:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
 800785a:	2301      	movs	r3, #1
 800785c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f383 8810 	msr	PRIMASK, r3
}
 8007864:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a81      	ldr	r2, [pc, #516]	; (8007a70 <LPTIM_Disable+0x22c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d02d      	beq.n	80078cc <LPTIM_Disable+0x88>
 8007870:	4a7f      	ldr	r2, [pc, #508]	; (8007a70 <LPTIM_Disable+0x22c>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d830      	bhi.n	80078d8 <LPTIM_Disable+0x94>
 8007876:	4a7f      	ldr	r2, [pc, #508]	; (8007a74 <LPTIM_Disable+0x230>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d021      	beq.n	80078c0 <LPTIM_Disable+0x7c>
 800787c:	4a7d      	ldr	r2, [pc, #500]	; (8007a74 <LPTIM_Disable+0x230>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d82a      	bhi.n	80078d8 <LPTIM_Disable+0x94>
 8007882:	4a7d      	ldr	r2, [pc, #500]	; (8007a78 <LPTIM_Disable+0x234>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d015      	beq.n	80078b4 <LPTIM_Disable+0x70>
 8007888:	4a7b      	ldr	r2, [pc, #492]	; (8007a78 <LPTIM_Disable+0x234>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d824      	bhi.n	80078d8 <LPTIM_Disable+0x94>
 800788e:	4a7b      	ldr	r2, [pc, #492]	; (8007a7c <LPTIM_Disable+0x238>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <LPTIM_Disable+0x58>
 8007894:	4a7a      	ldr	r2, [pc, #488]	; (8007a80 <LPTIM_Disable+0x23c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d006      	beq.n	80078a8 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800789a:	e01d      	b.n	80078d8 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800789c:	4b79      	ldr	r3, [pc, #484]	; (8007a84 <LPTIM_Disable+0x240>)
 800789e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80078a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80078a6:	e018      	b.n	80078da <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80078a8:	4b76      	ldr	r3, [pc, #472]	; (8007a84 <LPTIM_Disable+0x240>)
 80078aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80078b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80078b2:	e012      	b.n	80078da <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80078b4:	4b73      	ldr	r3, [pc, #460]	; (8007a84 <LPTIM_Disable+0x240>)
 80078b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80078bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80078be:	e00c      	b.n	80078da <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 80078c0:	4b70      	ldr	r3, [pc, #448]	; (8007a84 <LPTIM_Disable+0x240>)
 80078c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80078c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80078ca:	e006      	b.n	80078da <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 80078cc:	4b6d      	ldr	r3, [pc, #436]	; (8007a84 <LPTIM_Disable+0x240>)
 80078ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80078d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80078d6:	e000      	b.n	80078da <LPTIM_Disable+0x96>
      break;
 80078d8:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a5a      	ldr	r2, [pc, #360]	; (8007a70 <LPTIM_Disable+0x22c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d059      	beq.n	80079c0 <LPTIM_Disable+0x17c>
 800790c:	4a58      	ldr	r2, [pc, #352]	; (8007a70 <LPTIM_Disable+0x22c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d867      	bhi.n	80079e2 <LPTIM_Disable+0x19e>
 8007912:	4a58      	ldr	r2, [pc, #352]	; (8007a74 <LPTIM_Disable+0x230>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d042      	beq.n	800799e <LPTIM_Disable+0x15a>
 8007918:	4a56      	ldr	r2, [pc, #344]	; (8007a74 <LPTIM_Disable+0x230>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d861      	bhi.n	80079e2 <LPTIM_Disable+0x19e>
 800791e:	4a56      	ldr	r2, [pc, #344]	; (8007a78 <LPTIM_Disable+0x234>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d02b      	beq.n	800797c <LPTIM_Disable+0x138>
 8007924:	4a54      	ldr	r2, [pc, #336]	; (8007a78 <LPTIM_Disable+0x234>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d85b      	bhi.n	80079e2 <LPTIM_Disable+0x19e>
 800792a:	4a54      	ldr	r2, [pc, #336]	; (8007a7c <LPTIM_Disable+0x238>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <LPTIM_Disable+0xf4>
 8007930:	4a53      	ldr	r2, [pc, #332]	; (8007a80 <LPTIM_Disable+0x23c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d011      	beq.n	800795a <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8007936:	e054      	b.n	80079e2 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8007938:	4b52      	ldr	r3, [pc, #328]	; (8007a84 <LPTIM_Disable+0x240>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793e:	4a51      	ldr	r2, [pc, #324]	; (8007a84 <LPTIM_Disable+0x240>)
 8007940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8007948:	4b4e      	ldr	r3, [pc, #312]	; (8007a84 <LPTIM_Disable+0x240>)
 800794a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794e:	4a4d      	ldr	r2, [pc, #308]	; (8007a84 <LPTIM_Disable+0x240>)
 8007950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8007958:	e044      	b.n	80079e4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800795a:	4b4a      	ldr	r3, [pc, #296]	; (8007a84 <LPTIM_Disable+0x240>)
 800795c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007960:	4a48      	ldr	r2, [pc, #288]	; (8007a84 <LPTIM_Disable+0x240>)
 8007962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007966:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800796a:	4b46      	ldr	r3, [pc, #280]	; (8007a84 <LPTIM_Disable+0x240>)
 800796c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007970:	4a44      	ldr	r2, [pc, #272]	; (8007a84 <LPTIM_Disable+0x240>)
 8007972:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007976:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800797a:	e033      	b.n	80079e4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 800797c:	4b41      	ldr	r3, [pc, #260]	; (8007a84 <LPTIM_Disable+0x240>)
 800797e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007982:	4a40      	ldr	r2, [pc, #256]	; (8007a84 <LPTIM_Disable+0x240>)
 8007984:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007988:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800798c:	4b3d      	ldr	r3, [pc, #244]	; (8007a84 <LPTIM_Disable+0x240>)
 800798e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007992:	4a3c      	ldr	r2, [pc, #240]	; (8007a84 <LPTIM_Disable+0x240>)
 8007994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007998:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800799c:	e022      	b.n	80079e4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800799e:	4b39      	ldr	r3, [pc, #228]	; (8007a84 <LPTIM_Disable+0x240>)
 80079a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079a4:	4a37      	ldr	r2, [pc, #220]	; (8007a84 <LPTIM_Disable+0x240>)
 80079a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80079aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 80079ae:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <LPTIM_Disable+0x240>)
 80079b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079b4:	4a33      	ldr	r2, [pc, #204]	; (8007a84 <LPTIM_Disable+0x240>)
 80079b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80079be:	e011      	b.n	80079e4 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 80079c0:	4b30      	ldr	r3, [pc, #192]	; (8007a84 <LPTIM_Disable+0x240>)
 80079c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079c6:	4a2f      	ldr	r2, [pc, #188]	; (8007a84 <LPTIM_Disable+0x240>)
 80079c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 80079d0:	4b2c      	ldr	r3, [pc, #176]	; (8007a84 <LPTIM_Disable+0x240>)
 80079d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079d6:	4a2b      	ldr	r2, [pc, #172]	; (8007a84 <LPTIM_Disable+0x240>)
 80079d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80079e0:	e000      	b.n	80079e4 <LPTIM_Disable+0x1a0>
      break;
 80079e2:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d103      	bne.n	80079f2 <LPTIM_Disable+0x1ae>
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 80d0 	beq.w	8007b92 <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a1e      	ldr	r2, [pc, #120]	; (8007a70 <LPTIM_Disable+0x22c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d031      	beq.n	8007a60 <LPTIM_Disable+0x21c>
 80079fc:	4a1c      	ldr	r2, [pc, #112]	; (8007a70 <LPTIM_Disable+0x22c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d842      	bhi.n	8007a88 <LPTIM_Disable+0x244>
 8007a02:	4a1c      	ldr	r2, [pc, #112]	; (8007a74 <LPTIM_Disable+0x230>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d024      	beq.n	8007a52 <LPTIM_Disable+0x20e>
 8007a08:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <LPTIM_Disable+0x230>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d83c      	bhi.n	8007a88 <LPTIM_Disable+0x244>
 8007a0e:	4a1a      	ldr	r2, [pc, #104]	; (8007a78 <LPTIM_Disable+0x234>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d017      	beq.n	8007a44 <LPTIM_Disable+0x200>
 8007a14:	4a18      	ldr	r2, [pc, #96]	; (8007a78 <LPTIM_Disable+0x234>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d836      	bhi.n	8007a88 <LPTIM_Disable+0x244>
 8007a1a:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <LPTIM_Disable+0x238>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <LPTIM_Disable+0x1e4>
 8007a20:	4a17      	ldr	r2, [pc, #92]	; (8007a80 <LPTIM_Disable+0x23c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d007      	beq.n	8007a36 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8007a26:	e02f      	b.n	8007a88 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8007a28:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2c:	4a15      	ldr	r2, [pc, #84]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a2e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007a32:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8007a34:	e029      	b.n	8007a8a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3a:	4a12      	ldr	r2, [pc, #72]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a3c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007a40:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007a42:	e022      	b.n	8007a8a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8007a44:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a48:	4a0e      	ldr	r2, [pc, #56]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a4a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007a4e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007a50:	e01b      	b.n	8007a8a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8007a52:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a56:	4a0b      	ldr	r2, [pc, #44]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a58:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007a5c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007a5e:	e014      	b.n	8007a8a <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8007a60:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a64:	4a07      	ldr	r2, [pc, #28]	; (8007a84 <LPTIM_Disable+0x240>)
 8007a66:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007a6a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007a6c:	e00d      	b.n	8007a8a <LPTIM_Disable+0x246>
 8007a6e:	bf00      	nop
 8007a70:	58003000 	.word	0x58003000
 8007a74:	58002c00 	.word	0x58002c00
 8007a78:	58002800 	.word	0x58002800
 8007a7c:	40002400 	.word	0x40002400
 8007a80:	58002400 	.word	0x58002400
 8007a84:	58024400 	.word	0x58024400
        break;
 8007a88:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01a      	beq.n	8007ac6 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007aa8:	2108      	movs	r1, #8
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fe9a 	bl	80077e4 <LPTIM_WaitForFlag>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d103      	bne.n	8007abe <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2203      	movs	r2, #3
 8007aba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01a      	beq.n	8007b02 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	691a      	ldr	r2, [r3, #16]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0201 	orr.w	r2, r2, #1
 8007ada:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007ae4:	2110      	movs	r1, #16
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fe7c 	bl	80077e4 <LPTIM_WaitForFlag>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d103      	bne.n	8007afa <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2203      	movs	r2, #3
 8007af6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2210      	movs	r2, #16
 8007b00:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a33      	ldr	r2, [pc, #204]	; (8007bd4 <LPTIM_Disable+0x390>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d039      	beq.n	8007b80 <LPTIM_Disable+0x33c>
 8007b0c:	4a31      	ldr	r2, [pc, #196]	; (8007bd4 <LPTIM_Disable+0x390>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d841      	bhi.n	8007b96 <LPTIM_Disable+0x352>
 8007b12:	4a31      	ldr	r2, [pc, #196]	; (8007bd8 <LPTIM_Disable+0x394>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d02a      	beq.n	8007b6e <LPTIM_Disable+0x32a>
 8007b18:	4a2f      	ldr	r2, [pc, #188]	; (8007bd8 <LPTIM_Disable+0x394>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d83b      	bhi.n	8007b96 <LPTIM_Disable+0x352>
 8007b1e:	4a2f      	ldr	r2, [pc, #188]	; (8007bdc <LPTIM_Disable+0x398>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d01b      	beq.n	8007b5c <LPTIM_Disable+0x318>
 8007b24:	4a2d      	ldr	r2, [pc, #180]	; (8007bdc <LPTIM_Disable+0x398>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d835      	bhi.n	8007b96 <LPTIM_Disable+0x352>
 8007b2a:	4a2d      	ldr	r2, [pc, #180]	; (8007be0 <LPTIM_Disable+0x39c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d003      	beq.n	8007b38 <LPTIM_Disable+0x2f4>
 8007b30:	4a2c      	ldr	r2, [pc, #176]	; (8007be4 <LPTIM_Disable+0x3a0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d009      	beq.n	8007b4a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8007b36:	e02e      	b.n	8007b96 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8007b38:	4b2b      	ldr	r3, [pc, #172]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b40:	4929      	ldr	r1, [pc, #164]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	4313      	orrs	r3, r2
 8007b46:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8007b48:	e026      	b.n	8007b98 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8007b4a:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b52:	4925      	ldr	r1, [pc, #148]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	4313      	orrs	r3, r2
 8007b58:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007b5a:	e01d      	b.n	8007b98 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8007b5c:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b64:	4920      	ldr	r1, [pc, #128]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007b6c:	e014      	b.n	8007b98 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b76:	491c      	ldr	r1, [pc, #112]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007b7e:	e00b      	b.n	8007b98 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8007b80:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b88:	4917      	ldr	r1, [pc, #92]	; (8007be8 <LPTIM_Disable+0x3a4>)
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007b90:	e002      	b.n	8007b98 <LPTIM_Disable+0x354>
    }
  }
 8007b92:	bf00      	nop
 8007b94:	e000      	b.n	8007b98 <LPTIM_Disable+0x354>
        break;
 8007b96:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bae:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6a3a      	ldr	r2, [r7, #32]
 8007bb6:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f383 8810 	msr	PRIMASK, r3
}
 8007bca:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007bcc:	bf00      	nop
 8007bce:	3730      	adds	r7, #48	; 0x30
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	58003000 	.word	0x58003000
 8007bd8:	58002c00 	.word	0x58002c00
 8007bdc:	58002800 	.word	0x58002800
 8007be0:	40002400 	.word	0x40002400
 8007be4:	58002400 	.word	0x58002400
 8007be8:	58024400 	.word	0x58024400

08007bec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a04      	ldr	r2, [pc, #16]	; (8007c08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfa:	6013      	str	r3, [r2, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	58024800 	.word	0x58024800

08007c0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c14:	4b19      	ldr	r3, [pc, #100]	; (8007c7c <HAL_PWREx_ConfigSupply+0x70>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d00a      	beq.n	8007c36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c20:	4b16      	ldr	r3, [pc, #88]	; (8007c7c <HAL_PWREx_ConfigSupply+0x70>)
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 0307 	and.w	r3, r3, #7
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d001      	beq.n	8007c32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e01f      	b.n	8007c72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	e01d      	b.n	8007c72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c36:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <HAL_PWREx_ConfigSupply+0x70>)
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f023 0207 	bic.w	r2, r3, #7
 8007c3e:	490f      	ldr	r1, [pc, #60]	; (8007c7c <HAL_PWREx_ConfigSupply+0x70>)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c46:	f7fb f8b9 	bl	8002dbc <HAL_GetTick>
 8007c4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c4c:	e009      	b.n	8007c62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c4e:	f7fb f8b5 	bl	8002dbc <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c5c:	d901      	bls.n	8007c62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e007      	b.n	8007c72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c62:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <HAL_PWREx_ConfigSupply+0x70>)
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c6e:	d1ee      	bne.n	8007c4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	58024800 	.word	0x58024800

08007c80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08c      	sub	sp, #48	; 0x30
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f000 bc48 	b.w	8008524 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 8088 	beq.w	8007db2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ca2:	4b99      	ldr	r3, [pc, #612]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cac:	4b96      	ldr	r3, [pc, #600]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d007      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x48>
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	2b18      	cmp	r3, #24
 8007cbc:	d111      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x62>
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d10c      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc8:	4b8f      	ldr	r3, [pc, #572]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d06d      	beq.n	8007db0 <HAL_RCC_OscConfig+0x130>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d169      	bne.n	8007db0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f000 bc21 	b.w	8008524 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cea:	d106      	bne.n	8007cfa <HAL_RCC_OscConfig+0x7a>
 8007cec:	4b86      	ldr	r3, [pc, #536]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a85      	ldr	r2, [pc, #532]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	e02e      	b.n	8007d58 <HAL_RCC_OscConfig+0xd8>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10c      	bne.n	8007d1c <HAL_RCC_OscConfig+0x9c>
 8007d02:	4b81      	ldr	r3, [pc, #516]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a80      	ldr	r2, [pc, #512]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	4b7e      	ldr	r3, [pc, #504]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a7d      	ldr	r2, [pc, #500]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	e01d      	b.n	8007d58 <HAL_RCC_OscConfig+0xd8>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCC_OscConfig+0xc0>
 8007d26:	4b78      	ldr	r3, [pc, #480]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a77      	ldr	r2, [pc, #476]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	4b75      	ldr	r3, [pc, #468]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a74      	ldr	r2, [pc, #464]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	e00b      	b.n	8007d58 <HAL_RCC_OscConfig+0xd8>
 8007d40:	4b71      	ldr	r3, [pc, #452]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a70      	ldr	r2, [pc, #448]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	4b6e      	ldr	r3, [pc, #440]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a6d      	ldr	r2, [pc, #436]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d013      	beq.n	8007d88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d60:	f7fb f82c 	bl	8002dbc <HAL_GetTick>
 8007d64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d68:	f7fb f828 	bl	8002dbc <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b64      	cmp	r3, #100	; 0x64
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e3d4      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d7a:	4b63      	ldr	r3, [pc, #396]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f0      	beq.n	8007d68 <HAL_RCC_OscConfig+0xe8>
 8007d86:	e014      	b.n	8007db2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d88:	f7fb f818 	bl	8002dbc <HAL_GetTick>
 8007d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d90:	f7fb f814 	bl	8002dbc <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b64      	cmp	r3, #100	; 0x64
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e3c0      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007da2:	4b59      	ldr	r3, [pc, #356]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1f0      	bne.n	8007d90 <HAL_RCC_OscConfig+0x110>
 8007dae:	e000      	b.n	8007db2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 80ca 	beq.w	8007f54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dc0:	4b51      	ldr	r3, [pc, #324]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dca:	4b4f      	ldr	r3, [pc, #316]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <HAL_RCC_OscConfig+0x166>
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	2b18      	cmp	r3, #24
 8007dda:	d156      	bne.n	8007e8a <HAL_RCC_OscConfig+0x20a>
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d151      	bne.n	8007e8a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007de6:	4b48      	ldr	r3, [pc, #288]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d005      	beq.n	8007dfe <HAL_RCC_OscConfig+0x17e>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e392      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007dfe:	4b42      	ldr	r3, [pc, #264]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f023 0219 	bic.w	r2, r3, #25
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	493f      	ldr	r1, [pc, #252]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e10:	f7fa ffd4 	bl	8002dbc <HAL_GetTick>
 8007e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e18:	f7fa ffd0 	bl	8002dbc <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e37c      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e2a:	4b37      	ldr	r3, [pc, #220]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0f0      	beq.n	8007e18 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e36:	f7fa fff1 	bl	8002e1c <HAL_GetREVID>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d817      	bhi.n	8007e74 <HAL_RCC_OscConfig+0x1f4>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d108      	bne.n	8007e5e <HAL_RCC_OscConfig+0x1de>
 8007e4c:	4b2e      	ldr	r3, [pc, #184]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e54:	4a2c      	ldr	r2, [pc, #176]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e5a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e5c:	e07a      	b.n	8007f54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e5e:	4b2a      	ldr	r3, [pc, #168]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	031b      	lsls	r3, r3, #12
 8007e6c:	4926      	ldr	r1, [pc, #152]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e72:	e06f      	b.n	8007f54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e74:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	061b      	lsls	r3, r3, #24
 8007e82:	4921      	ldr	r1, [pc, #132]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e88:	e064      	b.n	8007f54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d047      	beq.n	8007f22 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e92:	4b1d      	ldr	r3, [pc, #116]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f023 0219 	bic.w	r2, r3, #25
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	491a      	ldr	r1, [pc, #104]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea4:	f7fa ff8a 	bl	8002dbc <HAL_GetTick>
 8007ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eac:	f7fa ff86 	bl	8002dbc <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e332      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ebe:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0f0      	beq.n	8007eac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eca:	f7fa ffa7 	bl	8002e1c <HAL_GetREVID>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d819      	bhi.n	8007f0c <HAL_RCC_OscConfig+0x28c>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	2b40      	cmp	r3, #64	; 0x40
 8007ede:	d108      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x272>
 8007ee0:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007ee8:	4a07      	ldr	r2, [pc, #28]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eee:	6053      	str	r3, [r2, #4]
 8007ef0:	e030      	b.n	8007f54 <HAL_RCC_OscConfig+0x2d4>
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	031b      	lsls	r3, r3, #12
 8007f00:	4901      	ldr	r1, [pc, #4]	; (8007f08 <HAL_RCC_OscConfig+0x288>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	604b      	str	r3, [r1, #4]
 8007f06:	e025      	b.n	8007f54 <HAL_RCC_OscConfig+0x2d4>
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	4b9a      	ldr	r3, [pc, #616]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	061b      	lsls	r3, r3, #24
 8007f1a:	4997      	ldr	r1, [pc, #604]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	604b      	str	r3, [r1, #4]
 8007f20:	e018      	b.n	8007f54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f22:	4b95      	ldr	r3, [pc, #596]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a94      	ldr	r2, [pc, #592]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007f28:	f023 0301 	bic.w	r3, r3, #1
 8007f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2e:	f7fa ff45 	bl	8002dbc <HAL_GetTick>
 8007f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f34:	e008      	b.n	8007f48 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f36:	f7fa ff41 	bl	8002dbc <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d901      	bls.n	8007f48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e2ed      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f48:	4b8b      	ldr	r3, [pc, #556]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1f0      	bne.n	8007f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 80a9 	beq.w	80080b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f62:	4b85      	ldr	r3, [pc, #532]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f6c:	4b82      	ldr	r3, [pc, #520]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d007      	beq.n	8007f88 <HAL_RCC_OscConfig+0x308>
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b18      	cmp	r3, #24
 8007f7c:	d13a      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x374>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f003 0303 	and.w	r3, r3, #3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d135      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f88:	4b7b      	ldr	r3, [pc, #492]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x320>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	2b80      	cmp	r3, #128	; 0x80
 8007f9a:	d001      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e2c1      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fa0:	f7fa ff3c 	bl	8002e1c <HAL_GetREVID>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d817      	bhi.n	8007fde <HAL_RCC_OscConfig+0x35e>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d108      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x348>
 8007fb6:	4b70      	ldr	r3, [pc, #448]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007fbe:	4a6e      	ldr	r2, [pc, #440]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007fc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fc4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fc6:	e075      	b.n	80080b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fc8:	4b6b      	ldr	r3, [pc, #428]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	069b      	lsls	r3, r3, #26
 8007fd6:	4968      	ldr	r1, [pc, #416]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fdc:	e06a      	b.n	80080b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fde:	4b66      	ldr	r3, [pc, #408]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	061b      	lsls	r3, r3, #24
 8007fec:	4962      	ldr	r1, [pc, #392]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ff2:	e05f      	b.n	80080b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d042      	beq.n	8008082 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ffc:	4b5e      	ldr	r3, [pc, #376]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a5d      	ldr	r2, [pc, #372]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008008:	f7fa fed8 	bl	8002dbc <HAL_GetTick>
 800800c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008010:	f7fa fed4 	bl	8002dbc <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e280      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008022:	4b55      	ldr	r3, [pc, #340]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0f0      	beq.n	8008010 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800802e:	f7fa fef5 	bl	8002e1c <HAL_GetREVID>
 8008032:	4603      	mov	r3, r0
 8008034:	f241 0203 	movw	r2, #4099	; 0x1003
 8008038:	4293      	cmp	r3, r2
 800803a:	d817      	bhi.n	800806c <HAL_RCC_OscConfig+0x3ec>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	2b20      	cmp	r3, #32
 8008042:	d108      	bne.n	8008056 <HAL_RCC_OscConfig+0x3d6>
 8008044:	4b4c      	ldr	r3, [pc, #304]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800804c:	4a4a      	ldr	r2, [pc, #296]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 800804e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008052:	6053      	str	r3, [r2, #4]
 8008054:	e02e      	b.n	80080b4 <HAL_RCC_OscConfig+0x434>
 8008056:	4b48      	ldr	r3, [pc, #288]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	069b      	lsls	r3, r3, #26
 8008064:	4944      	ldr	r1, [pc, #272]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008066:	4313      	orrs	r3, r2
 8008068:	604b      	str	r3, [r1, #4]
 800806a:	e023      	b.n	80080b4 <HAL_RCC_OscConfig+0x434>
 800806c:	4b42      	ldr	r3, [pc, #264]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	061b      	lsls	r3, r3, #24
 800807a:	493f      	ldr	r1, [pc, #252]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 800807c:	4313      	orrs	r3, r2
 800807e:	60cb      	str	r3, [r1, #12]
 8008080:	e018      	b.n	80080b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008082:	4b3d      	ldr	r3, [pc, #244]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a3c      	ldr	r2, [pc, #240]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800808c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808e:	f7fa fe95 	bl	8002dbc <HAL_GetTick>
 8008092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008094:	e008      	b.n	80080a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008096:	f7fa fe91 	bl	8002dbc <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d901      	bls.n	80080a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e23d      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080a8:	4b33      	ldr	r3, [pc, #204]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1f0      	bne.n	8008096 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0308 	and.w	r3, r3, #8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d036      	beq.n	800812e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d019      	beq.n	80080fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080c8:	4b2b      	ldr	r3, [pc, #172]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 80080ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080cc:	4a2a      	ldr	r2, [pc, #168]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d4:	f7fa fe72 	bl	8002dbc <HAL_GetTick>
 80080d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080dc:	f7fa fe6e 	bl	8002dbc <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e21a      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080ee:	4b22      	ldr	r3, [pc, #136]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 80080f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0f0      	beq.n	80080dc <HAL_RCC_OscConfig+0x45c>
 80080fa:	e018      	b.n	800812e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080fc:	4b1e      	ldr	r3, [pc, #120]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 80080fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008100:	4a1d      	ldr	r2, [pc, #116]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008102:	f023 0301 	bic.w	r3, r3, #1
 8008106:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008108:	f7fa fe58 	bl	8002dbc <HAL_GetTick>
 800810c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008110:	f7fa fe54 	bl	8002dbc <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e200      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1f0      	bne.n	8008110 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d039      	beq.n	80081ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d01c      	beq.n	800817c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008142:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a0c      	ldr	r2, [pc, #48]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 8008148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800814c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800814e:	f7fa fe35 	bl	8002dbc <HAL_GetTick>
 8008152:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008156:	f7fa fe31 	bl	8002dbc <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e1dd      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008168:	4b03      	ldr	r3, [pc, #12]	; (8008178 <HAL_RCC_OscConfig+0x4f8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0f0      	beq.n	8008156 <HAL_RCC_OscConfig+0x4d6>
 8008174:	e01b      	b.n	80081ae <HAL_RCC_OscConfig+0x52e>
 8008176:	bf00      	nop
 8008178:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800817c:	4b9b      	ldr	r3, [pc, #620]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a9a      	ldr	r2, [pc, #616]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008186:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008188:	f7fa fe18 	bl	8002dbc <HAL_GetTick>
 800818c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800818e:	e008      	b.n	80081a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008190:	f7fa fe14 	bl	8002dbc <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d901      	bls.n	80081a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e1c0      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081a2:	4b92      	ldr	r3, [pc, #584]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1f0      	bne.n	8008190 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 8081 	beq.w	80082be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081bc:	4b8c      	ldr	r3, [pc, #560]	; (80083f0 <HAL_RCC_OscConfig+0x770>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a8b      	ldr	r2, [pc, #556]	; (80083f0 <HAL_RCC_OscConfig+0x770>)
 80081c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081c8:	f7fa fdf8 	bl	8002dbc <HAL_GetTick>
 80081cc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081d0:	f7fa fdf4 	bl	8002dbc <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b64      	cmp	r3, #100	; 0x64
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e1a0      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081e2:	4b83      	ldr	r3, [pc, #524]	; (80083f0 <HAL_RCC_OscConfig+0x770>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0f0      	beq.n	80081d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d106      	bne.n	8008204 <HAL_RCC_OscConfig+0x584>
 80081f6:	4b7d      	ldr	r3, [pc, #500]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80081f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fa:	4a7c      	ldr	r2, [pc, #496]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80081fc:	f043 0301 	orr.w	r3, r3, #1
 8008200:	6713      	str	r3, [r2, #112]	; 0x70
 8008202:	e02d      	b.n	8008260 <HAL_RCC_OscConfig+0x5e0>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10c      	bne.n	8008226 <HAL_RCC_OscConfig+0x5a6>
 800820c:	4b77      	ldr	r3, [pc, #476]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800820e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008210:	4a76      	ldr	r2, [pc, #472]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008212:	f023 0301 	bic.w	r3, r3, #1
 8008216:	6713      	str	r3, [r2, #112]	; 0x70
 8008218:	4b74      	ldr	r3, [pc, #464]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800821a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821c:	4a73      	ldr	r2, [pc, #460]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800821e:	f023 0304 	bic.w	r3, r3, #4
 8008222:	6713      	str	r3, [r2, #112]	; 0x70
 8008224:	e01c      	b.n	8008260 <HAL_RCC_OscConfig+0x5e0>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	2b05      	cmp	r3, #5
 800822c:	d10c      	bne.n	8008248 <HAL_RCC_OscConfig+0x5c8>
 800822e:	4b6f      	ldr	r3, [pc, #444]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008232:	4a6e      	ldr	r2, [pc, #440]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008234:	f043 0304 	orr.w	r3, r3, #4
 8008238:	6713      	str	r3, [r2, #112]	; 0x70
 800823a:	4b6c      	ldr	r3, [pc, #432]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	4a6b      	ldr	r2, [pc, #428]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008240:	f043 0301 	orr.w	r3, r3, #1
 8008244:	6713      	str	r3, [r2, #112]	; 0x70
 8008246:	e00b      	b.n	8008260 <HAL_RCC_OscConfig+0x5e0>
 8008248:	4b68      	ldr	r3, [pc, #416]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800824a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824c:	4a67      	ldr	r2, [pc, #412]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800824e:	f023 0301 	bic.w	r3, r3, #1
 8008252:	6713      	str	r3, [r2, #112]	; 0x70
 8008254:	4b65      	ldr	r3, [pc, #404]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008258:	4a64      	ldr	r2, [pc, #400]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800825a:	f023 0304 	bic.w	r3, r3, #4
 800825e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d015      	beq.n	8008294 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008268:	f7fa fda8 	bl	8002dbc <HAL_GetTick>
 800826c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800826e:	e00a      	b.n	8008286 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008270:	f7fa fda4 	bl	8002dbc <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	f241 3288 	movw	r2, #5000	; 0x1388
 800827e:	4293      	cmp	r3, r2
 8008280:	d901      	bls.n	8008286 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e14e      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008286:	4b59      	ldr	r3, [pc, #356]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0ee      	beq.n	8008270 <HAL_RCC_OscConfig+0x5f0>
 8008292:	e014      	b.n	80082be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008294:	f7fa fd92 	bl	8002dbc <HAL_GetTick>
 8008298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800829a:	e00a      	b.n	80082b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800829c:	f7fa fd8e 	bl	8002dbc <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d901      	bls.n	80082b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e138      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082b2:	4b4e      	ldr	r3, [pc, #312]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80082b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1ee      	bne.n	800829c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 812d 	beq.w	8008522 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082c8:	4b48      	ldr	r3, [pc, #288]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082d0:	2b18      	cmp	r3, #24
 80082d2:	f000 80bd 	beq.w	8008450 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	2b02      	cmp	r3, #2
 80082dc:	f040 809e 	bne.w	800841c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082e0:	4b42      	ldr	r3, [pc, #264]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a41      	ldr	r2, [pc, #260]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80082e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ec:	f7fa fd66 	bl	8002dbc <HAL_GetTick>
 80082f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082f2:	e008      	b.n	8008306 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082f4:	f7fa fd62 	bl	8002dbc <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e10e      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008306:	4b39      	ldr	r3, [pc, #228]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1f0      	bne.n	80082f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008312:	4b36      	ldr	r3, [pc, #216]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008316:	4b37      	ldr	r3, [pc, #220]	; (80083f4 <HAL_RCC_OscConfig+0x774>)
 8008318:	4013      	ands	r3, r2
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008322:	0112      	lsls	r2, r2, #4
 8008324:	430a      	orrs	r2, r1
 8008326:	4931      	ldr	r1, [pc, #196]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008328:	4313      	orrs	r3, r2
 800832a:	628b      	str	r3, [r1, #40]	; 0x28
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	3b01      	subs	r3, #1
 8008332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833a:	3b01      	subs	r3, #1
 800833c:	025b      	lsls	r3, r3, #9
 800833e:	b29b      	uxth	r3, r3
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	3b01      	subs	r3, #1
 8008348:	041b      	lsls	r3, r3, #16
 800834a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008354:	3b01      	subs	r3, #1
 8008356:	061b      	lsls	r3, r3, #24
 8008358:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800835c:	4923      	ldr	r1, [pc, #140]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800835e:	4313      	orrs	r3, r2
 8008360:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008362:	4b22      	ldr	r3, [pc, #136]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4a21      	ldr	r2, [pc, #132]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008368:	f023 0301 	bic.w	r3, r3, #1
 800836c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800836e:	4b1f      	ldr	r3, [pc, #124]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008372:	4b21      	ldr	r3, [pc, #132]	; (80083f8 <HAL_RCC_OscConfig+0x778>)
 8008374:	4013      	ands	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800837a:	00d2      	lsls	r2, r2, #3
 800837c:	491b      	ldr	r1, [pc, #108]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008382:	4b1a      	ldr	r3, [pc, #104]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	f023 020c 	bic.w	r2, r3, #12
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	4917      	ldr	r1, [pc, #92]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008390:	4313      	orrs	r3, r2
 8008392:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008394:	4b15      	ldr	r3, [pc, #84]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	f023 0202 	bic.w	r2, r3, #2
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a0:	4912      	ldr	r1, [pc, #72]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083a6:	4b11      	ldr	r3, [pc, #68]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083aa:	4a10      	ldr	r2, [pc, #64]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b2:	4b0e      	ldr	r3, [pc, #56]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	4a0d      	ldr	r2, [pc, #52]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083be:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	4a0a      	ldr	r2, [pc, #40]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083ca:	4b08      	ldr	r3, [pc, #32]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ce:	4a07      	ldr	r2, [pc, #28]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083d0:	f043 0301 	orr.w	r3, r3, #1
 80083d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083d6:	4b05      	ldr	r3, [pc, #20]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a04      	ldr	r2, [pc, #16]	; (80083ec <HAL_RCC_OscConfig+0x76c>)
 80083dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e2:	f7fa fceb 	bl	8002dbc <HAL_GetTick>
 80083e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083e8:	e011      	b.n	800840e <HAL_RCC_OscConfig+0x78e>
 80083ea:	bf00      	nop
 80083ec:	58024400 	.word	0x58024400
 80083f0:	58024800 	.word	0x58024800
 80083f4:	fffffc0c 	.word	0xfffffc0c
 80083f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083fc:	f7fa fcde 	bl	8002dbc <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b02      	cmp	r3, #2
 8008408:	d901      	bls.n	800840e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e08a      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800840e:	4b47      	ldr	r3, [pc, #284]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0f0      	beq.n	80083fc <HAL_RCC_OscConfig+0x77c>
 800841a:	e082      	b.n	8008522 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800841c:	4b43      	ldr	r3, [pc, #268]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a42      	ldr	r2, [pc, #264]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 8008422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008428:	f7fa fcc8 	bl	8002dbc <HAL_GetTick>
 800842c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800842e:	e008      	b.n	8008442 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008430:	f7fa fcc4 	bl	8002dbc <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	2b02      	cmp	r3, #2
 800843c:	d901      	bls.n	8008442 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e070      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008442:	4b3a      	ldr	r3, [pc, #232]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f0      	bne.n	8008430 <HAL_RCC_OscConfig+0x7b0>
 800844e:	e068      	b.n	8008522 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008450:	4b36      	ldr	r3, [pc, #216]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 8008452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008454:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008456:	4b35      	ldr	r3, [pc, #212]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	2b01      	cmp	r3, #1
 8008462:	d031      	beq.n	80084c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f003 0203 	and.w	r2, r3, #3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800846e:	429a      	cmp	r2, r3
 8008470:	d12a      	bne.n	80084c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	091b      	lsrs	r3, r3, #4
 8008476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800847e:	429a      	cmp	r2, r3
 8008480:	d122      	bne.n	80084c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800848e:	429a      	cmp	r2, r3
 8008490:	d11a      	bne.n	80084c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	0a5b      	lsrs	r3, r3, #9
 8008496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d111      	bne.n	80084c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	0c1b      	lsrs	r3, r3, #16
 80084a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d108      	bne.n	80084c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	0e1b      	lsrs	r3, r3, #24
 80084ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d001      	beq.n	80084cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e02b      	b.n	8008524 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80084cc:	4b17      	ldr	r3, [pc, #92]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 80084ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d0:	08db      	lsrs	r3, r3, #3
 80084d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d01f      	beq.n	8008522 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80084e2:	4b12      	ldr	r3, [pc, #72]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 80084e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e6:	4a11      	ldr	r2, [pc, #68]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 80084e8:	f023 0301 	bic.w	r3, r3, #1
 80084ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084ee:	f7fa fc65 	bl	8002dbc <HAL_GetTick>
 80084f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80084f4:	bf00      	nop
 80084f6:	f7fa fc61 	bl	8002dbc <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	4293      	cmp	r3, r2
 8008500:	d0f9      	beq.n	80084f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008502:	4b0a      	ldr	r3, [pc, #40]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 8008504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008506:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <HAL_RCC_OscConfig+0x8b0>)
 8008508:	4013      	ands	r3, r2
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800850e:	00d2      	lsls	r2, r2, #3
 8008510:	4906      	ldr	r1, [pc, #24]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 8008512:	4313      	orrs	r3, r2
 8008514:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	4a04      	ldr	r2, [pc, #16]	; (800852c <HAL_RCC_OscConfig+0x8ac>)
 800851c:	f043 0301 	orr.w	r3, r3, #1
 8008520:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3730      	adds	r7, #48	; 0x30
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	58024400 	.word	0x58024400
 8008530:	ffff0007 	.word	0xffff0007

08008534 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e19c      	b.n	8008882 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008548:	4b8a      	ldr	r3, [pc, #552]	; (8008774 <HAL_RCC_ClockConfig+0x240>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 030f 	and.w	r3, r3, #15
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	429a      	cmp	r2, r3
 8008554:	d910      	bls.n	8008578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008556:	4b87      	ldr	r3, [pc, #540]	; (8008774 <HAL_RCC_ClockConfig+0x240>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f023 020f 	bic.w	r2, r3, #15
 800855e:	4985      	ldr	r1, [pc, #532]	; (8008774 <HAL_RCC_ClockConfig+0x240>)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	4313      	orrs	r3, r2
 8008564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008566:	4b83      	ldr	r3, [pc, #524]	; (8008774 <HAL_RCC_ClockConfig+0x240>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 030f 	and.w	r3, r3, #15
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d001      	beq.n	8008578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e184      	b.n	8008882 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0304 	and.w	r3, r3, #4
 8008580:	2b00      	cmp	r3, #0
 8008582:	d010      	beq.n	80085a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	4b7b      	ldr	r3, [pc, #492]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008590:	429a      	cmp	r2, r3
 8008592:	d908      	bls.n	80085a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008594:	4b78      	ldr	r3, [pc, #480]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	4975      	ldr	r1, [pc, #468]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d010      	beq.n	80085d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695a      	ldr	r2, [r3, #20]
 80085b6:	4b70      	ldr	r3, [pc, #448]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085be:	429a      	cmp	r2, r3
 80085c0:	d908      	bls.n	80085d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085c2:	4b6d      	ldr	r3, [pc, #436]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	496a      	ldr	r1, [pc, #424]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d010      	beq.n	8008602 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	4b64      	ldr	r3, [pc, #400]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d908      	bls.n	8008602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085f0:	4b61      	ldr	r3, [pc, #388]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	495e      	ldr	r1, [pc, #376]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d010      	beq.n	8008630 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69da      	ldr	r2, [r3, #28]
 8008612:	4b59      	ldr	r3, [pc, #356]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800861a:	429a      	cmp	r2, r3
 800861c:	d908      	bls.n	8008630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800861e:	4b56      	ldr	r3, [pc, #344]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	4953      	ldr	r1, [pc, #332]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 800862c:	4313      	orrs	r3, r2
 800862e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d010      	beq.n	800865e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	4b4d      	ldr	r3, [pc, #308]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	429a      	cmp	r2, r3
 800864a:	d908      	bls.n	800865e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800864c:	4b4a      	ldr	r3, [pc, #296]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	f023 020f 	bic.w	r2, r3, #15
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	4947      	ldr	r1, [pc, #284]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 800865a:	4313      	orrs	r3, r2
 800865c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d055      	beq.n	8008716 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800866a:	4b43      	ldr	r3, [pc, #268]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	4940      	ldr	r1, [pc, #256]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008678:	4313      	orrs	r3, r2
 800867a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2b02      	cmp	r3, #2
 8008682:	d107      	bne.n	8008694 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008684:	4b3c      	ldr	r3, [pc, #240]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d121      	bne.n	80086d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0f6      	b.n	8008882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	2b03      	cmp	r3, #3
 800869a:	d107      	bne.n	80086ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800869c:	4b36      	ldr	r3, [pc, #216]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d115      	bne.n	80086d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0ea      	b.n	8008882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d107      	bne.n	80086c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086b4:	4b30      	ldr	r3, [pc, #192]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e0de      	b.n	8008882 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086c4:	4b2c      	ldr	r3, [pc, #176]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e0d6      	b.n	8008882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086d4:	4b28      	ldr	r3, [pc, #160]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	f023 0207 	bic.w	r2, r3, #7
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4925      	ldr	r1, [pc, #148]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e6:	f7fa fb69 	bl	8002dbc <HAL_GetTick>
 80086ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ec:	e00a      	b.n	8008704 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ee:	f7fa fb65 	bl	8002dbc <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d901      	bls.n	8008704 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e0be      	b.n	8008882 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008704:	4b1c      	ldr	r3, [pc, #112]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	429a      	cmp	r2, r3
 8008714:	d1eb      	bne.n	80086ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d010      	beq.n	8008744 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	4b14      	ldr	r3, [pc, #80]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	f003 030f 	and.w	r3, r3, #15
 800872e:	429a      	cmp	r2, r3
 8008730:	d208      	bcs.n	8008744 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008732:	4b11      	ldr	r3, [pc, #68]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	f023 020f 	bic.w	r2, r3, #15
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	490e      	ldr	r1, [pc, #56]	; (8008778 <HAL_RCC_ClockConfig+0x244>)
 8008740:	4313      	orrs	r3, r2
 8008742:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008744:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <HAL_RCC_ClockConfig+0x240>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	429a      	cmp	r2, r3
 8008750:	d214      	bcs.n	800877c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008752:	4b08      	ldr	r3, [pc, #32]	; (8008774 <HAL_RCC_ClockConfig+0x240>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f023 020f 	bic.w	r2, r3, #15
 800875a:	4906      	ldr	r1, [pc, #24]	; (8008774 <HAL_RCC_ClockConfig+0x240>)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	4313      	orrs	r3, r2
 8008760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008762:	4b04      	ldr	r3, [pc, #16]	; (8008774 <HAL_RCC_ClockConfig+0x240>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d005      	beq.n	800877c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e086      	b.n	8008882 <HAL_RCC_ClockConfig+0x34e>
 8008774:	52002000 	.word	0x52002000
 8008778:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d010      	beq.n	80087aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	4b3f      	ldr	r3, [pc, #252]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008794:	429a      	cmp	r2, r3
 8008796:	d208      	bcs.n	80087aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008798:	4b3c      	ldr	r3, [pc, #240]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	4939      	ldr	r1, [pc, #228]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0308 	and.w	r3, r3, #8
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d010      	beq.n	80087d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	695a      	ldr	r2, [r3, #20]
 80087ba:	4b34      	ldr	r3, [pc, #208]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d208      	bcs.n	80087d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087c6:	4b31      	ldr	r3, [pc, #196]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	492e      	ldr	r1, [pc, #184]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0310 	and.w	r3, r3, #16
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d010      	beq.n	8008806 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699a      	ldr	r2, [r3, #24]
 80087e8:	4b28      	ldr	r3, [pc, #160]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d208      	bcs.n	8008806 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087f4:	4b25      	ldr	r3, [pc, #148]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	4922      	ldr	r1, [pc, #136]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 8008802:	4313      	orrs	r3, r2
 8008804:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d010      	beq.n	8008834 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69da      	ldr	r2, [r3, #28]
 8008816:	4b1d      	ldr	r3, [pc, #116]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800881e:	429a      	cmp	r2, r3
 8008820:	d208      	bcs.n	8008834 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008822:	4b1a      	ldr	r3, [pc, #104]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	4917      	ldr	r1, [pc, #92]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 8008830:	4313      	orrs	r3, r2
 8008832:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008834:	f000 f844 	bl	80088c0 <HAL_RCC_GetSysClockFreq>
 8008838:	4602      	mov	r2, r0
 800883a:	4b14      	ldr	r3, [pc, #80]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	0a1b      	lsrs	r3, r3, #8
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	4912      	ldr	r1, [pc, #72]	; (8008890 <HAL_RCC_ClockConfig+0x35c>)
 8008846:	5ccb      	ldrb	r3, [r1, r3]
 8008848:	f003 031f 	and.w	r3, r3, #31
 800884c:	fa22 f303 	lsr.w	r3, r2, r3
 8008850:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008852:	4b0e      	ldr	r3, [pc, #56]	; (800888c <HAL_RCC_ClockConfig+0x358>)
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	4a0d      	ldr	r2, [pc, #52]	; (8008890 <HAL_RCC_ClockConfig+0x35c>)
 800885c:	5cd3      	ldrb	r3, [r2, r3]
 800885e:	f003 031f 	and.w	r3, r3, #31
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
 8008868:	4a0a      	ldr	r2, [pc, #40]	; (8008894 <HAL_RCC_ClockConfig+0x360>)
 800886a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800886c:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <HAL_RCC_ClockConfig+0x364>)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <HAL_RCC_ClockConfig+0x368>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f7fa fa56 	bl	8002d28 <HAL_InitTick>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	58024400 	.word	0x58024400
 8008890:	08010004 	.word	0x08010004
 8008894:	2000001c 	.word	0x2000001c
 8008898:	20000018 	.word	0x20000018
 800889c:	20000020 	.word	0x20000020

080088a0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80088a0:	b480      	push	{r7}
 80088a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <HAL_RCC_EnableCSS+0x1c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a04      	ldr	r2, [pc, #16]	; (80088bc <HAL_RCC_EnableCSS+0x1c>)
 80088aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088ae:	6013      	str	r3, [r2, #0]
}
 80088b0:	bf00      	nop
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	58024400 	.word	0x58024400

080088c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088c6:	4bb3      	ldr	r3, [pc, #716]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ce:	2b18      	cmp	r3, #24
 80088d0:	f200 8155 	bhi.w	8008b7e <HAL_RCC_GetSysClockFreq+0x2be>
 80088d4:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	08008941 	.word	0x08008941
 80088e0:	08008b7f 	.word	0x08008b7f
 80088e4:	08008b7f 	.word	0x08008b7f
 80088e8:	08008b7f 	.word	0x08008b7f
 80088ec:	08008b7f 	.word	0x08008b7f
 80088f0:	08008b7f 	.word	0x08008b7f
 80088f4:	08008b7f 	.word	0x08008b7f
 80088f8:	08008b7f 	.word	0x08008b7f
 80088fc:	08008967 	.word	0x08008967
 8008900:	08008b7f 	.word	0x08008b7f
 8008904:	08008b7f 	.word	0x08008b7f
 8008908:	08008b7f 	.word	0x08008b7f
 800890c:	08008b7f 	.word	0x08008b7f
 8008910:	08008b7f 	.word	0x08008b7f
 8008914:	08008b7f 	.word	0x08008b7f
 8008918:	08008b7f 	.word	0x08008b7f
 800891c:	0800896d 	.word	0x0800896d
 8008920:	08008b7f 	.word	0x08008b7f
 8008924:	08008b7f 	.word	0x08008b7f
 8008928:	08008b7f 	.word	0x08008b7f
 800892c:	08008b7f 	.word	0x08008b7f
 8008930:	08008b7f 	.word	0x08008b7f
 8008934:	08008b7f 	.word	0x08008b7f
 8008938:	08008b7f 	.word	0x08008b7f
 800893c:	08008973 	.word	0x08008973
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008940:	4b94      	ldr	r3, [pc, #592]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894c:	4b91      	ldr	r3, [pc, #580]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	08db      	lsrs	r3, r3, #3
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	4a90      	ldr	r2, [pc, #576]	; (8008b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
 800895c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800895e:	e111      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008960:	4b8d      	ldr	r3, [pc, #564]	; (8008b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008962:	61bb      	str	r3, [r7, #24]
      break;
 8008964:	e10e      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008966:	4b8d      	ldr	r3, [pc, #564]	; (8008b9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008968:	61bb      	str	r3, [r7, #24]
      break;
 800896a:	e10b      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800896c:	4b8c      	ldr	r3, [pc, #560]	; (8008ba0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800896e:	61bb      	str	r3, [r7, #24]
      break;
 8008970:	e108      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008972:	4b88      	ldr	r3, [pc, #544]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800897c:	4b85      	ldr	r3, [pc, #532]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	091b      	lsrs	r3, r3, #4
 8008982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008986:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008988:	4b82      	ldr	r3, [pc, #520]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008992:	4b80      	ldr	r3, [pc, #512]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008996:	08db      	lsrs	r3, r3, #3
 8008998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	fb02 f303 	mul.w	r3, r2, r3
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 80e1 	beq.w	8008b78 <HAL_RCC_GetSysClockFreq+0x2b8>
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	f000 8083 	beq.w	8008ac4 <HAL_RCC_GetSysClockFreq+0x204>
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	f200 80a1 	bhi.w	8008b08 <HAL_RCC_GetSysClockFreq+0x248>
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <HAL_RCC_GetSysClockFreq+0x114>
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d056      	beq.n	8008a80 <HAL_RCC_GetSysClockFreq+0x1c0>
 80089d2:	e099      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d4:	4b6f      	ldr	r3, [pc, #444]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0320 	and.w	r3, r3, #32
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d02d      	beq.n	8008a3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089e0:	4b6c      	ldr	r3, [pc, #432]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	08db      	lsrs	r3, r3, #3
 80089e6:	f003 0303 	and.w	r3, r3, #3
 80089ea:	4a6b      	ldr	r2, [pc, #428]	; (8008b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	4b62      	ldr	r3, [pc, #392]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a3a:	e087      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ba8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b51      	ldr	r3, [pc, #324]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a7e:	e065      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008bac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b40      	ldr	r3, [pc, #256]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aa6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ac2:	e043      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008bb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b06:	e021      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008bac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	4b1e      	ldr	r3, [pc, #120]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b4c:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	0a5b      	lsrs	r3, r3, #9
 8008b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b56:	3301      	adds	r3, #1
 8008b58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	ee07 3a90 	vmov	s15, r3
 8008b60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b70:	ee17 3a90 	vmov	r3, s15
 8008b74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b76:	e005      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61bb      	str	r3, [r7, #24]
      break;
 8008b7c:	e002      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b7e:	4b07      	ldr	r3, [pc, #28]	; (8008b9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b80:	61bb      	str	r3, [r7, #24]
      break;
 8008b82:	bf00      	nop
  }

  return sysclockfreq;
 8008b84:	69bb      	ldr	r3, [r7, #24]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3724      	adds	r7, #36	; 0x24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	58024400 	.word	0x58024400
 8008b98:	03d09000 	.word	0x03d09000
 8008b9c:	003d0900 	.word	0x003d0900
 8008ba0:	00989680 	.word	0x00989680
 8008ba4:	46000000 	.word	0x46000000
 8008ba8:	4c742400 	.word	0x4c742400
 8008bac:	4a742400 	.word	0x4a742400
 8008bb0:	4b189680 	.word	0x4b189680

08008bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bba:	f7ff fe81 	bl	80088c0 <HAL_RCC_GetSysClockFreq>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	4b10      	ldr	r3, [pc, #64]	; (8008c04 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	0a1b      	lsrs	r3, r3, #8
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	490f      	ldr	r1, [pc, #60]	; (8008c08 <HAL_RCC_GetHCLKFreq+0x54>)
 8008bcc:	5ccb      	ldrb	r3, [r1, r3]
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	4a09      	ldr	r2, [pc, #36]	; (8008c08 <HAL_RCC_GetHCLKFreq+0x54>)
 8008be2:	5cd3      	ldrb	r3, [r2, r3]
 8008be4:	f003 031f 	and.w	r3, r3, #31
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	fa22 f303 	lsr.w	r3, r2, r3
 8008bee:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <HAL_RCC_GetHCLKFreq+0x58>)
 8008bf0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bf2:	4a07      	ldr	r2, [pc, #28]	; (8008c10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <HAL_RCC_GetHCLKFreq+0x58>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	58024400 	.word	0x58024400
 8008c08:	08010004 	.word	0x08010004
 8008c0c:	2000001c 	.word	0x2000001c
 8008c10:	20000018 	.word	0x20000018

08008c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c18:	f7ff ffcc 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	091b      	lsrs	r3, r3, #4
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	4904      	ldr	r1, [pc, #16]	; (8008c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c2a:	5ccb      	ldrb	r3, [r1, r3]
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	08010004 	.word	0x08010004

08008c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c44:	f7ff ffb6 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	4b06      	ldr	r3, [pc, #24]	; (8008c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	f003 0307 	and.w	r3, r3, #7
 8008c54:	4904      	ldr	r1, [pc, #16]	; (8008c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c56:	5ccb      	ldrb	r3, [r1, r3]
 8008c58:	f003 031f 	and.w	r3, r3, #31
 8008c5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	58024400 	.word	0x58024400
 8008c68:	08010004 	.word	0x08010004

08008c6c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008c70:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c7c:	d105      	bne.n	8008c8a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008c7e:	f000 f809 	bl	8008c94 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008c82:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c88:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8008c8a:	bf00      	nop
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	58024400 	.word	0x58024400

08008c94 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
	...

08008ca4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ca8:	b0ca      	sub	sp, #296	; 0x128
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008cc8:	2500      	movs	r5, #0
 8008cca:	ea54 0305 	orrs.w	r3, r4, r5
 8008cce:	d049      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cda:	d02f      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008cdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ce0:	d828      	bhi.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ce6:	d01a      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cec:	d822      	bhi.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cf6:	d007      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008cf8:	e01c      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfa:	4bb8      	ldr	r3, [pc, #736]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	4ab7      	ldr	r2, [pc, #732]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d06:	e01a      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	2102      	movs	r1, #2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f002 fbb7 	bl	800b484 <RCCEx_PLL2_Config>
 8008d16:	4603      	mov	r3, r0
 8008d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d1c:	e00f      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d22:	3328      	adds	r3, #40	; 0x28
 8008d24:	2102      	movs	r1, #2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f002 fc5e 	bl	800b5e8 <RCCEx_PLL3_Config>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d32:	e004      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d3a:	e000      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10a      	bne.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d46:	4ba5      	ldr	r3, [pc, #660]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d54:	4aa1      	ldr	r2, [pc, #644]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d56:	430b      	orrs	r3, r1
 8008d58:	6513      	str	r3, [r2, #80]	; 0x50
 8008d5a:	e003      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008d70:	f04f 0900 	mov.w	r9, #0
 8008d74:	ea58 0309 	orrs.w	r3, r8, r9
 8008d78:	d047      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d82a      	bhi.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d84:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8a:	bf00      	nop
 8008d8c:	08008da1 	.word	0x08008da1
 8008d90:	08008daf 	.word	0x08008daf
 8008d94:	08008dc5 	.word	0x08008dc5
 8008d98:	08008de3 	.word	0x08008de3
 8008d9c:	08008de3 	.word	0x08008de3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da0:	4b8e      	ldr	r3, [pc, #568]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	4a8d      	ldr	r2, [pc, #564]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008daa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dac:	e01a      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db2:	3308      	adds	r3, #8
 8008db4:	2100      	movs	r1, #0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f002 fb64 	bl	800b484 <RCCEx_PLL2_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dc2:	e00f      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc8:	3328      	adds	r3, #40	; 0x28
 8008dca:	2100      	movs	r1, #0
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f002 fc0b 	bl	800b5e8 <RCCEx_PLL3_Config>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dd8:	e004      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008de0:	e000      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dec:	4b7b      	ldr	r3, [pc, #492]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df0:	f023 0107 	bic.w	r1, r3, #7
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfa:	4a78      	ldr	r2, [pc, #480]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	6513      	str	r3, [r2, #80]	; 0x50
 8008e00:	e003      	b.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008e16:	f04f 0b00 	mov.w	fp, #0
 8008e1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e1e:	d04c      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e2a:	d030      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e30:	d829      	bhi.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e32:	2bc0      	cmp	r3, #192	; 0xc0
 8008e34:	d02d      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008e36:	2bc0      	cmp	r3, #192	; 0xc0
 8008e38:	d825      	bhi.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e3a:	2b80      	cmp	r3, #128	; 0x80
 8008e3c:	d018      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008e3e:	2b80      	cmp	r3, #128	; 0x80
 8008e40:	d821      	bhi.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008e46:	2b40      	cmp	r3, #64	; 0x40
 8008e48:	d007      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008e4a:	e01c      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e4c:	4b63      	ldr	r3, [pc, #396]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	4a62      	ldr	r2, [pc, #392]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008e58:	e01c      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5e:	3308      	adds	r3, #8
 8008e60:	2100      	movs	r1, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f002 fb0e 	bl	800b484 <RCCEx_PLL2_Config>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008e6e:	e011      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e74:	3328      	adds	r3, #40	; 0x28
 8008e76:	2100      	movs	r1, #0
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 fbb5 	bl	800b5e8 <RCCEx_PLL3_Config>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008e84:	e006      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e8c:	e002      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008e8e:	bf00      	nop
 8008e90:	e000      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e9c:	4b4f      	ldr	r3, [pc, #316]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eaa:	4a4c      	ldr	r2, [pc, #304]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eac:	430b      	orrs	r3, r1
 8008eae:	6513      	str	r3, [r2, #80]	; 0x50
 8008eb0:	e003      	b.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008ec6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ed0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	d053      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ede:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ee2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ee6:	d035      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008eec:	d82e      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008eee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ef2:	d031      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008ef4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ef8:	d828      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008efe:	d01a      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f04:	d822      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f0e:	d007      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008f10:	e01c      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f12:	4b32      	ldr	r3, [pc, #200]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	4a31      	ldr	r2, [pc, #196]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f1e:	e01c      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f24:	3308      	adds	r3, #8
 8008f26:	2100      	movs	r1, #0
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f002 faab 	bl	800b484 <RCCEx_PLL2_Config>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f34:	e011      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3a:	3328      	adds	r3, #40	; 0x28
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f002 fb52 	bl	800b5e8 <RCCEx_PLL3_Config>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f4a:	e006      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f52:	e002      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008f54:	bf00      	nop
 8008f56:	e000      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10b      	bne.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008f62:	4b1e      	ldr	r3, [pc, #120]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f66:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f72:	4a1a      	ldr	r2, [pc, #104]	; (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f74:	430b      	orrs	r3, r1
 8008f76:	6593      	str	r3, [r2, #88]	; 0x58
 8008f78:	e003      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008f8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f92:	2300      	movs	r3, #0
 8008f94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008f98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	d056      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008faa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fae:	d038      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fb4:	d831      	bhi.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008fb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fba:	d034      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008fbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fc0:	d82b      	bhi.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fc6:	d01d      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fcc:	d825      	bhi.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d006      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008fd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fd6:	d00a      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008fd8:	e01f      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008fda:	bf00      	nop
 8008fdc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe0:	4ba2      	ldr	r3, [pc, #648]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	4aa1      	ldr	r2, [pc, #644]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fec:	e01c      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f002 fa44 	bl	800b484 <RCCEx_PLL2_Config>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009002:	e011      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009008:	3328      	adds	r3, #40	; 0x28
 800900a:	2100      	movs	r1, #0
 800900c:	4618      	mov	r0, r3
 800900e:	f002 faeb 	bl	800b5e8 <RCCEx_PLL3_Config>
 8009012:	4603      	mov	r3, r0
 8009014:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009018:	e006      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009020:	e002      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009022:	bf00      	nop
 8009024:	e000      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009028:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10b      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009030:	4b8e      	ldr	r3, [pc, #568]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009034:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800903c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009040:	4a8a      	ldr	r2, [pc, #552]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009042:	430b      	orrs	r3, r1
 8009044:	6593      	str	r3, [r2, #88]	; 0x58
 8009046:	e003      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800904c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800905c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009060:	2300      	movs	r3, #0
 8009062:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009066:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800906a:	460b      	mov	r3, r1
 800906c:	4313      	orrs	r3, r2
 800906e:	d03a      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009076:	2b30      	cmp	r3, #48	; 0x30
 8009078:	d01f      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800907a:	2b30      	cmp	r3, #48	; 0x30
 800907c:	d819      	bhi.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800907e:	2b20      	cmp	r3, #32
 8009080:	d00c      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009082:	2b20      	cmp	r3, #32
 8009084:	d815      	bhi.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d019      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800908a:	2b10      	cmp	r3, #16
 800908c:	d111      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800908e:	4b77      	ldr	r3, [pc, #476]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009092:	4a76      	ldr	r2, [pc, #472]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009098:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800909a:	e011      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800909c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a0:	3308      	adds	r3, #8
 80090a2:	2102      	movs	r1, #2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f002 f9ed 	bl	800b484 <RCCEx_PLL2_Config>
 80090aa:	4603      	mov	r3, r0
 80090ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80090b0:	e006      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090b8:	e002      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80090ba:	bf00      	nop
 80090bc:	e000      	b.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80090be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80090c8:	4b68      	ldr	r3, [pc, #416]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80090d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d6:	4a65      	ldr	r2, [pc, #404]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090d8:	430b      	orrs	r3, r1
 80090da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090dc:	e003      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80090f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80090f6:	2300      	movs	r3, #0
 80090f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009100:	460b      	mov	r3, r1
 8009102:	4313      	orrs	r3, r2
 8009104:	d051      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009110:	d035      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009116:	d82e      	bhi.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009118:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800911c:	d031      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800911e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009122:	d828      	bhi.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009128:	d01a      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800912a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800912e:	d822      	bhi.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009138:	d007      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800913a:	e01c      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800913c:	4b4b      	ldr	r3, [pc, #300]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	4a4a      	ldr	r2, [pc, #296]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009148:	e01c      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800914a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800914e:	3308      	adds	r3, #8
 8009150:	2100      	movs	r1, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f002 f996 	bl	800b484 <RCCEx_PLL2_Config>
 8009158:	4603      	mov	r3, r0
 800915a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800915e:	e011      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009164:	3328      	adds	r3, #40	; 0x28
 8009166:	2100      	movs	r1, #0
 8009168:	4618      	mov	r0, r3
 800916a:	f002 fa3d 	bl	800b5e8 <RCCEx_PLL3_Config>
 800916e:	4603      	mov	r3, r0
 8009170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009174:	e006      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800917c:	e002      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800917e:	bf00      	nop
 8009180:	e000      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10a      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800918c:	4b37      	ldr	r3, [pc, #220]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800918e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009190:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800919a:	4a34      	ldr	r2, [pc, #208]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800919c:	430b      	orrs	r3, r1
 800919e:	6513      	str	r3, [r2, #80]	; 0x50
 80091a0:	e003      	b.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80091aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80091b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091ba:	2300      	movs	r3, #0
 80091bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80091c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80091c4:	460b      	mov	r3, r1
 80091c6:	4313      	orrs	r3, r2
 80091c8:	d056      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80091ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091d4:	d033      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80091d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091da:	d82c      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80091dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091e0:	d02f      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80091e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091e6:	d826      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80091e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091ec:	d02b      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80091ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091f2:	d820      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80091f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091f8:	d012      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80091fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091fe:	d81a      	bhi.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009200:	2b00      	cmp	r3, #0
 8009202:	d022      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009208:	d115      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800920e:	3308      	adds	r3, #8
 8009210:	2101      	movs	r1, #1
 8009212:	4618      	mov	r0, r3
 8009214:	f002 f936 	bl	800b484 <RCCEx_PLL2_Config>
 8009218:	4603      	mov	r3, r0
 800921a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800921e:	e015      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009224:	3328      	adds	r3, #40	; 0x28
 8009226:	2101      	movs	r1, #1
 8009228:	4618      	mov	r0, r3
 800922a:	f002 f9dd 	bl	800b5e8 <RCCEx_PLL3_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009234:	e00a      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800923c:	e006      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800923e:	bf00      	nop
 8009240:	e004      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009242:	bf00      	nop
 8009244:	e002      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800924a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800924c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10d      	bne.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009258:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800925c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009262:	4a02      	ldr	r2, [pc, #8]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009264:	430b      	orrs	r3, r1
 8009266:	6513      	str	r3, [r2, #80]	; 0x50
 8009268:	e006      	b.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800926a:	bf00      	nop
 800926c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009274:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009288:	2300      	movs	r3, #0
 800928a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800928e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009292:	460b      	mov	r3, r1
 8009294:	4313      	orrs	r3, r2
 8009296:	d055      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800929c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092a4:	d033      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80092a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092aa:	d82c      	bhi.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80092ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092b0:	d02f      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80092b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092b6:	d826      	bhi.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80092b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092bc:	d02b      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80092be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092c2:	d820      	bhi.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80092c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c8:	d012      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80092ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092ce:	d81a      	bhi.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d022      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80092d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092d8:	d115      	bne.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092de:	3308      	adds	r3, #8
 80092e0:	2101      	movs	r1, #1
 80092e2:	4618      	mov	r0, r3
 80092e4:	f002 f8ce 	bl	800b484 <RCCEx_PLL2_Config>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80092ee:	e015      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f4:	3328      	adds	r3, #40	; 0x28
 80092f6:	2101      	movs	r1, #1
 80092f8:	4618      	mov	r0, r3
 80092fa:	f002 f975 	bl	800b5e8 <RCCEx_PLL3_Config>
 80092fe:	4603      	mov	r3, r0
 8009300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009304:	e00a      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800930c:	e006      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800930e:	bf00      	nop
 8009310:	e004      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009312:	bf00      	nop
 8009314:	e002      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009316:	bf00      	nop
 8009318:	e000      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800931a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10b      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009324:	4ba3      	ldr	r3, [pc, #652]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009328:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800932c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009330:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009334:	4a9f      	ldr	r2, [pc, #636]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6593      	str	r3, [r2, #88]	; 0x58
 800933a:	e003      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009340:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800935a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800935e:	460b      	mov	r3, r1
 8009360:	4313      	orrs	r3, r2
 8009362:	d037      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800936e:	d00e      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009374:	d816      	bhi.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009376:	2b00      	cmp	r3, #0
 8009378:	d018      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800937a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800937e:	d111      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009380:	4b8c      	ldr	r3, [pc, #560]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	4a8b      	ldr	r2, [pc, #556]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800938a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800938c:	e00f      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800938e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009392:	3308      	adds	r3, #8
 8009394:	2101      	movs	r1, #1
 8009396:	4618      	mov	r0, r3
 8009398:	f002 f874 	bl	800b484 <RCCEx_PLL2_Config>
 800939c:	4603      	mov	r3, r0
 800939e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80093a2:	e004      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093aa:	e000      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80093ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80093b6:	4b7f      	ldr	r3, [pc, #508]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80093be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c4:	4a7b      	ldr	r2, [pc, #492]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093c6:	430b      	orrs	r3, r1
 80093c8:	6513      	str	r3, [r2, #80]	; 0x50
 80093ca:	e003      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80093d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80093e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093e4:	2300      	movs	r3, #0
 80093e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80093ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4313      	orrs	r3, r2
 80093f2:	d039      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80093f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d81c      	bhi.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80093fe:	a201      	add	r2, pc, #4	; (adr r2, 8009404 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009404:	08009441 	.word	0x08009441
 8009408:	08009415 	.word	0x08009415
 800940c:	08009423 	.word	0x08009423
 8009410:	08009441 	.word	0x08009441
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009414:	4b67      	ldr	r3, [pc, #412]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009418:	4a66      	ldr	r2, [pc, #408]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800941a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800941e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009420:	e00f      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009426:	3308      	adds	r3, #8
 8009428:	2102      	movs	r1, #2
 800942a:	4618      	mov	r0, r3
 800942c:	f002 f82a 	bl	800b484 <RCCEx_PLL2_Config>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009436:	e004      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800943e:	e000      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10a      	bne.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800944a:	4b5a      	ldr	r3, [pc, #360]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800944c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944e:	f023 0103 	bic.w	r1, r3, #3
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009458:	4a56      	ldr	r2, [pc, #344]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800945a:	430b      	orrs	r3, r1
 800945c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800945e:	e003      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009478:	2300      	movs	r3, #0
 800947a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800947e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009482:	460b      	mov	r3, r1
 8009484:	4313      	orrs	r3, r2
 8009486:	f000 809f 	beq.w	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800948a:	4b4b      	ldr	r3, [pc, #300]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a4a      	ldr	r2, [pc, #296]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009494:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009496:	f7f9 fc91 	bl	8002dbc <HAL_GetTick>
 800949a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800949e:	e00b      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094a0:	f7f9 fc8c 	bl	8002dbc <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b64      	cmp	r3, #100	; 0x64
 80094ae:	d903      	bls.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094b6:	e005      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094b8:	4b3f      	ldr	r3, [pc, #252]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0ed      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80094c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d179      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80094cc:	4b39      	ldr	r3, [pc, #228]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094d8:	4053      	eors	r3, r2
 80094da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d015      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094e2:	4b34      	ldr	r3, [pc, #208]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80094ee:	4b31      	ldr	r3, [pc, #196]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f2:	4a30      	ldr	r2, [pc, #192]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094fa:	4b2e      	ldr	r3, [pc, #184]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fe:	4a2d      	ldr	r2, [pc, #180]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009504:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009506:	4a2b      	ldr	r2, [pc, #172]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009508:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800950c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800950e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009512:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800951a:	d118      	bne.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800951c:	f7f9 fc4e 	bl	8002dbc <HAL_GetTick>
 8009520:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009524:	e00d      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009526:	f7f9 fc49 	bl	8002dbc <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009530:	1ad2      	subs	r2, r2, r3
 8009532:	f241 3388 	movw	r3, #5000	; 0x1388
 8009536:	429a      	cmp	r2, r3
 8009538:	d903      	bls.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009540:	e005      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009542:	4b1c      	ldr	r3, [pc, #112]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0eb      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800954e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009552:	2b00      	cmp	r3, #0
 8009554:	d129      	bne.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800955e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009566:	d10e      	bne.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009568:	4b12      	ldr	r3, [pc, #72]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009578:	091a      	lsrs	r2, r3, #4
 800957a:	4b10      	ldr	r3, [pc, #64]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800957c:	4013      	ands	r3, r2
 800957e:	4a0d      	ldr	r2, [pc, #52]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009580:	430b      	orrs	r3, r1
 8009582:	6113      	str	r3, [r2, #16]
 8009584:	e005      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009586:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	4a0a      	ldr	r2, [pc, #40]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800958c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009590:	6113      	str	r3, [r2, #16]
 8009592:	4b08      	ldr	r3, [pc, #32]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009594:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800959e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095a2:	4a04      	ldr	r2, [pc, #16]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095a4:	430b      	orrs	r3, r1
 80095a6:	6713      	str	r3, [r2, #112]	; 0x70
 80095a8:	e00e      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80095b2:	e009      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80095b4:	58024400 	.word	0x58024400
 80095b8:	58024800 	.word	0x58024800
 80095bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80095c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f002 0301 	and.w	r3, r2, #1
 80095d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095d8:	2300      	movs	r3, #0
 80095da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4313      	orrs	r3, r2
 80095e6:	f000 8089 	beq.w	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80095ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f0:	2b28      	cmp	r3, #40	; 0x28
 80095f2:	d86b      	bhi.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80095f4:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	080096d5 	.word	0x080096d5
 8009600:	080096cd 	.word	0x080096cd
 8009604:	080096cd 	.word	0x080096cd
 8009608:	080096cd 	.word	0x080096cd
 800960c:	080096cd 	.word	0x080096cd
 8009610:	080096cd 	.word	0x080096cd
 8009614:	080096cd 	.word	0x080096cd
 8009618:	080096cd 	.word	0x080096cd
 800961c:	080096a1 	.word	0x080096a1
 8009620:	080096cd 	.word	0x080096cd
 8009624:	080096cd 	.word	0x080096cd
 8009628:	080096cd 	.word	0x080096cd
 800962c:	080096cd 	.word	0x080096cd
 8009630:	080096cd 	.word	0x080096cd
 8009634:	080096cd 	.word	0x080096cd
 8009638:	080096cd 	.word	0x080096cd
 800963c:	080096b7 	.word	0x080096b7
 8009640:	080096cd 	.word	0x080096cd
 8009644:	080096cd 	.word	0x080096cd
 8009648:	080096cd 	.word	0x080096cd
 800964c:	080096cd 	.word	0x080096cd
 8009650:	080096cd 	.word	0x080096cd
 8009654:	080096cd 	.word	0x080096cd
 8009658:	080096cd 	.word	0x080096cd
 800965c:	080096d5 	.word	0x080096d5
 8009660:	080096cd 	.word	0x080096cd
 8009664:	080096cd 	.word	0x080096cd
 8009668:	080096cd 	.word	0x080096cd
 800966c:	080096cd 	.word	0x080096cd
 8009670:	080096cd 	.word	0x080096cd
 8009674:	080096cd 	.word	0x080096cd
 8009678:	080096cd 	.word	0x080096cd
 800967c:	080096d5 	.word	0x080096d5
 8009680:	080096cd 	.word	0x080096cd
 8009684:	080096cd 	.word	0x080096cd
 8009688:	080096cd 	.word	0x080096cd
 800968c:	080096cd 	.word	0x080096cd
 8009690:	080096cd 	.word	0x080096cd
 8009694:	080096cd 	.word	0x080096cd
 8009698:	080096cd 	.word	0x080096cd
 800969c:	080096d5 	.word	0x080096d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a4:	3308      	adds	r3, #8
 80096a6:	2101      	movs	r1, #1
 80096a8:	4618      	mov	r0, r3
 80096aa:	f001 feeb 	bl	800b484 <RCCEx_PLL2_Config>
 80096ae:	4603      	mov	r3, r0
 80096b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80096b4:	e00f      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ba:	3328      	adds	r3, #40	; 0x28
 80096bc:	2101      	movs	r1, #1
 80096be:	4618      	mov	r0, r3
 80096c0:	f001 ff92 	bl	800b5e8 <RCCEx_PLL3_Config>
 80096c4:	4603      	mov	r3, r0
 80096c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80096ca:	e004      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096d2:	e000      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80096d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80096de:	4bbf      	ldr	r3, [pc, #764]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80096e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ec:	4abb      	ldr	r2, [pc, #748]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096ee:	430b      	orrs	r3, r1
 80096f0:	6553      	str	r3, [r2, #84]	; 0x54
 80096f2:	e003      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f002 0302 	and.w	r3, r2, #2
 8009708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800970c:	2300      	movs	r3, #0
 800970e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009712:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009716:	460b      	mov	r3, r1
 8009718:	4313      	orrs	r3, r2
 800971a:	d041      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800971c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009722:	2b05      	cmp	r3, #5
 8009724:	d824      	bhi.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	08009779 	.word	0x08009779
 8009730:	08009745 	.word	0x08009745
 8009734:	0800975b 	.word	0x0800975b
 8009738:	08009779 	.word	0x08009779
 800973c:	08009779 	.word	0x08009779
 8009740:	08009779 	.word	0x08009779
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009748:	3308      	adds	r3, #8
 800974a:	2101      	movs	r1, #1
 800974c:	4618      	mov	r0, r3
 800974e:	f001 fe99 	bl	800b484 <RCCEx_PLL2_Config>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009758:	e00f      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800975e:	3328      	adds	r3, #40	; 0x28
 8009760:	2101      	movs	r1, #1
 8009762:	4618      	mov	r0, r3
 8009764:	f001 ff40 	bl	800b5e8 <RCCEx_PLL3_Config>
 8009768:	4603      	mov	r3, r0
 800976a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800976e:	e004      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009776:	e000      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800977a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009782:	4b96      	ldr	r3, [pc, #600]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009786:	f023 0107 	bic.w	r1, r3, #7
 800978a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009790:	4a92      	ldr	r2, [pc, #584]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009792:	430b      	orrs	r3, r1
 8009794:	6553      	str	r3, [r2, #84]	; 0x54
 8009796:	e003      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800979c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80097a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f002 0304 	and.w	r3, r2, #4
 80097ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097b0:	2300      	movs	r3, #0
 80097b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4313      	orrs	r3, r2
 80097be:	d044      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80097c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80097c8:	2b05      	cmp	r3, #5
 80097ca:	d825      	bhi.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80097cc:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80097ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d2:	bf00      	nop
 80097d4:	08009821 	.word	0x08009821
 80097d8:	080097ed 	.word	0x080097ed
 80097dc:	08009803 	.word	0x08009803
 80097e0:	08009821 	.word	0x08009821
 80097e4:	08009821 	.word	0x08009821
 80097e8:	08009821 	.word	0x08009821
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f0:	3308      	adds	r3, #8
 80097f2:	2101      	movs	r1, #1
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 fe45 	bl	800b484 <RCCEx_PLL2_Config>
 80097fa:	4603      	mov	r3, r0
 80097fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009800:	e00f      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009806:	3328      	adds	r3, #40	; 0x28
 8009808:	2101      	movs	r1, #1
 800980a:	4618      	mov	r0, r3
 800980c:	f001 feec 	bl	800b5e8 <RCCEx_PLL3_Config>
 8009810:	4603      	mov	r3, r0
 8009812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009816:	e004      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800981e:	e000      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10b      	bne.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800982a:	4b6c      	ldr	r3, [pc, #432]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800982c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982e:	f023 0107 	bic.w	r1, r3, #7
 8009832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800983a:	4a68      	ldr	r2, [pc, #416]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800983c:	430b      	orrs	r3, r1
 800983e:	6593      	str	r3, [r2, #88]	; 0x58
 8009840:	e003      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009846:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800984a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f002 0320 	and.w	r3, r2, #32
 8009856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800985a:	2300      	movs	r3, #0
 800985c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009864:	460b      	mov	r3, r1
 8009866:	4313      	orrs	r3, r2
 8009868:	d055      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800986a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009876:	d033      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800987c:	d82c      	bhi.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800987e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009882:	d02f      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009888:	d826      	bhi.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800988a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800988e:	d02b      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009890:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009894:	d820      	bhi.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800989a:	d012      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800989c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098a0:	d81a      	bhi.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d022      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80098a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098aa:	d115      	bne.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b0:	3308      	adds	r3, #8
 80098b2:	2100      	movs	r1, #0
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 fde5 	bl	800b484 <RCCEx_PLL2_Config>
 80098ba:	4603      	mov	r3, r0
 80098bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80098c0:	e015      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c6:	3328      	adds	r3, #40	; 0x28
 80098c8:	2102      	movs	r1, #2
 80098ca:	4618      	mov	r0, r3
 80098cc:	f001 fe8c 	bl	800b5e8 <RCCEx_PLL3_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80098d6:	e00a      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098de:	e006      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80098e0:	bf00      	nop
 80098e2:	e004      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80098e4:	bf00      	nop
 80098e6:	e002      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80098e8:	bf00      	nop
 80098ea:	e000      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80098ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10b      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098f6:	4b39      	ldr	r3, [pc, #228]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80098fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009906:	4a35      	ldr	r2, [pc, #212]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009908:	430b      	orrs	r3, r1
 800990a:	6553      	str	r3, [r2, #84]	; 0x54
 800990c:	e003      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009926:	2300      	movs	r3, #0
 8009928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800992c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009930:	460b      	mov	r3, r1
 8009932:	4313      	orrs	r3, r2
 8009934:	d058      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800993e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009942:	d033      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009944:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009948:	d82c      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800994a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800994e:	d02f      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009954:	d826      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009956:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800995a:	d02b      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800995c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009960:	d820      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009966:	d012      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800996c:	d81a      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d022      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009976:	d115      	bne.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997c:	3308      	adds	r3, #8
 800997e:	2100      	movs	r1, #0
 8009980:	4618      	mov	r0, r3
 8009982:	f001 fd7f 	bl	800b484 <RCCEx_PLL2_Config>
 8009986:	4603      	mov	r3, r0
 8009988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800998c:	e015      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800998e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009992:	3328      	adds	r3, #40	; 0x28
 8009994:	2102      	movs	r1, #2
 8009996:	4618      	mov	r0, r3
 8009998:	f001 fe26 	bl	800b5e8 <RCCEx_PLL3_Config>
 800999c:	4603      	mov	r3, r0
 800999e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80099a2:	e00a      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099aa:	e006      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099ac:	bf00      	nop
 80099ae:	e004      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099b0:	bf00      	nop
 80099b2:	e002      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099b4:	bf00      	nop
 80099b6:	e000      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80099b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10e      	bne.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80099c2:	4b06      	ldr	r3, [pc, #24]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80099ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099d2:	4a02      	ldr	r2, [pc, #8]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099d4:	430b      	orrs	r3, r1
 80099d6:	6593      	str	r3, [r2, #88]	; 0x58
 80099d8:	e006      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80099da:	bf00      	nop
 80099dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80099e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80099f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099f8:	2300      	movs	r3, #0
 80099fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009a02:	460b      	mov	r3, r1
 8009a04:	4313      	orrs	r3, r2
 8009a06:	d055      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a14:	d033      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009a16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a1a:	d82c      	bhi.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a20:	d02f      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a26:	d826      	bhi.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009a2c:	d02b      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009a2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009a32:	d820      	bhi.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a38:	d012      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a3e:	d81a      	bhi.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d022      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a48:	d115      	bne.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4e:	3308      	adds	r3, #8
 8009a50:	2100      	movs	r1, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f001 fd16 	bl	800b484 <RCCEx_PLL2_Config>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a5e:	e015      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a64:	3328      	adds	r3, #40	; 0x28
 8009a66:	2102      	movs	r1, #2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 fdbd 	bl	800b5e8 <RCCEx_PLL3_Config>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a74:	e00a      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a7c:	e006      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a7e:	bf00      	nop
 8009a80:	e004      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a82:	bf00      	nop
 8009a84:	e002      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a86:	bf00      	nop
 8009a88:	e000      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10b      	bne.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a94:	4ba1      	ldr	r3, [pc, #644]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a98:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009aa4:	4a9d      	ldr	r2, [pc, #628]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009aa6:	430b      	orrs	r3, r1
 8009aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8009aaa:	e003      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ab0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f002 0308 	and.w	r3, r2, #8
 8009ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009aca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009ace:	460b      	mov	r3, r1
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	d01e      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae0:	d10c      	bne.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ae6:	3328      	adds	r3, #40	; 0x28
 8009ae8:	2102      	movs	r1, #2
 8009aea:	4618      	mov	r0, r3
 8009aec:	f001 fd7c 	bl	800b5e8 <RCCEx_PLL3_Config>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009afc:	4b87      	ldr	r3, [pc, #540]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b0c:	4a83      	ldr	r2, [pc, #524]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	f002 0310 	and.w	r3, r2, #16
 8009b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b22:	2300      	movs	r3, #0
 8009b24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	d01e      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b3e:	d10c      	bne.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b44:	3328      	adds	r3, #40	; 0x28
 8009b46:	2102      	movs	r1, #2
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f001 fd4d 	bl	800b5e8 <RCCEx_PLL3_Config>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b5a:	4b70      	ldr	r3, [pc, #448]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b6a:	4a6c      	ldr	r2, [pc, #432]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b6c:	430b      	orrs	r3, r1
 8009b6e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	d03e      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b9c:	d022      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ba2:	d81b      	bhi.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bac:	d00b      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009bae:	e015      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f001 fc63 	bl	800b484 <RCCEx_PLL2_Config>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009bc4:	e00f      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bca:	3328      	adds	r3, #40	; 0x28
 8009bcc:	2102      	movs	r1, #2
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f001 fd0a 	bl	800b5e8 <RCCEx_PLL3_Config>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009bda:	e004      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009be2:	e000      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009be6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009bee:	4b4b      	ldr	r3, [pc, #300]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009bfe:	4a47      	ldr	r2, [pc, #284]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c00:	430b      	orrs	r3, r1
 8009c02:	6593      	str	r3, [r2, #88]	; 0x58
 8009c04:	e003      	b.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009c1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009c24:	460b      	mov	r3, r1
 8009c26:	4313      	orrs	r3, r2
 8009c28:	d03b      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c36:	d01f      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009c38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c3c:	d818      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c42:	d003      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009c44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c48:	d007      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009c4a:	e011      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c4c:	4b33      	ldr	r3, [pc, #204]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	4a32      	ldr	r2, [pc, #200]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c58:	e00f      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c5e:	3328      	adds	r3, #40	; 0x28
 8009c60:	2101      	movs	r1, #1
 8009c62:	4618      	mov	r0, r3
 8009c64:	f001 fcc0 	bl	800b5e8 <RCCEx_PLL3_Config>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c6e:	e004      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c76:	e000      	b.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10b      	bne.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c82:	4b26      	ldr	r3, [pc, #152]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c92:	4a22      	ldr	r2, [pc, #136]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c94:	430b      	orrs	r3, r1
 8009c96:	6553      	str	r3, [r2, #84]	; 0x54
 8009c98:	e003      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009cae:	673b      	str	r3, [r7, #112]	; 0x70
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	677b      	str	r3, [r7, #116]	; 0x74
 8009cb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	d034      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d003      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ccc:	d007      	beq.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009cce:	e011      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cd0:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	4a11      	ldr	r2, [pc, #68]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009cdc:	e00e      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	2102      	movs	r1, #2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f001 fbcc 	bl	800b484 <RCCEx_PLL2_Config>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009cf2:	e003      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10d      	bne.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d04:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d12:	4a02      	ldr	r2, [pc, #8]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d14:	430b      	orrs	r3, r1
 8009d16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009d18:	e006      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009d1a:	bf00      	nop
 8009d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009d34:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d36:	2300      	movs	r3, #0
 8009d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4313      	orrs	r3, r2
 8009d42:	d00c      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d48:	3328      	adds	r3, #40	; 0x28
 8009d4a:	2102      	movs	r1, #2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 fc4b 	bl	800b5e8 <RCCEx_PLL3_Config>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009d6a:	663b      	str	r3, [r7, #96]	; 0x60
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	667b      	str	r3, [r7, #100]	; 0x64
 8009d70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009d74:	460b      	mov	r3, r1
 8009d76:	4313      	orrs	r3, r2
 8009d78:	d038      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d86:	d018      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d8c:	d811      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d92:	d014      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d98:	d80b      	bhi.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d011      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009da2:	d106      	bne.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009da4:	4bc3      	ldr	r3, [pc, #780]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	4ac2      	ldr	r2, [pc, #776]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009db0:	e008      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009db8:	e004      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009dba:	bf00      	nop
 8009dbc:	e002      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009dbe:	bf00      	nop
 8009dc0:	e000      	b.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10b      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009dcc:	4bb9      	ldr	r3, [pc, #740]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ddc:	4ab5      	ldr	r2, [pc, #724]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dde:	430b      	orrs	r3, r1
 8009de0:	6553      	str	r3, [r2, #84]	; 0x54
 8009de2:	e003      	b.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009de8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009df8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dfe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009e02:	460b      	mov	r3, r1
 8009e04:	4313      	orrs	r3, r2
 8009e06:	d009      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e08:	4baa      	ldr	r3, [pc, #680]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e16:	4aa7      	ldr	r2, [pc, #668]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009e28:	653b      	str	r3, [r7, #80]	; 0x50
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	657b      	str	r3, [r7, #84]	; 0x54
 8009e2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009e32:	460b      	mov	r3, r1
 8009e34:	4313      	orrs	r3, r2
 8009e36:	d00a      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009e38:	4b9e      	ldr	r3, [pc, #632]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009e48:	4a9a      	ldr	r2, [pc, #616]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e4a:	430b      	orrs	r3, r1
 8009e4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009e64:	460b      	mov	r3, r1
 8009e66:	4313      	orrs	r3, r2
 8009e68:	d009      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e6a:	4b92      	ldr	r3, [pc, #584]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e6e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e78:	4a8e      	ldr	r2, [pc, #568]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e7a:	430b      	orrs	r3, r1
 8009e7c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009e90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009e94:	460b      	mov	r3, r1
 8009e96:	4313      	orrs	r3, r2
 8009e98:	d00e      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e9a:	4b86      	ldr	r3, [pc, #536]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	4a85      	ldr	r2, [pc, #532]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ea0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ea4:	6113      	str	r3, [r2, #16]
 8009ea6:	4b83      	ldr	r3, [pc, #524]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ea8:	6919      	ldr	r1, [r3, #16]
 8009eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009eb2:	4a80      	ldr	r2, [pc, #512]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eb4:	430b      	orrs	r3, r1
 8009eb6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009ec4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009ece:	460b      	mov	r3, r1
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	d009      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ed4:	4b77      	ldr	r3, [pc, #476]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee2:	4a74      	ldr	r2, [pc, #464]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ee4:	430b      	orrs	r3, r1
 8009ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8009efa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009efe:	460b      	mov	r3, r1
 8009f00:	4313      	orrs	r3, r2
 8009f02:	d00a      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f04:	4b6b      	ldr	r3, [pc, #428]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f08:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f14:	4a67      	ldr	r2, [pc, #412]	; (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f16:	430b      	orrs	r3, r1
 8009f18:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	2100      	movs	r1, #0
 8009f24:	62b9      	str	r1, [r7, #40]	; 0x28
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009f30:	460b      	mov	r3, r1
 8009f32:	4313      	orrs	r3, r2
 8009f34:	d011      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 faa0 	bl	800b484 <RCCEx_PLL2_Config>
 8009f44:	4603      	mov	r3, r0
 8009f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	2100      	movs	r1, #0
 8009f64:	6239      	str	r1, [r7, #32]
 8009f66:	f003 0302 	and.w	r3, r3, #2
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009f6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009f70:	460b      	mov	r3, r1
 8009f72:	4313      	orrs	r3, r2
 8009f74:	d011      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f001 fa80 	bl	800b484 <RCCEx_PLL2_Config>
 8009f84:	4603      	mov	r3, r0
 8009f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	61b9      	str	r1, [r7, #24]
 8009fa6:	f003 0304 	and.w	r3, r3, #4
 8009faa:	61fb      	str	r3, [r7, #28]
 8009fac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	d011      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fba:	3308      	adds	r3, #8
 8009fbc:	2102      	movs	r1, #2
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f001 fa60 	bl	800b484 <RCCEx_PLL2_Config>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	6139      	str	r1, [r7, #16]
 8009fe6:	f003 0308 	and.w	r3, r3, #8
 8009fea:	617b      	str	r3, [r7, #20]
 8009fec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	d011      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffa:	3328      	adds	r3, #40	; 0x28
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f001 faf2 	bl	800b5e8 <RCCEx_PLL3_Config>
 800a004:	4603      	mov	r3, r0
 800a006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a00a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a016:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	2100      	movs	r1, #0
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	f003 0310 	and.w	r3, r3, #16
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a030:	460b      	mov	r3, r1
 800a032:	4313      	orrs	r3, r2
 800a034:	d011      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a03a:	3328      	adds	r3, #40	; 0x28
 800a03c:	2101      	movs	r1, #1
 800a03e:	4618      	mov	r0, r3
 800a040:	f001 fad2 	bl	800b5e8 <RCCEx_PLL3_Config>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a04a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a056:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a062:	2100      	movs	r1, #0
 800a064:	6039      	str	r1, [r7, #0]
 800a066:	f003 0320 	and.w	r3, r3, #32
 800a06a:	607b      	str	r3, [r7, #4]
 800a06c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a070:	460b      	mov	r3, r1
 800a072:	4313      	orrs	r3, r2
 800a074:	d011      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07a:	3328      	adds	r3, #40	; 0x28
 800a07c:	2102      	movs	r1, #2
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 fab2 	bl	800b5e8 <RCCEx_PLL3_Config>
 800a084:	4603      	mov	r3, r0
 800a086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a08a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a096:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a09a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e000      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0b4:	58024400 	.word	0x58024400

0800a0b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b090      	sub	sp, #64	; 0x40
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a0c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a0ca:	430b      	orrs	r3, r1
 800a0cc:	f040 8094 	bne.w	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a0d0:	4b9e      	ldr	r3, [pc, #632]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0d4:	f003 0307 	and.w	r3, r3, #7
 800a0d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	f200 8087 	bhi.w	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a0e2:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e8:	0800a0fd 	.word	0x0800a0fd
 800a0ec:	0800a125 	.word	0x0800a125
 800a0f0:	0800a14d 	.word	0x0800a14d
 800a0f4:	0800a1e9 	.word	0x0800a1e9
 800a0f8:	0800a175 	.word	0x0800a175
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0fc:	4b93      	ldr	r3, [pc, #588]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a108:	d108      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a10a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 f810 	bl	800b134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a118:	f000 bd45 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a120:	f000 bd41 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a124:	4b89      	ldr	r3, [pc, #548]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a12c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a130:	d108      	bne.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a132:	f107 0318 	add.w	r3, r7, #24
 800a136:	4618      	mov	r0, r3
 800a138:	f000 fd54 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a140:	f000 bd31 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a148:	f000 bd2d 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a14c:	4b7f      	ldr	r3, [pc, #508]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a158:	d108      	bne.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a15a:	f107 030c 	add.w	r3, r7, #12
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 fe94 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a168:	f000 bd1d 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a170:	f000 bd19 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a174:	4b75      	ldr	r3, [pc, #468]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a17c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a17e:	4b73      	ldr	r3, [pc, #460]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	2b04      	cmp	r3, #4
 800a188:	d10c      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d109      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a190:	4b6e      	ldr	r3, [pc, #440]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	08db      	lsrs	r3, r3, #3
 800a196:	f003 0303 	and.w	r3, r3, #3
 800a19a:	4a6d      	ldr	r2, [pc, #436]	; (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a19c:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1a2:	e01f      	b.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1a4:	4b69      	ldr	r3, [pc, #420]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1b0:	d106      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1b8:	d102      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1ba:	4b66      	ldr	r3, [pc, #408]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1be:	e011      	b.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1c0:	4b62      	ldr	r3, [pc, #392]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1cc:	d106      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1d4:	d102      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1d6:	4b60      	ldr	r3, [pc, #384]	; (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1da:	e003      	b.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a1e0:	f000 bce1 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1e4:	f000 bcdf 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1e8:	4b5c      	ldr	r3, [pc, #368]	; (800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1ec:	f000 bcdb 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1f4:	f000 bcd7 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1fc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a200:	430b      	orrs	r3, r1
 800a202:	f040 80ad 	bne.w	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a206:	4b51      	ldr	r3, [pc, #324]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a20a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a20e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a216:	d056      	beq.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21e:	f200 8090 	bhi.w	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	2bc0      	cmp	r3, #192	; 0xc0
 800a226:	f000 8088 	beq.w	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	2bc0      	cmp	r3, #192	; 0xc0
 800a22e:	f200 8088 	bhi.w	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a234:	2b80      	cmp	r3, #128	; 0x80
 800a236:	d032      	beq.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23a:	2b80      	cmp	r3, #128	; 0x80
 800a23c:	f200 8081 	bhi.w	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a248:	2b40      	cmp	r3, #64	; 0x40
 800a24a:	d014      	beq.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a24c:	e079      	b.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a24e:	4b3f      	ldr	r3, [pc, #252]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a25a:	d108      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a25c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a260:	4618      	mov	r0, r3
 800a262:	f000 ff67 	bl	800b134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a26a:	f000 bc9c 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a272:	f000 bc98 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a276:	4b35      	ldr	r3, [pc, #212]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a27e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a282:	d108      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a284:	f107 0318 	add.w	r3, r7, #24
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 fcab 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a292:	f000 bc88 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a29a:	f000 bc84 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a29e:	4b2b      	ldr	r3, [pc, #172]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2aa:	d108      	bne.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ac:	f107 030c 	add.w	r3, r7, #12
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 fdeb 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ba:	f000 bc74 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c2:	f000 bc70 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2c6:	4b21      	ldr	r3, [pc, #132]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2d0:	4b1e      	ldr	r3, [pc, #120]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0304 	and.w	r3, r3, #4
 800a2d8:	2b04      	cmp	r3, #4
 800a2da:	d10c      	bne.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d109      	bne.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2e2:	4b1a      	ldr	r3, [pc, #104]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	08db      	lsrs	r3, r3, #3
 800a2e8:	f003 0303 	and.w	r3, r3, #3
 800a2ec:	4a18      	ldr	r2, [pc, #96]	; (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f4:	e01f      	b.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2f6:	4b15      	ldr	r3, [pc, #84]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a302:	d106      	bne.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a30a:	d102      	bne.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a30c:	4b11      	ldr	r3, [pc, #68]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a310:	e011      	b.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a312:	4b0e      	ldr	r3, [pc, #56]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a31a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a31e:	d106      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a326:	d102      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a328:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a32c:	e003      	b.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a332:	f000 bc38 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a336:	f000 bc36 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a33a:	4b08      	ldr	r3, [pc, #32]	; (800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a33c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a33e:	f000 bc32 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a346:	f000 bc2e 	b.w	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a34a:	bf00      	nop
 800a34c:	58024400 	.word	0x58024400
 800a350:	03d09000 	.word	0x03d09000
 800a354:	003d0900 	.word	0x003d0900
 800a358:	00989680 	.word	0x00989680
 800a35c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a360:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a364:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a368:	430b      	orrs	r3, r1
 800a36a:	f040 809c 	bne.w	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a36e:	4b9e      	ldr	r3, [pc, #632]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a372:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a376:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a37e:	d054      	beq.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a386:	f200 808b 	bhi.w	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a390:	f000 8083 	beq.w	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a39a:	f200 8081 	bhi.w	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3a4:	d02f      	beq.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3ac:	d878      	bhi.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3ba:	d012      	beq.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a3bc:	e070      	b.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3be:	4b8a      	ldr	r3, [pc, #552]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3ca:	d107      	bne.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 feaf 	bl	800b134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3da:	e3e4      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e0:	e3e1      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3e2:	4b81      	ldr	r3, [pc, #516]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3ee:	d107      	bne.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f0:	f107 0318 	add.w	r3, r7, #24
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 fbf5 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3fe:	e3d2      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a404:	e3cf      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a406:	4b78      	ldr	r3, [pc, #480]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a40e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a412:	d107      	bne.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a414:	f107 030c 	add.w	r3, r7, #12
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 fd37 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a422:	e3c0      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a428:	e3bd      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a42a:	4b6f      	ldr	r3, [pc, #444]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a42e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a432:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a434:	4b6c      	ldr	r3, [pc, #432]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d10c      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a446:	4b68      	ldr	r3, [pc, #416]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	08db      	lsrs	r3, r3, #3
 800a44c:	f003 0303 	and.w	r3, r3, #3
 800a450:	4a66      	ldr	r2, [pc, #408]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a452:	fa22 f303 	lsr.w	r3, r2, r3
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a458:	e01e      	b.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a45a:	4b63      	ldr	r3, [pc, #396]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a466:	d106      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a46e:	d102      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a470:	4b5f      	ldr	r3, [pc, #380]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a474:	e010      	b.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a476:	4b5c      	ldr	r3, [pc, #368]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a47e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a482:	d106      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a48a:	d102      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a48c:	4b59      	ldr	r3, [pc, #356]	; (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a490:	e002      	b.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a496:	e386      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a498:	e385      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a49a:	4b57      	ldr	r3, [pc, #348]	; (800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a49e:	e382      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4a4:	e37f      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a4a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	f040 80a7 	bne.w	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a4b4:	4b4c      	ldr	r3, [pc, #304]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a4bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4c4:	d055      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4cc:	f200 8096 	bhi.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a4d6:	f000 8084 	beq.w	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a4e0:	f200 808c 	bhi.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4ea:	d030      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4f2:	f200 8083 	bhi.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d004      	beq.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a502:	d012      	beq.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a504:	e07a      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a506:	4b38      	ldr	r3, [pc, #224]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a50e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a512:	d107      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fe0b 	bl	800b134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a522:	e340      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a528:	e33d      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a52a:	4b2f      	ldr	r3, [pc, #188]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a536:	d107      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a538:	f107 0318 	add.w	r3, r7, #24
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fb51 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a546:	e32e      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a54c:	e32b      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a54e:	4b26      	ldr	r3, [pc, #152]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a55a:	d107      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a55c:	f107 030c 	add.w	r3, r7, #12
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fc93 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a56a:	e31c      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a570:	e319      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a572:	4b1d      	ldr	r3, [pc, #116]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a576:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a57a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a57c:	4b1a      	ldr	r3, [pc, #104]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b04      	cmp	r3, #4
 800a586:	d10c      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d109      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a58e:	4b16      	ldr	r3, [pc, #88]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	08db      	lsrs	r3, r3, #3
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	4a14      	ldr	r2, [pc, #80]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a59a:	fa22 f303 	lsr.w	r3, r2, r3
 800a59e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5a0:	e01e      	b.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5a2:	4b11      	ldr	r3, [pc, #68]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ae:	d106      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5b6:	d102      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5b8:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5bc:	e010      	b.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5be:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5ca:	d106      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5d2:	d102      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5d4:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d8:	e002      	b.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a5de:	e2e2      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5e0:	e2e1      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5e2:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5e6:	e2de      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5e8:	58024400 	.word	0x58024400
 800a5ec:	03d09000 	.word	0x03d09000
 800a5f0:	003d0900 	.word	0x003d0900
 800a5f4:	00989680 	.word	0x00989680
 800a5f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a600:	e2d1      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a602:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a606:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a60a:	430b      	orrs	r3, r1
 800a60c:	f040 809c 	bne.w	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a610:	4b93      	ldr	r3, [pc, #588]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a614:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a618:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a620:	d054      	beq.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a628:	f200 808b 	bhi.w	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a632:	f000 8083 	beq.w	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a63c:	f200 8081 	bhi.w	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a646:	d02f      	beq.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a64e:	d878      	bhi.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	2b00      	cmp	r3, #0
 800a654:	d004      	beq.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a65c:	d012      	beq.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a65e:	e070      	b.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a660:	4b7f      	ldr	r3, [pc, #508]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a66c:	d107      	bne.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a66e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fd5e 	bl	800b134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a67c:	e293      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a682:	e290      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a684:	4b76      	ldr	r3, [pc, #472]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a68c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a690:	d107      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a692:	f107 0318 	add.w	r3, r7, #24
 800a696:	4618      	mov	r0, r3
 800a698:	f000 faa4 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6a0:	e281      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6a6:	e27e      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6a8:	4b6d      	ldr	r3, [pc, #436]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6b4:	d107      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6b6:	f107 030c 	add.w	r3, r7, #12
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 fbe6 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6c4:	e26f      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6ca:	e26c      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6cc:	4b64      	ldr	r3, [pc, #400]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6d6:	4b62      	ldr	r3, [pc, #392]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0304 	and.w	r3, r3, #4
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d10c      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d109      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6e8:	4b5d      	ldr	r3, [pc, #372]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	08db      	lsrs	r3, r3, #3
 800a6ee:	f003 0303 	and.w	r3, r3, #3
 800a6f2:	4a5c      	ldr	r2, [pc, #368]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a6f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6fa:	e01e      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6fc:	4b58      	ldr	r3, [pc, #352]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a708:	d106      	bne.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a710:	d102      	bne.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a712:	4b55      	ldr	r3, [pc, #340]	; (800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a714:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a716:	e010      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a718:	4b51      	ldr	r3, [pc, #324]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a724:	d106      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a72c:	d102      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a72e:	4b4f      	ldr	r3, [pc, #316]	; (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a730:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a732:	e002      	b.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a738:	e235      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a73a:	e234      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a73c:	4b4c      	ldr	r3, [pc, #304]	; (800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a740:	e231      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a746:	e22e      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a74c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a750:	430b      	orrs	r3, r1
 800a752:	f040 808f 	bne.w	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a756:	4b42      	ldr	r3, [pc, #264]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a75a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a75e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a766:	d06b      	beq.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a76e:	d874      	bhi.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a776:	d056      	beq.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a77e:	d86c      	bhi.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a786:	d03b      	beq.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a78e:	d864      	bhi.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a796:	d021      	beq.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a79e:	d85c      	bhi.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d004      	beq.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ac:	d004      	beq.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a7ae:	e054      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a7b0:	f7fe fa30 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 800a7b4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a7b6:	e1f6      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7b8:	4b29      	ldr	r3, [pc, #164]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7c4:	d107      	bne.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c6:	f107 0318 	add.w	r3, r7, #24
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 fa0a 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d4:	e1e7      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7da:	e1e4      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7dc:	4b20      	ldr	r3, [pc, #128]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7e8:	d107      	bne.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ea:	f107 030c 	add.w	r3, r7, #12
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 fb4c 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7f8:	e1d5      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7fe:	e1d2      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a800:	4b17      	ldr	r3, [pc, #92]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 0304 	and.w	r3, r3, #4
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d109      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a80c:	4b14      	ldr	r3, [pc, #80]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	08db      	lsrs	r3, r3, #3
 800a812:	f003 0303 	and.w	r3, r3, #3
 800a816:	4a13      	ldr	r2, [pc, #76]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a818:	fa22 f303 	lsr.w	r3, r2, r3
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a81e:	e1c2      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a824:	e1bf      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a826:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a832:	d102      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a834:	4b0c      	ldr	r3, [pc, #48]	; (800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a838:	e1b5      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a83e:	e1b2      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a840:	4b07      	ldr	r3, [pc, #28]	; (800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a84c:	d102      	bne.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a84e:	4b07      	ldr	r3, [pc, #28]	; (800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a850:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a852:	e1a8      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a858:	e1a5      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a85e:	e1a2      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a860:	58024400 	.word	0x58024400
 800a864:	03d09000 	.word	0x03d09000
 800a868:	003d0900 	.word	0x003d0900
 800a86c:	00989680 	.word	0x00989680
 800a870:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a878:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a87c:	430b      	orrs	r3, r1
 800a87e:	d173      	bne.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a880:	4b9c      	ldr	r3, [pc, #624]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a888:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a890:	d02f      	beq.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a898:	d863      	bhi.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d004      	beq.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8a6:	d012      	beq.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a8a8:	e05b      	b.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8aa:	4b92      	ldr	r3, [pc, #584]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8b6:	d107      	bne.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b8:	f107 0318 	add.w	r3, r7, #24
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 f991 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c6:	e16e      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8cc:	e16b      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8ce:	4b89      	ldr	r3, [pc, #548]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8da:	d107      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8dc:	f107 030c 	add.w	r3, r7, #12
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 fad3 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ea:	e15c      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f0:	e159      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8f2:	4b80      	ldr	r3, [pc, #512]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8fc:	4b7d      	ldr	r3, [pc, #500]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b04      	cmp	r3, #4
 800a906:	d10c      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d109      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a90e:	4b79      	ldr	r3, [pc, #484]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	08db      	lsrs	r3, r3, #3
 800a914:	f003 0303 	and.w	r3, r3, #3
 800a918:	4a77      	ldr	r2, [pc, #476]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a91a:	fa22 f303 	lsr.w	r3, r2, r3
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a920:	e01e      	b.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a922:	4b74      	ldr	r3, [pc, #464]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a92e:	d106      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a936:	d102      	bne.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a938:	4b70      	ldr	r3, [pc, #448]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a93a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a93c:	e010      	b.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a93e:	4b6d      	ldr	r3, [pc, #436]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a94a:	d106      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a952:	d102      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a954:	4b6a      	ldr	r3, [pc, #424]	; (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a958:	e002      	b.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a95e:	e122      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a960:	e121      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a966:	e11e      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a96c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a970:	430b      	orrs	r3, r1
 800a972:	d133      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a974:	4b5f      	ldr	r3, [pc, #380]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a97c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	2b00      	cmp	r3, #0
 800a982:	d004      	beq.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a98a:	d012      	beq.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a98c:	e023      	b.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a98e:	4b59      	ldr	r3, [pc, #356]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a99a:	d107      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a99c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 fbc7 	bl	800b134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9aa:	e0fc      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b0:	e0f9      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9b2:	4b50      	ldr	r3, [pc, #320]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9be:	d107      	bne.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9c0:	f107 0318 	add.w	r3, r7, #24
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f000 f90d 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ce:	e0ea      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9d4:	e0e7      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9da:	e0e4      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a9dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9e0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a9e4:	430b      	orrs	r3, r1
 800a9e6:	f040 808d 	bne.w	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a9ea:	4b42      	ldr	r3, [pc, #264]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a9f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9fa:	d06b      	beq.n	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa02:	d874      	bhi.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa0a:	d056      	beq.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa12:	d86c      	bhi.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa1a:	d03b      	beq.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa22:	d864      	bhi.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa2a:	d021      	beq.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa32:	d85c      	bhi.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa40:	d004      	beq.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800aa42:	e054      	b.n	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa44:	f000 f8b8 	bl	800abb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa48:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aa4a:	e0ac      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa4c:	4b29      	ldr	r3, [pc, #164]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa58:	d107      	bne.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa5a:	f107 0318 	add.w	r3, r7, #24
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 f8c0 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa68:	e09d      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa6e:	e09a      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa70:	4b20      	ldr	r3, [pc, #128]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa7c:	d107      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa7e:	f107 030c 	add.w	r3, r7, #12
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 fa02 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa8c:	e08b      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa92:	e088      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa94:	4b17      	ldr	r3, [pc, #92]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d109      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaa0:	4b14      	ldr	r3, [pc, #80]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	08db      	lsrs	r3, r3, #3
 800aaa6:	f003 0303 	and.w	r3, r3, #3
 800aaaa:	4a13      	ldr	r2, [pc, #76]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab2:	e078      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aab8:	e075      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aaba:	4b0e      	ldr	r3, [pc, #56]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac6:	d102      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aac8:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aacc:	e06b      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad2:	e068      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aad4:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aadc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aae0:	d102      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aae2:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aae6:	e05e      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaec:	e05b      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf2:	e058      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aaf4:	58024400 	.word	0x58024400
 800aaf8:	03d09000 	.word	0x03d09000
 800aafc:	003d0900 	.word	0x003d0900
 800ab00:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ab04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab08:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ab0c:	430b      	orrs	r3, r1
 800ab0e:	d148      	bne.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ab10:	4b27      	ldr	r3, [pc, #156]	; (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab20:	d02a      	beq.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ab22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab28:	d838      	bhi.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ab2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d004      	beq.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab36:	d00d      	beq.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ab38:	e030      	b.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab3a:	4b1d      	ldr	r3, [pc, #116]	; (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab46:	d102      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ab48:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab4c:	e02b      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab52:	e028      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab54:	4b16      	ldr	r3, [pc, #88]	; (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab60:	d107      	bne.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 fae4 	bl	800b134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab70:	e019      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab76:	e016      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab78:	4b0d      	ldr	r3, [pc, #52]	; (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab84:	d107      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab86:	f107 0318 	add.w	r3, r7, #24
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 f82a 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab90:	69fb      	ldr	r3, [r7, #28]
 800ab92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab94:	e007      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab9a:	e004      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba0:	e001      	b.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800aba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3740      	adds	r7, #64	; 0x40
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	58024400 	.word	0x58024400
 800abb4:	00989680 	.word	0x00989680

0800abb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800abbc:	f7fd fffa 	bl	8008bb4 <HAL_RCC_GetHCLKFreq>
 800abc0:	4602      	mov	r2, r0
 800abc2:	4b06      	ldr	r3, [pc, #24]	; (800abdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	091b      	lsrs	r3, r3, #4
 800abc8:	f003 0307 	and.w	r3, r3, #7
 800abcc:	4904      	ldr	r1, [pc, #16]	; (800abe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800abce:	5ccb      	ldrb	r3, [r1, r3]
 800abd0:	f003 031f 	and.w	r3, r3, #31
 800abd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800abd8:	4618      	mov	r0, r3
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	58024400 	.word	0x58024400
 800abe0:	08010004 	.word	0x08010004

0800abe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b089      	sub	sp, #36	; 0x24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abec:	4ba1      	ldr	r3, [pc, #644]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800abf6:	4b9f      	ldr	r3, [pc, #636]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfa:	0b1b      	lsrs	r3, r3, #12
 800abfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ac02:	4b9c      	ldr	r3, [pc, #624]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	091b      	lsrs	r3, r3, #4
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ac0e:	4b99      	ldr	r3, [pc, #612]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	08db      	lsrs	r3, r3, #3
 800ac14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	fb02 f303 	mul.w	r3, r2, r3
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 8111 	beq.w	800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	f000 8083 	beq.w	800ad40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	f200 80a1 	bhi.w	800ad84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d056      	beq.n	800acfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac4e:	e099      	b.n	800ad84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac50:	4b88      	ldr	r3, [pc, #544]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0320 	and.w	r3, r3, #32
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d02d      	beq.n	800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac5c:	4b85      	ldr	r3, [pc, #532]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	08db      	lsrs	r3, r3, #3
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	4a84      	ldr	r2, [pc, #528]	; (800ae78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac68:	fa22 f303 	lsr.w	r3, r2, r3
 800ac6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	ee07 3a90 	vmov	s15, r3
 800ac74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b7b      	ldr	r3, [pc, #492]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acb6:	e087      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800acc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acca:	4b6a      	ldr	r3, [pc, #424]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acda:	ed97 6a03 	vldr	s12, [r7, #12]
 800acde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ace2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acfa:	e065      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0e:	4b59      	ldr	r3, [pc, #356]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad3e:	e043      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad52:	4b48      	ldr	r3, [pc, #288]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad82:	e021      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad96:	4b37      	ldr	r3, [pc, #220]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800adc8:	4b2a      	ldr	r3, [pc, #168]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adcc:	0a5b      	lsrs	r3, r3, #9
 800adce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ade2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ade6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adee:	ee17 2a90 	vmov	r2, s15
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800adf6:	4b1f      	ldr	r3, [pc, #124]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfa:	0c1b      	lsrs	r3, r3, #16
 800adfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae00:	ee07 3a90 	vmov	s15, r3
 800ae04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae10:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae1c:	ee17 2a90 	vmov	r2, s15
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ae24:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae28:	0e1b      	lsrs	r3, r3, #24
 800ae2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae4a:	ee17 2a90 	vmov	r2, s15
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae52:	e008      	b.n	800ae66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	609a      	str	r2, [r3, #8]
}
 800ae66:	bf00      	nop
 800ae68:	3724      	adds	r7, #36	; 0x24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	58024400 	.word	0x58024400
 800ae78:	03d09000 	.word	0x03d09000
 800ae7c:	46000000 	.word	0x46000000
 800ae80:	4c742400 	.word	0x4c742400
 800ae84:	4a742400 	.word	0x4a742400
 800ae88:	4b189680 	.word	0x4b189680

0800ae8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b089      	sub	sp, #36	; 0x24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae94:	4ba1      	ldr	r3, [pc, #644]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ae9e:	4b9f      	ldr	r3, [pc, #636]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea2:	0d1b      	lsrs	r3, r3, #20
 800aea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aea8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aeaa:	4b9c      	ldr	r3, [pc, #624]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeae:	0a1b      	lsrs	r3, r3, #8
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aeb6:	4b99      	ldr	r3, [pc, #612]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	fb02 f303 	mul.w	r3, r2, r3
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aece:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 8111 	beq.w	800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	2b02      	cmp	r3, #2
 800aede:	f000 8083 	beq.w	800afe8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	f200 80a1 	bhi.w	800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d056      	beq.n	800afa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aef6:	e099      	b.n	800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aef8:	4b88      	ldr	r3, [pc, #544]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0320 	and.w	r3, r3, #32
 800af00:	2b00      	cmp	r3, #0
 800af02:	d02d      	beq.n	800af60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af04:	4b85      	ldr	r3, [pc, #532]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	08db      	lsrs	r3, r3, #3
 800af0a:	f003 0303 	and.w	r3, r3, #3
 800af0e:	4a84      	ldr	r2, [pc, #528]	; (800b120 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af10:	fa22 f303 	lsr.w	r3, r2, r3
 800af14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2e:	4b7b      	ldr	r3, [pc, #492]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af5e:	e087      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b128 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af72:	4b6a      	ldr	r3, [pc, #424]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af82:	ed97 6a03 	vldr	s12, [r7, #12]
 800af86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afa2:	e065      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb6:	4b59      	ldr	r3, [pc, #356]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afe6:	e043      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800affa:	4b48      	ldr	r3, [pc, #288]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b02a:	e021      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b036:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03e:	4b37      	ldr	r3, [pc, #220]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b052:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b06e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b070:	4b2a      	ldr	r3, [pc, #168]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b074:	0a5b      	lsrs	r3, r3, #9
 800b076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b07a:	ee07 3a90 	vmov	s15, r3
 800b07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b08a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b096:	ee17 2a90 	vmov	r2, s15
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b09e:	4b1f      	ldr	r3, [pc, #124]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a2:	0c1b      	lsrs	r3, r3, #16
 800b0a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a8:	ee07 3a90 	vmov	s15, r3
 800b0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0c4:	ee17 2a90 	vmov	r2, s15
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b0cc:	4b13      	ldr	r3, [pc, #76]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d0:	0e1b      	lsrs	r3, r3, #24
 800b0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d6:	ee07 3a90 	vmov	s15, r3
 800b0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f2:	ee17 2a90 	vmov	r2, s15
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0fa:	e008      	b.n	800b10e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	609a      	str	r2, [r3, #8]
}
 800b10e:	bf00      	nop
 800b110:	3724      	adds	r7, #36	; 0x24
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	58024400 	.word	0x58024400
 800b120:	03d09000 	.word	0x03d09000
 800b124:	46000000 	.word	0x46000000
 800b128:	4c742400 	.word	0x4c742400
 800b12c:	4a742400 	.word	0x4a742400
 800b130:	4b189680 	.word	0x4b189680

0800b134 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b134:	b480      	push	{r7}
 800b136:	b089      	sub	sp, #36	; 0x24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b13c:	4ba0      	ldr	r3, [pc, #640]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b140:	f003 0303 	and.w	r3, r3, #3
 800b144:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b146:	4b9e      	ldr	r3, [pc, #632]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14a:	091b      	lsrs	r3, r3, #4
 800b14c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b150:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b152:	4b9b      	ldr	r3, [pc, #620]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b15c:	4b98      	ldr	r3, [pc, #608]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b160:	08db      	lsrs	r3, r3, #3
 800b162:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	fb02 f303 	mul.w	r3, r2, r3
 800b16c:	ee07 3a90 	vmov	s15, r3
 800b170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b174:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 8111 	beq.w	800b3a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	2b02      	cmp	r3, #2
 800b184:	f000 8083 	beq.w	800b28e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	2b02      	cmp	r3, #2
 800b18c:	f200 80a1 	bhi.w	800b2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d056      	beq.n	800b24a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b19c:	e099      	b.n	800b2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b19e:	4b88      	ldr	r3, [pc, #544]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0320 	and.w	r3, r3, #32
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d02d      	beq.n	800b206 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1aa:	4b85      	ldr	r3, [pc, #532]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	08db      	lsrs	r3, r3, #3
 800b1b0:	f003 0303 	and.w	r3, r3, #3
 800b1b4:	4a83      	ldr	r2, [pc, #524]	; (800b3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	ee07 3a90 	vmov	s15, r3
 800b1c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	ee07 3a90 	vmov	s15, r3
 800b1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d4:	4b7a      	ldr	r3, [pc, #488]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1dc:	ee07 3a90 	vmov	s15, r3
 800b1e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b200:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b204:	e087      	b.n	800b316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	ee07 3a90 	vmov	s15, r3
 800b20c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b210:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b3cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b218:	4b69      	ldr	r3, [pc, #420]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b228:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b23c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b240:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b244:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b248:	e065      	b.n	800b316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	ee07 3a90 	vmov	s15, r3
 800b250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b254:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b3d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b25c:	4b58      	ldr	r3, [pc, #352]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b264:	ee07 3a90 	vmov	s15, r3
 800b268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b26c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b270:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b27c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b284:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b28c:	e043      	b.n	800b316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	ee07 3a90 	vmov	s15, r3
 800b294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b298:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b29c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2a0:	4b47      	ldr	r3, [pc, #284]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a8:	ee07 3a90 	vmov	s15, r3
 800b2ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2d0:	e021      	b.n	800b316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	ee07 3a90 	vmov	s15, r3
 800b2d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b3cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b2e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2e4:	4b36      	ldr	r3, [pc, #216]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ec:	ee07 3a90 	vmov	s15, r3
 800b2f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b30c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b310:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b314:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b316:	4b2a      	ldr	r3, [pc, #168]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31a:	0a5b      	lsrs	r3, r3, #9
 800b31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b320:	ee07 3a90 	vmov	s15, r3
 800b324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b32c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b330:	edd7 6a07 	vldr	s13, [r7, #28]
 800b334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b33c:	ee17 2a90 	vmov	r2, s15
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b344:	4b1e      	ldr	r3, [pc, #120]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b348:	0c1b      	lsrs	r3, r3, #16
 800b34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b35a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b35e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b36a:	ee17 2a90 	vmov	r2, s15
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b372:	4b13      	ldr	r3, [pc, #76]	; (800b3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b376:	0e1b      	lsrs	r3, r3, #24
 800b378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b37c:	ee07 3a90 	vmov	s15, r3
 800b380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b38c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b398:	ee17 2a90 	vmov	r2, s15
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b3a0:	e008      	b.n	800b3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	609a      	str	r2, [r3, #8]
}
 800b3b4:	bf00      	nop
 800b3b6:	3724      	adds	r7, #36	; 0x24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	58024400 	.word	0x58024400
 800b3c4:	03d09000 	.word	0x03d09000
 800b3c8:	46000000 	.word	0x46000000
 800b3cc:	4c742400 	.word	0x4c742400
 800b3d0:	4a742400 	.word	0x4a742400
 800b3d4:	4b189680 	.word	0x4b189680

0800b3d8 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800b3e0:	4b26      	ldr	r3, [pc, #152]	; (800b47c <HAL_RCCEx_CRSConfig+0xa4>)
 800b3e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3e6:	4a25      	ldr	r2, [pc, #148]	; (800b47c <HAL_RCCEx_CRSConfig+0xa4>)
 800b3e8:	f043 0302 	orr.w	r3, r3, #2
 800b3ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800b3f0:	4b22      	ldr	r3, [pc, #136]	; (800b47c <HAL_RCCEx_CRSConfig+0xa4>)
 800b3f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3f6:	4a21      	ldr	r2, [pc, #132]	; (800b47c <HAL_RCCEx_CRSConfig+0xa4>)
 800b3f8:	f023 0302 	bic.w	r3, r3, #2
 800b3fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800b400:	f7f7 fd0c 	bl	8002e1c <HAL_GetREVID>
 800b404:	4603      	mov	r3, r0
 800b406:	f241 0203 	movw	r2, #4099	; 0x1003
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d80b      	bhi.n	800b426 <HAL_RCCEx_CRSConfig+0x4e>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b416:	d106      	bne.n	800b426 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	4313      	orrs	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e008      	b.n	800b438 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	431a      	orrs	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	4313      	orrs	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	4313      	orrs	r3, r2
 800b440:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	041b      	lsls	r3, r3, #16
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800b44e:	4a0c      	ldr	r2, [pc, #48]	; (800b480 <HAL_RCCEx_CRSConfig+0xa8>)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800b454:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <HAL_RCCEx_CRSConfig+0xa8>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	021b      	lsls	r3, r3, #8
 800b462:	4907      	ldr	r1, [pc, #28]	; (800b480 <HAL_RCCEx_CRSConfig+0xa8>)
 800b464:	4313      	orrs	r3, r2
 800b466:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800b468:	4b05      	ldr	r3, [pc, #20]	; (800b480 <HAL_RCCEx_CRSConfig+0xa8>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a04      	ldr	r2, [pc, #16]	; (800b480 <HAL_RCCEx_CRSConfig+0xa8>)
 800b46e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b472:	6013      	str	r3, [r2, #0]
}
 800b474:	bf00      	nop
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	58024400 	.word	0x58024400
 800b480:	40008400 	.word	0x40008400

0800b484 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b492:	4b53      	ldr	r3, [pc, #332]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b496:	f003 0303 	and.w	r3, r3, #3
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d101      	bne.n	800b4a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e099      	b.n	800b5d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b4a2:	4b4f      	ldr	r3, [pc, #316]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a4e      	ldr	r2, [pc, #312]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b4a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ae:	f7f7 fc85 	bl	8002dbc <HAL_GetTick>
 800b4b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b4b4:	e008      	b.n	800b4c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b4b6:	f7f7 fc81 	bl	8002dbc <HAL_GetTick>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d901      	bls.n	800b4c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e086      	b.n	800b5d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b4c8:	4b45      	ldr	r3, [pc, #276]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1f0      	bne.n	800b4b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b4d4:	4b42      	ldr	r3, [pc, #264]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	031b      	lsls	r3, r3, #12
 800b4e2:	493f      	ldr	r1, [pc, #252]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	628b      	str	r3, [r1, #40]	; 0x28
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	025b      	lsls	r3, r3, #9
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	3b01      	subs	r3, #1
 800b504:	041b      	lsls	r3, r3, #16
 800b506:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b50a:	431a      	orrs	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	3b01      	subs	r3, #1
 800b512:	061b      	lsls	r3, r3, #24
 800b514:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b518:	4931      	ldr	r1, [pc, #196]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b51a:	4313      	orrs	r3, r2
 800b51c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b51e:	4b30      	ldr	r3, [pc, #192]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b522:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	492d      	ldr	r1, [pc, #180]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b530:	4b2b      	ldr	r3, [pc, #172]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b534:	f023 0220 	bic.w	r2, r3, #32
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	4928      	ldr	r1, [pc, #160]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b53e:	4313      	orrs	r3, r2
 800b540:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b542:	4b27      	ldr	r3, [pc, #156]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b546:	4a26      	ldr	r2, [pc, #152]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b548:	f023 0310 	bic.w	r3, r3, #16
 800b54c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b54e:	4b24      	ldr	r3, [pc, #144]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b552:	4b24      	ldr	r3, [pc, #144]	; (800b5e4 <RCCEx_PLL2_Config+0x160>)
 800b554:	4013      	ands	r3, r2
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	69d2      	ldr	r2, [r2, #28]
 800b55a:	00d2      	lsls	r2, r2, #3
 800b55c:	4920      	ldr	r1, [pc, #128]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b562:	4b1f      	ldr	r3, [pc, #124]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b566:	4a1e      	ldr	r2, [pc, #120]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b568:	f043 0310 	orr.w	r3, r3, #16
 800b56c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d106      	bne.n	800b582 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b574:	4b1a      	ldr	r3, [pc, #104]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	4a19      	ldr	r2, [pc, #100]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b57a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b57e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b580:	e00f      	b.n	800b5a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d106      	bne.n	800b596 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b588:	4b15      	ldr	r3, [pc, #84]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	4a14      	ldr	r2, [pc, #80]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b58e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b592:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b594:	e005      	b.n	800b5a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b596:	4b12      	ldr	r3, [pc, #72]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	4a11      	ldr	r2, [pc, #68]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b59c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b5a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b5a2:	4b0f      	ldr	r3, [pc, #60]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a0e      	ldr	r2, [pc, #56]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b5a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b5ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5ae:	f7f7 fc05 	bl	8002dbc <HAL_GetTick>
 800b5b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b5b4:	e008      	b.n	800b5c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b5b6:	f7f7 fc01 	bl	8002dbc <HAL_GetTick>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d901      	bls.n	800b5c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5c4:	2303      	movs	r3, #3
 800b5c6:	e006      	b.n	800b5d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b5c8:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <RCCEx_PLL2_Config+0x15c>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d0f0      	beq.n	800b5b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	58024400 	.word	0x58024400
 800b5e4:	ffff0007 	.word	0xffff0007

0800b5e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5f6:	4b53      	ldr	r3, [pc, #332]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fa:	f003 0303 	and.w	r3, r3, #3
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	d101      	bne.n	800b606 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e099      	b.n	800b73a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b606:	4b4f      	ldr	r3, [pc, #316]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a4e      	ldr	r2, [pc, #312]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b60c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b612:	f7f7 fbd3 	bl	8002dbc <HAL_GetTick>
 800b616:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b618:	e008      	b.n	800b62c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b61a:	f7f7 fbcf 	bl	8002dbc <HAL_GetTick>
 800b61e:	4602      	mov	r2, r0
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	d901      	bls.n	800b62c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e086      	b.n	800b73a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b62c:	4b45      	ldr	r3, [pc, #276]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1f0      	bne.n	800b61a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b638:	4b42      	ldr	r3, [pc, #264]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	051b      	lsls	r3, r3, #20
 800b646:	493f      	ldr	r1, [pc, #252]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b648:	4313      	orrs	r3, r2
 800b64a:	628b      	str	r3, [r1, #40]	; 0x28
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	3b01      	subs	r3, #1
 800b652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	025b      	lsls	r3, r3, #9
 800b65e:	b29b      	uxth	r3, r3
 800b660:	431a      	orrs	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	3b01      	subs	r3, #1
 800b668:	041b      	lsls	r3, r3, #16
 800b66a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b66e:	431a      	orrs	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	3b01      	subs	r3, #1
 800b676:	061b      	lsls	r3, r3, #24
 800b678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b67c:	4931      	ldr	r1, [pc, #196]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b67e:	4313      	orrs	r3, r2
 800b680:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b682:	4b30      	ldr	r3, [pc, #192]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b686:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	492d      	ldr	r1, [pc, #180]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b690:	4313      	orrs	r3, r2
 800b692:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b694:	4b2b      	ldr	r3, [pc, #172]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b698:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	4928      	ldr	r1, [pc, #160]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b6a6:	4b27      	ldr	r3, [pc, #156]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6aa:	4a26      	ldr	r2, [pc, #152]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b6b2:	4b24      	ldr	r3, [pc, #144]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6b6:	4b24      	ldr	r3, [pc, #144]	; (800b748 <RCCEx_PLL3_Config+0x160>)
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	69d2      	ldr	r2, [r2, #28]
 800b6be:	00d2      	lsls	r2, r2, #3
 800b6c0:	4920      	ldr	r1, [pc, #128]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b6c6:	4b1f      	ldr	r3, [pc, #124]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ca:	4a1e      	ldr	r2, [pc, #120]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d106      	bne.n	800b6e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b6d8:	4b1a      	ldr	r3, [pc, #104]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6dc:	4a19      	ldr	r2, [pc, #100]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b6e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6e4:	e00f      	b.n	800b706 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d106      	bne.n	800b6fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b6ec:	4b15      	ldr	r3, [pc, #84]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	4a14      	ldr	r2, [pc, #80]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b6f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6f8:	e005      	b.n	800b706 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b6fa:	4b12      	ldr	r3, [pc, #72]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fe:	4a11      	ldr	r2, [pc, #68]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b704:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b706:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a0e      	ldr	r2, [pc, #56]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b70c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b712:	f7f7 fb53 	bl	8002dbc <HAL_GetTick>
 800b716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b718:	e008      	b.n	800b72c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b71a:	f7f7 fb4f 	bl	8002dbc <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	2b02      	cmp	r3, #2
 800b726:	d901      	bls.n	800b72c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b728:	2303      	movs	r3, #3
 800b72a:	e006      	b.n	800b73a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b72c:	4b05      	ldr	r3, [pc, #20]	; (800b744 <RCCEx_PLL3_Config+0x15c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d0f0      	beq.n	800b71a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b738:	7bfb      	ldrb	r3, [r7, #15]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	58024400 	.word	0x58024400
 800b748:	ffff0007 	.word	0xffff0007

0800b74c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d101      	bne.n	800b75e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e049      	b.n	800b7f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b00      	cmp	r3, #0
 800b768:	d106      	bne.n	800b778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7f7 f816 	bl	80027a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2202      	movs	r2, #2
 800b77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3304      	adds	r3, #4
 800b788:	4619      	mov	r1, r3
 800b78a:	4610      	mov	r0, r2
 800b78c:	f000 f92e 	bl	800b9ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b810:	2b01      	cmp	r3, #1
 800b812:	d101      	bne.n	800b818 <HAL_TIM_ConfigClockSource+0x1c>
 800b814:	2302      	movs	r3, #2
 800b816:	e0dc      	b.n	800b9d2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2202      	movs	r2, #2
 800b824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	4b6a      	ldr	r3, [pc, #424]	; (800b9dc <HAL_TIM_ConfigClockSource+0x1e0>)
 800b834:	4013      	ands	r3, r2
 800b836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b83e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a64      	ldr	r2, [pc, #400]	; (800b9e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	f000 80a9 	beq.w	800b9a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b854:	4a62      	ldr	r2, [pc, #392]	; (800b9e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b856:	4293      	cmp	r3, r2
 800b858:	f200 80ae 	bhi.w	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b85c:	4a61      	ldr	r2, [pc, #388]	; (800b9e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	f000 80a1 	beq.w	800b9a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b864:	4a5f      	ldr	r2, [pc, #380]	; (800b9e4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b866:	4293      	cmp	r3, r2
 800b868:	f200 80a6 	bhi.w	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b86c:	4a5e      	ldr	r2, [pc, #376]	; (800b9e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	f000 8099 	beq.w	800b9a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b874:	4a5c      	ldr	r2, [pc, #368]	; (800b9e8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b876:	4293      	cmp	r3, r2
 800b878:	f200 809e 	bhi.w	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b87c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b880:	f000 8091 	beq.w	800b9a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b884:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b888:	f200 8096 	bhi.w	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b88c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b890:	f000 8089 	beq.w	800b9a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b898:	f200 808e 	bhi.w	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b89c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8a0:	d03e      	beq.n	800b920 <HAL_TIM_ConfigClockSource+0x124>
 800b8a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8a6:	f200 8087 	bhi.w	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ae:	f000 8086 	beq.w	800b9be <HAL_TIM_ConfigClockSource+0x1c2>
 800b8b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b6:	d87f      	bhi.n	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b8:	2b70      	cmp	r3, #112	; 0x70
 800b8ba:	d01a      	beq.n	800b8f2 <HAL_TIM_ConfigClockSource+0xf6>
 800b8bc:	2b70      	cmp	r3, #112	; 0x70
 800b8be:	d87b      	bhi.n	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8c0:	2b60      	cmp	r3, #96	; 0x60
 800b8c2:	d050      	beq.n	800b966 <HAL_TIM_ConfigClockSource+0x16a>
 800b8c4:	2b60      	cmp	r3, #96	; 0x60
 800b8c6:	d877      	bhi.n	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8c8:	2b50      	cmp	r3, #80	; 0x50
 800b8ca:	d03c      	beq.n	800b946 <HAL_TIM_ConfigClockSource+0x14a>
 800b8cc:	2b50      	cmp	r3, #80	; 0x50
 800b8ce:	d873      	bhi.n	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8d0:	2b40      	cmp	r3, #64	; 0x40
 800b8d2:	d058      	beq.n	800b986 <HAL_TIM_ConfigClockSource+0x18a>
 800b8d4:	2b40      	cmp	r3, #64	; 0x40
 800b8d6:	d86f      	bhi.n	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8d8:	2b30      	cmp	r3, #48	; 0x30
 800b8da:	d064      	beq.n	800b9a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8dc:	2b30      	cmp	r3, #48	; 0x30
 800b8de:	d86b      	bhi.n	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8e0:	2b20      	cmp	r3, #32
 800b8e2:	d060      	beq.n	800b9a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8e4:	2b20      	cmp	r3, #32
 800b8e6:	d867      	bhi.n	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d05c      	beq.n	800b9a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8ec:	2b10      	cmp	r3, #16
 800b8ee:	d05a      	beq.n	800b9a6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8f0:	e062      	b.n	800b9b8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6818      	ldr	r0, [r3, #0]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	6899      	ldr	r1, [r3, #8]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	685a      	ldr	r2, [r3, #4]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	f000 f98b 	bl	800bc1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	609a      	str	r2, [r3, #8]
      break;
 800b91e:	e04f      	b.n	800b9c0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6818      	ldr	r0, [r3, #0]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	6899      	ldr	r1, [r3, #8]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f000 f974 	bl	800bc1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689a      	ldr	r2, [r3, #8]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b942:	609a      	str	r2, [r3, #8]
      break;
 800b944:	e03c      	b.n	800b9c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6818      	ldr	r0, [r3, #0]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	6859      	ldr	r1, [r3, #4]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	461a      	mov	r2, r3
 800b954:	f000 f8e4 	bl	800bb20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2150      	movs	r1, #80	; 0x50
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 f93e 	bl	800bbe0 <TIM_ITRx_SetConfig>
      break;
 800b964:	e02c      	b.n	800b9c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	6859      	ldr	r1, [r3, #4]
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	461a      	mov	r2, r3
 800b974:	f000 f903 	bl	800bb7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2160      	movs	r1, #96	; 0x60
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 f92e 	bl	800bbe0 <TIM_ITRx_SetConfig>
      break;
 800b984:	e01c      	b.n	800b9c0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6818      	ldr	r0, [r3, #0]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	6859      	ldr	r1, [r3, #4]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	461a      	mov	r2, r3
 800b994:	f000 f8c4 	bl	800bb20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2140      	movs	r1, #64	; 0x40
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f91e 	bl	800bbe0 <TIM_ITRx_SetConfig>
      break;
 800b9a4:	e00c      	b.n	800b9c0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	f000 f915 	bl	800bbe0 <TIM_ITRx_SetConfig>
      break;
 800b9b6:	e003      	b.n	800b9c0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b9bc:	e000      	b.n	800b9c0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b9be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	ffceff88 	.word	0xffceff88
 800b9e0:	00100040 	.word	0x00100040
 800b9e4:	00100030 	.word	0x00100030
 800b9e8:	00100020 	.word	0x00100020

0800b9ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a40      	ldr	r2, [pc, #256]	; (800bb00 <TIM_Base_SetConfig+0x114>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d013      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba0a:	d00f      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a3d      	ldr	r2, [pc, #244]	; (800bb04 <TIM_Base_SetConfig+0x118>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d00b      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a3c      	ldr	r2, [pc, #240]	; (800bb08 <TIM_Base_SetConfig+0x11c>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d007      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a3b      	ldr	r2, [pc, #236]	; (800bb0c <TIM_Base_SetConfig+0x120>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d003      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4a3a      	ldr	r2, [pc, #232]	; (800bb10 <TIM_Base_SetConfig+0x124>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d108      	bne.n	800ba3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a2f      	ldr	r2, [pc, #188]	; (800bb00 <TIM_Base_SetConfig+0x114>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d01f      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba4c:	d01b      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a2c      	ldr	r2, [pc, #176]	; (800bb04 <TIM_Base_SetConfig+0x118>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d017      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a2b      	ldr	r2, [pc, #172]	; (800bb08 <TIM_Base_SetConfig+0x11c>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d013      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a2a      	ldr	r2, [pc, #168]	; (800bb0c <TIM_Base_SetConfig+0x120>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d00f      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a29      	ldr	r2, [pc, #164]	; (800bb10 <TIM_Base_SetConfig+0x124>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d00b      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a28      	ldr	r2, [pc, #160]	; (800bb14 <TIM_Base_SetConfig+0x128>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d007      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a27      	ldr	r2, [pc, #156]	; (800bb18 <TIM_Base_SetConfig+0x12c>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d003      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a26      	ldr	r2, [pc, #152]	; (800bb1c <TIM_Base_SetConfig+0x130>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d108      	bne.n	800ba98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	689a      	ldr	r2, [r3, #8]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a10      	ldr	r2, [pc, #64]	; (800bb00 <TIM_Base_SetConfig+0x114>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d00f      	beq.n	800bae4 <TIM_Base_SetConfig+0xf8>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a12      	ldr	r2, [pc, #72]	; (800bb10 <TIM_Base_SetConfig+0x124>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d00b      	beq.n	800bae4 <TIM_Base_SetConfig+0xf8>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a11      	ldr	r2, [pc, #68]	; (800bb14 <TIM_Base_SetConfig+0x128>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d007      	beq.n	800bae4 <TIM_Base_SetConfig+0xf8>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a10      	ldr	r2, [pc, #64]	; (800bb18 <TIM_Base_SetConfig+0x12c>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d003      	beq.n	800bae4 <TIM_Base_SetConfig+0xf8>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a0f      	ldr	r2, [pc, #60]	; (800bb1c <TIM_Base_SetConfig+0x130>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d103      	bne.n	800baec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	691a      	ldr	r2, [r3, #16]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	615a      	str	r2, [r3, #20]
}
 800baf2:	bf00      	nop
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	40010000 	.word	0x40010000
 800bb04:	40000400 	.word	0x40000400
 800bb08:	40000800 	.word	0x40000800
 800bb0c:	40000c00 	.word	0x40000c00
 800bb10:	40010400 	.word	0x40010400
 800bb14:	40014000 	.word	0x40014000
 800bb18:	40014400 	.word	0x40014400
 800bb1c:	40014800 	.word	0x40014800

0800bb20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b087      	sub	sp, #28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6a1b      	ldr	r3, [r3, #32]
 800bb30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	f023 0201 	bic.w	r2, r3, #1
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	011b      	lsls	r3, r3, #4
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f023 030a 	bic.w	r3, r3, #10
 800bb5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	693a      	ldr	r2, [r7, #16]
 800bb6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	621a      	str	r2, [r3, #32]
}
 800bb72:	bf00      	nop
 800bb74:	371c      	adds	r7, #28
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b087      	sub	sp, #28
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	60f8      	str	r0, [r7, #12]
 800bb86:	60b9      	str	r1, [r7, #8]
 800bb88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	f023 0210 	bic.w	r2, r3, #16
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6a1b      	ldr	r3, [r3, #32]
 800bba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	031b      	lsls	r3, r3, #12
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bbba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	011b      	lsls	r3, r3, #4
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	697a      	ldr	r2, [r7, #20]
 800bbca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	621a      	str	r2, [r3, #32]
}
 800bbd2:	bf00      	nop
 800bbd4:	371c      	adds	r7, #28
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	4b09      	ldr	r3, [pc, #36]	; (800bc18 <TIM_ITRx_SetConfig+0x38>)
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f043 0307 	orr.w	r3, r3, #7
 800bc02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	609a      	str	r2, [r3, #8]
}
 800bc0a:	bf00      	nop
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	ffcfff8f 	.word	0xffcfff8f

0800bc1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	021a      	lsls	r2, r3, #8
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	697a      	ldr	r2, [r7, #20]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	609a      	str	r2, [r3, #8]
}
 800bc50:	bf00      	nop
 800bc52:	371c      	adds	r7, #28
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d101      	bne.n	800bc74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc70:	2302      	movs	r3, #2
 800bc72:	e06d      	b.n	800bd50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a30      	ldr	r2, [pc, #192]	; (800bd5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d004      	beq.n	800bca8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a2f      	ldr	r2, [pc, #188]	; (800bd60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d108      	bne.n	800bcba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bcae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a20      	ldr	r2, [pc, #128]	; (800bd5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d022      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bce6:	d01d      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d018      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a1c      	ldr	r2, [pc, #112]	; (800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d013      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a1a      	ldr	r2, [pc, #104]	; (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d00e      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a15      	ldr	r2, [pc, #84]	; (800bd60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d009      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a16      	ldr	r2, [pc, #88]	; (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d004      	beq.n	800bd24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a15      	ldr	r2, [pc, #84]	; (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d10c      	bne.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	40010000 	.word	0x40010000
 800bd60:	40010400 	.word	0x40010400
 800bd64:	40000400 	.word	0x40000400
 800bd68:	40000800 	.word	0x40000800
 800bd6c:	40000c00 	.word	0x40000c00
 800bd70:	40001800 	.word	0x40001800
 800bd74:	40014000 	.word	0x40014000

0800bd78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e042      	b.n	800be10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d106      	bne.n	800bda2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7f6 fd3b 	bl	8002818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2224      	movs	r2, #36	; 0x24
 800bda6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f022 0201 	bic.w	r2, r2, #1
 800bdb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f8ba 	bl	800bf34 <UART_SetConfig>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d101      	bne.n	800bdca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e022      	b.n	800be10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fe16 	bl	800ca04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bde6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689a      	ldr	r2, [r3, #8]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f042 0201 	orr.w	r2, r2, #1
 800be06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fe9d 	bl	800cb48 <UART_CheckIdleState>
 800be0e:	4603      	mov	r3, r0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08a      	sub	sp, #40	; 0x28
 800be1c:	af02      	add	r7, sp, #8
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	603b      	str	r3, [r7, #0]
 800be24:	4613      	mov	r3, r2
 800be26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be2e:	2b20      	cmp	r3, #32
 800be30:	d17b      	bne.n	800bf2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d002      	beq.n	800be3e <HAL_UART_Transmit+0x26>
 800be38:	88fb      	ldrh	r3, [r7, #6]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d101      	bne.n	800be42 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	e074      	b.n	800bf2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2200      	movs	r2, #0
 800be46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2221      	movs	r2, #33	; 0x21
 800be4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be52:	f7f6 ffb3 	bl	8002dbc <HAL_GetTick>
 800be56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	88fa      	ldrh	r2, [r7, #6]
 800be5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	88fa      	ldrh	r2, [r7, #6]
 800be64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be70:	d108      	bne.n	800be84 <HAL_UART_Transmit+0x6c>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d104      	bne.n	800be84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	61bb      	str	r3, [r7, #24]
 800be82:	e003      	b.n	800be8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be88:	2300      	movs	r3, #0
 800be8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800be8c:	e030      	b.n	800bef0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	2200      	movs	r2, #0
 800be96:	2180      	movs	r1, #128	; 0x80
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f000 feff 	bl	800cc9c <UART_WaitOnFlagUntilTimeout>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2220      	movs	r2, #32
 800bea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e03d      	b.n	800bf2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10b      	bne.n	800bece <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bec4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	3302      	adds	r3, #2
 800beca:	61bb      	str	r3, [r7, #24]
 800becc:	e007      	b.n	800bede <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	781a      	ldrb	r2, [r3, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	3301      	adds	r3, #1
 800bedc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	3b01      	subs	r3, #1
 800bee8:	b29a      	uxth	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1c8      	bne.n	800be8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2200      	movs	r2, #0
 800bf04:	2140      	movs	r1, #64	; 0x40
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 fec8 	bl	800cc9c <UART_WaitOnFlagUntilTimeout>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d005      	beq.n	800bf1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2220      	movs	r2, #32
 800bf16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e006      	b.n	800bf2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2220      	movs	r2, #32
 800bf22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	e000      	b.n	800bf2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bf2a:	2302      	movs	r3, #2
  }
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3720      	adds	r7, #32
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf38:	b092      	sub	sp, #72	; 0x48
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	431a      	orrs	r2, r3
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	431a      	orrs	r2, r3
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	69db      	ldr	r3, [r3, #28]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	4bbe      	ldr	r3, [pc, #760]	; (800c25c <UART_SetConfig+0x328>)
 800bf64:	4013      	ands	r3, r2
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	6812      	ldr	r2, [r2, #0]
 800bf6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf6c:	430b      	orrs	r3, r1
 800bf6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4ab3      	ldr	r2, [pc, #716]	; (800c260 <UART_SetConfig+0x32c>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d004      	beq.n	800bfa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	4baf      	ldr	r3, [pc, #700]	; (800c264 <UART_SetConfig+0x330>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	6812      	ldr	r2, [r2, #0]
 800bfae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfb0:	430b      	orrs	r3, r1
 800bfb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	f023 010f 	bic.w	r1, r3, #15
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	430a      	orrs	r2, r1
 800bfc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4aa6      	ldr	r2, [pc, #664]	; (800c268 <UART_SetConfig+0x334>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d177      	bne.n	800c0c4 <UART_SetConfig+0x190>
 800bfd4:	4ba5      	ldr	r3, [pc, #660]	; (800c26c <UART_SetConfig+0x338>)
 800bfd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bfdc:	2b28      	cmp	r3, #40	; 0x28
 800bfde:	d86d      	bhi.n	800c0bc <UART_SetConfig+0x188>
 800bfe0:	a201      	add	r2, pc, #4	; (adr r2, 800bfe8 <UART_SetConfig+0xb4>)
 800bfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe6:	bf00      	nop
 800bfe8:	0800c08d 	.word	0x0800c08d
 800bfec:	0800c0bd 	.word	0x0800c0bd
 800bff0:	0800c0bd 	.word	0x0800c0bd
 800bff4:	0800c0bd 	.word	0x0800c0bd
 800bff8:	0800c0bd 	.word	0x0800c0bd
 800bffc:	0800c0bd 	.word	0x0800c0bd
 800c000:	0800c0bd 	.word	0x0800c0bd
 800c004:	0800c0bd 	.word	0x0800c0bd
 800c008:	0800c095 	.word	0x0800c095
 800c00c:	0800c0bd 	.word	0x0800c0bd
 800c010:	0800c0bd 	.word	0x0800c0bd
 800c014:	0800c0bd 	.word	0x0800c0bd
 800c018:	0800c0bd 	.word	0x0800c0bd
 800c01c:	0800c0bd 	.word	0x0800c0bd
 800c020:	0800c0bd 	.word	0x0800c0bd
 800c024:	0800c0bd 	.word	0x0800c0bd
 800c028:	0800c09d 	.word	0x0800c09d
 800c02c:	0800c0bd 	.word	0x0800c0bd
 800c030:	0800c0bd 	.word	0x0800c0bd
 800c034:	0800c0bd 	.word	0x0800c0bd
 800c038:	0800c0bd 	.word	0x0800c0bd
 800c03c:	0800c0bd 	.word	0x0800c0bd
 800c040:	0800c0bd 	.word	0x0800c0bd
 800c044:	0800c0bd 	.word	0x0800c0bd
 800c048:	0800c0a5 	.word	0x0800c0a5
 800c04c:	0800c0bd 	.word	0x0800c0bd
 800c050:	0800c0bd 	.word	0x0800c0bd
 800c054:	0800c0bd 	.word	0x0800c0bd
 800c058:	0800c0bd 	.word	0x0800c0bd
 800c05c:	0800c0bd 	.word	0x0800c0bd
 800c060:	0800c0bd 	.word	0x0800c0bd
 800c064:	0800c0bd 	.word	0x0800c0bd
 800c068:	0800c0ad 	.word	0x0800c0ad
 800c06c:	0800c0bd 	.word	0x0800c0bd
 800c070:	0800c0bd 	.word	0x0800c0bd
 800c074:	0800c0bd 	.word	0x0800c0bd
 800c078:	0800c0bd 	.word	0x0800c0bd
 800c07c:	0800c0bd 	.word	0x0800c0bd
 800c080:	0800c0bd 	.word	0x0800c0bd
 800c084:	0800c0bd 	.word	0x0800c0bd
 800c088:	0800c0b5 	.word	0x0800c0b5
 800c08c:	2301      	movs	r3, #1
 800c08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c092:	e222      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c094:	2304      	movs	r3, #4
 800c096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c09a:	e21e      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c09c:	2308      	movs	r3, #8
 800c09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0a2:	e21a      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c0a4:	2310      	movs	r3, #16
 800c0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0aa:	e216      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c0ac:	2320      	movs	r3, #32
 800c0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0b2:	e212      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c0b4:	2340      	movs	r3, #64	; 0x40
 800c0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ba:	e20e      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c0bc:	2380      	movs	r3, #128	; 0x80
 800c0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c2:	e20a      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a69      	ldr	r2, [pc, #420]	; (800c270 <UART_SetConfig+0x33c>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d130      	bne.n	800c130 <UART_SetConfig+0x1fc>
 800c0ce:	4b67      	ldr	r3, [pc, #412]	; (800c26c <UART_SetConfig+0x338>)
 800c0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d2:	f003 0307 	and.w	r3, r3, #7
 800c0d6:	2b05      	cmp	r3, #5
 800c0d8:	d826      	bhi.n	800c128 <UART_SetConfig+0x1f4>
 800c0da:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <UART_SetConfig+0x1ac>)
 800c0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e0:	0800c0f9 	.word	0x0800c0f9
 800c0e4:	0800c101 	.word	0x0800c101
 800c0e8:	0800c109 	.word	0x0800c109
 800c0ec:	0800c111 	.word	0x0800c111
 800c0f0:	0800c119 	.word	0x0800c119
 800c0f4:	0800c121 	.word	0x0800c121
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fe:	e1ec      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c100:	2304      	movs	r3, #4
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c106:	e1e8      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c108:	2308      	movs	r3, #8
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10e:	e1e4      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c110:	2310      	movs	r3, #16
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c116:	e1e0      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c118:	2320      	movs	r3, #32
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11e:	e1dc      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c120:	2340      	movs	r3, #64	; 0x40
 800c122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c126:	e1d8      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c128:	2380      	movs	r3, #128	; 0x80
 800c12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12e:	e1d4      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a4f      	ldr	r2, [pc, #316]	; (800c274 <UART_SetConfig+0x340>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d130      	bne.n	800c19c <UART_SetConfig+0x268>
 800c13a:	4b4c      	ldr	r3, [pc, #304]	; (800c26c <UART_SetConfig+0x338>)
 800c13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c13e:	f003 0307 	and.w	r3, r3, #7
 800c142:	2b05      	cmp	r3, #5
 800c144:	d826      	bhi.n	800c194 <UART_SetConfig+0x260>
 800c146:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <UART_SetConfig+0x218>)
 800c148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14c:	0800c165 	.word	0x0800c165
 800c150:	0800c16d 	.word	0x0800c16d
 800c154:	0800c175 	.word	0x0800c175
 800c158:	0800c17d 	.word	0x0800c17d
 800c15c:	0800c185 	.word	0x0800c185
 800c160:	0800c18d 	.word	0x0800c18d
 800c164:	2300      	movs	r3, #0
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e1b6      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c16c:	2304      	movs	r3, #4
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c172:	e1b2      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c174:	2308      	movs	r3, #8
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17a:	e1ae      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c17c:	2310      	movs	r3, #16
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c182:	e1aa      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c184:	2320      	movs	r3, #32
 800c186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18a:	e1a6      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c18c:	2340      	movs	r3, #64	; 0x40
 800c18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c192:	e1a2      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c194:	2380      	movs	r3, #128	; 0x80
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19a:	e19e      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a35      	ldr	r2, [pc, #212]	; (800c278 <UART_SetConfig+0x344>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d130      	bne.n	800c208 <UART_SetConfig+0x2d4>
 800c1a6:	4b31      	ldr	r3, [pc, #196]	; (800c26c <UART_SetConfig+0x338>)
 800c1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1aa:	f003 0307 	and.w	r3, r3, #7
 800c1ae:	2b05      	cmp	r3, #5
 800c1b0:	d826      	bhi.n	800c200 <UART_SetConfig+0x2cc>
 800c1b2:	a201      	add	r2, pc, #4	; (adr r2, 800c1b8 <UART_SetConfig+0x284>)
 800c1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b8:	0800c1d1 	.word	0x0800c1d1
 800c1bc:	0800c1d9 	.word	0x0800c1d9
 800c1c0:	0800c1e1 	.word	0x0800c1e1
 800c1c4:	0800c1e9 	.word	0x0800c1e9
 800c1c8:	0800c1f1 	.word	0x0800c1f1
 800c1cc:	0800c1f9 	.word	0x0800c1f9
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d6:	e180      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c1d8:	2304      	movs	r3, #4
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1de:	e17c      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c1e0:	2308      	movs	r3, #8
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e6:	e178      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c1e8:	2310      	movs	r3, #16
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ee:	e174      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c1f0:	2320      	movs	r3, #32
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f6:	e170      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c1f8:	2340      	movs	r3, #64	; 0x40
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fe:	e16c      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c200:	2380      	movs	r3, #128	; 0x80
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c206:	e168      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a1b      	ldr	r2, [pc, #108]	; (800c27c <UART_SetConfig+0x348>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d142      	bne.n	800c298 <UART_SetConfig+0x364>
 800c212:	4b16      	ldr	r3, [pc, #88]	; (800c26c <UART_SetConfig+0x338>)
 800c214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c216:	f003 0307 	and.w	r3, r3, #7
 800c21a:	2b05      	cmp	r3, #5
 800c21c:	d838      	bhi.n	800c290 <UART_SetConfig+0x35c>
 800c21e:	a201      	add	r2, pc, #4	; (adr r2, 800c224 <UART_SetConfig+0x2f0>)
 800c220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c224:	0800c23d 	.word	0x0800c23d
 800c228:	0800c245 	.word	0x0800c245
 800c22c:	0800c24d 	.word	0x0800c24d
 800c230:	0800c255 	.word	0x0800c255
 800c234:	0800c281 	.word	0x0800c281
 800c238:	0800c289 	.word	0x0800c289
 800c23c:	2300      	movs	r3, #0
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c242:	e14a      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c244:	2304      	movs	r3, #4
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24a:	e146      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c24c:	2308      	movs	r3, #8
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c252:	e142      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c254:	2310      	movs	r3, #16
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e13e      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c25c:	cfff69f3 	.word	0xcfff69f3
 800c260:	58000c00 	.word	0x58000c00
 800c264:	11fff4ff 	.word	0x11fff4ff
 800c268:	40011000 	.word	0x40011000
 800c26c:	58024400 	.word	0x58024400
 800c270:	40004400 	.word	0x40004400
 800c274:	40004800 	.word	0x40004800
 800c278:	40004c00 	.word	0x40004c00
 800c27c:	40005000 	.word	0x40005000
 800c280:	2320      	movs	r3, #32
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e128      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c288:	2340      	movs	r3, #64	; 0x40
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28e:	e124      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c290:	2380      	movs	r3, #128	; 0x80
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c296:	e120      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4acb      	ldr	r2, [pc, #812]	; (800c5cc <UART_SetConfig+0x698>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d176      	bne.n	800c390 <UART_SetConfig+0x45c>
 800c2a2:	4bcb      	ldr	r3, [pc, #812]	; (800c5d0 <UART_SetConfig+0x69c>)
 800c2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2aa:	2b28      	cmp	r3, #40	; 0x28
 800c2ac:	d86c      	bhi.n	800c388 <UART_SetConfig+0x454>
 800c2ae:	a201      	add	r2, pc, #4	; (adr r2, 800c2b4 <UART_SetConfig+0x380>)
 800c2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b4:	0800c359 	.word	0x0800c359
 800c2b8:	0800c389 	.word	0x0800c389
 800c2bc:	0800c389 	.word	0x0800c389
 800c2c0:	0800c389 	.word	0x0800c389
 800c2c4:	0800c389 	.word	0x0800c389
 800c2c8:	0800c389 	.word	0x0800c389
 800c2cc:	0800c389 	.word	0x0800c389
 800c2d0:	0800c389 	.word	0x0800c389
 800c2d4:	0800c361 	.word	0x0800c361
 800c2d8:	0800c389 	.word	0x0800c389
 800c2dc:	0800c389 	.word	0x0800c389
 800c2e0:	0800c389 	.word	0x0800c389
 800c2e4:	0800c389 	.word	0x0800c389
 800c2e8:	0800c389 	.word	0x0800c389
 800c2ec:	0800c389 	.word	0x0800c389
 800c2f0:	0800c389 	.word	0x0800c389
 800c2f4:	0800c369 	.word	0x0800c369
 800c2f8:	0800c389 	.word	0x0800c389
 800c2fc:	0800c389 	.word	0x0800c389
 800c300:	0800c389 	.word	0x0800c389
 800c304:	0800c389 	.word	0x0800c389
 800c308:	0800c389 	.word	0x0800c389
 800c30c:	0800c389 	.word	0x0800c389
 800c310:	0800c389 	.word	0x0800c389
 800c314:	0800c371 	.word	0x0800c371
 800c318:	0800c389 	.word	0x0800c389
 800c31c:	0800c389 	.word	0x0800c389
 800c320:	0800c389 	.word	0x0800c389
 800c324:	0800c389 	.word	0x0800c389
 800c328:	0800c389 	.word	0x0800c389
 800c32c:	0800c389 	.word	0x0800c389
 800c330:	0800c389 	.word	0x0800c389
 800c334:	0800c379 	.word	0x0800c379
 800c338:	0800c389 	.word	0x0800c389
 800c33c:	0800c389 	.word	0x0800c389
 800c340:	0800c389 	.word	0x0800c389
 800c344:	0800c389 	.word	0x0800c389
 800c348:	0800c389 	.word	0x0800c389
 800c34c:	0800c389 	.word	0x0800c389
 800c350:	0800c389 	.word	0x0800c389
 800c354:	0800c381 	.word	0x0800c381
 800c358:	2301      	movs	r3, #1
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35e:	e0bc      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c360:	2304      	movs	r3, #4
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c366:	e0b8      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c368:	2308      	movs	r3, #8
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36e:	e0b4      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c370:	2310      	movs	r3, #16
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c376:	e0b0      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c378:	2320      	movs	r3, #32
 800c37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37e:	e0ac      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c380:	2340      	movs	r3, #64	; 0x40
 800c382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c386:	e0a8      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c388:	2380      	movs	r3, #128	; 0x80
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38e:	e0a4      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a8f      	ldr	r2, [pc, #572]	; (800c5d4 <UART_SetConfig+0x6a0>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d130      	bne.n	800c3fc <UART_SetConfig+0x4c8>
 800c39a:	4b8d      	ldr	r3, [pc, #564]	; (800c5d0 <UART_SetConfig+0x69c>)
 800c39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c39e:	f003 0307 	and.w	r3, r3, #7
 800c3a2:	2b05      	cmp	r3, #5
 800c3a4:	d826      	bhi.n	800c3f4 <UART_SetConfig+0x4c0>
 800c3a6:	a201      	add	r2, pc, #4	; (adr r2, 800c3ac <UART_SetConfig+0x478>)
 800c3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ac:	0800c3c5 	.word	0x0800c3c5
 800c3b0:	0800c3cd 	.word	0x0800c3cd
 800c3b4:	0800c3d5 	.word	0x0800c3d5
 800c3b8:	0800c3dd 	.word	0x0800c3dd
 800c3bc:	0800c3e5 	.word	0x0800c3e5
 800c3c0:	0800c3ed 	.word	0x0800c3ed
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ca:	e086      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c3cc:	2304      	movs	r3, #4
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d2:	e082      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c3d4:	2308      	movs	r3, #8
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3da:	e07e      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c3dc:	2310      	movs	r3, #16
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e2:	e07a      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c3e4:	2320      	movs	r3, #32
 800c3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ea:	e076      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c3ec:	2340      	movs	r3, #64	; 0x40
 800c3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f2:	e072      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c3f4:	2380      	movs	r3, #128	; 0x80
 800c3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3fa:	e06e      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a75      	ldr	r2, [pc, #468]	; (800c5d8 <UART_SetConfig+0x6a4>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d130      	bne.n	800c468 <UART_SetConfig+0x534>
 800c406:	4b72      	ldr	r3, [pc, #456]	; (800c5d0 <UART_SetConfig+0x69c>)
 800c408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c40a:	f003 0307 	and.w	r3, r3, #7
 800c40e:	2b05      	cmp	r3, #5
 800c410:	d826      	bhi.n	800c460 <UART_SetConfig+0x52c>
 800c412:	a201      	add	r2, pc, #4	; (adr r2, 800c418 <UART_SetConfig+0x4e4>)
 800c414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c418:	0800c431 	.word	0x0800c431
 800c41c:	0800c439 	.word	0x0800c439
 800c420:	0800c441 	.word	0x0800c441
 800c424:	0800c449 	.word	0x0800c449
 800c428:	0800c451 	.word	0x0800c451
 800c42c:	0800c459 	.word	0x0800c459
 800c430:	2300      	movs	r3, #0
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c436:	e050      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c438:	2304      	movs	r3, #4
 800c43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43e:	e04c      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c440:	2308      	movs	r3, #8
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c446:	e048      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c448:	2310      	movs	r3, #16
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44e:	e044      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c450:	2320      	movs	r3, #32
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c456:	e040      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c458:	2340      	movs	r3, #64	; 0x40
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45e:	e03c      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c460:	2380      	movs	r3, #128	; 0x80
 800c462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c466:	e038      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a5b      	ldr	r2, [pc, #364]	; (800c5dc <UART_SetConfig+0x6a8>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d130      	bne.n	800c4d4 <UART_SetConfig+0x5a0>
 800c472:	4b57      	ldr	r3, [pc, #348]	; (800c5d0 <UART_SetConfig+0x69c>)
 800c474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c476:	f003 0307 	and.w	r3, r3, #7
 800c47a:	2b05      	cmp	r3, #5
 800c47c:	d826      	bhi.n	800c4cc <UART_SetConfig+0x598>
 800c47e:	a201      	add	r2, pc, #4	; (adr r2, 800c484 <UART_SetConfig+0x550>)
 800c480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c484:	0800c49d 	.word	0x0800c49d
 800c488:	0800c4a5 	.word	0x0800c4a5
 800c48c:	0800c4ad 	.word	0x0800c4ad
 800c490:	0800c4b5 	.word	0x0800c4b5
 800c494:	0800c4bd 	.word	0x0800c4bd
 800c498:	0800c4c5 	.word	0x0800c4c5
 800c49c:	2302      	movs	r3, #2
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a2:	e01a      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c4a4:	2304      	movs	r3, #4
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4aa:	e016      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c4ac:	2308      	movs	r3, #8
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b2:	e012      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c4b4:	2310      	movs	r3, #16
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ba:	e00e      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c4bc:	2320      	movs	r3, #32
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c2:	e00a      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c4c4:	2340      	movs	r3, #64	; 0x40
 800c4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ca:	e006      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c4cc:	2380      	movs	r3, #128	; 0x80
 800c4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d2:	e002      	b.n	800c4da <UART_SetConfig+0x5a6>
 800c4d4:	2380      	movs	r3, #128	; 0x80
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a3f      	ldr	r2, [pc, #252]	; (800c5dc <UART_SetConfig+0x6a8>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	f040 80f8 	bne.w	800c6d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c4ea:	2b20      	cmp	r3, #32
 800c4ec:	dc46      	bgt.n	800c57c <UART_SetConfig+0x648>
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	f2c0 8082 	blt.w	800c5f8 <UART_SetConfig+0x6c4>
 800c4f4:	3b02      	subs	r3, #2
 800c4f6:	2b1e      	cmp	r3, #30
 800c4f8:	d87e      	bhi.n	800c5f8 <UART_SetConfig+0x6c4>
 800c4fa:	a201      	add	r2, pc, #4	; (adr r2, 800c500 <UART_SetConfig+0x5cc>)
 800c4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c500:	0800c583 	.word	0x0800c583
 800c504:	0800c5f9 	.word	0x0800c5f9
 800c508:	0800c58b 	.word	0x0800c58b
 800c50c:	0800c5f9 	.word	0x0800c5f9
 800c510:	0800c5f9 	.word	0x0800c5f9
 800c514:	0800c5f9 	.word	0x0800c5f9
 800c518:	0800c59b 	.word	0x0800c59b
 800c51c:	0800c5f9 	.word	0x0800c5f9
 800c520:	0800c5f9 	.word	0x0800c5f9
 800c524:	0800c5f9 	.word	0x0800c5f9
 800c528:	0800c5f9 	.word	0x0800c5f9
 800c52c:	0800c5f9 	.word	0x0800c5f9
 800c530:	0800c5f9 	.word	0x0800c5f9
 800c534:	0800c5f9 	.word	0x0800c5f9
 800c538:	0800c5ab 	.word	0x0800c5ab
 800c53c:	0800c5f9 	.word	0x0800c5f9
 800c540:	0800c5f9 	.word	0x0800c5f9
 800c544:	0800c5f9 	.word	0x0800c5f9
 800c548:	0800c5f9 	.word	0x0800c5f9
 800c54c:	0800c5f9 	.word	0x0800c5f9
 800c550:	0800c5f9 	.word	0x0800c5f9
 800c554:	0800c5f9 	.word	0x0800c5f9
 800c558:	0800c5f9 	.word	0x0800c5f9
 800c55c:	0800c5f9 	.word	0x0800c5f9
 800c560:	0800c5f9 	.word	0x0800c5f9
 800c564:	0800c5f9 	.word	0x0800c5f9
 800c568:	0800c5f9 	.word	0x0800c5f9
 800c56c:	0800c5f9 	.word	0x0800c5f9
 800c570:	0800c5f9 	.word	0x0800c5f9
 800c574:	0800c5f9 	.word	0x0800c5f9
 800c578:	0800c5eb 	.word	0x0800c5eb
 800c57c:	2b40      	cmp	r3, #64	; 0x40
 800c57e:	d037      	beq.n	800c5f0 <UART_SetConfig+0x6bc>
 800c580:	e03a      	b.n	800c5f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c582:	f7fe fb19 	bl	800abb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c588:	e03c      	b.n	800c604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c58a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe fb28 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c598:	e034      	b.n	800c604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c59a:	f107 0318 	add.w	r3, r7, #24
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fe fc74 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a8:	e02c      	b.n	800c604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5aa:	4b09      	ldr	r3, [pc, #36]	; (800c5d0 <UART_SetConfig+0x69c>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 0320 	and.w	r3, r3, #32
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d016      	beq.n	800c5e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5b6:	4b06      	ldr	r3, [pc, #24]	; (800c5d0 <UART_SetConfig+0x69c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	08db      	lsrs	r3, r3, #3
 800c5bc:	f003 0303 	and.w	r3, r3, #3
 800c5c0:	4a07      	ldr	r2, [pc, #28]	; (800c5e0 <UART_SetConfig+0x6ac>)
 800c5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5c8:	e01c      	b.n	800c604 <UART_SetConfig+0x6d0>
 800c5ca:	bf00      	nop
 800c5cc:	40011400 	.word	0x40011400
 800c5d0:	58024400 	.word	0x58024400
 800c5d4:	40007800 	.word	0x40007800
 800c5d8:	40007c00 	.word	0x40007c00
 800c5dc:	58000c00 	.word	0x58000c00
 800c5e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c5e4:	4b9d      	ldr	r3, [pc, #628]	; (800c85c <UART_SetConfig+0x928>)
 800c5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e8:	e00c      	b.n	800c604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5ea:	4b9d      	ldr	r3, [pc, #628]	; (800c860 <UART_SetConfig+0x92c>)
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ee:	e009      	b.n	800c604 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f6:	e005      	b.n	800c604 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c602:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 81de 	beq.w	800c9c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c610:	4a94      	ldr	r2, [pc, #592]	; (800c864 <UART_SetConfig+0x930>)
 800c612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c616:	461a      	mov	r2, r3
 800c618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c61a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c61e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	685a      	ldr	r2, [r3, #4]
 800c624:	4613      	mov	r3, r2
 800c626:	005b      	lsls	r3, r3, #1
 800c628:	4413      	add	r3, r2
 800c62a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d305      	bcc.n	800c63c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c638:	429a      	cmp	r2, r3
 800c63a:	d903      	bls.n	800c644 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c642:	e1c1      	b.n	800c9c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c646:	2200      	movs	r2, #0
 800c648:	60bb      	str	r3, [r7, #8]
 800c64a:	60fa      	str	r2, [r7, #12]
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c650:	4a84      	ldr	r2, [pc, #528]	; (800c864 <UART_SetConfig+0x930>)
 800c652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c656:	b29b      	uxth	r3, r3
 800c658:	2200      	movs	r2, #0
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	607a      	str	r2, [r7, #4]
 800c65e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c666:	f7f4 fc4b 	bl	8000f00 <__aeabi_uldivmod>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	4610      	mov	r0, r2
 800c670:	4619      	mov	r1, r3
 800c672:	f04f 0200 	mov.w	r2, #0
 800c676:	f04f 0300 	mov.w	r3, #0
 800c67a:	020b      	lsls	r3, r1, #8
 800c67c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c680:	0202      	lsls	r2, r0, #8
 800c682:	6979      	ldr	r1, [r7, #20]
 800c684:	6849      	ldr	r1, [r1, #4]
 800c686:	0849      	lsrs	r1, r1, #1
 800c688:	2000      	movs	r0, #0
 800c68a:	460c      	mov	r4, r1
 800c68c:	4605      	mov	r5, r0
 800c68e:	eb12 0804 	adds.w	r8, r2, r4
 800c692:	eb43 0905 	adc.w	r9, r3, r5
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	469a      	mov	sl, r3
 800c69e:	4693      	mov	fp, r2
 800c6a0:	4652      	mov	r2, sl
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	4640      	mov	r0, r8
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	f7f4 fc2a 	bl	8000f00 <__aeabi_uldivmod>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6ba:	d308      	bcc.n	800c6ce <UART_SetConfig+0x79a>
 800c6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6c2:	d204      	bcs.n	800c6ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ca:	60da      	str	r2, [r3, #12]
 800c6cc:	e17c      	b.n	800c9c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c6d4:	e178      	b.n	800c9c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	69db      	ldr	r3, [r3, #28]
 800c6da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6de:	f040 80c5 	bne.w	800c86c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c6e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c6e6:	2b20      	cmp	r3, #32
 800c6e8:	dc48      	bgt.n	800c77c <UART_SetConfig+0x848>
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	db7b      	blt.n	800c7e6 <UART_SetConfig+0x8b2>
 800c6ee:	2b20      	cmp	r3, #32
 800c6f0:	d879      	bhi.n	800c7e6 <UART_SetConfig+0x8b2>
 800c6f2:	a201      	add	r2, pc, #4	; (adr r2, 800c6f8 <UART_SetConfig+0x7c4>)
 800c6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f8:	0800c783 	.word	0x0800c783
 800c6fc:	0800c78b 	.word	0x0800c78b
 800c700:	0800c7e7 	.word	0x0800c7e7
 800c704:	0800c7e7 	.word	0x0800c7e7
 800c708:	0800c793 	.word	0x0800c793
 800c70c:	0800c7e7 	.word	0x0800c7e7
 800c710:	0800c7e7 	.word	0x0800c7e7
 800c714:	0800c7e7 	.word	0x0800c7e7
 800c718:	0800c7a3 	.word	0x0800c7a3
 800c71c:	0800c7e7 	.word	0x0800c7e7
 800c720:	0800c7e7 	.word	0x0800c7e7
 800c724:	0800c7e7 	.word	0x0800c7e7
 800c728:	0800c7e7 	.word	0x0800c7e7
 800c72c:	0800c7e7 	.word	0x0800c7e7
 800c730:	0800c7e7 	.word	0x0800c7e7
 800c734:	0800c7e7 	.word	0x0800c7e7
 800c738:	0800c7b3 	.word	0x0800c7b3
 800c73c:	0800c7e7 	.word	0x0800c7e7
 800c740:	0800c7e7 	.word	0x0800c7e7
 800c744:	0800c7e7 	.word	0x0800c7e7
 800c748:	0800c7e7 	.word	0x0800c7e7
 800c74c:	0800c7e7 	.word	0x0800c7e7
 800c750:	0800c7e7 	.word	0x0800c7e7
 800c754:	0800c7e7 	.word	0x0800c7e7
 800c758:	0800c7e7 	.word	0x0800c7e7
 800c75c:	0800c7e7 	.word	0x0800c7e7
 800c760:	0800c7e7 	.word	0x0800c7e7
 800c764:	0800c7e7 	.word	0x0800c7e7
 800c768:	0800c7e7 	.word	0x0800c7e7
 800c76c:	0800c7e7 	.word	0x0800c7e7
 800c770:	0800c7e7 	.word	0x0800c7e7
 800c774:	0800c7e7 	.word	0x0800c7e7
 800c778:	0800c7d9 	.word	0x0800c7d9
 800c77c:	2b40      	cmp	r3, #64	; 0x40
 800c77e:	d02e      	beq.n	800c7de <UART_SetConfig+0x8aa>
 800c780:	e031      	b.n	800c7e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c782:	f7fc fa47 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 800c786:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c788:	e033      	b.n	800c7f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c78a:	f7fc fa59 	bl	8008c40 <HAL_RCC_GetPCLK2Freq>
 800c78e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c790:	e02f      	b.n	800c7f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c796:	4618      	mov	r0, r3
 800c798:	f7fe fa24 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a0:	e027      	b.n	800c7f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7a2:	f107 0318 	add.w	r3, r7, #24
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe fb70 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b0:	e01f      	b.n	800c7f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7b2:	4b2d      	ldr	r3, [pc, #180]	; (800c868 <UART_SetConfig+0x934>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f003 0320 	and.w	r3, r3, #32
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d009      	beq.n	800c7d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7be:	4b2a      	ldr	r3, [pc, #168]	; (800c868 <UART_SetConfig+0x934>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	08db      	lsrs	r3, r3, #3
 800c7c4:	f003 0303 	and.w	r3, r3, #3
 800c7c8:	4a24      	ldr	r2, [pc, #144]	; (800c85c <UART_SetConfig+0x928>)
 800c7ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7d0:	e00f      	b.n	800c7f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c7d2:	4b22      	ldr	r3, [pc, #136]	; (800c85c <UART_SetConfig+0x928>)
 800c7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d6:	e00c      	b.n	800c7f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7d8:	4b21      	ldr	r3, [pc, #132]	; (800c860 <UART_SetConfig+0x92c>)
 800c7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7dc:	e009      	b.n	800c7f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e4:	e005      	b.n	800c7f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c7f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 80e7 	beq.w	800c9c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fe:	4a19      	ldr	r2, [pc, #100]	; (800c864 <UART_SetConfig+0x930>)
 800c800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c804:	461a      	mov	r2, r3
 800c806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c808:	fbb3 f3f2 	udiv	r3, r3, r2
 800c80c:	005a      	lsls	r2, r3, #1
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	085b      	lsrs	r3, r3, #1
 800c814:	441a      	add	r2, r3
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c81e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	2b0f      	cmp	r3, #15
 800c824:	d916      	bls.n	800c854 <UART_SetConfig+0x920>
 800c826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c82c:	d212      	bcs.n	800c854 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c830:	b29b      	uxth	r3, r3
 800c832:	f023 030f 	bic.w	r3, r3, #15
 800c836:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83a:	085b      	lsrs	r3, r3, #1
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	f003 0307 	and.w	r3, r3, #7
 800c842:	b29a      	uxth	r2, r3
 800c844:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c846:	4313      	orrs	r3, r2
 800c848:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c850:	60da      	str	r2, [r3, #12]
 800c852:	e0b9      	b.n	800c9c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c85a:	e0b5      	b.n	800c9c8 <UART_SetConfig+0xa94>
 800c85c:	03d09000 	.word	0x03d09000
 800c860:	003d0900 	.word	0x003d0900
 800c864:	08010014 	.word	0x08010014
 800c868:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c86c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c870:	2b20      	cmp	r3, #32
 800c872:	dc49      	bgt.n	800c908 <UART_SetConfig+0x9d4>
 800c874:	2b00      	cmp	r3, #0
 800c876:	db7c      	blt.n	800c972 <UART_SetConfig+0xa3e>
 800c878:	2b20      	cmp	r3, #32
 800c87a:	d87a      	bhi.n	800c972 <UART_SetConfig+0xa3e>
 800c87c:	a201      	add	r2, pc, #4	; (adr r2, 800c884 <UART_SetConfig+0x950>)
 800c87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c882:	bf00      	nop
 800c884:	0800c90f 	.word	0x0800c90f
 800c888:	0800c917 	.word	0x0800c917
 800c88c:	0800c973 	.word	0x0800c973
 800c890:	0800c973 	.word	0x0800c973
 800c894:	0800c91f 	.word	0x0800c91f
 800c898:	0800c973 	.word	0x0800c973
 800c89c:	0800c973 	.word	0x0800c973
 800c8a0:	0800c973 	.word	0x0800c973
 800c8a4:	0800c92f 	.word	0x0800c92f
 800c8a8:	0800c973 	.word	0x0800c973
 800c8ac:	0800c973 	.word	0x0800c973
 800c8b0:	0800c973 	.word	0x0800c973
 800c8b4:	0800c973 	.word	0x0800c973
 800c8b8:	0800c973 	.word	0x0800c973
 800c8bc:	0800c973 	.word	0x0800c973
 800c8c0:	0800c973 	.word	0x0800c973
 800c8c4:	0800c93f 	.word	0x0800c93f
 800c8c8:	0800c973 	.word	0x0800c973
 800c8cc:	0800c973 	.word	0x0800c973
 800c8d0:	0800c973 	.word	0x0800c973
 800c8d4:	0800c973 	.word	0x0800c973
 800c8d8:	0800c973 	.word	0x0800c973
 800c8dc:	0800c973 	.word	0x0800c973
 800c8e0:	0800c973 	.word	0x0800c973
 800c8e4:	0800c973 	.word	0x0800c973
 800c8e8:	0800c973 	.word	0x0800c973
 800c8ec:	0800c973 	.word	0x0800c973
 800c8f0:	0800c973 	.word	0x0800c973
 800c8f4:	0800c973 	.word	0x0800c973
 800c8f8:	0800c973 	.word	0x0800c973
 800c8fc:	0800c973 	.word	0x0800c973
 800c900:	0800c973 	.word	0x0800c973
 800c904:	0800c965 	.word	0x0800c965
 800c908:	2b40      	cmp	r3, #64	; 0x40
 800c90a:	d02e      	beq.n	800c96a <UART_SetConfig+0xa36>
 800c90c:	e031      	b.n	800c972 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c90e:	f7fc f981 	bl	8008c14 <HAL_RCC_GetPCLK1Freq>
 800c912:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c914:	e033      	b.n	800c97e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c916:	f7fc f993 	bl	8008c40 <HAL_RCC_GetPCLK2Freq>
 800c91a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c91c:	e02f      	b.n	800c97e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c91e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe f95e 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c92c:	e027      	b.n	800c97e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c92e:	f107 0318 	add.w	r3, r7, #24
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe faaa 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c93c:	e01f      	b.n	800c97e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c93e:	4b2d      	ldr	r3, [pc, #180]	; (800c9f4 <UART_SetConfig+0xac0>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 0320 	and.w	r3, r3, #32
 800c946:	2b00      	cmp	r3, #0
 800c948:	d009      	beq.n	800c95e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c94a:	4b2a      	ldr	r3, [pc, #168]	; (800c9f4 <UART_SetConfig+0xac0>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	08db      	lsrs	r3, r3, #3
 800c950:	f003 0303 	and.w	r3, r3, #3
 800c954:	4a28      	ldr	r2, [pc, #160]	; (800c9f8 <UART_SetConfig+0xac4>)
 800c956:	fa22 f303 	lsr.w	r3, r2, r3
 800c95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c95c:	e00f      	b.n	800c97e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c95e:	4b26      	ldr	r3, [pc, #152]	; (800c9f8 <UART_SetConfig+0xac4>)
 800c960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c962:	e00c      	b.n	800c97e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c964:	4b25      	ldr	r3, [pc, #148]	; (800c9fc <UART_SetConfig+0xac8>)
 800c966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c968:	e009      	b.n	800c97e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c96a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c970:	e005      	b.n	800c97e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c972:	2300      	movs	r3, #0
 800c974:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c97c:	bf00      	nop
    }

    if (pclk != 0U)
 800c97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c980:	2b00      	cmp	r3, #0
 800c982:	d021      	beq.n	800c9c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c988:	4a1d      	ldr	r2, [pc, #116]	; (800ca00 <UART_SetConfig+0xacc>)
 800c98a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c98e:	461a      	mov	r2, r3
 800c990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c992:	fbb3 f2f2 	udiv	r2, r3, r2
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	085b      	lsrs	r3, r3, #1
 800c99c:	441a      	add	r2, r3
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9aa:	2b0f      	cmp	r3, #15
 800c9ac:	d909      	bls.n	800c9c2 <UART_SetConfig+0xa8e>
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9b4:	d205      	bcs.n	800c9c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	60da      	str	r2, [r3, #12]
 800c9c0:	e002      	b.n	800c9c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c9e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3748      	adds	r7, #72	; 0x48
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9f2:	bf00      	nop
 800c9f4:	58024400 	.word	0x58024400
 800c9f8:	03d09000 	.word	0x03d09000
 800c9fc:	003d0900 	.word	0x003d0900
 800ca00:	08010014 	.word	0x08010014

0800ca04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca10:	f003 0301 	and.w	r3, r3, #1
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00a      	beq.n	800ca2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca32:	f003 0302 	and.w	r3, r3, #2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00a      	beq.n	800ca50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	430a      	orrs	r2, r1
 800ca4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca54:	f003 0304 	and.w	r3, r3, #4
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00a      	beq.n	800ca72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	430a      	orrs	r2, r1
 800ca70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca76:	f003 0308 	and.w	r3, r3, #8
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00a      	beq.n	800ca94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	430a      	orrs	r2, r1
 800ca92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca98:	f003 0310 	and.w	r3, r3, #16
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00a      	beq.n	800cab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	430a      	orrs	r2, r1
 800cab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caba:	f003 0320 	and.w	r3, r3, #32
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d00a      	beq.n	800cad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	430a      	orrs	r2, r1
 800cad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d01a      	beq.n	800cb1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	430a      	orrs	r2, r1
 800caf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cafe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb02:	d10a      	bne.n	800cb1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	430a      	orrs	r2, r1
 800cb18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	430a      	orrs	r2, r1
 800cb3a:	605a      	str	r2, [r3, #4]
  }
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b098      	sub	sp, #96	; 0x60
 800cb4c:	af02      	add	r7, sp, #8
 800cb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb58:	f7f6 f930 	bl	8002dbc <HAL_GetTick>
 800cb5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 0308 	and.w	r3, r3, #8
 800cb68:	2b08      	cmp	r3, #8
 800cb6a:	d12f      	bne.n	800cbcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb74:	2200      	movs	r2, #0
 800cb76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 f88e 	bl	800cc9c <UART_WaitOnFlagUntilTimeout>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d022      	beq.n	800cbcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	e853 3f00 	ldrex	r3, [r3]
 800cb92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb9a:	653b      	str	r3, [r7, #80]	; 0x50
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	461a      	mov	r2, r3
 800cba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cba4:	647b      	str	r3, [r7, #68]	; 0x44
 800cba6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cbaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbac:	e841 2300 	strex	r3, r2, [r1]
 800cbb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cbb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1e6      	bne.n	800cb86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2220      	movs	r2, #32
 800cbbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbc8:	2303      	movs	r3, #3
 800cbca:	e063      	b.n	800cc94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 0304 	and.w	r3, r3, #4
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	d149      	bne.n	800cc6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 f857 	bl	800cc9c <UART_WaitOnFlagUntilTimeout>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d03c      	beq.n	800cc6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfc:	e853 3f00 	ldrex	r3, [r3]
 800cc00:	623b      	str	r3, [r7, #32]
   return(result);
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc12:	633b      	str	r3, [r7, #48]	; 0x30
 800cc14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc1a:	e841 2300 	strex	r3, r2, [r1]
 800cc1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1e6      	bne.n	800cbf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	e853 3f00 	ldrex	r3, [r3]
 800cc34:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f023 0301 	bic.w	r3, r3, #1
 800cc3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	3308      	adds	r3, #8
 800cc44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc46:	61fa      	str	r2, [r7, #28]
 800cc48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4a:	69b9      	ldr	r1, [r7, #24]
 800cc4c:	69fa      	ldr	r2, [r7, #28]
 800cc4e:	e841 2300 	strex	r3, r2, [r1]
 800cc52:	617b      	str	r3, [r7, #20]
   return(result);
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d1e5      	bne.n	800cc26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2220      	movs	r2, #32
 800cc5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e012      	b.n	800cc94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2220      	movs	r2, #32
 800cc72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2220      	movs	r2, #32
 800cc7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3758      	adds	r7, #88	; 0x58
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	603b      	str	r3, [r7, #0]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccac:	e049      	b.n	800cd42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb4:	d045      	beq.n	800cd42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccb6:	f7f6 f881 	bl	8002dbc <HAL_GetTick>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	69ba      	ldr	r2, [r7, #24]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d302      	bcc.n	800cccc <UART_WaitOnFlagUntilTimeout+0x30>
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cccc:	2303      	movs	r3, #3
 800ccce:	e048      	b.n	800cd62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f003 0304 	and.w	r3, r3, #4
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d031      	beq.n	800cd42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	69db      	ldr	r3, [r3, #28]
 800cce4:	f003 0308 	and.w	r3, r3, #8
 800cce8:	2b08      	cmp	r3, #8
 800ccea:	d110      	bne.n	800cd0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2208      	movs	r2, #8
 800ccf2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f000 f839 	bl	800cd6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2208      	movs	r2, #8
 800ccfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e029      	b.n	800cd62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	69db      	ldr	r3, [r3, #28]
 800cd14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd1c:	d111      	bne.n	800cd42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f000 f81f 	bl	800cd6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2220      	movs	r2, #32
 800cd32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	e00f      	b.n	800cd62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	69da      	ldr	r2, [r3, #28]
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	bf0c      	ite	eq
 800cd52:	2301      	moveq	r3, #1
 800cd54:	2300      	movne	r3, #0
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	79fb      	ldrb	r3, [r7, #7]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d0a6      	beq.n	800ccae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
	...

0800cd6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b095      	sub	sp, #84	; 0x54
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7c:	e853 3f00 	ldrex	r3, [r3]
 800cd80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd92:	643b      	str	r3, [r7, #64]	; 0x40
 800cd94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd9a:	e841 2300 	strex	r3, r2, [r1]
 800cd9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1e6      	bne.n	800cd74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3308      	adds	r3, #8
 800cdac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	e853 3f00 	ldrex	r3, [r3]
 800cdb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdb6:	69fa      	ldr	r2, [r7, #28]
 800cdb8:	4b1e      	ldr	r3, [pc, #120]	; (800ce34 <UART_EndRxTransfer+0xc8>)
 800cdba:	4013      	ands	r3, r2
 800cdbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdce:	e841 2300 	strex	r3, r2, [r1]
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1e5      	bne.n	800cda6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d118      	bne.n	800ce14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	e853 3f00 	ldrex	r3, [r3]
 800cdee:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f023 0310 	bic.w	r3, r3, #16
 800cdf6:	647b      	str	r3, [r7, #68]	; 0x44
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce00:	61bb      	str	r3, [r7, #24]
 800ce02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce04:	6979      	ldr	r1, [r7, #20]
 800ce06:	69ba      	ldr	r2, [r7, #24]
 800ce08:	e841 2300 	strex	r3, r2, [r1]
 800ce0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1e6      	bne.n	800cde2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2220      	movs	r2, #32
 800ce18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ce28:	bf00      	nop
 800ce2a:	3754      	adds	r7, #84	; 0x54
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr
 800ce34:	effffffe 	.word	0xeffffffe

0800ce38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d101      	bne.n	800ce4e <HAL_UARTEx_DisableFifoMode+0x16>
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	e027      	b.n	800ce9e <HAL_UARTEx_DisableFifoMode+0x66>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2224      	movs	r2, #36	; 0x24
 800ce5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f022 0201 	bic.w	r2, r2, #1
 800ce74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ce7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2220      	movs	r2, #32
 800ce90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce9c:	2300      	movs	r3, #0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3714      	adds	r7, #20
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b084      	sub	sp, #16
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d101      	bne.n	800cec2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cebe:	2302      	movs	r3, #2
 800cec0:	e02d      	b.n	800cf1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2224      	movs	r2, #36	; 0x24
 800cece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f022 0201 	bic.w	r2, r2, #1
 800cee8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	430a      	orrs	r2, r1
 800cefc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 f850 	bl	800cfa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2220      	movs	r2, #32
 800cf10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b084      	sub	sp, #16
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d101      	bne.n	800cf3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf3a:	2302      	movs	r3, #2
 800cf3c:	e02d      	b.n	800cf9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2224      	movs	r2, #36	; 0x24
 800cf4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f022 0201 	bic.w	r2, r2, #1
 800cf64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	683a      	ldr	r2, [r7, #0]
 800cf76:	430a      	orrs	r2, r1
 800cf78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f812 	bl	800cfa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2220      	movs	r2, #32
 800cf8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
	...

0800cfa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d108      	bne.n	800cfc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfc4:	e031      	b.n	800d02a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfc6:	2310      	movs	r3, #16
 800cfc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfca:	2310      	movs	r3, #16
 800cfcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	0e5b      	lsrs	r3, r3, #25
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	f003 0307 	and.w	r3, r3, #7
 800cfdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	0f5b      	lsrs	r3, r3, #29
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	f003 0307 	and.w	r3, r3, #7
 800cfec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
 800cff0:	7b3a      	ldrb	r2, [r7, #12]
 800cff2:	4911      	ldr	r1, [pc, #68]	; (800d038 <UARTEx_SetNbDataToProcess+0x94>)
 800cff4:	5c8a      	ldrb	r2, [r1, r2]
 800cff6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cffa:	7b3a      	ldrb	r2, [r7, #12]
 800cffc:	490f      	ldr	r1, [pc, #60]	; (800d03c <UARTEx_SetNbDataToProcess+0x98>)
 800cffe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d000:	fb93 f3f2 	sdiv	r3, r3, r2
 800d004:	b29a      	uxth	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
 800d00e:	7b7a      	ldrb	r2, [r7, #13]
 800d010:	4909      	ldr	r1, [pc, #36]	; (800d038 <UARTEx_SetNbDataToProcess+0x94>)
 800d012:	5c8a      	ldrb	r2, [r1, r2]
 800d014:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d018:	7b7a      	ldrb	r2, [r7, #13]
 800d01a:	4908      	ldr	r1, [pc, #32]	; (800d03c <UARTEx_SetNbDataToProcess+0x98>)
 800d01c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d01e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d022:	b29a      	uxth	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d02a:	bf00      	nop
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	0801002c 	.word	0x0801002c
 800d03c:	08010034 	.word	0x08010034

0800d040 <__errno>:
 800d040:	4b01      	ldr	r3, [pc, #4]	; (800d048 <__errno+0x8>)
 800d042:	6818      	ldr	r0, [r3, #0]
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	20000040 	.word	0x20000040

0800d04c <__libc_init_array>:
 800d04c:	b570      	push	{r4, r5, r6, lr}
 800d04e:	4d0d      	ldr	r5, [pc, #52]	; (800d084 <__libc_init_array+0x38>)
 800d050:	4c0d      	ldr	r4, [pc, #52]	; (800d088 <__libc_init_array+0x3c>)
 800d052:	1b64      	subs	r4, r4, r5
 800d054:	10a4      	asrs	r4, r4, #2
 800d056:	2600      	movs	r6, #0
 800d058:	42a6      	cmp	r6, r4
 800d05a:	d109      	bne.n	800d070 <__libc_init_array+0x24>
 800d05c:	4d0b      	ldr	r5, [pc, #44]	; (800d08c <__libc_init_array+0x40>)
 800d05e:	4c0c      	ldr	r4, [pc, #48]	; (800d090 <__libc_init_array+0x44>)
 800d060:	f002 fd1a 	bl	800fa98 <_init>
 800d064:	1b64      	subs	r4, r4, r5
 800d066:	10a4      	asrs	r4, r4, #2
 800d068:	2600      	movs	r6, #0
 800d06a:	42a6      	cmp	r6, r4
 800d06c:	d105      	bne.n	800d07a <__libc_init_array+0x2e>
 800d06e:	bd70      	pop	{r4, r5, r6, pc}
 800d070:	f855 3b04 	ldr.w	r3, [r5], #4
 800d074:	4798      	blx	r3
 800d076:	3601      	adds	r6, #1
 800d078:	e7ee      	b.n	800d058 <__libc_init_array+0xc>
 800d07a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d07e:	4798      	blx	r3
 800d080:	3601      	adds	r6, #1
 800d082:	e7f2      	b.n	800d06a <__libc_init_array+0x1e>
 800d084:	0801041c 	.word	0x0801041c
 800d088:	0801041c 	.word	0x0801041c
 800d08c:	0801041c 	.word	0x0801041c
 800d090:	08010420 	.word	0x08010420

0800d094 <memcpy>:
 800d094:	440a      	add	r2, r1
 800d096:	4291      	cmp	r1, r2
 800d098:	f100 33ff 	add.w	r3, r0, #4294967295
 800d09c:	d100      	bne.n	800d0a0 <memcpy+0xc>
 800d09e:	4770      	bx	lr
 800d0a0:	b510      	push	{r4, lr}
 800d0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0aa:	4291      	cmp	r1, r2
 800d0ac:	d1f9      	bne.n	800d0a2 <memcpy+0xe>
 800d0ae:	bd10      	pop	{r4, pc}

0800d0b0 <memset>:
 800d0b0:	4402      	add	r2, r0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d100      	bne.n	800d0ba <memset+0xa>
 800d0b8:	4770      	bx	lr
 800d0ba:	f803 1b01 	strb.w	r1, [r3], #1
 800d0be:	e7f9      	b.n	800d0b4 <memset+0x4>

0800d0c0 <__cvt>:
 800d0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0c2:	ed2d 8b02 	vpush	{d8}
 800d0c6:	eeb0 8b40 	vmov.f64	d8, d0
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	4617      	mov	r7, r2
 800d0ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d0d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d0d2:	ee18 2a90 	vmov	r2, s17
 800d0d6:	f025 0520 	bic.w	r5, r5, #32
 800d0da:	2a00      	cmp	r2, #0
 800d0dc:	bfb6      	itet	lt
 800d0de:	222d      	movlt	r2, #45	; 0x2d
 800d0e0:	2200      	movge	r2, #0
 800d0e2:	eeb1 8b40 	vneglt.f64	d8, d0
 800d0e6:	2d46      	cmp	r5, #70	; 0x46
 800d0e8:	460c      	mov	r4, r1
 800d0ea:	701a      	strb	r2, [r3, #0]
 800d0ec:	d004      	beq.n	800d0f8 <__cvt+0x38>
 800d0ee:	2d45      	cmp	r5, #69	; 0x45
 800d0f0:	d100      	bne.n	800d0f4 <__cvt+0x34>
 800d0f2:	3401      	adds	r4, #1
 800d0f4:	2102      	movs	r1, #2
 800d0f6:	e000      	b.n	800d0fa <__cvt+0x3a>
 800d0f8:	2103      	movs	r1, #3
 800d0fa:	ab03      	add	r3, sp, #12
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	ab02      	add	r3, sp, #8
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	4622      	mov	r2, r4
 800d104:	4633      	mov	r3, r6
 800d106:	eeb0 0b48 	vmov.f64	d0, d8
 800d10a:	f000 fdf5 	bl	800dcf8 <_dtoa_r>
 800d10e:	2d47      	cmp	r5, #71	; 0x47
 800d110:	d101      	bne.n	800d116 <__cvt+0x56>
 800d112:	07fb      	lsls	r3, r7, #31
 800d114:	d51a      	bpl.n	800d14c <__cvt+0x8c>
 800d116:	2d46      	cmp	r5, #70	; 0x46
 800d118:	eb00 0204 	add.w	r2, r0, r4
 800d11c:	d10c      	bne.n	800d138 <__cvt+0x78>
 800d11e:	7803      	ldrb	r3, [r0, #0]
 800d120:	2b30      	cmp	r3, #48	; 0x30
 800d122:	d107      	bne.n	800d134 <__cvt+0x74>
 800d124:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12c:	bf1c      	itt	ne
 800d12e:	f1c4 0401 	rsbne	r4, r4, #1
 800d132:	6034      	strne	r4, [r6, #0]
 800d134:	6833      	ldr	r3, [r6, #0]
 800d136:	441a      	add	r2, r3
 800d138:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d140:	bf08      	it	eq
 800d142:	9203      	streq	r2, [sp, #12]
 800d144:	2130      	movs	r1, #48	; 0x30
 800d146:	9b03      	ldr	r3, [sp, #12]
 800d148:	4293      	cmp	r3, r2
 800d14a:	d307      	bcc.n	800d15c <__cvt+0x9c>
 800d14c:	9b03      	ldr	r3, [sp, #12]
 800d14e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d150:	1a1b      	subs	r3, r3, r0
 800d152:	6013      	str	r3, [r2, #0]
 800d154:	b005      	add	sp, #20
 800d156:	ecbd 8b02 	vpop	{d8}
 800d15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15c:	1c5c      	adds	r4, r3, #1
 800d15e:	9403      	str	r4, [sp, #12]
 800d160:	7019      	strb	r1, [r3, #0]
 800d162:	e7f0      	b.n	800d146 <__cvt+0x86>

0800d164 <__exponent>:
 800d164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d166:	4603      	mov	r3, r0
 800d168:	2900      	cmp	r1, #0
 800d16a:	bfb8      	it	lt
 800d16c:	4249      	neglt	r1, r1
 800d16e:	f803 2b02 	strb.w	r2, [r3], #2
 800d172:	bfb4      	ite	lt
 800d174:	222d      	movlt	r2, #45	; 0x2d
 800d176:	222b      	movge	r2, #43	; 0x2b
 800d178:	2909      	cmp	r1, #9
 800d17a:	7042      	strb	r2, [r0, #1]
 800d17c:	dd2a      	ble.n	800d1d4 <__exponent+0x70>
 800d17e:	f10d 0407 	add.w	r4, sp, #7
 800d182:	46a4      	mov	ip, r4
 800d184:	270a      	movs	r7, #10
 800d186:	46a6      	mov	lr, r4
 800d188:	460a      	mov	r2, r1
 800d18a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d18e:	fb07 1516 	mls	r5, r7, r6, r1
 800d192:	3530      	adds	r5, #48	; 0x30
 800d194:	2a63      	cmp	r2, #99	; 0x63
 800d196:	f104 34ff 	add.w	r4, r4, #4294967295
 800d19a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d19e:	4631      	mov	r1, r6
 800d1a0:	dcf1      	bgt.n	800d186 <__exponent+0x22>
 800d1a2:	3130      	adds	r1, #48	; 0x30
 800d1a4:	f1ae 0502 	sub.w	r5, lr, #2
 800d1a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d1ac:	1c44      	adds	r4, r0, #1
 800d1ae:	4629      	mov	r1, r5
 800d1b0:	4561      	cmp	r1, ip
 800d1b2:	d30a      	bcc.n	800d1ca <__exponent+0x66>
 800d1b4:	f10d 0209 	add.w	r2, sp, #9
 800d1b8:	eba2 020e 	sub.w	r2, r2, lr
 800d1bc:	4565      	cmp	r5, ip
 800d1be:	bf88      	it	hi
 800d1c0:	2200      	movhi	r2, #0
 800d1c2:	4413      	add	r3, r2
 800d1c4:	1a18      	subs	r0, r3, r0
 800d1c6:	b003      	add	sp, #12
 800d1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d1d2:	e7ed      	b.n	800d1b0 <__exponent+0x4c>
 800d1d4:	2330      	movs	r3, #48	; 0x30
 800d1d6:	3130      	adds	r1, #48	; 0x30
 800d1d8:	7083      	strb	r3, [r0, #2]
 800d1da:	70c1      	strb	r1, [r0, #3]
 800d1dc:	1d03      	adds	r3, r0, #4
 800d1de:	e7f1      	b.n	800d1c4 <__exponent+0x60>

0800d1e0 <_printf_float>:
 800d1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e4:	b08b      	sub	sp, #44	; 0x2c
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d1ec:	4616      	mov	r6, r2
 800d1ee:	461f      	mov	r7, r3
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	f001 fca7 	bl	800eb44 <_localeconv_r>
 800d1f6:	f8d0 b000 	ldr.w	fp, [r0]
 800d1fa:	4658      	mov	r0, fp
 800d1fc:	f7f3 fe28 	bl	8000e50 <strlen>
 800d200:	2300      	movs	r3, #0
 800d202:	9308      	str	r3, [sp, #32]
 800d204:	f8d8 3000 	ldr.w	r3, [r8]
 800d208:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d20c:	6822      	ldr	r2, [r4, #0]
 800d20e:	3307      	adds	r3, #7
 800d210:	f023 0307 	bic.w	r3, r3, #7
 800d214:	f103 0108 	add.w	r1, r3, #8
 800d218:	f8c8 1000 	str.w	r1, [r8]
 800d21c:	4682      	mov	sl, r0
 800d21e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d222:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d226:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d488 <_printf_float+0x2a8>
 800d22a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d22e:	eeb0 6bc0 	vabs.f64	d6, d0
 800d232:	eeb4 6b47 	vcmp.f64	d6, d7
 800d236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23a:	dd24      	ble.n	800d286 <_printf_float+0xa6>
 800d23c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d244:	d502      	bpl.n	800d24c <_printf_float+0x6c>
 800d246:	232d      	movs	r3, #45	; 0x2d
 800d248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d24c:	4b90      	ldr	r3, [pc, #576]	; (800d490 <_printf_float+0x2b0>)
 800d24e:	4891      	ldr	r0, [pc, #580]	; (800d494 <_printf_float+0x2b4>)
 800d250:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d254:	bf94      	ite	ls
 800d256:	4698      	movls	r8, r3
 800d258:	4680      	movhi	r8, r0
 800d25a:	2303      	movs	r3, #3
 800d25c:	6123      	str	r3, [r4, #16]
 800d25e:	f022 0204 	bic.w	r2, r2, #4
 800d262:	2300      	movs	r3, #0
 800d264:	6022      	str	r2, [r4, #0]
 800d266:	9304      	str	r3, [sp, #16]
 800d268:	9700      	str	r7, [sp, #0]
 800d26a:	4633      	mov	r3, r6
 800d26c:	aa09      	add	r2, sp, #36	; 0x24
 800d26e:	4621      	mov	r1, r4
 800d270:	4628      	mov	r0, r5
 800d272:	f000 f9d3 	bl	800d61c <_printf_common>
 800d276:	3001      	adds	r0, #1
 800d278:	f040 808a 	bne.w	800d390 <_printf_float+0x1b0>
 800d27c:	f04f 30ff 	mov.w	r0, #4294967295
 800d280:	b00b      	add	sp, #44	; 0x2c
 800d282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d286:	eeb4 0b40 	vcmp.f64	d0, d0
 800d28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d28e:	d709      	bvc.n	800d2a4 <_printf_float+0xc4>
 800d290:	ee10 3a90 	vmov	r3, s1
 800d294:	2b00      	cmp	r3, #0
 800d296:	bfbc      	itt	lt
 800d298:	232d      	movlt	r3, #45	; 0x2d
 800d29a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d29e:	487e      	ldr	r0, [pc, #504]	; (800d498 <_printf_float+0x2b8>)
 800d2a0:	4b7e      	ldr	r3, [pc, #504]	; (800d49c <_printf_float+0x2bc>)
 800d2a2:	e7d5      	b.n	800d250 <_printf_float+0x70>
 800d2a4:	6863      	ldr	r3, [r4, #4]
 800d2a6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d2aa:	9104      	str	r1, [sp, #16]
 800d2ac:	1c59      	adds	r1, r3, #1
 800d2ae:	d13c      	bne.n	800d32a <_printf_float+0x14a>
 800d2b0:	2306      	movs	r3, #6
 800d2b2:	6063      	str	r3, [r4, #4]
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	9303      	str	r3, [sp, #12]
 800d2b8:	ab08      	add	r3, sp, #32
 800d2ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d2be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d2c2:	ab07      	add	r3, sp, #28
 800d2c4:	6861      	ldr	r1, [r4, #4]
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	6022      	str	r2, [r4, #0]
 800d2ca:	f10d 031b 	add.w	r3, sp, #27
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f7ff fef6 	bl	800d0c0 <__cvt>
 800d2d4:	9b04      	ldr	r3, [sp, #16]
 800d2d6:	9907      	ldr	r1, [sp, #28]
 800d2d8:	2b47      	cmp	r3, #71	; 0x47
 800d2da:	4680      	mov	r8, r0
 800d2dc:	d108      	bne.n	800d2f0 <_printf_float+0x110>
 800d2de:	1cc8      	adds	r0, r1, #3
 800d2e0:	db02      	blt.n	800d2e8 <_printf_float+0x108>
 800d2e2:	6863      	ldr	r3, [r4, #4]
 800d2e4:	4299      	cmp	r1, r3
 800d2e6:	dd41      	ble.n	800d36c <_printf_float+0x18c>
 800d2e8:	f1a9 0902 	sub.w	r9, r9, #2
 800d2ec:	fa5f f989 	uxtb.w	r9, r9
 800d2f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d2f4:	d820      	bhi.n	800d338 <_printf_float+0x158>
 800d2f6:	3901      	subs	r1, #1
 800d2f8:	464a      	mov	r2, r9
 800d2fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d2fe:	9107      	str	r1, [sp, #28]
 800d300:	f7ff ff30 	bl	800d164 <__exponent>
 800d304:	9a08      	ldr	r2, [sp, #32]
 800d306:	9004      	str	r0, [sp, #16]
 800d308:	1813      	adds	r3, r2, r0
 800d30a:	2a01      	cmp	r2, #1
 800d30c:	6123      	str	r3, [r4, #16]
 800d30e:	dc02      	bgt.n	800d316 <_printf_float+0x136>
 800d310:	6822      	ldr	r2, [r4, #0]
 800d312:	07d2      	lsls	r2, r2, #31
 800d314:	d501      	bpl.n	800d31a <_printf_float+0x13a>
 800d316:	3301      	adds	r3, #1
 800d318:	6123      	str	r3, [r4, #16]
 800d31a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d0a2      	beq.n	800d268 <_printf_float+0x88>
 800d322:	232d      	movs	r3, #45	; 0x2d
 800d324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d328:	e79e      	b.n	800d268 <_printf_float+0x88>
 800d32a:	9904      	ldr	r1, [sp, #16]
 800d32c:	2947      	cmp	r1, #71	; 0x47
 800d32e:	d1c1      	bne.n	800d2b4 <_printf_float+0xd4>
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1bf      	bne.n	800d2b4 <_printf_float+0xd4>
 800d334:	2301      	movs	r3, #1
 800d336:	e7bc      	b.n	800d2b2 <_printf_float+0xd2>
 800d338:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d33c:	d118      	bne.n	800d370 <_printf_float+0x190>
 800d33e:	2900      	cmp	r1, #0
 800d340:	6863      	ldr	r3, [r4, #4]
 800d342:	dd0b      	ble.n	800d35c <_printf_float+0x17c>
 800d344:	6121      	str	r1, [r4, #16]
 800d346:	b913      	cbnz	r3, 800d34e <_printf_float+0x16e>
 800d348:	6822      	ldr	r2, [r4, #0]
 800d34a:	07d0      	lsls	r0, r2, #31
 800d34c:	d502      	bpl.n	800d354 <_printf_float+0x174>
 800d34e:	3301      	adds	r3, #1
 800d350:	440b      	add	r3, r1
 800d352:	6123      	str	r3, [r4, #16]
 800d354:	2300      	movs	r3, #0
 800d356:	65a1      	str	r1, [r4, #88]	; 0x58
 800d358:	9304      	str	r3, [sp, #16]
 800d35a:	e7de      	b.n	800d31a <_printf_float+0x13a>
 800d35c:	b913      	cbnz	r3, 800d364 <_printf_float+0x184>
 800d35e:	6822      	ldr	r2, [r4, #0]
 800d360:	07d2      	lsls	r2, r2, #31
 800d362:	d501      	bpl.n	800d368 <_printf_float+0x188>
 800d364:	3302      	adds	r3, #2
 800d366:	e7f4      	b.n	800d352 <_printf_float+0x172>
 800d368:	2301      	movs	r3, #1
 800d36a:	e7f2      	b.n	800d352 <_printf_float+0x172>
 800d36c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d370:	9b08      	ldr	r3, [sp, #32]
 800d372:	4299      	cmp	r1, r3
 800d374:	db05      	blt.n	800d382 <_printf_float+0x1a2>
 800d376:	6823      	ldr	r3, [r4, #0]
 800d378:	6121      	str	r1, [r4, #16]
 800d37a:	07d8      	lsls	r0, r3, #31
 800d37c:	d5ea      	bpl.n	800d354 <_printf_float+0x174>
 800d37e:	1c4b      	adds	r3, r1, #1
 800d380:	e7e7      	b.n	800d352 <_printf_float+0x172>
 800d382:	2900      	cmp	r1, #0
 800d384:	bfd4      	ite	le
 800d386:	f1c1 0202 	rsble	r2, r1, #2
 800d38a:	2201      	movgt	r2, #1
 800d38c:	4413      	add	r3, r2
 800d38e:	e7e0      	b.n	800d352 <_printf_float+0x172>
 800d390:	6823      	ldr	r3, [r4, #0]
 800d392:	055a      	lsls	r2, r3, #21
 800d394:	d407      	bmi.n	800d3a6 <_printf_float+0x1c6>
 800d396:	6923      	ldr	r3, [r4, #16]
 800d398:	4642      	mov	r2, r8
 800d39a:	4631      	mov	r1, r6
 800d39c:	4628      	mov	r0, r5
 800d39e:	47b8      	blx	r7
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d12a      	bne.n	800d3fa <_printf_float+0x21a>
 800d3a4:	e76a      	b.n	800d27c <_printf_float+0x9c>
 800d3a6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d3aa:	f240 80e2 	bls.w	800d572 <_printf_float+0x392>
 800d3ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d3b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ba:	d133      	bne.n	800d424 <_printf_float+0x244>
 800d3bc:	4a38      	ldr	r2, [pc, #224]	; (800d4a0 <_printf_float+0x2c0>)
 800d3be:	2301      	movs	r3, #1
 800d3c0:	4631      	mov	r1, r6
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	47b8      	blx	r7
 800d3c6:	3001      	adds	r0, #1
 800d3c8:	f43f af58 	beq.w	800d27c <_printf_float+0x9c>
 800d3cc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	db02      	blt.n	800d3da <_printf_float+0x1fa>
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	07d8      	lsls	r0, r3, #31
 800d3d8:	d50f      	bpl.n	800d3fa <_printf_float+0x21a>
 800d3da:	4653      	mov	r3, sl
 800d3dc:	465a      	mov	r2, fp
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	47b8      	blx	r7
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	f43f af49 	beq.w	800d27c <_printf_float+0x9c>
 800d3ea:	f04f 0800 	mov.w	r8, #0
 800d3ee:	f104 091a 	add.w	r9, r4, #26
 800d3f2:	9b08      	ldr	r3, [sp, #32]
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	4543      	cmp	r3, r8
 800d3f8:	dc09      	bgt.n	800d40e <_printf_float+0x22e>
 800d3fa:	6823      	ldr	r3, [r4, #0]
 800d3fc:	079b      	lsls	r3, r3, #30
 800d3fe:	f100 8108 	bmi.w	800d612 <_printf_float+0x432>
 800d402:	68e0      	ldr	r0, [r4, #12]
 800d404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d406:	4298      	cmp	r0, r3
 800d408:	bfb8      	it	lt
 800d40a:	4618      	movlt	r0, r3
 800d40c:	e738      	b.n	800d280 <_printf_float+0xa0>
 800d40e:	2301      	movs	r3, #1
 800d410:	464a      	mov	r2, r9
 800d412:	4631      	mov	r1, r6
 800d414:	4628      	mov	r0, r5
 800d416:	47b8      	blx	r7
 800d418:	3001      	adds	r0, #1
 800d41a:	f43f af2f 	beq.w	800d27c <_printf_float+0x9c>
 800d41e:	f108 0801 	add.w	r8, r8, #1
 800d422:	e7e6      	b.n	800d3f2 <_printf_float+0x212>
 800d424:	9b07      	ldr	r3, [sp, #28]
 800d426:	2b00      	cmp	r3, #0
 800d428:	dc3c      	bgt.n	800d4a4 <_printf_float+0x2c4>
 800d42a:	4a1d      	ldr	r2, [pc, #116]	; (800d4a0 <_printf_float+0x2c0>)
 800d42c:	2301      	movs	r3, #1
 800d42e:	4631      	mov	r1, r6
 800d430:	4628      	mov	r0, r5
 800d432:	47b8      	blx	r7
 800d434:	3001      	adds	r0, #1
 800d436:	f43f af21 	beq.w	800d27c <_printf_float+0x9c>
 800d43a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d43e:	4313      	orrs	r3, r2
 800d440:	d102      	bne.n	800d448 <_printf_float+0x268>
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	07d9      	lsls	r1, r3, #31
 800d446:	d5d8      	bpl.n	800d3fa <_printf_float+0x21a>
 800d448:	4653      	mov	r3, sl
 800d44a:	465a      	mov	r2, fp
 800d44c:	4631      	mov	r1, r6
 800d44e:	4628      	mov	r0, r5
 800d450:	47b8      	blx	r7
 800d452:	3001      	adds	r0, #1
 800d454:	f43f af12 	beq.w	800d27c <_printf_float+0x9c>
 800d458:	f04f 0900 	mov.w	r9, #0
 800d45c:	f104 0a1a 	add.w	sl, r4, #26
 800d460:	9b07      	ldr	r3, [sp, #28]
 800d462:	425b      	negs	r3, r3
 800d464:	454b      	cmp	r3, r9
 800d466:	dc01      	bgt.n	800d46c <_printf_float+0x28c>
 800d468:	9b08      	ldr	r3, [sp, #32]
 800d46a:	e795      	b.n	800d398 <_printf_float+0x1b8>
 800d46c:	2301      	movs	r3, #1
 800d46e:	4652      	mov	r2, sl
 800d470:	4631      	mov	r1, r6
 800d472:	4628      	mov	r0, r5
 800d474:	47b8      	blx	r7
 800d476:	3001      	adds	r0, #1
 800d478:	f43f af00 	beq.w	800d27c <_printf_float+0x9c>
 800d47c:	f109 0901 	add.w	r9, r9, #1
 800d480:	e7ee      	b.n	800d460 <_printf_float+0x280>
 800d482:	bf00      	nop
 800d484:	f3af 8000 	nop.w
 800d488:	ffffffff 	.word	0xffffffff
 800d48c:	7fefffff 	.word	0x7fefffff
 800d490:	08010040 	.word	0x08010040
 800d494:	08010044 	.word	0x08010044
 800d498:	0801004c 	.word	0x0801004c
 800d49c:	08010048 	.word	0x08010048
 800d4a0:	08010050 	.word	0x08010050
 800d4a4:	9a08      	ldr	r2, [sp, #32]
 800d4a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	bfa8      	it	ge
 800d4ac:	461a      	movge	r2, r3
 800d4ae:	2a00      	cmp	r2, #0
 800d4b0:	4691      	mov	r9, r2
 800d4b2:	dc38      	bgt.n	800d526 <_printf_float+0x346>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	9305      	str	r3, [sp, #20]
 800d4b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4bc:	f104 021a 	add.w	r2, r4, #26
 800d4c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4c2:	9905      	ldr	r1, [sp, #20]
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	eba3 0309 	sub.w	r3, r3, r9
 800d4ca:	428b      	cmp	r3, r1
 800d4cc:	dc33      	bgt.n	800d536 <_printf_float+0x356>
 800d4ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	db3c      	blt.n	800d550 <_printf_float+0x370>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	07da      	lsls	r2, r3, #31
 800d4da:	d439      	bmi.n	800d550 <_printf_float+0x370>
 800d4dc:	9b08      	ldr	r3, [sp, #32]
 800d4de:	9a04      	ldr	r2, [sp, #16]
 800d4e0:	9907      	ldr	r1, [sp, #28]
 800d4e2:	1a9a      	subs	r2, r3, r2
 800d4e4:	eba3 0901 	sub.w	r9, r3, r1
 800d4e8:	4591      	cmp	r9, r2
 800d4ea:	bfa8      	it	ge
 800d4ec:	4691      	movge	r9, r2
 800d4ee:	f1b9 0f00 	cmp.w	r9, #0
 800d4f2:	dc35      	bgt.n	800d560 <_printf_float+0x380>
 800d4f4:	f04f 0800 	mov.w	r8, #0
 800d4f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4fc:	f104 0a1a 	add.w	sl, r4, #26
 800d500:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d504:	1a9b      	subs	r3, r3, r2
 800d506:	eba3 0309 	sub.w	r3, r3, r9
 800d50a:	4543      	cmp	r3, r8
 800d50c:	f77f af75 	ble.w	800d3fa <_printf_float+0x21a>
 800d510:	2301      	movs	r3, #1
 800d512:	4652      	mov	r2, sl
 800d514:	4631      	mov	r1, r6
 800d516:	4628      	mov	r0, r5
 800d518:	47b8      	blx	r7
 800d51a:	3001      	adds	r0, #1
 800d51c:	f43f aeae 	beq.w	800d27c <_printf_float+0x9c>
 800d520:	f108 0801 	add.w	r8, r8, #1
 800d524:	e7ec      	b.n	800d500 <_printf_float+0x320>
 800d526:	4613      	mov	r3, r2
 800d528:	4631      	mov	r1, r6
 800d52a:	4642      	mov	r2, r8
 800d52c:	4628      	mov	r0, r5
 800d52e:	47b8      	blx	r7
 800d530:	3001      	adds	r0, #1
 800d532:	d1bf      	bne.n	800d4b4 <_printf_float+0x2d4>
 800d534:	e6a2      	b.n	800d27c <_printf_float+0x9c>
 800d536:	2301      	movs	r3, #1
 800d538:	4631      	mov	r1, r6
 800d53a:	4628      	mov	r0, r5
 800d53c:	9204      	str	r2, [sp, #16]
 800d53e:	47b8      	blx	r7
 800d540:	3001      	adds	r0, #1
 800d542:	f43f ae9b 	beq.w	800d27c <_printf_float+0x9c>
 800d546:	9b05      	ldr	r3, [sp, #20]
 800d548:	9a04      	ldr	r2, [sp, #16]
 800d54a:	3301      	adds	r3, #1
 800d54c:	9305      	str	r3, [sp, #20]
 800d54e:	e7b7      	b.n	800d4c0 <_printf_float+0x2e0>
 800d550:	4653      	mov	r3, sl
 800d552:	465a      	mov	r2, fp
 800d554:	4631      	mov	r1, r6
 800d556:	4628      	mov	r0, r5
 800d558:	47b8      	blx	r7
 800d55a:	3001      	adds	r0, #1
 800d55c:	d1be      	bne.n	800d4dc <_printf_float+0x2fc>
 800d55e:	e68d      	b.n	800d27c <_printf_float+0x9c>
 800d560:	9a04      	ldr	r2, [sp, #16]
 800d562:	464b      	mov	r3, r9
 800d564:	4442      	add	r2, r8
 800d566:	4631      	mov	r1, r6
 800d568:	4628      	mov	r0, r5
 800d56a:	47b8      	blx	r7
 800d56c:	3001      	adds	r0, #1
 800d56e:	d1c1      	bne.n	800d4f4 <_printf_float+0x314>
 800d570:	e684      	b.n	800d27c <_printf_float+0x9c>
 800d572:	9a08      	ldr	r2, [sp, #32]
 800d574:	2a01      	cmp	r2, #1
 800d576:	dc01      	bgt.n	800d57c <_printf_float+0x39c>
 800d578:	07db      	lsls	r3, r3, #31
 800d57a:	d537      	bpl.n	800d5ec <_printf_float+0x40c>
 800d57c:	2301      	movs	r3, #1
 800d57e:	4642      	mov	r2, r8
 800d580:	4631      	mov	r1, r6
 800d582:	4628      	mov	r0, r5
 800d584:	47b8      	blx	r7
 800d586:	3001      	adds	r0, #1
 800d588:	f43f ae78 	beq.w	800d27c <_printf_float+0x9c>
 800d58c:	4653      	mov	r3, sl
 800d58e:	465a      	mov	r2, fp
 800d590:	4631      	mov	r1, r6
 800d592:	4628      	mov	r0, r5
 800d594:	47b8      	blx	r7
 800d596:	3001      	adds	r0, #1
 800d598:	f43f ae70 	beq.w	800d27c <_printf_float+0x9c>
 800d59c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d5a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a8:	d01b      	beq.n	800d5e2 <_printf_float+0x402>
 800d5aa:	9b08      	ldr	r3, [sp, #32]
 800d5ac:	f108 0201 	add.w	r2, r8, #1
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	47b8      	blx	r7
 800d5b8:	3001      	adds	r0, #1
 800d5ba:	d10e      	bne.n	800d5da <_printf_float+0x3fa>
 800d5bc:	e65e      	b.n	800d27c <_printf_float+0x9c>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	464a      	mov	r2, r9
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	47b8      	blx	r7
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	f43f ae57 	beq.w	800d27c <_printf_float+0x9c>
 800d5ce:	f108 0801 	add.w	r8, r8, #1
 800d5d2:	9b08      	ldr	r3, [sp, #32]
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	4543      	cmp	r3, r8
 800d5d8:	dcf1      	bgt.n	800d5be <_printf_float+0x3de>
 800d5da:	9b04      	ldr	r3, [sp, #16]
 800d5dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d5e0:	e6db      	b.n	800d39a <_printf_float+0x1ba>
 800d5e2:	f04f 0800 	mov.w	r8, #0
 800d5e6:	f104 091a 	add.w	r9, r4, #26
 800d5ea:	e7f2      	b.n	800d5d2 <_printf_float+0x3f2>
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	4642      	mov	r2, r8
 800d5f0:	e7df      	b.n	800d5b2 <_printf_float+0x3d2>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	464a      	mov	r2, r9
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	47b8      	blx	r7
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	f43f ae3d 	beq.w	800d27c <_printf_float+0x9c>
 800d602:	f108 0801 	add.w	r8, r8, #1
 800d606:	68e3      	ldr	r3, [r4, #12]
 800d608:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d60a:	1a5b      	subs	r3, r3, r1
 800d60c:	4543      	cmp	r3, r8
 800d60e:	dcf0      	bgt.n	800d5f2 <_printf_float+0x412>
 800d610:	e6f7      	b.n	800d402 <_printf_float+0x222>
 800d612:	f04f 0800 	mov.w	r8, #0
 800d616:	f104 0919 	add.w	r9, r4, #25
 800d61a:	e7f4      	b.n	800d606 <_printf_float+0x426>

0800d61c <_printf_common>:
 800d61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d620:	4616      	mov	r6, r2
 800d622:	4699      	mov	r9, r3
 800d624:	688a      	ldr	r2, [r1, #8]
 800d626:	690b      	ldr	r3, [r1, #16]
 800d628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d62c:	4293      	cmp	r3, r2
 800d62e:	bfb8      	it	lt
 800d630:	4613      	movlt	r3, r2
 800d632:	6033      	str	r3, [r6, #0]
 800d634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d638:	4607      	mov	r7, r0
 800d63a:	460c      	mov	r4, r1
 800d63c:	b10a      	cbz	r2, 800d642 <_printf_common+0x26>
 800d63e:	3301      	adds	r3, #1
 800d640:	6033      	str	r3, [r6, #0]
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	0699      	lsls	r1, r3, #26
 800d646:	bf42      	ittt	mi
 800d648:	6833      	ldrmi	r3, [r6, #0]
 800d64a:	3302      	addmi	r3, #2
 800d64c:	6033      	strmi	r3, [r6, #0]
 800d64e:	6825      	ldr	r5, [r4, #0]
 800d650:	f015 0506 	ands.w	r5, r5, #6
 800d654:	d106      	bne.n	800d664 <_printf_common+0x48>
 800d656:	f104 0a19 	add.w	sl, r4, #25
 800d65a:	68e3      	ldr	r3, [r4, #12]
 800d65c:	6832      	ldr	r2, [r6, #0]
 800d65e:	1a9b      	subs	r3, r3, r2
 800d660:	42ab      	cmp	r3, r5
 800d662:	dc26      	bgt.n	800d6b2 <_printf_common+0x96>
 800d664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d668:	1e13      	subs	r3, r2, #0
 800d66a:	6822      	ldr	r2, [r4, #0]
 800d66c:	bf18      	it	ne
 800d66e:	2301      	movne	r3, #1
 800d670:	0692      	lsls	r2, r2, #26
 800d672:	d42b      	bmi.n	800d6cc <_printf_common+0xb0>
 800d674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d678:	4649      	mov	r1, r9
 800d67a:	4638      	mov	r0, r7
 800d67c:	47c0      	blx	r8
 800d67e:	3001      	adds	r0, #1
 800d680:	d01e      	beq.n	800d6c0 <_printf_common+0xa4>
 800d682:	6823      	ldr	r3, [r4, #0]
 800d684:	68e5      	ldr	r5, [r4, #12]
 800d686:	6832      	ldr	r2, [r6, #0]
 800d688:	f003 0306 	and.w	r3, r3, #6
 800d68c:	2b04      	cmp	r3, #4
 800d68e:	bf08      	it	eq
 800d690:	1aad      	subeq	r5, r5, r2
 800d692:	68a3      	ldr	r3, [r4, #8]
 800d694:	6922      	ldr	r2, [r4, #16]
 800d696:	bf0c      	ite	eq
 800d698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d69c:	2500      	movne	r5, #0
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	bfc4      	itt	gt
 800d6a2:	1a9b      	subgt	r3, r3, r2
 800d6a4:	18ed      	addgt	r5, r5, r3
 800d6a6:	2600      	movs	r6, #0
 800d6a8:	341a      	adds	r4, #26
 800d6aa:	42b5      	cmp	r5, r6
 800d6ac:	d11a      	bne.n	800d6e4 <_printf_common+0xc8>
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	e008      	b.n	800d6c4 <_printf_common+0xa8>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	4652      	mov	r2, sl
 800d6b6:	4649      	mov	r1, r9
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	47c0      	blx	r8
 800d6bc:	3001      	adds	r0, #1
 800d6be:	d103      	bne.n	800d6c8 <_printf_common+0xac>
 800d6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c8:	3501      	adds	r5, #1
 800d6ca:	e7c6      	b.n	800d65a <_printf_common+0x3e>
 800d6cc:	18e1      	adds	r1, r4, r3
 800d6ce:	1c5a      	adds	r2, r3, #1
 800d6d0:	2030      	movs	r0, #48	; 0x30
 800d6d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6d6:	4422      	add	r2, r4
 800d6d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6e0:	3302      	adds	r3, #2
 800d6e2:	e7c7      	b.n	800d674 <_printf_common+0x58>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	4622      	mov	r2, r4
 800d6e8:	4649      	mov	r1, r9
 800d6ea:	4638      	mov	r0, r7
 800d6ec:	47c0      	blx	r8
 800d6ee:	3001      	adds	r0, #1
 800d6f0:	d0e6      	beq.n	800d6c0 <_printf_common+0xa4>
 800d6f2:	3601      	adds	r6, #1
 800d6f4:	e7d9      	b.n	800d6aa <_printf_common+0x8e>
	...

0800d6f8 <_printf_i>:
 800d6f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6fc:	7e0f      	ldrb	r7, [r1, #24]
 800d6fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d700:	2f78      	cmp	r7, #120	; 0x78
 800d702:	4691      	mov	r9, r2
 800d704:	4680      	mov	r8, r0
 800d706:	460c      	mov	r4, r1
 800d708:	469a      	mov	sl, r3
 800d70a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d70e:	d807      	bhi.n	800d720 <_printf_i+0x28>
 800d710:	2f62      	cmp	r7, #98	; 0x62
 800d712:	d80a      	bhi.n	800d72a <_printf_i+0x32>
 800d714:	2f00      	cmp	r7, #0
 800d716:	f000 80d8 	beq.w	800d8ca <_printf_i+0x1d2>
 800d71a:	2f58      	cmp	r7, #88	; 0x58
 800d71c:	f000 80a3 	beq.w	800d866 <_printf_i+0x16e>
 800d720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d728:	e03a      	b.n	800d7a0 <_printf_i+0xa8>
 800d72a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d72e:	2b15      	cmp	r3, #21
 800d730:	d8f6      	bhi.n	800d720 <_printf_i+0x28>
 800d732:	a101      	add	r1, pc, #4	; (adr r1, 800d738 <_printf_i+0x40>)
 800d734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d738:	0800d791 	.word	0x0800d791
 800d73c:	0800d7a5 	.word	0x0800d7a5
 800d740:	0800d721 	.word	0x0800d721
 800d744:	0800d721 	.word	0x0800d721
 800d748:	0800d721 	.word	0x0800d721
 800d74c:	0800d721 	.word	0x0800d721
 800d750:	0800d7a5 	.word	0x0800d7a5
 800d754:	0800d721 	.word	0x0800d721
 800d758:	0800d721 	.word	0x0800d721
 800d75c:	0800d721 	.word	0x0800d721
 800d760:	0800d721 	.word	0x0800d721
 800d764:	0800d8b1 	.word	0x0800d8b1
 800d768:	0800d7d5 	.word	0x0800d7d5
 800d76c:	0800d893 	.word	0x0800d893
 800d770:	0800d721 	.word	0x0800d721
 800d774:	0800d721 	.word	0x0800d721
 800d778:	0800d8d3 	.word	0x0800d8d3
 800d77c:	0800d721 	.word	0x0800d721
 800d780:	0800d7d5 	.word	0x0800d7d5
 800d784:	0800d721 	.word	0x0800d721
 800d788:	0800d721 	.word	0x0800d721
 800d78c:	0800d89b 	.word	0x0800d89b
 800d790:	682b      	ldr	r3, [r5, #0]
 800d792:	1d1a      	adds	r2, r3, #4
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	602a      	str	r2, [r5, #0]
 800d798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d79c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e0a3      	b.n	800d8ec <_printf_i+0x1f4>
 800d7a4:	6820      	ldr	r0, [r4, #0]
 800d7a6:	6829      	ldr	r1, [r5, #0]
 800d7a8:	0606      	lsls	r6, r0, #24
 800d7aa:	f101 0304 	add.w	r3, r1, #4
 800d7ae:	d50a      	bpl.n	800d7c6 <_printf_i+0xce>
 800d7b0:	680e      	ldr	r6, [r1, #0]
 800d7b2:	602b      	str	r3, [r5, #0]
 800d7b4:	2e00      	cmp	r6, #0
 800d7b6:	da03      	bge.n	800d7c0 <_printf_i+0xc8>
 800d7b8:	232d      	movs	r3, #45	; 0x2d
 800d7ba:	4276      	negs	r6, r6
 800d7bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7c0:	485e      	ldr	r0, [pc, #376]	; (800d93c <_printf_i+0x244>)
 800d7c2:	230a      	movs	r3, #10
 800d7c4:	e019      	b.n	800d7fa <_printf_i+0x102>
 800d7c6:	680e      	ldr	r6, [r1, #0]
 800d7c8:	602b      	str	r3, [r5, #0]
 800d7ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d7ce:	bf18      	it	ne
 800d7d0:	b236      	sxthne	r6, r6
 800d7d2:	e7ef      	b.n	800d7b4 <_printf_i+0xbc>
 800d7d4:	682b      	ldr	r3, [r5, #0]
 800d7d6:	6820      	ldr	r0, [r4, #0]
 800d7d8:	1d19      	adds	r1, r3, #4
 800d7da:	6029      	str	r1, [r5, #0]
 800d7dc:	0601      	lsls	r1, r0, #24
 800d7de:	d501      	bpl.n	800d7e4 <_printf_i+0xec>
 800d7e0:	681e      	ldr	r6, [r3, #0]
 800d7e2:	e002      	b.n	800d7ea <_printf_i+0xf2>
 800d7e4:	0646      	lsls	r6, r0, #25
 800d7e6:	d5fb      	bpl.n	800d7e0 <_printf_i+0xe8>
 800d7e8:	881e      	ldrh	r6, [r3, #0]
 800d7ea:	4854      	ldr	r0, [pc, #336]	; (800d93c <_printf_i+0x244>)
 800d7ec:	2f6f      	cmp	r7, #111	; 0x6f
 800d7ee:	bf0c      	ite	eq
 800d7f0:	2308      	moveq	r3, #8
 800d7f2:	230a      	movne	r3, #10
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7fa:	6865      	ldr	r5, [r4, #4]
 800d7fc:	60a5      	str	r5, [r4, #8]
 800d7fe:	2d00      	cmp	r5, #0
 800d800:	bfa2      	ittt	ge
 800d802:	6821      	ldrge	r1, [r4, #0]
 800d804:	f021 0104 	bicge.w	r1, r1, #4
 800d808:	6021      	strge	r1, [r4, #0]
 800d80a:	b90e      	cbnz	r6, 800d810 <_printf_i+0x118>
 800d80c:	2d00      	cmp	r5, #0
 800d80e:	d04d      	beq.n	800d8ac <_printf_i+0x1b4>
 800d810:	4615      	mov	r5, r2
 800d812:	fbb6 f1f3 	udiv	r1, r6, r3
 800d816:	fb03 6711 	mls	r7, r3, r1, r6
 800d81a:	5dc7      	ldrb	r7, [r0, r7]
 800d81c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d820:	4637      	mov	r7, r6
 800d822:	42bb      	cmp	r3, r7
 800d824:	460e      	mov	r6, r1
 800d826:	d9f4      	bls.n	800d812 <_printf_i+0x11a>
 800d828:	2b08      	cmp	r3, #8
 800d82a:	d10b      	bne.n	800d844 <_printf_i+0x14c>
 800d82c:	6823      	ldr	r3, [r4, #0]
 800d82e:	07de      	lsls	r6, r3, #31
 800d830:	d508      	bpl.n	800d844 <_printf_i+0x14c>
 800d832:	6923      	ldr	r3, [r4, #16]
 800d834:	6861      	ldr	r1, [r4, #4]
 800d836:	4299      	cmp	r1, r3
 800d838:	bfde      	ittt	le
 800d83a:	2330      	movle	r3, #48	; 0x30
 800d83c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d840:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d844:	1b52      	subs	r2, r2, r5
 800d846:	6122      	str	r2, [r4, #16]
 800d848:	f8cd a000 	str.w	sl, [sp]
 800d84c:	464b      	mov	r3, r9
 800d84e:	aa03      	add	r2, sp, #12
 800d850:	4621      	mov	r1, r4
 800d852:	4640      	mov	r0, r8
 800d854:	f7ff fee2 	bl	800d61c <_printf_common>
 800d858:	3001      	adds	r0, #1
 800d85a:	d14c      	bne.n	800d8f6 <_printf_i+0x1fe>
 800d85c:	f04f 30ff 	mov.w	r0, #4294967295
 800d860:	b004      	add	sp, #16
 800d862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d866:	4835      	ldr	r0, [pc, #212]	; (800d93c <_printf_i+0x244>)
 800d868:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d86c:	6829      	ldr	r1, [r5, #0]
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	f851 6b04 	ldr.w	r6, [r1], #4
 800d874:	6029      	str	r1, [r5, #0]
 800d876:	061d      	lsls	r5, r3, #24
 800d878:	d514      	bpl.n	800d8a4 <_printf_i+0x1ac>
 800d87a:	07df      	lsls	r7, r3, #31
 800d87c:	bf44      	itt	mi
 800d87e:	f043 0320 	orrmi.w	r3, r3, #32
 800d882:	6023      	strmi	r3, [r4, #0]
 800d884:	b91e      	cbnz	r6, 800d88e <_printf_i+0x196>
 800d886:	6823      	ldr	r3, [r4, #0]
 800d888:	f023 0320 	bic.w	r3, r3, #32
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	2310      	movs	r3, #16
 800d890:	e7b0      	b.n	800d7f4 <_printf_i+0xfc>
 800d892:	6823      	ldr	r3, [r4, #0]
 800d894:	f043 0320 	orr.w	r3, r3, #32
 800d898:	6023      	str	r3, [r4, #0]
 800d89a:	2378      	movs	r3, #120	; 0x78
 800d89c:	4828      	ldr	r0, [pc, #160]	; (800d940 <_printf_i+0x248>)
 800d89e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8a2:	e7e3      	b.n	800d86c <_printf_i+0x174>
 800d8a4:	0659      	lsls	r1, r3, #25
 800d8a6:	bf48      	it	mi
 800d8a8:	b2b6      	uxthmi	r6, r6
 800d8aa:	e7e6      	b.n	800d87a <_printf_i+0x182>
 800d8ac:	4615      	mov	r5, r2
 800d8ae:	e7bb      	b.n	800d828 <_printf_i+0x130>
 800d8b0:	682b      	ldr	r3, [r5, #0]
 800d8b2:	6826      	ldr	r6, [r4, #0]
 800d8b4:	6961      	ldr	r1, [r4, #20]
 800d8b6:	1d18      	adds	r0, r3, #4
 800d8b8:	6028      	str	r0, [r5, #0]
 800d8ba:	0635      	lsls	r5, r6, #24
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	d501      	bpl.n	800d8c4 <_printf_i+0x1cc>
 800d8c0:	6019      	str	r1, [r3, #0]
 800d8c2:	e002      	b.n	800d8ca <_printf_i+0x1d2>
 800d8c4:	0670      	lsls	r0, r6, #25
 800d8c6:	d5fb      	bpl.n	800d8c0 <_printf_i+0x1c8>
 800d8c8:	8019      	strh	r1, [r3, #0]
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	6123      	str	r3, [r4, #16]
 800d8ce:	4615      	mov	r5, r2
 800d8d0:	e7ba      	b.n	800d848 <_printf_i+0x150>
 800d8d2:	682b      	ldr	r3, [r5, #0]
 800d8d4:	1d1a      	adds	r2, r3, #4
 800d8d6:	602a      	str	r2, [r5, #0]
 800d8d8:	681d      	ldr	r5, [r3, #0]
 800d8da:	6862      	ldr	r2, [r4, #4]
 800d8dc:	2100      	movs	r1, #0
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f7f3 fabe 	bl	8000e60 <memchr>
 800d8e4:	b108      	cbz	r0, 800d8ea <_printf_i+0x1f2>
 800d8e6:	1b40      	subs	r0, r0, r5
 800d8e8:	6060      	str	r0, [r4, #4]
 800d8ea:	6863      	ldr	r3, [r4, #4]
 800d8ec:	6123      	str	r3, [r4, #16]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8f4:	e7a8      	b.n	800d848 <_printf_i+0x150>
 800d8f6:	6923      	ldr	r3, [r4, #16]
 800d8f8:	462a      	mov	r2, r5
 800d8fa:	4649      	mov	r1, r9
 800d8fc:	4640      	mov	r0, r8
 800d8fe:	47d0      	blx	sl
 800d900:	3001      	adds	r0, #1
 800d902:	d0ab      	beq.n	800d85c <_printf_i+0x164>
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	079b      	lsls	r3, r3, #30
 800d908:	d413      	bmi.n	800d932 <_printf_i+0x23a>
 800d90a:	68e0      	ldr	r0, [r4, #12]
 800d90c:	9b03      	ldr	r3, [sp, #12]
 800d90e:	4298      	cmp	r0, r3
 800d910:	bfb8      	it	lt
 800d912:	4618      	movlt	r0, r3
 800d914:	e7a4      	b.n	800d860 <_printf_i+0x168>
 800d916:	2301      	movs	r3, #1
 800d918:	4632      	mov	r2, r6
 800d91a:	4649      	mov	r1, r9
 800d91c:	4640      	mov	r0, r8
 800d91e:	47d0      	blx	sl
 800d920:	3001      	adds	r0, #1
 800d922:	d09b      	beq.n	800d85c <_printf_i+0x164>
 800d924:	3501      	adds	r5, #1
 800d926:	68e3      	ldr	r3, [r4, #12]
 800d928:	9903      	ldr	r1, [sp, #12]
 800d92a:	1a5b      	subs	r3, r3, r1
 800d92c:	42ab      	cmp	r3, r5
 800d92e:	dcf2      	bgt.n	800d916 <_printf_i+0x21e>
 800d930:	e7eb      	b.n	800d90a <_printf_i+0x212>
 800d932:	2500      	movs	r5, #0
 800d934:	f104 0619 	add.w	r6, r4, #25
 800d938:	e7f5      	b.n	800d926 <_printf_i+0x22e>
 800d93a:	bf00      	nop
 800d93c:	08010052 	.word	0x08010052
 800d940:	08010063 	.word	0x08010063

0800d944 <iprintf>:
 800d944:	b40f      	push	{r0, r1, r2, r3}
 800d946:	4b0a      	ldr	r3, [pc, #40]	; (800d970 <iprintf+0x2c>)
 800d948:	b513      	push	{r0, r1, r4, lr}
 800d94a:	681c      	ldr	r4, [r3, #0]
 800d94c:	b124      	cbz	r4, 800d958 <iprintf+0x14>
 800d94e:	69a3      	ldr	r3, [r4, #24]
 800d950:	b913      	cbnz	r3, 800d958 <iprintf+0x14>
 800d952:	4620      	mov	r0, r4
 800d954:	f001 f858 	bl	800ea08 <__sinit>
 800d958:	ab05      	add	r3, sp, #20
 800d95a:	9a04      	ldr	r2, [sp, #16]
 800d95c:	68a1      	ldr	r1, [r4, #8]
 800d95e:	9301      	str	r3, [sp, #4]
 800d960:	4620      	mov	r0, r4
 800d962:	f001 fe07 	bl	800f574 <_vfiprintf_r>
 800d966:	b002      	add	sp, #8
 800d968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d96c:	b004      	add	sp, #16
 800d96e:	4770      	bx	lr
 800d970:	20000040 	.word	0x20000040

0800d974 <_puts_r>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	460e      	mov	r6, r1
 800d978:	4605      	mov	r5, r0
 800d97a:	b118      	cbz	r0, 800d984 <_puts_r+0x10>
 800d97c:	6983      	ldr	r3, [r0, #24]
 800d97e:	b90b      	cbnz	r3, 800d984 <_puts_r+0x10>
 800d980:	f001 f842 	bl	800ea08 <__sinit>
 800d984:	69ab      	ldr	r3, [r5, #24]
 800d986:	68ac      	ldr	r4, [r5, #8]
 800d988:	b913      	cbnz	r3, 800d990 <_puts_r+0x1c>
 800d98a:	4628      	mov	r0, r5
 800d98c:	f001 f83c 	bl	800ea08 <__sinit>
 800d990:	4b2c      	ldr	r3, [pc, #176]	; (800da44 <_puts_r+0xd0>)
 800d992:	429c      	cmp	r4, r3
 800d994:	d120      	bne.n	800d9d8 <_puts_r+0x64>
 800d996:	686c      	ldr	r4, [r5, #4]
 800d998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d99a:	07db      	lsls	r3, r3, #31
 800d99c:	d405      	bmi.n	800d9aa <_puts_r+0x36>
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	0598      	lsls	r0, r3, #22
 800d9a2:	d402      	bmi.n	800d9aa <_puts_r+0x36>
 800d9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9a6:	f001 f8d2 	bl	800eb4e <__retarget_lock_acquire_recursive>
 800d9aa:	89a3      	ldrh	r3, [r4, #12]
 800d9ac:	0719      	lsls	r1, r3, #28
 800d9ae:	d51d      	bpl.n	800d9ec <_puts_r+0x78>
 800d9b0:	6923      	ldr	r3, [r4, #16]
 800d9b2:	b1db      	cbz	r3, 800d9ec <_puts_r+0x78>
 800d9b4:	3e01      	subs	r6, #1
 800d9b6:	68a3      	ldr	r3, [r4, #8]
 800d9b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	60a3      	str	r3, [r4, #8]
 800d9c0:	bb39      	cbnz	r1, 800da12 <_puts_r+0x9e>
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	da38      	bge.n	800da38 <_puts_r+0xc4>
 800d9c6:	4622      	mov	r2, r4
 800d9c8:	210a      	movs	r1, #10
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f000 f848 	bl	800da60 <__swbuf_r>
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d011      	beq.n	800d9f8 <_puts_r+0x84>
 800d9d4:	250a      	movs	r5, #10
 800d9d6:	e011      	b.n	800d9fc <_puts_r+0x88>
 800d9d8:	4b1b      	ldr	r3, [pc, #108]	; (800da48 <_puts_r+0xd4>)
 800d9da:	429c      	cmp	r4, r3
 800d9dc:	d101      	bne.n	800d9e2 <_puts_r+0x6e>
 800d9de:	68ac      	ldr	r4, [r5, #8]
 800d9e0:	e7da      	b.n	800d998 <_puts_r+0x24>
 800d9e2:	4b1a      	ldr	r3, [pc, #104]	; (800da4c <_puts_r+0xd8>)
 800d9e4:	429c      	cmp	r4, r3
 800d9e6:	bf08      	it	eq
 800d9e8:	68ec      	ldreq	r4, [r5, #12]
 800d9ea:	e7d5      	b.n	800d998 <_puts_r+0x24>
 800d9ec:	4621      	mov	r1, r4
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	f000 f888 	bl	800db04 <__swsetup_r>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d0dd      	beq.n	800d9b4 <_puts_r+0x40>
 800d9f8:	f04f 35ff 	mov.w	r5, #4294967295
 800d9fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9fe:	07da      	lsls	r2, r3, #31
 800da00:	d405      	bmi.n	800da0e <_puts_r+0x9a>
 800da02:	89a3      	ldrh	r3, [r4, #12]
 800da04:	059b      	lsls	r3, r3, #22
 800da06:	d402      	bmi.n	800da0e <_puts_r+0x9a>
 800da08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da0a:	f001 f8a1 	bl	800eb50 <__retarget_lock_release_recursive>
 800da0e:	4628      	mov	r0, r5
 800da10:	bd70      	pop	{r4, r5, r6, pc}
 800da12:	2b00      	cmp	r3, #0
 800da14:	da04      	bge.n	800da20 <_puts_r+0xac>
 800da16:	69a2      	ldr	r2, [r4, #24]
 800da18:	429a      	cmp	r2, r3
 800da1a:	dc06      	bgt.n	800da2a <_puts_r+0xb6>
 800da1c:	290a      	cmp	r1, #10
 800da1e:	d004      	beq.n	800da2a <_puts_r+0xb6>
 800da20:	6823      	ldr	r3, [r4, #0]
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	6022      	str	r2, [r4, #0]
 800da26:	7019      	strb	r1, [r3, #0]
 800da28:	e7c5      	b.n	800d9b6 <_puts_r+0x42>
 800da2a:	4622      	mov	r2, r4
 800da2c:	4628      	mov	r0, r5
 800da2e:	f000 f817 	bl	800da60 <__swbuf_r>
 800da32:	3001      	adds	r0, #1
 800da34:	d1bf      	bne.n	800d9b6 <_puts_r+0x42>
 800da36:	e7df      	b.n	800d9f8 <_puts_r+0x84>
 800da38:	6823      	ldr	r3, [r4, #0]
 800da3a:	250a      	movs	r5, #10
 800da3c:	1c5a      	adds	r2, r3, #1
 800da3e:	6022      	str	r2, [r4, #0]
 800da40:	701d      	strb	r5, [r3, #0]
 800da42:	e7db      	b.n	800d9fc <_puts_r+0x88>
 800da44:	08010124 	.word	0x08010124
 800da48:	08010144 	.word	0x08010144
 800da4c:	08010104 	.word	0x08010104

0800da50 <puts>:
 800da50:	4b02      	ldr	r3, [pc, #8]	; (800da5c <puts+0xc>)
 800da52:	4601      	mov	r1, r0
 800da54:	6818      	ldr	r0, [r3, #0]
 800da56:	f7ff bf8d 	b.w	800d974 <_puts_r>
 800da5a:	bf00      	nop
 800da5c:	20000040 	.word	0x20000040

0800da60 <__swbuf_r>:
 800da60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da62:	460e      	mov	r6, r1
 800da64:	4614      	mov	r4, r2
 800da66:	4605      	mov	r5, r0
 800da68:	b118      	cbz	r0, 800da72 <__swbuf_r+0x12>
 800da6a:	6983      	ldr	r3, [r0, #24]
 800da6c:	b90b      	cbnz	r3, 800da72 <__swbuf_r+0x12>
 800da6e:	f000 ffcb 	bl	800ea08 <__sinit>
 800da72:	4b21      	ldr	r3, [pc, #132]	; (800daf8 <__swbuf_r+0x98>)
 800da74:	429c      	cmp	r4, r3
 800da76:	d12b      	bne.n	800dad0 <__swbuf_r+0x70>
 800da78:	686c      	ldr	r4, [r5, #4]
 800da7a:	69a3      	ldr	r3, [r4, #24]
 800da7c:	60a3      	str	r3, [r4, #8]
 800da7e:	89a3      	ldrh	r3, [r4, #12]
 800da80:	071a      	lsls	r2, r3, #28
 800da82:	d52f      	bpl.n	800dae4 <__swbuf_r+0x84>
 800da84:	6923      	ldr	r3, [r4, #16]
 800da86:	b36b      	cbz	r3, 800dae4 <__swbuf_r+0x84>
 800da88:	6923      	ldr	r3, [r4, #16]
 800da8a:	6820      	ldr	r0, [r4, #0]
 800da8c:	1ac0      	subs	r0, r0, r3
 800da8e:	6963      	ldr	r3, [r4, #20]
 800da90:	b2f6      	uxtb	r6, r6
 800da92:	4283      	cmp	r3, r0
 800da94:	4637      	mov	r7, r6
 800da96:	dc04      	bgt.n	800daa2 <__swbuf_r+0x42>
 800da98:	4621      	mov	r1, r4
 800da9a:	4628      	mov	r0, r5
 800da9c:	f000 ff20 	bl	800e8e0 <_fflush_r>
 800daa0:	bb30      	cbnz	r0, 800daf0 <__swbuf_r+0x90>
 800daa2:	68a3      	ldr	r3, [r4, #8]
 800daa4:	3b01      	subs	r3, #1
 800daa6:	60a3      	str	r3, [r4, #8]
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	6022      	str	r2, [r4, #0]
 800daae:	701e      	strb	r6, [r3, #0]
 800dab0:	6963      	ldr	r3, [r4, #20]
 800dab2:	3001      	adds	r0, #1
 800dab4:	4283      	cmp	r3, r0
 800dab6:	d004      	beq.n	800dac2 <__swbuf_r+0x62>
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	07db      	lsls	r3, r3, #31
 800dabc:	d506      	bpl.n	800dacc <__swbuf_r+0x6c>
 800dabe:	2e0a      	cmp	r6, #10
 800dac0:	d104      	bne.n	800dacc <__swbuf_r+0x6c>
 800dac2:	4621      	mov	r1, r4
 800dac4:	4628      	mov	r0, r5
 800dac6:	f000 ff0b 	bl	800e8e0 <_fflush_r>
 800daca:	b988      	cbnz	r0, 800daf0 <__swbuf_r+0x90>
 800dacc:	4638      	mov	r0, r7
 800dace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dad0:	4b0a      	ldr	r3, [pc, #40]	; (800dafc <__swbuf_r+0x9c>)
 800dad2:	429c      	cmp	r4, r3
 800dad4:	d101      	bne.n	800dada <__swbuf_r+0x7a>
 800dad6:	68ac      	ldr	r4, [r5, #8]
 800dad8:	e7cf      	b.n	800da7a <__swbuf_r+0x1a>
 800dada:	4b09      	ldr	r3, [pc, #36]	; (800db00 <__swbuf_r+0xa0>)
 800dadc:	429c      	cmp	r4, r3
 800dade:	bf08      	it	eq
 800dae0:	68ec      	ldreq	r4, [r5, #12]
 800dae2:	e7ca      	b.n	800da7a <__swbuf_r+0x1a>
 800dae4:	4621      	mov	r1, r4
 800dae6:	4628      	mov	r0, r5
 800dae8:	f000 f80c 	bl	800db04 <__swsetup_r>
 800daec:	2800      	cmp	r0, #0
 800daee:	d0cb      	beq.n	800da88 <__swbuf_r+0x28>
 800daf0:	f04f 37ff 	mov.w	r7, #4294967295
 800daf4:	e7ea      	b.n	800dacc <__swbuf_r+0x6c>
 800daf6:	bf00      	nop
 800daf8:	08010124 	.word	0x08010124
 800dafc:	08010144 	.word	0x08010144
 800db00:	08010104 	.word	0x08010104

0800db04 <__swsetup_r>:
 800db04:	4b32      	ldr	r3, [pc, #200]	; (800dbd0 <__swsetup_r+0xcc>)
 800db06:	b570      	push	{r4, r5, r6, lr}
 800db08:	681d      	ldr	r5, [r3, #0]
 800db0a:	4606      	mov	r6, r0
 800db0c:	460c      	mov	r4, r1
 800db0e:	b125      	cbz	r5, 800db1a <__swsetup_r+0x16>
 800db10:	69ab      	ldr	r3, [r5, #24]
 800db12:	b913      	cbnz	r3, 800db1a <__swsetup_r+0x16>
 800db14:	4628      	mov	r0, r5
 800db16:	f000 ff77 	bl	800ea08 <__sinit>
 800db1a:	4b2e      	ldr	r3, [pc, #184]	; (800dbd4 <__swsetup_r+0xd0>)
 800db1c:	429c      	cmp	r4, r3
 800db1e:	d10f      	bne.n	800db40 <__swsetup_r+0x3c>
 800db20:	686c      	ldr	r4, [r5, #4]
 800db22:	89a3      	ldrh	r3, [r4, #12]
 800db24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db28:	0719      	lsls	r1, r3, #28
 800db2a:	d42c      	bmi.n	800db86 <__swsetup_r+0x82>
 800db2c:	06dd      	lsls	r5, r3, #27
 800db2e:	d411      	bmi.n	800db54 <__swsetup_r+0x50>
 800db30:	2309      	movs	r3, #9
 800db32:	6033      	str	r3, [r6, #0]
 800db34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db38:	81a3      	strh	r3, [r4, #12]
 800db3a:	f04f 30ff 	mov.w	r0, #4294967295
 800db3e:	e03e      	b.n	800dbbe <__swsetup_r+0xba>
 800db40:	4b25      	ldr	r3, [pc, #148]	; (800dbd8 <__swsetup_r+0xd4>)
 800db42:	429c      	cmp	r4, r3
 800db44:	d101      	bne.n	800db4a <__swsetup_r+0x46>
 800db46:	68ac      	ldr	r4, [r5, #8]
 800db48:	e7eb      	b.n	800db22 <__swsetup_r+0x1e>
 800db4a:	4b24      	ldr	r3, [pc, #144]	; (800dbdc <__swsetup_r+0xd8>)
 800db4c:	429c      	cmp	r4, r3
 800db4e:	bf08      	it	eq
 800db50:	68ec      	ldreq	r4, [r5, #12]
 800db52:	e7e6      	b.n	800db22 <__swsetup_r+0x1e>
 800db54:	0758      	lsls	r0, r3, #29
 800db56:	d512      	bpl.n	800db7e <__swsetup_r+0x7a>
 800db58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db5a:	b141      	cbz	r1, 800db6e <__swsetup_r+0x6a>
 800db5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db60:	4299      	cmp	r1, r3
 800db62:	d002      	beq.n	800db6a <__swsetup_r+0x66>
 800db64:	4630      	mov	r0, r6
 800db66:	f001 fbfb 	bl	800f360 <_free_r>
 800db6a:	2300      	movs	r3, #0
 800db6c:	6363      	str	r3, [r4, #52]	; 0x34
 800db6e:	89a3      	ldrh	r3, [r4, #12]
 800db70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db74:	81a3      	strh	r3, [r4, #12]
 800db76:	2300      	movs	r3, #0
 800db78:	6063      	str	r3, [r4, #4]
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	f043 0308 	orr.w	r3, r3, #8
 800db84:	81a3      	strh	r3, [r4, #12]
 800db86:	6923      	ldr	r3, [r4, #16]
 800db88:	b94b      	cbnz	r3, 800db9e <__swsetup_r+0x9a>
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db94:	d003      	beq.n	800db9e <__swsetup_r+0x9a>
 800db96:	4621      	mov	r1, r4
 800db98:	4630      	mov	r0, r6
 800db9a:	f000 ffff 	bl	800eb9c <__smakebuf_r>
 800db9e:	89a0      	ldrh	r0, [r4, #12]
 800dba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dba4:	f010 0301 	ands.w	r3, r0, #1
 800dba8:	d00a      	beq.n	800dbc0 <__swsetup_r+0xbc>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	60a3      	str	r3, [r4, #8]
 800dbae:	6963      	ldr	r3, [r4, #20]
 800dbb0:	425b      	negs	r3, r3
 800dbb2:	61a3      	str	r3, [r4, #24]
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	b943      	cbnz	r3, 800dbca <__swsetup_r+0xc6>
 800dbb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbbc:	d1ba      	bne.n	800db34 <__swsetup_r+0x30>
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}
 800dbc0:	0781      	lsls	r1, r0, #30
 800dbc2:	bf58      	it	pl
 800dbc4:	6963      	ldrpl	r3, [r4, #20]
 800dbc6:	60a3      	str	r3, [r4, #8]
 800dbc8:	e7f4      	b.n	800dbb4 <__swsetup_r+0xb0>
 800dbca:	2000      	movs	r0, #0
 800dbcc:	e7f7      	b.n	800dbbe <__swsetup_r+0xba>
 800dbce:	bf00      	nop
 800dbd0:	20000040 	.word	0x20000040
 800dbd4:	08010124 	.word	0x08010124
 800dbd8:	08010144 	.word	0x08010144
 800dbdc:	08010104 	.word	0x08010104

0800dbe0 <quorem>:
 800dbe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe4:	6903      	ldr	r3, [r0, #16]
 800dbe6:	690c      	ldr	r4, [r1, #16]
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	4607      	mov	r7, r0
 800dbec:	f2c0 8081 	blt.w	800dcf2 <quorem+0x112>
 800dbf0:	3c01      	subs	r4, #1
 800dbf2:	f101 0814 	add.w	r8, r1, #20
 800dbf6:	f100 0514 	add.w	r5, r0, #20
 800dbfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbfe:	9301      	str	r3, [sp, #4]
 800dc00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc14:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc18:	d331      	bcc.n	800dc7e <quorem+0x9e>
 800dc1a:	f04f 0e00 	mov.w	lr, #0
 800dc1e:	4640      	mov	r0, r8
 800dc20:	46ac      	mov	ip, r5
 800dc22:	46f2      	mov	sl, lr
 800dc24:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc28:	b293      	uxth	r3, r2
 800dc2a:	fb06 e303 	mla	r3, r6, r3, lr
 800dc2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	ebaa 0303 	sub.w	r3, sl, r3
 800dc38:	f8dc a000 	ldr.w	sl, [ip]
 800dc3c:	0c12      	lsrs	r2, r2, #16
 800dc3e:	fa13 f38a 	uxtah	r3, r3, sl
 800dc42:	fb06 e202 	mla	r2, r6, r2, lr
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	9b00      	ldr	r3, [sp, #0]
 800dc4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc4e:	b292      	uxth	r2, r2
 800dc50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dc54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc58:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc5c:	4581      	cmp	r9, r0
 800dc5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc62:	f84c 3b04 	str.w	r3, [ip], #4
 800dc66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dc6a:	d2db      	bcs.n	800dc24 <quorem+0x44>
 800dc6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800dc70:	b92b      	cbnz	r3, 800dc7e <quorem+0x9e>
 800dc72:	9b01      	ldr	r3, [sp, #4]
 800dc74:	3b04      	subs	r3, #4
 800dc76:	429d      	cmp	r5, r3
 800dc78:	461a      	mov	r2, r3
 800dc7a:	d32e      	bcc.n	800dcda <quorem+0xfa>
 800dc7c:	613c      	str	r4, [r7, #16]
 800dc7e:	4638      	mov	r0, r7
 800dc80:	f001 fa56 	bl	800f130 <__mcmp>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	db24      	blt.n	800dcd2 <quorem+0xf2>
 800dc88:	3601      	adds	r6, #1
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f04f 0c00 	mov.w	ip, #0
 800dc90:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc94:	f8d0 e000 	ldr.w	lr, [r0]
 800dc98:	b293      	uxth	r3, r2
 800dc9a:	ebac 0303 	sub.w	r3, ip, r3
 800dc9e:	0c12      	lsrs	r2, r2, #16
 800dca0:	fa13 f38e 	uxtah	r3, r3, lr
 800dca4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcb2:	45c1      	cmp	r9, r8
 800dcb4:	f840 3b04 	str.w	r3, [r0], #4
 800dcb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dcbc:	d2e8      	bcs.n	800dc90 <quorem+0xb0>
 800dcbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcc6:	b922      	cbnz	r2, 800dcd2 <quorem+0xf2>
 800dcc8:	3b04      	subs	r3, #4
 800dcca:	429d      	cmp	r5, r3
 800dccc:	461a      	mov	r2, r3
 800dcce:	d30a      	bcc.n	800dce6 <quorem+0x106>
 800dcd0:	613c      	str	r4, [r7, #16]
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	b003      	add	sp, #12
 800dcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcda:	6812      	ldr	r2, [r2, #0]
 800dcdc:	3b04      	subs	r3, #4
 800dcde:	2a00      	cmp	r2, #0
 800dce0:	d1cc      	bne.n	800dc7c <quorem+0x9c>
 800dce2:	3c01      	subs	r4, #1
 800dce4:	e7c7      	b.n	800dc76 <quorem+0x96>
 800dce6:	6812      	ldr	r2, [r2, #0]
 800dce8:	3b04      	subs	r3, #4
 800dcea:	2a00      	cmp	r2, #0
 800dcec:	d1f0      	bne.n	800dcd0 <quorem+0xf0>
 800dcee:	3c01      	subs	r4, #1
 800dcf0:	e7eb      	b.n	800dcca <quorem+0xea>
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	e7ee      	b.n	800dcd4 <quorem+0xf4>
	...

0800dcf8 <_dtoa_r>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	ed2d 8b02 	vpush	{d8}
 800dd00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd02:	b091      	sub	sp, #68	; 0x44
 800dd04:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd08:	ec59 8b10 	vmov	r8, r9, d0
 800dd0c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800dd0e:	9106      	str	r1, [sp, #24]
 800dd10:	4606      	mov	r6, r0
 800dd12:	9208      	str	r2, [sp, #32]
 800dd14:	930c      	str	r3, [sp, #48]	; 0x30
 800dd16:	b975      	cbnz	r5, 800dd36 <_dtoa_r+0x3e>
 800dd18:	2010      	movs	r0, #16
 800dd1a:	f000 ff7f 	bl	800ec1c <malloc>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	6270      	str	r0, [r6, #36]	; 0x24
 800dd22:	b920      	cbnz	r0, 800dd2e <_dtoa_r+0x36>
 800dd24:	4baa      	ldr	r3, [pc, #680]	; (800dfd0 <_dtoa_r+0x2d8>)
 800dd26:	21ea      	movs	r1, #234	; 0xea
 800dd28:	48aa      	ldr	r0, [pc, #680]	; (800dfd4 <_dtoa_r+0x2dc>)
 800dd2a:	f001 fdb9 	bl	800f8a0 <__assert_func>
 800dd2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd32:	6005      	str	r5, [r0, #0]
 800dd34:	60c5      	str	r5, [r0, #12]
 800dd36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd38:	6819      	ldr	r1, [r3, #0]
 800dd3a:	b151      	cbz	r1, 800dd52 <_dtoa_r+0x5a>
 800dd3c:	685a      	ldr	r2, [r3, #4]
 800dd3e:	604a      	str	r2, [r1, #4]
 800dd40:	2301      	movs	r3, #1
 800dd42:	4093      	lsls	r3, r2
 800dd44:	608b      	str	r3, [r1, #8]
 800dd46:	4630      	mov	r0, r6
 800dd48:	f000 ffb0 	bl	800ecac <_Bfree>
 800dd4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd4e:	2200      	movs	r2, #0
 800dd50:	601a      	str	r2, [r3, #0]
 800dd52:	f1b9 0300 	subs.w	r3, r9, #0
 800dd56:	bfbb      	ittet	lt
 800dd58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dd5c:	9303      	strlt	r3, [sp, #12]
 800dd5e:	2300      	movge	r3, #0
 800dd60:	2201      	movlt	r2, #1
 800dd62:	bfac      	ite	ge
 800dd64:	6023      	strge	r3, [r4, #0]
 800dd66:	6022      	strlt	r2, [r4, #0]
 800dd68:	4b9b      	ldr	r3, [pc, #620]	; (800dfd8 <_dtoa_r+0x2e0>)
 800dd6a:	9c03      	ldr	r4, [sp, #12]
 800dd6c:	43a3      	bics	r3, r4
 800dd6e:	d11c      	bne.n	800ddaa <_dtoa_r+0xb2>
 800dd70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd72:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800dd7c:	ea53 0308 	orrs.w	r3, r3, r8
 800dd80:	f000 84fd 	beq.w	800e77e <_dtoa_r+0xa86>
 800dd84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd86:	b963      	cbnz	r3, 800dda2 <_dtoa_r+0xaa>
 800dd88:	4b94      	ldr	r3, [pc, #592]	; (800dfdc <_dtoa_r+0x2e4>)
 800dd8a:	e01f      	b.n	800ddcc <_dtoa_r+0xd4>
 800dd8c:	4b94      	ldr	r3, [pc, #592]	; (800dfe0 <_dtoa_r+0x2e8>)
 800dd8e:	9301      	str	r3, [sp, #4]
 800dd90:	3308      	adds	r3, #8
 800dd92:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dd94:	6013      	str	r3, [r2, #0]
 800dd96:	9801      	ldr	r0, [sp, #4]
 800dd98:	b011      	add	sp, #68	; 0x44
 800dd9a:	ecbd 8b02 	vpop	{d8}
 800dd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda2:	4b8e      	ldr	r3, [pc, #568]	; (800dfdc <_dtoa_r+0x2e4>)
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	3303      	adds	r3, #3
 800dda8:	e7f3      	b.n	800dd92 <_dtoa_r+0x9a>
 800ddaa:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ddae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ddb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb6:	d10b      	bne.n	800ddd0 <_dtoa_r+0xd8>
 800ddb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddba:	2301      	movs	r3, #1
 800ddbc:	6013      	str	r3, [r2, #0]
 800ddbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 84d9 	beq.w	800e778 <_dtoa_r+0xa80>
 800ddc6:	4887      	ldr	r0, [pc, #540]	; (800dfe4 <_dtoa_r+0x2ec>)
 800ddc8:	6018      	str	r0, [r3, #0]
 800ddca:	1e43      	subs	r3, r0, #1
 800ddcc:	9301      	str	r3, [sp, #4]
 800ddce:	e7e2      	b.n	800dd96 <_dtoa_r+0x9e>
 800ddd0:	a90f      	add	r1, sp, #60	; 0x3c
 800ddd2:	aa0e      	add	r2, sp, #56	; 0x38
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	eeb0 0b48 	vmov.f64	d0, d8
 800ddda:	f001 fa4f 	bl	800f27c <__d2b>
 800ddde:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800dde2:	4605      	mov	r5, r0
 800dde4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800dde6:	2900      	cmp	r1, #0
 800dde8:	d046      	beq.n	800de78 <_dtoa_r+0x180>
 800ddea:	ee18 4a90 	vmov	r4, s17
 800ddee:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ddf2:	ec53 2b18 	vmov	r2, r3, d8
 800ddf6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ddfa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ddfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800de02:	2400      	movs	r4, #0
 800de04:	ec43 2b16 	vmov	d6, r2, r3
 800de08:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800de0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800dfb8 <_dtoa_r+0x2c0>
 800de10:	ee36 7b47 	vsub.f64	d7, d6, d7
 800de14:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800dfc0 <_dtoa_r+0x2c8>
 800de18:	eea7 6b05 	vfma.f64	d6, d7, d5
 800de1c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800dfc8 <_dtoa_r+0x2d0>
 800de20:	ee07 1a90 	vmov	s15, r1
 800de24:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800de28:	eeb0 7b46 	vmov.f64	d7, d6
 800de2c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800de30:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800de34:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800de38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de3c:	ee16 ba90 	vmov	fp, s13
 800de40:	940a      	str	r4, [sp, #40]	; 0x28
 800de42:	d508      	bpl.n	800de56 <_dtoa_r+0x15e>
 800de44:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800de48:	eeb4 6b47 	vcmp.f64	d6, d7
 800de4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de50:	bf18      	it	ne
 800de52:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800de56:	f1bb 0f16 	cmp.w	fp, #22
 800de5a:	d82f      	bhi.n	800debc <_dtoa_r+0x1c4>
 800de5c:	4b62      	ldr	r3, [pc, #392]	; (800dfe8 <_dtoa_r+0x2f0>)
 800de5e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800de62:	ed93 7b00 	vldr	d7, [r3]
 800de66:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800de6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6e:	d501      	bpl.n	800de74 <_dtoa_r+0x17c>
 800de70:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de74:	2300      	movs	r3, #0
 800de76:	e022      	b.n	800debe <_dtoa_r+0x1c6>
 800de78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800de7a:	4401      	add	r1, r0
 800de7c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800de80:	2b20      	cmp	r3, #32
 800de82:	bfc1      	itttt	gt
 800de84:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800de88:	fa04 f303 	lslgt.w	r3, r4, r3
 800de8c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800de90:	fa28 f804 	lsrgt.w	r8, r8, r4
 800de94:	bfd6      	itet	le
 800de96:	f1c3 0320 	rsble	r3, r3, #32
 800de9a:	ea43 0808 	orrgt.w	r8, r3, r8
 800de9e:	fa08 f803 	lslle.w	r8, r8, r3
 800dea2:	ee07 8a90 	vmov	s15, r8
 800dea6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800deaa:	3901      	subs	r1, #1
 800deac:	ee17 4a90 	vmov	r4, s15
 800deb0:	ec53 2b17 	vmov	r2, r3, d7
 800deb4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800deb8:	2401      	movs	r4, #1
 800deba:	e7a3      	b.n	800de04 <_dtoa_r+0x10c>
 800debc:	2301      	movs	r3, #1
 800debe:	930b      	str	r3, [sp, #44]	; 0x2c
 800dec0:	1a43      	subs	r3, r0, r1
 800dec2:	1e5a      	subs	r2, r3, #1
 800dec4:	bf45      	ittet	mi
 800dec6:	f1c3 0301 	rsbmi	r3, r3, #1
 800deca:	9304      	strmi	r3, [sp, #16]
 800decc:	2300      	movpl	r3, #0
 800dece:	2300      	movmi	r3, #0
 800ded0:	9205      	str	r2, [sp, #20]
 800ded2:	bf54      	ite	pl
 800ded4:	9304      	strpl	r3, [sp, #16]
 800ded6:	9305      	strmi	r3, [sp, #20]
 800ded8:	f1bb 0f00 	cmp.w	fp, #0
 800dedc:	db18      	blt.n	800df10 <_dtoa_r+0x218>
 800dede:	9b05      	ldr	r3, [sp, #20]
 800dee0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800dee4:	445b      	add	r3, fp
 800dee6:	9305      	str	r3, [sp, #20]
 800dee8:	2300      	movs	r3, #0
 800deea:	9a06      	ldr	r2, [sp, #24]
 800deec:	2a09      	cmp	r2, #9
 800deee:	d849      	bhi.n	800df84 <_dtoa_r+0x28c>
 800def0:	2a05      	cmp	r2, #5
 800def2:	bfc4      	itt	gt
 800def4:	3a04      	subgt	r2, #4
 800def6:	9206      	strgt	r2, [sp, #24]
 800def8:	9a06      	ldr	r2, [sp, #24]
 800defa:	f1a2 0202 	sub.w	r2, r2, #2
 800defe:	bfcc      	ite	gt
 800df00:	2400      	movgt	r4, #0
 800df02:	2401      	movle	r4, #1
 800df04:	2a03      	cmp	r2, #3
 800df06:	d848      	bhi.n	800df9a <_dtoa_r+0x2a2>
 800df08:	e8df f002 	tbb	[pc, r2]
 800df0c:	3a2c2e0b 	.word	0x3a2c2e0b
 800df10:	9b04      	ldr	r3, [sp, #16]
 800df12:	2200      	movs	r2, #0
 800df14:	eba3 030b 	sub.w	r3, r3, fp
 800df18:	9304      	str	r3, [sp, #16]
 800df1a:	9209      	str	r2, [sp, #36]	; 0x24
 800df1c:	f1cb 0300 	rsb	r3, fp, #0
 800df20:	e7e3      	b.n	800deea <_dtoa_r+0x1f2>
 800df22:	2200      	movs	r2, #0
 800df24:	9207      	str	r2, [sp, #28]
 800df26:	9a08      	ldr	r2, [sp, #32]
 800df28:	2a00      	cmp	r2, #0
 800df2a:	dc39      	bgt.n	800dfa0 <_dtoa_r+0x2a8>
 800df2c:	f04f 0a01 	mov.w	sl, #1
 800df30:	46d1      	mov	r9, sl
 800df32:	4652      	mov	r2, sl
 800df34:	f8cd a020 	str.w	sl, [sp, #32]
 800df38:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800df3a:	2100      	movs	r1, #0
 800df3c:	6079      	str	r1, [r7, #4]
 800df3e:	2004      	movs	r0, #4
 800df40:	f100 0c14 	add.w	ip, r0, #20
 800df44:	4594      	cmp	ip, r2
 800df46:	6879      	ldr	r1, [r7, #4]
 800df48:	d92f      	bls.n	800dfaa <_dtoa_r+0x2b2>
 800df4a:	4630      	mov	r0, r6
 800df4c:	930d      	str	r3, [sp, #52]	; 0x34
 800df4e:	f000 fe6d 	bl	800ec2c <_Balloc>
 800df52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df54:	9001      	str	r0, [sp, #4]
 800df56:	4602      	mov	r2, r0
 800df58:	2800      	cmp	r0, #0
 800df5a:	d149      	bne.n	800dff0 <_dtoa_r+0x2f8>
 800df5c:	4b23      	ldr	r3, [pc, #140]	; (800dfec <_dtoa_r+0x2f4>)
 800df5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800df62:	e6e1      	b.n	800dd28 <_dtoa_r+0x30>
 800df64:	2201      	movs	r2, #1
 800df66:	e7dd      	b.n	800df24 <_dtoa_r+0x22c>
 800df68:	2200      	movs	r2, #0
 800df6a:	9207      	str	r2, [sp, #28]
 800df6c:	9a08      	ldr	r2, [sp, #32]
 800df6e:	eb0b 0a02 	add.w	sl, fp, r2
 800df72:	f10a 0901 	add.w	r9, sl, #1
 800df76:	464a      	mov	r2, r9
 800df78:	2a01      	cmp	r2, #1
 800df7a:	bfb8      	it	lt
 800df7c:	2201      	movlt	r2, #1
 800df7e:	e7db      	b.n	800df38 <_dtoa_r+0x240>
 800df80:	2201      	movs	r2, #1
 800df82:	e7f2      	b.n	800df6a <_dtoa_r+0x272>
 800df84:	2401      	movs	r4, #1
 800df86:	2200      	movs	r2, #0
 800df88:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800df8c:	f04f 3aff 	mov.w	sl, #4294967295
 800df90:	2100      	movs	r1, #0
 800df92:	46d1      	mov	r9, sl
 800df94:	2212      	movs	r2, #18
 800df96:	9108      	str	r1, [sp, #32]
 800df98:	e7ce      	b.n	800df38 <_dtoa_r+0x240>
 800df9a:	2201      	movs	r2, #1
 800df9c:	9207      	str	r2, [sp, #28]
 800df9e:	e7f5      	b.n	800df8c <_dtoa_r+0x294>
 800dfa0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dfa4:	46d1      	mov	r9, sl
 800dfa6:	4652      	mov	r2, sl
 800dfa8:	e7c6      	b.n	800df38 <_dtoa_r+0x240>
 800dfaa:	3101      	adds	r1, #1
 800dfac:	6079      	str	r1, [r7, #4]
 800dfae:	0040      	lsls	r0, r0, #1
 800dfb0:	e7c6      	b.n	800df40 <_dtoa_r+0x248>
 800dfb2:	bf00      	nop
 800dfb4:	f3af 8000 	nop.w
 800dfb8:	636f4361 	.word	0x636f4361
 800dfbc:	3fd287a7 	.word	0x3fd287a7
 800dfc0:	8b60c8b3 	.word	0x8b60c8b3
 800dfc4:	3fc68a28 	.word	0x3fc68a28
 800dfc8:	509f79fb 	.word	0x509f79fb
 800dfcc:	3fd34413 	.word	0x3fd34413
 800dfd0:	08010081 	.word	0x08010081
 800dfd4:	08010098 	.word	0x08010098
 800dfd8:	7ff00000 	.word	0x7ff00000
 800dfdc:	0801007d 	.word	0x0801007d
 800dfe0:	08010074 	.word	0x08010074
 800dfe4:	08010051 	.word	0x08010051
 800dfe8:	080101e8 	.word	0x080101e8
 800dfec:	080100f3 	.word	0x080100f3
 800dff0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800dff2:	9901      	ldr	r1, [sp, #4]
 800dff4:	6011      	str	r1, [r2, #0]
 800dff6:	f1b9 0f0e 	cmp.w	r9, #14
 800dffa:	d86c      	bhi.n	800e0d6 <_dtoa_r+0x3de>
 800dffc:	2c00      	cmp	r4, #0
 800dffe:	d06a      	beq.n	800e0d6 <_dtoa_r+0x3de>
 800e000:	f1bb 0f00 	cmp.w	fp, #0
 800e004:	f340 80a0 	ble.w	800e148 <_dtoa_r+0x450>
 800e008:	49c1      	ldr	r1, [pc, #772]	; (800e310 <_dtoa_r+0x618>)
 800e00a:	f00b 020f 	and.w	r2, fp, #15
 800e00e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e012:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e016:	ed92 7b00 	vldr	d7, [r2]
 800e01a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e01e:	f000 8087 	beq.w	800e130 <_dtoa_r+0x438>
 800e022:	4abc      	ldr	r2, [pc, #752]	; (800e314 <_dtoa_r+0x61c>)
 800e024:	ed92 6b08 	vldr	d6, [r2, #32]
 800e028:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e02c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e030:	f001 010f 	and.w	r1, r1, #15
 800e034:	2203      	movs	r2, #3
 800e036:	48b7      	ldr	r0, [pc, #732]	; (800e314 <_dtoa_r+0x61c>)
 800e038:	2900      	cmp	r1, #0
 800e03a:	d17b      	bne.n	800e134 <_dtoa_r+0x43c>
 800e03c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e040:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e044:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e04a:	2900      	cmp	r1, #0
 800e04c:	f000 80a2 	beq.w	800e194 <_dtoa_r+0x49c>
 800e050:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e054:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e058:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e060:	f140 8098 	bpl.w	800e194 <_dtoa_r+0x49c>
 800e064:	f1b9 0f00 	cmp.w	r9, #0
 800e068:	f000 8094 	beq.w	800e194 <_dtoa_r+0x49c>
 800e06c:	f1ba 0f00 	cmp.w	sl, #0
 800e070:	dd2f      	ble.n	800e0d2 <_dtoa_r+0x3da>
 800e072:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e076:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e07a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e07e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e082:	3201      	adds	r2, #1
 800e084:	4650      	mov	r0, sl
 800e086:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e08a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e08e:	ee07 2a90 	vmov	s15, r2
 800e092:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e096:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e09a:	ee15 4a90 	vmov	r4, s11
 800e09e:	ec52 1b15 	vmov	r1, r2, d5
 800e0a2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d177      	bne.n	800e19a <_dtoa_r+0x4a2>
 800e0aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e0ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e0b2:	ec42 1b17 	vmov	d7, r1, r2
 800e0b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0be:	f300 8263 	bgt.w	800e588 <_dtoa_r+0x890>
 800e0c2:	eeb1 7b47 	vneg.f64	d7, d7
 800e0c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ce:	f100 8258 	bmi.w	800e582 <_dtoa_r+0x88a>
 800e0d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e0d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e0d8:	2a00      	cmp	r2, #0
 800e0da:	f2c0 811d 	blt.w	800e318 <_dtoa_r+0x620>
 800e0de:	f1bb 0f0e 	cmp.w	fp, #14
 800e0e2:	f300 8119 	bgt.w	800e318 <_dtoa_r+0x620>
 800e0e6:	4b8a      	ldr	r3, [pc, #552]	; (800e310 <_dtoa_r+0x618>)
 800e0e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e0ec:	ed93 6b00 	vldr	d6, [r3]
 800e0f0:	9b08      	ldr	r3, [sp, #32]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f280 80b7 	bge.w	800e266 <_dtoa_r+0x56e>
 800e0f8:	f1b9 0f00 	cmp.w	r9, #0
 800e0fc:	f300 80b3 	bgt.w	800e266 <_dtoa_r+0x56e>
 800e100:	f040 823f 	bne.w	800e582 <_dtoa_r+0x88a>
 800e104:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e108:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e10c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e110:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e118:	464c      	mov	r4, r9
 800e11a:	464f      	mov	r7, r9
 800e11c:	f280 8215 	bge.w	800e54a <_dtoa_r+0x852>
 800e120:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e124:	2331      	movs	r3, #49	; 0x31
 800e126:	f808 3b01 	strb.w	r3, [r8], #1
 800e12a:	f10b 0b01 	add.w	fp, fp, #1
 800e12e:	e211      	b.n	800e554 <_dtoa_r+0x85c>
 800e130:	2202      	movs	r2, #2
 800e132:	e780      	b.n	800e036 <_dtoa_r+0x33e>
 800e134:	07cc      	lsls	r4, r1, #31
 800e136:	d504      	bpl.n	800e142 <_dtoa_r+0x44a>
 800e138:	ed90 6b00 	vldr	d6, [r0]
 800e13c:	3201      	adds	r2, #1
 800e13e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e142:	1049      	asrs	r1, r1, #1
 800e144:	3008      	adds	r0, #8
 800e146:	e777      	b.n	800e038 <_dtoa_r+0x340>
 800e148:	d022      	beq.n	800e190 <_dtoa_r+0x498>
 800e14a:	f1cb 0100 	rsb	r1, fp, #0
 800e14e:	4a70      	ldr	r2, [pc, #448]	; (800e310 <_dtoa_r+0x618>)
 800e150:	f001 000f 	and.w	r0, r1, #15
 800e154:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e158:	ed92 7b00 	vldr	d7, [r2]
 800e15c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e160:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e164:	486b      	ldr	r0, [pc, #428]	; (800e314 <_dtoa_r+0x61c>)
 800e166:	1109      	asrs	r1, r1, #4
 800e168:	2400      	movs	r4, #0
 800e16a:	2202      	movs	r2, #2
 800e16c:	b929      	cbnz	r1, 800e17a <_dtoa_r+0x482>
 800e16e:	2c00      	cmp	r4, #0
 800e170:	f43f af6a 	beq.w	800e048 <_dtoa_r+0x350>
 800e174:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e178:	e766      	b.n	800e048 <_dtoa_r+0x350>
 800e17a:	07cf      	lsls	r7, r1, #31
 800e17c:	d505      	bpl.n	800e18a <_dtoa_r+0x492>
 800e17e:	ed90 6b00 	vldr	d6, [r0]
 800e182:	3201      	adds	r2, #1
 800e184:	2401      	movs	r4, #1
 800e186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e18a:	1049      	asrs	r1, r1, #1
 800e18c:	3008      	adds	r0, #8
 800e18e:	e7ed      	b.n	800e16c <_dtoa_r+0x474>
 800e190:	2202      	movs	r2, #2
 800e192:	e759      	b.n	800e048 <_dtoa_r+0x350>
 800e194:	465f      	mov	r7, fp
 800e196:	4648      	mov	r0, r9
 800e198:	e775      	b.n	800e086 <_dtoa_r+0x38e>
 800e19a:	ec42 1b17 	vmov	d7, r1, r2
 800e19e:	4a5c      	ldr	r2, [pc, #368]	; (800e310 <_dtoa_r+0x618>)
 800e1a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e1a4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e1a8:	9a01      	ldr	r2, [sp, #4]
 800e1aa:	1814      	adds	r4, r2, r0
 800e1ac:	9a07      	ldr	r2, [sp, #28]
 800e1ae:	b352      	cbz	r2, 800e206 <_dtoa_r+0x50e>
 800e1b0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e1b4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e1b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e1bc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e1c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e1c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e1c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e1cc:	ee14 2a90 	vmov	r2, s9
 800e1d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e1d4:	3230      	adds	r2, #48	; 0x30
 800e1d6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e1da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e2:	f808 2b01 	strb.w	r2, [r8], #1
 800e1e6:	d439      	bmi.n	800e25c <_dtoa_r+0x564>
 800e1e8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e1ec:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f4:	d472      	bmi.n	800e2dc <_dtoa_r+0x5e4>
 800e1f6:	45a0      	cmp	r8, r4
 800e1f8:	f43f af6b 	beq.w	800e0d2 <_dtoa_r+0x3da>
 800e1fc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e200:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e204:	e7e0      	b.n	800e1c8 <_dtoa_r+0x4d0>
 800e206:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e20a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e20e:	4621      	mov	r1, r4
 800e210:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e214:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e218:	ee14 2a90 	vmov	r2, s9
 800e21c:	3230      	adds	r2, #48	; 0x30
 800e21e:	f808 2b01 	strb.w	r2, [r8], #1
 800e222:	45a0      	cmp	r8, r4
 800e224:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e228:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e22c:	d118      	bne.n	800e260 <_dtoa_r+0x568>
 800e22e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e232:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e236:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23e:	dc4d      	bgt.n	800e2dc <_dtoa_r+0x5e4>
 800e240:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e244:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e24c:	f57f af41 	bpl.w	800e0d2 <_dtoa_r+0x3da>
 800e250:	4688      	mov	r8, r1
 800e252:	3901      	subs	r1, #1
 800e254:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e258:	2b30      	cmp	r3, #48	; 0x30
 800e25a:	d0f9      	beq.n	800e250 <_dtoa_r+0x558>
 800e25c:	46bb      	mov	fp, r7
 800e25e:	e02a      	b.n	800e2b6 <_dtoa_r+0x5be>
 800e260:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e264:	e7d6      	b.n	800e214 <_dtoa_r+0x51c>
 800e266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e26a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e26e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e272:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e276:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e27a:	ee15 3a10 	vmov	r3, s10
 800e27e:	3330      	adds	r3, #48	; 0x30
 800e280:	f808 3b01 	strb.w	r3, [r8], #1
 800e284:	9b01      	ldr	r3, [sp, #4]
 800e286:	eba8 0303 	sub.w	r3, r8, r3
 800e28a:	4599      	cmp	r9, r3
 800e28c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e290:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e294:	d133      	bne.n	800e2fe <_dtoa_r+0x606>
 800e296:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e29a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a2:	dc1a      	bgt.n	800e2da <_dtoa_r+0x5e2>
 800e2a4:	eeb4 7b46 	vcmp.f64	d7, d6
 800e2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ac:	d103      	bne.n	800e2b6 <_dtoa_r+0x5be>
 800e2ae:	ee15 3a10 	vmov	r3, s10
 800e2b2:	07d9      	lsls	r1, r3, #31
 800e2b4:	d411      	bmi.n	800e2da <_dtoa_r+0x5e2>
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	f000 fcf7 	bl	800ecac <_Bfree>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2c2:	f888 3000 	strb.w	r3, [r8]
 800e2c6:	f10b 0301 	add.w	r3, fp, #1
 800e2ca:	6013      	str	r3, [r2, #0]
 800e2cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f43f ad61 	beq.w	800dd96 <_dtoa_r+0x9e>
 800e2d4:	f8c3 8000 	str.w	r8, [r3]
 800e2d8:	e55d      	b.n	800dd96 <_dtoa_r+0x9e>
 800e2da:	465f      	mov	r7, fp
 800e2dc:	4643      	mov	r3, r8
 800e2de:	4698      	mov	r8, r3
 800e2e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2e4:	2a39      	cmp	r2, #57	; 0x39
 800e2e6:	d106      	bne.n	800e2f6 <_dtoa_r+0x5fe>
 800e2e8:	9a01      	ldr	r2, [sp, #4]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d1f7      	bne.n	800e2de <_dtoa_r+0x5e6>
 800e2ee:	9901      	ldr	r1, [sp, #4]
 800e2f0:	2230      	movs	r2, #48	; 0x30
 800e2f2:	3701      	adds	r7, #1
 800e2f4:	700a      	strb	r2, [r1, #0]
 800e2f6:	781a      	ldrb	r2, [r3, #0]
 800e2f8:	3201      	adds	r2, #1
 800e2fa:	701a      	strb	r2, [r3, #0]
 800e2fc:	e7ae      	b.n	800e25c <_dtoa_r+0x564>
 800e2fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e302:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e30a:	d1b2      	bne.n	800e272 <_dtoa_r+0x57a>
 800e30c:	e7d3      	b.n	800e2b6 <_dtoa_r+0x5be>
 800e30e:	bf00      	nop
 800e310:	080101e8 	.word	0x080101e8
 800e314:	080101c0 	.word	0x080101c0
 800e318:	9907      	ldr	r1, [sp, #28]
 800e31a:	2900      	cmp	r1, #0
 800e31c:	f000 80d0 	beq.w	800e4c0 <_dtoa_r+0x7c8>
 800e320:	9906      	ldr	r1, [sp, #24]
 800e322:	2901      	cmp	r1, #1
 800e324:	f300 80b4 	bgt.w	800e490 <_dtoa_r+0x798>
 800e328:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e32a:	2900      	cmp	r1, #0
 800e32c:	f000 80ac 	beq.w	800e488 <_dtoa_r+0x790>
 800e330:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e334:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e338:	461c      	mov	r4, r3
 800e33a:	930a      	str	r3, [sp, #40]	; 0x28
 800e33c:	9b04      	ldr	r3, [sp, #16]
 800e33e:	4413      	add	r3, r2
 800e340:	9304      	str	r3, [sp, #16]
 800e342:	9b05      	ldr	r3, [sp, #20]
 800e344:	2101      	movs	r1, #1
 800e346:	4413      	add	r3, r2
 800e348:	4630      	mov	r0, r6
 800e34a:	9305      	str	r3, [sp, #20]
 800e34c:	f000 fd66 	bl	800ee1c <__i2b>
 800e350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e352:	4607      	mov	r7, r0
 800e354:	f1b8 0f00 	cmp.w	r8, #0
 800e358:	dd0d      	ble.n	800e376 <_dtoa_r+0x67e>
 800e35a:	9a05      	ldr	r2, [sp, #20]
 800e35c:	2a00      	cmp	r2, #0
 800e35e:	dd0a      	ble.n	800e376 <_dtoa_r+0x67e>
 800e360:	4542      	cmp	r2, r8
 800e362:	9904      	ldr	r1, [sp, #16]
 800e364:	bfa8      	it	ge
 800e366:	4642      	movge	r2, r8
 800e368:	1a89      	subs	r1, r1, r2
 800e36a:	9104      	str	r1, [sp, #16]
 800e36c:	9905      	ldr	r1, [sp, #20]
 800e36e:	eba8 0802 	sub.w	r8, r8, r2
 800e372:	1a8a      	subs	r2, r1, r2
 800e374:	9205      	str	r2, [sp, #20]
 800e376:	b303      	cbz	r3, 800e3ba <_dtoa_r+0x6c2>
 800e378:	9a07      	ldr	r2, [sp, #28]
 800e37a:	2a00      	cmp	r2, #0
 800e37c:	f000 80a5 	beq.w	800e4ca <_dtoa_r+0x7d2>
 800e380:	2c00      	cmp	r4, #0
 800e382:	dd13      	ble.n	800e3ac <_dtoa_r+0x6b4>
 800e384:	4639      	mov	r1, r7
 800e386:	4622      	mov	r2, r4
 800e388:	4630      	mov	r0, r6
 800e38a:	930d      	str	r3, [sp, #52]	; 0x34
 800e38c:	f000 fe06 	bl	800ef9c <__pow5mult>
 800e390:	462a      	mov	r2, r5
 800e392:	4601      	mov	r1, r0
 800e394:	4607      	mov	r7, r0
 800e396:	4630      	mov	r0, r6
 800e398:	f000 fd56 	bl	800ee48 <__multiply>
 800e39c:	4629      	mov	r1, r5
 800e39e:	900a      	str	r0, [sp, #40]	; 0x28
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	f000 fc83 	bl	800ecac <_Bfree>
 800e3a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3aa:	4615      	mov	r5, r2
 800e3ac:	1b1a      	subs	r2, r3, r4
 800e3ae:	d004      	beq.n	800e3ba <_dtoa_r+0x6c2>
 800e3b0:	4629      	mov	r1, r5
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f000 fdf2 	bl	800ef9c <__pow5mult>
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	2101      	movs	r1, #1
 800e3bc:	4630      	mov	r0, r6
 800e3be:	f000 fd2d 	bl	800ee1c <__i2b>
 800e3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	f340 8081 	ble.w	800e4ce <_dtoa_r+0x7d6>
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	4601      	mov	r1, r0
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f000 fde3 	bl	800ef9c <__pow5mult>
 800e3d6:	9b06      	ldr	r3, [sp, #24]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	4604      	mov	r4, r0
 800e3dc:	dd7a      	ble.n	800e4d4 <_dtoa_r+0x7dc>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	930a      	str	r3, [sp, #40]	; 0x28
 800e3e2:	6922      	ldr	r2, [r4, #16]
 800e3e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e3e8:	6910      	ldr	r0, [r2, #16]
 800e3ea:	f000 fcc7 	bl	800ed7c <__hi0bits>
 800e3ee:	f1c0 0020 	rsb	r0, r0, #32
 800e3f2:	9b05      	ldr	r3, [sp, #20]
 800e3f4:	4418      	add	r0, r3
 800e3f6:	f010 001f 	ands.w	r0, r0, #31
 800e3fa:	f000 808c 	beq.w	800e516 <_dtoa_r+0x81e>
 800e3fe:	f1c0 0220 	rsb	r2, r0, #32
 800e402:	2a04      	cmp	r2, #4
 800e404:	f340 8085 	ble.w	800e512 <_dtoa_r+0x81a>
 800e408:	f1c0 001c 	rsb	r0, r0, #28
 800e40c:	9b04      	ldr	r3, [sp, #16]
 800e40e:	4403      	add	r3, r0
 800e410:	9304      	str	r3, [sp, #16]
 800e412:	9b05      	ldr	r3, [sp, #20]
 800e414:	4403      	add	r3, r0
 800e416:	4480      	add	r8, r0
 800e418:	9305      	str	r3, [sp, #20]
 800e41a:	9b04      	ldr	r3, [sp, #16]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dd05      	ble.n	800e42c <_dtoa_r+0x734>
 800e420:	4629      	mov	r1, r5
 800e422:	461a      	mov	r2, r3
 800e424:	4630      	mov	r0, r6
 800e426:	f000 fe13 	bl	800f050 <__lshift>
 800e42a:	4605      	mov	r5, r0
 800e42c:	9b05      	ldr	r3, [sp, #20]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	dd05      	ble.n	800e43e <_dtoa_r+0x746>
 800e432:	4621      	mov	r1, r4
 800e434:	461a      	mov	r2, r3
 800e436:	4630      	mov	r0, r6
 800e438:	f000 fe0a 	bl	800f050 <__lshift>
 800e43c:	4604      	mov	r4, r0
 800e43e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e440:	2b00      	cmp	r3, #0
 800e442:	d06a      	beq.n	800e51a <_dtoa_r+0x822>
 800e444:	4621      	mov	r1, r4
 800e446:	4628      	mov	r0, r5
 800e448:	f000 fe72 	bl	800f130 <__mcmp>
 800e44c:	2800      	cmp	r0, #0
 800e44e:	da64      	bge.n	800e51a <_dtoa_r+0x822>
 800e450:	2300      	movs	r3, #0
 800e452:	4629      	mov	r1, r5
 800e454:	220a      	movs	r2, #10
 800e456:	4630      	mov	r0, r6
 800e458:	f000 fc4a 	bl	800ecf0 <__multadd>
 800e45c:	9b07      	ldr	r3, [sp, #28]
 800e45e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e462:	4605      	mov	r5, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	f000 8191 	beq.w	800e78c <_dtoa_r+0xa94>
 800e46a:	4639      	mov	r1, r7
 800e46c:	2300      	movs	r3, #0
 800e46e:	220a      	movs	r2, #10
 800e470:	4630      	mov	r0, r6
 800e472:	f000 fc3d 	bl	800ecf0 <__multadd>
 800e476:	f1ba 0f00 	cmp.w	sl, #0
 800e47a:	4607      	mov	r7, r0
 800e47c:	f300 808d 	bgt.w	800e59a <_dtoa_r+0x8a2>
 800e480:	9b06      	ldr	r3, [sp, #24]
 800e482:	2b02      	cmp	r3, #2
 800e484:	dc50      	bgt.n	800e528 <_dtoa_r+0x830>
 800e486:	e088      	b.n	800e59a <_dtoa_r+0x8a2>
 800e488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e48a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e48e:	e751      	b.n	800e334 <_dtoa_r+0x63c>
 800e490:	f109 34ff 	add.w	r4, r9, #4294967295
 800e494:	42a3      	cmp	r3, r4
 800e496:	bfbf      	itttt	lt
 800e498:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800e49a:	1ae3      	sublt	r3, r4, r3
 800e49c:	18d2      	addlt	r2, r2, r3
 800e49e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800e4a0:	bfb6      	itet	lt
 800e4a2:	4623      	movlt	r3, r4
 800e4a4:	1b1c      	subge	r4, r3, r4
 800e4a6:	2400      	movlt	r4, #0
 800e4a8:	f1b9 0f00 	cmp.w	r9, #0
 800e4ac:	bfb5      	itete	lt
 800e4ae:	9a04      	ldrlt	r2, [sp, #16]
 800e4b0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800e4b4:	eba2 0809 	sublt.w	r8, r2, r9
 800e4b8:	464a      	movge	r2, r9
 800e4ba:	bfb8      	it	lt
 800e4bc:	2200      	movlt	r2, #0
 800e4be:	e73c      	b.n	800e33a <_dtoa_r+0x642>
 800e4c0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e4c4:	9f07      	ldr	r7, [sp, #28]
 800e4c6:	461c      	mov	r4, r3
 800e4c8:	e744      	b.n	800e354 <_dtoa_r+0x65c>
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	e770      	b.n	800e3b0 <_dtoa_r+0x6b8>
 800e4ce:	9b06      	ldr	r3, [sp, #24]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	dc18      	bgt.n	800e506 <_dtoa_r+0x80e>
 800e4d4:	9b02      	ldr	r3, [sp, #8]
 800e4d6:	b9b3      	cbnz	r3, 800e506 <_dtoa_r+0x80e>
 800e4d8:	9b03      	ldr	r3, [sp, #12]
 800e4da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e4de:	b9a2      	cbnz	r2, 800e50a <_dtoa_r+0x812>
 800e4e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e4e4:	0d12      	lsrs	r2, r2, #20
 800e4e6:	0512      	lsls	r2, r2, #20
 800e4e8:	b18a      	cbz	r2, 800e50e <_dtoa_r+0x816>
 800e4ea:	9b04      	ldr	r3, [sp, #16]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	9304      	str	r3, [sp, #16]
 800e4f0:	9b05      	ldr	r3, [sp, #20]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	9305      	str	r3, [sp, #20]
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	930a      	str	r3, [sp, #40]	; 0x28
 800e4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f47f af70 	bne.w	800e3e2 <_dtoa_r+0x6ea>
 800e502:	2001      	movs	r0, #1
 800e504:	e775      	b.n	800e3f2 <_dtoa_r+0x6fa>
 800e506:	2300      	movs	r3, #0
 800e508:	e7f6      	b.n	800e4f8 <_dtoa_r+0x800>
 800e50a:	9b02      	ldr	r3, [sp, #8]
 800e50c:	e7f4      	b.n	800e4f8 <_dtoa_r+0x800>
 800e50e:	920a      	str	r2, [sp, #40]	; 0x28
 800e510:	e7f3      	b.n	800e4fa <_dtoa_r+0x802>
 800e512:	d082      	beq.n	800e41a <_dtoa_r+0x722>
 800e514:	4610      	mov	r0, r2
 800e516:	301c      	adds	r0, #28
 800e518:	e778      	b.n	800e40c <_dtoa_r+0x714>
 800e51a:	f1b9 0f00 	cmp.w	r9, #0
 800e51e:	dc37      	bgt.n	800e590 <_dtoa_r+0x898>
 800e520:	9b06      	ldr	r3, [sp, #24]
 800e522:	2b02      	cmp	r3, #2
 800e524:	dd34      	ble.n	800e590 <_dtoa_r+0x898>
 800e526:	46ca      	mov	sl, r9
 800e528:	f1ba 0f00 	cmp.w	sl, #0
 800e52c:	d10d      	bne.n	800e54a <_dtoa_r+0x852>
 800e52e:	4621      	mov	r1, r4
 800e530:	4653      	mov	r3, sl
 800e532:	2205      	movs	r2, #5
 800e534:	4630      	mov	r0, r6
 800e536:	f000 fbdb 	bl	800ecf0 <__multadd>
 800e53a:	4601      	mov	r1, r0
 800e53c:	4604      	mov	r4, r0
 800e53e:	4628      	mov	r0, r5
 800e540:	f000 fdf6 	bl	800f130 <__mcmp>
 800e544:	2800      	cmp	r0, #0
 800e546:	f73f adeb 	bgt.w	800e120 <_dtoa_r+0x428>
 800e54a:	9b08      	ldr	r3, [sp, #32]
 800e54c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e550:	ea6f 0b03 	mvn.w	fp, r3
 800e554:	f04f 0900 	mov.w	r9, #0
 800e558:	4621      	mov	r1, r4
 800e55a:	4630      	mov	r0, r6
 800e55c:	f000 fba6 	bl	800ecac <_Bfree>
 800e560:	2f00      	cmp	r7, #0
 800e562:	f43f aea8 	beq.w	800e2b6 <_dtoa_r+0x5be>
 800e566:	f1b9 0f00 	cmp.w	r9, #0
 800e56a:	d005      	beq.n	800e578 <_dtoa_r+0x880>
 800e56c:	45b9      	cmp	r9, r7
 800e56e:	d003      	beq.n	800e578 <_dtoa_r+0x880>
 800e570:	4649      	mov	r1, r9
 800e572:	4630      	mov	r0, r6
 800e574:	f000 fb9a 	bl	800ecac <_Bfree>
 800e578:	4639      	mov	r1, r7
 800e57a:	4630      	mov	r0, r6
 800e57c:	f000 fb96 	bl	800ecac <_Bfree>
 800e580:	e699      	b.n	800e2b6 <_dtoa_r+0x5be>
 800e582:	2400      	movs	r4, #0
 800e584:	4627      	mov	r7, r4
 800e586:	e7e0      	b.n	800e54a <_dtoa_r+0x852>
 800e588:	46bb      	mov	fp, r7
 800e58a:	4604      	mov	r4, r0
 800e58c:	4607      	mov	r7, r0
 800e58e:	e5c7      	b.n	800e120 <_dtoa_r+0x428>
 800e590:	9b07      	ldr	r3, [sp, #28]
 800e592:	46ca      	mov	sl, r9
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 8100 	beq.w	800e79a <_dtoa_r+0xaa2>
 800e59a:	f1b8 0f00 	cmp.w	r8, #0
 800e59e:	dd05      	ble.n	800e5ac <_dtoa_r+0x8b4>
 800e5a0:	4639      	mov	r1, r7
 800e5a2:	4642      	mov	r2, r8
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	f000 fd53 	bl	800f050 <__lshift>
 800e5aa:	4607      	mov	r7, r0
 800e5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d05d      	beq.n	800e66e <_dtoa_r+0x976>
 800e5b2:	6879      	ldr	r1, [r7, #4]
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f000 fb39 	bl	800ec2c <_Balloc>
 800e5ba:	4680      	mov	r8, r0
 800e5bc:	b928      	cbnz	r0, 800e5ca <_dtoa_r+0x8d2>
 800e5be:	4b82      	ldr	r3, [pc, #520]	; (800e7c8 <_dtoa_r+0xad0>)
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e5c6:	f7ff bbaf 	b.w	800dd28 <_dtoa_r+0x30>
 800e5ca:	693a      	ldr	r2, [r7, #16]
 800e5cc:	3202      	adds	r2, #2
 800e5ce:	0092      	lsls	r2, r2, #2
 800e5d0:	f107 010c 	add.w	r1, r7, #12
 800e5d4:	300c      	adds	r0, #12
 800e5d6:	f7fe fd5d 	bl	800d094 <memcpy>
 800e5da:	2201      	movs	r2, #1
 800e5dc:	4641      	mov	r1, r8
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f000 fd36 	bl	800f050 <__lshift>
 800e5e4:	9b01      	ldr	r3, [sp, #4]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	9304      	str	r3, [sp, #16]
 800e5ea:	9b01      	ldr	r3, [sp, #4]
 800e5ec:	4453      	add	r3, sl
 800e5ee:	9308      	str	r3, [sp, #32]
 800e5f0:	9b02      	ldr	r3, [sp, #8]
 800e5f2:	f003 0301 	and.w	r3, r3, #1
 800e5f6:	46b9      	mov	r9, r7
 800e5f8:	9307      	str	r3, [sp, #28]
 800e5fa:	4607      	mov	r7, r0
 800e5fc:	9b04      	ldr	r3, [sp, #16]
 800e5fe:	4621      	mov	r1, r4
 800e600:	3b01      	subs	r3, #1
 800e602:	4628      	mov	r0, r5
 800e604:	9302      	str	r3, [sp, #8]
 800e606:	f7ff faeb 	bl	800dbe0 <quorem>
 800e60a:	4603      	mov	r3, r0
 800e60c:	3330      	adds	r3, #48	; 0x30
 800e60e:	9005      	str	r0, [sp, #20]
 800e610:	4649      	mov	r1, r9
 800e612:	4628      	mov	r0, r5
 800e614:	9309      	str	r3, [sp, #36]	; 0x24
 800e616:	f000 fd8b 	bl	800f130 <__mcmp>
 800e61a:	463a      	mov	r2, r7
 800e61c:	4682      	mov	sl, r0
 800e61e:	4621      	mov	r1, r4
 800e620:	4630      	mov	r0, r6
 800e622:	f000 fda1 	bl	800f168 <__mdiff>
 800e626:	68c2      	ldr	r2, [r0, #12]
 800e628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e62a:	4680      	mov	r8, r0
 800e62c:	bb0a      	cbnz	r2, 800e672 <_dtoa_r+0x97a>
 800e62e:	4601      	mov	r1, r0
 800e630:	4628      	mov	r0, r5
 800e632:	f000 fd7d 	bl	800f130 <__mcmp>
 800e636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e638:	4602      	mov	r2, r0
 800e63a:	4641      	mov	r1, r8
 800e63c:	4630      	mov	r0, r6
 800e63e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e642:	f000 fb33 	bl	800ecac <_Bfree>
 800e646:	9b06      	ldr	r3, [sp, #24]
 800e648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e64a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e64e:	ea43 0102 	orr.w	r1, r3, r2
 800e652:	9b07      	ldr	r3, [sp, #28]
 800e654:	430b      	orrs	r3, r1
 800e656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e658:	d10d      	bne.n	800e676 <_dtoa_r+0x97e>
 800e65a:	2b39      	cmp	r3, #57	; 0x39
 800e65c:	d029      	beq.n	800e6b2 <_dtoa_r+0x9ba>
 800e65e:	f1ba 0f00 	cmp.w	sl, #0
 800e662:	dd01      	ble.n	800e668 <_dtoa_r+0x970>
 800e664:	9b05      	ldr	r3, [sp, #20]
 800e666:	3331      	adds	r3, #49	; 0x31
 800e668:	9a02      	ldr	r2, [sp, #8]
 800e66a:	7013      	strb	r3, [r2, #0]
 800e66c:	e774      	b.n	800e558 <_dtoa_r+0x860>
 800e66e:	4638      	mov	r0, r7
 800e670:	e7b8      	b.n	800e5e4 <_dtoa_r+0x8ec>
 800e672:	2201      	movs	r2, #1
 800e674:	e7e1      	b.n	800e63a <_dtoa_r+0x942>
 800e676:	f1ba 0f00 	cmp.w	sl, #0
 800e67a:	db06      	blt.n	800e68a <_dtoa_r+0x992>
 800e67c:	9906      	ldr	r1, [sp, #24]
 800e67e:	ea41 0a0a 	orr.w	sl, r1, sl
 800e682:	9907      	ldr	r1, [sp, #28]
 800e684:	ea5a 0101 	orrs.w	r1, sl, r1
 800e688:	d120      	bne.n	800e6cc <_dtoa_r+0x9d4>
 800e68a:	2a00      	cmp	r2, #0
 800e68c:	ddec      	ble.n	800e668 <_dtoa_r+0x970>
 800e68e:	4629      	mov	r1, r5
 800e690:	2201      	movs	r2, #1
 800e692:	4630      	mov	r0, r6
 800e694:	9304      	str	r3, [sp, #16]
 800e696:	f000 fcdb 	bl	800f050 <__lshift>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4605      	mov	r5, r0
 800e69e:	f000 fd47 	bl	800f130 <__mcmp>
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	9b04      	ldr	r3, [sp, #16]
 800e6a6:	dc02      	bgt.n	800e6ae <_dtoa_r+0x9b6>
 800e6a8:	d1de      	bne.n	800e668 <_dtoa_r+0x970>
 800e6aa:	07da      	lsls	r2, r3, #31
 800e6ac:	d5dc      	bpl.n	800e668 <_dtoa_r+0x970>
 800e6ae:	2b39      	cmp	r3, #57	; 0x39
 800e6b0:	d1d8      	bne.n	800e664 <_dtoa_r+0x96c>
 800e6b2:	9a02      	ldr	r2, [sp, #8]
 800e6b4:	2339      	movs	r3, #57	; 0x39
 800e6b6:	7013      	strb	r3, [r2, #0]
 800e6b8:	4643      	mov	r3, r8
 800e6ba:	4698      	mov	r8, r3
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e6c2:	2a39      	cmp	r2, #57	; 0x39
 800e6c4:	d051      	beq.n	800e76a <_dtoa_r+0xa72>
 800e6c6:	3201      	adds	r2, #1
 800e6c8:	701a      	strb	r2, [r3, #0]
 800e6ca:	e745      	b.n	800e558 <_dtoa_r+0x860>
 800e6cc:	2a00      	cmp	r2, #0
 800e6ce:	dd03      	ble.n	800e6d8 <_dtoa_r+0x9e0>
 800e6d0:	2b39      	cmp	r3, #57	; 0x39
 800e6d2:	d0ee      	beq.n	800e6b2 <_dtoa_r+0x9ba>
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	e7c7      	b.n	800e668 <_dtoa_r+0x970>
 800e6d8:	9a04      	ldr	r2, [sp, #16]
 800e6da:	9908      	ldr	r1, [sp, #32]
 800e6dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e6e0:	428a      	cmp	r2, r1
 800e6e2:	d02b      	beq.n	800e73c <_dtoa_r+0xa44>
 800e6e4:	4629      	mov	r1, r5
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	220a      	movs	r2, #10
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	f000 fb00 	bl	800ecf0 <__multadd>
 800e6f0:	45b9      	cmp	r9, r7
 800e6f2:	4605      	mov	r5, r0
 800e6f4:	f04f 0300 	mov.w	r3, #0
 800e6f8:	f04f 020a 	mov.w	r2, #10
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	4630      	mov	r0, r6
 800e700:	d107      	bne.n	800e712 <_dtoa_r+0xa1a>
 800e702:	f000 faf5 	bl	800ecf0 <__multadd>
 800e706:	4681      	mov	r9, r0
 800e708:	4607      	mov	r7, r0
 800e70a:	9b04      	ldr	r3, [sp, #16]
 800e70c:	3301      	adds	r3, #1
 800e70e:	9304      	str	r3, [sp, #16]
 800e710:	e774      	b.n	800e5fc <_dtoa_r+0x904>
 800e712:	f000 faed 	bl	800ecf0 <__multadd>
 800e716:	4639      	mov	r1, r7
 800e718:	4681      	mov	r9, r0
 800e71a:	2300      	movs	r3, #0
 800e71c:	220a      	movs	r2, #10
 800e71e:	4630      	mov	r0, r6
 800e720:	f000 fae6 	bl	800ecf0 <__multadd>
 800e724:	4607      	mov	r7, r0
 800e726:	e7f0      	b.n	800e70a <_dtoa_r+0xa12>
 800e728:	f1ba 0f00 	cmp.w	sl, #0
 800e72c:	9a01      	ldr	r2, [sp, #4]
 800e72e:	bfcc      	ite	gt
 800e730:	46d0      	movgt	r8, sl
 800e732:	f04f 0801 	movle.w	r8, #1
 800e736:	4490      	add	r8, r2
 800e738:	f04f 0900 	mov.w	r9, #0
 800e73c:	4629      	mov	r1, r5
 800e73e:	2201      	movs	r2, #1
 800e740:	4630      	mov	r0, r6
 800e742:	9302      	str	r3, [sp, #8]
 800e744:	f000 fc84 	bl	800f050 <__lshift>
 800e748:	4621      	mov	r1, r4
 800e74a:	4605      	mov	r5, r0
 800e74c:	f000 fcf0 	bl	800f130 <__mcmp>
 800e750:	2800      	cmp	r0, #0
 800e752:	dcb1      	bgt.n	800e6b8 <_dtoa_r+0x9c0>
 800e754:	d102      	bne.n	800e75c <_dtoa_r+0xa64>
 800e756:	9b02      	ldr	r3, [sp, #8]
 800e758:	07db      	lsls	r3, r3, #31
 800e75a:	d4ad      	bmi.n	800e6b8 <_dtoa_r+0x9c0>
 800e75c:	4643      	mov	r3, r8
 800e75e:	4698      	mov	r8, r3
 800e760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e764:	2a30      	cmp	r2, #48	; 0x30
 800e766:	d0fa      	beq.n	800e75e <_dtoa_r+0xa66>
 800e768:	e6f6      	b.n	800e558 <_dtoa_r+0x860>
 800e76a:	9a01      	ldr	r2, [sp, #4]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d1a4      	bne.n	800e6ba <_dtoa_r+0x9c2>
 800e770:	f10b 0b01 	add.w	fp, fp, #1
 800e774:	2331      	movs	r3, #49	; 0x31
 800e776:	e778      	b.n	800e66a <_dtoa_r+0x972>
 800e778:	4b14      	ldr	r3, [pc, #80]	; (800e7cc <_dtoa_r+0xad4>)
 800e77a:	f7ff bb27 	b.w	800ddcc <_dtoa_r+0xd4>
 800e77e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e780:	2b00      	cmp	r3, #0
 800e782:	f47f ab03 	bne.w	800dd8c <_dtoa_r+0x94>
 800e786:	4b12      	ldr	r3, [pc, #72]	; (800e7d0 <_dtoa_r+0xad8>)
 800e788:	f7ff bb20 	b.w	800ddcc <_dtoa_r+0xd4>
 800e78c:	f1ba 0f00 	cmp.w	sl, #0
 800e790:	dc03      	bgt.n	800e79a <_dtoa_r+0xaa2>
 800e792:	9b06      	ldr	r3, [sp, #24]
 800e794:	2b02      	cmp	r3, #2
 800e796:	f73f aec7 	bgt.w	800e528 <_dtoa_r+0x830>
 800e79a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e79e:	4621      	mov	r1, r4
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f7ff fa1d 	bl	800dbe0 <quorem>
 800e7a6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e7aa:	f808 3b01 	strb.w	r3, [r8], #1
 800e7ae:	9a01      	ldr	r2, [sp, #4]
 800e7b0:	eba8 0202 	sub.w	r2, r8, r2
 800e7b4:	4592      	cmp	sl, r2
 800e7b6:	ddb7      	ble.n	800e728 <_dtoa_r+0xa30>
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	220a      	movs	r2, #10
 800e7be:	4630      	mov	r0, r6
 800e7c0:	f000 fa96 	bl	800ecf0 <__multadd>
 800e7c4:	4605      	mov	r5, r0
 800e7c6:	e7ea      	b.n	800e79e <_dtoa_r+0xaa6>
 800e7c8:	080100f3 	.word	0x080100f3
 800e7cc:	08010050 	.word	0x08010050
 800e7d0:	08010074 	.word	0x08010074

0800e7d4 <__sflush_r>:
 800e7d4:	898a      	ldrh	r2, [r1, #12]
 800e7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7da:	4605      	mov	r5, r0
 800e7dc:	0710      	lsls	r0, r2, #28
 800e7de:	460c      	mov	r4, r1
 800e7e0:	d458      	bmi.n	800e894 <__sflush_r+0xc0>
 800e7e2:	684b      	ldr	r3, [r1, #4]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	dc05      	bgt.n	800e7f4 <__sflush_r+0x20>
 800e7e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	dc02      	bgt.n	800e7f4 <__sflush_r+0x20>
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7f6:	2e00      	cmp	r6, #0
 800e7f8:	d0f9      	beq.n	800e7ee <__sflush_r+0x1a>
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e800:	682f      	ldr	r7, [r5, #0]
 800e802:	602b      	str	r3, [r5, #0]
 800e804:	d032      	beq.n	800e86c <__sflush_r+0x98>
 800e806:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	075a      	lsls	r2, r3, #29
 800e80c:	d505      	bpl.n	800e81a <__sflush_r+0x46>
 800e80e:	6863      	ldr	r3, [r4, #4]
 800e810:	1ac0      	subs	r0, r0, r3
 800e812:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e814:	b10b      	cbz	r3, 800e81a <__sflush_r+0x46>
 800e816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e818:	1ac0      	subs	r0, r0, r3
 800e81a:	2300      	movs	r3, #0
 800e81c:	4602      	mov	r2, r0
 800e81e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e820:	6a21      	ldr	r1, [r4, #32]
 800e822:	4628      	mov	r0, r5
 800e824:	47b0      	blx	r6
 800e826:	1c43      	adds	r3, r0, #1
 800e828:	89a3      	ldrh	r3, [r4, #12]
 800e82a:	d106      	bne.n	800e83a <__sflush_r+0x66>
 800e82c:	6829      	ldr	r1, [r5, #0]
 800e82e:	291d      	cmp	r1, #29
 800e830:	d82c      	bhi.n	800e88c <__sflush_r+0xb8>
 800e832:	4a2a      	ldr	r2, [pc, #168]	; (800e8dc <__sflush_r+0x108>)
 800e834:	40ca      	lsrs	r2, r1
 800e836:	07d6      	lsls	r6, r2, #31
 800e838:	d528      	bpl.n	800e88c <__sflush_r+0xb8>
 800e83a:	2200      	movs	r2, #0
 800e83c:	6062      	str	r2, [r4, #4]
 800e83e:	04d9      	lsls	r1, r3, #19
 800e840:	6922      	ldr	r2, [r4, #16]
 800e842:	6022      	str	r2, [r4, #0]
 800e844:	d504      	bpl.n	800e850 <__sflush_r+0x7c>
 800e846:	1c42      	adds	r2, r0, #1
 800e848:	d101      	bne.n	800e84e <__sflush_r+0x7a>
 800e84a:	682b      	ldr	r3, [r5, #0]
 800e84c:	b903      	cbnz	r3, 800e850 <__sflush_r+0x7c>
 800e84e:	6560      	str	r0, [r4, #84]	; 0x54
 800e850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e852:	602f      	str	r7, [r5, #0]
 800e854:	2900      	cmp	r1, #0
 800e856:	d0ca      	beq.n	800e7ee <__sflush_r+0x1a>
 800e858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e85c:	4299      	cmp	r1, r3
 800e85e:	d002      	beq.n	800e866 <__sflush_r+0x92>
 800e860:	4628      	mov	r0, r5
 800e862:	f000 fd7d 	bl	800f360 <_free_r>
 800e866:	2000      	movs	r0, #0
 800e868:	6360      	str	r0, [r4, #52]	; 0x34
 800e86a:	e7c1      	b.n	800e7f0 <__sflush_r+0x1c>
 800e86c:	6a21      	ldr	r1, [r4, #32]
 800e86e:	2301      	movs	r3, #1
 800e870:	4628      	mov	r0, r5
 800e872:	47b0      	blx	r6
 800e874:	1c41      	adds	r1, r0, #1
 800e876:	d1c7      	bne.n	800e808 <__sflush_r+0x34>
 800e878:	682b      	ldr	r3, [r5, #0]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d0c4      	beq.n	800e808 <__sflush_r+0x34>
 800e87e:	2b1d      	cmp	r3, #29
 800e880:	d001      	beq.n	800e886 <__sflush_r+0xb2>
 800e882:	2b16      	cmp	r3, #22
 800e884:	d101      	bne.n	800e88a <__sflush_r+0xb6>
 800e886:	602f      	str	r7, [r5, #0]
 800e888:	e7b1      	b.n	800e7ee <__sflush_r+0x1a>
 800e88a:	89a3      	ldrh	r3, [r4, #12]
 800e88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e890:	81a3      	strh	r3, [r4, #12]
 800e892:	e7ad      	b.n	800e7f0 <__sflush_r+0x1c>
 800e894:	690f      	ldr	r7, [r1, #16]
 800e896:	2f00      	cmp	r7, #0
 800e898:	d0a9      	beq.n	800e7ee <__sflush_r+0x1a>
 800e89a:	0793      	lsls	r3, r2, #30
 800e89c:	680e      	ldr	r6, [r1, #0]
 800e89e:	bf08      	it	eq
 800e8a0:	694b      	ldreq	r3, [r1, #20]
 800e8a2:	600f      	str	r7, [r1, #0]
 800e8a4:	bf18      	it	ne
 800e8a6:	2300      	movne	r3, #0
 800e8a8:	eba6 0807 	sub.w	r8, r6, r7
 800e8ac:	608b      	str	r3, [r1, #8]
 800e8ae:	f1b8 0f00 	cmp.w	r8, #0
 800e8b2:	dd9c      	ble.n	800e7ee <__sflush_r+0x1a>
 800e8b4:	6a21      	ldr	r1, [r4, #32]
 800e8b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e8b8:	4643      	mov	r3, r8
 800e8ba:	463a      	mov	r2, r7
 800e8bc:	4628      	mov	r0, r5
 800e8be:	47b0      	blx	r6
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	dc06      	bgt.n	800e8d2 <__sflush_r+0xfe>
 800e8c4:	89a3      	ldrh	r3, [r4, #12]
 800e8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ca:	81a3      	strh	r3, [r4, #12]
 800e8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e8d0:	e78e      	b.n	800e7f0 <__sflush_r+0x1c>
 800e8d2:	4407      	add	r7, r0
 800e8d4:	eba8 0800 	sub.w	r8, r8, r0
 800e8d8:	e7e9      	b.n	800e8ae <__sflush_r+0xda>
 800e8da:	bf00      	nop
 800e8dc:	20400001 	.word	0x20400001

0800e8e0 <_fflush_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	690b      	ldr	r3, [r1, #16]
 800e8e4:	4605      	mov	r5, r0
 800e8e6:	460c      	mov	r4, r1
 800e8e8:	b913      	cbnz	r3, 800e8f0 <_fflush_r+0x10>
 800e8ea:	2500      	movs	r5, #0
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	bd38      	pop	{r3, r4, r5, pc}
 800e8f0:	b118      	cbz	r0, 800e8fa <_fflush_r+0x1a>
 800e8f2:	6983      	ldr	r3, [r0, #24]
 800e8f4:	b90b      	cbnz	r3, 800e8fa <_fflush_r+0x1a>
 800e8f6:	f000 f887 	bl	800ea08 <__sinit>
 800e8fa:	4b14      	ldr	r3, [pc, #80]	; (800e94c <_fflush_r+0x6c>)
 800e8fc:	429c      	cmp	r4, r3
 800e8fe:	d11b      	bne.n	800e938 <_fflush_r+0x58>
 800e900:	686c      	ldr	r4, [r5, #4]
 800e902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d0ef      	beq.n	800e8ea <_fflush_r+0xa>
 800e90a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e90c:	07d0      	lsls	r0, r2, #31
 800e90e:	d404      	bmi.n	800e91a <_fflush_r+0x3a>
 800e910:	0599      	lsls	r1, r3, #22
 800e912:	d402      	bmi.n	800e91a <_fflush_r+0x3a>
 800e914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e916:	f000 f91a 	bl	800eb4e <__retarget_lock_acquire_recursive>
 800e91a:	4628      	mov	r0, r5
 800e91c:	4621      	mov	r1, r4
 800e91e:	f7ff ff59 	bl	800e7d4 <__sflush_r>
 800e922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e924:	07da      	lsls	r2, r3, #31
 800e926:	4605      	mov	r5, r0
 800e928:	d4e0      	bmi.n	800e8ec <_fflush_r+0xc>
 800e92a:	89a3      	ldrh	r3, [r4, #12]
 800e92c:	059b      	lsls	r3, r3, #22
 800e92e:	d4dd      	bmi.n	800e8ec <_fflush_r+0xc>
 800e930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e932:	f000 f90d 	bl	800eb50 <__retarget_lock_release_recursive>
 800e936:	e7d9      	b.n	800e8ec <_fflush_r+0xc>
 800e938:	4b05      	ldr	r3, [pc, #20]	; (800e950 <_fflush_r+0x70>)
 800e93a:	429c      	cmp	r4, r3
 800e93c:	d101      	bne.n	800e942 <_fflush_r+0x62>
 800e93e:	68ac      	ldr	r4, [r5, #8]
 800e940:	e7df      	b.n	800e902 <_fflush_r+0x22>
 800e942:	4b04      	ldr	r3, [pc, #16]	; (800e954 <_fflush_r+0x74>)
 800e944:	429c      	cmp	r4, r3
 800e946:	bf08      	it	eq
 800e948:	68ec      	ldreq	r4, [r5, #12]
 800e94a:	e7da      	b.n	800e902 <_fflush_r+0x22>
 800e94c:	08010124 	.word	0x08010124
 800e950:	08010144 	.word	0x08010144
 800e954:	08010104 	.word	0x08010104

0800e958 <std>:
 800e958:	2300      	movs	r3, #0
 800e95a:	b510      	push	{r4, lr}
 800e95c:	4604      	mov	r4, r0
 800e95e:	e9c0 3300 	strd	r3, r3, [r0]
 800e962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e966:	6083      	str	r3, [r0, #8]
 800e968:	8181      	strh	r1, [r0, #12]
 800e96a:	6643      	str	r3, [r0, #100]	; 0x64
 800e96c:	81c2      	strh	r2, [r0, #14]
 800e96e:	6183      	str	r3, [r0, #24]
 800e970:	4619      	mov	r1, r3
 800e972:	2208      	movs	r2, #8
 800e974:	305c      	adds	r0, #92	; 0x5c
 800e976:	f7fe fb9b 	bl	800d0b0 <memset>
 800e97a:	4b05      	ldr	r3, [pc, #20]	; (800e990 <std+0x38>)
 800e97c:	6263      	str	r3, [r4, #36]	; 0x24
 800e97e:	4b05      	ldr	r3, [pc, #20]	; (800e994 <std+0x3c>)
 800e980:	62a3      	str	r3, [r4, #40]	; 0x28
 800e982:	4b05      	ldr	r3, [pc, #20]	; (800e998 <std+0x40>)
 800e984:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e986:	4b05      	ldr	r3, [pc, #20]	; (800e99c <std+0x44>)
 800e988:	6224      	str	r4, [r4, #32]
 800e98a:	6323      	str	r3, [r4, #48]	; 0x30
 800e98c:	bd10      	pop	{r4, pc}
 800e98e:	bf00      	nop
 800e990:	0800f7f5 	.word	0x0800f7f5
 800e994:	0800f817 	.word	0x0800f817
 800e998:	0800f84f 	.word	0x0800f84f
 800e99c:	0800f873 	.word	0x0800f873

0800e9a0 <_cleanup_r>:
 800e9a0:	4901      	ldr	r1, [pc, #4]	; (800e9a8 <_cleanup_r+0x8>)
 800e9a2:	f000 b8af 	b.w	800eb04 <_fwalk_reent>
 800e9a6:	bf00      	nop
 800e9a8:	0800e8e1 	.word	0x0800e8e1

0800e9ac <__sfmoreglue>:
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	2268      	movs	r2, #104	; 0x68
 800e9b0:	1e4d      	subs	r5, r1, #1
 800e9b2:	4355      	muls	r5, r2
 800e9b4:	460e      	mov	r6, r1
 800e9b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e9ba:	f000 fd3d 	bl	800f438 <_malloc_r>
 800e9be:	4604      	mov	r4, r0
 800e9c0:	b140      	cbz	r0, 800e9d4 <__sfmoreglue+0x28>
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	e9c0 1600 	strd	r1, r6, [r0]
 800e9c8:	300c      	adds	r0, #12
 800e9ca:	60a0      	str	r0, [r4, #8]
 800e9cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e9d0:	f7fe fb6e 	bl	800d0b0 <memset>
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	bd70      	pop	{r4, r5, r6, pc}

0800e9d8 <__sfp_lock_acquire>:
 800e9d8:	4801      	ldr	r0, [pc, #4]	; (800e9e0 <__sfp_lock_acquire+0x8>)
 800e9da:	f000 b8b8 	b.w	800eb4e <__retarget_lock_acquire_recursive>
 800e9de:	bf00      	nop
 800e9e0:	200006b5 	.word	0x200006b5

0800e9e4 <__sfp_lock_release>:
 800e9e4:	4801      	ldr	r0, [pc, #4]	; (800e9ec <__sfp_lock_release+0x8>)
 800e9e6:	f000 b8b3 	b.w	800eb50 <__retarget_lock_release_recursive>
 800e9ea:	bf00      	nop
 800e9ec:	200006b5 	.word	0x200006b5

0800e9f0 <__sinit_lock_acquire>:
 800e9f0:	4801      	ldr	r0, [pc, #4]	; (800e9f8 <__sinit_lock_acquire+0x8>)
 800e9f2:	f000 b8ac 	b.w	800eb4e <__retarget_lock_acquire_recursive>
 800e9f6:	bf00      	nop
 800e9f8:	200006b6 	.word	0x200006b6

0800e9fc <__sinit_lock_release>:
 800e9fc:	4801      	ldr	r0, [pc, #4]	; (800ea04 <__sinit_lock_release+0x8>)
 800e9fe:	f000 b8a7 	b.w	800eb50 <__retarget_lock_release_recursive>
 800ea02:	bf00      	nop
 800ea04:	200006b6 	.word	0x200006b6

0800ea08 <__sinit>:
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	f7ff fff0 	bl	800e9f0 <__sinit_lock_acquire>
 800ea10:	69a3      	ldr	r3, [r4, #24]
 800ea12:	b11b      	cbz	r3, 800ea1c <__sinit+0x14>
 800ea14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea18:	f7ff bff0 	b.w	800e9fc <__sinit_lock_release>
 800ea1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea20:	6523      	str	r3, [r4, #80]	; 0x50
 800ea22:	4b13      	ldr	r3, [pc, #76]	; (800ea70 <__sinit+0x68>)
 800ea24:	4a13      	ldr	r2, [pc, #76]	; (800ea74 <__sinit+0x6c>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea2a:	42a3      	cmp	r3, r4
 800ea2c:	bf04      	itt	eq
 800ea2e:	2301      	moveq	r3, #1
 800ea30:	61a3      	streq	r3, [r4, #24]
 800ea32:	4620      	mov	r0, r4
 800ea34:	f000 f820 	bl	800ea78 <__sfp>
 800ea38:	6060      	str	r0, [r4, #4]
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f000 f81c 	bl	800ea78 <__sfp>
 800ea40:	60a0      	str	r0, [r4, #8]
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 f818 	bl	800ea78 <__sfp>
 800ea48:	2200      	movs	r2, #0
 800ea4a:	60e0      	str	r0, [r4, #12]
 800ea4c:	2104      	movs	r1, #4
 800ea4e:	6860      	ldr	r0, [r4, #4]
 800ea50:	f7ff ff82 	bl	800e958 <std>
 800ea54:	68a0      	ldr	r0, [r4, #8]
 800ea56:	2201      	movs	r2, #1
 800ea58:	2109      	movs	r1, #9
 800ea5a:	f7ff ff7d 	bl	800e958 <std>
 800ea5e:	68e0      	ldr	r0, [r4, #12]
 800ea60:	2202      	movs	r2, #2
 800ea62:	2112      	movs	r1, #18
 800ea64:	f7ff ff78 	bl	800e958 <std>
 800ea68:	2301      	movs	r3, #1
 800ea6a:	61a3      	str	r3, [r4, #24]
 800ea6c:	e7d2      	b.n	800ea14 <__sinit+0xc>
 800ea6e:	bf00      	nop
 800ea70:	0801003c 	.word	0x0801003c
 800ea74:	0800e9a1 	.word	0x0800e9a1

0800ea78 <__sfp>:
 800ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7a:	4607      	mov	r7, r0
 800ea7c:	f7ff ffac 	bl	800e9d8 <__sfp_lock_acquire>
 800ea80:	4b1e      	ldr	r3, [pc, #120]	; (800eafc <__sfp+0x84>)
 800ea82:	681e      	ldr	r6, [r3, #0]
 800ea84:	69b3      	ldr	r3, [r6, #24]
 800ea86:	b913      	cbnz	r3, 800ea8e <__sfp+0x16>
 800ea88:	4630      	mov	r0, r6
 800ea8a:	f7ff ffbd 	bl	800ea08 <__sinit>
 800ea8e:	3648      	adds	r6, #72	; 0x48
 800ea90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ea94:	3b01      	subs	r3, #1
 800ea96:	d503      	bpl.n	800eaa0 <__sfp+0x28>
 800ea98:	6833      	ldr	r3, [r6, #0]
 800ea9a:	b30b      	cbz	r3, 800eae0 <__sfp+0x68>
 800ea9c:	6836      	ldr	r6, [r6, #0]
 800ea9e:	e7f7      	b.n	800ea90 <__sfp+0x18>
 800eaa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eaa4:	b9d5      	cbnz	r5, 800eadc <__sfp+0x64>
 800eaa6:	4b16      	ldr	r3, [pc, #88]	; (800eb00 <__sfp+0x88>)
 800eaa8:	60e3      	str	r3, [r4, #12]
 800eaaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eaae:	6665      	str	r5, [r4, #100]	; 0x64
 800eab0:	f000 f84c 	bl	800eb4c <__retarget_lock_init_recursive>
 800eab4:	f7ff ff96 	bl	800e9e4 <__sfp_lock_release>
 800eab8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eabc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eac0:	6025      	str	r5, [r4, #0]
 800eac2:	61a5      	str	r5, [r4, #24]
 800eac4:	2208      	movs	r2, #8
 800eac6:	4629      	mov	r1, r5
 800eac8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eacc:	f7fe faf0 	bl	800d0b0 <memset>
 800ead0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ead4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ead8:	4620      	mov	r0, r4
 800eada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eadc:	3468      	adds	r4, #104	; 0x68
 800eade:	e7d9      	b.n	800ea94 <__sfp+0x1c>
 800eae0:	2104      	movs	r1, #4
 800eae2:	4638      	mov	r0, r7
 800eae4:	f7ff ff62 	bl	800e9ac <__sfmoreglue>
 800eae8:	4604      	mov	r4, r0
 800eaea:	6030      	str	r0, [r6, #0]
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d1d5      	bne.n	800ea9c <__sfp+0x24>
 800eaf0:	f7ff ff78 	bl	800e9e4 <__sfp_lock_release>
 800eaf4:	230c      	movs	r3, #12
 800eaf6:	603b      	str	r3, [r7, #0]
 800eaf8:	e7ee      	b.n	800ead8 <__sfp+0x60>
 800eafa:	bf00      	nop
 800eafc:	0801003c 	.word	0x0801003c
 800eb00:	ffff0001 	.word	0xffff0001

0800eb04 <_fwalk_reent>:
 800eb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb08:	4606      	mov	r6, r0
 800eb0a:	4688      	mov	r8, r1
 800eb0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb10:	2700      	movs	r7, #0
 800eb12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb16:	f1b9 0901 	subs.w	r9, r9, #1
 800eb1a:	d505      	bpl.n	800eb28 <_fwalk_reent+0x24>
 800eb1c:	6824      	ldr	r4, [r4, #0]
 800eb1e:	2c00      	cmp	r4, #0
 800eb20:	d1f7      	bne.n	800eb12 <_fwalk_reent+0xe>
 800eb22:	4638      	mov	r0, r7
 800eb24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb28:	89ab      	ldrh	r3, [r5, #12]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d907      	bls.n	800eb3e <_fwalk_reent+0x3a>
 800eb2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb32:	3301      	adds	r3, #1
 800eb34:	d003      	beq.n	800eb3e <_fwalk_reent+0x3a>
 800eb36:	4629      	mov	r1, r5
 800eb38:	4630      	mov	r0, r6
 800eb3a:	47c0      	blx	r8
 800eb3c:	4307      	orrs	r7, r0
 800eb3e:	3568      	adds	r5, #104	; 0x68
 800eb40:	e7e9      	b.n	800eb16 <_fwalk_reent+0x12>
	...

0800eb44 <_localeconv_r>:
 800eb44:	4800      	ldr	r0, [pc, #0]	; (800eb48 <_localeconv_r+0x4>)
 800eb46:	4770      	bx	lr
 800eb48:	20000194 	.word	0x20000194

0800eb4c <__retarget_lock_init_recursive>:
 800eb4c:	4770      	bx	lr

0800eb4e <__retarget_lock_acquire_recursive>:
 800eb4e:	4770      	bx	lr

0800eb50 <__retarget_lock_release_recursive>:
 800eb50:	4770      	bx	lr

0800eb52 <__swhatbuf_r>:
 800eb52:	b570      	push	{r4, r5, r6, lr}
 800eb54:	460e      	mov	r6, r1
 800eb56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb5a:	2900      	cmp	r1, #0
 800eb5c:	b096      	sub	sp, #88	; 0x58
 800eb5e:	4614      	mov	r4, r2
 800eb60:	461d      	mov	r5, r3
 800eb62:	da08      	bge.n	800eb76 <__swhatbuf_r+0x24>
 800eb64:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	602a      	str	r2, [r5, #0]
 800eb6c:	061a      	lsls	r2, r3, #24
 800eb6e:	d410      	bmi.n	800eb92 <__swhatbuf_r+0x40>
 800eb70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb74:	e00e      	b.n	800eb94 <__swhatbuf_r+0x42>
 800eb76:	466a      	mov	r2, sp
 800eb78:	f000 fed2 	bl	800f920 <_fstat_r>
 800eb7c:	2800      	cmp	r0, #0
 800eb7e:	dbf1      	blt.n	800eb64 <__swhatbuf_r+0x12>
 800eb80:	9a01      	ldr	r2, [sp, #4]
 800eb82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eb86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eb8a:	425a      	negs	r2, r3
 800eb8c:	415a      	adcs	r2, r3
 800eb8e:	602a      	str	r2, [r5, #0]
 800eb90:	e7ee      	b.n	800eb70 <__swhatbuf_r+0x1e>
 800eb92:	2340      	movs	r3, #64	; 0x40
 800eb94:	2000      	movs	r0, #0
 800eb96:	6023      	str	r3, [r4, #0]
 800eb98:	b016      	add	sp, #88	; 0x58
 800eb9a:	bd70      	pop	{r4, r5, r6, pc}

0800eb9c <__smakebuf_r>:
 800eb9c:	898b      	ldrh	r3, [r1, #12]
 800eb9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eba0:	079d      	lsls	r5, r3, #30
 800eba2:	4606      	mov	r6, r0
 800eba4:	460c      	mov	r4, r1
 800eba6:	d507      	bpl.n	800ebb8 <__smakebuf_r+0x1c>
 800eba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ebac:	6023      	str	r3, [r4, #0]
 800ebae:	6123      	str	r3, [r4, #16]
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	6163      	str	r3, [r4, #20]
 800ebb4:	b002      	add	sp, #8
 800ebb6:	bd70      	pop	{r4, r5, r6, pc}
 800ebb8:	ab01      	add	r3, sp, #4
 800ebba:	466a      	mov	r2, sp
 800ebbc:	f7ff ffc9 	bl	800eb52 <__swhatbuf_r>
 800ebc0:	9900      	ldr	r1, [sp, #0]
 800ebc2:	4605      	mov	r5, r0
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f000 fc37 	bl	800f438 <_malloc_r>
 800ebca:	b948      	cbnz	r0, 800ebe0 <__smakebuf_r+0x44>
 800ebcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebd0:	059a      	lsls	r2, r3, #22
 800ebd2:	d4ef      	bmi.n	800ebb4 <__smakebuf_r+0x18>
 800ebd4:	f023 0303 	bic.w	r3, r3, #3
 800ebd8:	f043 0302 	orr.w	r3, r3, #2
 800ebdc:	81a3      	strh	r3, [r4, #12]
 800ebde:	e7e3      	b.n	800eba8 <__smakebuf_r+0xc>
 800ebe0:	4b0d      	ldr	r3, [pc, #52]	; (800ec18 <__smakebuf_r+0x7c>)
 800ebe2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ebe4:	89a3      	ldrh	r3, [r4, #12]
 800ebe6:	6020      	str	r0, [r4, #0]
 800ebe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebec:	81a3      	strh	r3, [r4, #12]
 800ebee:	9b00      	ldr	r3, [sp, #0]
 800ebf0:	6163      	str	r3, [r4, #20]
 800ebf2:	9b01      	ldr	r3, [sp, #4]
 800ebf4:	6120      	str	r0, [r4, #16]
 800ebf6:	b15b      	cbz	r3, 800ec10 <__smakebuf_r+0x74>
 800ebf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f000 fea1 	bl	800f944 <_isatty_r>
 800ec02:	b128      	cbz	r0, 800ec10 <__smakebuf_r+0x74>
 800ec04:	89a3      	ldrh	r3, [r4, #12]
 800ec06:	f023 0303 	bic.w	r3, r3, #3
 800ec0a:	f043 0301 	orr.w	r3, r3, #1
 800ec0e:	81a3      	strh	r3, [r4, #12]
 800ec10:	89a0      	ldrh	r0, [r4, #12]
 800ec12:	4305      	orrs	r5, r0
 800ec14:	81a5      	strh	r5, [r4, #12]
 800ec16:	e7cd      	b.n	800ebb4 <__smakebuf_r+0x18>
 800ec18:	0800e9a1 	.word	0x0800e9a1

0800ec1c <malloc>:
 800ec1c:	4b02      	ldr	r3, [pc, #8]	; (800ec28 <malloc+0xc>)
 800ec1e:	4601      	mov	r1, r0
 800ec20:	6818      	ldr	r0, [r3, #0]
 800ec22:	f000 bc09 	b.w	800f438 <_malloc_r>
 800ec26:	bf00      	nop
 800ec28:	20000040 	.word	0x20000040

0800ec2c <_Balloc>:
 800ec2c:	b570      	push	{r4, r5, r6, lr}
 800ec2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ec30:	4604      	mov	r4, r0
 800ec32:	460d      	mov	r5, r1
 800ec34:	b976      	cbnz	r6, 800ec54 <_Balloc+0x28>
 800ec36:	2010      	movs	r0, #16
 800ec38:	f7ff fff0 	bl	800ec1c <malloc>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	6260      	str	r0, [r4, #36]	; 0x24
 800ec40:	b920      	cbnz	r0, 800ec4c <_Balloc+0x20>
 800ec42:	4b18      	ldr	r3, [pc, #96]	; (800eca4 <_Balloc+0x78>)
 800ec44:	4818      	ldr	r0, [pc, #96]	; (800eca8 <_Balloc+0x7c>)
 800ec46:	2166      	movs	r1, #102	; 0x66
 800ec48:	f000 fe2a 	bl	800f8a0 <__assert_func>
 800ec4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec50:	6006      	str	r6, [r0, #0]
 800ec52:	60c6      	str	r6, [r0, #12]
 800ec54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ec56:	68f3      	ldr	r3, [r6, #12]
 800ec58:	b183      	cbz	r3, 800ec7c <_Balloc+0x50>
 800ec5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec62:	b9b8      	cbnz	r0, 800ec94 <_Balloc+0x68>
 800ec64:	2101      	movs	r1, #1
 800ec66:	fa01 f605 	lsl.w	r6, r1, r5
 800ec6a:	1d72      	adds	r2, r6, #5
 800ec6c:	0092      	lsls	r2, r2, #2
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f000 fb60 	bl	800f334 <_calloc_r>
 800ec74:	b160      	cbz	r0, 800ec90 <_Balloc+0x64>
 800ec76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec7a:	e00e      	b.n	800ec9a <_Balloc+0x6e>
 800ec7c:	2221      	movs	r2, #33	; 0x21
 800ec7e:	2104      	movs	r1, #4
 800ec80:	4620      	mov	r0, r4
 800ec82:	f000 fb57 	bl	800f334 <_calloc_r>
 800ec86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec88:	60f0      	str	r0, [r6, #12]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d1e4      	bne.n	800ec5a <_Balloc+0x2e>
 800ec90:	2000      	movs	r0, #0
 800ec92:	bd70      	pop	{r4, r5, r6, pc}
 800ec94:	6802      	ldr	r2, [r0, #0]
 800ec96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eca0:	e7f7      	b.n	800ec92 <_Balloc+0x66>
 800eca2:	bf00      	nop
 800eca4:	08010081 	.word	0x08010081
 800eca8:	08010164 	.word	0x08010164

0800ecac <_Bfree>:
 800ecac:	b570      	push	{r4, r5, r6, lr}
 800ecae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ecb0:	4605      	mov	r5, r0
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	b976      	cbnz	r6, 800ecd4 <_Bfree+0x28>
 800ecb6:	2010      	movs	r0, #16
 800ecb8:	f7ff ffb0 	bl	800ec1c <malloc>
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	6268      	str	r0, [r5, #36]	; 0x24
 800ecc0:	b920      	cbnz	r0, 800eccc <_Bfree+0x20>
 800ecc2:	4b09      	ldr	r3, [pc, #36]	; (800ece8 <_Bfree+0x3c>)
 800ecc4:	4809      	ldr	r0, [pc, #36]	; (800ecec <_Bfree+0x40>)
 800ecc6:	218a      	movs	r1, #138	; 0x8a
 800ecc8:	f000 fdea 	bl	800f8a0 <__assert_func>
 800eccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecd0:	6006      	str	r6, [r0, #0]
 800ecd2:	60c6      	str	r6, [r0, #12]
 800ecd4:	b13c      	cbz	r4, 800ece6 <_Bfree+0x3a>
 800ecd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ecd8:	6862      	ldr	r2, [r4, #4]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ece0:	6021      	str	r1, [r4, #0]
 800ece2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ece6:	bd70      	pop	{r4, r5, r6, pc}
 800ece8:	08010081 	.word	0x08010081
 800ecec:	08010164 	.word	0x08010164

0800ecf0 <__multadd>:
 800ecf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf4:	690d      	ldr	r5, [r1, #16]
 800ecf6:	4607      	mov	r7, r0
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	461e      	mov	r6, r3
 800ecfc:	f101 0c14 	add.w	ip, r1, #20
 800ed00:	2000      	movs	r0, #0
 800ed02:	f8dc 3000 	ldr.w	r3, [ip]
 800ed06:	b299      	uxth	r1, r3
 800ed08:	fb02 6101 	mla	r1, r2, r1, r6
 800ed0c:	0c1e      	lsrs	r6, r3, #16
 800ed0e:	0c0b      	lsrs	r3, r1, #16
 800ed10:	fb02 3306 	mla	r3, r2, r6, r3
 800ed14:	b289      	uxth	r1, r1
 800ed16:	3001      	adds	r0, #1
 800ed18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed1c:	4285      	cmp	r5, r0
 800ed1e:	f84c 1b04 	str.w	r1, [ip], #4
 800ed22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed26:	dcec      	bgt.n	800ed02 <__multadd+0x12>
 800ed28:	b30e      	cbz	r6, 800ed6e <__multadd+0x7e>
 800ed2a:	68a3      	ldr	r3, [r4, #8]
 800ed2c:	42ab      	cmp	r3, r5
 800ed2e:	dc19      	bgt.n	800ed64 <__multadd+0x74>
 800ed30:	6861      	ldr	r1, [r4, #4]
 800ed32:	4638      	mov	r0, r7
 800ed34:	3101      	adds	r1, #1
 800ed36:	f7ff ff79 	bl	800ec2c <_Balloc>
 800ed3a:	4680      	mov	r8, r0
 800ed3c:	b928      	cbnz	r0, 800ed4a <__multadd+0x5a>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	4b0c      	ldr	r3, [pc, #48]	; (800ed74 <__multadd+0x84>)
 800ed42:	480d      	ldr	r0, [pc, #52]	; (800ed78 <__multadd+0x88>)
 800ed44:	21b5      	movs	r1, #181	; 0xb5
 800ed46:	f000 fdab 	bl	800f8a0 <__assert_func>
 800ed4a:	6922      	ldr	r2, [r4, #16]
 800ed4c:	3202      	adds	r2, #2
 800ed4e:	f104 010c 	add.w	r1, r4, #12
 800ed52:	0092      	lsls	r2, r2, #2
 800ed54:	300c      	adds	r0, #12
 800ed56:	f7fe f99d 	bl	800d094 <memcpy>
 800ed5a:	4621      	mov	r1, r4
 800ed5c:	4638      	mov	r0, r7
 800ed5e:	f7ff ffa5 	bl	800ecac <_Bfree>
 800ed62:	4644      	mov	r4, r8
 800ed64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed68:	3501      	adds	r5, #1
 800ed6a:	615e      	str	r6, [r3, #20]
 800ed6c:	6125      	str	r5, [r4, #16]
 800ed6e:	4620      	mov	r0, r4
 800ed70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed74:	080100f3 	.word	0x080100f3
 800ed78:	08010164 	.word	0x08010164

0800ed7c <__hi0bits>:
 800ed7c:	0c03      	lsrs	r3, r0, #16
 800ed7e:	041b      	lsls	r3, r3, #16
 800ed80:	b9d3      	cbnz	r3, 800edb8 <__hi0bits+0x3c>
 800ed82:	0400      	lsls	r0, r0, #16
 800ed84:	2310      	movs	r3, #16
 800ed86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ed8a:	bf04      	itt	eq
 800ed8c:	0200      	lsleq	r0, r0, #8
 800ed8e:	3308      	addeq	r3, #8
 800ed90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ed94:	bf04      	itt	eq
 800ed96:	0100      	lsleq	r0, r0, #4
 800ed98:	3304      	addeq	r3, #4
 800ed9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ed9e:	bf04      	itt	eq
 800eda0:	0080      	lsleq	r0, r0, #2
 800eda2:	3302      	addeq	r3, #2
 800eda4:	2800      	cmp	r0, #0
 800eda6:	db05      	blt.n	800edb4 <__hi0bits+0x38>
 800eda8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800edac:	f103 0301 	add.w	r3, r3, #1
 800edb0:	bf08      	it	eq
 800edb2:	2320      	moveq	r3, #32
 800edb4:	4618      	mov	r0, r3
 800edb6:	4770      	bx	lr
 800edb8:	2300      	movs	r3, #0
 800edba:	e7e4      	b.n	800ed86 <__hi0bits+0xa>

0800edbc <__lo0bits>:
 800edbc:	6803      	ldr	r3, [r0, #0]
 800edbe:	f013 0207 	ands.w	r2, r3, #7
 800edc2:	4601      	mov	r1, r0
 800edc4:	d00b      	beq.n	800edde <__lo0bits+0x22>
 800edc6:	07da      	lsls	r2, r3, #31
 800edc8:	d423      	bmi.n	800ee12 <__lo0bits+0x56>
 800edca:	0798      	lsls	r0, r3, #30
 800edcc:	bf49      	itett	mi
 800edce:	085b      	lsrmi	r3, r3, #1
 800edd0:	089b      	lsrpl	r3, r3, #2
 800edd2:	2001      	movmi	r0, #1
 800edd4:	600b      	strmi	r3, [r1, #0]
 800edd6:	bf5c      	itt	pl
 800edd8:	600b      	strpl	r3, [r1, #0]
 800edda:	2002      	movpl	r0, #2
 800eddc:	4770      	bx	lr
 800edde:	b298      	uxth	r0, r3
 800ede0:	b9a8      	cbnz	r0, 800ee0e <__lo0bits+0x52>
 800ede2:	0c1b      	lsrs	r3, r3, #16
 800ede4:	2010      	movs	r0, #16
 800ede6:	b2da      	uxtb	r2, r3
 800ede8:	b90a      	cbnz	r2, 800edee <__lo0bits+0x32>
 800edea:	3008      	adds	r0, #8
 800edec:	0a1b      	lsrs	r3, r3, #8
 800edee:	071a      	lsls	r2, r3, #28
 800edf0:	bf04      	itt	eq
 800edf2:	091b      	lsreq	r3, r3, #4
 800edf4:	3004      	addeq	r0, #4
 800edf6:	079a      	lsls	r2, r3, #30
 800edf8:	bf04      	itt	eq
 800edfa:	089b      	lsreq	r3, r3, #2
 800edfc:	3002      	addeq	r0, #2
 800edfe:	07da      	lsls	r2, r3, #31
 800ee00:	d403      	bmi.n	800ee0a <__lo0bits+0x4e>
 800ee02:	085b      	lsrs	r3, r3, #1
 800ee04:	f100 0001 	add.w	r0, r0, #1
 800ee08:	d005      	beq.n	800ee16 <__lo0bits+0x5a>
 800ee0a:	600b      	str	r3, [r1, #0]
 800ee0c:	4770      	bx	lr
 800ee0e:	4610      	mov	r0, r2
 800ee10:	e7e9      	b.n	800ede6 <__lo0bits+0x2a>
 800ee12:	2000      	movs	r0, #0
 800ee14:	4770      	bx	lr
 800ee16:	2020      	movs	r0, #32
 800ee18:	4770      	bx	lr
	...

0800ee1c <__i2b>:
 800ee1c:	b510      	push	{r4, lr}
 800ee1e:	460c      	mov	r4, r1
 800ee20:	2101      	movs	r1, #1
 800ee22:	f7ff ff03 	bl	800ec2c <_Balloc>
 800ee26:	4602      	mov	r2, r0
 800ee28:	b928      	cbnz	r0, 800ee36 <__i2b+0x1a>
 800ee2a:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <__i2b+0x24>)
 800ee2c:	4805      	ldr	r0, [pc, #20]	; (800ee44 <__i2b+0x28>)
 800ee2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ee32:	f000 fd35 	bl	800f8a0 <__assert_func>
 800ee36:	2301      	movs	r3, #1
 800ee38:	6144      	str	r4, [r0, #20]
 800ee3a:	6103      	str	r3, [r0, #16]
 800ee3c:	bd10      	pop	{r4, pc}
 800ee3e:	bf00      	nop
 800ee40:	080100f3 	.word	0x080100f3
 800ee44:	08010164 	.word	0x08010164

0800ee48 <__multiply>:
 800ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4c:	4691      	mov	r9, r2
 800ee4e:	690a      	ldr	r2, [r1, #16]
 800ee50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	bfb8      	it	lt
 800ee58:	460b      	movlt	r3, r1
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	bfbc      	itt	lt
 800ee5e:	464c      	movlt	r4, r9
 800ee60:	4699      	movlt	r9, r3
 800ee62:	6927      	ldr	r7, [r4, #16]
 800ee64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ee68:	68a3      	ldr	r3, [r4, #8]
 800ee6a:	6861      	ldr	r1, [r4, #4]
 800ee6c:	eb07 060a 	add.w	r6, r7, sl
 800ee70:	42b3      	cmp	r3, r6
 800ee72:	b085      	sub	sp, #20
 800ee74:	bfb8      	it	lt
 800ee76:	3101      	addlt	r1, #1
 800ee78:	f7ff fed8 	bl	800ec2c <_Balloc>
 800ee7c:	b930      	cbnz	r0, 800ee8c <__multiply+0x44>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	4b44      	ldr	r3, [pc, #272]	; (800ef94 <__multiply+0x14c>)
 800ee82:	4845      	ldr	r0, [pc, #276]	; (800ef98 <__multiply+0x150>)
 800ee84:	f240 115d 	movw	r1, #349	; 0x15d
 800ee88:	f000 fd0a 	bl	800f8a0 <__assert_func>
 800ee8c:	f100 0514 	add.w	r5, r0, #20
 800ee90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ee94:	462b      	mov	r3, r5
 800ee96:	2200      	movs	r2, #0
 800ee98:	4543      	cmp	r3, r8
 800ee9a:	d321      	bcc.n	800eee0 <__multiply+0x98>
 800ee9c:	f104 0314 	add.w	r3, r4, #20
 800eea0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eea4:	f109 0314 	add.w	r3, r9, #20
 800eea8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eeac:	9202      	str	r2, [sp, #8]
 800eeae:	1b3a      	subs	r2, r7, r4
 800eeb0:	3a15      	subs	r2, #21
 800eeb2:	f022 0203 	bic.w	r2, r2, #3
 800eeb6:	3204      	adds	r2, #4
 800eeb8:	f104 0115 	add.w	r1, r4, #21
 800eebc:	428f      	cmp	r7, r1
 800eebe:	bf38      	it	cc
 800eec0:	2204      	movcc	r2, #4
 800eec2:	9201      	str	r2, [sp, #4]
 800eec4:	9a02      	ldr	r2, [sp, #8]
 800eec6:	9303      	str	r3, [sp, #12]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d80c      	bhi.n	800eee6 <__multiply+0x9e>
 800eecc:	2e00      	cmp	r6, #0
 800eece:	dd03      	ble.n	800eed8 <__multiply+0x90>
 800eed0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d05a      	beq.n	800ef8e <__multiply+0x146>
 800eed8:	6106      	str	r6, [r0, #16]
 800eeda:	b005      	add	sp, #20
 800eedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee0:	f843 2b04 	str.w	r2, [r3], #4
 800eee4:	e7d8      	b.n	800ee98 <__multiply+0x50>
 800eee6:	f8b3 a000 	ldrh.w	sl, [r3]
 800eeea:	f1ba 0f00 	cmp.w	sl, #0
 800eeee:	d024      	beq.n	800ef3a <__multiply+0xf2>
 800eef0:	f104 0e14 	add.w	lr, r4, #20
 800eef4:	46a9      	mov	r9, r5
 800eef6:	f04f 0c00 	mov.w	ip, #0
 800eefa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eefe:	f8d9 1000 	ldr.w	r1, [r9]
 800ef02:	fa1f fb82 	uxth.w	fp, r2
 800ef06:	b289      	uxth	r1, r1
 800ef08:	fb0a 110b 	mla	r1, sl, fp, r1
 800ef0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ef10:	f8d9 2000 	ldr.w	r2, [r9]
 800ef14:	4461      	add	r1, ip
 800ef16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef1a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ef1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ef22:	b289      	uxth	r1, r1
 800ef24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ef28:	4577      	cmp	r7, lr
 800ef2a:	f849 1b04 	str.w	r1, [r9], #4
 800ef2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef32:	d8e2      	bhi.n	800eefa <__multiply+0xb2>
 800ef34:	9a01      	ldr	r2, [sp, #4]
 800ef36:	f845 c002 	str.w	ip, [r5, r2]
 800ef3a:	9a03      	ldr	r2, [sp, #12]
 800ef3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ef40:	3304      	adds	r3, #4
 800ef42:	f1b9 0f00 	cmp.w	r9, #0
 800ef46:	d020      	beq.n	800ef8a <__multiply+0x142>
 800ef48:	6829      	ldr	r1, [r5, #0]
 800ef4a:	f104 0c14 	add.w	ip, r4, #20
 800ef4e:	46ae      	mov	lr, r5
 800ef50:	f04f 0a00 	mov.w	sl, #0
 800ef54:	f8bc b000 	ldrh.w	fp, [ip]
 800ef58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ef5c:	fb09 220b 	mla	r2, r9, fp, r2
 800ef60:	4492      	add	sl, r2
 800ef62:	b289      	uxth	r1, r1
 800ef64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ef68:	f84e 1b04 	str.w	r1, [lr], #4
 800ef6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ef70:	f8be 1000 	ldrh.w	r1, [lr]
 800ef74:	0c12      	lsrs	r2, r2, #16
 800ef76:	fb09 1102 	mla	r1, r9, r2, r1
 800ef7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ef7e:	4567      	cmp	r7, ip
 800ef80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ef84:	d8e6      	bhi.n	800ef54 <__multiply+0x10c>
 800ef86:	9a01      	ldr	r2, [sp, #4]
 800ef88:	50a9      	str	r1, [r5, r2]
 800ef8a:	3504      	adds	r5, #4
 800ef8c:	e79a      	b.n	800eec4 <__multiply+0x7c>
 800ef8e:	3e01      	subs	r6, #1
 800ef90:	e79c      	b.n	800eecc <__multiply+0x84>
 800ef92:	bf00      	nop
 800ef94:	080100f3 	.word	0x080100f3
 800ef98:	08010164 	.word	0x08010164

0800ef9c <__pow5mult>:
 800ef9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efa0:	4615      	mov	r5, r2
 800efa2:	f012 0203 	ands.w	r2, r2, #3
 800efa6:	4606      	mov	r6, r0
 800efa8:	460f      	mov	r7, r1
 800efaa:	d007      	beq.n	800efbc <__pow5mult+0x20>
 800efac:	4c25      	ldr	r4, [pc, #148]	; (800f044 <__pow5mult+0xa8>)
 800efae:	3a01      	subs	r2, #1
 800efb0:	2300      	movs	r3, #0
 800efb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800efb6:	f7ff fe9b 	bl	800ecf0 <__multadd>
 800efba:	4607      	mov	r7, r0
 800efbc:	10ad      	asrs	r5, r5, #2
 800efbe:	d03d      	beq.n	800f03c <__pow5mult+0xa0>
 800efc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800efc2:	b97c      	cbnz	r4, 800efe4 <__pow5mult+0x48>
 800efc4:	2010      	movs	r0, #16
 800efc6:	f7ff fe29 	bl	800ec1c <malloc>
 800efca:	4602      	mov	r2, r0
 800efcc:	6270      	str	r0, [r6, #36]	; 0x24
 800efce:	b928      	cbnz	r0, 800efdc <__pow5mult+0x40>
 800efd0:	4b1d      	ldr	r3, [pc, #116]	; (800f048 <__pow5mult+0xac>)
 800efd2:	481e      	ldr	r0, [pc, #120]	; (800f04c <__pow5mult+0xb0>)
 800efd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800efd8:	f000 fc62 	bl	800f8a0 <__assert_func>
 800efdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800efe0:	6004      	str	r4, [r0, #0]
 800efe2:	60c4      	str	r4, [r0, #12]
 800efe4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800efe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800efec:	b94c      	cbnz	r4, 800f002 <__pow5mult+0x66>
 800efee:	f240 2171 	movw	r1, #625	; 0x271
 800eff2:	4630      	mov	r0, r6
 800eff4:	f7ff ff12 	bl	800ee1c <__i2b>
 800eff8:	2300      	movs	r3, #0
 800effa:	f8c8 0008 	str.w	r0, [r8, #8]
 800effe:	4604      	mov	r4, r0
 800f000:	6003      	str	r3, [r0, #0]
 800f002:	f04f 0900 	mov.w	r9, #0
 800f006:	07eb      	lsls	r3, r5, #31
 800f008:	d50a      	bpl.n	800f020 <__pow5mult+0x84>
 800f00a:	4639      	mov	r1, r7
 800f00c:	4622      	mov	r2, r4
 800f00e:	4630      	mov	r0, r6
 800f010:	f7ff ff1a 	bl	800ee48 <__multiply>
 800f014:	4639      	mov	r1, r7
 800f016:	4680      	mov	r8, r0
 800f018:	4630      	mov	r0, r6
 800f01a:	f7ff fe47 	bl	800ecac <_Bfree>
 800f01e:	4647      	mov	r7, r8
 800f020:	106d      	asrs	r5, r5, #1
 800f022:	d00b      	beq.n	800f03c <__pow5mult+0xa0>
 800f024:	6820      	ldr	r0, [r4, #0]
 800f026:	b938      	cbnz	r0, 800f038 <__pow5mult+0x9c>
 800f028:	4622      	mov	r2, r4
 800f02a:	4621      	mov	r1, r4
 800f02c:	4630      	mov	r0, r6
 800f02e:	f7ff ff0b 	bl	800ee48 <__multiply>
 800f032:	6020      	str	r0, [r4, #0]
 800f034:	f8c0 9000 	str.w	r9, [r0]
 800f038:	4604      	mov	r4, r0
 800f03a:	e7e4      	b.n	800f006 <__pow5mult+0x6a>
 800f03c:	4638      	mov	r0, r7
 800f03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f042:	bf00      	nop
 800f044:	080102b0 	.word	0x080102b0
 800f048:	08010081 	.word	0x08010081
 800f04c:	08010164 	.word	0x08010164

0800f050 <__lshift>:
 800f050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f054:	460c      	mov	r4, r1
 800f056:	6849      	ldr	r1, [r1, #4]
 800f058:	6923      	ldr	r3, [r4, #16]
 800f05a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f05e:	68a3      	ldr	r3, [r4, #8]
 800f060:	4607      	mov	r7, r0
 800f062:	4691      	mov	r9, r2
 800f064:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f068:	f108 0601 	add.w	r6, r8, #1
 800f06c:	42b3      	cmp	r3, r6
 800f06e:	db0b      	blt.n	800f088 <__lshift+0x38>
 800f070:	4638      	mov	r0, r7
 800f072:	f7ff fddb 	bl	800ec2c <_Balloc>
 800f076:	4605      	mov	r5, r0
 800f078:	b948      	cbnz	r0, 800f08e <__lshift+0x3e>
 800f07a:	4602      	mov	r2, r0
 800f07c:	4b2a      	ldr	r3, [pc, #168]	; (800f128 <__lshift+0xd8>)
 800f07e:	482b      	ldr	r0, [pc, #172]	; (800f12c <__lshift+0xdc>)
 800f080:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f084:	f000 fc0c 	bl	800f8a0 <__assert_func>
 800f088:	3101      	adds	r1, #1
 800f08a:	005b      	lsls	r3, r3, #1
 800f08c:	e7ee      	b.n	800f06c <__lshift+0x1c>
 800f08e:	2300      	movs	r3, #0
 800f090:	f100 0114 	add.w	r1, r0, #20
 800f094:	f100 0210 	add.w	r2, r0, #16
 800f098:	4618      	mov	r0, r3
 800f09a:	4553      	cmp	r3, sl
 800f09c:	db37      	blt.n	800f10e <__lshift+0xbe>
 800f09e:	6920      	ldr	r0, [r4, #16]
 800f0a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0a4:	f104 0314 	add.w	r3, r4, #20
 800f0a8:	f019 091f 	ands.w	r9, r9, #31
 800f0ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f0b4:	d02f      	beq.n	800f116 <__lshift+0xc6>
 800f0b6:	f1c9 0e20 	rsb	lr, r9, #32
 800f0ba:	468a      	mov	sl, r1
 800f0bc:	f04f 0c00 	mov.w	ip, #0
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	fa02 f209 	lsl.w	r2, r2, r9
 800f0c6:	ea42 020c 	orr.w	r2, r2, ip
 800f0ca:	f84a 2b04 	str.w	r2, [sl], #4
 800f0ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0d2:	4298      	cmp	r0, r3
 800f0d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f0d8:	d8f2      	bhi.n	800f0c0 <__lshift+0x70>
 800f0da:	1b03      	subs	r3, r0, r4
 800f0dc:	3b15      	subs	r3, #21
 800f0de:	f023 0303 	bic.w	r3, r3, #3
 800f0e2:	3304      	adds	r3, #4
 800f0e4:	f104 0215 	add.w	r2, r4, #21
 800f0e8:	4290      	cmp	r0, r2
 800f0ea:	bf38      	it	cc
 800f0ec:	2304      	movcc	r3, #4
 800f0ee:	f841 c003 	str.w	ip, [r1, r3]
 800f0f2:	f1bc 0f00 	cmp.w	ip, #0
 800f0f6:	d001      	beq.n	800f0fc <__lshift+0xac>
 800f0f8:	f108 0602 	add.w	r6, r8, #2
 800f0fc:	3e01      	subs	r6, #1
 800f0fe:	4638      	mov	r0, r7
 800f100:	612e      	str	r6, [r5, #16]
 800f102:	4621      	mov	r1, r4
 800f104:	f7ff fdd2 	bl	800ecac <_Bfree>
 800f108:	4628      	mov	r0, r5
 800f10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f10e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f112:	3301      	adds	r3, #1
 800f114:	e7c1      	b.n	800f09a <__lshift+0x4a>
 800f116:	3904      	subs	r1, #4
 800f118:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f120:	4298      	cmp	r0, r3
 800f122:	d8f9      	bhi.n	800f118 <__lshift+0xc8>
 800f124:	e7ea      	b.n	800f0fc <__lshift+0xac>
 800f126:	bf00      	nop
 800f128:	080100f3 	.word	0x080100f3
 800f12c:	08010164 	.word	0x08010164

0800f130 <__mcmp>:
 800f130:	b530      	push	{r4, r5, lr}
 800f132:	6902      	ldr	r2, [r0, #16]
 800f134:	690c      	ldr	r4, [r1, #16]
 800f136:	1b12      	subs	r2, r2, r4
 800f138:	d10e      	bne.n	800f158 <__mcmp+0x28>
 800f13a:	f100 0314 	add.w	r3, r0, #20
 800f13e:	3114      	adds	r1, #20
 800f140:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f144:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f148:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f14c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f150:	42a5      	cmp	r5, r4
 800f152:	d003      	beq.n	800f15c <__mcmp+0x2c>
 800f154:	d305      	bcc.n	800f162 <__mcmp+0x32>
 800f156:	2201      	movs	r2, #1
 800f158:	4610      	mov	r0, r2
 800f15a:	bd30      	pop	{r4, r5, pc}
 800f15c:	4283      	cmp	r3, r0
 800f15e:	d3f3      	bcc.n	800f148 <__mcmp+0x18>
 800f160:	e7fa      	b.n	800f158 <__mcmp+0x28>
 800f162:	f04f 32ff 	mov.w	r2, #4294967295
 800f166:	e7f7      	b.n	800f158 <__mcmp+0x28>

0800f168 <__mdiff>:
 800f168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16c:	460c      	mov	r4, r1
 800f16e:	4606      	mov	r6, r0
 800f170:	4611      	mov	r1, r2
 800f172:	4620      	mov	r0, r4
 800f174:	4690      	mov	r8, r2
 800f176:	f7ff ffdb 	bl	800f130 <__mcmp>
 800f17a:	1e05      	subs	r5, r0, #0
 800f17c:	d110      	bne.n	800f1a0 <__mdiff+0x38>
 800f17e:	4629      	mov	r1, r5
 800f180:	4630      	mov	r0, r6
 800f182:	f7ff fd53 	bl	800ec2c <_Balloc>
 800f186:	b930      	cbnz	r0, 800f196 <__mdiff+0x2e>
 800f188:	4b3a      	ldr	r3, [pc, #232]	; (800f274 <__mdiff+0x10c>)
 800f18a:	4602      	mov	r2, r0
 800f18c:	f240 2132 	movw	r1, #562	; 0x232
 800f190:	4839      	ldr	r0, [pc, #228]	; (800f278 <__mdiff+0x110>)
 800f192:	f000 fb85 	bl	800f8a0 <__assert_func>
 800f196:	2301      	movs	r3, #1
 800f198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f19c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1a0:	bfa4      	itt	ge
 800f1a2:	4643      	movge	r3, r8
 800f1a4:	46a0      	movge	r8, r4
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f1ac:	bfa6      	itte	ge
 800f1ae:	461c      	movge	r4, r3
 800f1b0:	2500      	movge	r5, #0
 800f1b2:	2501      	movlt	r5, #1
 800f1b4:	f7ff fd3a 	bl	800ec2c <_Balloc>
 800f1b8:	b920      	cbnz	r0, 800f1c4 <__mdiff+0x5c>
 800f1ba:	4b2e      	ldr	r3, [pc, #184]	; (800f274 <__mdiff+0x10c>)
 800f1bc:	4602      	mov	r2, r0
 800f1be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f1c2:	e7e5      	b.n	800f190 <__mdiff+0x28>
 800f1c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f1c8:	6926      	ldr	r6, [r4, #16]
 800f1ca:	60c5      	str	r5, [r0, #12]
 800f1cc:	f104 0914 	add.w	r9, r4, #20
 800f1d0:	f108 0514 	add.w	r5, r8, #20
 800f1d4:	f100 0e14 	add.w	lr, r0, #20
 800f1d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f1dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f1e0:	f108 0210 	add.w	r2, r8, #16
 800f1e4:	46f2      	mov	sl, lr
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f1ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f1f0:	fa1f f883 	uxth.w	r8, r3
 800f1f4:	fa11 f18b 	uxtah	r1, r1, fp
 800f1f8:	0c1b      	lsrs	r3, r3, #16
 800f1fa:	eba1 0808 	sub.w	r8, r1, r8
 800f1fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f202:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f206:	fa1f f888 	uxth.w	r8, r8
 800f20a:	1419      	asrs	r1, r3, #16
 800f20c:	454e      	cmp	r6, r9
 800f20e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f212:	f84a 3b04 	str.w	r3, [sl], #4
 800f216:	d8e7      	bhi.n	800f1e8 <__mdiff+0x80>
 800f218:	1b33      	subs	r3, r6, r4
 800f21a:	3b15      	subs	r3, #21
 800f21c:	f023 0303 	bic.w	r3, r3, #3
 800f220:	3304      	adds	r3, #4
 800f222:	3415      	adds	r4, #21
 800f224:	42a6      	cmp	r6, r4
 800f226:	bf38      	it	cc
 800f228:	2304      	movcc	r3, #4
 800f22a:	441d      	add	r5, r3
 800f22c:	4473      	add	r3, lr
 800f22e:	469e      	mov	lr, r3
 800f230:	462e      	mov	r6, r5
 800f232:	4566      	cmp	r6, ip
 800f234:	d30e      	bcc.n	800f254 <__mdiff+0xec>
 800f236:	f10c 0203 	add.w	r2, ip, #3
 800f23a:	1b52      	subs	r2, r2, r5
 800f23c:	f022 0203 	bic.w	r2, r2, #3
 800f240:	3d03      	subs	r5, #3
 800f242:	45ac      	cmp	ip, r5
 800f244:	bf38      	it	cc
 800f246:	2200      	movcc	r2, #0
 800f248:	441a      	add	r2, r3
 800f24a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f24e:	b17b      	cbz	r3, 800f270 <__mdiff+0x108>
 800f250:	6107      	str	r7, [r0, #16]
 800f252:	e7a3      	b.n	800f19c <__mdiff+0x34>
 800f254:	f856 8b04 	ldr.w	r8, [r6], #4
 800f258:	fa11 f288 	uxtah	r2, r1, r8
 800f25c:	1414      	asrs	r4, r2, #16
 800f25e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f262:	b292      	uxth	r2, r2
 800f264:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f268:	f84e 2b04 	str.w	r2, [lr], #4
 800f26c:	1421      	asrs	r1, r4, #16
 800f26e:	e7e0      	b.n	800f232 <__mdiff+0xca>
 800f270:	3f01      	subs	r7, #1
 800f272:	e7ea      	b.n	800f24a <__mdiff+0xe2>
 800f274:	080100f3 	.word	0x080100f3
 800f278:	08010164 	.word	0x08010164

0800f27c <__d2b>:
 800f27c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f280:	4689      	mov	r9, r1
 800f282:	2101      	movs	r1, #1
 800f284:	ec57 6b10 	vmov	r6, r7, d0
 800f288:	4690      	mov	r8, r2
 800f28a:	f7ff fccf 	bl	800ec2c <_Balloc>
 800f28e:	4604      	mov	r4, r0
 800f290:	b930      	cbnz	r0, 800f2a0 <__d2b+0x24>
 800f292:	4602      	mov	r2, r0
 800f294:	4b25      	ldr	r3, [pc, #148]	; (800f32c <__d2b+0xb0>)
 800f296:	4826      	ldr	r0, [pc, #152]	; (800f330 <__d2b+0xb4>)
 800f298:	f240 310a 	movw	r1, #778	; 0x30a
 800f29c:	f000 fb00 	bl	800f8a0 <__assert_func>
 800f2a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f2a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f2a8:	bb35      	cbnz	r5, 800f2f8 <__d2b+0x7c>
 800f2aa:	2e00      	cmp	r6, #0
 800f2ac:	9301      	str	r3, [sp, #4]
 800f2ae:	d028      	beq.n	800f302 <__d2b+0x86>
 800f2b0:	4668      	mov	r0, sp
 800f2b2:	9600      	str	r6, [sp, #0]
 800f2b4:	f7ff fd82 	bl	800edbc <__lo0bits>
 800f2b8:	9900      	ldr	r1, [sp, #0]
 800f2ba:	b300      	cbz	r0, 800f2fe <__d2b+0x82>
 800f2bc:	9a01      	ldr	r2, [sp, #4]
 800f2be:	f1c0 0320 	rsb	r3, r0, #32
 800f2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2c6:	430b      	orrs	r3, r1
 800f2c8:	40c2      	lsrs	r2, r0
 800f2ca:	6163      	str	r3, [r4, #20]
 800f2cc:	9201      	str	r2, [sp, #4]
 800f2ce:	9b01      	ldr	r3, [sp, #4]
 800f2d0:	61a3      	str	r3, [r4, #24]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	bf14      	ite	ne
 800f2d6:	2202      	movne	r2, #2
 800f2d8:	2201      	moveq	r2, #1
 800f2da:	6122      	str	r2, [r4, #16]
 800f2dc:	b1d5      	cbz	r5, 800f314 <__d2b+0x98>
 800f2de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f2e2:	4405      	add	r5, r0
 800f2e4:	f8c9 5000 	str.w	r5, [r9]
 800f2e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f2ec:	f8c8 0000 	str.w	r0, [r8]
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	b003      	add	sp, #12
 800f2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f2fc:	e7d5      	b.n	800f2aa <__d2b+0x2e>
 800f2fe:	6161      	str	r1, [r4, #20]
 800f300:	e7e5      	b.n	800f2ce <__d2b+0x52>
 800f302:	a801      	add	r0, sp, #4
 800f304:	f7ff fd5a 	bl	800edbc <__lo0bits>
 800f308:	9b01      	ldr	r3, [sp, #4]
 800f30a:	6163      	str	r3, [r4, #20]
 800f30c:	2201      	movs	r2, #1
 800f30e:	6122      	str	r2, [r4, #16]
 800f310:	3020      	adds	r0, #32
 800f312:	e7e3      	b.n	800f2dc <__d2b+0x60>
 800f314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f31c:	f8c9 0000 	str.w	r0, [r9]
 800f320:	6918      	ldr	r0, [r3, #16]
 800f322:	f7ff fd2b 	bl	800ed7c <__hi0bits>
 800f326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f32a:	e7df      	b.n	800f2ec <__d2b+0x70>
 800f32c:	080100f3 	.word	0x080100f3
 800f330:	08010164 	.word	0x08010164

0800f334 <_calloc_r>:
 800f334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f336:	fba1 2402 	umull	r2, r4, r1, r2
 800f33a:	b94c      	cbnz	r4, 800f350 <_calloc_r+0x1c>
 800f33c:	4611      	mov	r1, r2
 800f33e:	9201      	str	r2, [sp, #4]
 800f340:	f000 f87a 	bl	800f438 <_malloc_r>
 800f344:	9a01      	ldr	r2, [sp, #4]
 800f346:	4605      	mov	r5, r0
 800f348:	b930      	cbnz	r0, 800f358 <_calloc_r+0x24>
 800f34a:	4628      	mov	r0, r5
 800f34c:	b003      	add	sp, #12
 800f34e:	bd30      	pop	{r4, r5, pc}
 800f350:	220c      	movs	r2, #12
 800f352:	6002      	str	r2, [r0, #0]
 800f354:	2500      	movs	r5, #0
 800f356:	e7f8      	b.n	800f34a <_calloc_r+0x16>
 800f358:	4621      	mov	r1, r4
 800f35a:	f7fd fea9 	bl	800d0b0 <memset>
 800f35e:	e7f4      	b.n	800f34a <_calloc_r+0x16>

0800f360 <_free_r>:
 800f360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f362:	2900      	cmp	r1, #0
 800f364:	d044      	beq.n	800f3f0 <_free_r+0x90>
 800f366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f36a:	9001      	str	r0, [sp, #4]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f1a1 0404 	sub.w	r4, r1, #4
 800f372:	bfb8      	it	lt
 800f374:	18e4      	addlt	r4, r4, r3
 800f376:	f000 fb19 	bl	800f9ac <__malloc_lock>
 800f37a:	4a1e      	ldr	r2, [pc, #120]	; (800f3f4 <_free_r+0x94>)
 800f37c:	9801      	ldr	r0, [sp, #4]
 800f37e:	6813      	ldr	r3, [r2, #0]
 800f380:	b933      	cbnz	r3, 800f390 <_free_r+0x30>
 800f382:	6063      	str	r3, [r4, #4]
 800f384:	6014      	str	r4, [r2, #0]
 800f386:	b003      	add	sp, #12
 800f388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f38c:	f000 bb14 	b.w	800f9b8 <__malloc_unlock>
 800f390:	42a3      	cmp	r3, r4
 800f392:	d908      	bls.n	800f3a6 <_free_r+0x46>
 800f394:	6825      	ldr	r5, [r4, #0]
 800f396:	1961      	adds	r1, r4, r5
 800f398:	428b      	cmp	r3, r1
 800f39a:	bf01      	itttt	eq
 800f39c:	6819      	ldreq	r1, [r3, #0]
 800f39e:	685b      	ldreq	r3, [r3, #4]
 800f3a0:	1949      	addeq	r1, r1, r5
 800f3a2:	6021      	streq	r1, [r4, #0]
 800f3a4:	e7ed      	b.n	800f382 <_free_r+0x22>
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	b10b      	cbz	r3, 800f3b0 <_free_r+0x50>
 800f3ac:	42a3      	cmp	r3, r4
 800f3ae:	d9fa      	bls.n	800f3a6 <_free_r+0x46>
 800f3b0:	6811      	ldr	r1, [r2, #0]
 800f3b2:	1855      	adds	r5, r2, r1
 800f3b4:	42a5      	cmp	r5, r4
 800f3b6:	d10b      	bne.n	800f3d0 <_free_r+0x70>
 800f3b8:	6824      	ldr	r4, [r4, #0]
 800f3ba:	4421      	add	r1, r4
 800f3bc:	1854      	adds	r4, r2, r1
 800f3be:	42a3      	cmp	r3, r4
 800f3c0:	6011      	str	r1, [r2, #0]
 800f3c2:	d1e0      	bne.n	800f386 <_free_r+0x26>
 800f3c4:	681c      	ldr	r4, [r3, #0]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	6053      	str	r3, [r2, #4]
 800f3ca:	4421      	add	r1, r4
 800f3cc:	6011      	str	r1, [r2, #0]
 800f3ce:	e7da      	b.n	800f386 <_free_r+0x26>
 800f3d0:	d902      	bls.n	800f3d8 <_free_r+0x78>
 800f3d2:	230c      	movs	r3, #12
 800f3d4:	6003      	str	r3, [r0, #0]
 800f3d6:	e7d6      	b.n	800f386 <_free_r+0x26>
 800f3d8:	6825      	ldr	r5, [r4, #0]
 800f3da:	1961      	adds	r1, r4, r5
 800f3dc:	428b      	cmp	r3, r1
 800f3de:	bf04      	itt	eq
 800f3e0:	6819      	ldreq	r1, [r3, #0]
 800f3e2:	685b      	ldreq	r3, [r3, #4]
 800f3e4:	6063      	str	r3, [r4, #4]
 800f3e6:	bf04      	itt	eq
 800f3e8:	1949      	addeq	r1, r1, r5
 800f3ea:	6021      	streq	r1, [r4, #0]
 800f3ec:	6054      	str	r4, [r2, #4]
 800f3ee:	e7ca      	b.n	800f386 <_free_r+0x26>
 800f3f0:	b003      	add	sp, #12
 800f3f2:	bd30      	pop	{r4, r5, pc}
 800f3f4:	200006b8 	.word	0x200006b8

0800f3f8 <sbrk_aligned>:
 800f3f8:	b570      	push	{r4, r5, r6, lr}
 800f3fa:	4e0e      	ldr	r6, [pc, #56]	; (800f434 <sbrk_aligned+0x3c>)
 800f3fc:	460c      	mov	r4, r1
 800f3fe:	6831      	ldr	r1, [r6, #0]
 800f400:	4605      	mov	r5, r0
 800f402:	b911      	cbnz	r1, 800f40a <sbrk_aligned+0x12>
 800f404:	f000 f9e6 	bl	800f7d4 <_sbrk_r>
 800f408:	6030      	str	r0, [r6, #0]
 800f40a:	4621      	mov	r1, r4
 800f40c:	4628      	mov	r0, r5
 800f40e:	f000 f9e1 	bl	800f7d4 <_sbrk_r>
 800f412:	1c43      	adds	r3, r0, #1
 800f414:	d00a      	beq.n	800f42c <sbrk_aligned+0x34>
 800f416:	1cc4      	adds	r4, r0, #3
 800f418:	f024 0403 	bic.w	r4, r4, #3
 800f41c:	42a0      	cmp	r0, r4
 800f41e:	d007      	beq.n	800f430 <sbrk_aligned+0x38>
 800f420:	1a21      	subs	r1, r4, r0
 800f422:	4628      	mov	r0, r5
 800f424:	f000 f9d6 	bl	800f7d4 <_sbrk_r>
 800f428:	3001      	adds	r0, #1
 800f42a:	d101      	bne.n	800f430 <sbrk_aligned+0x38>
 800f42c:	f04f 34ff 	mov.w	r4, #4294967295
 800f430:	4620      	mov	r0, r4
 800f432:	bd70      	pop	{r4, r5, r6, pc}
 800f434:	200006bc 	.word	0x200006bc

0800f438 <_malloc_r>:
 800f438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f43c:	1ccd      	adds	r5, r1, #3
 800f43e:	f025 0503 	bic.w	r5, r5, #3
 800f442:	3508      	adds	r5, #8
 800f444:	2d0c      	cmp	r5, #12
 800f446:	bf38      	it	cc
 800f448:	250c      	movcc	r5, #12
 800f44a:	2d00      	cmp	r5, #0
 800f44c:	4607      	mov	r7, r0
 800f44e:	db01      	blt.n	800f454 <_malloc_r+0x1c>
 800f450:	42a9      	cmp	r1, r5
 800f452:	d905      	bls.n	800f460 <_malloc_r+0x28>
 800f454:	230c      	movs	r3, #12
 800f456:	603b      	str	r3, [r7, #0]
 800f458:	2600      	movs	r6, #0
 800f45a:	4630      	mov	r0, r6
 800f45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f460:	4e2e      	ldr	r6, [pc, #184]	; (800f51c <_malloc_r+0xe4>)
 800f462:	f000 faa3 	bl	800f9ac <__malloc_lock>
 800f466:	6833      	ldr	r3, [r6, #0]
 800f468:	461c      	mov	r4, r3
 800f46a:	bb34      	cbnz	r4, 800f4ba <_malloc_r+0x82>
 800f46c:	4629      	mov	r1, r5
 800f46e:	4638      	mov	r0, r7
 800f470:	f7ff ffc2 	bl	800f3f8 <sbrk_aligned>
 800f474:	1c43      	adds	r3, r0, #1
 800f476:	4604      	mov	r4, r0
 800f478:	d14d      	bne.n	800f516 <_malloc_r+0xde>
 800f47a:	6834      	ldr	r4, [r6, #0]
 800f47c:	4626      	mov	r6, r4
 800f47e:	2e00      	cmp	r6, #0
 800f480:	d140      	bne.n	800f504 <_malloc_r+0xcc>
 800f482:	6823      	ldr	r3, [r4, #0]
 800f484:	4631      	mov	r1, r6
 800f486:	4638      	mov	r0, r7
 800f488:	eb04 0803 	add.w	r8, r4, r3
 800f48c:	f000 f9a2 	bl	800f7d4 <_sbrk_r>
 800f490:	4580      	cmp	r8, r0
 800f492:	d13a      	bne.n	800f50a <_malloc_r+0xd2>
 800f494:	6821      	ldr	r1, [r4, #0]
 800f496:	3503      	adds	r5, #3
 800f498:	1a6d      	subs	r5, r5, r1
 800f49a:	f025 0503 	bic.w	r5, r5, #3
 800f49e:	3508      	adds	r5, #8
 800f4a0:	2d0c      	cmp	r5, #12
 800f4a2:	bf38      	it	cc
 800f4a4:	250c      	movcc	r5, #12
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	4638      	mov	r0, r7
 800f4aa:	f7ff ffa5 	bl	800f3f8 <sbrk_aligned>
 800f4ae:	3001      	adds	r0, #1
 800f4b0:	d02b      	beq.n	800f50a <_malloc_r+0xd2>
 800f4b2:	6823      	ldr	r3, [r4, #0]
 800f4b4:	442b      	add	r3, r5
 800f4b6:	6023      	str	r3, [r4, #0]
 800f4b8:	e00e      	b.n	800f4d8 <_malloc_r+0xa0>
 800f4ba:	6822      	ldr	r2, [r4, #0]
 800f4bc:	1b52      	subs	r2, r2, r5
 800f4be:	d41e      	bmi.n	800f4fe <_malloc_r+0xc6>
 800f4c0:	2a0b      	cmp	r2, #11
 800f4c2:	d916      	bls.n	800f4f2 <_malloc_r+0xba>
 800f4c4:	1961      	adds	r1, r4, r5
 800f4c6:	42a3      	cmp	r3, r4
 800f4c8:	6025      	str	r5, [r4, #0]
 800f4ca:	bf18      	it	ne
 800f4cc:	6059      	strne	r1, [r3, #4]
 800f4ce:	6863      	ldr	r3, [r4, #4]
 800f4d0:	bf08      	it	eq
 800f4d2:	6031      	streq	r1, [r6, #0]
 800f4d4:	5162      	str	r2, [r4, r5]
 800f4d6:	604b      	str	r3, [r1, #4]
 800f4d8:	4638      	mov	r0, r7
 800f4da:	f104 060b 	add.w	r6, r4, #11
 800f4de:	f000 fa6b 	bl	800f9b8 <__malloc_unlock>
 800f4e2:	f026 0607 	bic.w	r6, r6, #7
 800f4e6:	1d23      	adds	r3, r4, #4
 800f4e8:	1af2      	subs	r2, r6, r3
 800f4ea:	d0b6      	beq.n	800f45a <_malloc_r+0x22>
 800f4ec:	1b9b      	subs	r3, r3, r6
 800f4ee:	50a3      	str	r3, [r4, r2]
 800f4f0:	e7b3      	b.n	800f45a <_malloc_r+0x22>
 800f4f2:	6862      	ldr	r2, [r4, #4]
 800f4f4:	42a3      	cmp	r3, r4
 800f4f6:	bf0c      	ite	eq
 800f4f8:	6032      	streq	r2, [r6, #0]
 800f4fa:	605a      	strne	r2, [r3, #4]
 800f4fc:	e7ec      	b.n	800f4d8 <_malloc_r+0xa0>
 800f4fe:	4623      	mov	r3, r4
 800f500:	6864      	ldr	r4, [r4, #4]
 800f502:	e7b2      	b.n	800f46a <_malloc_r+0x32>
 800f504:	4634      	mov	r4, r6
 800f506:	6876      	ldr	r6, [r6, #4]
 800f508:	e7b9      	b.n	800f47e <_malloc_r+0x46>
 800f50a:	230c      	movs	r3, #12
 800f50c:	603b      	str	r3, [r7, #0]
 800f50e:	4638      	mov	r0, r7
 800f510:	f000 fa52 	bl	800f9b8 <__malloc_unlock>
 800f514:	e7a1      	b.n	800f45a <_malloc_r+0x22>
 800f516:	6025      	str	r5, [r4, #0]
 800f518:	e7de      	b.n	800f4d8 <_malloc_r+0xa0>
 800f51a:	bf00      	nop
 800f51c:	200006b8 	.word	0x200006b8

0800f520 <__sfputc_r>:
 800f520:	6893      	ldr	r3, [r2, #8]
 800f522:	3b01      	subs	r3, #1
 800f524:	2b00      	cmp	r3, #0
 800f526:	b410      	push	{r4}
 800f528:	6093      	str	r3, [r2, #8]
 800f52a:	da08      	bge.n	800f53e <__sfputc_r+0x1e>
 800f52c:	6994      	ldr	r4, [r2, #24]
 800f52e:	42a3      	cmp	r3, r4
 800f530:	db01      	blt.n	800f536 <__sfputc_r+0x16>
 800f532:	290a      	cmp	r1, #10
 800f534:	d103      	bne.n	800f53e <__sfputc_r+0x1e>
 800f536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f53a:	f7fe ba91 	b.w	800da60 <__swbuf_r>
 800f53e:	6813      	ldr	r3, [r2, #0]
 800f540:	1c58      	adds	r0, r3, #1
 800f542:	6010      	str	r0, [r2, #0]
 800f544:	7019      	strb	r1, [r3, #0]
 800f546:	4608      	mov	r0, r1
 800f548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f54c:	4770      	bx	lr

0800f54e <__sfputs_r>:
 800f54e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f550:	4606      	mov	r6, r0
 800f552:	460f      	mov	r7, r1
 800f554:	4614      	mov	r4, r2
 800f556:	18d5      	adds	r5, r2, r3
 800f558:	42ac      	cmp	r4, r5
 800f55a:	d101      	bne.n	800f560 <__sfputs_r+0x12>
 800f55c:	2000      	movs	r0, #0
 800f55e:	e007      	b.n	800f570 <__sfputs_r+0x22>
 800f560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f564:	463a      	mov	r2, r7
 800f566:	4630      	mov	r0, r6
 800f568:	f7ff ffda 	bl	800f520 <__sfputc_r>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d1f3      	bne.n	800f558 <__sfputs_r+0xa>
 800f570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f574 <_vfiprintf_r>:
 800f574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f578:	460d      	mov	r5, r1
 800f57a:	b09d      	sub	sp, #116	; 0x74
 800f57c:	4614      	mov	r4, r2
 800f57e:	4698      	mov	r8, r3
 800f580:	4606      	mov	r6, r0
 800f582:	b118      	cbz	r0, 800f58c <_vfiprintf_r+0x18>
 800f584:	6983      	ldr	r3, [r0, #24]
 800f586:	b90b      	cbnz	r3, 800f58c <_vfiprintf_r+0x18>
 800f588:	f7ff fa3e 	bl	800ea08 <__sinit>
 800f58c:	4b89      	ldr	r3, [pc, #548]	; (800f7b4 <_vfiprintf_r+0x240>)
 800f58e:	429d      	cmp	r5, r3
 800f590:	d11b      	bne.n	800f5ca <_vfiprintf_r+0x56>
 800f592:	6875      	ldr	r5, [r6, #4]
 800f594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f596:	07d9      	lsls	r1, r3, #31
 800f598:	d405      	bmi.n	800f5a6 <_vfiprintf_r+0x32>
 800f59a:	89ab      	ldrh	r3, [r5, #12]
 800f59c:	059a      	lsls	r2, r3, #22
 800f59e:	d402      	bmi.n	800f5a6 <_vfiprintf_r+0x32>
 800f5a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5a2:	f7ff fad4 	bl	800eb4e <__retarget_lock_acquire_recursive>
 800f5a6:	89ab      	ldrh	r3, [r5, #12]
 800f5a8:	071b      	lsls	r3, r3, #28
 800f5aa:	d501      	bpl.n	800f5b0 <_vfiprintf_r+0x3c>
 800f5ac:	692b      	ldr	r3, [r5, #16]
 800f5ae:	b9eb      	cbnz	r3, 800f5ec <_vfiprintf_r+0x78>
 800f5b0:	4629      	mov	r1, r5
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	f7fe faa6 	bl	800db04 <__swsetup_r>
 800f5b8:	b1c0      	cbz	r0, 800f5ec <_vfiprintf_r+0x78>
 800f5ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5bc:	07dc      	lsls	r4, r3, #31
 800f5be:	d50e      	bpl.n	800f5de <_vfiprintf_r+0x6a>
 800f5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5c4:	b01d      	add	sp, #116	; 0x74
 800f5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ca:	4b7b      	ldr	r3, [pc, #492]	; (800f7b8 <_vfiprintf_r+0x244>)
 800f5cc:	429d      	cmp	r5, r3
 800f5ce:	d101      	bne.n	800f5d4 <_vfiprintf_r+0x60>
 800f5d0:	68b5      	ldr	r5, [r6, #8]
 800f5d2:	e7df      	b.n	800f594 <_vfiprintf_r+0x20>
 800f5d4:	4b79      	ldr	r3, [pc, #484]	; (800f7bc <_vfiprintf_r+0x248>)
 800f5d6:	429d      	cmp	r5, r3
 800f5d8:	bf08      	it	eq
 800f5da:	68f5      	ldreq	r5, [r6, #12]
 800f5dc:	e7da      	b.n	800f594 <_vfiprintf_r+0x20>
 800f5de:	89ab      	ldrh	r3, [r5, #12]
 800f5e0:	0598      	lsls	r0, r3, #22
 800f5e2:	d4ed      	bmi.n	800f5c0 <_vfiprintf_r+0x4c>
 800f5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5e6:	f7ff fab3 	bl	800eb50 <__retarget_lock_release_recursive>
 800f5ea:	e7e9      	b.n	800f5c0 <_vfiprintf_r+0x4c>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f5f0:	2320      	movs	r3, #32
 800f5f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5fa:	2330      	movs	r3, #48	; 0x30
 800f5fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f7c0 <_vfiprintf_r+0x24c>
 800f600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f604:	f04f 0901 	mov.w	r9, #1
 800f608:	4623      	mov	r3, r4
 800f60a:	469a      	mov	sl, r3
 800f60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f610:	b10a      	cbz	r2, 800f616 <_vfiprintf_r+0xa2>
 800f612:	2a25      	cmp	r2, #37	; 0x25
 800f614:	d1f9      	bne.n	800f60a <_vfiprintf_r+0x96>
 800f616:	ebba 0b04 	subs.w	fp, sl, r4
 800f61a:	d00b      	beq.n	800f634 <_vfiprintf_r+0xc0>
 800f61c:	465b      	mov	r3, fp
 800f61e:	4622      	mov	r2, r4
 800f620:	4629      	mov	r1, r5
 800f622:	4630      	mov	r0, r6
 800f624:	f7ff ff93 	bl	800f54e <__sfputs_r>
 800f628:	3001      	adds	r0, #1
 800f62a:	f000 80aa 	beq.w	800f782 <_vfiprintf_r+0x20e>
 800f62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f630:	445a      	add	r2, fp
 800f632:	9209      	str	r2, [sp, #36]	; 0x24
 800f634:	f89a 3000 	ldrb.w	r3, [sl]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f000 80a2 	beq.w	800f782 <_vfiprintf_r+0x20e>
 800f63e:	2300      	movs	r3, #0
 800f640:	f04f 32ff 	mov.w	r2, #4294967295
 800f644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f648:	f10a 0a01 	add.w	sl, sl, #1
 800f64c:	9304      	str	r3, [sp, #16]
 800f64e:	9307      	str	r3, [sp, #28]
 800f650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f654:	931a      	str	r3, [sp, #104]	; 0x68
 800f656:	4654      	mov	r4, sl
 800f658:	2205      	movs	r2, #5
 800f65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f65e:	4858      	ldr	r0, [pc, #352]	; (800f7c0 <_vfiprintf_r+0x24c>)
 800f660:	f7f1 fbfe 	bl	8000e60 <memchr>
 800f664:	9a04      	ldr	r2, [sp, #16]
 800f666:	b9d8      	cbnz	r0, 800f6a0 <_vfiprintf_r+0x12c>
 800f668:	06d1      	lsls	r1, r2, #27
 800f66a:	bf44      	itt	mi
 800f66c:	2320      	movmi	r3, #32
 800f66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f672:	0713      	lsls	r3, r2, #28
 800f674:	bf44      	itt	mi
 800f676:	232b      	movmi	r3, #43	; 0x2b
 800f678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f67c:	f89a 3000 	ldrb.w	r3, [sl]
 800f680:	2b2a      	cmp	r3, #42	; 0x2a
 800f682:	d015      	beq.n	800f6b0 <_vfiprintf_r+0x13c>
 800f684:	9a07      	ldr	r2, [sp, #28]
 800f686:	4654      	mov	r4, sl
 800f688:	2000      	movs	r0, #0
 800f68a:	f04f 0c0a 	mov.w	ip, #10
 800f68e:	4621      	mov	r1, r4
 800f690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f694:	3b30      	subs	r3, #48	; 0x30
 800f696:	2b09      	cmp	r3, #9
 800f698:	d94e      	bls.n	800f738 <_vfiprintf_r+0x1c4>
 800f69a:	b1b0      	cbz	r0, 800f6ca <_vfiprintf_r+0x156>
 800f69c:	9207      	str	r2, [sp, #28]
 800f69e:	e014      	b.n	800f6ca <_vfiprintf_r+0x156>
 800f6a0:	eba0 0308 	sub.w	r3, r0, r8
 800f6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	46a2      	mov	sl, r4
 800f6ae:	e7d2      	b.n	800f656 <_vfiprintf_r+0xe2>
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	1d19      	adds	r1, r3, #4
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	9103      	str	r1, [sp, #12]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	bfbb      	ittet	lt
 800f6bc:	425b      	neglt	r3, r3
 800f6be:	f042 0202 	orrlt.w	r2, r2, #2
 800f6c2:	9307      	strge	r3, [sp, #28]
 800f6c4:	9307      	strlt	r3, [sp, #28]
 800f6c6:	bfb8      	it	lt
 800f6c8:	9204      	strlt	r2, [sp, #16]
 800f6ca:	7823      	ldrb	r3, [r4, #0]
 800f6cc:	2b2e      	cmp	r3, #46	; 0x2e
 800f6ce:	d10c      	bne.n	800f6ea <_vfiprintf_r+0x176>
 800f6d0:	7863      	ldrb	r3, [r4, #1]
 800f6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800f6d4:	d135      	bne.n	800f742 <_vfiprintf_r+0x1ce>
 800f6d6:	9b03      	ldr	r3, [sp, #12]
 800f6d8:	1d1a      	adds	r2, r3, #4
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	9203      	str	r2, [sp, #12]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	bfb8      	it	lt
 800f6e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6e6:	3402      	adds	r4, #2
 800f6e8:	9305      	str	r3, [sp, #20]
 800f6ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f7d0 <_vfiprintf_r+0x25c>
 800f6ee:	7821      	ldrb	r1, [r4, #0]
 800f6f0:	2203      	movs	r2, #3
 800f6f2:	4650      	mov	r0, sl
 800f6f4:	f7f1 fbb4 	bl	8000e60 <memchr>
 800f6f8:	b140      	cbz	r0, 800f70c <_vfiprintf_r+0x198>
 800f6fa:	2340      	movs	r3, #64	; 0x40
 800f6fc:	eba0 000a 	sub.w	r0, r0, sl
 800f700:	fa03 f000 	lsl.w	r0, r3, r0
 800f704:	9b04      	ldr	r3, [sp, #16]
 800f706:	4303      	orrs	r3, r0
 800f708:	3401      	adds	r4, #1
 800f70a:	9304      	str	r3, [sp, #16]
 800f70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f710:	482c      	ldr	r0, [pc, #176]	; (800f7c4 <_vfiprintf_r+0x250>)
 800f712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f716:	2206      	movs	r2, #6
 800f718:	f7f1 fba2 	bl	8000e60 <memchr>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	d03f      	beq.n	800f7a0 <_vfiprintf_r+0x22c>
 800f720:	4b29      	ldr	r3, [pc, #164]	; (800f7c8 <_vfiprintf_r+0x254>)
 800f722:	bb1b      	cbnz	r3, 800f76c <_vfiprintf_r+0x1f8>
 800f724:	9b03      	ldr	r3, [sp, #12]
 800f726:	3307      	adds	r3, #7
 800f728:	f023 0307 	bic.w	r3, r3, #7
 800f72c:	3308      	adds	r3, #8
 800f72e:	9303      	str	r3, [sp, #12]
 800f730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f732:	443b      	add	r3, r7
 800f734:	9309      	str	r3, [sp, #36]	; 0x24
 800f736:	e767      	b.n	800f608 <_vfiprintf_r+0x94>
 800f738:	fb0c 3202 	mla	r2, ip, r2, r3
 800f73c:	460c      	mov	r4, r1
 800f73e:	2001      	movs	r0, #1
 800f740:	e7a5      	b.n	800f68e <_vfiprintf_r+0x11a>
 800f742:	2300      	movs	r3, #0
 800f744:	3401      	adds	r4, #1
 800f746:	9305      	str	r3, [sp, #20]
 800f748:	4619      	mov	r1, r3
 800f74a:	f04f 0c0a 	mov.w	ip, #10
 800f74e:	4620      	mov	r0, r4
 800f750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f754:	3a30      	subs	r2, #48	; 0x30
 800f756:	2a09      	cmp	r2, #9
 800f758:	d903      	bls.n	800f762 <_vfiprintf_r+0x1ee>
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d0c5      	beq.n	800f6ea <_vfiprintf_r+0x176>
 800f75e:	9105      	str	r1, [sp, #20]
 800f760:	e7c3      	b.n	800f6ea <_vfiprintf_r+0x176>
 800f762:	fb0c 2101 	mla	r1, ip, r1, r2
 800f766:	4604      	mov	r4, r0
 800f768:	2301      	movs	r3, #1
 800f76a:	e7f0      	b.n	800f74e <_vfiprintf_r+0x1da>
 800f76c:	ab03      	add	r3, sp, #12
 800f76e:	9300      	str	r3, [sp, #0]
 800f770:	462a      	mov	r2, r5
 800f772:	4b16      	ldr	r3, [pc, #88]	; (800f7cc <_vfiprintf_r+0x258>)
 800f774:	a904      	add	r1, sp, #16
 800f776:	4630      	mov	r0, r6
 800f778:	f7fd fd32 	bl	800d1e0 <_printf_float>
 800f77c:	4607      	mov	r7, r0
 800f77e:	1c78      	adds	r0, r7, #1
 800f780:	d1d6      	bne.n	800f730 <_vfiprintf_r+0x1bc>
 800f782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f784:	07d9      	lsls	r1, r3, #31
 800f786:	d405      	bmi.n	800f794 <_vfiprintf_r+0x220>
 800f788:	89ab      	ldrh	r3, [r5, #12]
 800f78a:	059a      	lsls	r2, r3, #22
 800f78c:	d402      	bmi.n	800f794 <_vfiprintf_r+0x220>
 800f78e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f790:	f7ff f9de 	bl	800eb50 <__retarget_lock_release_recursive>
 800f794:	89ab      	ldrh	r3, [r5, #12]
 800f796:	065b      	lsls	r3, r3, #25
 800f798:	f53f af12 	bmi.w	800f5c0 <_vfiprintf_r+0x4c>
 800f79c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f79e:	e711      	b.n	800f5c4 <_vfiprintf_r+0x50>
 800f7a0:	ab03      	add	r3, sp, #12
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	462a      	mov	r2, r5
 800f7a6:	4b09      	ldr	r3, [pc, #36]	; (800f7cc <_vfiprintf_r+0x258>)
 800f7a8:	a904      	add	r1, sp, #16
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	f7fd ffa4 	bl	800d6f8 <_printf_i>
 800f7b0:	e7e4      	b.n	800f77c <_vfiprintf_r+0x208>
 800f7b2:	bf00      	nop
 800f7b4:	08010124 	.word	0x08010124
 800f7b8:	08010144 	.word	0x08010144
 800f7bc:	08010104 	.word	0x08010104
 800f7c0:	080102bc 	.word	0x080102bc
 800f7c4:	080102c6 	.word	0x080102c6
 800f7c8:	0800d1e1 	.word	0x0800d1e1
 800f7cc:	0800f54f 	.word	0x0800f54f
 800f7d0:	080102c2 	.word	0x080102c2

0800f7d4 <_sbrk_r>:
 800f7d4:	b538      	push	{r3, r4, r5, lr}
 800f7d6:	4d06      	ldr	r5, [pc, #24]	; (800f7f0 <_sbrk_r+0x1c>)
 800f7d8:	2300      	movs	r3, #0
 800f7da:	4604      	mov	r4, r0
 800f7dc:	4608      	mov	r0, r1
 800f7de:	602b      	str	r3, [r5, #0]
 800f7e0:	f7f3 f97e 	bl	8002ae0 <_sbrk>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d102      	bne.n	800f7ee <_sbrk_r+0x1a>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	b103      	cbz	r3, 800f7ee <_sbrk_r+0x1a>
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	bd38      	pop	{r3, r4, r5, pc}
 800f7f0:	200006c0 	.word	0x200006c0

0800f7f4 <__sread>:
 800f7f4:	b510      	push	{r4, lr}
 800f7f6:	460c      	mov	r4, r1
 800f7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7fc:	f000 f8e2 	bl	800f9c4 <_read_r>
 800f800:	2800      	cmp	r0, #0
 800f802:	bfab      	itete	ge
 800f804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f806:	89a3      	ldrhlt	r3, [r4, #12]
 800f808:	181b      	addge	r3, r3, r0
 800f80a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f80e:	bfac      	ite	ge
 800f810:	6563      	strge	r3, [r4, #84]	; 0x54
 800f812:	81a3      	strhlt	r3, [r4, #12]
 800f814:	bd10      	pop	{r4, pc}

0800f816 <__swrite>:
 800f816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81a:	461f      	mov	r7, r3
 800f81c:	898b      	ldrh	r3, [r1, #12]
 800f81e:	05db      	lsls	r3, r3, #23
 800f820:	4605      	mov	r5, r0
 800f822:	460c      	mov	r4, r1
 800f824:	4616      	mov	r6, r2
 800f826:	d505      	bpl.n	800f834 <__swrite+0x1e>
 800f828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f82c:	2302      	movs	r3, #2
 800f82e:	2200      	movs	r2, #0
 800f830:	f000 f898 	bl	800f964 <_lseek_r>
 800f834:	89a3      	ldrh	r3, [r4, #12]
 800f836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f83a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f83e:	81a3      	strh	r3, [r4, #12]
 800f840:	4632      	mov	r2, r6
 800f842:	463b      	mov	r3, r7
 800f844:	4628      	mov	r0, r5
 800f846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f84a:	f000 b817 	b.w	800f87c <_write_r>

0800f84e <__sseek>:
 800f84e:	b510      	push	{r4, lr}
 800f850:	460c      	mov	r4, r1
 800f852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f856:	f000 f885 	bl	800f964 <_lseek_r>
 800f85a:	1c43      	adds	r3, r0, #1
 800f85c:	89a3      	ldrh	r3, [r4, #12]
 800f85e:	bf15      	itete	ne
 800f860:	6560      	strne	r0, [r4, #84]	; 0x54
 800f862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f86a:	81a3      	strheq	r3, [r4, #12]
 800f86c:	bf18      	it	ne
 800f86e:	81a3      	strhne	r3, [r4, #12]
 800f870:	bd10      	pop	{r4, pc}

0800f872 <__sclose>:
 800f872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f876:	f000 b831 	b.w	800f8dc <_close_r>
	...

0800f87c <_write_r>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	4d07      	ldr	r5, [pc, #28]	; (800f89c <_write_r+0x20>)
 800f880:	4604      	mov	r4, r0
 800f882:	4608      	mov	r0, r1
 800f884:	4611      	mov	r1, r2
 800f886:	2200      	movs	r2, #0
 800f888:	602a      	str	r2, [r5, #0]
 800f88a:	461a      	mov	r2, r3
 800f88c:	f7f3 f8d7 	bl	8002a3e <_write>
 800f890:	1c43      	adds	r3, r0, #1
 800f892:	d102      	bne.n	800f89a <_write_r+0x1e>
 800f894:	682b      	ldr	r3, [r5, #0]
 800f896:	b103      	cbz	r3, 800f89a <_write_r+0x1e>
 800f898:	6023      	str	r3, [r4, #0]
 800f89a:	bd38      	pop	{r3, r4, r5, pc}
 800f89c:	200006c0 	.word	0x200006c0

0800f8a0 <__assert_func>:
 800f8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8a2:	4614      	mov	r4, r2
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	4b09      	ldr	r3, [pc, #36]	; (800f8cc <__assert_func+0x2c>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4605      	mov	r5, r0
 800f8ac:	68d8      	ldr	r0, [r3, #12]
 800f8ae:	b14c      	cbz	r4, 800f8c4 <__assert_func+0x24>
 800f8b0:	4b07      	ldr	r3, [pc, #28]	; (800f8d0 <__assert_func+0x30>)
 800f8b2:	9100      	str	r1, [sp, #0]
 800f8b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8b8:	4906      	ldr	r1, [pc, #24]	; (800f8d4 <__assert_func+0x34>)
 800f8ba:	462b      	mov	r3, r5
 800f8bc:	f000 f81e 	bl	800f8fc <fiprintf>
 800f8c0:	f000 f89f 	bl	800fa02 <abort>
 800f8c4:	4b04      	ldr	r3, [pc, #16]	; (800f8d8 <__assert_func+0x38>)
 800f8c6:	461c      	mov	r4, r3
 800f8c8:	e7f3      	b.n	800f8b2 <__assert_func+0x12>
 800f8ca:	bf00      	nop
 800f8cc:	20000040 	.word	0x20000040
 800f8d0:	080102cd 	.word	0x080102cd
 800f8d4:	080102da 	.word	0x080102da
 800f8d8:	08010308 	.word	0x08010308

0800f8dc <_close_r>:
 800f8dc:	b538      	push	{r3, r4, r5, lr}
 800f8de:	4d06      	ldr	r5, [pc, #24]	; (800f8f8 <_close_r+0x1c>)
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	4608      	mov	r0, r1
 800f8e6:	602b      	str	r3, [r5, #0]
 800f8e8:	f7f3 f8c5 	bl	8002a76 <_close>
 800f8ec:	1c43      	adds	r3, r0, #1
 800f8ee:	d102      	bne.n	800f8f6 <_close_r+0x1a>
 800f8f0:	682b      	ldr	r3, [r5, #0]
 800f8f2:	b103      	cbz	r3, 800f8f6 <_close_r+0x1a>
 800f8f4:	6023      	str	r3, [r4, #0]
 800f8f6:	bd38      	pop	{r3, r4, r5, pc}
 800f8f8:	200006c0 	.word	0x200006c0

0800f8fc <fiprintf>:
 800f8fc:	b40e      	push	{r1, r2, r3}
 800f8fe:	b503      	push	{r0, r1, lr}
 800f900:	4601      	mov	r1, r0
 800f902:	ab03      	add	r3, sp, #12
 800f904:	4805      	ldr	r0, [pc, #20]	; (800f91c <fiprintf+0x20>)
 800f906:	f853 2b04 	ldr.w	r2, [r3], #4
 800f90a:	6800      	ldr	r0, [r0, #0]
 800f90c:	9301      	str	r3, [sp, #4]
 800f90e:	f7ff fe31 	bl	800f574 <_vfiprintf_r>
 800f912:	b002      	add	sp, #8
 800f914:	f85d eb04 	ldr.w	lr, [sp], #4
 800f918:	b003      	add	sp, #12
 800f91a:	4770      	bx	lr
 800f91c:	20000040 	.word	0x20000040

0800f920 <_fstat_r>:
 800f920:	b538      	push	{r3, r4, r5, lr}
 800f922:	4d07      	ldr	r5, [pc, #28]	; (800f940 <_fstat_r+0x20>)
 800f924:	2300      	movs	r3, #0
 800f926:	4604      	mov	r4, r0
 800f928:	4608      	mov	r0, r1
 800f92a:	4611      	mov	r1, r2
 800f92c:	602b      	str	r3, [r5, #0]
 800f92e:	f7f3 f8ae 	bl	8002a8e <_fstat>
 800f932:	1c43      	adds	r3, r0, #1
 800f934:	d102      	bne.n	800f93c <_fstat_r+0x1c>
 800f936:	682b      	ldr	r3, [r5, #0]
 800f938:	b103      	cbz	r3, 800f93c <_fstat_r+0x1c>
 800f93a:	6023      	str	r3, [r4, #0]
 800f93c:	bd38      	pop	{r3, r4, r5, pc}
 800f93e:	bf00      	nop
 800f940:	200006c0 	.word	0x200006c0

0800f944 <_isatty_r>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	4d06      	ldr	r5, [pc, #24]	; (800f960 <_isatty_r+0x1c>)
 800f948:	2300      	movs	r3, #0
 800f94a:	4604      	mov	r4, r0
 800f94c:	4608      	mov	r0, r1
 800f94e:	602b      	str	r3, [r5, #0]
 800f950:	f7f3 f8ad 	bl	8002aae <_isatty>
 800f954:	1c43      	adds	r3, r0, #1
 800f956:	d102      	bne.n	800f95e <_isatty_r+0x1a>
 800f958:	682b      	ldr	r3, [r5, #0]
 800f95a:	b103      	cbz	r3, 800f95e <_isatty_r+0x1a>
 800f95c:	6023      	str	r3, [r4, #0]
 800f95e:	bd38      	pop	{r3, r4, r5, pc}
 800f960:	200006c0 	.word	0x200006c0

0800f964 <_lseek_r>:
 800f964:	b538      	push	{r3, r4, r5, lr}
 800f966:	4d07      	ldr	r5, [pc, #28]	; (800f984 <_lseek_r+0x20>)
 800f968:	4604      	mov	r4, r0
 800f96a:	4608      	mov	r0, r1
 800f96c:	4611      	mov	r1, r2
 800f96e:	2200      	movs	r2, #0
 800f970:	602a      	str	r2, [r5, #0]
 800f972:	461a      	mov	r2, r3
 800f974:	f7f3 f8a6 	bl	8002ac4 <_lseek>
 800f978:	1c43      	adds	r3, r0, #1
 800f97a:	d102      	bne.n	800f982 <_lseek_r+0x1e>
 800f97c:	682b      	ldr	r3, [r5, #0]
 800f97e:	b103      	cbz	r3, 800f982 <_lseek_r+0x1e>
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	bd38      	pop	{r3, r4, r5, pc}
 800f984:	200006c0 	.word	0x200006c0

0800f988 <__ascii_mbtowc>:
 800f988:	b082      	sub	sp, #8
 800f98a:	b901      	cbnz	r1, 800f98e <__ascii_mbtowc+0x6>
 800f98c:	a901      	add	r1, sp, #4
 800f98e:	b142      	cbz	r2, 800f9a2 <__ascii_mbtowc+0x1a>
 800f990:	b14b      	cbz	r3, 800f9a6 <__ascii_mbtowc+0x1e>
 800f992:	7813      	ldrb	r3, [r2, #0]
 800f994:	600b      	str	r3, [r1, #0]
 800f996:	7812      	ldrb	r2, [r2, #0]
 800f998:	1e10      	subs	r0, r2, #0
 800f99a:	bf18      	it	ne
 800f99c:	2001      	movne	r0, #1
 800f99e:	b002      	add	sp, #8
 800f9a0:	4770      	bx	lr
 800f9a2:	4610      	mov	r0, r2
 800f9a4:	e7fb      	b.n	800f99e <__ascii_mbtowc+0x16>
 800f9a6:	f06f 0001 	mvn.w	r0, #1
 800f9aa:	e7f8      	b.n	800f99e <__ascii_mbtowc+0x16>

0800f9ac <__malloc_lock>:
 800f9ac:	4801      	ldr	r0, [pc, #4]	; (800f9b4 <__malloc_lock+0x8>)
 800f9ae:	f7ff b8ce 	b.w	800eb4e <__retarget_lock_acquire_recursive>
 800f9b2:	bf00      	nop
 800f9b4:	200006b4 	.word	0x200006b4

0800f9b8 <__malloc_unlock>:
 800f9b8:	4801      	ldr	r0, [pc, #4]	; (800f9c0 <__malloc_unlock+0x8>)
 800f9ba:	f7ff b8c9 	b.w	800eb50 <__retarget_lock_release_recursive>
 800f9be:	bf00      	nop
 800f9c0:	200006b4 	.word	0x200006b4

0800f9c4 <_read_r>:
 800f9c4:	b538      	push	{r3, r4, r5, lr}
 800f9c6:	4d07      	ldr	r5, [pc, #28]	; (800f9e4 <_read_r+0x20>)
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	4608      	mov	r0, r1
 800f9cc:	4611      	mov	r1, r2
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	602a      	str	r2, [r5, #0]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	f7f3 f816 	bl	8002a04 <_read>
 800f9d8:	1c43      	adds	r3, r0, #1
 800f9da:	d102      	bne.n	800f9e2 <_read_r+0x1e>
 800f9dc:	682b      	ldr	r3, [r5, #0]
 800f9de:	b103      	cbz	r3, 800f9e2 <_read_r+0x1e>
 800f9e0:	6023      	str	r3, [r4, #0]
 800f9e2:	bd38      	pop	{r3, r4, r5, pc}
 800f9e4:	200006c0 	.word	0x200006c0

0800f9e8 <__ascii_wctomb>:
 800f9e8:	b149      	cbz	r1, 800f9fe <__ascii_wctomb+0x16>
 800f9ea:	2aff      	cmp	r2, #255	; 0xff
 800f9ec:	bf85      	ittet	hi
 800f9ee:	238a      	movhi	r3, #138	; 0x8a
 800f9f0:	6003      	strhi	r3, [r0, #0]
 800f9f2:	700a      	strbls	r2, [r1, #0]
 800f9f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f9f8:	bf98      	it	ls
 800f9fa:	2001      	movls	r0, #1
 800f9fc:	4770      	bx	lr
 800f9fe:	4608      	mov	r0, r1
 800fa00:	4770      	bx	lr

0800fa02 <abort>:
 800fa02:	b508      	push	{r3, lr}
 800fa04:	2006      	movs	r0, #6
 800fa06:	f000 f82b 	bl	800fa60 <raise>
 800fa0a:	2001      	movs	r0, #1
 800fa0c:	f7f2 fff0 	bl	80029f0 <_exit>

0800fa10 <_raise_r>:
 800fa10:	291f      	cmp	r1, #31
 800fa12:	b538      	push	{r3, r4, r5, lr}
 800fa14:	4604      	mov	r4, r0
 800fa16:	460d      	mov	r5, r1
 800fa18:	d904      	bls.n	800fa24 <_raise_r+0x14>
 800fa1a:	2316      	movs	r3, #22
 800fa1c:	6003      	str	r3, [r0, #0]
 800fa1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa22:	bd38      	pop	{r3, r4, r5, pc}
 800fa24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa26:	b112      	cbz	r2, 800fa2e <_raise_r+0x1e>
 800fa28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa2c:	b94b      	cbnz	r3, 800fa42 <_raise_r+0x32>
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f000 f830 	bl	800fa94 <_getpid_r>
 800fa34:	462a      	mov	r2, r5
 800fa36:	4601      	mov	r1, r0
 800fa38:	4620      	mov	r0, r4
 800fa3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa3e:	f000 b817 	b.w	800fa70 <_kill_r>
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d00a      	beq.n	800fa5c <_raise_r+0x4c>
 800fa46:	1c59      	adds	r1, r3, #1
 800fa48:	d103      	bne.n	800fa52 <_raise_r+0x42>
 800fa4a:	2316      	movs	r3, #22
 800fa4c:	6003      	str	r3, [r0, #0]
 800fa4e:	2001      	movs	r0, #1
 800fa50:	e7e7      	b.n	800fa22 <_raise_r+0x12>
 800fa52:	2400      	movs	r4, #0
 800fa54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa58:	4628      	mov	r0, r5
 800fa5a:	4798      	blx	r3
 800fa5c:	2000      	movs	r0, #0
 800fa5e:	e7e0      	b.n	800fa22 <_raise_r+0x12>

0800fa60 <raise>:
 800fa60:	4b02      	ldr	r3, [pc, #8]	; (800fa6c <raise+0xc>)
 800fa62:	4601      	mov	r1, r0
 800fa64:	6818      	ldr	r0, [r3, #0]
 800fa66:	f7ff bfd3 	b.w	800fa10 <_raise_r>
 800fa6a:	bf00      	nop
 800fa6c:	20000040 	.word	0x20000040

0800fa70 <_kill_r>:
 800fa70:	b538      	push	{r3, r4, r5, lr}
 800fa72:	4d07      	ldr	r5, [pc, #28]	; (800fa90 <_kill_r+0x20>)
 800fa74:	2300      	movs	r3, #0
 800fa76:	4604      	mov	r4, r0
 800fa78:	4608      	mov	r0, r1
 800fa7a:	4611      	mov	r1, r2
 800fa7c:	602b      	str	r3, [r5, #0]
 800fa7e:	f7f2 ffa7 	bl	80029d0 <_kill>
 800fa82:	1c43      	adds	r3, r0, #1
 800fa84:	d102      	bne.n	800fa8c <_kill_r+0x1c>
 800fa86:	682b      	ldr	r3, [r5, #0]
 800fa88:	b103      	cbz	r3, 800fa8c <_kill_r+0x1c>
 800fa8a:	6023      	str	r3, [r4, #0]
 800fa8c:	bd38      	pop	{r3, r4, r5, pc}
 800fa8e:	bf00      	nop
 800fa90:	200006c0 	.word	0x200006c0

0800fa94 <_getpid_r>:
 800fa94:	f7f2 bf94 	b.w	80029c0 <_getpid>

0800fa98 <_init>:
 800fa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa9a:	bf00      	nop
 800fa9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa9e:	bc08      	pop	{r3}
 800faa0:	469e      	mov	lr, r3
 800faa2:	4770      	bx	lr

0800faa4 <_fini>:
 800faa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faa6:	bf00      	nop
 800faa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faaa:	bc08      	pop	{r3}
 800faac:	469e      	mov	lr, r3
 800faae:	4770      	bx	lr

0800fab0 <__stop_pop_veneer>:
 800fab0:	f85f f000 	ldr.w	pc, [pc]	; 800fab4 <__stop_pop_veneer+0x4>
 800fab4:	0000016d 	.word	0x0000016d

0800fab8 <__set_frequency_hz_veneer>:
 800fab8:	f85f f000 	ldr.w	pc, [pc]	; 800fabc <__set_frequency_hz_veneer+0x4>
 800fabc:	00000705 	.word	0x00000705

0800fac0 <__set_MW_power_veneer>:
 800fac0:	f85f f000 	ldr.w	pc, [pc]	; 800fac4 <__set_MW_power_veneer+0x4>
 800fac4:	000003a3 	.word	0x000003a3

0800fac8 <__start_pop_veneer>:
 800fac8:	f85f f000 	ldr.w	pc, [pc]	; 800facc <__start_pop_veneer+0x4>
 800facc:	000000bd 	.word	0x000000bd

0800fad0 <__timer_delay_veneer>:
 800fad0:	f85f f000 	ldr.w	pc, [pc]	; 800fad4 <__timer_delay_veneer+0x4>
 800fad4:	00000061 	.word	0x00000061

0800fad8 <__init_synthesiser_veneer>:
 800fad8:	f85f f000 	ldr.w	pc, [pc]	; 800fadc <__init_synthesiser_veneer+0x4>
 800fadc:	00000401 	.word	0x00000401

0800fae0 <__run_sweep_veneer>:
 800fae0:	f85f f000 	ldr.w	pc, [pc]	; 800fae4 <__run_sweep_veneer+0x4>
 800fae4:	00000829 	.word	0x00000829

0800fae8 <__set_aom_atten_veneer>:
 800fae8:	f85f f000 	ldr.w	pc, [pc]	; 800faec <__set_aom_atten_veneer+0x4>
 800faec:	000001e1 	.word	0x000001e1
