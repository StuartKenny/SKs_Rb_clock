
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000928  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009ca0  08000bc0  08000bc0  00020bc0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000300a0  2**0
                  CONTENTS
  4 .rodata       000003a8  0800a860  0800a860  0002a860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800ac08  0800ac08  0002ac08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0800ac10  0800ac10  0002ac10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac14  0800ac14  0002ac14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800ac18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200000a0  0800acb8  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800acb8  00030338  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2c5  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eed  00000000  00000000  0004f393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  00052280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00053a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a30b  00000000  00000000  00055168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c161  00000000  00000000  0008f473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c85a  00000000  00000000  000ab5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00227e2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000707c  00000000  00000000  00227e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
PUTCHAR_PROTOTYPE {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
   0:	b580      	push	{r7, lr}
   2:	b08a      	sub	sp, #40	; 0x28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
   a:	607a      	str	r2, [r7, #4]
   c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
   e:	2300      	movs	r3, #0
  10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
  12:	68fb      	ldr	r3, [r7, #12]
  14:	021a      	lsls	r2, r3, #8
  16:	68bb      	ldr	r3, [r7, #8]
  18:	00db      	lsls	r3, r3, #3
  1a:	4313      	orrs	r3, r2
  1c:	687a      	ldr	r2, [r7, #4]
  1e:	4313      	orrs	r3, r2
  20:	61fb      	str	r3, [r7, #28]

	//printf("SPI BYTES WRITTEN: 0x%08x \r\n", write_data);

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  22:	2200      	movs	r2, #0
  24:	f44f 7180 	mov.w	r1, #256	; 0x100
  28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
  2a:	f000 fc6d 	bl	908 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
  2e:	2200      	movs	r2, #0
  30:	f44f 6100 	mov.w	r1, #2048	; 0x800
  34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
  36:	f000 fc67 	bl	908 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  3a:	2300      	movs	r3, #0
  3c:	623b      	str	r3, [r7, #32]
  3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
  40:	2220      	movs	r2, #32
  42:	6a3b      	ldr	r3, [r7, #32]
  44:	1ad3      	subs	r3, r2, r3
  46:	3b01      	subs	r3, #1
  48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
  4a:	2201      	movs	r2, #1
  4c:	697b      	ldr	r3, [r7, #20]
  4e:	fa02 f303 	lsl.w	r3, r2, r3
  52:	461a      	mov	r2, r3
  54:	69fb      	ldr	r3, [r7, #28]
  56:	4013      	ands	r3, r2
  58:	2b00      	cmp	r3, #0
  5a:	bf14      	ite	ne
  5c:	2301      	movne	r3, #1
  5e:	2300      	moveq	r3, #0
  60:	b2db      	uxtb	r3, r3
  62:	461a      	mov	r2, r3
  64:	f44f 7100 	mov.w	r1, #512	; 0x200
  68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
  6a:	f000 fc4d 	bl	908 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
  6e:	2201      	movs	r2, #1
  70:	f44f 7180 	mov.w	r1, #256	; 0x100
  74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
  76:	f000 fc47 	bl	908 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  7a:	2200      	movs	r2, #0
  7c:	f44f 7180 	mov.w	r1, #256	; 0x100
  80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
  82:	f000 fc41 	bl	908 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
  86:	f44f 6180 	mov.w	r1, #1024	; 0x400
  8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
  8c:	f000 fc2c 	bl	8e8 <__HAL_GPIO_ReadPin_veneer>
  90:	4603      	mov	r3, r0
  92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
  94:	2220      	movs	r2, #32
  96:	6a3b      	ldr	r3, [r7, #32]
  98:	1ad3      	subs	r3, r2, r3
  9a:	3b01      	subs	r3, #1
  9c:	fa01 f303 	lsl.w	r3, r1, r3
  a0:	461a      	mov	r2, r3
		read_data = read_data
  a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  a4:	4313      	orrs	r3, r2
  a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  a8:	6a3b      	ldr	r3, [r7, #32]
  aa:	3301      	adds	r3, #1
  ac:	623b      	str	r3, [r7, #32]
  ae:	2220      	movs	r2, #32
  b0:	6a3b      	ldr	r3, [r7, #32]
  b2:	4293      	cmp	r3, r2
  b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
  b6:	2201      	movs	r2, #1
  b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
  be:	f000 fc23 	bl	908 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
  c2:	78fb      	ldrb	r3, [r7, #3]
  c4:	2b00      	cmp	r3, #0
  c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
  c8:	68b8      	ldr	r0, [r7, #8]
  ca:	f000 f813 	bl	f4 <synth_readreg>
  ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
  d0:	69ba      	ldr	r2, [r7, #24]
  d2:	68fb      	ldr	r3, [r7, #12]
  d4:	429a      	cmp	r2, r3
  d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
  d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
  da:	f000 fbf9 	bl	8d0 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
  de:	f000 fc1f 	bl	920 <__Error_Handler_veneer>
		}
	}

	return read_data;
  e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  e4:	4618      	mov	r0, r3
  e6:	3728      	adds	r7, #40	; 0x28
  e8:	46bd      	mov	sp, r7
  ea:	bd80      	pop	{r7, pc}
  ec:	58020800 	.word	0x58020800
  f0:	0800a860 	.word	0x0800a860

000000f4 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
  f4:	b580      	push	{r7, lr}
  f6:	b084      	sub	sp, #16
  f8:	af00      	add	r7, sp, #0
  fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, false); // First cycle to send the read address
  fc:	2300      	movs	r3, #0
  fe:	2200      	movs	r2, #0
 100:	2100      	movs	r1, #0
 102:	6878      	ldr	r0, [r7, #4]
 104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, false);  // Data returned on the second cycle
 108:	2300      	movs	r3, #0
 10a:	2200      	movs	r2, #0
 10c:	2100      	movs	r1, #0
 10e:	6878      	ldr	r0, [r7, #4]
 110:	f7ff ff76 	bl	0 <synth_writereg>
 114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 116:	68fb      	ldr	r3, [r7, #12]
 118:	0a1b      	lsrs	r3, r3, #8

}
 11a:	4618      	mov	r0, r3
 11c:	3710      	adds	r7, #16
 11e:	46bd      	mov	sp, r7
 120:	bd80      	pop	{r7, pc}

00000122 <init_synthesiser>:

static uint32_t init_synthesiser() {
 122:	b580      	push	{r7, lr}
 124:	b082      	sub	sp, #8
 126:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the lock LED
 128:	2200      	movs	r2, #0
 12a:	2102      	movs	r1, #2
 12c:	4835      	ldr	r0, [pc, #212]	; (204 <_Min_Heap_Size+0x4>)
 12e:	f000 fbeb 	bl	908 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 132:	2200      	movs	r2, #0
 134:	f44f 7180 	mov.w	r1, #256	; 0x100
 138:	4833      	ldr	r0, [pc, #204]	; (208 <_Min_Heap_Size+0x8>)
 13a:	f000 fbe5 	bl	908 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 13e:	2201      	movs	r2, #1
 140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 144:	4830      	ldr	r0, [pc, #192]	; (208 <_Min_Heap_Size+0x8>)
 146:	f000 fbdf 	bl	908 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 14a:	2201      	movs	r2, #1
 14c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 150:	482d      	ldr	r0, [pc, #180]	; (208 <_Min_Heap_Size+0x8>)
 152:	f000 fbd9 	bl	908 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 156:	2064      	movs	r0, #100	; 0x64
 158:	f000 fbca 	bl	8f0 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, 0x0, 0x0, false); // Soft reset.
 15c:	2300      	movs	r3, #0
 15e:	2200      	movs	r2, #0
 160:	2100      	movs	r1, #0
 162:	2020      	movs	r0, #32
 164:	f7ff ff4c 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, 0x08, 0x0, true); // Set the SDO output level to 3.3 Volts
 168:	2301      	movs	r3, #1
 16a:	2200      	movs	r2, #0
 16c:	2108      	movs	r1, #8
 16e:	4827      	ldr	r0, [pc, #156]	; (20c <_Min_Heap_Size+0xc>)
 170:	f7ff ff46 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(0x00); // Read the ID register to check the chip is communicating
 174:	2000      	movs	r0, #0
 176:	f7ff ffbd 	bl	f4 <synth_readreg>
 17a:	6078      	str	r0, [r7, #4]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 17c:	4a24      	ldr	r2, [pc, #144]	; (210 <_Min_Heap_Size+0x10>)
 17e:	687b      	ldr	r3, [r7, #4]
 180:	4293      	cmp	r3, r2
 182:	d00a      	beq.n	19a <init_synthesiser+0x78>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 184:	2200      	movs	r2, #0
 186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 18a:	481f      	ldr	r0, [pc, #124]	; (208 <_Min_Heap_Size+0x8>)
 18c:	f000 fbbc 	bl	908 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 190:	4820      	ldr	r0, [pc, #128]	; (214 <_Min_Heap_Size+0x14>)
 192:	f000 fb9d 	bl	8d0 <__puts_veneer>
		return ERROR;
 196:	2301      	movs	r3, #1
 198:	e030      	b.n	1fc <init_synthesiser+0xda>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 19a:	481f      	ldr	r0, [pc, #124]	; (218 <_Min_Heap_Size+0x18>)
 19c:	f000 fb98 	bl	8d0 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(0x17); // Get the current value of the modes register
 1a0:	2017      	movs	r0, #23
 1a2:	f7ff ffa7 	bl	f4 <synth_readreg>
 1a6:	6078      	str	r0, [r7, #4]
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 1a8:	687b      	ldr	r3, [r7, #4]
 1aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 1ae:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, 0x17, 0x0, true); // Send
 1b0:	2301      	movs	r3, #1
 1b2:	2200      	movs	r2, #0
 1b4:	2117      	movs	r1, #23
 1b6:	6878      	ldr	r0, [r7, #4]
 1b8:	f7ff ff22 	bl	0 <synth_writereg>
	//read_data = synth_readreg(0x7); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, 0x07, 0x0, true); // Update the VCO divide register.

	synth_writereg(1, 0x02, 0x0, true); // Reference divider setting.
 1bc:	2301      	movs	r3, #1
 1be:	2200      	movs	r2, #0
 1c0:	2102      	movs	r1, #2
 1c2:	2001      	movs	r0, #1
 1c4:	f7ff ff1c 	bl	0 <synth_writereg>

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(0x16); // Get the current value
 1c8:	2016      	movs	r0, #22
 1ca:	f7ff ff93 	bl	f4 <synth_readreg>
 1ce:	6078      	str	r0, [r7, #4]
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 1d0:	687b      	ldr	r3, [r7, #4]
 1d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 1d6:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 1d8:	687b      	ldr	r3, [r7, #4]
 1da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 1de:	607b      	str	r3, [r7, #4]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 1e0:	687b      	ldr	r3, [r7, #4]
 1e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 1e6:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, 0x07, 0x0, true); // Send
 1e8:	2301      	movs	r3, #1
 1ea:	2200      	movs	r2, #0
 1ec:	2107      	movs	r1, #7
 1ee:	6878      	ldr	r0, [r7, #4]
 1f0:	f7ff ff06 	bl	0 <synth_writereg>
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 1f4:	200a      	movs	r0, #10
 1f6:	f000 fb7b 	bl	8f0 <__HAL_Delay_veneer>

	return SUCCESS;
 1fa:	2300      	movs	r3, #0

}
 1fc:	4618      	mov	r0, r3
 1fe:	3708      	adds	r7, #8
 200:	46bd      	mov	sp, r7
 202:	bd80      	pop	{r7, pc}
 204:	58021000 	.word	0x58021000
 208:	58020800 	.word	0x58020800
 20c:	0041bfff 	.word	0x0041bfff
 210:	00c7701a 	.word	0x00c7701a
 214:	0800a878 	.word	0x0800a878
 218:	0800a894 	.word	0x0800a894

0000021c <check_lock>:

static const bool check_lock(uint32_t timeout) {
 21c:	b580      	push	{r7, lr}
 21e:	b084      	sub	sp, #16
 220:	af00      	add	r7, sp, #0
 222:	6078      	str	r0, [r7, #4]

	bool locked = false;
 224:	2300      	movs	r3, #0
 226:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 228:	4b16      	ldr	r3, [pc, #88]	; (284 <check_lock+0x68>)
 22a:	681b      	ldr	r3, [r3, #0]
 22c:	4618      	mov	r0, r3
 22e:	f000 fa0d 	bl	64c <start_timer>
 232:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 234:	e014      	b.n	260 <check_lock+0x44>
		locked = synth_readreg(0x12) & (1UL << 1);
 236:	2012      	movs	r0, #18
 238:	f7ff ff5c 	bl	f4 <synth_readreg>
 23c:	4603      	mov	r3, r0
 23e:	f003 0302 	and.w	r3, r3, #2
 242:	2b00      	cmp	r3, #0
 244:	bf14      	ite	ne
 246:	2301      	movne	r3, #1
 248:	2300      	moveq	r3, #0
 24a:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 24c:	7bfb      	ldrb	r3, [r7, #15]
 24e:	2b00      	cmp	r3, #0
 250:	d006      	beq.n	260 <check_lock+0x44>
			stop_timer(FAST_TIMER);
 252:	4b0c      	ldr	r3, [pc, #48]	; (284 <check_lock+0x68>)
 254:	681b      	ldr	r3, [r3, #0]
 256:	4618      	mov	r0, r3
 258:	f000 fa16 	bl	688 <stop_timer>
			return true;
 25c:	2301      	movs	r3, #1
 25e:	e00d      	b.n	27c <check_lock+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 260:	4b08      	ldr	r3, [pc, #32]	; (284 <check_lock+0x68>)
 262:	681b      	ldr	r3, [r3, #0]
 264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 266:	68bb      	ldr	r3, [r7, #8]
 268:	1ad3      	subs	r3, r2, r3
 26a:	687a      	ldr	r2, [r7, #4]
 26c:	429a      	cmp	r2, r3
 26e:	d8e2      	bhi.n	236 <check_lock+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 270:	4b04      	ldr	r3, [pc, #16]	; (284 <check_lock+0x68>)
 272:	681b      	ldr	r3, [r3, #0]
 274:	4618      	mov	r0, r3
 276:	f000 fa07 	bl	688 <stop_timer>
	return false;
 27a:	2300      	movs	r3, #0
}
 27c:	4618      	mov	r0, r3
 27e:	3710      	adds	r7, #16
 280:	46bd      	mov	sp, r7
 282:	bd80      	pop	{r7, pc}
 284:	20000004 	.word	0x20000004

00000288 <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 288:	b580      	push	{r7, lr}
 28a:	b086      	sub	sp, #24
 28c:	af00      	add	r7, sp, #0
 28e:	60f8      	str	r0, [r7, #12]
 290:	60b9      	str	r1, [r7, #8]
 292:	607a      	str	r2, [r7, #4]
 294:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 296:	2300      	movs	r3, #0
 298:	617b      	str	r3, [r7, #20]

	if (mute) {
 29a:	78fb      	ldrb	r3, [r7, #3]
 29c:	2b00      	cmp	r3, #0
 29e:	d00d      	beq.n	2bc <set_frequency+0x34>
		/* Mute the outputs */
		read_data = synth_readreg(0x16); // Get the current value.
 2a0:	2016      	movs	r0, #22
 2a2:	f7ff ff27 	bl	f4 <synth_readreg>
 2a6:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 2a8:	697b      	ldr	r3, [r7, #20]
 2aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 2ae:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
 2b0:	2301      	movs	r3, #1
 2b2:	2200      	movs	r2, #0
 2b4:	2116      	movs	r1, #22
 2b6:	6978      	ldr	r0, [r7, #20]
 2b8:	f7ff fea2 	bl	0 <synth_writereg>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <set_frequency+0xf0>)
 2be:	681b      	ldr	r3, [r3, #0]
 2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 2c4:	d004      	beq.n	2d0 <set_frequency+0x48>
 2c6:	4b2c      	ldr	r3, [pc, #176]	; (378 <set_frequency+0xf0>)
 2c8:	681b      	ldr	r3, [r3, #0]
 2ca:	68fa      	ldr	r2, [r7, #12]
 2cc:	429a      	cmp	r2, r3
 2ce:	d008      	beq.n	2e2 <set_frequency+0x5a>
		synth_writereg(integer, 0x03, 0x0, true);   // Integer register.
 2d0:	2301      	movs	r3, #1
 2d2:	2200      	movs	r2, #0
 2d4:	2103      	movs	r1, #3
 2d6:	68f8      	ldr	r0, [r7, #12]
 2d8:	f7ff fe92 	bl	0 <synth_writereg>
		last_integer = integer;
 2dc:	4a26      	ldr	r2, [pc, #152]	; (378 <set_frequency+0xf0>)
 2de:	68fb      	ldr	r3, [r7, #12]
 2e0:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 2e2:	4b26      	ldr	r3, [pc, #152]	; (37c <set_frequency+0xf4>)
 2e4:	681b      	ldr	r3, [r3, #0]
 2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 2ea:	d004      	beq.n	2f6 <set_frequency+0x6e>
 2ec:	4b23      	ldr	r3, [pc, #140]	; (37c <set_frequency+0xf4>)
 2ee:	681b      	ldr	r3, [r3, #0]
 2f0:	68ba      	ldr	r2, [r7, #8]
 2f2:	429a      	cmp	r2, r3
 2f4:	d008      	beq.n	308 <set_frequency+0x80>
		synth_writereg(fraction, 0x04, 0x0, true);  // Fractional register.
 2f6:	2301      	movs	r3, #1
 2f8:	2200      	movs	r2, #0
 2fa:	2104      	movs	r1, #4
 2fc:	68b8      	ldr	r0, [r7, #8]
 2fe:	f7ff fe7f 	bl	0 <synth_writereg>
		last_fraction = fraction;
 302:	4a1e      	ldr	r2, [pc, #120]	; (37c <set_frequency+0xf4>)
 304:	68bb      	ldr	r3, [r7, #8]
 306:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
 308:	4b1d      	ldr	r3, [pc, #116]	; (380 <set_frequency+0xf8>)
 30a:	681b      	ldr	r3, [r3, #0]
 30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 310:	d004      	beq.n	31c <set_frequency+0x94>
 312:	4b1b      	ldr	r3, [pc, #108]	; (380 <set_frequency+0xf8>)
 314:	681b      	ldr	r3, [r3, #0]
 316:	687a      	ldr	r2, [r7, #4]
 318:	429a      	cmp	r2, r3
 31a:	d014      	beq.n	346 <set_frequency+0xbe>
		read_data = synth_readreg(0x16); // Get the current value.
 31c:	2016      	movs	r0, #22
 31e:	f7ff fee9 	bl	f4 <synth_readreg>
 322:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 324:	697b      	ldr	r3, [r7, #20]
 326:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 32a:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will un-mute the outputs */
 32c:	697a      	ldr	r2, [r7, #20]
 32e:	687b      	ldr	r3, [r7, #4]
 330:	4313      	orrs	r3, r2
 332:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, 0x16, 0x0, true); // Update the VCO divide register.
 334:	2301      	movs	r3, #1
 336:	2200      	movs	r2, #0
 338:	2116      	movs	r1, #22
 33a:	6978      	ldr	r0, [r7, #20]
 33c:	f7ff fe60 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
 340:	4a0f      	ldr	r2, [pc, #60]	; (380 <set_frequency+0xf8>)
 342:	687b      	ldr	r3, [r7, #4]
 344:	6013      	str	r3, [r2, #0]
	}

	if (!check_lock(LOCK_WAIT_US)) {
 346:	230a      	movs	r3, #10
 348:	4618      	mov	r0, r3
 34a:	f7ff ff67 	bl	21c <check_lock>
 34e:	4603      	mov	r3, r0
 350:	f083 0301 	eor.w	r3, r3, #1
 354:	b2db      	uxtb	r3, r3
 356:	2b00      	cmp	r3, #0
 358:	d009      	beq.n	36e <set_frequency+0xe6>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 35a:	2200      	movs	r2, #0
 35c:	2102      	movs	r1, #2
 35e:	4809      	ldr	r0, [pc, #36]	; (384 <set_frequency+0xfc>)
 360:	f000 fad2 	bl	908 <__HAL_GPIO_WritePin_veneer>
		printf("Lock failed!\r\n");
 364:	4808      	ldr	r0, [pc, #32]	; (388 <set_frequency+0x100>)
 366:	f000 fab3 	bl	8d0 <__puts_veneer>
		Error_Handler();
 36a:	f000 fad9 	bl	920 <__Error_Handler_veneer>
	}

}
 36e:	bf00      	nop
 370:	3718      	adds	r7, #24
 372:	46bd      	mov	sp, r7
 374:	bd80      	pop	{r7, pc}
 376:	bf00      	nop
 378:	20000008 	.word	0x20000008
 37c:	2000000c 	.word	0x2000000c
 380:	20000010 	.word	0x20000010
 384:	58021000 	.word	0x58021000
 388:	0800a8a8 	.word	0x0800a8a8

0000038c <set_frequency_hz>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}

static void set_frequency_hz(const double fo) {
 38c:	b580      	push	{r7, lr}
 38e:	b08a      	sub	sp, #40	; 0x28
 390:	af00      	add	r7, sp, #0
 392:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 396:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 490 <_Min_Stack_Size+0x90>
 39a:	ed97 6b00 	vldr	d6, [r7]
 39e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 3a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 3a6:	ee17 3a90 	vmov	r3, s15
 3aa:	627b      	str	r3, [r7, #36]	; 0x24

	if (k != 1) {
 3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3ae:	2b01      	cmp	r3, #1
 3b0:	d00b      	beq.n	3ca <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 3b2:	e002      	b.n	3ba <set_frequency_hz+0x2e>
			k = k - 1;
 3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3b6:	3b01      	subs	r3, #1
 3b8:	627b      	str	r3, [r7, #36]	; 0x24
		while (k > 62 || k % 2) {
 3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3bc:	2b3e      	cmp	r3, #62	; 0x3e
 3be:	d8f9      	bhi.n	3b4 <set_frequency_hz+0x28>
 3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3c2:	f003 0301 	and.w	r3, r3, #1
 3c6:	2b00      	cmp	r3, #0
 3c8:	d1f4      	bne.n	3b4 <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 3cc:	ee07 3a90 	vmov	s15, r3
 3d0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 3d4:	ed97 7b00 	vldr	d7, [r7]
 3d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 3dc:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 498 <_Min_Stack_Size+0x98>
 3e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 3e4:	ed87 7b06 	vstr	d7, [r7, #24]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 3e8:	ed97 7b06 	vldr	d7, [r7, #24]
 3ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 3f0:	ee17 3a90 	vmov	r3, s15
 3f4:	617b      	str	r3, [r7, #20]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 3f6:	697b      	ldr	r3, [r7, #20]
 3f8:	ee07 3a90 	vmov	s15, r3
 3fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 400:	ed97 6b06 	vldr	d6, [r7, #24]
 404:	ee36 7b47 	vsub.f64	d7, d6, d7
 408:	ed9f 6b25 	vldr	d6, [pc, #148]	; 4a0 <_Min_Stack_Size+0xa0>
 40c:	ee27 7b06 	vmul.f64	d7, d7, d6
 410:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 414:	ee37 7b06 	vadd.f64	d7, d7, d6
 418:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 41c:	ee17 3a90 	vmov	r3, s15
 420:	613b      	str	r3, [r7, #16]

	const double fo_check = (REF_FREQ * (NINT + (NFRAC / (double) (1 << 24)))) / k;
 422:	697b      	ldr	r3, [r7, #20]
 424:	ee07 3a90 	vmov	s15, r3
 428:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 42c:	693b      	ldr	r3, [r7, #16]
 42e:	ee07 3a90 	vmov	s15, r3
 432:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 436:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 4a0 <_Min_Stack_Size+0xa0>
 43a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 43e:	ee36 7b07 	vadd.f64	d7, d6, d7
 442:	ed9f 6b15 	vldr	d6, [pc, #84]	; 498 <_Min_Stack_Size+0x98>
 446:	ee27 5b06 	vmul.f64	d5, d7, d6
 44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 44c:	ee07 3a90 	vmov	s15, r3
 450:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 454:	ee85 7b06 	vdiv.f64	d7, d5, d6
 458:	ed87 7b02 	vstr	d7, [r7, #8]
	if (fo != fo_check) {
 45c:	ed97 6b00 	vldr	d6, [r7]
 460:	ed97 7b02 	vldr	d7, [r7, #8]
 464:	eeb4 6b47 	vcmp.f64	d6, d7
 468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 46c:	d004      	beq.n	478 <_Min_Stack_Size+0x78>
		printf("f0 check failed! - point2\r\n");
 46e:	480e      	ldr	r0, [pc, #56]	; (4a8 <_Min_Stack_Size+0xa8>)
 470:	f000 fa2e 	bl	8d0 <__puts_veneer>
		Error_Handler();
 474:	f000 fa54 	bl	920 <__Error_Handler_veneer>
	}

	set_frequency(NINT, NFRAC, k, false);
 478:	2300      	movs	r3, #0
 47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 47c:	6939      	ldr	r1, [r7, #16]
 47e:	6978      	ldr	r0, [r7, #20]
 480:	f7ff ff02 	bl	288 <set_frequency>

}
 484:	bf00      	nop
 486:	3728      	adds	r7, #40	; 0x28
 488:	46bd      	mov	sp, r7
 48a:	bd80      	pop	{r7, pc}
 48c:	f3af 8000 	nop.w
 490:	20000000 	.word	0x20000000
 494:	41ee8c21 	.word	0x41ee8c21
 498:	00000000 	.word	0x00000000
 49c:	4187d784 	.word	0x4187d784
 4a0:	00000000 	.word	0x00000000
 4a4:	41700000 	.word	0x41700000
 4a8:	0800a8b8 	.word	0x0800a8b8

000004ac <run_sweep>:
static void run_sweep() {
 4ac:	b580      	push	{r7, lr}
 4ae:	b08a      	sub	sp, #40	; 0x28
 4b0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 4b2:	2201      	movs	r2, #1
 4b4:	2102      	movs	r1, #2
 4b6:	485e      	ldr	r0, [pc, #376]	; (630 <run_sweep+0x184>)
 4b8:	f000 fa26 	bl	908 <__HAL_GPIO_WritePin_veneer>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 4bc:	b672      	cpsid	i
}
 4be:	bf00      	nop
	for (uint32_t i = 0; i < num_points; i++) {
 4c0:	2300      	movs	r3, #0
 4c2:	627b      	str	r3, [r7, #36]	; 0x24
 4c4:	e090      	b.n	5e8 <run_sweep+0x13c>
		double fo = start_freq + (i * sweep_settings.step_size);
 4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 4c8:	ee07 3a90 	vmov	s15, r3
 4cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 4d0:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 610 <run_sweep+0x164>
 4d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 4d8:	4b56      	ldr	r3, [pc, #344]	; (634 <run_sweep+0x188>)
 4da:	ed93 7b00 	vldr	d7, [r3]
 4de:	ee36 7b07 	vadd.f64	d7, d6, d7
 4e2:	ed87 7b06 	vstr	d7, [r7, #24]
		uint32_t k = VCO_MAX_FREQ / fo;
 4e6:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 618 <run_sweep+0x16c>
 4ea:	ed97 6b06 	vldr	d6, [r7, #24]
 4ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 4f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 4f6:	ee17 3a90 	vmov	r3, s15
 4fa:	623b      	str	r3, [r7, #32]
		if (k != 1) {
 4fc:	6a3b      	ldr	r3, [r7, #32]
 4fe:	2b01      	cmp	r3, #1
 500:	d00b      	beq.n	51a <run_sweep+0x6e>
			while (k > 62 || k % 2) {
 502:	e002      	b.n	50a <run_sweep+0x5e>
				k = k - 1;
 504:	6a3b      	ldr	r3, [r7, #32]
 506:	3b01      	subs	r3, #1
 508:	623b      	str	r3, [r7, #32]
			while (k > 62 || k % 2) {
 50a:	6a3b      	ldr	r3, [r7, #32]
 50c:	2b3e      	cmp	r3, #62	; 0x3e
 50e:	d8f9      	bhi.n	504 <run_sweep+0x58>
 510:	6a3b      	ldr	r3, [r7, #32]
 512:	f003 0301 	and.w	r3, r3, #1
 516:	2b00      	cmp	r3, #0
 518:	d1f4      	bne.n	504 <run_sweep+0x58>
		const double N = ((fo * k) / REF_FREQ);
 51a:	6a3b      	ldr	r3, [r7, #32]
 51c:	ee07 3a90 	vmov	s15, r3
 520:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 524:	ed97 7b06 	vldr	d7, [r7, #24]
 528:	ee26 6b07 	vmul.f64	d6, d6, d7
 52c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 620 <run_sweep+0x174>
 530:	ee86 7b05 	vdiv.f64	d7, d6, d5
 534:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t NINT = N;
 538:	ed97 7b04 	vldr	d7, [r7, #16]
 53c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 540:	ee17 3a90 	vmov	r3, s15
 544:	60fb      	str	r3, [r7, #12]
		const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 546:	68fb      	ldr	r3, [r7, #12]
 548:	ee07 3a90 	vmov	s15, r3
 54c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 550:	ed97 6b04 	vldr	d6, [r7, #16]
 554:	ee36 7b47 	vsub.f64	d7, d6, d7
 558:	ed9f 6b33 	vldr	d6, [pc, #204]	; 628 <run_sweep+0x17c>
 55c:	ee27 7b06 	vmul.f64	d7, d7, d6
 560:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 564:	ee37 7b06 	vadd.f64	d7, d7, d6
 568:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 56c:	ee17 3a90 	vmov	r3, s15
 570:	60bb      	str	r3, [r7, #8]
		const double fo_check = (REF_FREQ * (NINT + (NFRAC / (double) (1 << 24)))) / k;
 572:	68fb      	ldr	r3, [r7, #12]
 574:	ee07 3a90 	vmov	s15, r3
 578:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 57c:	68bb      	ldr	r3, [r7, #8]
 57e:	ee07 3a90 	vmov	s15, r3
 582:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 586:	ed9f 4b28 	vldr	d4, [pc, #160]	; 628 <run_sweep+0x17c>
 58a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 58e:	ee36 7b07 	vadd.f64	d7, d6, d7
 592:	ed9f 6b23 	vldr	d6, [pc, #140]	; 620 <run_sweep+0x174>
 596:	ee27 5b06 	vmul.f64	d5, d7, d6
 59a:	6a3b      	ldr	r3, [r7, #32]
 59c:	ee07 3a90 	vmov	s15, r3
 5a0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 5a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 5a8:	ed87 7b00 	vstr	d7, [r7]
		if (fo != fo_check) {
 5ac:	ed97 6b06 	vldr	d6, [r7, #24]
 5b0:	ed97 7b00 	vldr	d7, [r7]
 5b4:	eeb4 6b47 	vcmp.f64	d6, d7
 5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 5bc:	d004      	beq.n	5c8 <run_sweep+0x11c>
			printf("f0 check failed - point 1!\r\n");
 5be:	481e      	ldr	r0, [pc, #120]	; (638 <run_sweep+0x18c>)
 5c0:	f000 f986 	bl	8d0 <__puts_veneer>
			Error_Handler();
 5c4:	f000 f9ac 	bl	920 <__Error_Handler_veneer>
		set_frequency(60, 11992019, 1, false);
 5c8:	2300      	movs	r3, #0
 5ca:	2201      	movs	r2, #1
 5cc:	491b      	ldr	r1, [pc, #108]	; (63c <run_sweep+0x190>)
 5ce:	203c      	movs	r0, #60	; 0x3c
 5d0:	f7ff fe5a 	bl	288 <set_frequency>
		timer_delay(FAST_TIMER, DWELL_TIME_US);
 5d4:	4b1a      	ldr	r3, [pc, #104]	; (640 <run_sweep+0x194>)
 5d6:	681b      	ldr	r3, [r3, #0]
 5d8:	2264      	movs	r2, #100	; 0x64
 5da:	4611      	mov	r1, r2
 5dc:	4618      	mov	r0, r3
 5de:	f000 f865 	bl	6ac <timer_delay>
	for (uint32_t i = 0; i < num_points; i++) {
 5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 5e4:	3301      	adds	r3, #1
 5e6:	627b      	str	r3, [r7, #36]	; 0x24
 5e8:	4b16      	ldr	r3, [pc, #88]	; (644 <run_sweep+0x198>)
 5ea:	681b      	ldr	r3, [r3, #0]
 5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 5ee:	429a      	cmp	r2, r3
 5f0:	f4ff af69 	bcc.w	4c6 <run_sweep+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 5f4:	b662      	cpsie	i
}
 5f6:	bf00      	nop
	printf("Total Points: %lu; s\r\n", num_points);
 5f8:	4b12      	ldr	r3, [pc, #72]	; (644 <run_sweep+0x198>)
 5fa:	681b      	ldr	r3, [r3, #0]
 5fc:	4619      	mov	r1, r3
 5fe:	4812      	ldr	r0, [pc, #72]	; (648 <run_sweep+0x19c>)
 600:	f000 f96a 	bl	8d8 <__printf_veneer>
}
 604:	bf00      	nop
 606:	3728      	adds	r7, #40	; 0x28
 608:	46bd      	mov	sp, r7
 60a:	bd80      	pop	{r7, pc}
 60c:	f3af 8000 	nop.w
 610:	00000000 	.word	0x00000000
 614:	4007d784 	.word	0x4007d784
 618:	20000000 	.word	0x20000000
 61c:	41ee8c21 	.word	0x41ee8c21
 620:	00000000 	.word	0x00000000
 624:	4187d784 	.word	0x4187d784
 628:	00000000 	.word	0x00000000
 62c:	41700000 	.word	0x41700000
 630:	58021000 	.word	0x58021000
 634:	0800ab20 	.word	0x0800ab20
 638:	0800a8d4 	.word	0x0800a8d4
 63c:	00b6fbd3 	.word	0x00b6fbd3
 640:	20000004 	.word	0x20000004
 644:	0800ab28 	.word	0x0800ab28
 648:	0800a8f0 	.word	0x0800a8f0

0000064c <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);

}

static uint32_t start_timer(TIM_TypeDef * timer) {
 64c:	b480      	push	{r7}
 64e:	b083      	sub	sp, #12
 650:	af00      	add	r7, sp, #0
 652:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 654:	687b      	ldr	r3, [r7, #4]
 656:	681b      	ldr	r3, [r3, #0]
 658:	f023 0201 	bic.w	r2, r3, #1
 65c:	687b      	ldr	r3, [r7, #4]
 65e:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
 660:	687b      	ldr	r3, [r7, #4]
 662:	695b      	ldr	r3, [r3, #20]
 664:	f043 0201 	orr.w	r2, r3, #1
 668:	687b      	ldr	r3, [r7, #4]
 66a:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
 66c:	687b      	ldr	r3, [r7, #4]
 66e:	681b      	ldr	r3, [r3, #0]
 670:	f043 0201 	orr.w	r2, r3, #1
 674:	687b      	ldr	r3, [r7, #4]
 676:	601a      	str	r2, [r3, #0]
	return timer->CNT;
 678:	687b      	ldr	r3, [r7, #4]
 67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 67c:	4618      	mov	r0, r3
 67e:	370c      	adds	r7, #12
 680:	46bd      	mov	sp, r7
 682:	f85d 7b04 	ldr.w	r7, [sp], #4
 686:	4770      	bx	lr

00000688 <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
 688:	b480      	push	{r7}
 68a:	b083      	sub	sp, #12
 68c:	af00      	add	r7, sp, #0
 68e:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 690:	687b      	ldr	r3, [r7, #4]
 692:	681b      	ldr	r3, [r3, #0]
 694:	f023 0201 	bic.w	r2, r3, #1
 698:	687b      	ldr	r3, [r7, #4]
 69a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
 69c:	687b      	ldr	r3, [r7, #4]
 69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 6a0:	4618      	mov	r0, r3
 6a2:	370c      	adds	r7, #12
 6a4:	46bd      	mov	sp, r7
 6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 6aa:	4770      	bx	lr

000006ac <timer_delay>:

static void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
 6ac:	b480      	push	{r7}
 6ae:	b085      	sub	sp, #20
 6b0:	af00      	add	r7, sp, #0
 6b2:	6078      	str	r0, [r7, #4]
 6b4:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
 6b6:	687b      	ldr	r3, [r7, #4]
 6b8:	681b      	ldr	r3, [r3, #0]
 6ba:	f023 0201 	bic.w	r2, r3, #1
 6be:	687b      	ldr	r3, [r7, #4]
 6c0:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
 6c2:	687b      	ldr	r3, [r7, #4]
 6c4:	695b      	ldr	r3, [r3, #20]
 6c6:	f043 0201 	orr.w	r2, r3, #1
 6ca:	687b      	ldr	r3, [r7, #4]
 6cc:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
 6ce:	687b      	ldr	r3, [r7, #4]
 6d0:	681b      	ldr	r3, [r3, #0]
 6d2:	f043 0201 	orr.w	r2, r3, #1
 6d6:	687b      	ldr	r3, [r7, #4]
 6d8:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
 6da:	687b      	ldr	r3, [r7, #4]
 6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 6de:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
 6e0:	bf00      	nop
 6e2:	687b      	ldr	r3, [r7, #4]
 6e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 6e6:	68fb      	ldr	r3, [r7, #12]
 6e8:	1ad3      	subs	r3, r2, r3
 6ea:	683a      	ldr	r2, [r7, #0]
 6ec:	429a      	cmp	r2, r3
 6ee:	d8f8      	bhi.n	6e2 <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
 6f0:	687b      	ldr	r3, [r7, #4]
 6f2:	681b      	ldr	r3, [r3, #0]
 6f4:	f023 0201 	bic.w	r2, r3, #1
 6f8:	687b      	ldr	r3, [r7, #4]
 6fa:	601a      	str	r2, [r3, #0]

}
 6fc:	bf00      	nop
 6fe:	3714      	adds	r7, #20
 700:	46bd      	mov	sp, r7
 702:	f85d 7b04 	ldr.w	r7, [sp], #4
 706:	4770      	bx	lr

00000708 <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 708:	b580      	push	{r7, lr}
 70a:	b082      	sub	sp, #8
 70c:	af00      	add	r7, sp, #0
 70e:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 710:	2201      	movs	r2, #1
 712:	2180      	movs	r1, #128	; 0x80
 714:	4822      	ldr	r0, [pc, #136]	; (7a0 <set_aom_atten+0x98>)
 716:	f000 f8f7 	bl	908 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 71a:	793b      	ldrb	r3, [r7, #4]
 71c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 720:	b2db      	uxtb	r3, r3
 722:	461a      	mov	r2, r3
 724:	2140      	movs	r1, #64	; 0x40
 726:	481e      	ldr	r0, [pc, #120]	; (7a0 <set_aom_atten+0x98>)
 728:	f000 f8ee 	bl	908 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 72c:	793b      	ldrb	r3, [r7, #4]
 72e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 732:	b2db      	uxtb	r3, r3
 734:	461a      	mov	r2, r3
 736:	2120      	movs	r1, #32
 738:	4819      	ldr	r0, [pc, #100]	; (7a0 <set_aom_atten+0x98>)
 73a:	f000 f8e5 	bl	908 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 73e:	793b      	ldrb	r3, [r7, #4]
 740:	f3c3 0380 	ubfx	r3, r3, #2, #1
 744:	b2db      	uxtb	r3, r3
 746:	461a      	mov	r2, r3
 748:	2110      	movs	r1, #16
 74a:	4815      	ldr	r0, [pc, #84]	; (7a0 <set_aom_atten+0x98>)
 74c:	f000 f8dc 	bl	908 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 750:	793b      	ldrb	r3, [r7, #4]
 752:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 756:	b2db      	uxtb	r3, r3
 758:	461a      	mov	r2, r3
 75a:	2108      	movs	r1, #8
 75c:	4810      	ldr	r0, [pc, #64]	; (7a0 <set_aom_atten+0x98>)
 75e:	f000 f8d3 	bl	908 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 762:	793b      	ldrb	r3, [r7, #4]
 764:	f3c3 1300 	ubfx	r3, r3, #4, #1
 768:	b2db      	uxtb	r3, r3
 76a:	461a      	mov	r2, r3
 76c:	2104      	movs	r1, #4
 76e:	480d      	ldr	r0, [pc, #52]	; (7a4 <set_aom_atten+0x9c>)
 770:	f000 f8ca 	bl	908 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 774:	793b      	ldrb	r3, [r7, #4]
 776:	f3c3 1340 	ubfx	r3, r3, #5, #1
 77a:	b2db      	uxtb	r3, r3
 77c:	461a      	mov	r2, r3
 77e:	2110      	movs	r1, #16
 780:	4808      	ldr	r0, [pc, #32]	; (7a4 <set_aom_atten+0x9c>)
 782:	f000 f8c1 	bl	908 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 786:	793b      	ldrb	r3, [r7, #4]
 788:	f3c3 1380 	ubfx	r3, r3, #6, #1
 78c:	b2db      	uxtb	r3, r3
 78e:	461a      	mov	r2, r3
 790:	2120      	movs	r1, #32
 792:	4804      	ldr	r0, [pc, #16]	; (7a4 <set_aom_atten+0x9c>)
 794:	f000 f8b8 	bl	908 <__HAL_GPIO_WritePin_veneer>
}
 798:	bf00      	nop
 79a:	3708      	adds	r7, #8
 79c:	46bd      	mov	sp, r7
 79e:	bd80      	pop	{r7, pc}
 7a0:	58020c00 	.word	0x58020c00
 7a4:	58021000 	.word	0x58021000

000007a8 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

static void start_pop() {
 7a8:	b580      	push	{r7, lr}
 7aa:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 7ac:	f240 1103 	movw	r1, #259	; 0x103
 7b0:	4821      	ldr	r0, [pc, #132]	; (838 <start_pop+0x90>)
 7b2:	f000 f895 	bl	8e0 <__HAL_HRTIM_WaveformOutputStart_veneer>
 7b6:	4603      	mov	r3, r0
 7b8:	2b00      	cmp	r3, #0
 7ba:	d004      	beq.n	7c6 <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
 7bc:	481f      	ldr	r0, [pc, #124]	; (83c <start_pop+0x94>)
 7be:	f000 f887 	bl	8d0 <__puts_veneer>
		Error_Handler();
 7c2:	f000 f8ad 	bl	920 <__Error_Handler_veneer>
	}

#ifdef POP_START_PULSE

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 7c6:	2302      	movs	r3, #2
 7c8:	2202      	movs	r2, #2
 7ca:	2100      	movs	r1, #0
 7cc:	481a      	ldr	r0, [pc, #104]	; (838 <start_pop+0x90>)
 7ce:	f000 f897 	bl	900 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 7d2:	4603      	mov	r3, r0
 7d4:	2b00      	cmp	r3, #0
 7d6:	d004      	beq.n	7e2 <start_pop+0x3a>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
		printf("POP failure point C!\r\n");
 7d8:	4819      	ldr	r0, [pc, #100]	; (840 <start_pop+0x98>)
 7da:	f000 f879 	bl	8d0 <__puts_veneer>
		Error_Handler();
 7de:	f000 f89f 	bl	920 <__Error_Handler_veneer>
	}

	timer_delay(SLOW_TIMER, 1000);
 7e2:	4b18      	ldr	r3, [pc, #96]	; (844 <start_pop+0x9c>)
 7e4:	681b      	ldr	r3, [r3, #0]
 7e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 7ea:	4618      	mov	r0, r3
 7ec:	f7ff ff5e 	bl	6ac <timer_delay>

	if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 7f0:	2301      	movs	r3, #1
 7f2:	2202      	movs	r2, #2
 7f4:	2100      	movs	r1, #0
 7f6:	4810      	ldr	r0, [pc, #64]	; (838 <start_pop+0x90>)
 7f8:	f000 f882 	bl	900 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>
 7fc:	4603      	mov	r3, r0
 7fe:	2b00      	cmp	r3, #0
 800:	d004      	beq.n	80c <start_pop+0x64>
	HRTIM_TIMERINDEX_TIMER_A,
	HRTIM_OUTPUT_TA2, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
		printf("POP failure point D!\r\n");
 802:	4811      	ldr	r0, [pc, #68]	; (848 <start_pop+0xa0>)
 804:	f000 f864 	bl	8d0 <__puts_veneer>
		Error_Handler();
 808:	f000 f88a 	bl	920 <__Error_Handler_veneer>
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 80c:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 810:	4809      	ldr	r0, [pc, #36]	; (838 <start_pop+0x90>)
 812:	f000 f87d 	bl	910 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 816:	4603      	mov	r3, r0
 818:	2b00      	cmp	r3, #0
 81a:	d004      	beq.n	826 <start_pop+0x7e>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 81c:	480b      	ldr	r0, [pc, #44]	; (84c <start_pop+0xa4>)
 81e:	f000 f857 	bl	8d0 <__puts_veneer>
		Error_Handler();
 822:	f000 f87d 	bl	920 <__Error_Handler_veneer>
	}

	pop_running = true;
 826:	4b0a      	ldr	r3, [pc, #40]	; (850 <start_pop+0xa8>)
 828:	2201      	movs	r2, #1
 82a:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 82c:	4809      	ldr	r0, [pc, #36]	; (854 <start_pop+0xac>)
 82e:	f000 f84f 	bl	8d0 <__puts_veneer>

}
 832:	bf00      	nop
 834:	bd80      	pop	{r7, pc}
 836:	bf00      	nop
 838:	200000d0 	.word	0x200000d0
 83c:	0800a908 	.word	0x0800a908
 840:	0800a920 	.word	0x0800a920
 844:	20000000 	.word	0x20000000
 848:	0800a938 	.word	0x0800a938
 84c:	0800a950 	.word	0x0800a950
 850:	20000310 	.word	0x20000310
 854:	0800a968 	.word	0x0800a968

00000858 <stop_pop>:
static void stop_pop() {
 858:	b580      	push	{r7, lr}
 85a:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 85c:	f240 1103 	movw	r1, #259	; 0x103
 860:	4813      	ldr	r0, [pc, #76]	; (8b0 <stop_pop+0x58>)
 862:	f000 f849 	bl	8f8 <__HAL_HRTIM_WaveformOutputStop_veneer>
 866:	4603      	mov	r3, r0
 868:	2b00      	cmp	r3, #0
 86a:	d004      	beq.n	876 <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 86c:	4811      	ldr	r0, [pc, #68]	; (8b4 <stop_pop+0x5c>)
 86e:	f000 f82f 	bl	8d0 <__puts_veneer>
		Error_Handler();
 872:	f000 f855 	bl	920 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 876:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 87a:	480d      	ldr	r0, [pc, #52]	; (8b0 <stop_pop+0x58>)
 87c:	f000 f84c 	bl	918 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 880:	4603      	mov	r3, r0
 882:	2b00      	cmp	r3, #0
 884:	d004      	beq.n	890 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 886:	480c      	ldr	r0, [pc, #48]	; (8b8 <stop_pop+0x60>)
 888:	f000 f822 	bl	8d0 <__puts_veneer>
		Error_Handler();
 88c:	f000 f848 	bl	920 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 890:	4b0a      	ldr	r3, [pc, #40]	; (8bc <stop_pop+0x64>)
 892:	2200      	movs	r2, #0
 894:	601a      	str	r2, [r3, #0]
	pop_running = false;
 896:	4b0a      	ldr	r3, [pc, #40]	; (8c0 <stop_pop+0x68>)
 898:	2200      	movs	r2, #0
 89a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 89c:	2200      	movs	r2, #0
 89e:	2102      	movs	r1, #2
 8a0:	4808      	ldr	r0, [pc, #32]	; (8c4 <stop_pop+0x6c>)
 8a2:	f000 f831 	bl	908 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 8a6:	4808      	ldr	r0, [pc, #32]	; (8c8 <stop_pop+0x70>)
 8a8:	f000 f812 	bl	8d0 <__puts_veneer>
}
 8ac:	bf00      	nop
 8ae:	bd80      	pop	{r7, pc}
 8b0:	200000d0 	.word	0x200000d0
 8b4:	0800a97c 	.word	0x0800a97c
 8b8:	0800a994 	.word	0x0800a994
 8bc:	20000314 	.word	0x20000314
 8c0:	20000310 	.word	0x20000310
 8c4:	58021000 	.word	0x58021000
 8c8:	0800a9ac 	.word	0x0800a9ac
 8cc:	00000000 	.word	0x00000000

000008d0 <__puts_veneer>:
 8d0:	f85f f000 	ldr.w	pc, [pc]	; 8d4 <__puts_veneer+0x4>
 8d4:	08009911 	.word	0x08009911

000008d8 <__printf_veneer>:
 8d8:	f85f f000 	ldr.w	pc, [pc]	; 8dc <__printf_veneer+0x4>
 8dc:	08009805 	.word	0x08009805

000008e0 <__HAL_HRTIM_WaveformOutputStart_veneer>:
 8e0:	f85f f000 	ldr.w	pc, [pc]	; 8e4 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 8e4:	080037c9 	.word	0x080037c9

000008e8 <__HAL_GPIO_ReadPin_veneer>:
 8e8:	f85f f000 	ldr.w	pc, [pc]	; 8ec <__HAL_GPIO_ReadPin_veneer+0x4>
 8ec:	08002efd 	.word	0x08002efd

000008f0 <__HAL_Delay_veneer>:
 8f0:	f85f f000 	ldr.w	pc, [pc]	; 8f4 <__HAL_Delay_veneer+0x4>
 8f4:	0800261d 	.word	0x0800261d

000008f8 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 8f8:	f85f f000 	ldr.w	pc, [pc]	; 8fc <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 8fc:	08003823 	.word	0x08003823

00000900 <__HAL_HRTIM_WaveformSetOutputLevel_veneer>:
 900:	f85f f000 	ldr.w	pc, [pc]	; 904 <__HAL_HRTIM_WaveformSetOutputLevel_veneer+0x4>
 904:	080035dd 	.word	0x080035dd

00000908 <__HAL_GPIO_WritePin_veneer>:
 908:	f85f f000 	ldr.w	pc, [pc]	; 90c <__HAL_GPIO_WritePin_veneer+0x4>
 90c:	08002f2d 	.word	0x08002f2d

00000910 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 910:	f85f f000 	ldr.w	pc, [pc]	; 914 <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 914:	0800387d 	.word	0x0800387d

00000918 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 918:	f85f f000 	ldr.w	pc, [pc]	; 91c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 91c:	0800395d 	.word	0x0800395d

00000920 <__Error_Handler_veneer>:
 920:	f85f f000 	ldr.w	pc, [pc]	; 924 <__Error_Handler_veneer+0x4>
 924:	08001d69 	.word	0x08001d69

Disassembly of section .text:

08000bc0 <__do_global_dtors_aux>:
 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	4c05      	ldr	r4, [pc, #20]	; (8000bd8 <__do_global_dtors_aux+0x18>)
 8000bc4:	7823      	ldrb	r3, [r4, #0]
 8000bc6:	b933      	cbnz	r3, 8000bd6 <__do_global_dtors_aux+0x16>
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__do_global_dtors_aux+0x1c>)
 8000bca:	b113      	cbz	r3, 8000bd2 <__do_global_dtors_aux+0x12>
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <__do_global_dtors_aux+0x20>)
 8000bce:	f3af 8000 	nop.w
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	7023      	strb	r3, [r4, #0]
 8000bd6:	bd10      	pop	{r4, pc}
 8000bd8:	200000a0 	.word	0x200000a0
 8000bdc:	00000000 	.word	0x00000000
 8000be0:	0800a80c 	.word	0x0800a80c

08000be4 <frame_dummy>:
 8000be4:	b508      	push	{r3, lr}
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <frame_dummy+0x10>)
 8000be8:	b11b      	cbz	r3, 8000bf2 <frame_dummy+0xe>
 8000bea:	4903      	ldr	r1, [pc, #12]	; (8000bf8 <frame_dummy+0x14>)
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <frame_dummy+0x18>)
 8000bee:	f3af 8000 	nop.w
 8000bf2:	bd08      	pop	{r3, pc}
 8000bf4:	00000000 	.word	0x00000000
 8000bf8:	200000a4 	.word	0x200000a4
 8000bfc:	0800a80c 	.word	0x0800a80c

08000c00 <memchr>:
 8000c00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c04:	2a10      	cmp	r2, #16
 8000c06:	db2b      	blt.n	8000c60 <memchr+0x60>
 8000c08:	f010 0f07 	tst.w	r0, #7
 8000c0c:	d008      	beq.n	8000c20 <memchr+0x20>
 8000c0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c12:	3a01      	subs	r2, #1
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d02d      	beq.n	8000c74 <memchr+0x74>
 8000c18:	f010 0f07 	tst.w	r0, #7
 8000c1c:	b342      	cbz	r2, 8000c70 <memchr+0x70>
 8000c1e:	d1f6      	bne.n	8000c0e <memchr+0xe>
 8000c20:	b4f0      	push	{r4, r5, r6, r7}
 8000c22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000c26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000c2a:	f022 0407 	bic.w	r4, r2, #7
 8000c2e:	f07f 0700 	mvns.w	r7, #0
 8000c32:	2300      	movs	r3, #0
 8000c34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000c38:	3c08      	subs	r4, #8
 8000c3a:	ea85 0501 	eor.w	r5, r5, r1
 8000c3e:	ea86 0601 	eor.w	r6, r6, r1
 8000c42:	fa85 f547 	uadd8	r5, r5, r7
 8000c46:	faa3 f587 	sel	r5, r3, r7
 8000c4a:	fa86 f647 	uadd8	r6, r6, r7
 8000c4e:	faa5 f687 	sel	r6, r5, r7
 8000c52:	b98e      	cbnz	r6, 8000c78 <memchr+0x78>
 8000c54:	d1ee      	bne.n	8000c34 <memchr+0x34>
 8000c56:	bcf0      	pop	{r4, r5, r6, r7}
 8000c58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000c5c:	f002 0207 	and.w	r2, r2, #7
 8000c60:	b132      	cbz	r2, 8000c70 <memchr+0x70>
 8000c62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c66:	3a01      	subs	r2, #1
 8000c68:	ea83 0301 	eor.w	r3, r3, r1
 8000c6c:	b113      	cbz	r3, 8000c74 <memchr+0x74>
 8000c6e:	d1f8      	bne.n	8000c62 <memchr+0x62>
 8000c70:	2000      	movs	r0, #0
 8000c72:	4770      	bx	lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	2d00      	cmp	r5, #0
 8000c7a:	bf06      	itte	eq
 8000c7c:	4635      	moveq	r5, r6
 8000c7e:	3803      	subeq	r0, #3
 8000c80:	3807      	subne	r0, #7
 8000c82:	f015 0f01 	tst.w	r5, #1
 8000c86:	d107      	bne.n	8000c98 <memchr+0x98>
 8000c88:	3001      	adds	r0, #1
 8000c8a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000c8e:	bf02      	ittt	eq
 8000c90:	3001      	addeq	r0, #1
 8000c92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000c96:	3001      	addeq	r0, #1
 8000c98:	bcf0      	pop	{r4, r5, r6, r7}
 8000c9a:	3801      	subs	r0, #1
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b974 	b.w	8000fa0 <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	9d08      	ldr	r5, [sp, #32]
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	468e      	mov	lr, r1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d14d      	bne.n	8000d7a <__udivmoddi4+0xaa>
 8000cde:	428a      	cmp	r2, r1
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	d969      	bls.n	8000db8 <__udivmoddi4+0xe8>
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	b152      	cbz	r2, 8000d00 <__udivmoddi4+0x30>
 8000cea:	fa01 f302 	lsl.w	r3, r1, r2
 8000cee:	f1c2 0120 	rsb	r1, r2, #32
 8000cf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000cf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000cfe:	4094      	lsls	r4, r2
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	0c21      	lsrs	r1, r4, #16
 8000d06:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0a:	fa1f f78c 	uxth.w	r7, ip
 8000d0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000d12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d16:	fb06 f107 	mul.w	r1, r6, r7
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d90a      	bls.n	8000d34 <__udivmoddi4+0x64>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d26:	f080 811f 	bcs.w	8000f68 <__udivmoddi4+0x298>
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	f240 811c 	bls.w	8000f68 <__udivmoddi4+0x298>
 8000d30:	3e02      	subs	r6, #2
 8000d32:	4463      	add	r3, ip
 8000d34:	1a5b      	subs	r3, r3, r1
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d44:	fb00 f707 	mul.w	r7, r0, r7
 8000d48:	42a7      	cmp	r7, r4
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x92>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d54:	f080 810a 	bcs.w	8000f6c <__udivmoddi4+0x29c>
 8000d58:	42a7      	cmp	r7, r4
 8000d5a:	f240 8107 	bls.w	8000f6c <__udivmoddi4+0x29c>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	1be4      	subs	r4, r4, r7
 8000d68:	2600      	movs	r6, #0
 8000d6a:	b11d      	cbz	r5, 8000d74 <__udivmoddi4+0xa4>
 8000d6c:	40d4      	lsrs	r4, r2
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e9c5 4300 	strd	r4, r3, [r5]
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d909      	bls.n	8000d92 <__udivmoddi4+0xc2>
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	f000 80ef 	beq.w	8000f62 <__udivmoddi4+0x292>
 8000d84:	2600      	movs	r6, #0
 8000d86:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	fab3 f683 	clz	r6, r3
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d14a      	bne.n	8000e30 <__udivmoddi4+0x160>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xd4>
 8000d9e:	4282      	cmp	r2, r0
 8000da0:	f200 80f9 	bhi.w	8000f96 <__udivmoddi4+0x2c6>
 8000da4:	1a84      	subs	r4, r0, r2
 8000da6:	eb61 0303 	sbc.w	r3, r1, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	469e      	mov	lr, r3
 8000dae:	2d00      	cmp	r5, #0
 8000db0:	d0e0      	beq.n	8000d74 <__udivmoddi4+0xa4>
 8000db2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000db6:	e7dd      	b.n	8000d74 <__udivmoddi4+0xa4>
 8000db8:	b902      	cbnz	r2, 8000dbc <__udivmoddi4+0xec>
 8000dba:	deff      	udf	#255	; 0xff
 8000dbc:	fab2 f282 	clz	r2, r2
 8000dc0:	2a00      	cmp	r2, #0
 8000dc2:	f040 8092 	bne.w	8000eea <__udivmoddi4+0x21a>
 8000dc6:	eba1 010c 	sub.w	r1, r1, ip
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2601      	movs	r6, #1
 8000dd4:	0c20      	lsrs	r0, r4, #16
 8000dd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dda:	fb07 1113 	mls	r1, r7, r3, r1
 8000dde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de2:	fb0e f003 	mul.w	r0, lr, r3
 8000de6:	4288      	cmp	r0, r1
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x12c>
 8000dea:	eb1c 0101 	adds.w	r1, ip, r1
 8000dee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x12a>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2c0>
 8000dfa:	4643      	mov	r3, r8
 8000dfc:	1a09      	subs	r1, r1, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1110 	mls	r1, r7, r0, r1
 8000e08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x156>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x154>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2ca>
 8000e24:	4608      	mov	r0, r1
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e2e:	e79c      	b.n	8000d6a <__udivmoddi4+0x9a>
 8000e30:	f1c6 0720 	rsb	r7, r6, #32
 8000e34:	40b3      	lsls	r3, r6
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e42:	fa01 f306 	lsl.w	r3, r1, r6
 8000e46:	431c      	orrs	r4, r3
 8000e48:	40f9      	lsrs	r1, r7
 8000e4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000e52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e56:	0c20      	lsrs	r0, r4, #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000e60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e64:	fb08 f00e 	mul.w	r0, r8, lr
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b8>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2bc>
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2bc>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4461      	add	r1, ip
 8000e88:	1a09      	subs	r1, r1, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e90:	fb09 1110 	mls	r1, r9, r0, r1
 8000e94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e9c:	458e      	cmp	lr, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1e2>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2b4>
 8000eaa:	458e      	cmp	lr, r1
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2b4>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eb6:	fba0 9402 	umull	r9, r4, r0, r2
 8000eba:	eba1 010e 	sub.w	r1, r1, lr
 8000ebe:	42a1      	cmp	r1, r4
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46a6      	mov	lr, r4
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x2a4>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x2a0>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x212>
 8000eca:	ebb3 0208 	subs.w	r2, r3, r8
 8000ece:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ed6:	fa22 f306 	lsr.w	r3, r2, r6
 8000eda:	40f1      	lsrs	r1, r6
 8000edc:	431f      	orrs	r7, r3
 8000ede:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	f1c2 0320 	rsb	r3, r2, #32
 8000eee:	40d8      	lsrs	r0, r3
 8000ef0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	4301      	orrs	r1, r0
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f08:	fb07 3610 	mls	r6, r7, r0, r3
 8000f0c:	0c0b      	lsrs	r3, r1, #16
 8000f0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f12:	fb00 f60e 	mul.w	r6, r0, lr
 8000f16:	429e      	cmp	r6, r3
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x260>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b8>
 8000f28:	429e      	cmp	r6, r3
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b8>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	1b9b      	subs	r3, r3, r6
 8000f32:	b289      	uxth	r1, r1
 8000f34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f38:	fb07 3316 	mls	r3, r7, r6, r3
 8000f3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f40:	fb06 f30e 	mul.w	r3, r6, lr
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x28a>
 8000f48:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2b0>
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2b0>
 8000f56:	3e02      	subs	r6, #2
 8000f58:	4461      	add	r1, ip
 8000f5a:	1ac9      	subs	r1, r1, r3
 8000f5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0x104>
 8000f62:	462e      	mov	r6, r5
 8000f64:	4628      	mov	r0, r5
 8000f66:	e705      	b.n	8000d74 <__udivmoddi4+0xa4>
 8000f68:	4606      	mov	r6, r0
 8000f6a:	e6e3      	b.n	8000d34 <__udivmoddi4+0x64>
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	e6f8      	b.n	8000d62 <__udivmoddi4+0x92>
 8000f70:	454b      	cmp	r3, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f8>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f7c:	3801      	subs	r0, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f8>
 8000f80:	4646      	mov	r6, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x28a>
 8000f84:	4620      	mov	r0, r4
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1e2>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x260>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b8>
 8000f90:	3b02      	subs	r3, #2
 8000f92:	4461      	add	r1, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x12c>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e709      	b.n	8000dae <__udivmoddi4+0xde>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x156>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__io_putchar>:
PUTCHAR_PROTOTYPE {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <__io_putchar+0x20>)
 8000fb6:	f007 fad1 	bl	800855c <HAL_UART_Transmit>
	return ch;
 8000fba:	687b      	ldr	r3, [r7, #4]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000027c 	.word	0x2000027c

08000fc8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]

#ifdef RAMP_DAC
	static bool dac_enabled = false;
#endif

	SystemClock_Config(); // We were in STOP mode so the HSI is selected.
 8000fd2:	f000 f9fd 	bl	80013d0 <SystemClock_Config>
	HAL_ResumeTick();
 8000fd6:	f001 fb55 	bl	8002684 <HAL_ResumeTick>
		dac_enabled = true;
	}
#endif

#ifdef SYNTH_ENABLE
	if (!synth_init) {
 8000fda:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00c      	beq.n	8001002 <HAL_GPIO_EXTI_Callback+0x3a>
		if (init_synthesiser() != SUCCESS) {
 8000fe8:	f009 fc1e 	bl	800a828 <__init_synthesiser_veneer>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <HAL_GPIO_EXTI_Callback+0x34>
			printf("Synthesiser initialisation failed!\r\n");
 8000ff2:	483d      	ldr	r0, [pc, #244]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000ff4:	f008 fc8c 	bl	8009910 <puts>
			Error_Handler();
 8000ff8:	f000 feb6 	bl	8001d68 <Error_Handler>
		}
		synth_init = true;
 8000ffc:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
	}
#endif

	if (GPIO_Pin == GPIO_PIN_13) { // Blue button
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001008:	d169      	bne.n	80010de <HAL_GPIO_EXTI_Callback+0x116>
		printf("Blue button pressed....\r\n");
 800100a:	4838      	ldr	r0, [pc, #224]	; (80010ec <HAL_GPIO_EXTI_Callback+0x124>)
 800100c:	f008 fc80 	bl	8009910 <puts>

		/* If the button is held down for more than one second then run the POP cycle */
		HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f001 fb02 	bl	800261c <HAL_Delay>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101c:	4834      	ldr	r0, [pc, #208]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x128>)
 800101e:	f001 ff6d 	bl	8002efc <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00a      	beq.n	800103e <HAL_GPIO_EXTI_Callback+0x76>
			printf("Long press\r\n");
 8001028:	4832      	ldr	r0, [pc, #200]	; (80010f4 <HAL_GPIO_EXTI_Callback+0x12c>)
 800102a:	f008 fc71 	bl	8009910 <puts>
			if (pop_running) {
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_GPIO_EXTI_Callback+0x130>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d151      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x114>
				return;
			}

			start_pop();
 8001038:	f009 fc0e 	bl	800a858 <__start_pop_veneer>
 800103c:	e04f      	b.n	80010de <HAL_GPIO_EXTI_Callback+0x116>

		} else {
			printf("Short press\r\n");
 800103e:	482f      	ldr	r0, [pc, #188]	; (80010fc <HAL_GPIO_EXTI_Callback+0x134>)
 8001040:	f008 fc66 	bl	8009910 <puts>
			/* We want to run CW so stop the POP cycle if it's running */
			if (pop_running) {
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <HAL_GPIO_EXTI_Callback+0x130>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <HAL_GPIO_EXTI_Callback+0x8c>
				stop_pop();
 800104e:	f009 fbff 	bl	800a850 <__stop_pop_veneer>
 8001052:	e044      	b.n	80010de <HAL_GPIO_EXTI_Callback+0x116>
				return;
			}

			/* Set the attenuator for minimum attenuation */
			const struct AttenuatorSettings attenuator_settings = {0,0,0,0,0,0,0}; // 0 dB
 8001054:	2300      	movs	r3, #0
 8001056:	733b      	strb	r3, [r7, #12]
			set_aom_atten(attenuator_settings);
 8001058:	7b38      	ldrb	r0, [r7, #12]
 800105a:	f009 fbed 	bl	800a838 <__set_aom_atten_veneer>

			/* Enable the AOM drive power */
			if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 800105e:	f240 1103 	movw	r1, #259	; 0x103
 8001062:	4827      	ldr	r0, [pc, #156]	; (8001100 <HAL_GPIO_EXTI_Callback+0x138>)
 8001064:	f002 fbb0 	bl	80037c8 <HAL_HRTIM_WaveformOutputStart>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <HAL_GPIO_EXTI_Callback+0xb0>
			HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
				printf("Failure point H!\r\n");
 800106e:	4825      	ldr	r0, [pc, #148]	; (8001104 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001070:	f008 fc4e 	bl	8009910 <puts>
				Error_Handler();
 8001074:	f000 fe78 	bl	8001d68 <Error_Handler>
			}

			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8001078:	2302      	movs	r3, #2
 800107a:	2201      	movs	r2, #1
 800107c:	2100      	movs	r1, #0
 800107e:	4820      	ldr	r0, [pc, #128]	; (8001100 <HAL_GPIO_EXTI_Callback+0x138>)
 8001080:	f002 faac 	bl	80035dc <HAL_HRTIM_WaveformSetOutputLevel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <HAL_GPIO_EXTI_Callback+0xcc>
					HRTIM_TIMERINDEX_TIMER_A,
					HRTIM_OUTPUT_TA1, HRTIM_OUTPUTLEVEL_INACTIVE) != HAL_OK) {
				printf("Failure point I!\r\n");
 800108a:	481f      	ldr	r0, [pc, #124]	; (8001108 <HAL_GPIO_EXTI_Callback+0x140>)
 800108c:	f008 fc40 	bl	8009910 <puts>
				Error_Handler();
 8001090:	f000 fe6a 	bl	8001d68 <Error_Handler>
			}

			/* Enable the Microwaves */
			if (HAL_HRTIM_WaveformSetOutputLevel(&hhrtim,
 8001094:	2301      	movs	r3, #1
 8001096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109a:	2104      	movs	r1, #4
 800109c:	4818      	ldr	r0, [pc, #96]	; (8001100 <HAL_GPIO_EXTI_Callback+0x138>)
 800109e:	f002 fa9d 	bl	80035dc <HAL_HRTIM_WaveformSetOutputLevel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_GPIO_EXTI_Callback+0xea>
					HRTIM_TIMERINDEX_TIMER_E,
					HRTIM_OUTPUT_TE1, HRTIM_OUTPUTLEVEL_ACTIVE) != HAL_OK) {
				printf("Failure point J!\r\n");
 80010a8:	4818      	ldr	r0, [pc, #96]	; (800110c <HAL_GPIO_EXTI_Callback+0x144>)
 80010aa:	f008 fc31 	bl	8009910 <puts>
				Error_Handler();
 80010ae:	f000 fe5b 	bl	8001d68 <Error_Handler>
			};

			/* Run the frequency sweep */
			while (1) {
				printf("Sweep running.\r\n");
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <HAL_GPIO_EXTI_Callback+0x148>)
 80010b4:	f008 fc2c 	bl	8009910 <puts>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <HAL_GPIO_EXTI_Callback+0x14c>)
 80010c0:	f001 ff34 	bl	8002f2c <HAL_GPIO_WritePin>
				run_sweep();
 80010c4:	f009 fbb4 	bl	800a830 <__run_sweep_veneer>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <HAL_GPIO_EXTI_Callback+0x14c>)
 80010d0:	f001 ff2c 	bl	8002f2c <HAL_GPIO_WritePin>
				printf("Sweep complete.\r\n");
 80010d4:	4810      	ldr	r0, [pc, #64]	; (8001118 <HAL_GPIO_EXTI_Callback+0x150>)
 80010d6:	f008 fc1b 	bl	8009910 <puts>
				printf("Sweep running.\r\n");
 80010da:	e7ea      	b.n	80010b2 <HAL_GPIO_EXTI_Callback+0xea>
				return;
 80010dc:	bf00      	nop
			}
		}

	}
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000318 	.word	0x20000318
 80010e8:	0800a9c0 	.word	0x0800a9c0
 80010ec:	0800a9e4 	.word	0x0800a9e4
 80010f0:	58020800 	.word	0x58020800
 80010f4:	0800aa00 	.word	0x0800aa00
 80010f8:	20000310 	.word	0x20000310
 80010fc:	0800aa0c 	.word	0x0800aa0c
 8001100:	200000d0 	.word	0x200000d0
 8001104:	0800aa1c 	.word	0x0800aa1c
 8001108:	0800aa30 	.word	0x0800aa30
 800110c:	0800aa44 	.word	0x0800aa44
 8001110:	0800aa58 	.word	0x0800aa58
 8001114:	58020400 	.word	0x58020400
 8001118:	0800aa68 	.word	0x0800aa68

0800111c <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001124:	2101      	movs	r1, #1
 8001126:	4803      	ldr	r0, [pc, #12]	; (8001134 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8001128:	f001 ff19 	bl	8002f5e <HAL_GPIO_TogglePin>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	58020400 	.word	0x58020400

08001138 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d11e      	bne.n	8001186 <HAL_HRTIM_Compare2EventCallback+0x4e>
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8001148:	7b3b      	ldrb	r3, [r7, #12]
 800114a:	f36f 0300 	bfc	r3, #0, #1
 800114e:	733b      	strb	r3, [r7, #12]
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	f36f 0341 	bfc	r3, #1, #1
 8001156:	733b      	strb	r3, [r7, #12]
 8001158:	7b3b      	ldrb	r3, [r7, #12]
 800115a:	f36f 0382 	bfc	r3, #2, #1
 800115e:	733b      	strb	r3, [r7, #12]
 8001160:	7b3b      	ldrb	r3, [r7, #12]
 8001162:	f36f 03c3 	bfc	r3, #3, #1
 8001166:	733b      	strb	r3, [r7, #12]
 8001168:	7b3b      	ldrb	r3, [r7, #12]
 800116a:	f36f 1304 	bfc	r3, #4, #1
 800116e:	733b      	strb	r3, [r7, #12]
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	f043 0320 	orr.w	r3, r3, #32
 8001176:	733b      	strb	r3, [r7, #12]
 8001178:	7b3b      	ldrb	r3, [r7, #12]
 800117a:	f36f 1386 	bfc	r3, #6, #1
 800117e:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 8001180:	7b38      	ldrb	r0, [r7, #12]
 8001182:	f009 fb59 	bl	800a838 <__set_aom_atten_veneer>
	}

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d138      	bne.n	8001212 <HAL_HRTIM_Compare3EventCallback+0x82>

		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 80011a0:	2300      	movs	r3, #0
 80011a2:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 80011a4:	7b38      	ldrb	r0, [r7, #12]
 80011a6:	f009 fb47 	bl	800a838 <__set_aom_atten_veneer>
		static const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
		static const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <HAL_HRTIM_Compare3EventCallback+0x98>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_HRTIM_Compare3EventCallback+0x9c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d106      	bne.n	80011c4 <HAL_HRTIM_Compare3EventCallback+0x34>
			stop_pop();
 80011b6:	f009 fb4b 	bl	800a850 <__stop_pop_veneer>
			i = 0;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_HRTIM_Compare3EventCallback+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
			start_pop();
 80011c0:	f009 fb4a 	bl	800a858 <__start_pop_veneer>
		}

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_HRTIM_Compare3EventCallback+0x98>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011d0:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001220 <HAL_HRTIM_Compare3EventCallback+0x90>
 80011d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_HRTIM_Compare3EventCallback+0xa0>)
 80011da:	ed93 7b00 	vldr	d7, [r3]
 80011de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011e2:	eeb0 0b47 	vmov.f64	d0, d7
 80011e6:	f009 fb2b 	bl	800a840 <__set_frequency_hz_veneer>
#endif

		i = i + 1;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_HRTIM_Compare3EventCallback+0x98>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_HRTIM_Compare3EventCallback+0x98>)
 80011f2:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_HRTIM_Compare3EventCallback+0xa4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_HRTIM_Compare3EventCallback+0xa4>)
 80011fc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011fe:	2102      	movs	r1, #2
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <HAL_HRTIM_Compare3EventCallback+0xa8>)
 8001202:	f001 feac 	bl	8002f5e <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_HRTIM_Compare3EventCallback+0xa4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	480b      	ldr	r0, [pc, #44]	; (800123c <HAL_HRTIM_Compare3EventCallback+0xac>)
 800120e:	f008 faf9 	bl	8009804 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	00000000 	.word	0x00000000
 8001224:	4007d784 	.word	0x4007d784
 8001228:	2000031c 	.word	0x2000031c
 800122c:	0800ab2c 	.word	0x0800ab2c
 8001230:	0800ab30 	.word	0x0800ab30
 8001234:	20000314 	.word	0x20000314
 8001238:	58021000 	.word	0x58021000
 800123c:	0800aa7c 	.word	0x0800aa7c

08001240 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 800125e:	4a53      	ldr	r2, [pc, #332]	; (80013ac <main+0x154>)
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <main+0x158>)
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	461a      	mov	r2, r3
 8001266:	4953      	ldr	r1, [pc, #332]	; (80013b4 <main+0x15c>)
 8001268:	4851      	ldr	r0, [pc, #324]	; (80013b0 <main+0x158>)
 800126a:	f008 fab5 	bl	80097d8 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800126e:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <main+0x160>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d11b      	bne.n	80012b2 <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800127a:	f3bf 8f4f 	dsb	sy
}
 800127e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001280:	f3bf 8f6f 	isb	sy
}
 8001284:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001286:	4b4c      	ldr	r3, [pc, #304]	; (80013b8 <main+0x160>)
 8001288:	2200      	movs	r2, #0
 800128a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800128e:	f3bf 8f4f 	dsb	sy
}
 8001292:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001294:	f3bf 8f6f 	isb	sy
}
 8001298:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <main+0x160>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a46      	ldr	r2, [pc, #280]	; (80013b8 <main+0x160>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012a6:	f3bf 8f4f 	dsb	sy
}
 80012aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ac:	f3bf 8f6f 	isb	sy
}
 80012b0:	e000      	b.n	80012b4 <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012b2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80012b4:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <main+0x160>)
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d138      	bne.n	8001332 <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80012c0:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <main+0x160>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012c8:	f3bf 8f4f 	dsb	sy
}
 80012cc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <main+0x160>)
 80012d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	0b5b      	lsrs	r3, r3, #13
 80012da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012de:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012e8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80012f2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012f8:	492f      	ldr	r1, [pc, #188]	; (80013b8 <main+0x160>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1e5a      	subs	r2, r3, #1
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ef      	bne.n	80012ea <main+0x92>
    } while(sets-- != 0U);
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	60ba      	str	r2, [r7, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e5      	bne.n	80012e0 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 8001314:	f3bf 8f4f 	dsb	sy
}
 8001318:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <main+0x160>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <main+0x160>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001326:	f3bf 8f4f 	dsb	sy
}
 800132a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800132c:	f3bf 8f6f 	isb	sy
}
 8001330:	e000      	b.n	8001334 <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001332:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f001 f8e0 	bl	80024f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f84a 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f000 fba8 	bl	8001a90 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8001340:	f000 fa88 	bl	8001854 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8001344:	f000 f902 	bl	800154c <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8001348:	f000 fb54 	bl	80019f4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800134c:	f000 fb04 	bl	8001958 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001350:	f000 faae 	bl	80018b0 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8001354:	f000 f92c 	bl	80015b0 <MX_HRTIM_Init>
  /* USER CODE BEGIN 2 */

	printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 8001358:	4918      	ldr	r1, [pc, #96]	; (80013bc <main+0x164>)
 800135a:	4819      	ldr	r0, [pc, #100]	; (80013c0 <main+0x168>)
 800135c:	f008 fa52 	bl	8009804 <iprintf>

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 8001360:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001364:	4817      	ldr	r0, [pc, #92]	; (80013c4 <main+0x16c>)
 8001366:	f003 faff 	bl	8004968 <HAL_LPTIM_Counter_Start_IT>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <main+0x122>
		printf("Failed to start slow fashing LED!\r\n");
 8001370:	4815      	ldr	r0, [pc, #84]	; (80013c8 <main+0x170>)
 8001372:	f008 facd 	bl	8009910 <puts>
		Error_Handler();
 8001376:	f000 fcf7 	bl	8001d68 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (!pop_running) {
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <main+0x174>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f083 0301 	eor.w	r3, r3, #1
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <main+0x144>
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of STOP mode.
 800138a:	f001 f96b 	bl	8002664 <HAL_SuspendTick>
			HAL_PWREx_EnableFlashPowerDown();
 800138e:	f003 fedb 	bl	8005148 <HAL_PWREx_EnableFlashPowerDown>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs
 8001392:	2101      	movs	r1, #1
 8001394:	2001      	movs	r0, #1
 8001396:	f003 fe61 	bl	800505c <HAL_PWR_EnterSTOPMode>
 800139a:	e7ee      	b.n	800137a <main+0x122>
		} else {
			HAL_SuspendTick(); // Needs to be paused or the interrupt will bring us out of SLEEP mode.
 800139c:	f001 f962 	bl	8002664 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); // We will only resume when an interrupt occurs.
 80013a0:	2101      	movs	r1, #1
 80013a2:	2000      	movs	r0, #0
 80013a4:	f003 fe40 	bl	8005028 <HAL_PWR_EnterSLEEPMode>
		if (!pop_running) {
 80013a8:	e7e7      	b.n	800137a <main+0x122>
 80013aa:	bf00      	nop
 80013ac:	00000928 	.word	0x00000928
 80013b0:	00000000 	.word	0x00000000
 80013b4:	08000298 	.word	0x08000298
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	0800aa94 	.word	0x0800aa94
 80013c0:	0800aab0 	.word	0x0800aab0
 80013c4:	200001ac 	.word	0x200001ac
 80013c8:	0800aadc 	.word	0x0800aadc
 80013cc:	20000310 	.word	0x20000310

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0a4      	sub	sp, #144	; 0x90
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013da:	224c      	movs	r2, #76	; 0x4c
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 fa08 	bl	80097f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	2220      	movs	r2, #32
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f008 fa01 	bl	80097f4 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001404:	2002      	movs	r0, #2
 8001406:	f003 fe65 	bl	80050d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <SystemClock_Config+0x170>)
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <SystemClock_Config+0x170>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	62d3      	str	r3, [r2, #44]	; 0x2c
 800141a:	4b49      	ldr	r3, [pc, #292]	; (8001540 <SystemClock_Config+0x170>)
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <SystemClock_Config+0x174>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a46      	ldr	r2, [pc, #280]	; (8001544 <SystemClock_Config+0x174>)
 800142a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <SystemClock_Config+0x174>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800143c:	bf00      	nop
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <SystemClock_Config+0x174>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800144a:	d1f8      	bne.n	800143e <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800144c:	f003 fddc 	bl	8005008 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001450:	f001 f928 	bl	80026a4 <HAL_GetREVID>
 8001454:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <SystemClock_Config+0x178>)
 8001456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001458:	4a3b      	ldr	r2, [pc, #236]	; (8001548 <SystemClock_Config+0x178>)
 800145a:	f023 0318 	bic.w	r3, r3, #24
 800145e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001460:	2325      	movs	r3, #37	; 0x25
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001464:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001468:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800146a:	2301      	movs	r3, #1
 800146c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800146e:	2301      	movs	r3, #1
 8001470:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001472:	2302      	movs	r3, #2
 8001474:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001476:	2302      	movs	r3, #2
 8001478:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800147a:	2301      	movs	r3, #1
 800147c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 96;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001482:	2302      	movs	r3, #2
 8001484:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001486:	2304      	movs	r3, #4
 8001488:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001490:	230c      	movs	r3, #12
 8001492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fe5e 	bl	8005168 <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80014b2:	f000 fc59 	bl	8001d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b6:	233f      	movs	r3, #63	; 0x3f
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	2303      	movs	r3, #3
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80014c2:	2309      	movs	r3, #9
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80014ce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014dc:	2101      	movs	r1, #1
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fa9c 	bl	8005a1c <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80014ea:	f000 fc3d 	bl	8001d68 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80014ee:	f004 fc4b 	bl	8005d88 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <SystemClock_Config+0x178>)
 80014f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80014f8:	4a13      	ldr	r2, [pc, #76]	; (8001548 <SystemClock_Config+0x178>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <SystemClock_Config+0x178>)
 8001504:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001514:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001518:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800151e:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001522:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001524:	2322      	movs	r3, #34	; 0x22
 8001526:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001528:	2320      	movs	r3, #32
 800152a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4618      	mov	r0, r3
 8001532:	f006 faf3 	bl	8007b1c <HAL_RCCEx_CRSConfig>
}
 8001536:	bf00      	nop
 8001538:	3790      	adds	r7, #144	; 0x90
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	58000400 	.word	0x58000400
 8001544:	58024800 	.word	0x58024800
 8001548:	58024400 	.word	0x58024400

0800154c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2224      	movs	r2, #36	; 0x24
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f008 f94b 	bl	80097f4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_DAC1_Init+0x5c>)
 8001560:	4a12      	ldr	r2, [pc, #72]	; (80015ac <MX_DAC1_Init+0x60>)
 8001562:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001564:	4810      	ldr	r0, [pc, #64]	; (80015a8 <MX_DAC1_Init+0x5c>)
 8001566:	f001 f9b8 	bl	80028da <HAL_DAC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001570:	f000 fbfa 	bl	8001d68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001580:	2301      	movs	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_DAC1_Init+0x5c>)
 8001590:	f001 f9c6 	bl	8002920 <HAL_DAC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 fbe5 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200000bc 	.word	0x200000bc
 80015ac:	40007400 	.word	0x40007400

080015b0 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0a4      	sub	sp, #144	; 0x90
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80015b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80015c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c8:	2254      	movs	r2, #84	; 0x54
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f008 f911 	bl	80097f4 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80015d2:	f107 0320 	add.w	r3, r7, #32
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80015de:	463b      	mov	r3, r7
 80015e0:	2220      	movs	r2, #32
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f008 f905 	bl	80097f4 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 80015ea:	4b98      	ldr	r3, [pc, #608]	; (800184c <MX_HRTIM_Init+0x29c>)
 80015ec:	4a98      	ldr	r2, [pc, #608]	; (8001850 <MX_HRTIM_Init+0x2a0>)
 80015ee:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80015f0:	4b96      	ldr	r3, [pc, #600]	; (800184c <MX_HRTIM_Init+0x29c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80015f6:	4b95      	ldr	r3, [pc, #596]	; (800184c <MX_HRTIM_Init+0x29c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 80015fc:	4893      	ldr	r0, [pc, #588]	; (800184c <MX_HRTIM_Init+0x29c>)
 80015fe:	f001 fce3 	bl	8002fc8 <HAL_HRTIM_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8001608:	f000 fbae 	bl	8001d68 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 800160c:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 800161a:	2307      	movs	r3, #7
 800161c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001620:	2308      	movs	r3, #8
 8001622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001626:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800162a:	461a      	mov	r2, r3
 800162c:	2100      	movs	r1, #0
 800162e:	4887      	ldr	r0, [pc, #540]	; (800184c <MX_HRTIM_Init+0x29c>)
 8001630:	f001 fd9a 	bl	8003168 <HAL_HRTIM_TimeBaseConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 800163a:	f000 fb95 	bl	8001d68 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 800163e:	2314      	movs	r3, #20
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8001646:	2300      	movs	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800164a:	2300      	movs	r3, #0
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 800164e:	2301      	movs	r3, #1
 8001650:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001652:	2300      	movs	r3, #0
 8001654:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001656:	2300      	movs	r3, #0
 8001658:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800165a:	2300      	movs	r3, #0
 800165c:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001662:	2300      	movs	r3, #0
 8001664:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001666:	2300      	movs	r3, #0
 8001668:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800166a:	2300      	movs	r3, #0
 800166c:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800166e:	2300      	movs	r3, #0
 8001670:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001672:	2300      	movs	r3, #0
 8001674:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001676:	2300      	movs	r3, #0
 8001678:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800167a:	2300      	movs	r3, #0
 800167c:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800167e:	2300      	movs	r3, #0
 8001680:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001682:	2300      	movs	r3, #0
 8001684:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001686:	2300      	movs	r3, #0
 8001688:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800168a:	2300      	movs	r3, #0
 800168c:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800168e:	2300      	movs	r3, #0
 8001690:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001696:	461a      	mov	r2, r3
 8001698:	2100      	movs	r1, #0
 800169a:	486c      	ldr	r0, [pc, #432]	; (800184c <MX_HRTIM_Init+0x29c>)
 800169c:	f001 fd8c 	bl	80031b8 <HAL_HRTIM_WaveformTimerConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 80016a6:	f000 fb5f 	bl	8001d68 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 80016aa:	2306      	movs	r3, #6
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80016ae:	2300      	movs	r3, #0
 80016b0:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80016b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b6:	461a      	mov	r2, r3
 80016b8:	2104      	movs	r1, #4
 80016ba:	4864      	ldr	r0, [pc, #400]	; (800184c <MX_HRTIM_Init+0x29c>)
 80016bc:	f001 fd7c 	bl	80031b8 <HAL_HRTIM_WaveformTimerConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 80016c6:	f000 fb4f 	bl	8001d68 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 80016ca:	f240 631b 	movw	r3, #1563	; 0x61b
 80016ce:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	2201      	movs	r2, #1
 80016d6:	2100      	movs	r1, #0
 80016d8:	485c      	ldr	r0, [pc, #368]	; (800184c <MX_HRTIM_Init+0x29c>)
 80016da:	f001 fddf 	bl	800329c <HAL_HRTIM_WaveformCompareConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 80016e4:	f000 fb40 	bl	8001d68 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 80016e8:	f244 5395 	movw	r3, #17813	; 0x4595
 80016ec:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	2202      	movs	r2, #2
 80016fc:	2100      	movs	r1, #0
 80016fe:	4853      	ldr	r0, [pc, #332]	; (800184c <MX_HRTIM_Init+0x29c>)
 8001700:	f001 fdcc 	bl	800329c <HAL_HRTIM_WaveformCompareConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 800170a:	f000 fb2d 	bl	8001d68 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 800170e:	f640 536e 	movw	r3, #3438	; 0xd6e
 8001712:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	2202      	movs	r2, #2
 800171a:	2104      	movs	r1, #4
 800171c:	484b      	ldr	r0, [pc, #300]	; (800184c <MX_HRTIM_Init+0x29c>)
 800171e:	f001 fdbd 	bl	800329c <HAL_HRTIM_WaveformCompareConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8001728:	f000 fb1e 	bl	8001d68 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 800172c:	f644 0306 	movw	r3, #18438	; 0x4806
 8001730:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	2204      	movs	r2, #4
 8001738:	2100      	movs	r1, #0
 800173a:	4844      	ldr	r0, [pc, #272]	; (800184c <MX_HRTIM_Init+0x29c>)
 800173c:	f001 fdae 	bl	800329c <HAL_HRTIM_WaveformCompareConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8001746:	f000 fb0f 	bl	8001d68 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 800174a:	f244 435d 	movw	r3, #17501	; 0x445d
 800174e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001750:	f107 0320 	add.w	r3, r7, #32
 8001754:	2208      	movs	r2, #8
 8001756:	2104      	movs	r1, #4
 8001758:	483c      	ldr	r0, [pc, #240]	; (800184c <MX_HRTIM_Init+0x29c>)
 800175a:	f001 fd9f 	bl	800329c <HAL_HRTIM_WaveformCompareConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001764:	f000 fb00 	bl	8001d68 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8001768:	2302      	movs	r3, #2
 800176a:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 800176c:	2328      	movs	r3, #40	; 0x28
 800176e:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8001770:	2314      	movs	r3, #20
 8001772:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8001778:	2308      	movs	r3, #8
 800177a:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001788:	463b      	mov	r3, r7
 800178a:	2201      	movs	r2, #1
 800178c:	2100      	movs	r1, #0
 800178e:	482f      	ldr	r0, [pc, #188]	; (800184c <MX_HRTIM_Init+0x29c>)
 8001790:	f001 fef2 	bl	8003578 <HAL_HRTIM_WaveformOutputConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 800179a:	f000 fae5 	bl	8001d68 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 80017a2:	2350      	movs	r3, #80	; 0x50
 80017a4:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 80017aa:	463b      	mov	r3, r7
 80017ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b0:	2104      	movs	r1, #4
 80017b2:	4826      	ldr	r0, [pc, #152]	; (800184c <MX_HRTIM_Init+0x29c>)
 80017b4:	f001 fee0 	bl	8003578 <HAL_HRTIM_WaveformOutputConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 80017be:	f000 fad3 	bl	8001d68 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80017c2:	2302      	movs	r3, #2
 80017c4:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 80017c6:	2320      	movs	r3, #32
 80017c8:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 80017ca:	2310      	movs	r3, #16
 80017cc:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 80017ce:	2308      	movs	r3, #8
 80017d0:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	2202      	movs	r2, #2
 80017d6:	2100      	movs	r1, #0
 80017d8:	481c      	ldr	r0, [pc, #112]	; (800184c <MX_HRTIM_Init+0x29c>)
 80017da:	f001 fecd 	bl	8003578 <HAL_HRTIM_WaveformOutputConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 80017e4:	f000 fac0 	bl	8001d68 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80017e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017ec:	461a      	mov	r2, r3
 80017ee:	2104      	movs	r1, #4
 80017f0:	4816      	ldr	r0, [pc, #88]	; (800184c <MX_HRTIM_Init+0x29c>)
 80017f2:	f001 fcb9 	bl	8003168 <HAL_HRTIM_TimeBaseConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 80017fc:	f000 fab4 	bl	8001d68 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8001800:	f240 7353 	movw	r3, #1875	; 0x753
 8001804:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	2201      	movs	r2, #1
 800180c:	2104      	movs	r1, #4
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <MX_HRTIM_Init+0x29c>)
 8001810:	f001 fd44 	bl	800329c <HAL_HRTIM_WaveformCompareConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 800181a:	f000 faa5 	bl	8001d68 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 800181e:	f643 6342 	movw	r3, #15938	; 0x3e42
 8001822:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	2204      	movs	r2, #4
 800182a:	2104      	movs	r1, #4
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <MX_HRTIM_Init+0x29c>)
 800182e:	f001 fd35 	bl	800329c <HAL_HRTIM_WaveformCompareConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8001838:	f000 fa96 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <MX_HRTIM_Init+0x29c>)
 800183e:	f000 fb65 	bl	8001f0c <HAL_HRTIM_MspPostInit>

}
 8001842:	bf00      	nop
 8001844:	3790      	adds	r7, #144	; 0x90
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000d0 	.word	0x200000d0
 8001850:	40017400 	.word	0x40017400

08001854 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <MX_LPTIM1_Init+0x58>)
 800185c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 8001866:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800186a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 8001888:	2200      	movs	r2, #0
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 800188e:	2200      	movs	r2, #0
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_LPTIM1_Init+0x54>)
 8001894:	f002 ffb8 	bl	8004808 <HAL_LPTIM_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800189e:	f000 fa63 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200001ac 	.word	0x200001ac
 80018ac:	40002400 	.word	0x40002400

080018b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <MX_TIM1_Init+0xa0>)
 80018d0:	4a20      	ldr	r2, [pc, #128]	; (8001954 <MX_TIM1_Init+0xa4>)
 80018d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <MX_TIM1_Init+0xa0>)
 80018d6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80018da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_TIM1_Init+0xa0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_TIM1_Init+0xa0>)
 80018e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_TIM1_Init+0xa0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_TIM1_Init+0xa0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_TIM1_Init+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018fc:	4814      	ldr	r0, [pc, #80]	; (8001950 <MX_TIM1_Init+0xa0>)
 80018fe:	f006 fac7 	bl	8007e90 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001908:	f000 fa2e 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001910:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4619      	mov	r1, r3
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_TIM1_Init+0xa0>)
 800191a:	f006 fb11 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001924:	f000 fa20 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_TIM1_Init+0xa0>)
 800193a:	f006 fd31 	bl	80083a0 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001944:	f000 fa10 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200001e4 	.word	0x200001e4
 8001954:	40010000 	.word	0x40010000

08001958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <MX_TIM3_Init+0x94>)
 8001978:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <MX_TIM3_Init+0x98>)
 800197a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <MX_TIM3_Init+0x94>)
 800197e:	227c      	movs	r2, #124	; 0x7c
 8001980:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <MX_TIM3_Init+0x94>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001988:	4b18      	ldr	r3, [pc, #96]	; (80019ec <MX_TIM3_Init+0x94>)
 800198a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <MX_TIM3_Init+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_TIM3_Init+0x94>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800199c:	4813      	ldr	r0, [pc, #76]	; (80019ec <MX_TIM3_Init+0x94>)
 800199e:	f006 fa77 	bl	8007e90 <HAL_TIM_Base_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019a8:	f000 f9de 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4619      	mov	r1, r3
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <MX_TIM3_Init+0x94>)
 80019ba:	f006 fac1 	bl	8007f40 <HAL_TIM_ConfigClockSource>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80019c4:	f000 f9d0 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_TIM3_Init+0x94>)
 80019d6:	f006 fce3 	bl	80083a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80019e0:	f000 f9c2 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000230 	.word	0x20000230
 80019f0:	40000400 	.word	0x40000400

080019f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 80019fa:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <MX_USART3_UART_Init+0x94>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a00:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <MX_USART3_UART_Init+0x98>)
 8001a02:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a18:	220c      	movs	r2, #12
 8001a1a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a3a:	4812      	ldr	r0, [pc, #72]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a3c:	f006 fd3e 	bl	80084bc <HAL_UART_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001a46:	f000 f98f 	bl	8001d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a4e:	f007 fdce 	bl	80095ee <HAL_UARTEx_SetTxFifoThreshold>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001a58:	f000 f986 	bl	8001d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4809      	ldr	r0, [pc, #36]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a60:	f007 fe03 	bl	800966a <HAL_UARTEx_SetRxFifoThreshold>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001a6a:	f000 f97d 	bl	8001d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_USART3_UART_Init+0x90>)
 8001a70:	f007 fd84 	bl	800957c <HAL_UARTEx_DisableFifoMode>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001a7a:	f000 f975 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000027c 	.word	0x2000027c
 8001a88:	40004800 	.word	0x40004800
 8001a8c:	000f4240 	.word	0x000f4240

08001a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa6:	4ba9      	ldr	r3, [pc, #676]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	4aa7      	ldr	r2, [pc, #668]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001aae:	f043 0310 	orr.w	r3, r3, #16
 8001ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab6:	4ba5      	ldr	r3, [pc, #660]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac4:	4ba1      	ldr	r3, [pc, #644]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	4aa0      	ldr	r2, [pc, #640]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad4:	4b9d      	ldr	r3, [pc, #628]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	4b9a      	ldr	r3, [pc, #616]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	4a98      	ldr	r2, [pc, #608]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af2:	4b96      	ldr	r3, [pc, #600]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b00:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	4a91      	ldr	r2, [pc, #580]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b10:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	4b8b      	ldr	r3, [pc, #556]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	4a89      	ldr	r2, [pc, #548]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2e:	4b87      	ldr	r3, [pc, #540]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3c:	4b83      	ldr	r3, [pc, #524]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b42:	4a82      	ldr	r2, [pc, #520]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4c:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b60:	4a7a      	ldr	r2, [pc, #488]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6a:	4b78      	ldr	r3, [pc, #480]	; (8001d4c <MX_GPIO_Init+0x2bc>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2134      	movs	r1, #52	; 0x34
 8001b7c:	4874      	ldr	r0, [pc, #464]	; (8001d50 <MX_GPIO_Init+0x2c0>)
 8001b7e:	f001 f9d5 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f244 0101 	movw	r1, #16385	; 0x4001
 8001b88:	4872      	ldr	r0, [pc, #456]	; (8001d54 <MX_GPIO_Init+0x2c4>)
 8001b8a:	f001 f9cf 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b94:	4870      	ldr	r0, [pc, #448]	; (8001d58 <MX_GPIO_Init+0x2c8>)
 8001b96:	f001 f9c9 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001ba0:	486e      	ldr	r0, [pc, #440]	; (8001d5c <MX_GPIO_Init+0x2cc>)
 8001ba2:	f001 f9c3 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bac:	486b      	ldr	r0, [pc, #428]	; (8001d5c <MX_GPIO_Init+0x2cc>)
 8001bae:	f001 f9bd 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	21f8      	movs	r1, #248	; 0xf8
 8001bb6:	4868      	ldr	r0, [pc, #416]	; (8001d58 <MX_GPIO_Init+0x2c8>)
 8001bb8:	f001 f9b8 	bl	8002f2c <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4863      	ldr	r0, [pc, #396]	; (8001d50 <MX_GPIO_Init+0x2c0>)
 8001bc2:	f001 f9b3 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8001bc6:	2336      	movs	r3, #54	; 0x36
 8001bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	485c      	ldr	r0, [pc, #368]	; (8001d50 <MX_GPIO_Init+0x2c0>)
 8001bde:	f000 ffdd 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4858      	ldr	r0, [pc, #352]	; (8001d5c <MX_GPIO_Init+0x2cc>)
 8001bfa:	f000 ffcf 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001bfe:	2332      	movs	r3, #50	; 0x32
 8001c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c0e:	230b      	movs	r3, #11
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4850      	ldr	r0, [pc, #320]	; (8001d5c <MX_GPIO_Init+0x2cc>)
 8001c1a:	f000 ffbf 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001c1e:	2386      	movs	r3, #134	; 0x86
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c2e:	230b      	movs	r3, #11
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	4849      	ldr	r0, [pc, #292]	; (8001d60 <MX_GPIO_Init+0x2d0>)
 8001c3a:	f000 ffaf 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001c3e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	483f      	ldr	r0, [pc, #252]	; (8001d54 <MX_GPIO_Init+0x2c4>)
 8001c58:	f000 ffa0 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c6e:	230b      	movs	r3, #11
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4836      	ldr	r0, [pc, #216]	; (8001d54 <MX_GPIO_Init+0x2c4>)
 8001c7a:	f000 ff8f 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8001c7e:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001c82:	61fb      	str	r3, [r7, #28]
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4830      	ldr	r0, [pc, #192]	; (8001d58 <MX_GPIO_Init+0x2c8>)
 8001c98:	f000 ff80 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	482c      	ldr	r0, [pc, #176]	; (8001d64 <MX_GPIO_Init+0x2d4>)
 8001cb2:	f000 ff73 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8001cb6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4823      	ldr	r0, [pc, #140]	; (8001d5c <MX_GPIO_Init+0x2cc>)
 8001cd0:	f000 ff64 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001cd4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481b      	ldr	r0, [pc, #108]	; (8001d60 <MX_GPIO_Init+0x2d0>)
 8001cf2:	f000 ff53 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4814      	ldr	r0, [pc, #80]	; (8001d5c <MX_GPIO_Init+0x2cc>)
 8001d0c:	f000 ff46 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001d10:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d22:	230b      	movs	r3, #11
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <MX_GPIO_Init+0x2d4>)
 8001d2e:	f000 ff35 	bl	8002b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	210f      	movs	r1, #15
 8001d36:	2028      	movs	r0, #40	; 0x28
 8001d38:	f000 fd9b 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d3c:	2028      	movs	r0, #40	; 0x28
 8001d3e:	f000 fdb2 	bl	80028a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	; 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58021000 	.word	0x58021000
 8001d54:	58020400 	.word	0x58020400
 8001d58:	58020c00 	.word	0x58020c00
 8001d5c:	58020800 	.word	0x58020800
 8001d60:	58020000 	.word	0x58020000
 8001d64:	58021800 	.word	0x58021800

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <Error_Handler+0x40>)
 8001d72:	f007 fdcd 	bl	8009910 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8001d76:	f240 1103 	movw	r1, #259	; 0x103
 8001d7a:	480c      	ldr	r0, [pc, #48]	; (8001dac <Error_Handler+0x44>)
 8001d7c:	f001 fd51 	bl	8003822 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8001d80:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <Error_Handler+0x44>)
 8001d86:	f001 fde9 	bl	800395c <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	//HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d8e:	4808      	ldr	r0, [pc, #32]	; (8001db0 <Error_Handler+0x48>)
 8001d90:	f001 f8e5 	bl	8002f5e <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <Error_Handler+0x4c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f008 fd52 	bl	800a848 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001da4:	e7f1      	b.n	8001d8a <Error_Handler+0x22>
 8001da6:	bf00      	nop
 8001da8:	0800ab00 	.word	0x0800ab00
 8001dac:	200000d0 	.word	0x200000d0
 8001db0:	58020400 	.word	0x58020400
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_MspInit+0x30>)
 8001dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_MspInit+0x30>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_MspInit+0x30>)
 8001dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	58024400 	.word	0x58024400

08001dec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <HAL_DAC_MspInit+0x80>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d129      	bne.n	8001e62 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e14:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	4a0f      	ldr	r2, [pc, #60]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_DAC_MspInit+0x84>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e4a:	2310      	movs	r3, #16
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_DAC_MspInit+0x88>)
 8001e5e:	f000 fe9d 	bl	8002b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40007400 	.word	0x40007400
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58020000 	.word	0x58020000

08001e78 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0b4      	sub	sp, #208	; 0xd0
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	22c0      	movs	r2, #192	; 0xc0
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f007 fcb3 	bl	80097f4 <memset>
  if(hhrtim->Instance==HRTIM1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_HRTIM_MspInit+0x8c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d131      	bne.n	8001efc <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 f96c 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001eba:	f7ff ff55 	bl	8001d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_HRTIM_MspInit+0x90>)
 8001ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ec4:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_HRTIM_MspInit+0x90>)
 8001ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001eca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_HRTIM_MspInit+0x90>)
 8001ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2068      	movs	r0, #104	; 0x68
 8001ee2:	f000 fcc6 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 8001ee6:	2068      	movs	r0, #104	; 0x68
 8001ee8:	f000 fcdd 	bl	80028a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	206c      	movs	r0, #108	; 0x6c
 8001ef2:	f000 fcbe 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 8001ef6:	206c      	movs	r0, #108	; 0x6c
 8001ef8:	f000 fcd5 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	37d0      	adds	r7, #208	; 0xd0
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40017400 	.word	0x40017400
 8001f08:	58024400 	.word	0x58024400

08001f0c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_HRTIM_MspPostInit+0xa8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d13d      	bne.n	8001faa <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f52:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_HRTIM_MspPostInit+0xac>)
 8001f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f6a:	2340      	movs	r3, #64	; 0x40
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <HAL_HRTIM_MspPostInit+0xb0>)
 8001f86:	f000 fe09 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f8a:	23c0      	movs	r3, #192	; 0xc0
 8001f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <HAL_HRTIM_MspPostInit+0xb4>)
 8001fa6:	f000 fdf9 	bl	8002b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40017400 	.word	0x40017400
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	58021800 	.word	0x58021800
 8001fc0:	58020800 	.word	0x58020800

08001fc4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b0b4      	sub	sp, #208	; 0xd0
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	22c0      	movs	r2, #192	; 0xc0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f007 fc0d 	bl	80097f4 <memset>
  if(hlptim->Instance==LPTIM1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_LPTIM_MspInit+0x80>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d12a      	bne.n	800203a <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001fe4:	f04f 0220 	mov.w	r2, #32
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001ff0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001ff4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 f8c5 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002008:	f7ff feae 	bl	8001d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_LPTIM_MspInit+0x84>)
 800200e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002012:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_LPTIM_MspInit+0x84>)
 8002014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002018:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_LPTIM_MspInit+0x84>)
 800201e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	205d      	movs	r0, #93	; 0x5d
 8002030:	f000 fc1f 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002034:	205d      	movs	r0, #93	; 0x5d
 8002036:	f000 fc36 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	37d0      	adds	r7, #208	; 0xd0
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40002400 	.word	0x40002400
 8002048:	58024400 	.word	0x58024400

0800204c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <HAL_TIM_Base_MspInit+0x68>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10f      	bne.n	800207e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800207c:	e013      	b.n	80020a6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_TIM_Base_MspInit+0x70>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d10e      	bne.n	80020a6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 800208a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 800209a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40010000 	.word	0x40010000
 80020b8:	58024400 	.word	0x58024400
 80020bc:	40000400 	.word	0x40000400

080020c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0ba      	sub	sp, #232	; 0xe8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	22c0      	movs	r2, #192	; 0xc0
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f007 fb87 	bl	80097f4 <memset>
  if(huart->Instance==USART3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a27      	ldr	r2, [pc, #156]	; (8002188 <HAL_UART_MspInit+0xc8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d146      	bne.n	800217e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020f0:	f04f 0202 	mov.w	r2, #2
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f840 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002112:	f7ff fe29 	bl	8001d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_UART_MspInit+0xcc>)
 8002118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_UART_MspInit+0xcc>)
 800211e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002122:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_UART_MspInit+0xcc>)
 8002128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_UART_MspInit+0xcc>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_UART_MspInit+0xcc>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_UART_MspInit+0xcc>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800216c:	2307      	movs	r3, #7
 800216e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002172:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <HAL_UART_MspInit+0xd0>)
 800217a:	f000 fd0f 	bl	8002b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	37e8      	adds	r7, #232	; 0xe8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40004800 	.word	0x40004800
 800218c:	58024400 	.word	0x58024400
 8002190:	58020c00 	.word	0x58020c00

08002194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002198:	f003 ffdc 	bl	8006154 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 800219c:	f7ff fde4 	bl	8001d68 <Error_Handler>
 80021a0:	e7fc      	b.n	800219c <NMI_Handler+0x8>

080021a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80021a6:	f7ff fddf 	bl	8001d68 <Error_Handler>
 80021aa:	e7fc      	b.n	80021a6 <HardFault_Handler+0x4>

080021ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80021b0:	f7ff fdda 	bl	8001d68 <Error_Handler>
 80021b4:	e7fc      	b.n	80021b0 <MemManage_Handler+0x4>

080021b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80021ba:	f7ff fdd5 	bl	8001d68 <Error_Handler>
 80021be:	e7fc      	b.n	80021ba <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80021c4:	f7ff fdd0 	bl	8001d68 <Error_Handler>
 80021c8:	e7fc      	b.n	80021c4 <UsageFault_Handler+0x4>

080021ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f8:	f000 f9f0 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002204:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002208:	f000 fec3 	bl	8002f92 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <LPTIM1_IRQHandler+0x10>)
 8002216:	f002 fc0e 	bl	8004a36 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200001ac 	.word	0x200001ac

08002224 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8002228:	2100      	movs	r1, #0
 800222a:	4802      	ldr	r0, [pc, #8]	; (8002234 <HRTIM1_TIMA_IRQHandler+0x10>)
 800222c:	f001 fc14 	bl	8003a58 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200000d0 	.word	0x200000d0

08002238 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 800223c:	2104      	movs	r1, #4
 800223e:	4802      	ldr	r0, [pc, #8]	; (8002248 <HRTIM1_TIME_IRQHandler+0x10>)
 8002240:	f001 fc0a 	bl	8003a58 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200000d0 	.word	0x200000d0

0800224c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	e00a      	b.n	8002274 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800225e:	f3af 8000 	nop.w
 8002262:	4601      	mov	r1, r0
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	60ba      	str	r2, [r7, #8]
 800226a:	b2ca      	uxtb	r2, r1
 800226c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3301      	adds	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	dbf0      	blt.n	800225e <_read+0x12>
	}

return len;
 800227c:	687b      	ldr	r3, [r7, #4]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e009      	b.n	80022ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	60ba      	str	r2, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fe7f 	bl	8000fa4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	dbf1      	blt.n	8002298 <_write+0x12>
	}
	return len;
 80022b4:	687b      	ldr	r3, [r7, #4]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_close>:

int _close(int file)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
	return -1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e6:	605a      	str	r2, [r3, #4]
	return 0;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_isatty>:

int _isatty(int file)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
	return 1;
 80022fe:	2301      	movs	r3, #1
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
	return 0;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <_sbrk+0x5c>)
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <_sbrk+0x60>)
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <_sbrk+0x64>)
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <_sbrk+0x68>)
 8002348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d207      	bcs.n	8002368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002358:	f007 fa14 	bl	8009784 <__errno>
 800235c:	4603      	mov	r3, r0
 800235e:	220c      	movs	r2, #12
 8002360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	e009      	b.n	800237c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <_sbrk+0x64>)
 8002378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20020000 	.word	0x20020000
 8002388:	00000400 	.word	0x00000400
 800238c:	20000320 	.word	0x20000320
 8002390:	20000338 	.word	0x20000338

08002394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002398:	4b37      	ldr	r3, [pc, #220]	; (8002478 <SystemInit+0xe4>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	4a36      	ldr	r2, [pc, #216]	; (8002478 <SystemInit+0xe4>)
 80023a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <SystemInit+0xe8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	d807      	bhi.n	80023c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <SystemInit+0xe8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 030f 	bic.w	r3, r3, #15
 80023bc:	4a2f      	ldr	r2, [pc, #188]	; (800247c <SystemInit+0xe8>)
 80023be:	f043 0307 	orr.w	r3, r3, #7
 80023c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <SystemInit+0xec>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <SystemInit+0xec>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <SystemInit+0xec>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <SystemInit+0xec>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4929      	ldr	r1, [pc, #164]	; (8002480 <SystemInit+0xec>)
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <SystemInit+0xf0>)
 80023de:	4013      	ands	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <SystemInit+0xe8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023ee:	4b23      	ldr	r3, [pc, #140]	; (800247c <SystemInit+0xe8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 030f 	bic.w	r3, r3, #15
 80023f6:	4a21      	ldr	r2, [pc, #132]	; (800247c <SystemInit+0xe8>)
 80023f8:	f043 0307 	orr.w	r3, r3, #7
 80023fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <SystemInit+0xec>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <SystemInit+0xec>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <SystemInit+0xec>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <SystemInit+0xec>)
 8002412:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <SystemInit+0xf4>)
 8002414:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <SystemInit+0xec>)
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <SystemInit+0xf8>)
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <SystemInit+0xec>)
 800241e:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <SystemInit+0xfc>)
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <SystemInit+0xec>)
 8002424:	2200      	movs	r2, #0
 8002426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <SystemInit+0xec>)
 800242a:	4a19      	ldr	r2, [pc, #100]	; (8002490 <SystemInit+0xfc>)
 800242c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <SystemInit+0xec>)
 8002430:	2200      	movs	r2, #0
 8002432:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <SystemInit+0xec>)
 8002436:	4a16      	ldr	r2, [pc, #88]	; (8002490 <SystemInit+0xfc>)
 8002438:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <SystemInit+0xec>)
 800243c:	2200      	movs	r2, #0
 800243e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <SystemInit+0xec>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <SystemInit+0xec>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <SystemInit+0xec>)
 800244e:	2200      	movs	r2, #0
 8002450:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <SystemInit+0x100>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <SystemInit+0x104>)
 8002458:	4013      	ands	r3, r2
 800245a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800245e:	d202      	bcs.n	8002466 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <SystemInit+0x108>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <SystemInit+0x10c>)
 8002468:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800246c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00
 800247c:	52002000 	.word	0x52002000
 8002480:	58024400 	.word	0x58024400
 8002484:	eaf6ed7f 	.word	0xeaf6ed7f
 8002488:	02020200 	.word	0x02020200
 800248c:	01ff0000 	.word	0x01ff0000
 8002490:	01010280 	.word	0x01010280
 8002494:	5c001000 	.word	0x5c001000
 8002498:	ffff0000 	.word	0xffff0000
 800249c:	51008108 	.word	0x51008108
 80024a0:	52004000 	.word	0x52004000

080024a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024a8:	f7ff ff74 	bl	8002394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ac:	480c      	ldr	r0, [pc, #48]	; (80024e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ae:	490d      	ldr	r1, [pc, #52]	; (80024e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024c4:	4c0a      	ldr	r4, [pc, #40]	; (80024f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024d2:	f007 f95d 	bl	8009790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d6:	f7fe febf 	bl	8001258 <main>
  bx  lr
 80024da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80024e8:	0800ac18 	.word	0x0800ac18
  ldr r2, =_sbss
 80024ec:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80024f0:	20000338 	.word	0x20000338

080024f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f4:	e7fe      	b.n	80024f4 <ADC3_IRQHandler>
	...

080024f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fe:	2003      	movs	r0, #3
 8002500:	f000 f9ac 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002504:	f003 fc50 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_Init+0x68>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	4913      	ldr	r1, [pc, #76]	; (8002564 <HAL_Init+0x6c>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
 8002520:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_Init+0x68>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <HAL_Init+0x6c>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
 8002538:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <HAL_Init+0x70>)
 800253a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800253c:	4a0b      	ldr	r2, [pc, #44]	; (800256c <HAL_Init+0x74>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002542:	2000      	movs	r0, #0
 8002544:	f000 f814 	bl	8002570 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e002      	b.n	8002558 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002552:	f7ff fc31 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	58024400 	.word	0x58024400
 8002564:	0800ab38 	.word	0x0800ab38
 8002568:	20000018 	.word	0x20000018
 800256c:	20000014 	.word	0x20000014

08002570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_InitTick+0x60>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e021      	b.n	80025c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_InitTick+0x64>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_InitTick+0x60>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002592:	fbb3 f3f1 	udiv	r3, r3, r1
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f991 	bl	80028c2 <HAL_SYSTICK_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00e      	b.n	80025c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d80a      	bhi.n	80025c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b0:	2200      	movs	r2, #0
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f000 f95b 	bl	8002872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <HAL_InitTick+0x68>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000020 	.word	0x20000020
 80025d4:	20000014 	.word	0x20000014
 80025d8:	2000001c 	.word	0x2000001c

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000020 	.word	0x20000020
 8002600:	20000324 	.word	0x20000324

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000324 	.word	0x20000324

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffde 	bl	8002604 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000020 	.word	0x20000020

08002664 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_SuspendTick+0x1c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_SuspendTick+0x1c>)
 800266e:	f023 0302 	bic.w	r3, r3, #2
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_ResumeTick+0x1c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_ResumeTick+0x1c>)
 800268e:	f043 0302 	orr.w	r3, r3, #2
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_GetREVID+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0c1b      	lsrs	r3, r3, #16
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	5c001000 	.word	0x5c001000

080026bc <__NVIC_SetPriorityGrouping>:
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <__NVIC_SetPriorityGrouping+0x40>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <__NVIC_SetPriorityGrouping+0x40>)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	60d3      	str	r3, [r2, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00
 8002700:	05fa0000 	.word	0x05fa0000

08002704 <__NVIC_GetPriorityGrouping>:
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4907      	ldr	r1, [pc, #28]	; (8002758 <__NVIC_EnableIRQ+0x38>)
 800273a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e100 	.word	0xe000e100

0800275c <__NVIC_SetPriority>:
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f7ff ff8e 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff29 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002880:	f7ff ff40 	bl	8002704 <__NVIC_GetPriorityGrouping>
 8002884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f7ff ff90 	bl	80027b0 <NVIC_EncodePriority>
 8002890:	4602      	mov	r2, r0
 8002892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff5f 	bl	800275c <__NVIC_SetPriority>
}
 800289e:	bf00      	nop
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff33 	bl	8002720 <__NVIC_EnableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffa4 	bl	8002818 <SysTick_Config>
 80028d0:	4603      	mov	r3, r0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e014      	b.n	8002916 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	791b      	ldrb	r3, [r3, #4]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fa75 	bl	8001dec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	795b      	ldrb	r3, [r3, #5]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_DAC_ConfigChannel+0x18>
 8002934:	2302      	movs	r3, #2
 8002936:	e12a      	b.n	8002b8e <HAL_DAC_ConfigChannel+0x26e>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2202      	movs	r2, #2
 8002942:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b04      	cmp	r3, #4
 800294a:	f040 8081 	bne.w	8002a50 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800294e:	f7ff fe59 	bl	8002604 <HAL_GetTick>
 8002952:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d140      	bne.n	80029dc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800295a:	e018      	b.n	800298e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800295c:	f7ff fe52 	bl	8002604 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d911      	bls.n	800298e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002970:	4b89      	ldr	r3, [pc, #548]	; (8002b98 <HAL_DAC_ConfigChannel+0x278>)
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f043 0208 	orr.w	r2, r3, #8
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2203      	movs	r2, #3
 8002988:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e0ff      	b.n	8002b8e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002994:	4b80      	ldr	r3, [pc, #512]	; (8002b98 <HAL_DAC_ConfigChannel+0x278>)
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1df      	bne.n	800295c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800299c:	2001      	movs	r0, #1
 800299e:	f7ff fe3d 	bl	800261c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	6992      	ldr	r2, [r2, #24]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
 80029ac:	e023      	b.n	80029f6 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029ae:	f7ff fe29 	bl	8002604 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d90f      	bls.n	80029dc <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da0a      	bge.n	80029dc <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f043 0208 	orr.w	r2, r3, #8
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2203      	movs	r2, #3
 80029d6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e0d8      	b.n	8002b8e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	dbe3      	blt.n	80029ae <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80029e6:	2001      	movs	r0, #1
 80029e8:	f7ff fe18 	bl	800261c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	6992      	ldr	r2, [r2, #24]
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	ea02 0103 	and.w	r1, r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	21ff      	movs	r1, #255	; 0xff
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	ea02 0103 	and.w	r1, r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d11d      	bne.n	8002a94 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	221f      	movs	r2, #31
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4013      	ands	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d102      	bne.n	8002abe <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	e00f      	b.n	8002ade <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d102      	bne.n	8002acc <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e008      	b.n	8002ade <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	e001      	b.n	8002ade <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	400a      	ands	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4013      	ands	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	22c0      	movs	r2, #192	; 0xc0
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3720      	adds	r7, #32
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20008000 	.word	0x20008000

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002baa:	4b89      	ldr	r3, [pc, #548]	; (8002dd0 <HAL_GPIO_Init+0x234>)
 8002bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bae:	e194      	b.n	8002eda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8186 	beq.w	8002ed4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d005      	beq.n	8002be0 <HAL_GPIO_Init+0x44>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d130      	bne.n	8002c42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c16:	2201      	movs	r2, #1
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	f003 0201 	and.w	r2, r3, #1
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d017      	beq.n	8002c7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d123      	bne.n	8002cd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	69b9      	ldr	r1, [r7, #24]
 8002cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0203 	and.w	r2, r3, #3
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80e0 	beq.w	8002ed4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d14:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <HAL_GPIO_Init+0x238>)
 8002d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d1a:	4a2e      	ldr	r2, [pc, #184]	; (8002dd4 <HAL_GPIO_Init+0x238>)
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d24:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_GPIO_Init+0x238>)
 8002d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d32:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <HAL_GPIO_Init+0x23c>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <HAL_GPIO_Init+0x240>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d052      	beq.n	8002e04 <HAL_GPIO_Init+0x268>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <HAL_GPIO_Init+0x244>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d031      	beq.n	8002dca <HAL_GPIO_Init+0x22e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <HAL_GPIO_Init+0x248>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d02b      	beq.n	8002dc6 <HAL_GPIO_Init+0x22a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_GPIO_Init+0x24c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d025      	beq.n	8002dc2 <HAL_GPIO_Init+0x226>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_GPIO_Init+0x250>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <HAL_GPIO_Init+0x222>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_GPIO_Init+0x254>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d019      	beq.n	8002dba <HAL_GPIO_Init+0x21e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1a      	ldr	r2, [pc, #104]	; (8002df4 <HAL_GPIO_Init+0x258>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_GPIO_Init+0x21a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <HAL_GPIO_Init+0x25c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00d      	beq.n	8002db2 <HAL_GPIO_Init+0x216>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_GPIO_Init+0x260>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d007      	beq.n	8002dae <HAL_GPIO_Init+0x212>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <HAL_GPIO_Init+0x264>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_GPIO_Init+0x20e>
 8002da6:	2309      	movs	r3, #9
 8002da8:	e02d      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002daa:	230a      	movs	r3, #10
 8002dac:	e02b      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002dae:	2308      	movs	r3, #8
 8002db0:	e029      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e027      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002db6:	2306      	movs	r3, #6
 8002db8:	e025      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e023      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e021      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e01f      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e01d      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e01b      	b.n	8002e06 <HAL_GPIO_Init+0x26a>
 8002dce:	bf00      	nop
 8002dd0:	58000080 	.word	0x58000080
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	58000400 	.word	0x58000400
 8002ddc:	58020000 	.word	0x58020000
 8002de0:	58020400 	.word	0x58020400
 8002de4:	58020800 	.word	0x58020800
 8002de8:	58020c00 	.word	0x58020c00
 8002dec:	58021000 	.word	0x58021000
 8002df0:	58021400 	.word	0x58021400
 8002df4:	58021800 	.word	0x58021800
 8002df8:	58021c00 	.word	0x58021c00
 8002dfc:	58022000 	.word	0x58022000
 8002e00:	58022400 	.word	0x58022400
 8002e04:	2300      	movs	r3, #0
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	f002 0203 	and.w	r2, r2, #3
 8002e0c:	0092      	lsls	r2, r2, #2
 8002e0e:	4093      	lsls	r3, r2
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e16:	4938      	ldr	r1, [pc, #224]	; (8002ef8 <HAL_GPIO_Init+0x35c>)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f ae63 	bne.w	8002bb0 <HAL_GPIO_Init+0x14>
  }
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	3724      	adds	r7, #36	; 0x24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	58000400 	.word	0x58000400

08002efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	887b      	ldrh	r3, [r7, #2]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
 8002f18:	e001      	b.n	8002f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f48:	e003      	b.n	8002f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	619a      	str	r2, [r3, #24]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f70:	887a      	ldrh	r2, [r7, #2]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4013      	ands	r3, r2
 8002f76:	041a      	lsls	r2, r3, #16
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43d9      	mvns	r1, r3
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	400b      	ands	r3, r1
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	619a      	str	r2, [r3, #24]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f805 	bl	8000fc8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0bd      	b.n	8003156 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d031      	beq.n	8003082 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a4f      	ldr	r2, [pc, #316]	; (8003160 <HAL_HRTIM_Init+0x198>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10e      	bne.n	8003046 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003028:	4b4e      	ldr	r3, [pc, #312]	; (8003164 <HAL_HRTIM_Init+0x19c>)
 800302a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800302e:	4a4d      	ldr	r2, [pc, #308]	; (8003164 <HAL_HRTIM_Init+0x19c>)
 8003030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003034:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_HRTIM_Init+0x19c>)
 800303a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800303e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003054:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800306a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe fef8 	bl	8001e78 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]
 80030ce:	e03e      	b.n	800314e <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80030d0:	7dfa      	ldrb	r2, [r7, #23]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3318      	adds	r3, #24
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80030e4:	7dfa      	ldrb	r2, [r7, #23]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	331c      	adds	r3, #28
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80030f8:	7dfa      	ldrb	r2, [r7, #23]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3320      	adds	r3, #32
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800310c:	7dfa      	ldrb	r2, [r7, #23]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3324      	adds	r3, #36	; 0x24
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003120:	7dfa      	ldrb	r2, [r7, #23]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	3328      	adds	r3, #40	; 0x28
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8003134:	7dfa      	ldrb	r2, [r7, #23]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	3330      	adds	r3, #48	; 0x30
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	3301      	adds	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b05      	cmp	r3, #5
 8003152:	d9bd      	bls.n	80030d0 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40017400 	.word	0x40017400
 8003164:	58024400 	.word	0x58024400

08003168 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d101      	bne.n	8003184 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
 8003182:	e015      	b.n	80031b0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b05      	cmp	r3, #5
 8003190:	d104      	bne.n	800319c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fd43 	bl	8003c20 <HRTIM_MasterBase_Config>
 800319a:	e004      	b.n	80031a6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fd6c 	bl	8003c7e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d101      	bne.n	80031d4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
 80031d2:	e05f      	b.n	8003294 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e058      	b.n	8003294 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d104      	bne.n	8003202 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fd7f 	bl	8003cfe <HRTIM_MasterWaveform_Config>
 8003200:	e004      	b.n	800320c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fde0 	bl	8003dcc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4403      	add	r3, r0
 800321e:	3320      	adds	r3, #32
 8003220:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4403      	add	r3, r0
 8003234:	3324      	adds	r3, #36	; 0x24
 8003236:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4403      	add	r3, r0
 800324a:	3328      	adds	r3, #40	; 0x28
 800324c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68d9      	ldr	r1, [r3, #12]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4403      	add	r3, r0
 8003260:	332c      	adds	r3, #44	; 0x2c
 8003262:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6919      	ldr	r1, [r3, #16]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4403      	add	r3, r0
 8003276:	3330      	adds	r3, #48	; 0x30
 8003278:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 ffe3 	bl	8004248 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d101      	bne.n	80032ba <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	e157      	b.n	800356a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e150      	b.n	800356a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d140      	bne.n	8003360 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	2b07      	cmp	r3, #7
 80032e4:	d82a      	bhi.n	800333c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80032e6:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	0800330d 	.word	0x0800330d
 80032f0:	08003319 	.word	0x08003319
 80032f4:	0800333d 	.word	0x0800333d
 80032f8:	08003325 	.word	0x08003325
 80032fc:	0800333d 	.word	0x0800333d
 8003300:	0800333d 	.word	0x0800333d
 8003304:	0800333d 	.word	0x0800333d
 8003308:	08003331 	.word	0x08003331
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	61da      	str	r2, [r3, #28]
        break;
 8003316:	e01a      	b.n	800334e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8003322:	e014      	b.n	800334e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800332e:	e00e      	b.n	800334e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800333a:	e008      	b.n	800334e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2207      	movs	r2, #7
 8003340:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 800334c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b07      	cmp	r3, #7
 8003358:	f040 80fe 	bne.w	8003558 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e104      	b.n	800356a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	2b07      	cmp	r3, #7
 8003366:	f200 80e3 	bhi.w	8003530 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800336a:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003391 	.word	0x08003391
 8003374:	080033a5 	.word	0x080033a5
 8003378:	08003531 	.word	0x08003531
 800337c:	08003461 	.word	0x08003461
 8003380:	08003531 	.word	0x08003531
 8003384:	08003531 	.word	0x08003531
 8003388:	08003531 	.word	0x08003531
 800338c:	08003475 	.word	0x08003475
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	01db      	lsls	r3, r3, #7
 800339c:	440b      	add	r3, r1
 800339e:	339c      	adds	r3, #156	; 0x9c
 80033a0:	601a      	str	r2, [r3, #0]
        break;
 80033a2:	e0d1      	b.n	8003548 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6819      	ldr	r1, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	01db      	lsls	r3, r3, #7
 80033b0:	440b      	add	r3, r1
 80033b2:	33a4      	adds	r3, #164	; 0xa4
 80033b4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d03f      	beq.n	800343e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3301      	adds	r3, #1
 80033c6:	01db      	lsls	r3, r3, #7
 80033c8:	4413      	add	r3, r2
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	6811      	ldr	r1, [r2, #0]
 80033d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3301      	adds	r3, #1
 80033d8:	01db      	lsls	r3, r3, #7
 80033da:	440b      	add	r3, r1
 80033dc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3301      	adds	r3, #1
 80033e6:	01db      	lsls	r3, r3, #7
 80033e8:	4413      	add	r3, r2
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	68f9      	ldr	r1, [r7, #12]
 80033f2:	6809      	ldr	r1, [r1, #0]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3301      	adds	r3, #1
 80033fa:	01db      	lsls	r3, r3, #7
 80033fc:	440b      	add	r3, r1
 80033fe:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d109      	bne.n	800341e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	01db      	lsls	r3, r3, #7
 8003416:	440b      	add	r3, r1
 8003418:	339c      	adds	r3, #156	; 0x9c
 800341a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800341c:	e091      	b.n	8003542 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003426:	f040 808c 	bne.w	8003542 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6819      	ldr	r1, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	01db      	lsls	r3, r3, #7
 8003436:	440b      	add	r3, r1
 8003438:	33a8      	adds	r3, #168	; 0xa8
 800343a:	601a      	str	r2, [r3, #0]
         break;
 800343c:	e081      	b.n	8003542 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	4413      	add	r3, r2
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	6811      	ldr	r1, [r2, #0]
 8003450:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	3301      	adds	r3, #1
 8003458:	01db      	lsls	r3, r3, #7
 800345a:	440b      	add	r3, r1
 800345c:	601a      	str	r2, [r3, #0]
         break;
 800345e:	e070      	b.n	8003542 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6819      	ldr	r1, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	01db      	lsls	r3, r3, #7
 800346c:	440b      	add	r3, r1
 800346e:	33a8      	adds	r3, #168	; 0xa8
 8003470:	601a      	str	r2, [r3, #0]
        break;
 8003472:	e069      	b.n	8003548 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	01db      	lsls	r3, r3, #7
 8003480:	440b      	add	r3, r1
 8003482:	33ac      	adds	r3, #172	; 0xac
 8003484:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d03f      	beq.n	800350e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3301      	adds	r3, #1
 8003496:	01db      	lsls	r3, r3, #7
 8003498:	4413      	add	r3, r2
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	6811      	ldr	r1, [r2, #0]
 80034a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3301      	adds	r3, #1
 80034a8:	01db      	lsls	r3, r3, #7
 80034aa:	440b      	add	r3, r1
 80034ac:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	3301      	adds	r3, #1
 80034b6:	01db      	lsls	r3, r3, #7
 80034b8:	4413      	add	r3, r2
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	68f9      	ldr	r1, [r7, #12]
 80034c4:	6809      	ldr	r1, [r1, #0]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3301      	adds	r3, #1
 80034cc:	01db      	lsls	r3, r3, #7
 80034ce:	440b      	add	r3, r1
 80034d0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034da:	d109      	bne.n	80034f0 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	01db      	lsls	r3, r3, #7
 80034e8:	440b      	add	r3, r1
 80034ea:	339c      	adds	r3, #156	; 0x9c
 80034ec:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80034ee:	e02a      	b.n	8003546 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034f8:	d125      	bne.n	8003546 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	01db      	lsls	r3, r3, #7
 8003506:	440b      	add	r3, r1
 8003508:	33a8      	adds	r3, #168	; 0xa8
 800350a:	601a      	str	r2, [r3, #0]
         break;
 800350c:	e01b      	b.n	8003546 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3301      	adds	r3, #1
 8003516:	01db      	lsls	r3, r3, #7
 8003518:	4413      	add	r3, r2
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	6811      	ldr	r1, [r2, #0]
 8003520:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	3301      	adds	r3, #1
 8003528:	01db      	lsls	r3, r3, #7
 800352a:	440b      	add	r3, r1
 800352c:	601a      	str	r2, [r3, #0]
         break;
 800352e:	e00a      	b.n	8003546 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2207      	movs	r2, #7
 8003534:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003540:	e002      	b.n	8003548 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8003546:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b07      	cmp	r3, #7
 8003552:	d101      	bne.n	8003558 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e008      	b.n	800356a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop

08003578 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d101      	bne.n	8003596 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	e01d      	b.n	80035d2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e016      	b.n	80035d2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fd46 	bl	800404c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_HRTIM_WaveformSetOutputLevel>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformSetOutputLevel(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t TimerIdx,
                                                   uint32_t Output,
                                                   uint32_t OutputLevel)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, Output));
  assert_param(IS_HRTIM_OUTPUTLEVEL(OutputLevel));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d101      	bne.n	80035fa <HAL_HRTIM_WaveformSetOutputLevel+0x1e>
  {
     return HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0df      	b.n	80037ba <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_HRTIM_WaveformSetOutputLevel+0x2c>
 8003604:	2302      	movs	r3, #2
 8003606:	e0d8      	b.n	80037ba <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer output level */
  switch (Output)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361e:	f000 808d 	beq.w	800373c <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003628:	f200 80ad 	bhi.w	8003786 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003632:	d05e      	beq.n	80036f2 <HAL_HRTIM_WaveformSetOutputLevel+0x116>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363a:	f200 80a4 	bhi.w	8003786 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b80      	cmp	r3, #128	; 0x80
 8003642:	d07b      	beq.n	800373c <HAL_HRTIM_WaveformSetOutputLevel+0x160>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	f200 809d 	bhi.w	8003786 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b20      	cmp	r3, #32
 8003650:	d84c      	bhi.n	80036ec <HAL_HRTIM_WaveformSetOutputLevel+0x110>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8096 	beq.w	8003786 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3b01      	subs	r3, #1
 800365e:	2b1f      	cmp	r3, #31
 8003660:	f200 8091 	bhi.w	8003786 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
 8003664:	a201      	add	r2, pc, #4	; (adr r2, 800366c <HAL_HRTIM_WaveformSetOutputLevel+0x90>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	080036f3 	.word	0x080036f3
 8003670:	0800373d 	.word	0x0800373d
 8003674:	08003787 	.word	0x08003787
 8003678:	080036f3 	.word	0x080036f3
 800367c:	08003787 	.word	0x08003787
 8003680:	08003787 	.word	0x08003787
 8003684:	08003787 	.word	0x08003787
 8003688:	0800373d 	.word	0x0800373d
 800368c:	08003787 	.word	0x08003787
 8003690:	08003787 	.word	0x08003787
 8003694:	08003787 	.word	0x08003787
 8003698:	08003787 	.word	0x08003787
 800369c:	08003787 	.word	0x08003787
 80036a0:	08003787 	.word	0x08003787
 80036a4:	08003787 	.word	0x08003787
 80036a8:	080036f3 	.word	0x080036f3
 80036ac:	08003787 	.word	0x08003787
 80036b0:	08003787 	.word	0x08003787
 80036b4:	08003787 	.word	0x08003787
 80036b8:	08003787 	.word	0x08003787
 80036bc:	08003787 	.word	0x08003787
 80036c0:	08003787 	.word	0x08003787
 80036c4:	08003787 	.word	0x08003787
 80036c8:	08003787 	.word	0x08003787
 80036cc:	08003787 	.word	0x08003787
 80036d0:	08003787 	.word	0x08003787
 80036d4:	08003787 	.word	0x08003787
 80036d8:	08003787 	.word	0x08003787
 80036dc:	08003787 	.word	0x08003787
 80036e0:	08003787 	.word	0x08003787
 80036e4:	08003787 	.word	0x08003787
 80036e8:	0800373d 	.word	0x0800373d
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d149      	bne.n	8003786 <HAL_HRTIM_WaveformSetOutputLevel+0x1aa>
  case HRTIM_OUTPUT_TB1:
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d110      	bne.n	800371a <HAL_HRTIM_WaveformSetOutputLevel+0x13e>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R,HRTIM_SET1R_SST);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	01db      	lsls	r3, r3, #7
 8003700:	4413      	add	r3, r2
 8003702:	33bc      	adds	r3, #188	; 0xbc
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	6811      	ldr	r1, [r2, #0]
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	01db      	lsls	r3, r3, #7
 8003712:	440b      	add	r3, r1
 8003714:	33bc      	adds	r3, #188	; 0xbc
 8003716:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
      }
      break;
 8003718:	e03e      	b.n	8003798 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R, HRTIM_RST1R_SRT);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	01db      	lsls	r3, r3, #7
 8003722:	4413      	add	r3, r2
 8003724:	33c0      	adds	r3, #192	; 0xc0
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	6811      	ldr	r1, [r2, #0]
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	01db      	lsls	r3, r3, #7
 8003734:	440b      	add	r3, r1
 8003736:	33c0      	adds	r3, #192	; 0xc0
 8003738:	601a      	str	r2, [r3, #0]
      break;
 800373a:	e02d      	b.n	8003798 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
  case HRTIM_OUTPUT_TB2:
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      if (OutputLevel == HRTIM_OUTPUTLEVEL_ACTIVE)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d110      	bne.n	8003764 <HAL_HRTIM_WaveformSetOutputLevel+0x188>
      {
        /* Force output to its active state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R, HRTIM_SET2R_SST);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	01db      	lsls	r3, r3, #7
 800374a:	4413      	add	r3, r2
 800374c:	33c4      	adds	r3, #196	; 0xc4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	6811      	ldr	r1, [r2, #0]
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	01db      	lsls	r3, r3, #7
 800375c:	440b      	add	r3, r1
 800375e:	33c4      	adds	r3, #196	; 0xc4
 8003760:	601a      	str	r2, [r3, #0]
      else
      {
        /* Force output to its inactive state */
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
      }
      break;
 8003762:	e019      	b.n	8003798 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
        SET_BIT(hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R, HRTIM_RST2R_SRT);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	01db      	lsls	r3, r3, #7
 800376c:	4413      	add	r3, r2
 800376e:	33c8      	adds	r3, #200	; 0xc8
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	6811      	ldr	r1, [r2, #0]
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	01db      	lsls	r3, r3, #7
 800377e:	440b      	add	r3, r1
 8003780:	33c8      	adds	r3, #200	; 0xc8
 8003782:	601a      	str	r2, [r3, #0]
      break;
 8003784:	e008      	b.n	8003798 <HAL_HRTIM_WaveformSetOutputLevel+0x1bc>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2207      	movs	r2, #7
 800378a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003796:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b07      	cmp	r3, #7
 80037a2:	d101      	bne.n	80037a8 <HAL_HRTIM_WaveformSetOutputLevel+0x1cc>
  {
     return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e008      	b.n	80037ba <HAL_HRTIM_WaveformSetOutputLevel+0x1de>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop

080037c8 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_HRTIM_WaveformOutputStart+0x18>
 80037dc:	2302      	movs	r3, #2
 80037de:	e01a      	b.n	8003816 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_HRTIM_WaveformOutputStop+0x18>
 8003836:	2302      	movs	r3, #2
 8003838:	e01a      	b.n	8003870 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8003890:	2302      	movs	r3, #2
 8003892:	e05b      	b.n	800394c <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68d9      	ldr	r1, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e022      	b.n	8003924 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 80038e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d017      	beq.n	800391e <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	01db      	lsls	r3, r3, #7
 80038f6:	4413      	add	r3, r2
 80038f8:	338c      	adds	r3, #140	; 0x8c
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	3320      	adds	r3, #32
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	4302      	orrs	r2, r0
 8003916:	01db      	lsls	r3, r3, #7
 8003918:	440b      	add	r3, r1
 800391a:	338c      	adds	r3, #140	; 0x8c
 800391c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	3301      	adds	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b04      	cmp	r3, #4
 8003928:	d9d9      	bls.n	80038de <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 800394a:	2300      	movs	r3, #0
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	20000024 	.word	0x20000024

0800395c <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 8003966:	f240 137f 	movw	r3, #383	; 0x17f
 800396a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 8003976:	2302      	movs	r3, #2
 8003978:	e065      	b.n	8003a46 <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	43da      	mvns	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	400a      	ands	r2, r1
 800399e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68d9      	ldr	r1, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039b8:	43da      	mvns	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	400a      	ands	r2, r1
 80039c0:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
 80039c6:	e023      	b.n	8003a10 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80039cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d018      	beq.n	8003a0a <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	01db      	lsls	r3, r3, #7
 80039e0:	4413      	add	r3, r2
 80039e2:	338c      	adds	r3, #140	; 0x8c
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	3320      	adds	r3, #32
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	43da      	mvns	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	4002      	ands	r2, r0
 8003a02:	01db      	lsls	r3, r3, #7
 8003a04:	440b      	add	r3, r1
 8003a06:	338c      	adds	r3, #140	; 0x8c
 8003a08:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d9d8      	bls.n	80039c8 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f9      	bne.n	8003a16 <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	43da      	mvns	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	400a      	ands	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000024 	.word	0x20000024

08003a58 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2bff      	cmp	r3, #255	; 0xff
 8003a66:	d103      	bne.n	8003a70 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fc4f 	bl	800430c <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8003a6e:	e00a      	b.n	8003a86 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b05      	cmp	r3, #5
 8003a74:	d103      	bne.n	8003a7e <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fcc6 	bl	8004408 <HRTIM_Master_ISR>
}
 8003a7c:	e003      	b.n	8003a86 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fd6b 	bl	800455c <HRTIM_Timer_ISR>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f023 0307 	bic.w	r3, r3, #7
 8003c38:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0318 	bic.w	r3, r3, #24
 8003c4a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	6852      	ldr	r2, [r2, #4]
 8003c70:	619a      	str	r2, [r3, #24]
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b087      	sub	sp, #28
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3301      	adds	r3, #1
 8003c92:	01db      	lsls	r3, r3, #7
 8003c94:	4413      	add	r3, r2
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f023 0307 	bic.w	r3, r3, #7
 8003ca0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0318 	bic.w	r3, r3, #24
 8003cb2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	01db      	lsls	r3, r3, #7
 8003cc8:	4413      	add	r3, r2
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	01db      	lsls	r3, r3, #7
 8003cda:	440b      	add	r3, r1
 8003cdc:	3394      	adds	r3, #148	; 0x94
 8003cde:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	01db      	lsls	r3, r3, #7
 8003cec:	440b      	add	r3, r1
 8003cee:	3398      	adds	r3, #152	; 0x98
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003d18:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f023 0320 	bic.w	r3, r3, #32
 8003d20:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d32:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d44:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d56:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003d68:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d7a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d8e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da0:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b08b      	sub	sp, #44	; 0x2c
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	3301      	adds	r3, #1
 8003de0:	01db      	lsls	r3, r3, #7
 8003de2:	4413      	add	r3, r2
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	6811      	ldr	r1, [r2, #0]
 8003dea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	01db      	lsls	r3, r3, #7
 8003df4:	440b      	add	r3, r1
 8003df6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	01db      	lsls	r3, r3, #7
 8003e02:	4413      	add	r3, r2
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	01db      	lsls	r3, r3, #7
 8003e10:	4413      	add	r3, r2
 8003e12:	33e8      	adds	r3, #232	; 0xe8
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	01db      	lsls	r3, r3, #7
 8003e20:	4413      	add	r3, r2
 8003e22:	33e4      	adds	r3, #228	; 0xe4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003e30:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	f023 0320 	bic.w	r3, r3, #32
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	4313      	orrs	r3, r2
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	4313      	orrs	r3, r2
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	4313      	orrs	r3, r2
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	4313      	orrs	r3, r2
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eae:	d103      	bne.n	8003eb8 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	4313      	orrs	r3, r2
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f023 031f 	bic.w	r3, r3, #31
 8003ef4:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f0a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f24:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	6a3a      	ldr	r2, [r7, #32]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003f38:	d004      	beq.n	8003f44 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003f42:	d103      	bne.n	8003f4c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d108      	bne.n	8003f5e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003f52:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d843      	bhi.n	8003ff2 <HRTIM_TimingUnitWaveform_Config+0x226>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f85 	.word	0x08003f85
 8003f74:	08003f9b 	.word	0x08003f9b
 8003f78:	08003fb1 	.word	0x08003fb1
 8003f7c:	08003fc7 	.word	0x08003fc7
 8003f80:	08003fdd 	.word	0x08003fdd
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f8a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61fb      	str	r3, [r7, #28]
      break;
 8003f98:	e02c      	b.n	8003ff4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61fb      	str	r3, [r7, #28]
      break;
 8003fae:	e021      	b.n	8003ff4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003fb6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61fb      	str	r3, [r7, #28]
      break;
 8003fc4:	e016      	b.n	8003ff4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fcc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61fb      	str	r3, [r7, #28]
      break;
 8003fda:	e00b      	b.n	8003ff4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fe2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	015b      	lsls	r3, r3, #5
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61fb      	str	r3, [r7, #28]
      break;
 8003ff0:	e000      	b.n	8003ff4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8003ff2:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	01db      	lsls	r3, r3, #7
 8003ffe:	4413      	add	r3, r2
 8004000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004002:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	01db      	lsls	r3, r3, #7
 800400c:	4413      	add	r3, r2
 800400e:	33e8      	adds	r3, #232	; 0xe8
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	01db      	lsls	r3, r3, #7
 800401c:	4413      	add	r3, r2
 800401e:	33e4      	adds	r3, #228	; 0xe4
 8004020:	6a3a      	ldr	r2, [r7, #32]
 8004022:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	01db      	lsls	r3, r3, #7
 800402c:	4413      	add	r3, r2
 800402e:	33d4      	adds	r3, #212	; 0xd4
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 800403e:	bf00      	nop
 8004040:	372c      	adds	r7, #44	; 0x2c
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop

0800404c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800404c:	b480      	push	{r7}
 800404e:	b089      	sub	sp, #36	; 0x24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	01db      	lsls	r3, r3, #7
 8004066:	4413      	add	r3, r2
 8004068:	33e4      	adds	r3, #228	; 0xe4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	01db      	lsls	r3, r3, #7
 8004076:	4413      	add	r3, r2
 8004078:	33b8      	adds	r3, #184	; 0xb8
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	617b      	str	r3, [r7, #20]

  switch (Output)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004084:	d076      	beq.n	8004174 <HRTIM_OutputConfig+0x128>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408c:	f200 8087 	bhi.w	800419e <HRTIM_OutputConfig+0x152>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004096:	d05a      	beq.n	800414e <HRTIM_OutputConfig+0x102>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409e:	d87e      	bhi.n	800419e <HRTIM_OutputConfig+0x152>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d066      	beq.n	8004174 <HRTIM_OutputConfig+0x128>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d878      	bhi.n	800419e <HRTIM_OutputConfig+0x152>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d84a      	bhi.n	8004148 <HRTIM_OutputConfig+0xfc>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d072      	beq.n	800419e <HRTIM_OutputConfig+0x152>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	2b1f      	cmp	r3, #31
 80040be:	d86e      	bhi.n	800419e <HRTIM_OutputConfig+0x152>
 80040c0:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <HRTIM_OutputConfig+0x7c>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	0800414f 	.word	0x0800414f
 80040cc:	08004175 	.word	0x08004175
 80040d0:	0800419f 	.word	0x0800419f
 80040d4:	0800414f 	.word	0x0800414f
 80040d8:	0800419f 	.word	0x0800419f
 80040dc:	0800419f 	.word	0x0800419f
 80040e0:	0800419f 	.word	0x0800419f
 80040e4:	08004175 	.word	0x08004175
 80040e8:	0800419f 	.word	0x0800419f
 80040ec:	0800419f 	.word	0x0800419f
 80040f0:	0800419f 	.word	0x0800419f
 80040f4:	0800419f 	.word	0x0800419f
 80040f8:	0800419f 	.word	0x0800419f
 80040fc:	0800419f 	.word	0x0800419f
 8004100:	0800419f 	.word	0x0800419f
 8004104:	0800414f 	.word	0x0800414f
 8004108:	0800419f 	.word	0x0800419f
 800410c:	0800419f 	.word	0x0800419f
 8004110:	0800419f 	.word	0x0800419f
 8004114:	0800419f 	.word	0x0800419f
 8004118:	0800419f 	.word	0x0800419f
 800411c:	0800419f 	.word	0x0800419f
 8004120:	0800419f 	.word	0x0800419f
 8004124:	0800419f 	.word	0x0800419f
 8004128:	0800419f 	.word	0x0800419f
 800412c:	0800419f 	.word	0x0800419f
 8004130:	0800419f 	.word	0x0800419f
 8004134:	0800419f 	.word	0x0800419f
 8004138:	0800419f 	.word	0x0800419f
 800413c:	0800419f 	.word	0x0800419f
 8004140:	0800419f 	.word	0x0800419f
 8004144:	08004175 	.word	0x08004175
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d127      	bne.n	800419e <HRTIM_OutputConfig+0x152>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	01db      	lsls	r3, r3, #7
 800415a:	440b      	add	r3, r1
 800415c:	33bc      	adds	r3, #188	; 0xbc
 800415e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	01db      	lsls	r3, r3, #7
 800416c:	440b      	add	r3, r1
 800416e:	33c0      	adds	r3, #192	; 0xc0
 8004170:	601a      	str	r2, [r3, #0]
      break;
 8004172:	e015      	b.n	80041a0 <HRTIM_OutputConfig+0x154>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6819      	ldr	r1, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	01db      	lsls	r3, r3, #7
 8004180:	440b      	add	r3, r1
 8004182:	33c4      	adds	r3, #196	; 0xc4
 8004184:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6819      	ldr	r1, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	01db      	lsls	r3, r3, #7
 8004192:	440b      	add	r3, r1
 8004194:	33c8      	adds	r3, #200	; 0xc8
 8004196:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8004198:	2310      	movs	r3, #16
 800419a:	61bb      	str	r3, [r7, #24]
      break;
 800419c:	e000      	b.n	80041a0 <HRTIM_OutputConfig+0x154>
    }

  default:
    break;
 800419e:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80041a0:	22fe      	movs	r2, #254	; 0xfe
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d111      	bne.n	800422c <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <HRTIM_OutputConfig+0x1e0>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8004218:	2b00      	cmp	r3, #0
 800421a:	d107      	bne.n	800422c <HRTIM_OutputConfig+0x1e0>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	4313      	orrs	r3, r2
 800422a:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	01db      	lsls	r3, r3, #7
 8004234:	4413      	add	r3, r2
 8004236:	33e4      	adds	r3, #228	; 0xe4
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	601a      	str	r2, [r3, #0]
}
 800423c:	bf00      	nop
 800423e:	3724      	adds	r7, #36	; 0x24
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b05      	cmp	r3, #5
 8004256:	d851      	bhi.n	80042fc <HRTIM_ForceRegistersUpdate+0xb4>
 8004258:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <HRTIM_ForceRegistersUpdate+0x18>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	0800428f 	.word	0x0800428f
 8004264:	080042a5 	.word	0x080042a5
 8004268:	080042bb 	.word	0x080042bb
 800426c:	080042d1 	.word	0x080042d1
 8004270:	080042e7 	.word	0x080042e7
 8004274:	08004279 	.word	0x08004279
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800428c:	e037      	b.n	80042fe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0202 	orr.w	r2, r2, #2
 800429e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042a2:	e02c      	b.n	80042fe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0204 	orr.w	r2, r2, #4
 80042b4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042b8:	e021      	b.n	80042fe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042ce:	e016      	b.n	80042fe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0210 	orr.w	r2, r2, #16
 80042e0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042e4:	e00b      	b.n	80042fe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0220 	orr.w	r2, r2, #32
 80042f6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80042fa:	e000      	b.n	80042fe <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80042fc:	bf00      	nop
  }
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop

0800430c <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8004326:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00c      	beq.n	800434c <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2201      	movs	r2, #1
 8004342:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fba1 	bl	8003a8e <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2202      	movs	r2, #2
 8004366:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff fb99 	bl	8003aa2 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00c      	beq.n	8004394 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2204      	movs	r2, #4
 800438a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fb91 	bl	8003ab6 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00c      	beq.n	80043b8 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2208      	movs	r2, #8
 80043ae:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fb89 	bl	8003aca <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00c      	beq.n	80043dc <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2210      	movs	r2, #16
 80043d2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fb81 	bl	8003ade <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00c      	beq.n	8004400 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d007      	beq.n	8004400 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fb79 	bl	8003af2 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004418:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8004422:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004450:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fb56 	bl	8003b06 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00c      	beq.n	800447e <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2201      	movs	r2, #1
 8004474:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004476:	2105      	movs	r1, #5
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff fb63 	bl	8003b44 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00c      	beq.n	80044a2 <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2202      	movs	r2, #2
 8004498:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800449a:	2105      	movs	r1, #5
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fc fe4b 	bl	8001138 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2204      	movs	r2, #4
 80044bc:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044be:	2105      	movs	r1, #5
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fc fe65 	bl	8001190 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00c      	beq.n	80044ea <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2208      	movs	r2, #8
 80044e0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80044e2:	2105      	movs	r1, #5
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff fb38 	bl	8003b5a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00c      	beq.n	800450e <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0310 	and.w	r3, r3, #16
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2210      	movs	r2, #16
 8004504:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8004506:	2105      	movs	r1, #5
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7fc fe99 	bl	8001240 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00b      	beq.n	8004530 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d006      	beq.n	8004530 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2220      	movs	r2, #32
 8004528:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff faf5 	bl	8003b1a <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2240      	movs	r2, #64	; 0x40
 800454a:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800454c:	2105      	movs	r1, #5
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff faed 	bl	8003b2e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004554:	bf00      	nop
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	01db      	lsls	r3, r3, #7
 8004570:	4413      	add	r3, r2
 8004572:	3304      	adds	r3, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	01db      	lsls	r3, r3, #7
 8004580:	4413      	add	r3, r2
 8004582:	338c      	adds	r3, #140	; 0x8c
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d010      	beq.n	80045b4 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00b      	beq.n	80045b4 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	01db      	lsls	r3, r3, #7
 80045a4:	4413      	add	r3, r2
 80045a6:	3388      	adds	r3, #136	; 0x88
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fac8 	bl	8003b44 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00b      	beq.n	80045e0 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	01db      	lsls	r3, r3, #7
 80045d0:	4413      	add	r3, r2
 80045d2:	3388      	adds	r3, #136	; 0x88
 80045d4:	2202      	movs	r2, #2
 80045d6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fdac 	bl	8001138 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00b      	beq.n	800460c <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	01db      	lsls	r3, r3, #7
 80045fc:	4413      	add	r3, r2
 80045fe:	3388      	adds	r3, #136	; 0x88
 8004600:	2204      	movs	r2, #4
 8004602:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8004604:	6839      	ldr	r1, [r7, #0]
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fdc2 	bl	8001190 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d010      	beq.n	8004638 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	01db      	lsls	r3, r3, #7
 8004628:	4413      	add	r3, r2
 800462a:	3388      	adds	r3, #136	; 0x88
 800462c:	2208      	movs	r2, #8
 800462e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fa91 	bl	8003b5a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	01db      	lsls	r3, r3, #7
 8004654:	4413      	add	r3, r2
 8004656:	3388      	adds	r3, #136	; 0x88
 8004658:	2210      	movs	r2, #16
 800465a:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 800465c:	6839      	ldr	r1, [r7, #0]
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fc fdee 	bl	8001240 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	01db      	lsls	r3, r3, #7
 8004680:	4413      	add	r3, r2
 8004682:	3388      	adds	r3, #136	; 0x88
 8004684:	2240      	movs	r2, #64	; 0x40
 8004686:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fa4f 	bl	8003b2e <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d010      	beq.n	80046bc <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	01db      	lsls	r3, r3, #7
 80046ac:	4413      	add	r3, r2
 80046ae:	3388      	adds	r3, #136	; 0x88
 80046b0:	2280      	movs	r2, #128	; 0x80
 80046b2:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff fa5a 	bl	8003b70 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d011      	beq.n	80046ea <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00c      	beq.n	80046ea <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	01db      	lsls	r3, r3, #7
 80046d8:	4413      	add	r3, r2
 80046da:	3388      	adds	r3, #136	; 0x88
 80046dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046e0:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fa4e 	bl	8003b86 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d011      	beq.n	8004718 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	4413      	add	r3, r2
 8004708:	3388      	adds	r3, #136	; 0x88
 800470a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800470e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff fa58 	bl	8003bc8 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471e:	2b00      	cmp	r3, #0
 8004720:	d011      	beq.n	8004746 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00c      	beq.n	8004746 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	01db      	lsls	r3, r3, #7
 8004734:	4413      	add	r3, r2
 8004736:	3388      	adds	r3, #136	; 0x88
 8004738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800473c:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800473e:	6839      	ldr	r1, [r7, #0]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff fa4c 	bl	8003bde <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474c:	2b00      	cmp	r3, #0
 800474e:	d011      	beq.n	8004774 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	01db      	lsls	r3, r3, #7
 8004762:	4413      	add	r3, r2
 8004764:	3388      	adds	r3, #136	; 0x88
 8004766:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800476a:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff fa40 	bl	8003bf4 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d011      	beq.n	80047a2 <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00c      	beq.n	80047a2 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	4413      	add	r3, r2
 8004792:	3388      	adds	r3, #136	; 0x88
 8004794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004798:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fa34 	bl	8003c0a <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d011      	beq.n	80047d0 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00c      	beq.n	80047d0 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	01db      	lsls	r3, r3, #7
 80047be:	4413      	add	r3, r2
 80047c0:	3388      	adds	r3, #136	; 0x88
 80047c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047c6:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff f9f1 	bl	8003bb2 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d011      	beq.n	80047fe <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00c      	beq.n	80047fe <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	01db      	lsls	r3, r3, #7
 80047ec:	4413      	add	r3, r2
 80047ee:	3388      	adds	r3, #136	; 0x88
 80047f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047f4:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff f9cf 	bl	8003b9c <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e097      	b.n	800494a <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fd fbc5 	bl	8001fc4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d004      	beq.n	800485c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800485a:	d103      	bne.n	8004864 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 031e 	bic.w	r3, r3, #30
 8004862:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4b38      	ldr	r3, [pc, #224]	; (8004954 <HAL_LPTIM_Init+0x14c>)
 8004874:	4013      	ands	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4b37      	ldr	r3, [pc, #220]	; (8004958 <HAL_LPTIM_Init+0x150>)
 800487c:	4013      	ands	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004888:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800488e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004894:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800489a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d107      	bne.n	80048ba <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80048b2:	4313      	orrs	r3, r2
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d004      	beq.n	80048cc <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ca:	d107      	bne.n	80048dc <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80048d4:	4313      	orrs	r3, r2
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00a      	beq.n	80048fe <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80048f0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80048f6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a14      	ldr	r2, [pc, #80]	; (800495c <HAL_LPTIM_Init+0x154>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_LPTIM_Init+0x112>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a12      	ldr	r2, [pc, #72]	; (8004960 <HAL_LPTIM_Init+0x158>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d108      	bne.n	800492c <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	625a      	str	r2, [r3, #36]	; 0x24
 800492a:	e009      	b.n	8004940 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <HAL_LPTIM_Init+0x15c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d104      	bne.n	8004940 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	ffff1f3f 	.word	0xffff1f3f
 8004958:	ff19f1fe 	.word	0xff19f1fe
 800495c:	40002400 	.word	0x40002400
 8004960:	58002400 	.word	0x58002400
 8004964:	58002800 	.word	0x58002800

08004968 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d00c      	beq.n	800499c <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800498a:	d107      	bne.n	800499c <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 800499a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2210      	movs	r2, #16
 80049b2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80049bc:	2110      	movs	r1, #16
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f91e 	bl	8004c00 <LPTIM_WaitForFlag>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d101      	bne.n	80049ce <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e02f      	b.n	8004a2e <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f946 	bl	8004c60 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f905 	bl	8004be4 <HAL_LPTIM_GetState>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d101      	bne.n	80049e4 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e024      	b.n	8004a2e <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0210 	orr.w	r2, r2, #16
 80049f2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0202 	orr.w	r2, r2, #2
 8004a02:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0204 	orr.w	r2, r2, #4
 8004a22:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d10d      	bne.n	8004a68 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d106      	bne.n	8004a68 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f882 	bl	8004b6c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d10d      	bne.n	8004a92 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d106      	bne.n	8004a92 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fc fb45 	bl	800111c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d10d      	bne.n	8004abc <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d106      	bne.n	8004abc <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f862 	bl	8004b80 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d10d      	bne.n	8004ae6 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d106      	bne.n	8004ae6 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2208      	movs	r2, #8
 8004ade:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f857 	bl	8004b94 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d10d      	bne.n	8004b10 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d106      	bne.n	8004b10 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2210      	movs	r2, #16
 8004b08:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f84c 	bl	8004ba8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d10d      	bne.n	8004b3a <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d106      	bne.n	8004b3a <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2220      	movs	r2, #32
 8004b32:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f841 	bl	8004bbc <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d10d      	bne.n	8004b64 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b52:	2b40      	cmp	r3, #64	; 0x40
 8004b54:	d106      	bne.n	8004b64 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2240      	movs	r2, #64	; 0x40
 8004b5c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f836 	bl	8004bd0 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004bf2:	b2db      	uxtb	r3, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <LPTIM_WaitForFlag+0x58>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <LPTIM_WaitForFlag+0x5c>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	0b9b      	lsrs	r3, r3, #14
 8004c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d002      	beq.n	8004c4a <LPTIM_WaitForFlag+0x4a>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ec      	bne.n	8004c24 <LPTIM_WaitForFlag+0x24>

  return result;
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	20000014 	.word	0x20000014
 8004c5c:	d1b71759 	.word	0xd1b71759

08004c60 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c72:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c76:	2301      	movs	r3, #1
 8004c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f383 8810 	msr	PRIMASK, r3
}
 8004c80:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a81      	ldr	r2, [pc, #516]	; (8004e8c <LPTIM_Disable+0x22c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d02d      	beq.n	8004ce8 <LPTIM_Disable+0x88>
 8004c8c:	4a7f      	ldr	r2, [pc, #508]	; (8004e8c <LPTIM_Disable+0x22c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d830      	bhi.n	8004cf4 <LPTIM_Disable+0x94>
 8004c92:	4a7f      	ldr	r2, [pc, #508]	; (8004e90 <LPTIM_Disable+0x230>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d021      	beq.n	8004cdc <LPTIM_Disable+0x7c>
 8004c98:	4a7d      	ldr	r2, [pc, #500]	; (8004e90 <LPTIM_Disable+0x230>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d82a      	bhi.n	8004cf4 <LPTIM_Disable+0x94>
 8004c9e:	4a7d      	ldr	r2, [pc, #500]	; (8004e94 <LPTIM_Disable+0x234>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d015      	beq.n	8004cd0 <LPTIM_Disable+0x70>
 8004ca4:	4a7b      	ldr	r2, [pc, #492]	; (8004e94 <LPTIM_Disable+0x234>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d824      	bhi.n	8004cf4 <LPTIM_Disable+0x94>
 8004caa:	4a7b      	ldr	r2, [pc, #492]	; (8004e98 <LPTIM_Disable+0x238>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <LPTIM_Disable+0x58>
 8004cb0:	4a7a      	ldr	r2, [pc, #488]	; (8004e9c <LPTIM_Disable+0x23c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d006      	beq.n	8004cc4 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004cb6:	e01d      	b.n	8004cf4 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004cb8:	4b79      	ldr	r3, [pc, #484]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004cc2:	e018      	b.n	8004cf6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cc4:	4b76      	ldr	r3, [pc, #472]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004cce:	e012      	b.n	8004cf6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004cd0:	4b73      	ldr	r3, [pc, #460]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004cda:	e00c      	b.n	8004cf6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004cdc:	4b70      	ldr	r3, [pc, #448]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004ce6:	e006      	b.n	8004cf6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004ce8:	4b6d      	ldr	r3, [pc, #436]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004cf2:	e000      	b.n	8004cf6 <LPTIM_Disable+0x96>
      break;
 8004cf4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a5a      	ldr	r2, [pc, #360]	; (8004e8c <LPTIM_Disable+0x22c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d059      	beq.n	8004ddc <LPTIM_Disable+0x17c>
 8004d28:	4a58      	ldr	r2, [pc, #352]	; (8004e8c <LPTIM_Disable+0x22c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d867      	bhi.n	8004dfe <LPTIM_Disable+0x19e>
 8004d2e:	4a58      	ldr	r2, [pc, #352]	; (8004e90 <LPTIM_Disable+0x230>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d042      	beq.n	8004dba <LPTIM_Disable+0x15a>
 8004d34:	4a56      	ldr	r2, [pc, #344]	; (8004e90 <LPTIM_Disable+0x230>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d861      	bhi.n	8004dfe <LPTIM_Disable+0x19e>
 8004d3a:	4a56      	ldr	r2, [pc, #344]	; (8004e94 <LPTIM_Disable+0x234>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d02b      	beq.n	8004d98 <LPTIM_Disable+0x138>
 8004d40:	4a54      	ldr	r2, [pc, #336]	; (8004e94 <LPTIM_Disable+0x234>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d85b      	bhi.n	8004dfe <LPTIM_Disable+0x19e>
 8004d46:	4a54      	ldr	r2, [pc, #336]	; (8004e98 <LPTIM_Disable+0x238>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <LPTIM_Disable+0xf4>
 8004d4c:	4a53      	ldr	r2, [pc, #332]	; (8004e9c <LPTIM_Disable+0x23c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d011      	beq.n	8004d76 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8004d52:	e054      	b.n	8004dfe <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004d54:	4b52      	ldr	r3, [pc, #328]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	4a51      	ldr	r2, [pc, #324]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004d5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004d64:	4b4e      	ldr	r3, [pc, #312]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	4a4d      	ldr	r2, [pc, #308]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8004d74:	e044      	b.n	8004e00 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004d76:	4b4a      	ldr	r3, [pc, #296]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d7c:	4a48      	ldr	r2, [pc, #288]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d82:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004d86:	4b46      	ldr	r3, [pc, #280]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004d88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d8c:	4a44      	ldr	r2, [pc, #272]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004d8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004d96:	e033      	b.n	8004e00 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004d98:	4b41      	ldr	r3, [pc, #260]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d9e:	4a40      	ldr	r2, [pc, #256]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004da8:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dae:	4a3c      	ldr	r2, [pc, #240]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004db0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004db4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004db8:	e022      	b.n	8004e00 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dc0:	4a37      	ldr	r2, [pc, #220]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004dc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dc6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8004dca:	4b35      	ldr	r3, [pc, #212]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dd0:	4a33      	ldr	r2, [pc, #204]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dd6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004dda:	e011      	b.n	8004e00 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8004ddc:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de2:	4a2f      	ldr	r2, [pc, #188]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004de8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8004dec:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004df2:	4a2b      	ldr	r2, [pc, #172]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004dfc:	e000      	b.n	8004e00 <LPTIM_Disable+0x1a0>
      break;
 8004dfe:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d103      	bne.n	8004e0e <LPTIM_Disable+0x1ae>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80d0 	beq.w	8004fae <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <LPTIM_Disable+0x22c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d031      	beq.n	8004e7c <LPTIM_Disable+0x21c>
 8004e18:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <LPTIM_Disable+0x22c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d842      	bhi.n	8004ea4 <LPTIM_Disable+0x244>
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	; (8004e90 <LPTIM_Disable+0x230>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d024      	beq.n	8004e6e <LPTIM_Disable+0x20e>
 8004e24:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <LPTIM_Disable+0x230>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d83c      	bhi.n	8004ea4 <LPTIM_Disable+0x244>
 8004e2a:	4a1a      	ldr	r2, [pc, #104]	; (8004e94 <LPTIM_Disable+0x234>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d017      	beq.n	8004e60 <LPTIM_Disable+0x200>
 8004e30:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <LPTIM_Disable+0x234>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d836      	bhi.n	8004ea4 <LPTIM_Disable+0x244>
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <LPTIM_Disable+0x238>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <LPTIM_Disable+0x1e4>
 8004e3c:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <LPTIM_Disable+0x23c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004e42:	e02f      	b.n	8004ea4 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	4a15      	ldr	r2, [pc, #84]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e4a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8004e4e:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8004e50:	e029      	b.n	8004ea6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e58:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004e5c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e5e:	e022      	b.n	8004ea6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8004e60:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e64:	4a0e      	ldr	r2, [pc, #56]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e66:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e6a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e6c:	e01b      	b.n	8004ea6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	4a0b      	ldr	r2, [pc, #44]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e74:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e78:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e7a:	e014      	b.n	8004ea6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8004e7c:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	4a07      	ldr	r2, [pc, #28]	; (8004ea0 <LPTIM_Disable+0x240>)
 8004e82:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e86:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8004e88:	e00d      	b.n	8004ea6 <LPTIM_Disable+0x246>
 8004e8a:	bf00      	nop
 8004e8c:	58003000 	.word	0x58003000
 8004e90:	58002c00 	.word	0x58002c00
 8004e94:	58002800 	.word	0x58002800
 8004e98:	40002400 	.word	0x40002400
 8004e9c:	58002400 	.word	0x58002400
 8004ea0:	58024400 	.word	0x58024400
        break;
 8004ea4:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01a      	beq.n	8004ee2 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004ec4:	2108      	movs	r1, #8
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fe9a 	bl	8004c00 <LPTIM_WaitForFlag>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d103      	bne.n	8004eda <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2208      	movs	r2, #8
 8004ee0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01a      	beq.n	8004f1e <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004f00:	2110      	movs	r1, #16
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fe7c 	bl	8004c00 <LPTIM_WaitForFlag>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d103      	bne.n	8004f16 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2203      	movs	r2, #3
 8004f12:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a33      	ldr	r2, [pc, #204]	; (8004ff0 <LPTIM_Disable+0x390>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d039      	beq.n	8004f9c <LPTIM_Disable+0x33c>
 8004f28:	4a31      	ldr	r2, [pc, #196]	; (8004ff0 <LPTIM_Disable+0x390>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d841      	bhi.n	8004fb2 <LPTIM_Disable+0x352>
 8004f2e:	4a31      	ldr	r2, [pc, #196]	; (8004ff4 <LPTIM_Disable+0x394>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d02a      	beq.n	8004f8a <LPTIM_Disable+0x32a>
 8004f34:	4a2f      	ldr	r2, [pc, #188]	; (8004ff4 <LPTIM_Disable+0x394>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d83b      	bhi.n	8004fb2 <LPTIM_Disable+0x352>
 8004f3a:	4a2f      	ldr	r2, [pc, #188]	; (8004ff8 <LPTIM_Disable+0x398>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d01b      	beq.n	8004f78 <LPTIM_Disable+0x318>
 8004f40:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <LPTIM_Disable+0x398>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d835      	bhi.n	8004fb2 <LPTIM_Disable+0x352>
 8004f46:	4a2d      	ldr	r2, [pc, #180]	; (8004ffc <LPTIM_Disable+0x39c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <LPTIM_Disable+0x2f4>
 8004f4c:	4a2c      	ldr	r2, [pc, #176]	; (8005000 <LPTIM_Disable+0x3a0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8004f52:	e02e      	b.n	8004fb2 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004f54:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f5c:	4929      	ldr	r1, [pc, #164]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	4313      	orrs	r3, r2
 8004f62:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8004f64:	e026      	b.n	8004fb4 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004f66:	4b27      	ldr	r3, [pc, #156]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f6e:	4925      	ldr	r1, [pc, #148]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	4313      	orrs	r3, r2
 8004f74:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f76:	e01d      	b.n	8004fb4 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8004f78:	4b22      	ldr	r3, [pc, #136]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f80:	4920      	ldr	r1, [pc, #128]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	4313      	orrs	r3, r2
 8004f86:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f88:	e014      	b.n	8004fb4 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f92:	491c      	ldr	r1, [pc, #112]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	4313      	orrs	r3, r2
 8004f98:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004f9a:	e00b      	b.n	8004fb4 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fa4:	4917      	ldr	r1, [pc, #92]	; (8005004 <LPTIM_Disable+0x3a4>)
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004fac:	e002      	b.n	8004fb4 <LPTIM_Disable+0x354>
    }
  }
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <LPTIM_Disable+0x354>
        break;
 8004fb2:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fca:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a3a      	ldr	r2, [r7, #32]
 8004fd2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004fe8:	bf00      	nop
 8004fea:	3730      	adds	r7, #48	; 0x30
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	58003000 	.word	0x58003000
 8004ff4:	58002c00 	.word	0x58002c00
 8004ff8:	58002800 	.word	0x58002800
 8004ffc:	40002400 	.word	0x40002400
 8005000:	58002400 	.word	0x58002400
 8005004:	58024400 	.word	0x58024400

08005008 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	58024800 	.word	0x58024800

08005028 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <HAL_PWR_EnterSLEEPMode+0x30>)
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	4a07      	ldr	r2, [pc, #28]	; (8005058 <HAL_PWR_EnterSLEEPMode+0x30>)
 800503a:	f023 0304 	bic.w	r3, r3, #4
 800503e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8005046:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 8005048:	e000      	b.n	800504c <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 800504a:	bf20      	wfe
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8005068:	4b18      	ldr	r3, [pc, #96]	; (80050cc <HAL_PWR_EnterSTOPMode+0x70>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f023 0201 	bic.w	r2, r3, #1
 8005070:	4916      	ldr	r1, [pc, #88]	; (80050cc <HAL_PWR_EnterSTOPMode+0x70>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4313      	orrs	r3, r2
 8005076:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8005078:	4b14      	ldr	r3, [pc, #80]	; (80050cc <HAL_PWR_EnterSTOPMode+0x70>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	4a13      	ldr	r2, [pc, #76]	; (80050cc <HAL_PWR_EnterSTOPMode+0x70>)
 800507e:	f023 0305 	bic.w	r3, r3, #5
 8005082:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <HAL_PWR_EnterSTOPMode+0x70>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	4a10      	ldr	r2, [pc, #64]	; (80050cc <HAL_PWR_EnterSTOPMode+0x70>)
 800508a:	f023 0302 	bic.w	r3, r3, #2
 800508e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <HAL_PWR_EnterSTOPMode+0x74>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <HAL_PWR_EnterSTOPMode+0x74>)
 8005096:	f043 0304 	orr.w	r3, r3, #4
 800509a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800509c:	f3bf 8f4f 	dsb	sy
}
 80050a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050a2:	f3bf 8f6f 	isb	sy
}
 80050a6:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80050ae:	bf30      	wfi
 80050b0:	e000      	b.n	80050b4 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80050b2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <HAL_PWR_EnterSTOPMode+0x74>)
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <HAL_PWR_EnterSTOPMode+0x74>)
 80050ba:	f023 0304 	bic.w	r3, r3, #4
 80050be:	6113      	str	r3, [r2, #16]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	58024800 	.word	0x58024800
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <HAL_PWREx_ConfigSupply+0x70>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d00a      	beq.n	80050fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050e8:	4b16      	ldr	r3, [pc, #88]	; (8005144 <HAL_PWREx_ConfigSupply+0x70>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d001      	beq.n	80050fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e01f      	b.n	800513a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e01d      	b.n	800513a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_PWREx_ConfigSupply+0x70>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f023 0207 	bic.w	r2, r3, #7
 8005106:	490f      	ldr	r1, [pc, #60]	; (8005144 <HAL_PWREx_ConfigSupply+0x70>)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4313      	orrs	r3, r2
 800510c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800510e:	f7fd fa79 	bl	8002604 <HAL_GetTick>
 8005112:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005114:	e009      	b.n	800512a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005116:	f7fd fa75 	bl	8002604 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005124:	d901      	bls.n	800512a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e007      	b.n	800513a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_PWREx_ConfigSupply+0x70>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005136:	d1ee      	bne.n	8005116 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	58024800 	.word	0x58024800

08005148 <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 800514c:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a04      	ldr	r2, [pc, #16]	; (8005164 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
 8005152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005156:	6013      	str	r3, [r2, #0]
}
 8005158:	bf00      	nop
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	58024800 	.word	0x58024800

08005168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	; 0x30
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f000 bc48 	b.w	8005a0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8088 	beq.w	800529a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518a:	4b99      	ldr	r3, [pc, #612]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005194:	4b96      	ldr	r3, [pc, #600]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	2b10      	cmp	r3, #16
 800519e:	d007      	beq.n	80051b0 <HAL_RCC_OscConfig+0x48>
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	2b18      	cmp	r3, #24
 80051a4:	d111      	bne.n	80051ca <HAL_RCC_OscConfig+0x62>
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d10c      	bne.n	80051ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b0:	4b8f      	ldr	r3, [pc, #572]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d06d      	beq.n	8005298 <HAL_RCC_OscConfig+0x130>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d169      	bne.n	8005298 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f000 bc21 	b.w	8005a0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d2:	d106      	bne.n	80051e2 <HAL_RCC_OscConfig+0x7a>
 80051d4:	4b86      	ldr	r3, [pc, #536]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a85      	ldr	r2, [pc, #532]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e02e      	b.n	8005240 <HAL_RCC_OscConfig+0xd8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10c      	bne.n	8005204 <HAL_RCC_OscConfig+0x9c>
 80051ea:	4b81      	ldr	r3, [pc, #516]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a80      	ldr	r2, [pc, #512]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80051f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4b7e      	ldr	r3, [pc, #504]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a7d      	ldr	r2, [pc, #500]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80051fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e01d      	b.n	8005240 <HAL_RCC_OscConfig+0xd8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0xc0>
 800520e:	4b78      	ldr	r3, [pc, #480]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a77      	ldr	r2, [pc, #476]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b75      	ldr	r3, [pc, #468]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a74      	ldr	r2, [pc, #464]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0xd8>
 8005228:	4b71      	ldr	r3, [pc, #452]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a70      	ldr	r2, [pc, #448]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800522e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b6e      	ldr	r3, [pc, #440]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6d      	ldr	r2, [pc, #436]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800523a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800523e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fd f9dc 	bl	8002604 <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005250:	f7fd f9d8 	bl	8002604 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e3d4      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005262:	4b63      	ldr	r3, [pc, #396]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0xe8>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd f9c8 	bl	8002604 <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005278:	f7fd f9c4 	bl	8002604 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	; 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e3c0      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800528a:	4b59      	ldr	r3, [pc, #356]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x110>
 8005296:	e000      	b.n	800529a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80ca 	beq.w	800543c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a8:	4b51      	ldr	r3, [pc, #324]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052b2:	4b4f      	ldr	r3, [pc, #316]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_RCC_OscConfig+0x166>
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	2b18      	cmp	r3, #24
 80052c2:	d156      	bne.n	8005372 <HAL_RCC_OscConfig+0x20a>
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d151      	bne.n	8005372 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ce:	4b48      	ldr	r3, [pc, #288]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_RCC_OscConfig+0x17e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e392      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052e6:	4b42      	ldr	r3, [pc, #264]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 0219 	bic.w	r2, r3, #25
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	493f      	ldr	r1, [pc, #252]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fd f984 	bl	8002604 <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005300:	f7fd f980 	bl	8002604 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e37c      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005312:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531e:	f7fd f9c1 	bl	80026a4 <HAL_GetREVID>
 8005322:	4603      	mov	r3, r0
 8005324:	f241 0203 	movw	r2, #4099	; 0x1003
 8005328:	4293      	cmp	r3, r2
 800532a:	d817      	bhi.n	800535c <HAL_RCC_OscConfig+0x1f4>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d108      	bne.n	8005346 <HAL_RCC_OscConfig+0x1de>
 8005334:	4b2e      	ldr	r3, [pc, #184]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800533c:	4a2c      	ldr	r2, [pc, #176]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800533e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005342:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005344:	e07a      	b.n	800543c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005346:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	031b      	lsls	r3, r3, #12
 8005354:	4926      	ldr	r1, [pc, #152]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005356:	4313      	orrs	r3, r2
 8005358:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800535a:	e06f      	b.n	800543c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	4921      	ldr	r1, [pc, #132]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800536c:	4313      	orrs	r3, r2
 800536e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005370:	e064      	b.n	800543c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d047      	beq.n	800540a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800537a:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 0219 	bic.w	r2, r3, #25
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	491a      	ldr	r1, [pc, #104]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538c:	f7fd f93a 	bl	8002604 <HAL_GetTick>
 8005390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005394:	f7fd f936 	bl	8002604 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e332      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b2:	f7fd f977 	bl	80026a4 <HAL_GetREVID>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80053bc:	4293      	cmp	r3, r2
 80053be:	d819      	bhi.n	80053f4 <HAL_RCC_OscConfig+0x28c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d108      	bne.n	80053da <HAL_RCC_OscConfig+0x272>
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053d0:	4a07      	ldr	r2, [pc, #28]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80053d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d6:	6053      	str	r3, [r2, #4]
 80053d8:	e030      	b.n	800543c <HAL_RCC_OscConfig+0x2d4>
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	031b      	lsls	r3, r3, #12
 80053e8:	4901      	ldr	r1, [pc, #4]	; (80053f0 <HAL_RCC_OscConfig+0x288>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	604b      	str	r3, [r1, #4]
 80053ee:	e025      	b.n	800543c <HAL_RCC_OscConfig+0x2d4>
 80053f0:	58024400 	.word	0x58024400
 80053f4:	4b9a      	ldr	r3, [pc, #616]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	4997      	ldr	r1, [pc, #604]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]
 8005408:	e018      	b.n	800543c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540a:	4b95      	ldr	r3, [pc, #596]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a94      	ldr	r2, [pc, #592]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005416:	f7fd f8f5 	bl	8002604 <HAL_GetTick>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541e:	f7fd f8f1 	bl	8002604 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e2ed      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005430:	4b8b      	ldr	r3, [pc, #556]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80a9 	beq.w	800559c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544a:	4b85      	ldr	r3, [pc, #532]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005452:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005454:	4b82      	ldr	r3, [pc, #520]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d007      	beq.n	8005470 <HAL_RCC_OscConfig+0x308>
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b18      	cmp	r3, #24
 8005464:	d13a      	bne.n	80054dc <HAL_RCC_OscConfig+0x374>
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d135      	bne.n	80054dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005470:	4b7b      	ldr	r3, [pc, #492]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_OscConfig+0x320>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d001      	beq.n	8005488 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e2c1      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005488:	f7fd f90c 	bl	80026a4 <HAL_GetREVID>
 800548c:	4603      	mov	r3, r0
 800548e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005492:	4293      	cmp	r3, r2
 8005494:	d817      	bhi.n	80054c6 <HAL_RCC_OscConfig+0x35e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	2b20      	cmp	r3, #32
 800549c:	d108      	bne.n	80054b0 <HAL_RCC_OscConfig+0x348>
 800549e:	4b70      	ldr	r3, [pc, #448]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054a6:	4a6e      	ldr	r2, [pc, #440]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80054a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ae:	e075      	b.n	800559c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054b0:	4b6b      	ldr	r3, [pc, #428]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	069b      	lsls	r3, r3, #26
 80054be:	4968      	ldr	r1, [pc, #416]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054c4:	e06a      	b.n	800559c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054c6:	4b66      	ldr	r3, [pc, #408]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	4962      	ldr	r1, [pc, #392]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054da:	e05f      	b.n	800559c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d042      	beq.n	800556a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054e4:	4b5e      	ldr	r3, [pc, #376]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a5d      	ldr	r2, [pc, #372]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80054ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fd f888 	bl	8002604 <HAL_GetTick>
 80054f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054f8:	f7fd f884 	bl	8002604 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e280      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800550a:	4b55      	ldr	r3, [pc, #340]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005516:	f7fd f8c5 	bl	80026a4 <HAL_GetREVID>
 800551a:	4603      	mov	r3, r0
 800551c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005520:	4293      	cmp	r3, r2
 8005522:	d817      	bhi.n	8005554 <HAL_RCC_OscConfig+0x3ec>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	2b20      	cmp	r3, #32
 800552a:	d108      	bne.n	800553e <HAL_RCC_OscConfig+0x3d6>
 800552c:	4b4c      	ldr	r3, [pc, #304]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005534:	4a4a      	ldr	r2, [pc, #296]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800553a:	6053      	str	r3, [r2, #4]
 800553c:	e02e      	b.n	800559c <HAL_RCC_OscConfig+0x434>
 800553e:	4b48      	ldr	r3, [pc, #288]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	069b      	lsls	r3, r3, #26
 800554c:	4944      	ldr	r1, [pc, #272]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 800554e:	4313      	orrs	r3, r2
 8005550:	604b      	str	r3, [r1, #4]
 8005552:	e023      	b.n	800559c <HAL_RCC_OscConfig+0x434>
 8005554:	4b42      	ldr	r3, [pc, #264]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	061b      	lsls	r3, r3, #24
 8005562:	493f      	ldr	r1, [pc, #252]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005564:	4313      	orrs	r3, r2
 8005566:	60cb      	str	r3, [r1, #12]
 8005568:	e018      	b.n	800559c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800556a:	4b3d      	ldr	r3, [pc, #244]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a3c      	ldr	r2, [pc, #240]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7fd f845 	bl	8002604 <HAL_GetTick>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800557e:	f7fd f841 	bl	8002604 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e23d      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005590:	4b33      	ldr	r3, [pc, #204]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f0      	bne.n	800557e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d036      	beq.n	8005616 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d019      	beq.n	80055e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b0:	4b2b      	ldr	r3, [pc, #172]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80055b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b4:	4a2a      	ldr	r2, [pc, #168]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fd f822 	bl	8002604 <HAL_GetTick>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c4:	f7fd f81e 	bl	8002604 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e21a      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055d6:	4b22      	ldr	r3, [pc, #136]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80055d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0x45c>
 80055e2:	e018      	b.n	8005616 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e4:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80055e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e8:	4a1d      	ldr	r2, [pc, #116]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f0:	f7fd f808 	bl	8002604 <HAL_GetTick>
 80055f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f8:	f7fd f804 	bl	8002604 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e200      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800560a:	4b15      	ldr	r3, [pc, #84]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 800560c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d039      	beq.n	8005696 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01c      	beq.n	8005664 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800562a:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005634:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005636:	f7fc ffe5 	bl	8002604 <HAL_GetTick>
 800563a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800563e:	f7fc ffe1 	bl	8002604 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e1dd      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <HAL_RCC_OscConfig+0x4f8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x4d6>
 800565c:	e01b      	b.n	8005696 <HAL_RCC_OscConfig+0x52e>
 800565e:	bf00      	nop
 8005660:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005664:	4b9b      	ldr	r3, [pc, #620]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a9a      	ldr	r2, [pc, #616]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800566a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800566e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005670:	f7fc ffc8 	bl	8002604 <HAL_GetTick>
 8005674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005678:	f7fc ffc4 	bl	8002604 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e1c0      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800568a:	4b92      	ldr	r3, [pc, #584]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8081 	beq.w	80057a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056a4:	4b8c      	ldr	r3, [pc, #560]	; (80058d8 <HAL_RCC_OscConfig+0x770>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a8b      	ldr	r2, [pc, #556]	; (80058d8 <HAL_RCC_OscConfig+0x770>)
 80056aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056b0:	f7fc ffa8 	bl	8002604 <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b8:	f7fc ffa4 	bl	8002604 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	; 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1a0      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ca:	4b83      	ldr	r3, [pc, #524]	; (80058d8 <HAL_RCC_OscConfig+0x770>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d106      	bne.n	80056ec <HAL_RCC_OscConfig+0x584>
 80056de:	4b7d      	ldr	r3, [pc, #500]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	4a7c      	ldr	r2, [pc, #496]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ea:	e02d      	b.n	8005748 <HAL_RCC_OscConfig+0x5e0>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10c      	bne.n	800570e <HAL_RCC_OscConfig+0x5a6>
 80056f4:	4b77      	ldr	r3, [pc, #476]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	4a76      	ldr	r2, [pc, #472]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80056fa:	f023 0301 	bic.w	r3, r3, #1
 80056fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005700:	4b74      	ldr	r3, [pc, #464]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005704:	4a73      	ldr	r2, [pc, #460]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005706:	f023 0304 	bic.w	r3, r3, #4
 800570a:	6713      	str	r3, [r2, #112]	; 0x70
 800570c:	e01c      	b.n	8005748 <HAL_RCC_OscConfig+0x5e0>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b05      	cmp	r3, #5
 8005714:	d10c      	bne.n	8005730 <HAL_RCC_OscConfig+0x5c8>
 8005716:	4b6f      	ldr	r3, [pc, #444]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	4a6e      	ldr	r2, [pc, #440]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800571c:	f043 0304 	orr.w	r3, r3, #4
 8005720:	6713      	str	r3, [r2, #112]	; 0x70
 8005722:	4b6c      	ldr	r3, [pc, #432]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	4a6b      	ldr	r2, [pc, #428]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6713      	str	r3, [r2, #112]	; 0x70
 800572e:	e00b      	b.n	8005748 <HAL_RCC_OscConfig+0x5e0>
 8005730:	4b68      	ldr	r3, [pc, #416]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	4a67      	ldr	r2, [pc, #412]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	6713      	str	r3, [r2, #112]	; 0x70
 800573c:	4b65      	ldr	r3, [pc, #404]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	4a64      	ldr	r2, [pc, #400]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005742:	f023 0304 	bic.w	r3, r3, #4
 8005746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d015      	beq.n	800577c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005750:	f7fc ff58 	bl	8002604 <HAL_GetTick>
 8005754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005756:	e00a      	b.n	800576e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005758:	f7fc ff54 	bl	8002604 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	; 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e14e      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800576e:	4b59      	ldr	r3, [pc, #356]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0ee      	beq.n	8005758 <HAL_RCC_OscConfig+0x5f0>
 800577a:	e014      	b.n	80057a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fc ff42 	bl	8002604 <HAL_GetTick>
 8005780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005782:	e00a      	b.n	800579a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005784:	f7fc ff3e 	bl	8002604 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e138      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800579a:	4b4e      	ldr	r3, [pc, #312]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ee      	bne.n	8005784 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 812d 	beq.w	8005a0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80057b0:	4b48      	ldr	r3, [pc, #288]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b8:	2b18      	cmp	r3, #24
 80057ba:	f000 80bd 	beq.w	8005938 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	f040 809e 	bne.w	8005904 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c8:	4b42      	ldr	r3, [pc, #264]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a41      	ldr	r2, [pc, #260]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80057ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d4:	f7fc ff16 	bl	8002604 <HAL_GetTick>
 80057d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fc ff12 	bl	8002604 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e10e      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ee:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057fa:	4b36      	ldr	r3, [pc, #216]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80057fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057fe:	4b37      	ldr	r3, [pc, #220]	; (80058dc <HAL_RCC_OscConfig+0x774>)
 8005800:	4013      	ands	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800580a:	0112      	lsls	r2, r2, #4
 800580c:	430a      	orrs	r2, r1
 800580e:	4931      	ldr	r1, [pc, #196]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005810:	4313      	orrs	r3, r2
 8005812:	628b      	str	r3, [r1, #40]	; 0x28
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	3b01      	subs	r3, #1
 800581a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005822:	3b01      	subs	r3, #1
 8005824:	025b      	lsls	r3, r3, #9
 8005826:	b29b      	uxth	r3, r3
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	3b01      	subs	r3, #1
 8005830:	041b      	lsls	r3, r3, #16
 8005832:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583c:	3b01      	subs	r3, #1
 800583e:	061b      	lsls	r3, r3, #24
 8005840:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005844:	4923      	ldr	r1, [pc, #140]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800584a:	4b22      	ldr	r3, [pc, #136]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	4a21      	ldr	r2, [pc, #132]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005856:	4b1f      	ldr	r3, [pc, #124]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585a:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <HAL_RCC_OscConfig+0x778>)
 800585c:	4013      	ands	r3, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005862:	00d2      	lsls	r2, r2, #3
 8005864:	491b      	ldr	r1, [pc, #108]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005866:	4313      	orrs	r3, r2
 8005868:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800586a:	4b1a      	ldr	r3, [pc, #104]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	f023 020c 	bic.w	r2, r3, #12
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	4917      	ldr	r1, [pc, #92]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005878:	4313      	orrs	r3, r2
 800587a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800587c:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	f023 0202 	bic.w	r2, r3, #2
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005888:	4912      	ldr	r1, [pc, #72]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800588a:	4313      	orrs	r3, r2
 800588c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800588e:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	4a10      	ldr	r2, [pc, #64]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 8005894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800589a:	4b0e      	ldr	r3, [pc, #56]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	4a0d      	ldr	r2, [pc, #52]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80058a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	4a0a      	ldr	r2, [pc, #40]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80058ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80058b2:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	4a07      	ldr	r2, [pc, #28]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a04      	ldr	r2, [pc, #16]	; (80058d4 <HAL_RCC_OscConfig+0x76c>)
 80058c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ca:	f7fc fe9b 	bl	8002604 <HAL_GetTick>
 80058ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058d0:	e011      	b.n	80058f6 <HAL_RCC_OscConfig+0x78e>
 80058d2:	bf00      	nop
 80058d4:	58024400 	.word	0x58024400
 80058d8:	58024800 	.word	0x58024800
 80058dc:	fffffc0c 	.word	0xfffffc0c
 80058e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e4:	f7fc fe8e 	bl	8002604 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e08a      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058f6:	4b47      	ldr	r3, [pc, #284]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0x77c>
 8005902:	e082      	b.n	8005a0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005904:	4b43      	ldr	r3, [pc, #268]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a42      	ldr	r2, [pc, #264]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 800590a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800590e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fc fe78 	bl	8002604 <HAL_GetTick>
 8005914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005918:	f7fc fe74 	bl	8002604 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e070      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800592a:	4b3a      	ldr	r3, [pc, #232]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCC_OscConfig+0x7b0>
 8005936:	e068      	b.n	8005a0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005938:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800593e:	4b35      	ldr	r3, [pc, #212]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b01      	cmp	r3, #1
 800594a:	d031      	beq.n	80059b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f003 0203 	and.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005956:	429a      	cmp	r2, r3
 8005958:	d12a      	bne.n	80059b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d122      	bne.n	80059b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005976:	429a      	cmp	r2, r3
 8005978:	d11a      	bne.n	80059b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	0a5b      	lsrs	r3, r3, #9
 800597e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d111      	bne.n	80059b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	0c1b      	lsrs	r3, r3, #16
 8005990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d108      	bne.n	80059b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	0e1b      	lsrs	r3, r3, #24
 80059a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e02b      	b.n	8005a0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80059b4:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 80059b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b8:	08db      	lsrs	r3, r3, #3
 80059ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d01f      	beq.n	8005a0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 80059cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ce:	4a11      	ldr	r2, [pc, #68]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059d6:	f7fc fe15 	bl	8002604 <HAL_GetTick>
 80059da:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80059dc:	bf00      	nop
 80059de:	f7fc fe11 	bl	8002604 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d0f9      	beq.n	80059de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 80059ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ee:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <HAL_RCC_OscConfig+0x8b0>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059f6:	00d2      	lsls	r2, r2, #3
 80059f8:	4906      	ldr	r1, [pc, #24]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80059fe:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <HAL_RCC_OscConfig+0x8ac>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3730      	adds	r7, #48	; 0x30
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	58024400 	.word	0x58024400
 8005a18:	ffff0007 	.word	0xffff0007

08005a1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e19c      	b.n	8005d6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a30:	4b8a      	ldr	r3, [pc, #552]	; (8005c5c <HAL_RCC_ClockConfig+0x240>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d910      	bls.n	8005a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b87      	ldr	r3, [pc, #540]	; (8005c5c <HAL_RCC_ClockConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f023 020f 	bic.w	r2, r3, #15
 8005a46:	4985      	ldr	r1, [pc, #532]	; (8005c5c <HAL_RCC_ClockConfig+0x240>)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4e:	4b83      	ldr	r3, [pc, #524]	; (8005c5c <HAL_RCC_ClockConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e184      	b.n	8005d6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d010      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	4b7b      	ldr	r3, [pc, #492]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d908      	bls.n	8005a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a7c:	4b78      	ldr	r3, [pc, #480]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	4975      	ldr	r1, [pc, #468]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d010      	beq.n	8005abc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	4b70      	ldr	r3, [pc, #448]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d908      	bls.n	8005abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005aaa:	4b6d      	ldr	r3, [pc, #436]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	496a      	ldr	r1, [pc, #424]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d010      	beq.n	8005aea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699a      	ldr	r2, [r3, #24]
 8005acc:	4b64      	ldr	r3, [pc, #400]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d908      	bls.n	8005aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ad8:	4b61      	ldr	r3, [pc, #388]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	495e      	ldr	r1, [pc, #376]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d010      	beq.n	8005b18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	4b59      	ldr	r3, [pc, #356]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d908      	bls.n	8005b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b06:	4b56      	ldr	r3, [pc, #344]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	4953      	ldr	r1, [pc, #332]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d010      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	4b4d      	ldr	r3, [pc, #308]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d908      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b34:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f023 020f 	bic.w	r2, r3, #15
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4947      	ldr	r1, [pc, #284]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d055      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b52:	4b43      	ldr	r3, [pc, #268]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	4940      	ldr	r1, [pc, #256]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b6c:	4b3c      	ldr	r3, [pc, #240]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d121      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e0f6      	b.n	8005d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b84:	4b36      	ldr	r3, [pc, #216]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d115      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0ea      	b.n	8005d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d107      	bne.n	8005bac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b9c:	4b30      	ldr	r3, [pc, #192]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0de      	b.n	8005d6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bac:	4b2c      	ldr	r3, [pc, #176]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0d6      	b.n	8005d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bbc:	4b28      	ldr	r3, [pc, #160]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f023 0207 	bic.w	r2, r3, #7
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4925      	ldr	r1, [pc, #148]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bce:	f7fc fd19 	bl	8002604 <HAL_GetTick>
 8005bd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd4:	e00a      	b.n	8005bec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd6:	f7fc fd15 	bl	8002604 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e0be      	b.n	8005d6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bec:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d1eb      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d010      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d208      	bcs.n	8005c2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c1a:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f023 020f 	bic.w	r2, r3, #15
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	490e      	ldr	r1, [pc, #56]	; (8005c60 <HAL_RCC_ClockConfig+0x244>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_RCC_ClockConfig+0x240>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d214      	bcs.n	8005c64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <HAL_RCC_ClockConfig+0x240>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 020f 	bic.w	r2, r3, #15
 8005c42:	4906      	ldr	r1, [pc, #24]	; (8005c5c <HAL_RCC_ClockConfig+0x240>)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4a:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <HAL_RCC_ClockConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d005      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e086      	b.n	8005d6a <HAL_RCC_ClockConfig+0x34e>
 8005c5c:	52002000 	.word	0x52002000
 8005c60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d010      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	4b3f      	ldr	r3, [pc, #252]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d208      	bcs.n	8005c92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c80:	4b3c      	ldr	r3, [pc, #240]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	4939      	ldr	r1, [pc, #228]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d010      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	4b34      	ldr	r3, [pc, #208]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d208      	bcs.n	8005cc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cae:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	492e      	ldr	r1, [pc, #184]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d010      	beq.n	8005cee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d208      	bcs.n	8005cee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cdc:	4b25      	ldr	r3, [pc, #148]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	4922      	ldr	r1, [pc, #136]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d010      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d208      	bcs.n	8005d1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d0a:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	4917      	ldr	r1, [pc, #92]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d1c:	f000 f844 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	4912      	ldr	r1, [pc, #72]	; (8005d78 <HAL_RCC_ClockConfig+0x35c>)
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
 8005d38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d3a:	4b0e      	ldr	r3, [pc, #56]	; (8005d74 <HAL_RCC_ClockConfig+0x358>)
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	4a0d      	ldr	r2, [pc, #52]	; (8005d78 <HAL_RCC_ClockConfig+0x35c>)
 8005d44:	5cd3      	ldrb	r3, [r2, r3]
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <HAL_RCC_ClockConfig+0x360>)
 8005d52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d54:	4a0a      	ldr	r2, [pc, #40]	; (8005d80 <HAL_RCC_ClockConfig+0x364>)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <HAL_RCC_ClockConfig+0x368>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fc fc06 	bl	8002570 <HAL_InitTick>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	58024400 	.word	0x58024400
 8005d78:	0800ab38 	.word	0x0800ab38
 8005d7c:	20000018 	.word	0x20000018
 8005d80:	20000014 	.word	0x20000014
 8005d84:	2000001c 	.word	0x2000001c

08005d88 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_RCC_EnableCSS+0x1c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <HAL_RCC_EnableCSS+0x1c>)
 8005d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d96:	6013      	str	r3, [r2, #0]
}
 8005d98:	bf00      	nop
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	58024400 	.word	0x58024400

08005da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b089      	sub	sp, #36	; 0x24
 8005dac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dae:	4bb3      	ldr	r3, [pc, #716]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005db6:	2b18      	cmp	r3, #24
 8005db8:	f200 8155 	bhi.w	8006066 <HAL_RCC_GetSysClockFreq+0x2be>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005e29 	.word	0x08005e29
 8005dc8:	08006067 	.word	0x08006067
 8005dcc:	08006067 	.word	0x08006067
 8005dd0:	08006067 	.word	0x08006067
 8005dd4:	08006067 	.word	0x08006067
 8005dd8:	08006067 	.word	0x08006067
 8005ddc:	08006067 	.word	0x08006067
 8005de0:	08006067 	.word	0x08006067
 8005de4:	08005e4f 	.word	0x08005e4f
 8005de8:	08006067 	.word	0x08006067
 8005dec:	08006067 	.word	0x08006067
 8005df0:	08006067 	.word	0x08006067
 8005df4:	08006067 	.word	0x08006067
 8005df8:	08006067 	.word	0x08006067
 8005dfc:	08006067 	.word	0x08006067
 8005e00:	08006067 	.word	0x08006067
 8005e04:	08005e55 	.word	0x08005e55
 8005e08:	08006067 	.word	0x08006067
 8005e0c:	08006067 	.word	0x08006067
 8005e10:	08006067 	.word	0x08006067
 8005e14:	08006067 	.word	0x08006067
 8005e18:	08006067 	.word	0x08006067
 8005e1c:	08006067 	.word	0x08006067
 8005e20:	08006067 	.word	0x08006067
 8005e24:	08005e5b 	.word	0x08005e5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e28:	4b94      	ldr	r3, [pc, #592]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e34:	4b91      	ldr	r3, [pc, #580]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	08db      	lsrs	r3, r3, #3
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	4a90      	ldr	r2, [pc, #576]	; (8006080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e40:	fa22 f303 	lsr.w	r3, r2, r3
 8005e44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005e46:	e111      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e48:	4b8d      	ldr	r3, [pc, #564]	; (8006080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e4a:	61bb      	str	r3, [r7, #24]
      break;
 8005e4c:	e10e      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005e4e:	4b8d      	ldr	r3, [pc, #564]	; (8006084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e50:	61bb      	str	r3, [r7, #24]
      break;
 8005e52:	e10b      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005e54:	4b8c      	ldr	r3, [pc, #560]	; (8006088 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e56:	61bb      	str	r3, [r7, #24]
      break;
 8005e58:	e108      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e5a:	4b88      	ldr	r3, [pc, #544]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005e64:	4b85      	ldr	r3, [pc, #532]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e70:	4b82      	ldr	r3, [pc, #520]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e7a:	4b80      	ldr	r3, [pc, #512]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	08db      	lsrs	r3, r3, #3
 8005e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80e1 	beq.w	8006060 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	f000 8083 	beq.w	8005fac <HAL_RCC_GetSysClockFreq+0x204>
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	f200 80a1 	bhi.w	8005ff0 <HAL_RCC_GetSysClockFreq+0x248>
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq+0x114>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d056      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005eba:	e099      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ebc:	4b6f      	ldr	r3, [pc, #444]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d02d      	beq.n	8005f24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ec8:	4b6c      	ldr	r3, [pc, #432]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	4a6b      	ldr	r2, [pc, #428]	; (8006080 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef2:	4b62      	ldr	r3, [pc, #392]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f06:	eddf 5a61 	vldr	s11, [pc, #388]	; 800608c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005f22:	e087      	b.n	8006034 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006090 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b51      	ldr	r3, [pc, #324]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800608c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f66:	e065      	b.n	8006034 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b40      	ldr	r3, [pc, #256]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800608c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005faa:	e043      	b.n	8006034 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006098 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b2f      	ldr	r3, [pc, #188]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800608c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005fee:	e021      	b.n	8006034 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006094 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a02 	vldr	s12, [r7, #8]
 8006016:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800608c <HAL_RCC_GetSysClockFreq+0x2e4>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006032:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006034:	4b11      	ldr	r3, [pc, #68]	; (800607c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	0a5b      	lsrs	r3, r3, #9
 800603a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800603e:	3301      	adds	r3, #1
 8006040:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800604c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006058:	ee17 3a90 	vmov	r3, s15
 800605c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800605e:	e005      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	61bb      	str	r3, [r7, #24]
      break;
 8006064:	e002      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006066:	4b07      	ldr	r3, [pc, #28]	; (8006084 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006068:	61bb      	str	r3, [r7, #24]
      break;
 800606a:	bf00      	nop
  }

  return sysclockfreq;
 800606c:	69bb      	ldr	r3, [r7, #24]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3724      	adds	r7, #36	; 0x24
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	03d09000 	.word	0x03d09000
 8006084:	003d0900 	.word	0x003d0900
 8006088:	007f2815 	.word	0x007f2815
 800608c:	46000000 	.word	0x46000000
 8006090:	4c742400 	.word	0x4c742400
 8006094:	4a742400 	.word	0x4a742400
 8006098:	4afe502a 	.word	0x4afe502a

0800609c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060a2:	f7ff fe81 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 80060a6:	4602      	mov	r2, r0
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <HAL_RCC_GetHCLKFreq+0x50>)
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	0a1b      	lsrs	r3, r3, #8
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	490f      	ldr	r1, [pc, #60]	; (80060f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80060b4:	5ccb      	ldrb	r3, [r1, r3]
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	fa22 f303 	lsr.w	r3, r2, r3
 80060be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <HAL_RCC_GetHCLKFreq+0x50>)
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80060ca:	5cd3      	ldrb	r3, [r2, r3]
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	fa22 f303 	lsr.w	r3, r2, r3
 80060d6:	4a07      	ldr	r2, [pc, #28]	; (80060f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80060d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060da:	4a07      	ldr	r2, [pc, #28]	; (80060f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060e0:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80060e2:	681b      	ldr	r3, [r3, #0]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	58024400 	.word	0x58024400
 80060f0:	0800ab38 	.word	0x0800ab38
 80060f4:	20000018 	.word	0x20000018
 80060f8:	20000014 	.word	0x20000014

080060fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006100:	f7ff ffcc 	bl	800609c <HAL_RCC_GetHCLKFreq>
 8006104:	4602      	mov	r2, r0
 8006106:	4b06      	ldr	r3, [pc, #24]	; (8006120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	4904      	ldr	r1, [pc, #16]	; (8006124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006112:	5ccb      	ldrb	r3, [r1, r3]
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800611c:	4618      	mov	r0, r3
 800611e:	bd80      	pop	{r7, pc}
 8006120:	58024400 	.word	0x58024400
 8006124:	0800ab38 	.word	0x0800ab38

08006128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800612c:	f7ff ffb6 	bl	800609c <HAL_RCC_GetHCLKFreq>
 8006130:	4602      	mov	r2, r0
 8006132:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	4904      	ldr	r1, [pc, #16]	; (8006150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800613e:	5ccb      	ldrb	r3, [r1, r3]
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006148:	4618      	mov	r0, r3
 800614a:	bd80      	pop	{r7, pc}
 800614c:	58024400 	.word	0x58024400
 8006150:	0800ab38 	.word	0x0800ab38

08006154 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <HAL_RCC_NMI_IRQHandler+0x24>)
 800615a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d105      	bne.n	8006172 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006166:	f000 f809 	bl	800617c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800616a:	4b03      	ldr	r3, [pc, #12]	; (8006178 <HAL_RCC_NMI_IRQHandler+0x24>)
 800616c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006170:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 8006172:	bf00      	nop
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	58024400 	.word	0x58024400

0800617c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800618c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006190:	b0ca      	sub	sp, #296	; 0x128
 8006192:	af00      	add	r7, sp, #0
 8006194:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006198:	2300      	movs	r3, #0
 800619a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800619e:	2300      	movs	r3, #0
 80061a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80061b0:	2500      	movs	r5, #0
 80061b2:	ea54 0305 	orrs.w	r3, r4, r5
 80061b6:	d049      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c2:	d02f      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80061c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c8:	d828      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ce:	d01a      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d4:	d822      	bhi.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061de:	d007      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061e0:	e01c      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e2:	4bb8      	ldr	r3, [pc, #736]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	4ab7      	ldr	r2, [pc, #732]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80061ee:	e01a      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f4:	3308      	adds	r3, #8
 80061f6:	2102      	movs	r1, #2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 fce5 	bl	8007bc8 <RCCEx_PLL2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006204:	e00f      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800620a:	3328      	adds	r3, #40	; 0x28
 800620c:	2102      	movs	r1, #2
 800620e:	4618      	mov	r0, r3
 8006210:	f001 fd8c 	bl	8007d2c <RCCEx_PLL3_Config>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800621a:	e004      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006222:	e000      	b.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800622e:	4ba5      	ldr	r3, [pc, #660]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006232:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800623a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800623c:	4aa1      	ldr	r2, [pc, #644]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800623e:	430b      	orrs	r3, r1
 8006240:	6513      	str	r3, [r2, #80]	; 0x50
 8006242:	e003      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006258:	f04f 0900 	mov.w	r9, #0
 800625c:	ea58 0309 	orrs.w	r3, r8, r9
 8006260:	d047      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006268:	2b04      	cmp	r3, #4
 800626a:	d82a      	bhi.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006289 	.word	0x08006289
 8006278:	08006297 	.word	0x08006297
 800627c:	080062ad 	.word	0x080062ad
 8006280:	080062cb 	.word	0x080062cb
 8006284:	080062cb 	.word	0x080062cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006288:	4b8e      	ldr	r3, [pc, #568]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	4a8d      	ldr	r2, [pc, #564]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800628e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006294:	e01a      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800629a:	3308      	adds	r3, #8
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fc92 	bl	8007bc8 <RCCEx_PLL2_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062aa:	e00f      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b0:	3328      	adds	r3, #40	; 0x28
 80062b2:	2100      	movs	r1, #0
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 fd39 	bl	8007d2c <RCCEx_PLL3_Config>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062c0:	e004      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062c8:	e000      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80062ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062d4:	4b7b      	ldr	r3, [pc, #492]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d8:	f023 0107 	bic.w	r1, r3, #7
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e2:	4a78      	ldr	r2, [pc, #480]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e4:	430b      	orrs	r3, r1
 80062e6:	6513      	str	r3, [r2, #80]	; 0x50
 80062e8:	e003      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80062f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80062fe:	f04f 0b00 	mov.w	fp, #0
 8006302:	ea5a 030b 	orrs.w	r3, sl, fp
 8006306:	d04c      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006312:	d030      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006318:	d829      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800631a:	2bc0      	cmp	r3, #192	; 0xc0
 800631c:	d02d      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800631e:	2bc0      	cmp	r3, #192	; 0xc0
 8006320:	d825      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d018      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006326:	2b80      	cmp	r3, #128	; 0x80
 8006328:	d821      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d007      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006332:	e01c      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006334:	4b63      	ldr	r3, [pc, #396]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	4a62      	ldr	r2, [pc, #392]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800633a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800633e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006340:	e01c      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006346:	3308      	adds	r3, #8
 8006348:	2100      	movs	r1, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f001 fc3c 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006356:	e011      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635c:	3328      	adds	r3, #40	; 0x28
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f001 fce3 	bl	8007d2c <RCCEx_PLL3_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800636c:	e006      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006374:	e002      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800637a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800637c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006384:	4b4f      	ldr	r3, [pc, #316]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006388:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006392:	4a4c      	ldr	r2, [pc, #304]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006394:	430b      	orrs	r3, r1
 8006396:	6513      	str	r3, [r2, #80]	; 0x50
 8006398:	e003      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800639e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80063ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80063b2:	2300      	movs	r3, #0
 80063b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80063bc:	460b      	mov	r3, r1
 80063be:	4313      	orrs	r3, r2
 80063c0:	d053      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063ce:	d035      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80063d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063d4:	d82e      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80063d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063da:	d031      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80063dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063e0:	d828      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80063e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063e6:	d01a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80063e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ec:	d822      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80063f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063f6:	d007      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80063f8:	e01c      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fa:	4b32      	ldr	r3, [pc, #200]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	4a31      	ldr	r2, [pc, #196]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006406:	e01c      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640c:	3308      	adds	r3, #8
 800640e:	2100      	movs	r1, #0
 8006410:	4618      	mov	r0, r3
 8006412:	f001 fbd9 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800641c:	e011      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006422:	3328      	adds	r3, #40	; 0x28
 8006424:	2100      	movs	r1, #0
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fc80 	bl	8007d2c <RCCEx_PLL3_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006432:	e006      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800643a:	e002      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800643c:	bf00      	nop
 800643e:	e000      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800644a:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800644c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006456:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800645a:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800645c:	430b      	orrs	r3, r1
 800645e:	6593      	str	r3, [r2, #88]	; 0x58
 8006460:	e003      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006476:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800647a:	2300      	movs	r3, #0
 800647c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006480:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006484:	460b      	mov	r3, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	d056      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006496:	d038      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800649c:	d831      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800649e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064a2:	d034      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80064a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064a8:	d82b      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ae:	d01d      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80064b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064b4:	d825      	bhi.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d006      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80064ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064be:	d00a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064c0:	e01f      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80064c2:	bf00      	nop
 80064c4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c8:	4ba2      	ldr	r3, [pc, #648]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	4aa1      	ldr	r2, [pc, #644]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064d4:	e01c      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064da:	3308      	adds	r3, #8
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 fb72 	bl	8007bc8 <RCCEx_PLL2_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80064ea:	e011      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f0:	3328      	adds	r3, #40	; 0x28
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 fc19 	bl	8007d2c <RCCEx_PLL3_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006500:	e006      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006508:	e002      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800650a:	bf00      	nop
 800650c:	e000      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800650e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10b      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006518:	4b8e      	ldr	r3, [pc, #568]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800651a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006528:	4a8a      	ldr	r2, [pc, #552]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800652a:	430b      	orrs	r3, r1
 800652c:	6593      	str	r3, [r2, #88]	; 0x58
 800652e:	e003      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006548:	2300      	movs	r3, #0
 800654a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800654e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006552:	460b      	mov	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	d03a      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655e:	2b30      	cmp	r3, #48	; 0x30
 8006560:	d01f      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006562:	2b30      	cmp	r3, #48	; 0x30
 8006564:	d819      	bhi.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006566:	2b20      	cmp	r3, #32
 8006568:	d00c      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800656a:	2b20      	cmp	r3, #32
 800656c:	d815      	bhi.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d019      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006572:	2b10      	cmp	r3, #16
 8006574:	d111      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006576:	4b77      	ldr	r3, [pc, #476]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	4a76      	ldr	r2, [pc, #472]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800657c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006582:	e011      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006588:	3308      	adds	r3, #8
 800658a:	2102      	movs	r1, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fb1b 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006598:	e006      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065a0:	e002      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80065a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065b0:	4b68      	ldr	r3, [pc, #416]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065be:	4a65      	ldr	r2, [pc, #404]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065c0:	430b      	orrs	r3, r1
 80065c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065c4:	e003      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80065da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065de:	2300      	movs	r3, #0
 80065e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4313      	orrs	r3, r2
 80065ec:	d051      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f8:	d035      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80065fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065fe:	d82e      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006600:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006604:	d031      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006606:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800660a:	d828      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006610:	d01a      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006616:	d822      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800661c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006620:	d007      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006622:	e01c      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006624:	4b4b      	ldr	r3, [pc, #300]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4a4a      	ldr	r2, [pc, #296]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800662a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006630:	e01c      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006636:	3308      	adds	r3, #8
 8006638:	2100      	movs	r1, #0
 800663a:	4618      	mov	r0, r3
 800663c:	f001 fac4 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006646:	e011      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800664c:	3328      	adds	r3, #40	; 0x28
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f001 fb6b 	bl	8007d2c <RCCEx_PLL3_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800665c:	e006      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006664:	e002      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006666:	bf00      	nop
 8006668:	e000      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800666a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006674:	4b37      	ldr	r3, [pc, #220]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006678:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006682:	4a34      	ldr	r2, [pc, #208]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006684:	430b      	orrs	r3, r1
 8006686:	6513      	str	r3, [r2, #80]	; 0x50
 8006688:	e003      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800668e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800669e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066a2:	2300      	movs	r3, #0
 80066a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80066ac:	460b      	mov	r3, r1
 80066ae:	4313      	orrs	r3, r2
 80066b0:	d056      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80066b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066bc:	d033      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80066be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066c2:	d82c      	bhi.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066c8:	d02f      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80066ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066ce:	d826      	bhi.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066d4:	d02b      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80066d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066da:	d820      	bhi.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066e0:	d012      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80066e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066e6:	d81a      	bhi.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d022      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80066ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f0:	d115      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f6:	3308      	adds	r3, #8
 80066f8:	2101      	movs	r1, #1
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 fa64 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006700:	4603      	mov	r3, r0
 8006702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006706:	e015      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800670c:	3328      	adds	r3, #40	; 0x28
 800670e:	2101      	movs	r1, #1
 8006710:	4618      	mov	r0, r3
 8006712:	f001 fb0b 	bl	8007d2c <RCCEx_PLL3_Config>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800671c:	e00a      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006724:	e006      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006726:	bf00      	nop
 8006728:	e004      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800672a:	bf00      	nop
 800672c:	e002      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800672e:	bf00      	nop
 8006730:	e000      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10d      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800673e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006740:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674a:	4a02      	ldr	r2, [pc, #8]	; (8006754 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800674c:	430b      	orrs	r3, r1
 800674e:	6513      	str	r3, [r2, #80]	; 0x50
 8006750:	e006      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006752:	bf00      	nop
 8006754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800675c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800676c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006776:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d055      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800678c:	d033      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800678e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006792:	d82c      	bhi.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d02f      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800679a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679e:	d826      	bhi.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067a4:	d02b      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 80067a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067aa:	d820      	bhi.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b0:	d012      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80067b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b6:	d81a      	bhi.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d022      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80067bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c0:	d115      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c6:	3308      	adds	r3, #8
 80067c8:	2101      	movs	r1, #1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 f9fc 	bl	8007bc8 <RCCEx_PLL2_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067d6:	e015      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067dc:	3328      	adds	r3, #40	; 0x28
 80067de:	2101      	movs	r1, #1
 80067e0:	4618      	mov	r0, r3
 80067e2:	f001 faa3 	bl	8007d2c <RCCEx_PLL3_Config>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067ec:	e00a      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067f6:	bf00      	nop
 80067f8:	e004      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800680c:	4ba3      	ldr	r3, [pc, #652]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800680e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006810:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800681c:	4a9f      	ldr	r2, [pc, #636]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800681e:	430b      	orrs	r3, r1
 8006820:	6593      	str	r3, [r2, #88]	; 0x58
 8006822:	e003      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006824:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006828:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800683c:	2300      	movs	r3, #0
 800683e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006846:	460b      	mov	r3, r1
 8006848:	4313      	orrs	r3, r2
 800684a:	d037      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006856:	d00e      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685c:	d816      	bhi.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800685e:	2b00      	cmp	r3, #0
 8006860:	d018      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006866:	d111      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006868:	4b8c      	ldr	r3, [pc, #560]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a8b      	ldr	r2, [pc, #556]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800686e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006874:	e00f      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687a:	3308      	adds	r3, #8
 800687c:	2101      	movs	r1, #1
 800687e:	4618      	mov	r0, r3
 8006880:	f001 f9a2 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800688a:	e004      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006892:	e000      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800689e:	4b7f      	ldr	r3, [pc, #508]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ac:	4a7b      	ldr	r2, [pc, #492]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ae:	430b      	orrs	r3, r1
 80068b0:	6513      	str	r3, [r2, #80]	; 0x50
 80068b2:	e003      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80068c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068cc:	2300      	movs	r3, #0
 80068ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4313      	orrs	r3, r2
 80068da:	d039      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d81c      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	08006929 	.word	0x08006929
 80068f0:	080068fd 	.word	0x080068fd
 80068f4:	0800690b 	.word	0x0800690b
 80068f8:	08006929 	.word	0x08006929
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fc:	4b67      	ldr	r3, [pc, #412]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	4a66      	ldr	r2, [pc, #408]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006908:	e00f      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690e:	3308      	adds	r3, #8
 8006910:	2102      	movs	r1, #2
 8006912:	4618      	mov	r0, r3
 8006914:	f001 f958 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800691e:	e004      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006926:	e000      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006932:	4b5a      	ldr	r3, [pc, #360]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006936:	f023 0103 	bic.w	r1, r3, #3
 800693a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800693e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006940:	4a56      	ldr	r2, [pc, #344]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006942:	430b      	orrs	r3, r1
 8006944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006946:	e003      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800694c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006958:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800695c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006966:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800696a:	460b      	mov	r3, r1
 800696c:	4313      	orrs	r3, r2
 800696e:	f000 809f 	beq.w	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006972:	4b4b      	ldr	r3, [pc, #300]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a4a      	ldr	r2, [pc, #296]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800697c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800697e:	f7fb fe41 	bl	8002604 <HAL_GetTick>
 8006982:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006986:	e00b      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006988:	f7fb fe3c 	bl	8002604 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b64      	cmp	r3, #100	; 0x64
 8006996:	d903      	bls.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800699e:	e005      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069a0:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0ed      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80069ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d179      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069b4:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069c0:	4053      	eors	r3, r2
 80069c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d015      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069ca:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069d6:	4b31      	ldr	r3, [pc, #196]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069da:	4a30      	ldr	r2, [pc, #192]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069e2:	4b2e      	ldr	r3, [pc, #184]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e6:	4a2d      	ldr	r2, [pc, #180]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069ee:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a02:	d118      	bne.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fb fdfe 	bl	8002604 <HAL_GetTick>
 8006a08:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a0c:	e00d      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a0e:	f7fb fdf9 	bl	8002604 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a18:	1ad2      	subs	r2, r2, r3
 8006a1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d903      	bls.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006a28:	e005      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a2a:	4b1c      	ldr	r3, [pc, #112]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0eb      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d129      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a4e:	d10e      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006a50:	4b12      	ldr	r3, [pc, #72]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a60:	091a      	lsrs	r2, r3, #4
 8006a62:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	4a0d      	ldr	r2, [pc, #52]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	6113      	str	r3, [r2, #16]
 8006a6c:	e005      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a78:	6113      	str	r3, [r2, #16]
 8006a7a:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a7c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a8a:	4a04      	ldr	r2, [pc, #16]	; (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a90:	e00e      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006a9a:	e009      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	58024800 	.word	0x58024800
 8006aa4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f002 0301 	and.w	r3, r2, #1
 8006abc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ac6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4313      	orrs	r3, r2
 8006ace:	f000 8089 	beq.w	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ad8:	2b28      	cmp	r3, #40	; 0x28
 8006ada:	d86b      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006adc:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006bbd 	.word	0x08006bbd
 8006ae8:	08006bb5 	.word	0x08006bb5
 8006aec:	08006bb5 	.word	0x08006bb5
 8006af0:	08006bb5 	.word	0x08006bb5
 8006af4:	08006bb5 	.word	0x08006bb5
 8006af8:	08006bb5 	.word	0x08006bb5
 8006afc:	08006bb5 	.word	0x08006bb5
 8006b00:	08006bb5 	.word	0x08006bb5
 8006b04:	08006b89 	.word	0x08006b89
 8006b08:	08006bb5 	.word	0x08006bb5
 8006b0c:	08006bb5 	.word	0x08006bb5
 8006b10:	08006bb5 	.word	0x08006bb5
 8006b14:	08006bb5 	.word	0x08006bb5
 8006b18:	08006bb5 	.word	0x08006bb5
 8006b1c:	08006bb5 	.word	0x08006bb5
 8006b20:	08006bb5 	.word	0x08006bb5
 8006b24:	08006b9f 	.word	0x08006b9f
 8006b28:	08006bb5 	.word	0x08006bb5
 8006b2c:	08006bb5 	.word	0x08006bb5
 8006b30:	08006bb5 	.word	0x08006bb5
 8006b34:	08006bb5 	.word	0x08006bb5
 8006b38:	08006bb5 	.word	0x08006bb5
 8006b3c:	08006bb5 	.word	0x08006bb5
 8006b40:	08006bb5 	.word	0x08006bb5
 8006b44:	08006bbd 	.word	0x08006bbd
 8006b48:	08006bb5 	.word	0x08006bb5
 8006b4c:	08006bb5 	.word	0x08006bb5
 8006b50:	08006bb5 	.word	0x08006bb5
 8006b54:	08006bb5 	.word	0x08006bb5
 8006b58:	08006bb5 	.word	0x08006bb5
 8006b5c:	08006bb5 	.word	0x08006bb5
 8006b60:	08006bb5 	.word	0x08006bb5
 8006b64:	08006bbd 	.word	0x08006bbd
 8006b68:	08006bb5 	.word	0x08006bb5
 8006b6c:	08006bb5 	.word	0x08006bb5
 8006b70:	08006bb5 	.word	0x08006bb5
 8006b74:	08006bb5 	.word	0x08006bb5
 8006b78:	08006bb5 	.word	0x08006bb5
 8006b7c:	08006bb5 	.word	0x08006bb5
 8006b80:	08006bb5 	.word	0x08006bb5
 8006b84:	08006bbd 	.word	0x08006bbd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	2101      	movs	r1, #1
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 f819 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b9c:	e00f      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba2:	3328      	adds	r3, #40	; 0x28
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 f8c0 	bl	8007d2c <RCCEx_PLL3_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006bb2:	e004      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bba:	e000      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006bc6:	4bbf      	ldr	r3, [pc, #764]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd4:	4abb      	ldr	r2, [pc, #748]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	6553      	str	r3, [r2, #84]	; 0x54
 8006bda:	e003      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006be0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bec:	f002 0302 	and.w	r3, r2, #2
 8006bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bfa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4313      	orrs	r3, r2
 8006c02:	d041      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	d824      	bhi.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006c0e:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c61 	.word	0x08006c61
 8006c18:	08006c2d 	.word	0x08006c2d
 8006c1c:	08006c43 	.word	0x08006c43
 8006c20:	08006c61 	.word	0x08006c61
 8006c24:	08006c61 	.word	0x08006c61
 8006c28:	08006c61 	.word	0x08006c61
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c30:	3308      	adds	r3, #8
 8006c32:	2101      	movs	r1, #1
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 ffc7 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c40:	e00f      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c46:	3328      	adds	r3, #40	; 0x28
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 f86e 	bl	8007d2c <RCCEx_PLL3_Config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c56:	e004      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c5e:	e000      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c6a:	4b96      	ldr	r3, [pc, #600]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6e:	f023 0107 	bic.w	r1, r3, #7
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c78:	4a92      	ldr	r2, [pc, #584]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	6553      	str	r3, [r2, #84]	; 0x54
 8006c7e:	e003      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f002 0304 	and.w	r3, r2, #4
 8006c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d044      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cb0:	2b05      	cmp	r3, #5
 8006cb2:	d825      	bhi.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006d09 	.word	0x08006d09
 8006cc0:	08006cd5 	.word	0x08006cd5
 8006cc4:	08006ceb 	.word	0x08006ceb
 8006cc8:	08006d09 	.word	0x08006d09
 8006ccc:	08006d09 	.word	0x08006d09
 8006cd0:	08006d09 	.word	0x08006d09
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd8:	3308      	adds	r3, #8
 8006cda:	2101      	movs	r1, #1
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 ff73 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ce8:	e00f      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cee:	3328      	adds	r3, #40	; 0x28
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 f81a 	bl	8007d2c <RCCEx_PLL3_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cfe:	e004      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d06:	e000      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d12:	4b6c      	ldr	r3, [pc, #432]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d16:	f023 0107 	bic.w	r1, r3, #7
 8006d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d22:	4a68      	ldr	r2, [pc, #416]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d24:	430b      	orrs	r3, r1
 8006d26:	6593      	str	r3, [r2, #88]	; 0x58
 8006d28:	e003      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	f002 0320 	and.w	r3, r2, #32
 8006d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d42:	2300      	movs	r3, #0
 8006d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	d055      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d5e:	d033      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d64:	d82c      	bhi.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6a:	d02f      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d70:	d826      	bhi.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d76:	d02b      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006d78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d7c:	d820      	bhi.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d82:	d012      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d88:	d81a      	bhi.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d022      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d92:	d115      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d98:	3308      	adds	r3, #8
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 ff13 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006da8:	e015      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dae:	3328      	adds	r3, #40	; 0x28
 8006db0:	2102      	movs	r1, #2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 ffba 	bl	8007d2c <RCCEx_PLL3_Config>
 8006db8:	4603      	mov	r3, r0
 8006dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dc6:	e006      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006dc8:	bf00      	nop
 8006dca:	e004      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006dcc:	bf00      	nop
 8006dce:	e002      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006dd0:	bf00      	nop
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10b      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dde:	4b39      	ldr	r3, [pc, #228]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dee:	4a35      	ldr	r2, [pc, #212]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006df0:	430b      	orrs	r3, r1
 8006df2:	6553      	str	r3, [r2, #84]	; 0x54
 8006df4:	e003      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e14:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	d058      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e2a:	d033      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006e2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e30:	d82c      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e36:	d02f      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3c:	d826      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e42:	d02b      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e48:	d820      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e4e:	d012      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e54:	d81a      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d022      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5e:	d115      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e64:	3308      	adds	r3, #8
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fead 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e74:	e015      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7a:	3328      	adds	r3, #40	; 0x28
 8006e7c:	2102      	movs	r1, #2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 ff54 	bl	8007d2c <RCCEx_PLL3_Config>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e8a:	e00a      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e92:	e006      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e94:	bf00      	nop
 8006e96:	e004      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e98:	bf00      	nop
 8006e9a:	e002      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006e9c:	bf00      	nop
 8006e9e:	e000      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10e      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eba:	4a02      	ldr	r2, [pc, #8]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8006ec0:	e006      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006ec2:	bf00      	nop
 8006ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ee6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006eea:	460b      	mov	r3, r1
 8006eec:	4313      	orrs	r3, r2
 8006eee:	d055      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ef8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006efc:	d033      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006efe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f02:	d82c      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f08:	d02f      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0e:	d826      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f14:	d02b      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006f16:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f1a:	d820      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f20:	d012      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f26:	d81a      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d022      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f30:	d115      	bne.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f36:	3308      	adds	r3, #8
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fe44 	bl	8007bc8 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f46:	e015      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f4c:	3328      	adds	r3, #40	; 0x28
 8006f4e:	2102      	movs	r1, #2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 feeb 	bl	8007d2c <RCCEx_PLL3_Config>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f5c:	e00a      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f64:	e006      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f66:	bf00      	nop
 8006f68:	e004      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f6a:	bf00      	nop
 8006f6c:	e002      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10b      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f7c:	4ba1      	ldr	r3, [pc, #644]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f80:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f8c:	4a9d      	ldr	r2, [pc, #628]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f8e:	430b      	orrs	r3, r1
 8006f90:	6593      	str	r3, [r2, #88]	; 0x58
 8006f92:	e003      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	f002 0308 	and.w	r3, r2, #8
 8006fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fac:	2300      	movs	r3, #0
 8006fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	d01e      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc8:	d10c      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fce:	3328      	adds	r3, #40	; 0x28
 8006fd0:	2102      	movs	r1, #2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 feaa 	bl	8007d2c <RCCEx_PLL3_Config>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fe4:	4b87      	ldr	r3, [pc, #540]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff4:	4a83      	ldr	r2, [pc, #524]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f002 0310 	and.w	r3, r2, #16
 8007006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800700a:	2300      	movs	r3, #0
 800700c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007010:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007014:	460b      	mov	r3, r1
 8007016:	4313      	orrs	r3, r2
 8007018:	d01e      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800701e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007026:	d10c      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800702c:	3328      	adds	r3, #40	; 0x28
 800702e:	2102      	movs	r1, #2
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fe7b 	bl	8007d2c <RCCEx_PLL3_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007042:	4b70      	ldr	r3, [pc, #448]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007046:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800704a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007052:	4a6c      	ldr	r2, [pc, #432]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007054:	430b      	orrs	r3, r1
 8007056:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007068:	2300      	movs	r3, #0
 800706a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800706e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	d03e      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007084:	d022      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800708a:	d81b      	bhi.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007094:	d00b      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007096:	e015      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709c:	3308      	adds	r3, #8
 800709e:	2100      	movs	r1, #0
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fd91 	bl	8007bc8 <RCCEx_PLL2_Config>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070ac:	e00f      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b2:	3328      	adds	r3, #40	; 0x28
 80070b4:	2102      	movs	r1, #2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fe38 	bl	8007d2c <RCCEx_PLL3_Config>
 80070bc:	4603      	mov	r3, r0
 80070be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070c2:	e004      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070ca:	e000      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80070cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070d6:	4b4b      	ldr	r3, [pc, #300]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070e6:	4a47      	ldr	r2, [pc, #284]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6593      	str	r3, [r2, #88]	; 0x58
 80070ec:	e003      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007102:	67bb      	str	r3, [r7, #120]	; 0x78
 8007104:	2300      	movs	r3, #0
 8007106:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007108:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800710c:	460b      	mov	r3, r1
 800710e:	4313      	orrs	r3, r2
 8007110:	d03b      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800711e:	d01f      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007120:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007124:	d818      	bhi.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712a:	d003      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800712c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007130:	d007      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007132:	e011      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007134:	4b33      	ldr	r3, [pc, #204]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a32      	ldr	r2, [pc, #200]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800713a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800713e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007140:	e00f      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007146:	3328      	adds	r3, #40	; 0x28
 8007148:	2101      	movs	r1, #1
 800714a:	4618      	mov	r0, r3
 800714c:	f000 fdee 	bl	8007d2c <RCCEx_PLL3_Config>
 8007150:	4603      	mov	r3, r0
 8007152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007156:	e004      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800715e:	e000      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10b      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800716a:	4b26      	ldr	r3, [pc, #152]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800716c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717a:	4a22      	ldr	r2, [pc, #136]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800717c:	430b      	orrs	r3, r1
 800717e:	6553      	str	r3, [r2, #84]	; 0x54
 8007180:	e003      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007186:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007196:	673b      	str	r3, [r7, #112]	; 0x70
 8007198:	2300      	movs	r3, #0
 800719a:	677b      	str	r3, [r7, #116]	; 0x74
 800719c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80071a0:	460b      	mov	r3, r1
 80071a2:	4313      	orrs	r3, r2
 80071a4:	d034      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80071b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b4:	d007      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80071b6:	e011      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b8:	4b12      	ldr	r3, [pc, #72]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	4a11      	ldr	r2, [pc, #68]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071c4:	e00e      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ca:	3308      	adds	r3, #8
 80071cc:	2102      	movs	r1, #2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fcfa 	bl	8007bc8 <RCCEx_PLL2_Config>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071da:	e003      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10d      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fa:	4a02      	ldr	r2, [pc, #8]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071fc:	430b      	orrs	r3, r1
 80071fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007200:	e006      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007202:	bf00      	nop
 8007204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800720c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800721c:	66bb      	str	r3, [r7, #104]	; 0x68
 800721e:	2300      	movs	r3, #0
 8007220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007222:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007226:	460b      	mov	r3, r1
 8007228:	4313      	orrs	r3, r2
 800722a:	d00c      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007230:	3328      	adds	r3, #40	; 0x28
 8007232:	2102      	movs	r1, #2
 8007234:	4618      	mov	r0, r3
 8007236:	f000 fd79 	bl	8007d2c <RCCEx_PLL3_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007252:	663b      	str	r3, [r7, #96]	; 0x60
 8007254:	2300      	movs	r3, #0
 8007256:	667b      	str	r3, [r7, #100]	; 0x64
 8007258:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800725c:	460b      	mov	r3, r1
 800725e:	4313      	orrs	r3, r2
 8007260:	d038      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800726e:	d018      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007274:	d811      	bhi.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727a:	d014      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800727c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007280:	d80b      	bhi.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d011      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728a:	d106      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800728c:	4bc3      	ldr	r3, [pc, #780]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	4ac2      	ldr	r2, [pc, #776]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007298:	e008      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072a0:	e004      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072a2:	bf00      	nop
 80072a4:	e002      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072a6:	bf00      	nop
 80072a8:	e000      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80072aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072b4:	4bb9      	ldr	r3, [pc, #740]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072c4:	4ab5      	ldr	r2, [pc, #724]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c6:	430b      	orrs	r3, r1
 80072c8:	6553      	str	r3, [r2, #84]	; 0x54
 80072ca:	e003      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80072e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80072e2:	2300      	movs	r3, #0
 80072e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80072ea:	460b      	mov	r3, r1
 80072ec:	4313      	orrs	r3, r2
 80072ee:	d009      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072f0:	4baa      	ldr	r3, [pc, #680]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072fe:	4aa7      	ldr	r2, [pc, #668]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007300:	430b      	orrs	r3, r1
 8007302:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007310:	653b      	str	r3, [r7, #80]	; 0x50
 8007312:	2300      	movs	r3, #0
 8007314:	657b      	str	r3, [r7, #84]	; 0x54
 8007316:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800731a:	460b      	mov	r3, r1
 800731c:	4313      	orrs	r3, r2
 800731e:	d00a      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007320:	4b9e      	ldr	r3, [pc, #632]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007330:	4a9a      	ldr	r2, [pc, #616]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007332:	430b      	orrs	r3, r1
 8007334:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007342:	64bb      	str	r3, [r7, #72]	; 0x48
 8007344:	2300      	movs	r3, #0
 8007346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007348:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800734c:	460b      	mov	r3, r1
 800734e:	4313      	orrs	r3, r2
 8007350:	d009      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007352:	4b92      	ldr	r3, [pc, #584]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007356:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800735a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007360:	4a8e      	ldr	r2, [pc, #568]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007362:	430b      	orrs	r3, r1
 8007364:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007372:	643b      	str	r3, [r7, #64]	; 0x40
 8007374:	2300      	movs	r3, #0
 8007376:	647b      	str	r3, [r7, #68]	; 0x44
 8007378:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d00e      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007382:	4b86      	ldr	r3, [pc, #536]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	4a85      	ldr	r2, [pc, #532]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007388:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800738c:	6113      	str	r3, [r2, #16]
 800738e:	4b83      	ldr	r3, [pc, #524]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007390:	6919      	ldr	r1, [r3, #16]
 8007392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007396:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800739a:	4a80      	ldr	r2, [pc, #512]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800739c:	430b      	orrs	r3, r1
 800739e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80073ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ae:	2300      	movs	r3, #0
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80073b6:	460b      	mov	r3, r1
 80073b8:	4313      	orrs	r3, r2
 80073ba:	d009      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073bc:	4b77      	ldr	r3, [pc, #476]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80073c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ca:	4a74      	ldr	r2, [pc, #464]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073cc:	430b      	orrs	r3, r1
 80073ce:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80073dc:	633b      	str	r3, [r7, #48]	; 0x30
 80073de:	2300      	movs	r3, #0
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
 80073e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80073e6:	460b      	mov	r3, r1
 80073e8:	4313      	orrs	r3, r2
 80073ea:	d00a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073ec:	4b6b      	ldr	r3, [pc, #428]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073fc:	4a67      	ldr	r2, [pc, #412]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80073fe:	430b      	orrs	r3, r1
 8007400:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	2100      	movs	r1, #0
 800740c:	62b9      	str	r1, [r7, #40]	; 0x28
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007414:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007418:	460b      	mov	r3, r1
 800741a:	4313      	orrs	r3, r2
 800741c:	d011      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007422:	3308      	adds	r3, #8
 8007424:	2100      	movs	r1, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fbce 	bl	8007bc8 <RCCEx_PLL2_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800743e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	2100      	movs	r1, #0
 800744c:	6239      	str	r1, [r7, #32]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
 8007454:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007458:	460b      	mov	r3, r1
 800745a:	4313      	orrs	r3, r2
 800745c:	d011      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007462:	3308      	adds	r3, #8
 8007464:	2101      	movs	r1, #1
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fbae 	bl	8007bc8 <RCCEx_PLL2_Config>
 800746c:	4603      	mov	r3, r0
 800746e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800747e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	2100      	movs	r1, #0
 800748c:	61b9      	str	r1, [r7, #24]
 800748e:	f003 0304 	and.w	r3, r3, #4
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007498:	460b      	mov	r3, r1
 800749a:	4313      	orrs	r3, r2
 800749c:	d011      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a2:	3308      	adds	r3, #8
 80074a4:	2102      	movs	r1, #2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fb8e 	bl	8007bc8 <RCCEx_PLL2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80074b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80074c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	2100      	movs	r1, #0
 80074cc:	6139      	str	r1, [r7, #16]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80074d8:	460b      	mov	r3, r1
 80074da:	4313      	orrs	r3, r2
 80074dc:	d011      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e2:	3328      	adds	r3, #40	; 0x28
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fc20 	bl	8007d2c <RCCEx_PLL3_Config>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80074f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	2100      	movs	r1, #0
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007518:	460b      	mov	r3, r1
 800751a:	4313      	orrs	r3, r2
 800751c:	d011      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007522:	3328      	adds	r3, #40	; 0x28
 8007524:	2101      	movs	r1, #1
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fc00 	bl	8007d2c <RCCEx_PLL3_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800753e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	2100      	movs	r1, #0
 800754c:	6039      	str	r1, [r7, #0]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007558:	460b      	mov	r3, r1
 800755a:	4313      	orrs	r3, r2
 800755c:	d011      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007562:	3328      	adds	r3, #40	; 0x28
 8007564:	2102      	movs	r1, #2
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fbe0 	bl	8007d2c <RCCEx_PLL3_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800757e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007582:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	e000      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
}
 8007590:	4618      	mov	r0, r3
 8007592:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007596:	46bd      	mov	sp, r7
 8007598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800759c:	58024400 	.word	0x58024400

080075a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075a4:	f7fe fd7a 	bl	800609c <HAL_RCC_GetHCLKFreq>
 80075a8:	4602      	mov	r2, r0
 80075aa:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	091b      	lsrs	r3, r3, #4
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	4904      	ldr	r1, [pc, #16]	; (80075c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075b6:	5ccb      	ldrb	r3, [r1, r3]
 80075b8:	f003 031f 	and.w	r3, r3, #31
 80075bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	58024400 	.word	0x58024400
 80075c8:	0800ab38 	.word	0x0800ab38

080075cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b089      	sub	sp, #36	; 0x24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075d4:	4ba1      	ldr	r3, [pc, #644]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80075de:	4b9f      	ldr	r3, [pc, #636]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	0b1b      	lsrs	r3, r3, #12
 80075e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075ea:	4b9c      	ldr	r3, [pc, #624]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	091b      	lsrs	r3, r3, #4
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80075f6:	4b99      	ldr	r3, [pc, #612]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fa:	08db      	lsrs	r3, r3, #3
 80075fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	fb02 f303 	mul.w	r3, r2, r3
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 8111 	beq.w	800783c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b02      	cmp	r3, #2
 800761e:	f000 8083 	beq.w	8007728 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	2b02      	cmp	r3, #2
 8007626:	f200 80a1 	bhi.w	800776c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d056      	beq.n	80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007636:	e099      	b.n	800776c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007638:	4b88      	ldr	r3, [pc, #544]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b00      	cmp	r3, #0
 8007642:	d02d      	beq.n	80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007644:	4b85      	ldr	r3, [pc, #532]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	4a84      	ldr	r2, [pc, #528]	; (8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
 8007654:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766e:	4b7b      	ldr	r3, [pc, #492]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007682:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800769e:	e087      	b.n	80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007868 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b6a      	ldr	r3, [pc, #424]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e2:	e065      	b.n	80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800786c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f6:	4b59      	ldr	r3, [pc, #356]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007706:	ed97 6a03 	vldr	s12, [r7, #12]
 800770a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007726:	e043      	b.n	80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773a:	4b48      	ldr	r3, [pc, #288]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774a:	ed97 6a03 	vldr	s12, [r7, #12]
 800774e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800775e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800776a:	e021      	b.n	80077b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007776:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800786c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800777a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777e:	4b37      	ldr	r3, [pc, #220]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007792:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80077b0:	4b2a      	ldr	r3, [pc, #168]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	0a5b      	lsrs	r3, r3, #9
 80077b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d6:	ee17 2a90 	vmov	r2, s15
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80077de:	4b1f      	ldr	r3, [pc, #124]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	0c1b      	lsrs	r3, r3, #16
 80077e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007804:	ee17 2a90 	vmov	r2, s15
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800780c:	4b13      	ldr	r3, [pc, #76]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	0e1b      	lsrs	r3, r3, #24
 8007812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800781e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007826:	edd7 6a07 	vldr	s13, [r7, #28]
 800782a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007832:	ee17 2a90 	vmov	r2, s15
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800783a:	e008      	b.n	800784e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	609a      	str	r2, [r3, #8]
}
 800784e:	bf00      	nop
 8007850:	3724      	adds	r7, #36	; 0x24
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	58024400 	.word	0x58024400
 8007860:	03d09000 	.word	0x03d09000
 8007864:	46000000 	.word	0x46000000
 8007868:	4c742400 	.word	0x4c742400
 800786c:	4a742400 	.word	0x4a742400
 8007870:	4afe502a 	.word	0x4afe502a

08007874 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007874:	b480      	push	{r7}
 8007876:	b089      	sub	sp, #36	; 0x24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800787c:	4ba1      	ldr	r3, [pc, #644]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007886:	4b9f      	ldr	r3, [pc, #636]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	0d1b      	lsrs	r3, r3, #20
 800788c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007890:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007892:	4b9c      	ldr	r3, [pc, #624]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	0a1b      	lsrs	r3, r3, #8
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800789e:	4b99      	ldr	r3, [pc, #612]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	08db      	lsrs	r3, r3, #3
 80078a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 8111 	beq.w	8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	f000 8083 	beq.w	80079d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	f200 80a1 	bhi.w	8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d056      	beq.n	800798c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80078de:	e099      	b.n	8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078e0:	4b88      	ldr	r3, [pc, #544]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d02d      	beq.n	8007948 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078ec:	4b85      	ldr	r3, [pc, #532]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	08db      	lsrs	r3, r3, #3
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	4a84      	ldr	r2, [pc, #528]	; (8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078f8:	fa22 f303 	lsr.w	r3, r2, r3
 80078fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	ee07 3a90 	vmov	s15, r3
 8007904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007916:	4b7b      	ldr	r3, [pc, #492]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007926:	ed97 6a03 	vldr	s12, [r7, #12]
 800792a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800792e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007942:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007946:	e087      	b.n	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007952:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007b10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795a:	4b6a      	ldr	r3, [pc, #424]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796a:	ed97 6a03 	vldr	s12, [r7, #12]
 800796e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800798a:	e065      	b.n	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800799a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799e:	4b59      	ldr	r3, [pc, #356]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ce:	e043      	b.n	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80079de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e2:	4b48      	ldr	r3, [pc, #288]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a12:	e021      	b.n	8007a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a26:	4b37      	ldr	r3, [pc, #220]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007b0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a58:	4b2a      	ldr	r3, [pc, #168]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	0a5b      	lsrs	r3, r3, #9
 8007a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a7e:	ee17 2a90 	vmov	r2, s15
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a86:	4b1f      	ldr	r3, [pc, #124]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	0c1b      	lsrs	r3, r3, #16
 8007a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a90:	ee07 3a90 	vmov	s15, r3
 8007a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aac:	ee17 2a90 	vmov	r2, s15
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007ab4:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	0e1b      	lsrs	r3, r3, #24
 8007aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ada:	ee17 2a90 	vmov	r2, s15
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ae2:	e008      	b.n	8007af6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	609a      	str	r2, [r3, #8]
}
 8007af6:	bf00      	nop
 8007af8:	3724      	adds	r7, #36	; 0x24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	58024400 	.word	0x58024400
 8007b08:	03d09000 	.word	0x03d09000
 8007b0c:	46000000 	.word	0x46000000
 8007b10:	4c742400 	.word	0x4c742400
 8007b14:	4a742400 	.word	0x4a742400
 8007b18:	4afe502a 	.word	0x4afe502a

08007b1c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8007b24:	4b26      	ldr	r3, [pc, #152]	; (8007bc0 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b2a:	4a25      	ldr	r2, [pc, #148]	; (8007bc0 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b2c:	f043 0302 	orr.w	r3, r3, #2
 8007b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8007b34:	4b22      	ldr	r3, [pc, #136]	; (8007bc0 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b3a:	4a21      	ldr	r2, [pc, #132]	; (8007bc0 <HAL_RCCEx_CRSConfig+0xa4>)
 8007b3c:	f023 0302 	bic.w	r3, r3, #2
 8007b40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8007b44:	f7fa fdae 	bl	80026a4 <HAL_GetREVID>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d80b      	bhi.n	8007b6a <HAL_RCCEx_CRSConfig+0x4e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b5a:	d106      	bne.n	8007b6a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e008      	b.n	8007b7c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8007b92:	4a0c      	ldr	r2, [pc, #48]	; (8007bc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	4907      	ldr	r1, [pc, #28]	; (8007bc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8007bac:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a04      	ldr	r2, [pc, #16]	; (8007bc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8007bb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bb6:	6013      	str	r3, [r2, #0]
}
 8007bb8:	bf00      	nop
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	40008400 	.word	0x40008400

08007bc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bd6:	4b53      	ldr	r3, [pc, #332]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d101      	bne.n	8007be6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e099      	b.n	8007d1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007be6:	4b4f      	ldr	r3, [pc, #316]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a4e      	ldr	r2, [pc, #312]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007bec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bf2:	f7fa fd07 	bl	8002604 <HAL_GetTick>
 8007bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bf8:	e008      	b.n	8007c0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bfa:	f7fa fd03 	bl	8002604 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e086      	b.n	8007d1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c0c:	4b45      	ldr	r3, [pc, #276]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1f0      	bne.n	8007bfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c18:	4b42      	ldr	r3, [pc, #264]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	031b      	lsls	r3, r3, #12
 8007c26:	493f      	ldr	r1, [pc, #252]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	3b01      	subs	r3, #1
 8007c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	025b      	lsls	r3, r3, #9
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	041b      	lsls	r3, r3, #16
 8007c4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	061b      	lsls	r3, r3, #24
 8007c58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c5c:	4931      	ldr	r1, [pc, #196]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c62:	4b30      	ldr	r3, [pc, #192]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	492d      	ldr	r1, [pc, #180]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c74:	4b2b      	ldr	r3, [pc, #172]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	f023 0220 	bic.w	r2, r3, #32
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	4928      	ldr	r1, [pc, #160]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c86:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	4a26      	ldr	r2, [pc, #152]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c8c:	f023 0310 	bic.w	r3, r3, #16
 8007c90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c92:	4b24      	ldr	r3, [pc, #144]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c96:	4b24      	ldr	r3, [pc, #144]	; (8007d28 <RCCEx_PLL2_Config+0x160>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	69d2      	ldr	r2, [r2, #28]
 8007c9e:	00d2      	lsls	r2, r2, #3
 8007ca0:	4920      	ldr	r1, [pc, #128]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ca6:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	4a1e      	ldr	r2, [pc, #120]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007cac:	f043 0310 	orr.w	r3, r3, #16
 8007cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d106      	bne.n	8007cc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cb8:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	4a19      	ldr	r2, [pc, #100]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cc4:	e00f      	b.n	8007ce6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d106      	bne.n	8007cda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ccc:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	4a14      	ldr	r2, [pc, #80]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cd8:	e005      	b.n	8007ce6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007cda:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	4a11      	ldr	r2, [pc, #68]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a0e      	ldr	r2, [pc, #56]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf2:	f7fa fc87 	bl	8002604 <HAL_GetTick>
 8007cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cf8:	e008      	b.n	8007d0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cfa:	f7fa fc83 	bl	8002604 <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d901      	bls.n	8007d0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e006      	b.n	8007d1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d0c:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <RCCEx_PLL2_Config+0x15c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0f0      	beq.n	8007cfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	58024400 	.word	0x58024400
 8007d28:	ffff0007 	.word	0xffff0007

08007d2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d3a:	4b53      	ldr	r3, [pc, #332]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d101      	bne.n	8007d4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e099      	b.n	8007e7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d4a:	4b4f      	ldr	r3, [pc, #316]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a4e      	ldr	r2, [pc, #312]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d56:	f7fa fc55 	bl	8002604 <HAL_GetTick>
 8007d5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d5c:	e008      	b.n	8007d70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d5e:	f7fa fc51 	bl	8002604 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e086      	b.n	8007e7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d70:	4b45      	ldr	r3, [pc, #276]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f0      	bne.n	8007d5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d7c:	4b42      	ldr	r3, [pc, #264]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	051b      	lsls	r3, r3, #20
 8007d8a:	493f      	ldr	r1, [pc, #252]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	628b      	str	r3, [r1, #40]	; 0x28
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	025b      	lsls	r3, r3, #9
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	041b      	lsls	r3, r3, #16
 8007dae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	061b      	lsls	r3, r3, #24
 8007dbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007dc0:	4931      	ldr	r1, [pc, #196]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007dc6:	4b30      	ldr	r3, [pc, #192]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	492d      	ldr	r1, [pc, #180]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007dd8:	4b2b      	ldr	r3, [pc, #172]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	4928      	ldr	r1, [pc, #160]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007dea:	4b27      	ldr	r3, [pc, #156]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	4a26      	ldr	r2, [pc, #152]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007df4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007df6:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dfa:	4b24      	ldr	r3, [pc, #144]	; (8007e8c <RCCEx_PLL3_Config+0x160>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	69d2      	ldr	r2, [r2, #28]
 8007e02:	00d2      	lsls	r2, r2, #3
 8007e04:	4920      	ldr	r1, [pc, #128]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e0a:	4b1f      	ldr	r3, [pc, #124]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	4a1e      	ldr	r2, [pc, #120]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d106      	bne.n	8007e2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e1c:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	4a19      	ldr	r2, [pc, #100]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e28:	e00f      	b.n	8007e4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d106      	bne.n	8007e3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e30:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	4a14      	ldr	r2, [pc, #80]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e3c:	e005      	b.n	8007e4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e3e:	4b12      	ldr	r3, [pc, #72]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	4a11      	ldr	r2, [pc, #68]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a0e      	ldr	r2, [pc, #56]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e56:	f7fa fbd5 	bl	8002604 <HAL_GetTick>
 8007e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e5c:	e008      	b.n	8007e70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e5e:	f7fa fbd1 	bl	8002604 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e006      	b.n	8007e7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <RCCEx_PLL3_Config+0x15c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0f0      	beq.n	8007e5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	58024400 	.word	0x58024400
 8007e8c:	ffff0007 	.word	0xffff0007

08007e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e049      	b.n	8007f36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fa f8c8 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	f000 f92e 	bl	8008130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e0dc      	b.n	8008116 <HAL_TIM_ConfigClockSource+0x1d6>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	4b6a      	ldr	r3, [pc, #424]	; (8008120 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a64      	ldr	r2, [pc, #400]	; (8008124 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	f000 80a9 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1aa>
 8007f98:	4a62      	ldr	r2, [pc, #392]	; (8008124 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	f200 80ae 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8007fa0:	4a61      	ldr	r2, [pc, #388]	; (8008128 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	f000 80a1 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1aa>
 8007fa8:	4a5f      	ldr	r2, [pc, #380]	; (8008128 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	f200 80a6 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8007fb0:	4a5e      	ldr	r2, [pc, #376]	; (800812c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	f000 8099 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1aa>
 8007fb8:	4a5c      	ldr	r2, [pc, #368]	; (800812c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	f200 809e 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8007fc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007fc4:	f000 8091 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1aa>
 8007fc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007fcc:	f200 8096 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8007fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd4:	f000 8089 	beq.w	80080ea <HAL_TIM_ConfigClockSource+0x1aa>
 8007fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fdc:	f200 808e 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8007fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe4:	d03e      	beq.n	8008064 <HAL_TIM_ConfigClockSource+0x124>
 8007fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fea:	f200 8087 	bhi.w	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff2:	f000 8086 	beq.w	8008102 <HAL_TIM_ConfigClockSource+0x1c2>
 8007ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ffa:	d87f      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8007ffc:	2b70      	cmp	r3, #112	; 0x70
 8007ffe:	d01a      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0xf6>
 8008000:	2b70      	cmp	r3, #112	; 0x70
 8008002:	d87b      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8008004:	2b60      	cmp	r3, #96	; 0x60
 8008006:	d050      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x16a>
 8008008:	2b60      	cmp	r3, #96	; 0x60
 800800a:	d877      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 800800c:	2b50      	cmp	r3, #80	; 0x50
 800800e:	d03c      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x14a>
 8008010:	2b50      	cmp	r3, #80	; 0x50
 8008012:	d873      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d058      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x18a>
 8008018:	2b40      	cmp	r3, #64	; 0x40
 800801a:	d86f      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	d064      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x1aa>
 8008020:	2b30      	cmp	r3, #48	; 0x30
 8008022:	d86b      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 8008024:	2b20      	cmp	r3, #32
 8008026:	d060      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x1aa>
 8008028:	2b20      	cmp	r3, #32
 800802a:	d867      	bhi.n	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d05c      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x1aa>
 8008030:	2b10      	cmp	r3, #16
 8008032:	d05a      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x1aa>
 8008034:	e062      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	6899      	ldr	r1, [r3, #8]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f000 f98b 	bl	8008360 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	609a      	str	r2, [r3, #8]
      break;
 8008062:	e04f      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6899      	ldr	r1, [r3, #8]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f000 f974 	bl	8008360 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008086:	609a      	str	r2, [r3, #8]
      break;
 8008088:	e03c      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	6859      	ldr	r1, [r3, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	461a      	mov	r2, r3
 8008098:	f000 f8e4 	bl	8008264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2150      	movs	r1, #80	; 0x50
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f93e 	bl	8008324 <TIM_ITRx_SetConfig>
      break;
 80080a8:	e02c      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6859      	ldr	r1, [r3, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f000 f903 	bl	80082c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2160      	movs	r1, #96	; 0x60
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f92e 	bl	8008324 <TIM_ITRx_SetConfig>
      break;
 80080c8:	e01c      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6859      	ldr	r1, [r3, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f000 f8c4 	bl	8008264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2140      	movs	r1, #64	; 0x40
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 f91e 	bl	8008324 <TIM_ITRx_SetConfig>
      break;
 80080e8:	e00c      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f000 f915 	bl	8008324 <TIM_ITRx_SetConfig>
      break;
 80080fa:	e003      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008100:	e000      	b.n	8008104 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	ffceff88 	.word	0xffceff88
 8008124:	00100040 	.word	0x00100040
 8008128:	00100030 	.word	0x00100030
 800812c:	00100020 	.word	0x00100020

08008130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a40      	ldr	r2, [pc, #256]	; (8008244 <TIM_Base_SetConfig+0x114>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d013      	beq.n	8008170 <TIM_Base_SetConfig+0x40>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814e:	d00f      	beq.n	8008170 <TIM_Base_SetConfig+0x40>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a3d      	ldr	r2, [pc, #244]	; (8008248 <TIM_Base_SetConfig+0x118>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d00b      	beq.n	8008170 <TIM_Base_SetConfig+0x40>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a3c      	ldr	r2, [pc, #240]	; (800824c <TIM_Base_SetConfig+0x11c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d007      	beq.n	8008170 <TIM_Base_SetConfig+0x40>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a3b      	ldr	r2, [pc, #236]	; (8008250 <TIM_Base_SetConfig+0x120>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d003      	beq.n	8008170 <TIM_Base_SetConfig+0x40>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a3a      	ldr	r2, [pc, #232]	; (8008254 <TIM_Base_SetConfig+0x124>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d108      	bne.n	8008182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a2f      	ldr	r2, [pc, #188]	; (8008244 <TIM_Base_SetConfig+0x114>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d01f      	beq.n	80081ca <TIM_Base_SetConfig+0x9a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008190:	d01b      	beq.n	80081ca <TIM_Base_SetConfig+0x9a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a2c      	ldr	r2, [pc, #176]	; (8008248 <TIM_Base_SetConfig+0x118>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d017      	beq.n	80081ca <TIM_Base_SetConfig+0x9a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a2b      	ldr	r2, [pc, #172]	; (800824c <TIM_Base_SetConfig+0x11c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d013      	beq.n	80081ca <TIM_Base_SetConfig+0x9a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a2a      	ldr	r2, [pc, #168]	; (8008250 <TIM_Base_SetConfig+0x120>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00f      	beq.n	80081ca <TIM_Base_SetConfig+0x9a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a29      	ldr	r2, [pc, #164]	; (8008254 <TIM_Base_SetConfig+0x124>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00b      	beq.n	80081ca <TIM_Base_SetConfig+0x9a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a28      	ldr	r2, [pc, #160]	; (8008258 <TIM_Base_SetConfig+0x128>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d007      	beq.n	80081ca <TIM_Base_SetConfig+0x9a>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a27      	ldr	r2, [pc, #156]	; (800825c <TIM_Base_SetConfig+0x12c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d003      	beq.n	80081ca <TIM_Base_SetConfig+0x9a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a26      	ldr	r2, [pc, #152]	; (8008260 <TIM_Base_SetConfig+0x130>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d108      	bne.n	80081dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a10      	ldr	r2, [pc, #64]	; (8008244 <TIM_Base_SetConfig+0x114>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00f      	beq.n	8008228 <TIM_Base_SetConfig+0xf8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a12      	ldr	r2, [pc, #72]	; (8008254 <TIM_Base_SetConfig+0x124>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00b      	beq.n	8008228 <TIM_Base_SetConfig+0xf8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a11      	ldr	r2, [pc, #68]	; (8008258 <TIM_Base_SetConfig+0x128>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d007      	beq.n	8008228 <TIM_Base_SetConfig+0xf8>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a10      	ldr	r2, [pc, #64]	; (800825c <TIM_Base_SetConfig+0x12c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_Base_SetConfig+0xf8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a0f      	ldr	r2, [pc, #60]	; (8008260 <TIM_Base_SetConfig+0x130>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d103      	bne.n	8008230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	615a      	str	r2, [r3, #20]
}
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	40010000 	.word	0x40010000
 8008248:	40000400 	.word	0x40000400
 800824c:	40000800 	.word	0x40000800
 8008250:	40000c00 	.word	0x40000c00
 8008254:	40010400 	.word	0x40010400
 8008258:	40014000 	.word	0x40014000
 800825c:	40014400 	.word	0x40014400
 8008260:	40014800 	.word	0x40014800

08008264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	f023 0201 	bic.w	r2, r3, #1
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800828e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f023 030a 	bic.w	r3, r3, #10
 80082a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b087      	sub	sp, #28
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f023 0210 	bic.w	r2, r3, #16
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80082ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	031b      	lsls	r3, r3, #12
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	621a      	str	r2, [r3, #32]
}
 8008316:	bf00      	nop
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4b09      	ldr	r3, [pc, #36]	; (800835c <TIM_ITRx_SetConfig+0x38>)
 8008338:	4013      	ands	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4313      	orrs	r3, r2
 8008342:	f043 0307 	orr.w	r3, r3, #7
 8008346:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	609a      	str	r2, [r3, #8]
}
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	ffcfff8f 	.word	0xffcfff8f

08008360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800837a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	021a      	lsls	r2, r3, #8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	431a      	orrs	r2, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4313      	orrs	r3, r2
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	4313      	orrs	r3, r2
 800838c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	609a      	str	r2, [r3, #8]
}
 8008394:	bf00      	nop
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d101      	bne.n	80083b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083b4:	2302      	movs	r3, #2
 80083b6:	e06d      	b.n	8008494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a30      	ldr	r2, [pc, #192]	; (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d004      	beq.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a2f      	ldr	r2, [pc, #188]	; (80084a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d108      	bne.n	80083fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008404:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a20      	ldr	r2, [pc, #128]	; (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d022      	beq.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842a:	d01d      	beq.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a1d      	ldr	r2, [pc, #116]	; (80084a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d018      	beq.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a1c      	ldr	r2, [pc, #112]	; (80084ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d013      	beq.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a1a      	ldr	r2, [pc, #104]	; (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00e      	beq.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d009      	beq.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a16      	ldr	r2, [pc, #88]	; (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d004      	beq.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a15      	ldr	r2, [pc, #84]	; (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d10c      	bne.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800846e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	4313      	orrs	r3, r2
 8008478:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	40010000 	.word	0x40010000
 80084a4:	40010400 	.word	0x40010400
 80084a8:	40000400 	.word	0x40000400
 80084ac:	40000800 	.word	0x40000800
 80084b0:	40000c00 	.word	0x40000c00
 80084b4:	40001800 	.word	0x40001800
 80084b8:	40014000 	.word	0x40014000

080084bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e042      	b.n	8008554 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d106      	bne.n	80084e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7f9 fded 	bl	80020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2224      	movs	r2, #36	; 0x24
 80084ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0201 	bic.w	r2, r2, #1
 80084fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f8ba 	bl	8008678 <UART_SetConfig>
 8008504:	4603      	mov	r3, r0
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e022      	b.n	8008554 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fe16 	bl	8009148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800852a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800853a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0201 	orr.w	r2, r2, #1
 800854a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fe9d 	bl	800928c <UART_CheckIdleState>
 8008552:	4603      	mov	r3, r0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08a      	sub	sp, #40	; 0x28
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	603b      	str	r3, [r7, #0]
 8008568:	4613      	mov	r3, r2
 800856a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008572:	2b20      	cmp	r3, #32
 8008574:	d17b      	bne.n	800866e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <HAL_UART_Transmit+0x26>
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e074      	b.n	8008670 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2221      	movs	r2, #33	; 0x21
 8008592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008596:	f7fa f835 	bl	8002604 <HAL_GetTick>
 800859a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	88fa      	ldrh	r2, [r7, #6]
 80085a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	88fa      	ldrh	r2, [r7, #6]
 80085a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b4:	d108      	bne.n	80085c8 <HAL_UART_Transmit+0x6c>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d104      	bne.n	80085c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	61bb      	str	r3, [r7, #24]
 80085c6:	e003      	b.n	80085d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085d0:	e030      	b.n	8008634 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2200      	movs	r2, #0
 80085da:	2180      	movs	r1, #128	; 0x80
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 feff 	bl	80093e0 <UART_WaitOnFlagUntilTimeout>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d005      	beq.n	80085f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e03d      	b.n	8008670 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10b      	bne.n	8008612 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008608:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	3302      	adds	r3, #2
 800860e:	61bb      	str	r3, [r7, #24]
 8008610:	e007      	b.n	8008622 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	781a      	ldrb	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	3301      	adds	r3, #1
 8008620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008628:	b29b      	uxth	r3, r3
 800862a:	3b01      	subs	r3, #1
 800862c:	b29a      	uxth	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1c8      	bne.n	80085d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2200      	movs	r2, #0
 8008648:	2140      	movs	r1, #64	; 0x40
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fec8 	bl	80093e0 <UART_WaitOnFlagUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e006      	b.n	8008670 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2220      	movs	r2, #32
 8008666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	e000      	b.n	8008670 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800866e:	2302      	movs	r3, #2
  }
}
 8008670:	4618      	mov	r0, r3
 8008672:	3720      	adds	r7, #32
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800867c:	b092      	sub	sp, #72	; 0x48
 800867e:	af00      	add	r7, sp, #0
 8008680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	431a      	orrs	r2, r3
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	431a      	orrs	r2, r3
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	4313      	orrs	r3, r2
 800869e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4bbe      	ldr	r3, [pc, #760]	; (80089a0 <UART_SetConfig+0x328>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086b0:	430b      	orrs	r3, r1
 80086b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4ab3      	ldr	r2, [pc, #716]	; (80089a4 <UART_SetConfig+0x32c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d004      	beq.n	80086e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086e0:	4313      	orrs	r3, r2
 80086e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689a      	ldr	r2, [r3, #8]
 80086ea:	4baf      	ldr	r3, [pc, #700]	; (80089a8 <UART_SetConfig+0x330>)
 80086ec:	4013      	ands	r3, r2
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	f023 010f 	bic.w	r1, r3, #15
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4aa6      	ldr	r2, [pc, #664]	; (80089ac <UART_SetConfig+0x334>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d177      	bne.n	8008808 <UART_SetConfig+0x190>
 8008718:	4ba5      	ldr	r3, [pc, #660]	; (80089b0 <UART_SetConfig+0x338>)
 800871a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800871c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008720:	2b28      	cmp	r3, #40	; 0x28
 8008722:	d86d      	bhi.n	8008800 <UART_SetConfig+0x188>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <UART_SetConfig+0xb4>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	080087d1 	.word	0x080087d1
 8008730:	08008801 	.word	0x08008801
 8008734:	08008801 	.word	0x08008801
 8008738:	08008801 	.word	0x08008801
 800873c:	08008801 	.word	0x08008801
 8008740:	08008801 	.word	0x08008801
 8008744:	08008801 	.word	0x08008801
 8008748:	08008801 	.word	0x08008801
 800874c:	080087d9 	.word	0x080087d9
 8008750:	08008801 	.word	0x08008801
 8008754:	08008801 	.word	0x08008801
 8008758:	08008801 	.word	0x08008801
 800875c:	08008801 	.word	0x08008801
 8008760:	08008801 	.word	0x08008801
 8008764:	08008801 	.word	0x08008801
 8008768:	08008801 	.word	0x08008801
 800876c:	080087e1 	.word	0x080087e1
 8008770:	08008801 	.word	0x08008801
 8008774:	08008801 	.word	0x08008801
 8008778:	08008801 	.word	0x08008801
 800877c:	08008801 	.word	0x08008801
 8008780:	08008801 	.word	0x08008801
 8008784:	08008801 	.word	0x08008801
 8008788:	08008801 	.word	0x08008801
 800878c:	080087e9 	.word	0x080087e9
 8008790:	08008801 	.word	0x08008801
 8008794:	08008801 	.word	0x08008801
 8008798:	08008801 	.word	0x08008801
 800879c:	08008801 	.word	0x08008801
 80087a0:	08008801 	.word	0x08008801
 80087a4:	08008801 	.word	0x08008801
 80087a8:	08008801 	.word	0x08008801
 80087ac:	080087f1 	.word	0x080087f1
 80087b0:	08008801 	.word	0x08008801
 80087b4:	08008801 	.word	0x08008801
 80087b8:	08008801 	.word	0x08008801
 80087bc:	08008801 	.word	0x08008801
 80087c0:	08008801 	.word	0x08008801
 80087c4:	08008801 	.word	0x08008801
 80087c8:	08008801 	.word	0x08008801
 80087cc:	080087f9 	.word	0x080087f9
 80087d0:	2301      	movs	r3, #1
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d6:	e222      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80087d8:	2304      	movs	r3, #4
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087de:	e21e      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80087e0:	2308      	movs	r3, #8
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e6:	e21a      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ee:	e216      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80087f0:	2320      	movs	r3, #32
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e212      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80087f8:	2340      	movs	r3, #64	; 0x40
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fe:	e20e      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008800:	2380      	movs	r3, #128	; 0x80
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008806:	e20a      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a69      	ldr	r2, [pc, #420]	; (80089b4 <UART_SetConfig+0x33c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d130      	bne.n	8008874 <UART_SetConfig+0x1fc>
 8008812:	4b67      	ldr	r3, [pc, #412]	; (80089b0 <UART_SetConfig+0x338>)
 8008814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b05      	cmp	r3, #5
 800881c:	d826      	bhi.n	800886c <UART_SetConfig+0x1f4>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0x1ac>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	0800883d 	.word	0x0800883d
 8008828:	08008845 	.word	0x08008845
 800882c:	0800884d 	.word	0x0800884d
 8008830:	08008855 	.word	0x08008855
 8008834:	0800885d 	.word	0x0800885d
 8008838:	08008865 	.word	0x08008865
 800883c:	2300      	movs	r3, #0
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008842:	e1ec      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008844:	2304      	movs	r3, #4
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884a:	e1e8      	b.n	8008c1e <UART_SetConfig+0x5a6>
 800884c:	2308      	movs	r3, #8
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008852:	e1e4      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008854:	2310      	movs	r3, #16
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885a:	e1e0      	b.n	8008c1e <UART_SetConfig+0x5a6>
 800885c:	2320      	movs	r3, #32
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008862:	e1dc      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886a:	e1d8      	b.n	8008c1e <UART_SetConfig+0x5a6>
 800886c:	2380      	movs	r3, #128	; 0x80
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008872:	e1d4      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a4f      	ldr	r2, [pc, #316]	; (80089b8 <UART_SetConfig+0x340>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d130      	bne.n	80088e0 <UART_SetConfig+0x268>
 800887e:	4b4c      	ldr	r3, [pc, #304]	; (80089b0 <UART_SetConfig+0x338>)
 8008880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	2b05      	cmp	r3, #5
 8008888:	d826      	bhi.n	80088d8 <UART_SetConfig+0x260>
 800888a:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <UART_SetConfig+0x218>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	080088a9 	.word	0x080088a9
 8008894:	080088b1 	.word	0x080088b1
 8008898:	080088b9 	.word	0x080088b9
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088c9 	.word	0x080088c9
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	2300      	movs	r3, #0
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ae:	e1b6      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80088b0:	2304      	movs	r3, #4
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b6:	e1b2      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80088b8:	2308      	movs	r3, #8
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088be:	e1ae      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80088c0:	2310      	movs	r3, #16
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c6:	e1aa      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80088c8:	2320      	movs	r3, #32
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e1a6      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80088d0:	2340      	movs	r3, #64	; 0x40
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e1a2      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088de:	e19e      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a35      	ldr	r2, [pc, #212]	; (80089bc <UART_SetConfig+0x344>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d130      	bne.n	800894c <UART_SetConfig+0x2d4>
 80088ea:	4b31      	ldr	r3, [pc, #196]	; (80089b0 <UART_SetConfig+0x338>)
 80088ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d826      	bhi.n	8008944 <UART_SetConfig+0x2cc>
 80088f6:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <UART_SetConfig+0x284>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008915 	.word	0x08008915
 8008900:	0800891d 	.word	0x0800891d
 8008904:	08008925 	.word	0x08008925
 8008908:	0800892d 	.word	0x0800892d
 800890c:	08008935 	.word	0x08008935
 8008910:	0800893d 	.word	0x0800893d
 8008914:	2300      	movs	r3, #0
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e180      	b.n	8008c1e <UART_SetConfig+0x5a6>
 800891c:	2304      	movs	r3, #4
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e17c      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008924:	2308      	movs	r3, #8
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892a:	e178      	b.n	8008c1e <UART_SetConfig+0x5a6>
 800892c:	2310      	movs	r3, #16
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008932:	e174      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008934:	2320      	movs	r3, #32
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893a:	e170      	b.n	8008c1e <UART_SetConfig+0x5a6>
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008942:	e16c      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008944:	2380      	movs	r3, #128	; 0x80
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894a:	e168      	b.n	8008c1e <UART_SetConfig+0x5a6>
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a1b      	ldr	r2, [pc, #108]	; (80089c0 <UART_SetConfig+0x348>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d142      	bne.n	80089dc <UART_SetConfig+0x364>
 8008956:	4b16      	ldr	r3, [pc, #88]	; (80089b0 <UART_SetConfig+0x338>)
 8008958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	2b05      	cmp	r3, #5
 8008960:	d838      	bhi.n	80089d4 <UART_SetConfig+0x35c>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <UART_SetConfig+0x2f0>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008981 	.word	0x08008981
 800896c:	08008989 	.word	0x08008989
 8008970:	08008991 	.word	0x08008991
 8008974:	08008999 	.word	0x08008999
 8008978:	080089c5 	.word	0x080089c5
 800897c:	080089cd 	.word	0x080089cd
 8008980:	2300      	movs	r3, #0
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e14a      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008988:	2304      	movs	r3, #4
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e146      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008990:	2308      	movs	r3, #8
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e142      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008998:	2310      	movs	r3, #16
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899e:	e13e      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80089a0:	cfff69f3 	.word	0xcfff69f3
 80089a4:	58000c00 	.word	0x58000c00
 80089a8:	11fff4ff 	.word	0x11fff4ff
 80089ac:	40011000 	.word	0x40011000
 80089b0:	58024400 	.word	0x58024400
 80089b4:	40004400 	.word	0x40004400
 80089b8:	40004800 	.word	0x40004800
 80089bc:	40004c00 	.word	0x40004c00
 80089c0:	40005000 	.word	0x40005000
 80089c4:	2320      	movs	r3, #32
 80089c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ca:	e128      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80089cc:	2340      	movs	r3, #64	; 0x40
 80089ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d2:	e124      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80089d4:	2380      	movs	r3, #128	; 0x80
 80089d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089da:	e120      	b.n	8008c1e <UART_SetConfig+0x5a6>
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4acb      	ldr	r2, [pc, #812]	; (8008d10 <UART_SetConfig+0x698>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d176      	bne.n	8008ad4 <UART_SetConfig+0x45c>
 80089e6:	4bcb      	ldr	r3, [pc, #812]	; (8008d14 <UART_SetConfig+0x69c>)
 80089e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089ee:	2b28      	cmp	r3, #40	; 0x28
 80089f0:	d86c      	bhi.n	8008acc <UART_SetConfig+0x454>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0x380>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a9d 	.word	0x08008a9d
 80089fc:	08008acd 	.word	0x08008acd
 8008a00:	08008acd 	.word	0x08008acd
 8008a04:	08008acd 	.word	0x08008acd
 8008a08:	08008acd 	.word	0x08008acd
 8008a0c:	08008acd 	.word	0x08008acd
 8008a10:	08008acd 	.word	0x08008acd
 8008a14:	08008acd 	.word	0x08008acd
 8008a18:	08008aa5 	.word	0x08008aa5
 8008a1c:	08008acd 	.word	0x08008acd
 8008a20:	08008acd 	.word	0x08008acd
 8008a24:	08008acd 	.word	0x08008acd
 8008a28:	08008acd 	.word	0x08008acd
 8008a2c:	08008acd 	.word	0x08008acd
 8008a30:	08008acd 	.word	0x08008acd
 8008a34:	08008acd 	.word	0x08008acd
 8008a38:	08008aad 	.word	0x08008aad
 8008a3c:	08008acd 	.word	0x08008acd
 8008a40:	08008acd 	.word	0x08008acd
 8008a44:	08008acd 	.word	0x08008acd
 8008a48:	08008acd 	.word	0x08008acd
 8008a4c:	08008acd 	.word	0x08008acd
 8008a50:	08008acd 	.word	0x08008acd
 8008a54:	08008acd 	.word	0x08008acd
 8008a58:	08008ab5 	.word	0x08008ab5
 8008a5c:	08008acd 	.word	0x08008acd
 8008a60:	08008acd 	.word	0x08008acd
 8008a64:	08008acd 	.word	0x08008acd
 8008a68:	08008acd 	.word	0x08008acd
 8008a6c:	08008acd 	.word	0x08008acd
 8008a70:	08008acd 	.word	0x08008acd
 8008a74:	08008acd 	.word	0x08008acd
 8008a78:	08008abd 	.word	0x08008abd
 8008a7c:	08008acd 	.word	0x08008acd
 8008a80:	08008acd 	.word	0x08008acd
 8008a84:	08008acd 	.word	0x08008acd
 8008a88:	08008acd 	.word	0x08008acd
 8008a8c:	08008acd 	.word	0x08008acd
 8008a90:	08008acd 	.word	0x08008acd
 8008a94:	08008acd 	.word	0x08008acd
 8008a98:	08008ac5 	.word	0x08008ac5
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa2:	e0bc      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aaa:	e0b8      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008aac:	2308      	movs	r3, #8
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab2:	e0b4      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aba:	e0b0      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008abc:	2320      	movs	r3, #32
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac2:	e0ac      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008ac4:	2340      	movs	r3, #64	; 0x40
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aca:	e0a8      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008acc:	2380      	movs	r3, #128	; 0x80
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad2:	e0a4      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a8f      	ldr	r2, [pc, #572]	; (8008d18 <UART_SetConfig+0x6a0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d130      	bne.n	8008b40 <UART_SetConfig+0x4c8>
 8008ade:	4b8d      	ldr	r3, [pc, #564]	; (8008d14 <UART_SetConfig+0x69c>)
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b05      	cmp	r3, #5
 8008ae8:	d826      	bhi.n	8008b38 <UART_SetConfig+0x4c0>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <UART_SetConfig+0x478>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b09 	.word	0x08008b09
 8008af4:	08008b11 	.word	0x08008b11
 8008af8:	08008b19 	.word	0x08008b19
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b29 	.word	0x08008b29
 8008b04:	08008b31 	.word	0x08008b31
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0e:	e086      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b10:	2304      	movs	r3, #4
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b16:	e082      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b18:	2308      	movs	r3, #8
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1e:	e07e      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b20:	2310      	movs	r3, #16
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b26:	e07a      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b28:	2320      	movs	r3, #32
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2e:	e076      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b30:	2340      	movs	r3, #64	; 0x40
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b36:	e072      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b38:	2380      	movs	r3, #128	; 0x80
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3e:	e06e      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a75      	ldr	r2, [pc, #468]	; (8008d1c <UART_SetConfig+0x6a4>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d130      	bne.n	8008bac <UART_SetConfig+0x534>
 8008b4a:	4b72      	ldr	r3, [pc, #456]	; (8008d14 <UART_SetConfig+0x69c>)
 8008b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	2b05      	cmp	r3, #5
 8008b54:	d826      	bhi.n	8008ba4 <UART_SetConfig+0x52c>
 8008b56:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <UART_SetConfig+0x4e4>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008b75 	.word	0x08008b75
 8008b60:	08008b7d 	.word	0x08008b7d
 8008b64:	08008b85 	.word	0x08008b85
 8008b68:	08008b8d 	.word	0x08008b8d
 8008b6c:	08008b95 	.word	0x08008b95
 8008b70:	08008b9d 	.word	0x08008b9d
 8008b74:	2300      	movs	r3, #0
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7a:	e050      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b7c:	2304      	movs	r3, #4
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b82:	e04c      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b84:	2308      	movs	r3, #8
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8a:	e048      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b8c:	2310      	movs	r3, #16
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b92:	e044      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b94:	2320      	movs	r3, #32
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9a:	e040      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008b9c:	2340      	movs	r3, #64	; 0x40
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba2:	e03c      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008ba4:	2380      	movs	r3, #128	; 0x80
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008baa:	e038      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a5b      	ldr	r2, [pc, #364]	; (8008d20 <UART_SetConfig+0x6a8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d130      	bne.n	8008c18 <UART_SetConfig+0x5a0>
 8008bb6:	4b57      	ldr	r3, [pc, #348]	; (8008d14 <UART_SetConfig+0x69c>)
 8008bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	2b05      	cmp	r3, #5
 8008bc0:	d826      	bhi.n	8008c10 <UART_SetConfig+0x598>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <UART_SetConfig+0x550>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008be1 	.word	0x08008be1
 8008bcc:	08008be9 	.word	0x08008be9
 8008bd0:	08008bf1 	.word	0x08008bf1
 8008bd4:	08008bf9 	.word	0x08008bf9
 8008bd8:	08008c01 	.word	0x08008c01
 8008bdc:	08008c09 	.word	0x08008c09
 8008be0:	2302      	movs	r3, #2
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be6:	e01a      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008be8:	2304      	movs	r3, #4
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bee:	e016      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008bf0:	2308      	movs	r3, #8
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf6:	e012      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008bf8:	2310      	movs	r3, #16
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfe:	e00e      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008c00:	2320      	movs	r3, #32
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c06:	e00a      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008c08:	2340      	movs	r3, #64	; 0x40
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0e:	e006      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008c10:	2380      	movs	r3, #128	; 0x80
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c16:	e002      	b.n	8008c1e <UART_SetConfig+0x5a6>
 8008c18:	2380      	movs	r3, #128	; 0x80
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a3f      	ldr	r2, [pc, #252]	; (8008d20 <UART_SetConfig+0x6a8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	f040 80f8 	bne.w	8008e1a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	dc46      	bgt.n	8008cc0 <UART_SetConfig+0x648>
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	f2c0 8082 	blt.w	8008d3c <UART_SetConfig+0x6c4>
 8008c38:	3b02      	subs	r3, #2
 8008c3a:	2b1e      	cmp	r3, #30
 8008c3c:	d87e      	bhi.n	8008d3c <UART_SetConfig+0x6c4>
 8008c3e:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <UART_SetConfig+0x5cc>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008cc7 	.word	0x08008cc7
 8008c48:	08008d3d 	.word	0x08008d3d
 8008c4c:	08008ccf 	.word	0x08008ccf
 8008c50:	08008d3d 	.word	0x08008d3d
 8008c54:	08008d3d 	.word	0x08008d3d
 8008c58:	08008d3d 	.word	0x08008d3d
 8008c5c:	08008cdf 	.word	0x08008cdf
 8008c60:	08008d3d 	.word	0x08008d3d
 8008c64:	08008d3d 	.word	0x08008d3d
 8008c68:	08008d3d 	.word	0x08008d3d
 8008c6c:	08008d3d 	.word	0x08008d3d
 8008c70:	08008d3d 	.word	0x08008d3d
 8008c74:	08008d3d 	.word	0x08008d3d
 8008c78:	08008d3d 	.word	0x08008d3d
 8008c7c:	08008cef 	.word	0x08008cef
 8008c80:	08008d3d 	.word	0x08008d3d
 8008c84:	08008d3d 	.word	0x08008d3d
 8008c88:	08008d3d 	.word	0x08008d3d
 8008c8c:	08008d3d 	.word	0x08008d3d
 8008c90:	08008d3d 	.word	0x08008d3d
 8008c94:	08008d3d 	.word	0x08008d3d
 8008c98:	08008d3d 	.word	0x08008d3d
 8008c9c:	08008d3d 	.word	0x08008d3d
 8008ca0:	08008d3d 	.word	0x08008d3d
 8008ca4:	08008d3d 	.word	0x08008d3d
 8008ca8:	08008d3d 	.word	0x08008d3d
 8008cac:	08008d3d 	.word	0x08008d3d
 8008cb0:	08008d3d 	.word	0x08008d3d
 8008cb4:	08008d3d 	.word	0x08008d3d
 8008cb8:	08008d3d 	.word	0x08008d3d
 8008cbc:	08008d2f 	.word	0x08008d2f
 8008cc0:	2b40      	cmp	r3, #64	; 0x40
 8008cc2:	d037      	beq.n	8008d34 <UART_SetConfig+0x6bc>
 8008cc4:	e03a      	b.n	8008d3c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008cc6:	f7fe fc6b 	bl	80075a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ccc:	e03c      	b.n	8008d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fc7a 	bl	80075cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cdc:	e034      	b.n	8008d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cde:	f107 0318 	add.w	r3, r7, #24
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fdc6 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cec:	e02c      	b.n	8008d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <UART_SetConfig+0x69c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d016      	beq.n	8008d28 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cfa:	4b06      	ldr	r3, [pc, #24]	; (8008d14 <UART_SetConfig+0x69c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	08db      	lsrs	r3, r3, #3
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	4a07      	ldr	r2, [pc, #28]	; (8008d24 <UART_SetConfig+0x6ac>)
 8008d06:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d0c:	e01c      	b.n	8008d48 <UART_SetConfig+0x6d0>
 8008d0e:	bf00      	nop
 8008d10:	40011400 	.word	0x40011400
 8008d14:	58024400 	.word	0x58024400
 8008d18:	40007800 	.word	0x40007800
 8008d1c:	40007c00 	.word	0x40007c00
 8008d20:	58000c00 	.word	0x58000c00
 8008d24:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008d28:	4b9d      	ldr	r3, [pc, #628]	; (8008fa0 <UART_SetConfig+0x928>)
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d2c:	e00c      	b.n	8008d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d2e:	4b9d      	ldr	r3, [pc, #628]	; (8008fa4 <UART_SetConfig+0x92c>)
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d32:	e009      	b.n	8008d48 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d3a:	e005      	b.n	8008d48 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008d46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 81de 	beq.w	800910c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	4a94      	ldr	r2, [pc, #592]	; (8008fa8 <UART_SetConfig+0x930>)
 8008d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d62:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	4413      	add	r3, r2
 8008d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d305      	bcc.n	8008d80 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d903      	bls.n	8008d88 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d86:	e1c1      	b.n	800910c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	60bb      	str	r3, [r7, #8]
 8008d8e:	60fa      	str	r2, [r7, #12]
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	4a84      	ldr	r2, [pc, #528]	; (8008fa8 <UART_SetConfig+0x930>)
 8008d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	607a      	str	r2, [r7, #4]
 8008da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008daa:	f7f7 ff79 	bl	8000ca0 <__aeabi_uldivmod>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4610      	mov	r0, r2
 8008db4:	4619      	mov	r1, r3
 8008db6:	f04f 0200 	mov.w	r2, #0
 8008dba:	f04f 0300 	mov.w	r3, #0
 8008dbe:	020b      	lsls	r3, r1, #8
 8008dc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dc4:	0202      	lsls	r2, r0, #8
 8008dc6:	6979      	ldr	r1, [r7, #20]
 8008dc8:	6849      	ldr	r1, [r1, #4]
 8008dca:	0849      	lsrs	r1, r1, #1
 8008dcc:	2000      	movs	r0, #0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	eb12 0804 	adds.w	r8, r2, r4
 8008dd6:	eb43 0905 	adc.w	r9, r3, r5
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	469a      	mov	sl, r3
 8008de2:	4693      	mov	fp, r2
 8008de4:	4652      	mov	r2, sl
 8008de6:	465b      	mov	r3, fp
 8008de8:	4640      	mov	r0, r8
 8008dea:	4649      	mov	r1, r9
 8008dec:	f7f7 ff58 	bl	8000ca0 <__aeabi_uldivmod>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4613      	mov	r3, r2
 8008df6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dfe:	d308      	bcc.n	8008e12 <UART_SetConfig+0x79a>
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e06:	d204      	bcs.n	8008e12 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e0e:	60da      	str	r2, [r3, #12]
 8008e10:	e17c      	b.n	800910c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008e18:	e178      	b.n	800910c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e22:	f040 80c5 	bne.w	8008fb0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008e26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e2a:	2b20      	cmp	r3, #32
 8008e2c:	dc48      	bgt.n	8008ec0 <UART_SetConfig+0x848>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	db7b      	blt.n	8008f2a <UART_SetConfig+0x8b2>
 8008e32:	2b20      	cmp	r3, #32
 8008e34:	d879      	bhi.n	8008f2a <UART_SetConfig+0x8b2>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <UART_SetConfig+0x7c4>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008ec7 	.word	0x08008ec7
 8008e40:	08008ecf 	.word	0x08008ecf
 8008e44:	08008f2b 	.word	0x08008f2b
 8008e48:	08008f2b 	.word	0x08008f2b
 8008e4c:	08008ed7 	.word	0x08008ed7
 8008e50:	08008f2b 	.word	0x08008f2b
 8008e54:	08008f2b 	.word	0x08008f2b
 8008e58:	08008f2b 	.word	0x08008f2b
 8008e5c:	08008ee7 	.word	0x08008ee7
 8008e60:	08008f2b 	.word	0x08008f2b
 8008e64:	08008f2b 	.word	0x08008f2b
 8008e68:	08008f2b 	.word	0x08008f2b
 8008e6c:	08008f2b 	.word	0x08008f2b
 8008e70:	08008f2b 	.word	0x08008f2b
 8008e74:	08008f2b 	.word	0x08008f2b
 8008e78:	08008f2b 	.word	0x08008f2b
 8008e7c:	08008ef7 	.word	0x08008ef7
 8008e80:	08008f2b 	.word	0x08008f2b
 8008e84:	08008f2b 	.word	0x08008f2b
 8008e88:	08008f2b 	.word	0x08008f2b
 8008e8c:	08008f2b 	.word	0x08008f2b
 8008e90:	08008f2b 	.word	0x08008f2b
 8008e94:	08008f2b 	.word	0x08008f2b
 8008e98:	08008f2b 	.word	0x08008f2b
 8008e9c:	08008f2b 	.word	0x08008f2b
 8008ea0:	08008f2b 	.word	0x08008f2b
 8008ea4:	08008f2b 	.word	0x08008f2b
 8008ea8:	08008f2b 	.word	0x08008f2b
 8008eac:	08008f2b 	.word	0x08008f2b
 8008eb0:	08008f2b 	.word	0x08008f2b
 8008eb4:	08008f2b 	.word	0x08008f2b
 8008eb8:	08008f2b 	.word	0x08008f2b
 8008ebc:	08008f1d 	.word	0x08008f1d
 8008ec0:	2b40      	cmp	r3, #64	; 0x40
 8008ec2:	d02e      	beq.n	8008f22 <UART_SetConfig+0x8aa>
 8008ec4:	e031      	b.n	8008f2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ec6:	f7fd f919 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 8008eca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ecc:	e033      	b.n	8008f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ece:	f7fd f92b 	bl	8006128 <HAL_RCC_GetPCLK2Freq>
 8008ed2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ed4:	e02f      	b.n	8008f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fb76 	bl	80075cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ee4:	e027      	b.n	8008f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ee6:	f107 0318 	add.w	r3, r7, #24
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fcc2 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef4:	e01f      	b.n	8008f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ef6:	4b2d      	ldr	r3, [pc, #180]	; (8008fac <UART_SetConfig+0x934>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0320 	and.w	r3, r3, #32
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d009      	beq.n	8008f16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f02:	4b2a      	ldr	r3, [pc, #168]	; (8008fac <UART_SetConfig+0x934>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	08db      	lsrs	r3, r3, #3
 8008f08:	f003 0303 	and.w	r3, r3, #3
 8008f0c:	4a24      	ldr	r2, [pc, #144]	; (8008fa0 <UART_SetConfig+0x928>)
 8008f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f14:	e00f      	b.n	8008f36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008f16:	4b22      	ldr	r3, [pc, #136]	; (8008fa0 <UART_SetConfig+0x928>)
 8008f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f1a:	e00c      	b.n	8008f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f1c:	4b21      	ldr	r3, [pc, #132]	; (8008fa4 <UART_SetConfig+0x92c>)
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f20:	e009      	b.n	8008f36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f28:	e005      	b.n	8008f36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 80e7 	beq.w	800910c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	4a19      	ldr	r2, [pc, #100]	; (8008fa8 <UART_SetConfig+0x930>)
 8008f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f50:	005a      	lsls	r2, r3, #1
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	085b      	lsrs	r3, r3, #1
 8008f58:	441a      	add	r2, r3
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	2b0f      	cmp	r3, #15
 8008f68:	d916      	bls.n	8008f98 <UART_SetConfig+0x920>
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f70:	d212      	bcs.n	8008f98 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	f023 030f 	bic.w	r3, r3, #15
 8008f7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	085b      	lsrs	r3, r3, #1
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f94:	60da      	str	r2, [r3, #12]
 8008f96:	e0b9      	b.n	800910c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f9e:	e0b5      	b.n	800910c <UART_SetConfig+0xa94>
 8008fa0:	03d09000 	.word	0x03d09000
 8008fa4:	003d0900 	.word	0x003d0900
 8008fa8:	0800ab48 	.word	0x0800ab48
 8008fac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008fb4:	2b20      	cmp	r3, #32
 8008fb6:	dc49      	bgt.n	800904c <UART_SetConfig+0x9d4>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	db7c      	blt.n	80090b6 <UART_SetConfig+0xa3e>
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	d87a      	bhi.n	80090b6 <UART_SetConfig+0xa3e>
 8008fc0:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <UART_SetConfig+0x950>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08009053 	.word	0x08009053
 8008fcc:	0800905b 	.word	0x0800905b
 8008fd0:	080090b7 	.word	0x080090b7
 8008fd4:	080090b7 	.word	0x080090b7
 8008fd8:	08009063 	.word	0x08009063
 8008fdc:	080090b7 	.word	0x080090b7
 8008fe0:	080090b7 	.word	0x080090b7
 8008fe4:	080090b7 	.word	0x080090b7
 8008fe8:	08009073 	.word	0x08009073
 8008fec:	080090b7 	.word	0x080090b7
 8008ff0:	080090b7 	.word	0x080090b7
 8008ff4:	080090b7 	.word	0x080090b7
 8008ff8:	080090b7 	.word	0x080090b7
 8008ffc:	080090b7 	.word	0x080090b7
 8009000:	080090b7 	.word	0x080090b7
 8009004:	080090b7 	.word	0x080090b7
 8009008:	08009083 	.word	0x08009083
 800900c:	080090b7 	.word	0x080090b7
 8009010:	080090b7 	.word	0x080090b7
 8009014:	080090b7 	.word	0x080090b7
 8009018:	080090b7 	.word	0x080090b7
 800901c:	080090b7 	.word	0x080090b7
 8009020:	080090b7 	.word	0x080090b7
 8009024:	080090b7 	.word	0x080090b7
 8009028:	080090b7 	.word	0x080090b7
 800902c:	080090b7 	.word	0x080090b7
 8009030:	080090b7 	.word	0x080090b7
 8009034:	080090b7 	.word	0x080090b7
 8009038:	080090b7 	.word	0x080090b7
 800903c:	080090b7 	.word	0x080090b7
 8009040:	080090b7 	.word	0x080090b7
 8009044:	080090b7 	.word	0x080090b7
 8009048:	080090a9 	.word	0x080090a9
 800904c:	2b40      	cmp	r3, #64	; 0x40
 800904e:	d02e      	beq.n	80090ae <UART_SetConfig+0xa36>
 8009050:	e031      	b.n	80090b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009052:	f7fd f853 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 8009056:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009058:	e033      	b.n	80090c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800905a:	f7fd f865 	bl	8006128 <HAL_RCC_GetPCLK2Freq>
 800905e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009060:	e02f      	b.n	80090c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe fab0 	bl	80075cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009070:	e027      	b.n	80090c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009072:	f107 0318 	add.w	r3, r7, #24
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fbfc 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009080:	e01f      	b.n	80090c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009082:	4b2d      	ldr	r3, [pc, #180]	; (8009138 <UART_SetConfig+0xac0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0320 	and.w	r3, r3, #32
 800908a:	2b00      	cmp	r3, #0
 800908c:	d009      	beq.n	80090a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800908e:	4b2a      	ldr	r3, [pc, #168]	; (8009138 <UART_SetConfig+0xac0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	08db      	lsrs	r3, r3, #3
 8009094:	f003 0303 	and.w	r3, r3, #3
 8009098:	4a28      	ldr	r2, [pc, #160]	; (800913c <UART_SetConfig+0xac4>)
 800909a:	fa22 f303 	lsr.w	r3, r2, r3
 800909e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090a0:	e00f      	b.n	80090c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80090a2:	4b26      	ldr	r3, [pc, #152]	; (800913c <UART_SetConfig+0xac4>)
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090a6:	e00c      	b.n	80090c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090a8:	4b25      	ldr	r3, [pc, #148]	; (8009140 <UART_SetConfig+0xac8>)
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ac:	e009      	b.n	80090c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b4:	e005      	b.n	80090c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80090c0:	bf00      	nop
    }

    if (pclk != 0U)
 80090c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d021      	beq.n	800910c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	4a1d      	ldr	r2, [pc, #116]	; (8009144 <UART_SetConfig+0xacc>)
 80090ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090d2:	461a      	mov	r2, r3
 80090d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	085b      	lsrs	r3, r3, #1
 80090e0:	441a      	add	r2, r3
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ee:	2b0f      	cmp	r3, #15
 80090f0:	d909      	bls.n	8009106 <UART_SetConfig+0xa8e>
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f8:	d205      	bcs.n	8009106 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	60da      	str	r2, [r3, #12]
 8009104:	e002      	b.n	800910c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2201      	movs	r2, #1
 8009110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2201      	movs	r2, #1
 8009118:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2200      	movs	r2, #0
 8009120:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2200      	movs	r2, #0
 8009126:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009128:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800912c:	4618      	mov	r0, r3
 800912e:	3748      	adds	r7, #72	; 0x48
 8009130:	46bd      	mov	sp, r7
 8009132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009136:	bf00      	nop
 8009138:	58024400 	.word	0x58024400
 800913c:	03d09000 	.word	0x03d09000
 8009140:	003d0900 	.word	0x003d0900
 8009144:	0800ab48 	.word	0x0800ab48

08009148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00a      	beq.n	8009172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	430a      	orrs	r2, r1
 8009192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	f003 0308 	and.w	r3, r3, #8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	f003 0310 	and.w	r3, r3, #16
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fe:	f003 0320 	and.w	r3, r3, #32
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01a      	beq.n	800925e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009246:	d10a      	bne.n	800925e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	430a      	orrs	r2, r1
 800927e:	605a      	str	r2, [r3, #4]
  }
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b098      	sub	sp, #96	; 0x60
 8009290:	af02      	add	r7, sp, #8
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800929c:	f7f9 f9b2 	bl	8002604 <HAL_GetTick>
 80092a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d12f      	bne.n	8009310 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b8:	2200      	movs	r2, #0
 80092ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f88e 	bl	80093e0 <UART_WaitOnFlagUntilTimeout>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d022      	beq.n	8009310 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092de:	653b      	str	r3, [r7, #80]	; 0x50
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092e8:	647b      	str	r3, [r7, #68]	; 0x44
 80092ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092f0:	e841 2300 	strex	r3, r2, [r1]
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e6      	bne.n	80092ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2220      	movs	r2, #32
 8009300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e063      	b.n	80093d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0304 	and.w	r3, r3, #4
 800931a:	2b04      	cmp	r3, #4
 800931c:	d149      	bne.n	80093b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800931e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009326:	2200      	movs	r2, #0
 8009328:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f857 	bl	80093e0 <UART_WaitOnFlagUntilTimeout>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d03c      	beq.n	80093b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	623b      	str	r3, [r7, #32]
   return(result);
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800934c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009356:	633b      	str	r3, [r7, #48]	; 0x30
 8009358:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800935c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e6      	bne.n	8009338 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	60fb      	str	r3, [r7, #12]
   return(result);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	64bb      	str	r3, [r7, #72]	; 0x48
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3308      	adds	r3, #8
 8009388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800938a:	61fa      	str	r2, [r7, #28]
 800938c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938e:	69b9      	ldr	r1, [r7, #24]
 8009390:	69fa      	ldr	r2, [r7, #28]
 8009392:	e841 2300 	strex	r3, r2, [r1]
 8009396:	617b      	str	r3, [r7, #20]
   return(result);
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1e5      	bne.n	800936a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e012      	b.n	80093d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3758      	adds	r7, #88	; 0x58
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	603b      	str	r3, [r7, #0]
 80093ec:	4613      	mov	r3, r2
 80093ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093f0:	e049      	b.n	8009486 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f8:	d045      	beq.n	8009486 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093fa:	f7f9 f903 	bl	8002604 <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	429a      	cmp	r2, r3
 8009408:	d302      	bcc.n	8009410 <UART_WaitOnFlagUntilTimeout+0x30>
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e048      	b.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0304 	and.w	r3, r3, #4
 800941e:	2b00      	cmp	r3, #0
 8009420:	d031      	beq.n	8009486 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	f003 0308 	and.w	r3, r3, #8
 800942c:	2b08      	cmp	r3, #8
 800942e:	d110      	bne.n	8009452 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2208      	movs	r2, #8
 8009436:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 f839 	bl	80094b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2208      	movs	r2, #8
 8009442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e029      	b.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800945c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009460:	d111      	bne.n	8009486 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800946a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f81f 	bl	80094b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2220      	movs	r2, #32
 8009476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e00f      	b.n	80094a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	69da      	ldr	r2, [r3, #28]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4013      	ands	r3, r2
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	429a      	cmp	r2, r3
 8009494:	bf0c      	ite	eq
 8009496:	2301      	moveq	r3, #1
 8009498:	2300      	movne	r3, #0
 800949a:	b2db      	uxtb	r3, r3
 800949c:	461a      	mov	r2, r3
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d0a6      	beq.n	80093f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b095      	sub	sp, #84	; 0x54
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d6:	643b      	str	r3, [r7, #64]	; 0x40
 80094d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e6      	bne.n	80094b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3308      	adds	r3, #8
 80094f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	4b1e      	ldr	r3, [pc, #120]	; (8009578 <UART_EndRxTransfer+0xc8>)
 80094fe:	4013      	ands	r3, r2
 8009500:	64bb      	str	r3, [r7, #72]	; 0x48
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800950a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e5      	bne.n	80094ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009522:	2b01      	cmp	r3, #1
 8009524:	d118      	bne.n	8009558 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	e853 3f00 	ldrex	r3, [r3]
 8009532:	60bb      	str	r3, [r7, #8]
   return(result);
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f023 0310 	bic.w	r3, r3, #16
 800953a:	647b      	str	r3, [r7, #68]	; 0x44
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	461a      	mov	r2, r3
 8009542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009544:	61bb      	str	r3, [r7, #24]
 8009546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009548:	6979      	ldr	r1, [r7, #20]
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	e841 2300 	strex	r3, r2, [r1]
 8009550:	613b      	str	r3, [r7, #16]
   return(result);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e6      	bne.n	8009526 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2220      	movs	r2, #32
 800955c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800956c:	bf00      	nop
 800956e:	3754      	adds	r7, #84	; 0x54
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	effffffe 	.word	0xeffffffe

0800957c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <HAL_UARTEx_DisableFifoMode+0x16>
 800958e:	2302      	movs	r3, #2
 8009590:	e027      	b.n	80095e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2224      	movs	r2, #36	; 0x24
 800959e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 0201 	bic.w	r2, r2, #1
 80095b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009602:	2302      	movs	r3, #2
 8009604:	e02d      	b.n	8009662 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2224      	movs	r2, #36	; 0x24
 8009612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0201 	bic.w	r2, r2, #1
 800962c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f850 	bl	80096e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b084      	sub	sp, #16
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800967a:	2b01      	cmp	r3, #1
 800967c:	d101      	bne.n	8009682 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800967e:	2302      	movs	r3, #2
 8009680:	e02d      	b.n	80096de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2224      	movs	r2, #36	; 0x24
 800968e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 0201 	bic.w	r2, r2, #1
 80096a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f812 	bl	80096e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2220      	movs	r2, #32
 80096d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
	...

080096e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d108      	bne.n	800970a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009708:	e031      	b.n	800976e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800970a:	2310      	movs	r3, #16
 800970c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800970e:	2310      	movs	r3, #16
 8009710:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	0e5b      	lsrs	r3, r3, #25
 800971a:	b2db      	uxtb	r3, r3
 800971c:	f003 0307 	and.w	r3, r3, #7
 8009720:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	0f5b      	lsrs	r3, r3, #29
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 0307 	and.w	r3, r3, #7
 8009730:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	7b3a      	ldrb	r2, [r7, #12]
 8009736:	4911      	ldr	r1, [pc, #68]	; (800977c <UARTEx_SetNbDataToProcess+0x94>)
 8009738:	5c8a      	ldrb	r2, [r1, r2]
 800973a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800973e:	7b3a      	ldrb	r2, [r7, #12]
 8009740:	490f      	ldr	r1, [pc, #60]	; (8009780 <UARTEx_SetNbDataToProcess+0x98>)
 8009742:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009744:	fb93 f3f2 	sdiv	r3, r3, r2
 8009748:	b29a      	uxth	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	7b7a      	ldrb	r2, [r7, #13]
 8009754:	4909      	ldr	r1, [pc, #36]	; (800977c <UARTEx_SetNbDataToProcess+0x94>)
 8009756:	5c8a      	ldrb	r2, [r1, r2]
 8009758:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800975c:	7b7a      	ldrb	r2, [r7, #13]
 800975e:	4908      	ldr	r1, [pc, #32]	; (8009780 <UARTEx_SetNbDataToProcess+0x98>)
 8009760:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009762:	fb93 f3f2 	sdiv	r3, r3, r2
 8009766:	b29a      	uxth	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800976e:	bf00      	nop
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	0800ab60 	.word	0x0800ab60
 8009780:	0800ab68 	.word	0x0800ab68

08009784 <__errno>:
 8009784:	4b01      	ldr	r3, [pc, #4]	; (800978c <__errno+0x8>)
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	2000003c 	.word	0x2000003c

08009790 <__libc_init_array>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	4d0d      	ldr	r5, [pc, #52]	; (80097c8 <__libc_init_array+0x38>)
 8009794:	4c0d      	ldr	r4, [pc, #52]	; (80097cc <__libc_init_array+0x3c>)
 8009796:	1b64      	subs	r4, r4, r5
 8009798:	10a4      	asrs	r4, r4, #2
 800979a:	2600      	movs	r6, #0
 800979c:	42a6      	cmp	r6, r4
 800979e:	d109      	bne.n	80097b4 <__libc_init_array+0x24>
 80097a0:	4d0b      	ldr	r5, [pc, #44]	; (80097d0 <__libc_init_array+0x40>)
 80097a2:	4c0c      	ldr	r4, [pc, #48]	; (80097d4 <__libc_init_array+0x44>)
 80097a4:	f001 f832 	bl	800a80c <_init>
 80097a8:	1b64      	subs	r4, r4, r5
 80097aa:	10a4      	asrs	r4, r4, #2
 80097ac:	2600      	movs	r6, #0
 80097ae:	42a6      	cmp	r6, r4
 80097b0:	d105      	bne.n	80097be <__libc_init_array+0x2e>
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b8:	4798      	blx	r3
 80097ba:	3601      	adds	r6, #1
 80097bc:	e7ee      	b.n	800979c <__libc_init_array+0xc>
 80097be:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c2:	4798      	blx	r3
 80097c4:	3601      	adds	r6, #1
 80097c6:	e7f2      	b.n	80097ae <__libc_init_array+0x1e>
 80097c8:	0800ac10 	.word	0x0800ac10
 80097cc:	0800ac10 	.word	0x0800ac10
 80097d0:	0800ac10 	.word	0x0800ac10
 80097d4:	0800ac14 	.word	0x0800ac14

080097d8 <memcpy>:
 80097d8:	440a      	add	r2, r1
 80097da:	4291      	cmp	r1, r2
 80097dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80097e0:	d100      	bne.n	80097e4 <memcpy+0xc>
 80097e2:	4770      	bx	lr
 80097e4:	b510      	push	{r4, lr}
 80097e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ee:	4291      	cmp	r1, r2
 80097f0:	d1f9      	bne.n	80097e6 <memcpy+0xe>
 80097f2:	bd10      	pop	{r4, pc}

080097f4 <memset>:
 80097f4:	4402      	add	r2, r0
 80097f6:	4603      	mov	r3, r0
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d100      	bne.n	80097fe <memset+0xa>
 80097fc:	4770      	bx	lr
 80097fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009802:	e7f9      	b.n	80097f8 <memset+0x4>

08009804 <iprintf>:
 8009804:	b40f      	push	{r0, r1, r2, r3}
 8009806:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <iprintf+0x2c>)
 8009808:	b513      	push	{r0, r1, r4, lr}
 800980a:	681c      	ldr	r4, [r3, #0]
 800980c:	b124      	cbz	r4, 8009818 <iprintf+0x14>
 800980e:	69a3      	ldr	r3, [r4, #24]
 8009810:	b913      	cbnz	r3, 8009818 <iprintf+0x14>
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fa5e 	bl	8009cd4 <__sinit>
 8009818:	ab05      	add	r3, sp, #20
 800981a:	9a04      	ldr	r2, [sp, #16]
 800981c:	68a1      	ldr	r1, [r4, #8]
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	4620      	mov	r0, r4
 8009822:	f000 fc67 	bl	800a0f4 <_vfiprintf_r>
 8009826:	b002      	add	sp, #8
 8009828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800982c:	b004      	add	sp, #16
 800982e:	4770      	bx	lr
 8009830:	2000003c 	.word	0x2000003c

08009834 <_puts_r>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	460e      	mov	r6, r1
 8009838:	4605      	mov	r5, r0
 800983a:	b118      	cbz	r0, 8009844 <_puts_r+0x10>
 800983c:	6983      	ldr	r3, [r0, #24]
 800983e:	b90b      	cbnz	r3, 8009844 <_puts_r+0x10>
 8009840:	f000 fa48 	bl	8009cd4 <__sinit>
 8009844:	69ab      	ldr	r3, [r5, #24]
 8009846:	68ac      	ldr	r4, [r5, #8]
 8009848:	b913      	cbnz	r3, 8009850 <_puts_r+0x1c>
 800984a:	4628      	mov	r0, r5
 800984c:	f000 fa42 	bl	8009cd4 <__sinit>
 8009850:	4b2c      	ldr	r3, [pc, #176]	; (8009904 <_puts_r+0xd0>)
 8009852:	429c      	cmp	r4, r3
 8009854:	d120      	bne.n	8009898 <_puts_r+0x64>
 8009856:	686c      	ldr	r4, [r5, #4]
 8009858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800985a:	07db      	lsls	r3, r3, #31
 800985c:	d405      	bmi.n	800986a <_puts_r+0x36>
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	0598      	lsls	r0, r3, #22
 8009862:	d402      	bmi.n	800986a <_puts_r+0x36>
 8009864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009866:	f000 fad3 	bl	8009e10 <__retarget_lock_acquire_recursive>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	0719      	lsls	r1, r3, #28
 800986e:	d51d      	bpl.n	80098ac <_puts_r+0x78>
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	b1db      	cbz	r3, 80098ac <_puts_r+0x78>
 8009874:	3e01      	subs	r6, #1
 8009876:	68a3      	ldr	r3, [r4, #8]
 8009878:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800987c:	3b01      	subs	r3, #1
 800987e:	60a3      	str	r3, [r4, #8]
 8009880:	bb39      	cbnz	r1, 80098d2 <_puts_r+0x9e>
 8009882:	2b00      	cmp	r3, #0
 8009884:	da38      	bge.n	80098f8 <_puts_r+0xc4>
 8009886:	4622      	mov	r2, r4
 8009888:	210a      	movs	r1, #10
 800988a:	4628      	mov	r0, r5
 800988c:	f000 f848 	bl	8009920 <__swbuf_r>
 8009890:	3001      	adds	r0, #1
 8009892:	d011      	beq.n	80098b8 <_puts_r+0x84>
 8009894:	250a      	movs	r5, #10
 8009896:	e011      	b.n	80098bc <_puts_r+0x88>
 8009898:	4b1b      	ldr	r3, [pc, #108]	; (8009908 <_puts_r+0xd4>)
 800989a:	429c      	cmp	r4, r3
 800989c:	d101      	bne.n	80098a2 <_puts_r+0x6e>
 800989e:	68ac      	ldr	r4, [r5, #8]
 80098a0:	e7da      	b.n	8009858 <_puts_r+0x24>
 80098a2:	4b1a      	ldr	r3, [pc, #104]	; (800990c <_puts_r+0xd8>)
 80098a4:	429c      	cmp	r4, r3
 80098a6:	bf08      	it	eq
 80098a8:	68ec      	ldreq	r4, [r5, #12]
 80098aa:	e7d5      	b.n	8009858 <_puts_r+0x24>
 80098ac:	4621      	mov	r1, r4
 80098ae:	4628      	mov	r0, r5
 80098b0:	f000 f888 	bl	80099c4 <__swsetup_r>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d0dd      	beq.n	8009874 <_puts_r+0x40>
 80098b8:	f04f 35ff 	mov.w	r5, #4294967295
 80098bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098be:	07da      	lsls	r2, r3, #31
 80098c0:	d405      	bmi.n	80098ce <_puts_r+0x9a>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	059b      	lsls	r3, r3, #22
 80098c6:	d402      	bmi.n	80098ce <_puts_r+0x9a>
 80098c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098ca:	f000 faa2 	bl	8009e12 <__retarget_lock_release_recursive>
 80098ce:	4628      	mov	r0, r5
 80098d0:	bd70      	pop	{r4, r5, r6, pc}
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	da04      	bge.n	80098e0 <_puts_r+0xac>
 80098d6:	69a2      	ldr	r2, [r4, #24]
 80098d8:	429a      	cmp	r2, r3
 80098da:	dc06      	bgt.n	80098ea <_puts_r+0xb6>
 80098dc:	290a      	cmp	r1, #10
 80098de:	d004      	beq.n	80098ea <_puts_r+0xb6>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	6022      	str	r2, [r4, #0]
 80098e6:	7019      	strb	r1, [r3, #0]
 80098e8:	e7c5      	b.n	8009876 <_puts_r+0x42>
 80098ea:	4622      	mov	r2, r4
 80098ec:	4628      	mov	r0, r5
 80098ee:	f000 f817 	bl	8009920 <__swbuf_r>
 80098f2:	3001      	adds	r0, #1
 80098f4:	d1bf      	bne.n	8009876 <_puts_r+0x42>
 80098f6:	e7df      	b.n	80098b8 <_puts_r+0x84>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	250a      	movs	r5, #10
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	6022      	str	r2, [r4, #0]
 8009900:	701d      	strb	r5, [r3, #0]
 8009902:	e7db      	b.n	80098bc <_puts_r+0x88>
 8009904:	0800ab94 	.word	0x0800ab94
 8009908:	0800abb4 	.word	0x0800abb4
 800990c:	0800ab74 	.word	0x0800ab74

08009910 <puts>:
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <puts+0xc>)
 8009912:	4601      	mov	r1, r0
 8009914:	6818      	ldr	r0, [r3, #0]
 8009916:	f7ff bf8d 	b.w	8009834 <_puts_r>
 800991a:	bf00      	nop
 800991c:	2000003c 	.word	0x2000003c

08009920 <__swbuf_r>:
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009922:	460e      	mov	r6, r1
 8009924:	4614      	mov	r4, r2
 8009926:	4605      	mov	r5, r0
 8009928:	b118      	cbz	r0, 8009932 <__swbuf_r+0x12>
 800992a:	6983      	ldr	r3, [r0, #24]
 800992c:	b90b      	cbnz	r3, 8009932 <__swbuf_r+0x12>
 800992e:	f000 f9d1 	bl	8009cd4 <__sinit>
 8009932:	4b21      	ldr	r3, [pc, #132]	; (80099b8 <__swbuf_r+0x98>)
 8009934:	429c      	cmp	r4, r3
 8009936:	d12b      	bne.n	8009990 <__swbuf_r+0x70>
 8009938:	686c      	ldr	r4, [r5, #4]
 800993a:	69a3      	ldr	r3, [r4, #24]
 800993c:	60a3      	str	r3, [r4, #8]
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	071a      	lsls	r2, r3, #28
 8009942:	d52f      	bpl.n	80099a4 <__swbuf_r+0x84>
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	b36b      	cbz	r3, 80099a4 <__swbuf_r+0x84>
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	6820      	ldr	r0, [r4, #0]
 800994c:	1ac0      	subs	r0, r0, r3
 800994e:	6963      	ldr	r3, [r4, #20]
 8009950:	b2f6      	uxtb	r6, r6
 8009952:	4283      	cmp	r3, r0
 8009954:	4637      	mov	r7, r6
 8009956:	dc04      	bgt.n	8009962 <__swbuf_r+0x42>
 8009958:	4621      	mov	r1, r4
 800995a:	4628      	mov	r0, r5
 800995c:	f000 f926 	bl	8009bac <_fflush_r>
 8009960:	bb30      	cbnz	r0, 80099b0 <__swbuf_r+0x90>
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	3b01      	subs	r3, #1
 8009966:	60a3      	str	r3, [r4, #8]
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	6022      	str	r2, [r4, #0]
 800996e:	701e      	strb	r6, [r3, #0]
 8009970:	6963      	ldr	r3, [r4, #20]
 8009972:	3001      	adds	r0, #1
 8009974:	4283      	cmp	r3, r0
 8009976:	d004      	beq.n	8009982 <__swbuf_r+0x62>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	07db      	lsls	r3, r3, #31
 800997c:	d506      	bpl.n	800998c <__swbuf_r+0x6c>
 800997e:	2e0a      	cmp	r6, #10
 8009980:	d104      	bne.n	800998c <__swbuf_r+0x6c>
 8009982:	4621      	mov	r1, r4
 8009984:	4628      	mov	r0, r5
 8009986:	f000 f911 	bl	8009bac <_fflush_r>
 800998a:	b988      	cbnz	r0, 80099b0 <__swbuf_r+0x90>
 800998c:	4638      	mov	r0, r7
 800998e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009990:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <__swbuf_r+0x9c>)
 8009992:	429c      	cmp	r4, r3
 8009994:	d101      	bne.n	800999a <__swbuf_r+0x7a>
 8009996:	68ac      	ldr	r4, [r5, #8]
 8009998:	e7cf      	b.n	800993a <__swbuf_r+0x1a>
 800999a:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <__swbuf_r+0xa0>)
 800999c:	429c      	cmp	r4, r3
 800999e:	bf08      	it	eq
 80099a0:	68ec      	ldreq	r4, [r5, #12]
 80099a2:	e7ca      	b.n	800993a <__swbuf_r+0x1a>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f80c 	bl	80099c4 <__swsetup_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d0cb      	beq.n	8009948 <__swbuf_r+0x28>
 80099b0:	f04f 37ff 	mov.w	r7, #4294967295
 80099b4:	e7ea      	b.n	800998c <__swbuf_r+0x6c>
 80099b6:	bf00      	nop
 80099b8:	0800ab94 	.word	0x0800ab94
 80099bc:	0800abb4 	.word	0x0800abb4
 80099c0:	0800ab74 	.word	0x0800ab74

080099c4 <__swsetup_r>:
 80099c4:	4b32      	ldr	r3, [pc, #200]	; (8009a90 <__swsetup_r+0xcc>)
 80099c6:	b570      	push	{r4, r5, r6, lr}
 80099c8:	681d      	ldr	r5, [r3, #0]
 80099ca:	4606      	mov	r6, r0
 80099cc:	460c      	mov	r4, r1
 80099ce:	b125      	cbz	r5, 80099da <__swsetup_r+0x16>
 80099d0:	69ab      	ldr	r3, [r5, #24]
 80099d2:	b913      	cbnz	r3, 80099da <__swsetup_r+0x16>
 80099d4:	4628      	mov	r0, r5
 80099d6:	f000 f97d 	bl	8009cd4 <__sinit>
 80099da:	4b2e      	ldr	r3, [pc, #184]	; (8009a94 <__swsetup_r+0xd0>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	d10f      	bne.n	8009a00 <__swsetup_r+0x3c>
 80099e0:	686c      	ldr	r4, [r5, #4]
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099e8:	0719      	lsls	r1, r3, #28
 80099ea:	d42c      	bmi.n	8009a46 <__swsetup_r+0x82>
 80099ec:	06dd      	lsls	r5, r3, #27
 80099ee:	d411      	bmi.n	8009a14 <__swsetup_r+0x50>
 80099f0:	2309      	movs	r3, #9
 80099f2:	6033      	str	r3, [r6, #0]
 80099f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099f8:	81a3      	strh	r3, [r4, #12]
 80099fa:	f04f 30ff 	mov.w	r0, #4294967295
 80099fe:	e03e      	b.n	8009a7e <__swsetup_r+0xba>
 8009a00:	4b25      	ldr	r3, [pc, #148]	; (8009a98 <__swsetup_r+0xd4>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	d101      	bne.n	8009a0a <__swsetup_r+0x46>
 8009a06:	68ac      	ldr	r4, [r5, #8]
 8009a08:	e7eb      	b.n	80099e2 <__swsetup_r+0x1e>
 8009a0a:	4b24      	ldr	r3, [pc, #144]	; (8009a9c <__swsetup_r+0xd8>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	bf08      	it	eq
 8009a10:	68ec      	ldreq	r4, [r5, #12]
 8009a12:	e7e6      	b.n	80099e2 <__swsetup_r+0x1e>
 8009a14:	0758      	lsls	r0, r3, #29
 8009a16:	d512      	bpl.n	8009a3e <__swsetup_r+0x7a>
 8009a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a1a:	b141      	cbz	r1, 8009a2e <__swsetup_r+0x6a>
 8009a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a20:	4299      	cmp	r1, r3
 8009a22:	d002      	beq.n	8009a2a <__swsetup_r+0x66>
 8009a24:	4630      	mov	r0, r6
 8009a26:	f000 fa5b 	bl	8009ee0 <_free_r>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	2300      	movs	r3, #0
 8009a38:	6063      	str	r3, [r4, #4]
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	f043 0308 	orr.w	r3, r3, #8
 8009a44:	81a3      	strh	r3, [r4, #12]
 8009a46:	6923      	ldr	r3, [r4, #16]
 8009a48:	b94b      	cbnz	r3, 8009a5e <__swsetup_r+0x9a>
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a54:	d003      	beq.n	8009a5e <__swsetup_r+0x9a>
 8009a56:	4621      	mov	r1, r4
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 fa01 	bl	8009e60 <__smakebuf_r>
 8009a5e:	89a0      	ldrh	r0, [r4, #12]
 8009a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a64:	f010 0301 	ands.w	r3, r0, #1
 8009a68:	d00a      	beq.n	8009a80 <__swsetup_r+0xbc>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60a3      	str	r3, [r4, #8]
 8009a6e:	6963      	ldr	r3, [r4, #20]
 8009a70:	425b      	negs	r3, r3
 8009a72:	61a3      	str	r3, [r4, #24]
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	b943      	cbnz	r3, 8009a8a <__swsetup_r+0xc6>
 8009a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a7c:	d1ba      	bne.n	80099f4 <__swsetup_r+0x30>
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}
 8009a80:	0781      	lsls	r1, r0, #30
 8009a82:	bf58      	it	pl
 8009a84:	6963      	ldrpl	r3, [r4, #20]
 8009a86:	60a3      	str	r3, [r4, #8]
 8009a88:	e7f4      	b.n	8009a74 <__swsetup_r+0xb0>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	e7f7      	b.n	8009a7e <__swsetup_r+0xba>
 8009a8e:	bf00      	nop
 8009a90:	2000003c 	.word	0x2000003c
 8009a94:	0800ab94 	.word	0x0800ab94
 8009a98:	0800abb4 	.word	0x0800abb4
 8009a9c:	0800ab74 	.word	0x0800ab74

08009aa0 <__sflush_r>:
 8009aa0:	898a      	ldrh	r2, [r1, #12]
 8009aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	0710      	lsls	r0, r2, #28
 8009aaa:	460c      	mov	r4, r1
 8009aac:	d458      	bmi.n	8009b60 <__sflush_r+0xc0>
 8009aae:	684b      	ldr	r3, [r1, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dc05      	bgt.n	8009ac0 <__sflush_r+0x20>
 8009ab4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dc02      	bgt.n	8009ac0 <__sflush_r+0x20>
 8009aba:	2000      	movs	r0, #0
 8009abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ac2:	2e00      	cmp	r6, #0
 8009ac4:	d0f9      	beq.n	8009aba <__sflush_r+0x1a>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009acc:	682f      	ldr	r7, [r5, #0]
 8009ace:	602b      	str	r3, [r5, #0]
 8009ad0:	d032      	beq.n	8009b38 <__sflush_r+0x98>
 8009ad2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	075a      	lsls	r2, r3, #29
 8009ad8:	d505      	bpl.n	8009ae6 <__sflush_r+0x46>
 8009ada:	6863      	ldr	r3, [r4, #4]
 8009adc:	1ac0      	subs	r0, r0, r3
 8009ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ae0:	b10b      	cbz	r3, 8009ae6 <__sflush_r+0x46>
 8009ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ae4:	1ac0      	subs	r0, r0, r3
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4602      	mov	r2, r0
 8009aea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aec:	6a21      	ldr	r1, [r4, #32]
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b0      	blx	r6
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	d106      	bne.n	8009b06 <__sflush_r+0x66>
 8009af8:	6829      	ldr	r1, [r5, #0]
 8009afa:	291d      	cmp	r1, #29
 8009afc:	d82c      	bhi.n	8009b58 <__sflush_r+0xb8>
 8009afe:	4a2a      	ldr	r2, [pc, #168]	; (8009ba8 <__sflush_r+0x108>)
 8009b00:	40ca      	lsrs	r2, r1
 8009b02:	07d6      	lsls	r6, r2, #31
 8009b04:	d528      	bpl.n	8009b58 <__sflush_r+0xb8>
 8009b06:	2200      	movs	r2, #0
 8009b08:	6062      	str	r2, [r4, #4]
 8009b0a:	04d9      	lsls	r1, r3, #19
 8009b0c:	6922      	ldr	r2, [r4, #16]
 8009b0e:	6022      	str	r2, [r4, #0]
 8009b10:	d504      	bpl.n	8009b1c <__sflush_r+0x7c>
 8009b12:	1c42      	adds	r2, r0, #1
 8009b14:	d101      	bne.n	8009b1a <__sflush_r+0x7a>
 8009b16:	682b      	ldr	r3, [r5, #0]
 8009b18:	b903      	cbnz	r3, 8009b1c <__sflush_r+0x7c>
 8009b1a:	6560      	str	r0, [r4, #84]	; 0x54
 8009b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b1e:	602f      	str	r7, [r5, #0]
 8009b20:	2900      	cmp	r1, #0
 8009b22:	d0ca      	beq.n	8009aba <__sflush_r+0x1a>
 8009b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	d002      	beq.n	8009b32 <__sflush_r+0x92>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f000 f9d7 	bl	8009ee0 <_free_r>
 8009b32:	2000      	movs	r0, #0
 8009b34:	6360      	str	r0, [r4, #52]	; 0x34
 8009b36:	e7c1      	b.n	8009abc <__sflush_r+0x1c>
 8009b38:	6a21      	ldr	r1, [r4, #32]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b0      	blx	r6
 8009b40:	1c41      	adds	r1, r0, #1
 8009b42:	d1c7      	bne.n	8009ad4 <__sflush_r+0x34>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0c4      	beq.n	8009ad4 <__sflush_r+0x34>
 8009b4a:	2b1d      	cmp	r3, #29
 8009b4c:	d001      	beq.n	8009b52 <__sflush_r+0xb2>
 8009b4e:	2b16      	cmp	r3, #22
 8009b50:	d101      	bne.n	8009b56 <__sflush_r+0xb6>
 8009b52:	602f      	str	r7, [r5, #0]
 8009b54:	e7b1      	b.n	8009aba <__sflush_r+0x1a>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b5c:	81a3      	strh	r3, [r4, #12]
 8009b5e:	e7ad      	b.n	8009abc <__sflush_r+0x1c>
 8009b60:	690f      	ldr	r7, [r1, #16]
 8009b62:	2f00      	cmp	r7, #0
 8009b64:	d0a9      	beq.n	8009aba <__sflush_r+0x1a>
 8009b66:	0793      	lsls	r3, r2, #30
 8009b68:	680e      	ldr	r6, [r1, #0]
 8009b6a:	bf08      	it	eq
 8009b6c:	694b      	ldreq	r3, [r1, #20]
 8009b6e:	600f      	str	r7, [r1, #0]
 8009b70:	bf18      	it	ne
 8009b72:	2300      	movne	r3, #0
 8009b74:	eba6 0807 	sub.w	r8, r6, r7
 8009b78:	608b      	str	r3, [r1, #8]
 8009b7a:	f1b8 0f00 	cmp.w	r8, #0
 8009b7e:	dd9c      	ble.n	8009aba <__sflush_r+0x1a>
 8009b80:	6a21      	ldr	r1, [r4, #32]
 8009b82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b84:	4643      	mov	r3, r8
 8009b86:	463a      	mov	r2, r7
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b0      	blx	r6
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	dc06      	bgt.n	8009b9e <__sflush_r+0xfe>
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	e78e      	b.n	8009abc <__sflush_r+0x1c>
 8009b9e:	4407      	add	r7, r0
 8009ba0:	eba8 0800 	sub.w	r8, r8, r0
 8009ba4:	e7e9      	b.n	8009b7a <__sflush_r+0xda>
 8009ba6:	bf00      	nop
 8009ba8:	20400001 	.word	0x20400001

08009bac <_fflush_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	690b      	ldr	r3, [r1, #16]
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	b913      	cbnz	r3, 8009bbc <_fflush_r+0x10>
 8009bb6:	2500      	movs	r5, #0
 8009bb8:	4628      	mov	r0, r5
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	b118      	cbz	r0, 8009bc6 <_fflush_r+0x1a>
 8009bbe:	6983      	ldr	r3, [r0, #24]
 8009bc0:	b90b      	cbnz	r3, 8009bc6 <_fflush_r+0x1a>
 8009bc2:	f000 f887 	bl	8009cd4 <__sinit>
 8009bc6:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <_fflush_r+0x6c>)
 8009bc8:	429c      	cmp	r4, r3
 8009bca:	d11b      	bne.n	8009c04 <_fflush_r+0x58>
 8009bcc:	686c      	ldr	r4, [r5, #4]
 8009bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0ef      	beq.n	8009bb6 <_fflush_r+0xa>
 8009bd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bd8:	07d0      	lsls	r0, r2, #31
 8009bda:	d404      	bmi.n	8009be6 <_fflush_r+0x3a>
 8009bdc:	0599      	lsls	r1, r3, #22
 8009bde:	d402      	bmi.n	8009be6 <_fflush_r+0x3a>
 8009be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009be2:	f000 f915 	bl	8009e10 <__retarget_lock_acquire_recursive>
 8009be6:	4628      	mov	r0, r5
 8009be8:	4621      	mov	r1, r4
 8009bea:	f7ff ff59 	bl	8009aa0 <__sflush_r>
 8009bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bf0:	07da      	lsls	r2, r3, #31
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	d4e0      	bmi.n	8009bb8 <_fflush_r+0xc>
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	059b      	lsls	r3, r3, #22
 8009bfa:	d4dd      	bmi.n	8009bb8 <_fflush_r+0xc>
 8009bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bfe:	f000 f908 	bl	8009e12 <__retarget_lock_release_recursive>
 8009c02:	e7d9      	b.n	8009bb8 <_fflush_r+0xc>
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <_fflush_r+0x70>)
 8009c06:	429c      	cmp	r4, r3
 8009c08:	d101      	bne.n	8009c0e <_fflush_r+0x62>
 8009c0a:	68ac      	ldr	r4, [r5, #8]
 8009c0c:	e7df      	b.n	8009bce <_fflush_r+0x22>
 8009c0e:	4b04      	ldr	r3, [pc, #16]	; (8009c20 <_fflush_r+0x74>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	bf08      	it	eq
 8009c14:	68ec      	ldreq	r4, [r5, #12]
 8009c16:	e7da      	b.n	8009bce <_fflush_r+0x22>
 8009c18:	0800ab94 	.word	0x0800ab94
 8009c1c:	0800abb4 	.word	0x0800abb4
 8009c20:	0800ab74 	.word	0x0800ab74

08009c24 <std>:
 8009c24:	2300      	movs	r3, #0
 8009c26:	b510      	push	{r4, lr}
 8009c28:	4604      	mov	r4, r0
 8009c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c32:	6083      	str	r3, [r0, #8]
 8009c34:	8181      	strh	r1, [r0, #12]
 8009c36:	6643      	str	r3, [r0, #100]	; 0x64
 8009c38:	81c2      	strh	r2, [r0, #14]
 8009c3a:	6183      	str	r3, [r0, #24]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	2208      	movs	r2, #8
 8009c40:	305c      	adds	r0, #92	; 0x5c
 8009c42:	f7ff fdd7 	bl	80097f4 <memset>
 8009c46:	4b05      	ldr	r3, [pc, #20]	; (8009c5c <std+0x38>)
 8009c48:	6263      	str	r3, [r4, #36]	; 0x24
 8009c4a:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <std+0x3c>)
 8009c4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c4e:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <std+0x40>)
 8009c50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <std+0x44>)
 8009c54:	6224      	str	r4, [r4, #32]
 8009c56:	6323      	str	r3, [r4, #48]	; 0x30
 8009c58:	bd10      	pop	{r4, pc}
 8009c5a:	bf00      	nop
 8009c5c:	0800a69d 	.word	0x0800a69d
 8009c60:	0800a6bf 	.word	0x0800a6bf
 8009c64:	0800a6f7 	.word	0x0800a6f7
 8009c68:	0800a71b 	.word	0x0800a71b

08009c6c <_cleanup_r>:
 8009c6c:	4901      	ldr	r1, [pc, #4]	; (8009c74 <_cleanup_r+0x8>)
 8009c6e:	f000 b8af 	b.w	8009dd0 <_fwalk_reent>
 8009c72:	bf00      	nop
 8009c74:	08009bad 	.word	0x08009bad

08009c78 <__sfmoreglue>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	2268      	movs	r2, #104	; 0x68
 8009c7c:	1e4d      	subs	r5, r1, #1
 8009c7e:	4355      	muls	r5, r2
 8009c80:	460e      	mov	r6, r1
 8009c82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c86:	f000 f997 	bl	8009fb8 <_malloc_r>
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	b140      	cbz	r0, 8009ca0 <__sfmoreglue+0x28>
 8009c8e:	2100      	movs	r1, #0
 8009c90:	e9c0 1600 	strd	r1, r6, [r0]
 8009c94:	300c      	adds	r0, #12
 8009c96:	60a0      	str	r0, [r4, #8]
 8009c98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c9c:	f7ff fdaa 	bl	80097f4 <memset>
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}

08009ca4 <__sfp_lock_acquire>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <__sfp_lock_acquire+0x8>)
 8009ca6:	f000 b8b3 	b.w	8009e10 <__retarget_lock_acquire_recursive>
 8009caa:	bf00      	nop
 8009cac:	20000329 	.word	0x20000329

08009cb0 <__sfp_lock_release>:
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <__sfp_lock_release+0x8>)
 8009cb2:	f000 b8ae 	b.w	8009e12 <__retarget_lock_release_recursive>
 8009cb6:	bf00      	nop
 8009cb8:	20000329 	.word	0x20000329

08009cbc <__sinit_lock_acquire>:
 8009cbc:	4801      	ldr	r0, [pc, #4]	; (8009cc4 <__sinit_lock_acquire+0x8>)
 8009cbe:	f000 b8a7 	b.w	8009e10 <__retarget_lock_acquire_recursive>
 8009cc2:	bf00      	nop
 8009cc4:	2000032a 	.word	0x2000032a

08009cc8 <__sinit_lock_release>:
 8009cc8:	4801      	ldr	r0, [pc, #4]	; (8009cd0 <__sinit_lock_release+0x8>)
 8009cca:	f000 b8a2 	b.w	8009e12 <__retarget_lock_release_recursive>
 8009cce:	bf00      	nop
 8009cd0:	2000032a 	.word	0x2000032a

08009cd4 <__sinit>:
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	f7ff fff0 	bl	8009cbc <__sinit_lock_acquire>
 8009cdc:	69a3      	ldr	r3, [r4, #24]
 8009cde:	b11b      	cbz	r3, 8009ce8 <__sinit+0x14>
 8009ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce4:	f7ff bff0 	b.w	8009cc8 <__sinit_lock_release>
 8009ce8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cec:	6523      	str	r3, [r4, #80]	; 0x50
 8009cee:	4b13      	ldr	r3, [pc, #76]	; (8009d3c <__sinit+0x68>)
 8009cf0:	4a13      	ldr	r2, [pc, #76]	; (8009d40 <__sinit+0x6c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cf6:	42a3      	cmp	r3, r4
 8009cf8:	bf04      	itt	eq
 8009cfa:	2301      	moveq	r3, #1
 8009cfc:	61a3      	streq	r3, [r4, #24]
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f000 f820 	bl	8009d44 <__sfp>
 8009d04:	6060      	str	r0, [r4, #4]
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 f81c 	bl	8009d44 <__sfp>
 8009d0c:	60a0      	str	r0, [r4, #8]
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f000 f818 	bl	8009d44 <__sfp>
 8009d14:	2200      	movs	r2, #0
 8009d16:	60e0      	str	r0, [r4, #12]
 8009d18:	2104      	movs	r1, #4
 8009d1a:	6860      	ldr	r0, [r4, #4]
 8009d1c:	f7ff ff82 	bl	8009c24 <std>
 8009d20:	68a0      	ldr	r0, [r4, #8]
 8009d22:	2201      	movs	r2, #1
 8009d24:	2109      	movs	r1, #9
 8009d26:	f7ff ff7d 	bl	8009c24 <std>
 8009d2a:	68e0      	ldr	r0, [r4, #12]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	2112      	movs	r1, #18
 8009d30:	f7ff ff78 	bl	8009c24 <std>
 8009d34:	2301      	movs	r3, #1
 8009d36:	61a3      	str	r3, [r4, #24]
 8009d38:	e7d2      	b.n	8009ce0 <__sinit+0xc>
 8009d3a:	bf00      	nop
 8009d3c:	0800ab70 	.word	0x0800ab70
 8009d40:	08009c6d 	.word	0x08009c6d

08009d44 <__sfp>:
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d46:	4607      	mov	r7, r0
 8009d48:	f7ff ffac 	bl	8009ca4 <__sfp_lock_acquire>
 8009d4c:	4b1e      	ldr	r3, [pc, #120]	; (8009dc8 <__sfp+0x84>)
 8009d4e:	681e      	ldr	r6, [r3, #0]
 8009d50:	69b3      	ldr	r3, [r6, #24]
 8009d52:	b913      	cbnz	r3, 8009d5a <__sfp+0x16>
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff ffbd 	bl	8009cd4 <__sinit>
 8009d5a:	3648      	adds	r6, #72	; 0x48
 8009d5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	d503      	bpl.n	8009d6c <__sfp+0x28>
 8009d64:	6833      	ldr	r3, [r6, #0]
 8009d66:	b30b      	cbz	r3, 8009dac <__sfp+0x68>
 8009d68:	6836      	ldr	r6, [r6, #0]
 8009d6a:	e7f7      	b.n	8009d5c <__sfp+0x18>
 8009d6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d70:	b9d5      	cbnz	r5, 8009da8 <__sfp+0x64>
 8009d72:	4b16      	ldr	r3, [pc, #88]	; (8009dcc <__sfp+0x88>)
 8009d74:	60e3      	str	r3, [r4, #12]
 8009d76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d7a:	6665      	str	r5, [r4, #100]	; 0x64
 8009d7c:	f000 f847 	bl	8009e0e <__retarget_lock_init_recursive>
 8009d80:	f7ff ff96 	bl	8009cb0 <__sfp_lock_release>
 8009d84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d8c:	6025      	str	r5, [r4, #0]
 8009d8e:	61a5      	str	r5, [r4, #24]
 8009d90:	2208      	movs	r2, #8
 8009d92:	4629      	mov	r1, r5
 8009d94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d98:	f7ff fd2c 	bl	80097f4 <memset>
 8009d9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009da0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009da4:	4620      	mov	r0, r4
 8009da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da8:	3468      	adds	r4, #104	; 0x68
 8009daa:	e7d9      	b.n	8009d60 <__sfp+0x1c>
 8009dac:	2104      	movs	r1, #4
 8009dae:	4638      	mov	r0, r7
 8009db0:	f7ff ff62 	bl	8009c78 <__sfmoreglue>
 8009db4:	4604      	mov	r4, r0
 8009db6:	6030      	str	r0, [r6, #0]
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d1d5      	bne.n	8009d68 <__sfp+0x24>
 8009dbc:	f7ff ff78 	bl	8009cb0 <__sfp_lock_release>
 8009dc0:	230c      	movs	r3, #12
 8009dc2:	603b      	str	r3, [r7, #0]
 8009dc4:	e7ee      	b.n	8009da4 <__sfp+0x60>
 8009dc6:	bf00      	nop
 8009dc8:	0800ab70 	.word	0x0800ab70
 8009dcc:	ffff0001 	.word	0xffff0001

08009dd0 <_fwalk_reent>:
 8009dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	4688      	mov	r8, r1
 8009dd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ddc:	2700      	movs	r7, #0
 8009dde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009de2:	f1b9 0901 	subs.w	r9, r9, #1
 8009de6:	d505      	bpl.n	8009df4 <_fwalk_reent+0x24>
 8009de8:	6824      	ldr	r4, [r4, #0]
 8009dea:	2c00      	cmp	r4, #0
 8009dec:	d1f7      	bne.n	8009dde <_fwalk_reent+0xe>
 8009dee:	4638      	mov	r0, r7
 8009df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df4:	89ab      	ldrh	r3, [r5, #12]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d907      	bls.n	8009e0a <_fwalk_reent+0x3a>
 8009dfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	d003      	beq.n	8009e0a <_fwalk_reent+0x3a>
 8009e02:	4629      	mov	r1, r5
 8009e04:	4630      	mov	r0, r6
 8009e06:	47c0      	blx	r8
 8009e08:	4307      	orrs	r7, r0
 8009e0a:	3568      	adds	r5, #104	; 0x68
 8009e0c:	e7e9      	b.n	8009de2 <_fwalk_reent+0x12>

08009e0e <__retarget_lock_init_recursive>:
 8009e0e:	4770      	bx	lr

08009e10 <__retarget_lock_acquire_recursive>:
 8009e10:	4770      	bx	lr

08009e12 <__retarget_lock_release_recursive>:
 8009e12:	4770      	bx	lr

08009e14 <__swhatbuf_r>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	460e      	mov	r6, r1
 8009e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	b096      	sub	sp, #88	; 0x58
 8009e20:	4614      	mov	r4, r2
 8009e22:	461d      	mov	r5, r3
 8009e24:	da08      	bge.n	8009e38 <__swhatbuf_r+0x24>
 8009e26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	602a      	str	r2, [r5, #0]
 8009e2e:	061a      	lsls	r2, r3, #24
 8009e30:	d410      	bmi.n	8009e54 <__swhatbuf_r+0x40>
 8009e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e36:	e00e      	b.n	8009e56 <__swhatbuf_r+0x42>
 8009e38:	466a      	mov	r2, sp
 8009e3a:	f000 fc95 	bl	800a768 <_fstat_r>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	dbf1      	blt.n	8009e26 <__swhatbuf_r+0x12>
 8009e42:	9a01      	ldr	r2, [sp, #4]
 8009e44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e4c:	425a      	negs	r2, r3
 8009e4e:	415a      	adcs	r2, r3
 8009e50:	602a      	str	r2, [r5, #0]
 8009e52:	e7ee      	b.n	8009e32 <__swhatbuf_r+0x1e>
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	2000      	movs	r0, #0
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	b016      	add	sp, #88	; 0x58
 8009e5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e60 <__smakebuf_r>:
 8009e60:	898b      	ldrh	r3, [r1, #12]
 8009e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e64:	079d      	lsls	r5, r3, #30
 8009e66:	4606      	mov	r6, r0
 8009e68:	460c      	mov	r4, r1
 8009e6a:	d507      	bpl.n	8009e7c <__smakebuf_r+0x1c>
 8009e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	6123      	str	r3, [r4, #16]
 8009e74:	2301      	movs	r3, #1
 8009e76:	6163      	str	r3, [r4, #20]
 8009e78:	b002      	add	sp, #8
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	ab01      	add	r3, sp, #4
 8009e7e:	466a      	mov	r2, sp
 8009e80:	f7ff ffc8 	bl	8009e14 <__swhatbuf_r>
 8009e84:	9900      	ldr	r1, [sp, #0]
 8009e86:	4605      	mov	r5, r0
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f895 	bl	8009fb8 <_malloc_r>
 8009e8e:	b948      	cbnz	r0, 8009ea4 <__smakebuf_r+0x44>
 8009e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e94:	059a      	lsls	r2, r3, #22
 8009e96:	d4ef      	bmi.n	8009e78 <__smakebuf_r+0x18>
 8009e98:	f023 0303 	bic.w	r3, r3, #3
 8009e9c:	f043 0302 	orr.w	r3, r3, #2
 8009ea0:	81a3      	strh	r3, [r4, #12]
 8009ea2:	e7e3      	b.n	8009e6c <__smakebuf_r+0xc>
 8009ea4:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <__smakebuf_r+0x7c>)
 8009ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	6020      	str	r0, [r4, #0]
 8009eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb0:	81a3      	strh	r3, [r4, #12]
 8009eb2:	9b00      	ldr	r3, [sp, #0]
 8009eb4:	6163      	str	r3, [r4, #20]
 8009eb6:	9b01      	ldr	r3, [sp, #4]
 8009eb8:	6120      	str	r0, [r4, #16]
 8009eba:	b15b      	cbz	r3, 8009ed4 <__smakebuf_r+0x74>
 8009ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f000 fc63 	bl	800a78c <_isatty_r>
 8009ec6:	b128      	cbz	r0, 8009ed4 <__smakebuf_r+0x74>
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	f023 0303 	bic.w	r3, r3, #3
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	81a3      	strh	r3, [r4, #12]
 8009ed4:	89a0      	ldrh	r0, [r4, #12]
 8009ed6:	4305      	orrs	r5, r0
 8009ed8:	81a5      	strh	r5, [r4, #12]
 8009eda:	e7cd      	b.n	8009e78 <__smakebuf_r+0x18>
 8009edc:	08009c6d 	.word	0x08009c6d

08009ee0 <_free_r>:
 8009ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ee2:	2900      	cmp	r1, #0
 8009ee4:	d044      	beq.n	8009f70 <_free_r+0x90>
 8009ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eea:	9001      	str	r0, [sp, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f1a1 0404 	sub.w	r4, r1, #4
 8009ef2:	bfb8      	it	lt
 8009ef4:	18e4      	addlt	r4, r4, r3
 8009ef6:	f000 fc6b 	bl	800a7d0 <__malloc_lock>
 8009efa:	4a1e      	ldr	r2, [pc, #120]	; (8009f74 <_free_r+0x94>)
 8009efc:	9801      	ldr	r0, [sp, #4]
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	b933      	cbnz	r3, 8009f10 <_free_r+0x30>
 8009f02:	6063      	str	r3, [r4, #4]
 8009f04:	6014      	str	r4, [r2, #0]
 8009f06:	b003      	add	sp, #12
 8009f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f0c:	f000 bc66 	b.w	800a7dc <__malloc_unlock>
 8009f10:	42a3      	cmp	r3, r4
 8009f12:	d908      	bls.n	8009f26 <_free_r+0x46>
 8009f14:	6825      	ldr	r5, [r4, #0]
 8009f16:	1961      	adds	r1, r4, r5
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	bf01      	itttt	eq
 8009f1c:	6819      	ldreq	r1, [r3, #0]
 8009f1e:	685b      	ldreq	r3, [r3, #4]
 8009f20:	1949      	addeq	r1, r1, r5
 8009f22:	6021      	streq	r1, [r4, #0]
 8009f24:	e7ed      	b.n	8009f02 <_free_r+0x22>
 8009f26:	461a      	mov	r2, r3
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	b10b      	cbz	r3, 8009f30 <_free_r+0x50>
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	d9fa      	bls.n	8009f26 <_free_r+0x46>
 8009f30:	6811      	ldr	r1, [r2, #0]
 8009f32:	1855      	adds	r5, r2, r1
 8009f34:	42a5      	cmp	r5, r4
 8009f36:	d10b      	bne.n	8009f50 <_free_r+0x70>
 8009f38:	6824      	ldr	r4, [r4, #0]
 8009f3a:	4421      	add	r1, r4
 8009f3c:	1854      	adds	r4, r2, r1
 8009f3e:	42a3      	cmp	r3, r4
 8009f40:	6011      	str	r1, [r2, #0]
 8009f42:	d1e0      	bne.n	8009f06 <_free_r+0x26>
 8009f44:	681c      	ldr	r4, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	6053      	str	r3, [r2, #4]
 8009f4a:	4421      	add	r1, r4
 8009f4c:	6011      	str	r1, [r2, #0]
 8009f4e:	e7da      	b.n	8009f06 <_free_r+0x26>
 8009f50:	d902      	bls.n	8009f58 <_free_r+0x78>
 8009f52:	230c      	movs	r3, #12
 8009f54:	6003      	str	r3, [r0, #0]
 8009f56:	e7d6      	b.n	8009f06 <_free_r+0x26>
 8009f58:	6825      	ldr	r5, [r4, #0]
 8009f5a:	1961      	adds	r1, r4, r5
 8009f5c:	428b      	cmp	r3, r1
 8009f5e:	bf04      	itt	eq
 8009f60:	6819      	ldreq	r1, [r3, #0]
 8009f62:	685b      	ldreq	r3, [r3, #4]
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	bf04      	itt	eq
 8009f68:	1949      	addeq	r1, r1, r5
 8009f6a:	6021      	streq	r1, [r4, #0]
 8009f6c:	6054      	str	r4, [r2, #4]
 8009f6e:	e7ca      	b.n	8009f06 <_free_r+0x26>
 8009f70:	b003      	add	sp, #12
 8009f72:	bd30      	pop	{r4, r5, pc}
 8009f74:	2000032c 	.word	0x2000032c

08009f78 <sbrk_aligned>:
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	4e0e      	ldr	r6, [pc, #56]	; (8009fb4 <sbrk_aligned+0x3c>)
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	6831      	ldr	r1, [r6, #0]
 8009f80:	4605      	mov	r5, r0
 8009f82:	b911      	cbnz	r1, 8009f8a <sbrk_aligned+0x12>
 8009f84:	f000 fb7a 	bl	800a67c <_sbrk_r>
 8009f88:	6030      	str	r0, [r6, #0]
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f000 fb75 	bl	800a67c <_sbrk_r>
 8009f92:	1c43      	adds	r3, r0, #1
 8009f94:	d00a      	beq.n	8009fac <sbrk_aligned+0x34>
 8009f96:	1cc4      	adds	r4, r0, #3
 8009f98:	f024 0403 	bic.w	r4, r4, #3
 8009f9c:	42a0      	cmp	r0, r4
 8009f9e:	d007      	beq.n	8009fb0 <sbrk_aligned+0x38>
 8009fa0:	1a21      	subs	r1, r4, r0
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	f000 fb6a 	bl	800a67c <_sbrk_r>
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d101      	bne.n	8009fb0 <sbrk_aligned+0x38>
 8009fac:	f04f 34ff 	mov.w	r4, #4294967295
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	20000330 	.word	0x20000330

08009fb8 <_malloc_r>:
 8009fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbc:	1ccd      	adds	r5, r1, #3
 8009fbe:	f025 0503 	bic.w	r5, r5, #3
 8009fc2:	3508      	adds	r5, #8
 8009fc4:	2d0c      	cmp	r5, #12
 8009fc6:	bf38      	it	cc
 8009fc8:	250c      	movcc	r5, #12
 8009fca:	2d00      	cmp	r5, #0
 8009fcc:	4607      	mov	r7, r0
 8009fce:	db01      	blt.n	8009fd4 <_malloc_r+0x1c>
 8009fd0:	42a9      	cmp	r1, r5
 8009fd2:	d905      	bls.n	8009fe0 <_malloc_r+0x28>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	2600      	movs	r6, #0
 8009fda:	4630      	mov	r0, r6
 8009fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe0:	4e2e      	ldr	r6, [pc, #184]	; (800a09c <_malloc_r+0xe4>)
 8009fe2:	f000 fbf5 	bl	800a7d0 <__malloc_lock>
 8009fe6:	6833      	ldr	r3, [r6, #0]
 8009fe8:	461c      	mov	r4, r3
 8009fea:	bb34      	cbnz	r4, 800a03a <_malloc_r+0x82>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4638      	mov	r0, r7
 8009ff0:	f7ff ffc2 	bl	8009f78 <sbrk_aligned>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	d14d      	bne.n	800a096 <_malloc_r+0xde>
 8009ffa:	6834      	ldr	r4, [r6, #0]
 8009ffc:	4626      	mov	r6, r4
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	d140      	bne.n	800a084 <_malloc_r+0xcc>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	4631      	mov	r1, r6
 800a006:	4638      	mov	r0, r7
 800a008:	eb04 0803 	add.w	r8, r4, r3
 800a00c:	f000 fb36 	bl	800a67c <_sbrk_r>
 800a010:	4580      	cmp	r8, r0
 800a012:	d13a      	bne.n	800a08a <_malloc_r+0xd2>
 800a014:	6821      	ldr	r1, [r4, #0]
 800a016:	3503      	adds	r5, #3
 800a018:	1a6d      	subs	r5, r5, r1
 800a01a:	f025 0503 	bic.w	r5, r5, #3
 800a01e:	3508      	adds	r5, #8
 800a020:	2d0c      	cmp	r5, #12
 800a022:	bf38      	it	cc
 800a024:	250c      	movcc	r5, #12
 800a026:	4629      	mov	r1, r5
 800a028:	4638      	mov	r0, r7
 800a02a:	f7ff ffa5 	bl	8009f78 <sbrk_aligned>
 800a02e:	3001      	adds	r0, #1
 800a030:	d02b      	beq.n	800a08a <_malloc_r+0xd2>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	442b      	add	r3, r5
 800a036:	6023      	str	r3, [r4, #0]
 800a038:	e00e      	b.n	800a058 <_malloc_r+0xa0>
 800a03a:	6822      	ldr	r2, [r4, #0]
 800a03c:	1b52      	subs	r2, r2, r5
 800a03e:	d41e      	bmi.n	800a07e <_malloc_r+0xc6>
 800a040:	2a0b      	cmp	r2, #11
 800a042:	d916      	bls.n	800a072 <_malloc_r+0xba>
 800a044:	1961      	adds	r1, r4, r5
 800a046:	42a3      	cmp	r3, r4
 800a048:	6025      	str	r5, [r4, #0]
 800a04a:	bf18      	it	ne
 800a04c:	6059      	strne	r1, [r3, #4]
 800a04e:	6863      	ldr	r3, [r4, #4]
 800a050:	bf08      	it	eq
 800a052:	6031      	streq	r1, [r6, #0]
 800a054:	5162      	str	r2, [r4, r5]
 800a056:	604b      	str	r3, [r1, #4]
 800a058:	4638      	mov	r0, r7
 800a05a:	f104 060b 	add.w	r6, r4, #11
 800a05e:	f000 fbbd 	bl	800a7dc <__malloc_unlock>
 800a062:	f026 0607 	bic.w	r6, r6, #7
 800a066:	1d23      	adds	r3, r4, #4
 800a068:	1af2      	subs	r2, r6, r3
 800a06a:	d0b6      	beq.n	8009fda <_malloc_r+0x22>
 800a06c:	1b9b      	subs	r3, r3, r6
 800a06e:	50a3      	str	r3, [r4, r2]
 800a070:	e7b3      	b.n	8009fda <_malloc_r+0x22>
 800a072:	6862      	ldr	r2, [r4, #4]
 800a074:	42a3      	cmp	r3, r4
 800a076:	bf0c      	ite	eq
 800a078:	6032      	streq	r2, [r6, #0]
 800a07a:	605a      	strne	r2, [r3, #4]
 800a07c:	e7ec      	b.n	800a058 <_malloc_r+0xa0>
 800a07e:	4623      	mov	r3, r4
 800a080:	6864      	ldr	r4, [r4, #4]
 800a082:	e7b2      	b.n	8009fea <_malloc_r+0x32>
 800a084:	4634      	mov	r4, r6
 800a086:	6876      	ldr	r6, [r6, #4]
 800a088:	e7b9      	b.n	8009ffe <_malloc_r+0x46>
 800a08a:	230c      	movs	r3, #12
 800a08c:	603b      	str	r3, [r7, #0]
 800a08e:	4638      	mov	r0, r7
 800a090:	f000 fba4 	bl	800a7dc <__malloc_unlock>
 800a094:	e7a1      	b.n	8009fda <_malloc_r+0x22>
 800a096:	6025      	str	r5, [r4, #0]
 800a098:	e7de      	b.n	800a058 <_malloc_r+0xa0>
 800a09a:	bf00      	nop
 800a09c:	2000032c 	.word	0x2000032c

0800a0a0 <__sfputc_r>:
 800a0a0:	6893      	ldr	r3, [r2, #8]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	b410      	push	{r4}
 800a0a8:	6093      	str	r3, [r2, #8]
 800a0aa:	da08      	bge.n	800a0be <__sfputc_r+0x1e>
 800a0ac:	6994      	ldr	r4, [r2, #24]
 800a0ae:	42a3      	cmp	r3, r4
 800a0b0:	db01      	blt.n	800a0b6 <__sfputc_r+0x16>
 800a0b2:	290a      	cmp	r1, #10
 800a0b4:	d103      	bne.n	800a0be <__sfputc_r+0x1e>
 800a0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ba:	f7ff bc31 	b.w	8009920 <__swbuf_r>
 800a0be:	6813      	ldr	r3, [r2, #0]
 800a0c0:	1c58      	adds	r0, r3, #1
 800a0c2:	6010      	str	r0, [r2, #0]
 800a0c4:	7019      	strb	r1, [r3, #0]
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <__sfputs_r>:
 800a0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	18d5      	adds	r5, r2, r3
 800a0d8:	42ac      	cmp	r4, r5
 800a0da:	d101      	bne.n	800a0e0 <__sfputs_r+0x12>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e007      	b.n	800a0f0 <__sfputs_r+0x22>
 800a0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e4:	463a      	mov	r2, r7
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f7ff ffda 	bl	800a0a0 <__sfputc_r>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d1f3      	bne.n	800a0d8 <__sfputs_r+0xa>
 800a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0f4 <_vfiprintf_r>:
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	b09d      	sub	sp, #116	; 0x74
 800a0fc:	4614      	mov	r4, r2
 800a0fe:	4698      	mov	r8, r3
 800a100:	4606      	mov	r6, r0
 800a102:	b118      	cbz	r0, 800a10c <_vfiprintf_r+0x18>
 800a104:	6983      	ldr	r3, [r0, #24]
 800a106:	b90b      	cbnz	r3, 800a10c <_vfiprintf_r+0x18>
 800a108:	f7ff fde4 	bl	8009cd4 <__sinit>
 800a10c:	4b89      	ldr	r3, [pc, #548]	; (800a334 <_vfiprintf_r+0x240>)
 800a10e:	429d      	cmp	r5, r3
 800a110:	d11b      	bne.n	800a14a <_vfiprintf_r+0x56>
 800a112:	6875      	ldr	r5, [r6, #4]
 800a114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a116:	07d9      	lsls	r1, r3, #31
 800a118:	d405      	bmi.n	800a126 <_vfiprintf_r+0x32>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	059a      	lsls	r2, r3, #22
 800a11e:	d402      	bmi.n	800a126 <_vfiprintf_r+0x32>
 800a120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a122:	f7ff fe75 	bl	8009e10 <__retarget_lock_acquire_recursive>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	071b      	lsls	r3, r3, #28
 800a12a:	d501      	bpl.n	800a130 <_vfiprintf_r+0x3c>
 800a12c:	692b      	ldr	r3, [r5, #16]
 800a12e:	b9eb      	cbnz	r3, 800a16c <_vfiprintf_r+0x78>
 800a130:	4629      	mov	r1, r5
 800a132:	4630      	mov	r0, r6
 800a134:	f7ff fc46 	bl	80099c4 <__swsetup_r>
 800a138:	b1c0      	cbz	r0, 800a16c <_vfiprintf_r+0x78>
 800a13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a13c:	07dc      	lsls	r4, r3, #31
 800a13e:	d50e      	bpl.n	800a15e <_vfiprintf_r+0x6a>
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	b01d      	add	sp, #116	; 0x74
 800a146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a14a:	4b7b      	ldr	r3, [pc, #492]	; (800a338 <_vfiprintf_r+0x244>)
 800a14c:	429d      	cmp	r5, r3
 800a14e:	d101      	bne.n	800a154 <_vfiprintf_r+0x60>
 800a150:	68b5      	ldr	r5, [r6, #8]
 800a152:	e7df      	b.n	800a114 <_vfiprintf_r+0x20>
 800a154:	4b79      	ldr	r3, [pc, #484]	; (800a33c <_vfiprintf_r+0x248>)
 800a156:	429d      	cmp	r5, r3
 800a158:	bf08      	it	eq
 800a15a:	68f5      	ldreq	r5, [r6, #12]
 800a15c:	e7da      	b.n	800a114 <_vfiprintf_r+0x20>
 800a15e:	89ab      	ldrh	r3, [r5, #12]
 800a160:	0598      	lsls	r0, r3, #22
 800a162:	d4ed      	bmi.n	800a140 <_vfiprintf_r+0x4c>
 800a164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a166:	f7ff fe54 	bl	8009e12 <__retarget_lock_release_recursive>
 800a16a:	e7e9      	b.n	800a140 <_vfiprintf_r+0x4c>
 800a16c:	2300      	movs	r3, #0
 800a16e:	9309      	str	r3, [sp, #36]	; 0x24
 800a170:	2320      	movs	r3, #32
 800a172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a176:	f8cd 800c 	str.w	r8, [sp, #12]
 800a17a:	2330      	movs	r3, #48	; 0x30
 800a17c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a340 <_vfiprintf_r+0x24c>
 800a180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a184:	f04f 0901 	mov.w	r9, #1
 800a188:	4623      	mov	r3, r4
 800a18a:	469a      	mov	sl, r3
 800a18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a190:	b10a      	cbz	r2, 800a196 <_vfiprintf_r+0xa2>
 800a192:	2a25      	cmp	r2, #37	; 0x25
 800a194:	d1f9      	bne.n	800a18a <_vfiprintf_r+0x96>
 800a196:	ebba 0b04 	subs.w	fp, sl, r4
 800a19a:	d00b      	beq.n	800a1b4 <_vfiprintf_r+0xc0>
 800a19c:	465b      	mov	r3, fp
 800a19e:	4622      	mov	r2, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f7ff ff93 	bl	800a0ce <__sfputs_r>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	f000 80aa 	beq.w	800a302 <_vfiprintf_r+0x20e>
 800a1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b0:	445a      	add	r2, fp
 800a1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80a2 	beq.w	800a302 <_vfiprintf_r+0x20e>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1c8:	f10a 0a01 	add.w	sl, sl, #1
 800a1cc:	9304      	str	r3, [sp, #16]
 800a1ce:	9307      	str	r3, [sp, #28]
 800a1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1d4:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d6:	4654      	mov	r4, sl
 800a1d8:	2205      	movs	r2, #5
 800a1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1de:	4858      	ldr	r0, [pc, #352]	; (800a340 <_vfiprintf_r+0x24c>)
 800a1e0:	f7f6 fd0e 	bl	8000c00 <memchr>
 800a1e4:	9a04      	ldr	r2, [sp, #16]
 800a1e6:	b9d8      	cbnz	r0, 800a220 <_vfiprintf_r+0x12c>
 800a1e8:	06d1      	lsls	r1, r2, #27
 800a1ea:	bf44      	itt	mi
 800a1ec:	2320      	movmi	r3, #32
 800a1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f2:	0713      	lsls	r3, r2, #28
 800a1f4:	bf44      	itt	mi
 800a1f6:	232b      	movmi	r3, #43	; 0x2b
 800a1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a200:	2b2a      	cmp	r3, #42	; 0x2a
 800a202:	d015      	beq.n	800a230 <_vfiprintf_r+0x13c>
 800a204:	9a07      	ldr	r2, [sp, #28]
 800a206:	4654      	mov	r4, sl
 800a208:	2000      	movs	r0, #0
 800a20a:	f04f 0c0a 	mov.w	ip, #10
 800a20e:	4621      	mov	r1, r4
 800a210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a214:	3b30      	subs	r3, #48	; 0x30
 800a216:	2b09      	cmp	r3, #9
 800a218:	d94e      	bls.n	800a2b8 <_vfiprintf_r+0x1c4>
 800a21a:	b1b0      	cbz	r0, 800a24a <_vfiprintf_r+0x156>
 800a21c:	9207      	str	r2, [sp, #28]
 800a21e:	e014      	b.n	800a24a <_vfiprintf_r+0x156>
 800a220:	eba0 0308 	sub.w	r3, r0, r8
 800a224:	fa09 f303 	lsl.w	r3, r9, r3
 800a228:	4313      	orrs	r3, r2
 800a22a:	9304      	str	r3, [sp, #16]
 800a22c:	46a2      	mov	sl, r4
 800a22e:	e7d2      	b.n	800a1d6 <_vfiprintf_r+0xe2>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	1d19      	adds	r1, r3, #4
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	9103      	str	r1, [sp, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bfbb      	ittet	lt
 800a23c:	425b      	neglt	r3, r3
 800a23e:	f042 0202 	orrlt.w	r2, r2, #2
 800a242:	9307      	strge	r3, [sp, #28]
 800a244:	9307      	strlt	r3, [sp, #28]
 800a246:	bfb8      	it	lt
 800a248:	9204      	strlt	r2, [sp, #16]
 800a24a:	7823      	ldrb	r3, [r4, #0]
 800a24c:	2b2e      	cmp	r3, #46	; 0x2e
 800a24e:	d10c      	bne.n	800a26a <_vfiprintf_r+0x176>
 800a250:	7863      	ldrb	r3, [r4, #1]
 800a252:	2b2a      	cmp	r3, #42	; 0x2a
 800a254:	d135      	bne.n	800a2c2 <_vfiprintf_r+0x1ce>
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	1d1a      	adds	r2, r3, #4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	9203      	str	r2, [sp, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bfb8      	it	lt
 800a262:	f04f 33ff 	movlt.w	r3, #4294967295
 800a266:	3402      	adds	r4, #2
 800a268:	9305      	str	r3, [sp, #20]
 800a26a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a350 <_vfiprintf_r+0x25c>
 800a26e:	7821      	ldrb	r1, [r4, #0]
 800a270:	2203      	movs	r2, #3
 800a272:	4650      	mov	r0, sl
 800a274:	f7f6 fcc4 	bl	8000c00 <memchr>
 800a278:	b140      	cbz	r0, 800a28c <_vfiprintf_r+0x198>
 800a27a:	2340      	movs	r3, #64	; 0x40
 800a27c:	eba0 000a 	sub.w	r0, r0, sl
 800a280:	fa03 f000 	lsl.w	r0, r3, r0
 800a284:	9b04      	ldr	r3, [sp, #16]
 800a286:	4303      	orrs	r3, r0
 800a288:	3401      	adds	r4, #1
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a290:	482c      	ldr	r0, [pc, #176]	; (800a344 <_vfiprintf_r+0x250>)
 800a292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a296:	2206      	movs	r2, #6
 800a298:	f7f6 fcb2 	bl	8000c00 <memchr>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d03f      	beq.n	800a320 <_vfiprintf_r+0x22c>
 800a2a0:	4b29      	ldr	r3, [pc, #164]	; (800a348 <_vfiprintf_r+0x254>)
 800a2a2:	bb1b      	cbnz	r3, 800a2ec <_vfiprintf_r+0x1f8>
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	3307      	adds	r3, #7
 800a2a8:	f023 0307 	bic.w	r3, r3, #7
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	9303      	str	r3, [sp, #12]
 800a2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b2:	443b      	add	r3, r7
 800a2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b6:	e767      	b.n	800a188 <_vfiprintf_r+0x94>
 800a2b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2bc:	460c      	mov	r4, r1
 800a2be:	2001      	movs	r0, #1
 800a2c0:	e7a5      	b.n	800a20e <_vfiprintf_r+0x11a>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	3401      	adds	r4, #1
 800a2c6:	9305      	str	r3, [sp, #20]
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	f04f 0c0a 	mov.w	ip, #10
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d4:	3a30      	subs	r2, #48	; 0x30
 800a2d6:	2a09      	cmp	r2, #9
 800a2d8:	d903      	bls.n	800a2e2 <_vfiprintf_r+0x1ee>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0c5      	beq.n	800a26a <_vfiprintf_r+0x176>
 800a2de:	9105      	str	r1, [sp, #20]
 800a2e0:	e7c3      	b.n	800a26a <_vfiprintf_r+0x176>
 800a2e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e7f0      	b.n	800a2ce <_vfiprintf_r+0x1da>
 800a2ec:	ab03      	add	r3, sp, #12
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	462a      	mov	r2, r5
 800a2f2:	4b16      	ldr	r3, [pc, #88]	; (800a34c <_vfiprintf_r+0x258>)
 800a2f4:	a904      	add	r1, sp, #16
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f3af 8000 	nop.w
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	1c78      	adds	r0, r7, #1
 800a300:	d1d6      	bne.n	800a2b0 <_vfiprintf_r+0x1bc>
 800a302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a304:	07d9      	lsls	r1, r3, #31
 800a306:	d405      	bmi.n	800a314 <_vfiprintf_r+0x220>
 800a308:	89ab      	ldrh	r3, [r5, #12]
 800a30a:	059a      	lsls	r2, r3, #22
 800a30c:	d402      	bmi.n	800a314 <_vfiprintf_r+0x220>
 800a30e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a310:	f7ff fd7f 	bl	8009e12 <__retarget_lock_release_recursive>
 800a314:	89ab      	ldrh	r3, [r5, #12]
 800a316:	065b      	lsls	r3, r3, #25
 800a318:	f53f af12 	bmi.w	800a140 <_vfiprintf_r+0x4c>
 800a31c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a31e:	e711      	b.n	800a144 <_vfiprintf_r+0x50>
 800a320:	ab03      	add	r3, sp, #12
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	462a      	mov	r2, r5
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <_vfiprintf_r+0x258>)
 800a328:	a904      	add	r1, sp, #16
 800a32a:	4630      	mov	r0, r6
 800a32c:	f000 f880 	bl	800a430 <_printf_i>
 800a330:	e7e4      	b.n	800a2fc <_vfiprintf_r+0x208>
 800a332:	bf00      	nop
 800a334:	0800ab94 	.word	0x0800ab94
 800a338:	0800abb4 	.word	0x0800abb4
 800a33c:	0800ab74 	.word	0x0800ab74
 800a340:	0800abd4 	.word	0x0800abd4
 800a344:	0800abde 	.word	0x0800abde
 800a348:	00000000 	.word	0x00000000
 800a34c:	0800a0cf 	.word	0x0800a0cf
 800a350:	0800abda 	.word	0x0800abda

0800a354 <_printf_common>:
 800a354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a358:	4616      	mov	r6, r2
 800a35a:	4699      	mov	r9, r3
 800a35c:	688a      	ldr	r2, [r1, #8]
 800a35e:	690b      	ldr	r3, [r1, #16]
 800a360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a364:	4293      	cmp	r3, r2
 800a366:	bfb8      	it	lt
 800a368:	4613      	movlt	r3, r2
 800a36a:	6033      	str	r3, [r6, #0]
 800a36c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a370:	4607      	mov	r7, r0
 800a372:	460c      	mov	r4, r1
 800a374:	b10a      	cbz	r2, 800a37a <_printf_common+0x26>
 800a376:	3301      	adds	r3, #1
 800a378:	6033      	str	r3, [r6, #0]
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	0699      	lsls	r1, r3, #26
 800a37e:	bf42      	ittt	mi
 800a380:	6833      	ldrmi	r3, [r6, #0]
 800a382:	3302      	addmi	r3, #2
 800a384:	6033      	strmi	r3, [r6, #0]
 800a386:	6825      	ldr	r5, [r4, #0]
 800a388:	f015 0506 	ands.w	r5, r5, #6
 800a38c:	d106      	bne.n	800a39c <_printf_common+0x48>
 800a38e:	f104 0a19 	add.w	sl, r4, #25
 800a392:	68e3      	ldr	r3, [r4, #12]
 800a394:	6832      	ldr	r2, [r6, #0]
 800a396:	1a9b      	subs	r3, r3, r2
 800a398:	42ab      	cmp	r3, r5
 800a39a:	dc26      	bgt.n	800a3ea <_printf_common+0x96>
 800a39c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3a0:	1e13      	subs	r3, r2, #0
 800a3a2:	6822      	ldr	r2, [r4, #0]
 800a3a4:	bf18      	it	ne
 800a3a6:	2301      	movne	r3, #1
 800a3a8:	0692      	lsls	r2, r2, #26
 800a3aa:	d42b      	bmi.n	800a404 <_printf_common+0xb0>
 800a3ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	47c0      	blx	r8
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d01e      	beq.n	800a3f8 <_printf_common+0xa4>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	68e5      	ldr	r5, [r4, #12]
 800a3be:	6832      	ldr	r2, [r6, #0]
 800a3c0:	f003 0306 	and.w	r3, r3, #6
 800a3c4:	2b04      	cmp	r3, #4
 800a3c6:	bf08      	it	eq
 800a3c8:	1aad      	subeq	r5, r5, r2
 800a3ca:	68a3      	ldr	r3, [r4, #8]
 800a3cc:	6922      	ldr	r2, [r4, #16]
 800a3ce:	bf0c      	ite	eq
 800a3d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3d4:	2500      	movne	r5, #0
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	bfc4      	itt	gt
 800a3da:	1a9b      	subgt	r3, r3, r2
 800a3dc:	18ed      	addgt	r5, r5, r3
 800a3de:	2600      	movs	r6, #0
 800a3e0:	341a      	adds	r4, #26
 800a3e2:	42b5      	cmp	r5, r6
 800a3e4:	d11a      	bne.n	800a41c <_printf_common+0xc8>
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	e008      	b.n	800a3fc <_printf_common+0xa8>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	4652      	mov	r2, sl
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	4638      	mov	r0, r7
 800a3f2:	47c0      	blx	r8
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d103      	bne.n	800a400 <_printf_common+0xac>
 800a3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a400:	3501      	adds	r5, #1
 800a402:	e7c6      	b.n	800a392 <_printf_common+0x3e>
 800a404:	18e1      	adds	r1, r4, r3
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	2030      	movs	r0, #48	; 0x30
 800a40a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a40e:	4422      	add	r2, r4
 800a410:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a414:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a418:	3302      	adds	r3, #2
 800a41a:	e7c7      	b.n	800a3ac <_printf_common+0x58>
 800a41c:	2301      	movs	r3, #1
 800a41e:	4622      	mov	r2, r4
 800a420:	4649      	mov	r1, r9
 800a422:	4638      	mov	r0, r7
 800a424:	47c0      	blx	r8
 800a426:	3001      	adds	r0, #1
 800a428:	d0e6      	beq.n	800a3f8 <_printf_common+0xa4>
 800a42a:	3601      	adds	r6, #1
 800a42c:	e7d9      	b.n	800a3e2 <_printf_common+0x8e>
	...

0800a430 <_printf_i>:
 800a430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	7e0f      	ldrb	r7, [r1, #24]
 800a436:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a438:	2f78      	cmp	r7, #120	; 0x78
 800a43a:	4691      	mov	r9, r2
 800a43c:	4680      	mov	r8, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	469a      	mov	sl, r3
 800a442:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a446:	d807      	bhi.n	800a458 <_printf_i+0x28>
 800a448:	2f62      	cmp	r7, #98	; 0x62
 800a44a:	d80a      	bhi.n	800a462 <_printf_i+0x32>
 800a44c:	2f00      	cmp	r7, #0
 800a44e:	f000 80d8 	beq.w	800a602 <_printf_i+0x1d2>
 800a452:	2f58      	cmp	r7, #88	; 0x58
 800a454:	f000 80a3 	beq.w	800a59e <_printf_i+0x16e>
 800a458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a45c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a460:	e03a      	b.n	800a4d8 <_printf_i+0xa8>
 800a462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a466:	2b15      	cmp	r3, #21
 800a468:	d8f6      	bhi.n	800a458 <_printf_i+0x28>
 800a46a:	a101      	add	r1, pc, #4	; (adr r1, 800a470 <_printf_i+0x40>)
 800a46c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a470:	0800a4c9 	.word	0x0800a4c9
 800a474:	0800a4dd 	.word	0x0800a4dd
 800a478:	0800a459 	.word	0x0800a459
 800a47c:	0800a459 	.word	0x0800a459
 800a480:	0800a459 	.word	0x0800a459
 800a484:	0800a459 	.word	0x0800a459
 800a488:	0800a4dd 	.word	0x0800a4dd
 800a48c:	0800a459 	.word	0x0800a459
 800a490:	0800a459 	.word	0x0800a459
 800a494:	0800a459 	.word	0x0800a459
 800a498:	0800a459 	.word	0x0800a459
 800a49c:	0800a5e9 	.word	0x0800a5e9
 800a4a0:	0800a50d 	.word	0x0800a50d
 800a4a4:	0800a5cb 	.word	0x0800a5cb
 800a4a8:	0800a459 	.word	0x0800a459
 800a4ac:	0800a459 	.word	0x0800a459
 800a4b0:	0800a60b 	.word	0x0800a60b
 800a4b4:	0800a459 	.word	0x0800a459
 800a4b8:	0800a50d 	.word	0x0800a50d
 800a4bc:	0800a459 	.word	0x0800a459
 800a4c0:	0800a459 	.word	0x0800a459
 800a4c4:	0800a5d3 	.word	0x0800a5d3
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	1d1a      	adds	r2, r3, #4
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	602a      	str	r2, [r5, #0]
 800a4d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e0a3      	b.n	800a624 <_printf_i+0x1f4>
 800a4dc:	6820      	ldr	r0, [r4, #0]
 800a4de:	6829      	ldr	r1, [r5, #0]
 800a4e0:	0606      	lsls	r6, r0, #24
 800a4e2:	f101 0304 	add.w	r3, r1, #4
 800a4e6:	d50a      	bpl.n	800a4fe <_printf_i+0xce>
 800a4e8:	680e      	ldr	r6, [r1, #0]
 800a4ea:	602b      	str	r3, [r5, #0]
 800a4ec:	2e00      	cmp	r6, #0
 800a4ee:	da03      	bge.n	800a4f8 <_printf_i+0xc8>
 800a4f0:	232d      	movs	r3, #45	; 0x2d
 800a4f2:	4276      	negs	r6, r6
 800a4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4f8:	485e      	ldr	r0, [pc, #376]	; (800a674 <_printf_i+0x244>)
 800a4fa:	230a      	movs	r3, #10
 800a4fc:	e019      	b.n	800a532 <_printf_i+0x102>
 800a4fe:	680e      	ldr	r6, [r1, #0]
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a506:	bf18      	it	ne
 800a508:	b236      	sxthne	r6, r6
 800a50a:	e7ef      	b.n	800a4ec <_printf_i+0xbc>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	6820      	ldr	r0, [r4, #0]
 800a510:	1d19      	adds	r1, r3, #4
 800a512:	6029      	str	r1, [r5, #0]
 800a514:	0601      	lsls	r1, r0, #24
 800a516:	d501      	bpl.n	800a51c <_printf_i+0xec>
 800a518:	681e      	ldr	r6, [r3, #0]
 800a51a:	e002      	b.n	800a522 <_printf_i+0xf2>
 800a51c:	0646      	lsls	r6, r0, #25
 800a51e:	d5fb      	bpl.n	800a518 <_printf_i+0xe8>
 800a520:	881e      	ldrh	r6, [r3, #0]
 800a522:	4854      	ldr	r0, [pc, #336]	; (800a674 <_printf_i+0x244>)
 800a524:	2f6f      	cmp	r7, #111	; 0x6f
 800a526:	bf0c      	ite	eq
 800a528:	2308      	moveq	r3, #8
 800a52a:	230a      	movne	r3, #10
 800a52c:	2100      	movs	r1, #0
 800a52e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a532:	6865      	ldr	r5, [r4, #4]
 800a534:	60a5      	str	r5, [r4, #8]
 800a536:	2d00      	cmp	r5, #0
 800a538:	bfa2      	ittt	ge
 800a53a:	6821      	ldrge	r1, [r4, #0]
 800a53c:	f021 0104 	bicge.w	r1, r1, #4
 800a540:	6021      	strge	r1, [r4, #0]
 800a542:	b90e      	cbnz	r6, 800a548 <_printf_i+0x118>
 800a544:	2d00      	cmp	r5, #0
 800a546:	d04d      	beq.n	800a5e4 <_printf_i+0x1b4>
 800a548:	4615      	mov	r5, r2
 800a54a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a54e:	fb03 6711 	mls	r7, r3, r1, r6
 800a552:	5dc7      	ldrb	r7, [r0, r7]
 800a554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a558:	4637      	mov	r7, r6
 800a55a:	42bb      	cmp	r3, r7
 800a55c:	460e      	mov	r6, r1
 800a55e:	d9f4      	bls.n	800a54a <_printf_i+0x11a>
 800a560:	2b08      	cmp	r3, #8
 800a562:	d10b      	bne.n	800a57c <_printf_i+0x14c>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	07de      	lsls	r6, r3, #31
 800a568:	d508      	bpl.n	800a57c <_printf_i+0x14c>
 800a56a:	6923      	ldr	r3, [r4, #16]
 800a56c:	6861      	ldr	r1, [r4, #4]
 800a56e:	4299      	cmp	r1, r3
 800a570:	bfde      	ittt	le
 800a572:	2330      	movle	r3, #48	; 0x30
 800a574:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a578:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a57c:	1b52      	subs	r2, r2, r5
 800a57e:	6122      	str	r2, [r4, #16]
 800a580:	f8cd a000 	str.w	sl, [sp]
 800a584:	464b      	mov	r3, r9
 800a586:	aa03      	add	r2, sp, #12
 800a588:	4621      	mov	r1, r4
 800a58a:	4640      	mov	r0, r8
 800a58c:	f7ff fee2 	bl	800a354 <_printf_common>
 800a590:	3001      	adds	r0, #1
 800a592:	d14c      	bne.n	800a62e <_printf_i+0x1fe>
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	b004      	add	sp, #16
 800a59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a59e:	4835      	ldr	r0, [pc, #212]	; (800a674 <_printf_i+0x244>)
 800a5a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a5a4:	6829      	ldr	r1, [r5, #0]
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5ac:	6029      	str	r1, [r5, #0]
 800a5ae:	061d      	lsls	r5, r3, #24
 800a5b0:	d514      	bpl.n	800a5dc <_printf_i+0x1ac>
 800a5b2:	07df      	lsls	r7, r3, #31
 800a5b4:	bf44      	itt	mi
 800a5b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a5ba:	6023      	strmi	r3, [r4, #0]
 800a5bc:	b91e      	cbnz	r6, 800a5c6 <_printf_i+0x196>
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	f023 0320 	bic.w	r3, r3, #32
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	2310      	movs	r3, #16
 800a5c8:	e7b0      	b.n	800a52c <_printf_i+0xfc>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	f043 0320 	orr.w	r3, r3, #32
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	2378      	movs	r3, #120	; 0x78
 800a5d4:	4828      	ldr	r0, [pc, #160]	; (800a678 <_printf_i+0x248>)
 800a5d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5da:	e7e3      	b.n	800a5a4 <_printf_i+0x174>
 800a5dc:	0659      	lsls	r1, r3, #25
 800a5de:	bf48      	it	mi
 800a5e0:	b2b6      	uxthmi	r6, r6
 800a5e2:	e7e6      	b.n	800a5b2 <_printf_i+0x182>
 800a5e4:	4615      	mov	r5, r2
 800a5e6:	e7bb      	b.n	800a560 <_printf_i+0x130>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	6826      	ldr	r6, [r4, #0]
 800a5ec:	6961      	ldr	r1, [r4, #20]
 800a5ee:	1d18      	adds	r0, r3, #4
 800a5f0:	6028      	str	r0, [r5, #0]
 800a5f2:	0635      	lsls	r5, r6, #24
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	d501      	bpl.n	800a5fc <_printf_i+0x1cc>
 800a5f8:	6019      	str	r1, [r3, #0]
 800a5fa:	e002      	b.n	800a602 <_printf_i+0x1d2>
 800a5fc:	0670      	lsls	r0, r6, #25
 800a5fe:	d5fb      	bpl.n	800a5f8 <_printf_i+0x1c8>
 800a600:	8019      	strh	r1, [r3, #0]
 800a602:	2300      	movs	r3, #0
 800a604:	6123      	str	r3, [r4, #16]
 800a606:	4615      	mov	r5, r2
 800a608:	e7ba      	b.n	800a580 <_printf_i+0x150>
 800a60a:	682b      	ldr	r3, [r5, #0]
 800a60c:	1d1a      	adds	r2, r3, #4
 800a60e:	602a      	str	r2, [r5, #0]
 800a610:	681d      	ldr	r5, [r3, #0]
 800a612:	6862      	ldr	r2, [r4, #4]
 800a614:	2100      	movs	r1, #0
 800a616:	4628      	mov	r0, r5
 800a618:	f7f6 faf2 	bl	8000c00 <memchr>
 800a61c:	b108      	cbz	r0, 800a622 <_printf_i+0x1f2>
 800a61e:	1b40      	subs	r0, r0, r5
 800a620:	6060      	str	r0, [r4, #4]
 800a622:	6863      	ldr	r3, [r4, #4]
 800a624:	6123      	str	r3, [r4, #16]
 800a626:	2300      	movs	r3, #0
 800a628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a62c:	e7a8      	b.n	800a580 <_printf_i+0x150>
 800a62e:	6923      	ldr	r3, [r4, #16]
 800a630:	462a      	mov	r2, r5
 800a632:	4649      	mov	r1, r9
 800a634:	4640      	mov	r0, r8
 800a636:	47d0      	blx	sl
 800a638:	3001      	adds	r0, #1
 800a63a:	d0ab      	beq.n	800a594 <_printf_i+0x164>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	079b      	lsls	r3, r3, #30
 800a640:	d413      	bmi.n	800a66a <_printf_i+0x23a>
 800a642:	68e0      	ldr	r0, [r4, #12]
 800a644:	9b03      	ldr	r3, [sp, #12]
 800a646:	4298      	cmp	r0, r3
 800a648:	bfb8      	it	lt
 800a64a:	4618      	movlt	r0, r3
 800a64c:	e7a4      	b.n	800a598 <_printf_i+0x168>
 800a64e:	2301      	movs	r3, #1
 800a650:	4632      	mov	r2, r6
 800a652:	4649      	mov	r1, r9
 800a654:	4640      	mov	r0, r8
 800a656:	47d0      	blx	sl
 800a658:	3001      	adds	r0, #1
 800a65a:	d09b      	beq.n	800a594 <_printf_i+0x164>
 800a65c:	3501      	adds	r5, #1
 800a65e:	68e3      	ldr	r3, [r4, #12]
 800a660:	9903      	ldr	r1, [sp, #12]
 800a662:	1a5b      	subs	r3, r3, r1
 800a664:	42ab      	cmp	r3, r5
 800a666:	dcf2      	bgt.n	800a64e <_printf_i+0x21e>
 800a668:	e7eb      	b.n	800a642 <_printf_i+0x212>
 800a66a:	2500      	movs	r5, #0
 800a66c:	f104 0619 	add.w	r6, r4, #25
 800a670:	e7f5      	b.n	800a65e <_printf_i+0x22e>
 800a672:	bf00      	nop
 800a674:	0800abe5 	.word	0x0800abe5
 800a678:	0800abf6 	.word	0x0800abf6

0800a67c <_sbrk_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4d06      	ldr	r5, [pc, #24]	; (800a698 <_sbrk_r+0x1c>)
 800a680:	2300      	movs	r3, #0
 800a682:	4604      	mov	r4, r0
 800a684:	4608      	mov	r0, r1
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	f7f7 fe4e 	bl	8002328 <_sbrk>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_sbrk_r+0x1a>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_sbrk_r+0x1a>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	20000334 	.word	0x20000334

0800a69c <__sread>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	460c      	mov	r4, r1
 800a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a4:	f000 f8a0 	bl	800a7e8 <_read_r>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	bfab      	itete	ge
 800a6ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a6b0:	181b      	addge	r3, r3, r0
 800a6b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a6b6:	bfac      	ite	ge
 800a6b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a6ba:	81a3      	strhlt	r3, [r4, #12]
 800a6bc:	bd10      	pop	{r4, pc}

0800a6be <__swrite>:
 800a6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c2:	461f      	mov	r7, r3
 800a6c4:	898b      	ldrh	r3, [r1, #12]
 800a6c6:	05db      	lsls	r3, r3, #23
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	4616      	mov	r6, r2
 800a6ce:	d505      	bpl.n	800a6dc <__swrite+0x1e>
 800a6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f000 f868 	bl	800a7ac <_lseek_r>
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f2:	f000 b817 	b.w	800a724 <_write_r>

0800a6f6 <__sseek>:
 800a6f6:	b510      	push	{r4, lr}
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6fe:	f000 f855 	bl	800a7ac <_lseek_r>
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	bf15      	itete	ne
 800a708:	6560      	strne	r0, [r4, #84]	; 0x54
 800a70a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a70e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a712:	81a3      	strheq	r3, [r4, #12]
 800a714:	bf18      	it	ne
 800a716:	81a3      	strhne	r3, [r4, #12]
 800a718:	bd10      	pop	{r4, pc}

0800a71a <__sclose>:
 800a71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a71e:	f000 b813 	b.w	800a748 <_close_r>
	...

0800a724 <_write_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4d07      	ldr	r5, [pc, #28]	; (800a744 <_write_r+0x20>)
 800a728:	4604      	mov	r4, r0
 800a72a:	4608      	mov	r0, r1
 800a72c:	4611      	mov	r1, r2
 800a72e:	2200      	movs	r2, #0
 800a730:	602a      	str	r2, [r5, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f7f7 fda7 	bl	8002286 <_write>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_write_r+0x1e>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_write_r+0x1e>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	20000334 	.word	0x20000334

0800a748 <_close_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d06      	ldr	r5, [pc, #24]	; (800a764 <_close_r+0x1c>)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f7 fdb3 	bl	80022be <_close>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_close_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_close_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	20000334 	.word	0x20000334

0800a768 <_fstat_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d07      	ldr	r5, [pc, #28]	; (800a788 <_fstat_r+0x20>)
 800a76c:	2300      	movs	r3, #0
 800a76e:	4604      	mov	r4, r0
 800a770:	4608      	mov	r0, r1
 800a772:	4611      	mov	r1, r2
 800a774:	602b      	str	r3, [r5, #0]
 800a776:	f7f7 fdae 	bl	80022d6 <_fstat>
 800a77a:	1c43      	adds	r3, r0, #1
 800a77c:	d102      	bne.n	800a784 <_fstat_r+0x1c>
 800a77e:	682b      	ldr	r3, [r5, #0]
 800a780:	b103      	cbz	r3, 800a784 <_fstat_r+0x1c>
 800a782:	6023      	str	r3, [r4, #0]
 800a784:	bd38      	pop	{r3, r4, r5, pc}
 800a786:	bf00      	nop
 800a788:	20000334 	.word	0x20000334

0800a78c <_isatty_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4d06      	ldr	r5, [pc, #24]	; (800a7a8 <_isatty_r+0x1c>)
 800a790:	2300      	movs	r3, #0
 800a792:	4604      	mov	r4, r0
 800a794:	4608      	mov	r0, r1
 800a796:	602b      	str	r3, [r5, #0]
 800a798:	f7f7 fdad 	bl	80022f6 <_isatty>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d102      	bne.n	800a7a6 <_isatty_r+0x1a>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b103      	cbz	r3, 800a7a6 <_isatty_r+0x1a>
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	20000334 	.word	0x20000334

0800a7ac <_lseek_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4d07      	ldr	r5, [pc, #28]	; (800a7cc <_lseek_r+0x20>)
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	4608      	mov	r0, r1
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	602a      	str	r2, [r5, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f7f7 fda6 	bl	800230c <_lseek>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_lseek_r+0x1e>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_lseek_r+0x1e>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	20000334 	.word	0x20000334

0800a7d0 <__malloc_lock>:
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <__malloc_lock+0x8>)
 800a7d2:	f7ff bb1d 	b.w	8009e10 <__retarget_lock_acquire_recursive>
 800a7d6:	bf00      	nop
 800a7d8:	20000328 	.word	0x20000328

0800a7dc <__malloc_unlock>:
 800a7dc:	4801      	ldr	r0, [pc, #4]	; (800a7e4 <__malloc_unlock+0x8>)
 800a7de:	f7ff bb18 	b.w	8009e12 <__retarget_lock_release_recursive>
 800a7e2:	bf00      	nop
 800a7e4:	20000328 	.word	0x20000328

0800a7e8 <_read_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	4d07      	ldr	r5, [pc, #28]	; (800a808 <_read_r+0x20>)
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	602a      	str	r2, [r5, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	f7f7 fd28 	bl	800224c <_read>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d102      	bne.n	800a806 <_read_r+0x1e>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	b103      	cbz	r3, 800a806 <_read_r+0x1e>
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	20000334 	.word	0x20000334

0800a80c <_init>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr

0800a818 <_fini>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr
 800a824:	0000      	movs	r0, r0
	...

0800a828 <__init_synthesiser_veneer>:
 800a828:	f85f f000 	ldr.w	pc, [pc]	; 800a82c <__init_synthesiser_veneer+0x4>
 800a82c:	00000123 	.word	0x00000123

0800a830 <__run_sweep_veneer>:
 800a830:	f85f f000 	ldr.w	pc, [pc]	; 800a834 <__run_sweep_veneer+0x4>
 800a834:	000004ad 	.word	0x000004ad

0800a838 <__set_aom_atten_veneer>:
 800a838:	f85f f000 	ldr.w	pc, [pc]	; 800a83c <__set_aom_atten_veneer+0x4>
 800a83c:	00000709 	.word	0x00000709

0800a840 <__set_frequency_hz_veneer>:
 800a840:	f85f f000 	ldr.w	pc, [pc]	; 800a844 <__set_frequency_hz_veneer+0x4>
 800a844:	0000038d 	.word	0x0000038d

0800a848 <__timer_delay_veneer>:
 800a848:	f85f f000 	ldr.w	pc, [pc]	; 800a84c <__timer_delay_veneer+0x4>
 800a84c:	000006ad 	.word	0x000006ad

0800a850 <__stop_pop_veneer>:
 800a850:	f85f f000 	ldr.w	pc, [pc]	; 800a854 <__stop_pop_veneer+0x4>
 800a854:	00000859 	.word	0x00000859

0800a858 <__start_pop_veneer>:
 800a858:	f85f f000 	ldr.w	pc, [pc]	; 800a85c <__start_pop_veneer+0x4>
 800a85c:	000007a9 	.word	0x000007a9
